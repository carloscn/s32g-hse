/**************************************************************************
 * FILE NAME: S32G274A.h                                                  *
 * REVISION:  1.5                                                         *
 *                                                                        *
 * DESCRIPTION:                                                           *
 * This file contains all of the register and bit field definitions for   *
 * the S32G274A.                                                          *
 *========================================================================*
 * UPDATE HISTORY                                                         *
 * REV      AUTHOR      DATE       DESCRIPTION OF CHANGE                  *
 * ---   -----------  ---------    ---------------------                  *
 * 1.0     M.Volmer    26-Oct-17    Initial release based                 *
 *                                  on RM rev.1 DraftC                    *
 *                                                                        *
 * 1.1     Taru Shree  14-June-18   Regenerated based on                  *
 *                                  on RM rev.1 DraftF                    *
 *                                                                        *
 * 1.2     Taru Shree  10-Sep-18    Regenerated based on                  *
 *                                  on RM rev.1 DraftI                    *
 *                                                                        *
 * 1.3     Taru Shree  20-March-19  1)Initial release based               *
 *                                  on RM rev.1 DraftM.                   *
 *                                  2)Representation of few registers in  *
 *                                  following blocks is changed           *
 *								    (w.r.t arrays)-                       *
 *                                  FLEXRAY,MC_CGM,SBSW,TMU,SIUL2 and     *
 *                                  XRDC.                                 *
 *                                  3)All internal blocks are removed.    *
 *                                  4)Device name is changed from         *
 *                                  S32G275A to S32G274A.                 *
 * 1.3a    Taru Shree  05-Aug-19    1)NOC, PFE and NCORE blocks are       *
 *                                  removed.                              *
 *                                  2)XRDC registers representation is    *
 *                                  changed(w.r.t arrays).                *
 *                                                                        *
 * 1.4     Taru Shree  29-July-19   1)Initial release based on            *
 *                                  RM rev.1 DraftO.                      *
 *                                  2)Representation of few registers in  *
 *                                  following blocks is changed           *
 *                                  (w.r.t arrays)-                       *
 *                                  CRC - CHANNEL array containing CFG,   *
 *                                  INP, CSTAT and OUTP registers.        *
 *                                  CTU- Individual array of TCR          *
 *                                  registers.                            *
 *                                  DMA_CRC- CONTROL_REGISTER array       *
 *                                  containing CTL, ICRC and FCRC         *
 *                                  registers.                            *
 *                                  FLEXRAY- MB array containing CCSR,    *
 *                                  CCFR, FIDR, IDXR registers instead of *
 *                                  MBCCSR, MBCCFR, MBFIDR and MBIDXR     *
 *                                  respectively.                         *
 *                                  STM- CHANNEL array containing CCR,    *
 *                                  CIR and CMP registers.                *
 *                                  UOTG- GPTIMER array containing        *
 *                                  GPTIMERLD and GPTIMERCTRL registers.  *
 *                                  3)RDU block is removed.               *
 *                                  4)PFE block is removed.               *
 *                                  5)OFF-CC and On-CC NOCs are removed.  *
 *                                  6)OCOTP_GPR block is added.           *
 *                                  7)In FXOSC block, register names have *
 *                                  changed from FXOSC_CTRL, FXOSC_STAT to*
 *                                  CTRL, STAT respectively.              *
 *                                  8)SIUL2-                              *
 *                                  GPDO register- Bitfield name changed  *
 *                                  from PDO_A to PDO_N.                  *
 *                                  GPDI register- Bitfield name changed  *
 *                                  from PDI_A to PDI_N.                  *
 *                                  9)EIM_LLCE is changed to              *
 *                                  LLCE__EIM_LLCE.                       *
 *                                  10)ERM_LLCE is changed to             *
 *                                  LLCE__ERM_LLCE.                       *
 *                                  11)MC_CGM- Register have been         *
 *                                  unrolled.                             *
 * 1.5   Taru Shree  20-Sep-19      1)Initial release based on            *
 *                                    RM Rev.1 Draft P.                   *
 *                                  2)CTU-                                *
 *                                   -Array name is changed               *
 *                                    from CLR_C__CLR_B__CLR_A to CLR_A   *
 *                                   -Register names are changed          *
 *                                    from CLR_A, CLR_B and CLR_C         *
 *                                    to A, B and C respectively.         *
 *                                  3)FLEXRXAY-                           *
 *                                   -Alternate group names are changed   *
 *                                   from TI2CR0_REL_TI2CR0_ABS to TI2CR0 *
 *                                   from TI2CR1_REL_TI2CR1_ABS to TI2CR1 *
 *                                   -Register names are changed          *
 *                                   from TI2CRx_ABS to ABS.              *
 *                                   from TI2CRx_REL to REL.              *
 *                                  4)MU-                                 *
 *                                   Base Addresses are changed           *
 *                                   -MU1__MUB: 0x40210000 to 0x40211000  *
 *                                   -MU2__MUB: 0x40210000 to 0x40212000  *
 *                                   -MU3__MUB: 0x40210000 to 0x40213000  *
 *                                  5)SEMA42-                             *
 *                                   -Register names are changed          *
 *                                   from RSTGT_R to R.                   *
 *                                   from RSTGT_W to W.                   *
 *                                  6)SPI-                                *
 *                                   -Alternate group names are changed   *
 *                                   from CTAR_CTAR_SLAVE to MODE.        *
 *                                   from PUSHR_SLAVE_PUSHR to PUSHR.     *
 *                                  7)REG_PROT-                           *
 *                                    Number of SLBR registers are changed*
 *                                  8)TEST_GPR block is removed.          *
 *                                  9)Few instances of DDR are removed.   *
 *                                  10)SERDES is removed.                 *
 *                                  11)License is updated.                *
 *                                                                        *
 *========================================================================*
 * Copyright 2013-2016 Freescale Semiconductor, Inc.                      *
 * Copyright 2016-2019 NXP                                                *
 *                                                                        *********
 * NXP Confidential. This software is owned or controlled by NXP and may only be  *
 * used strictly in accordance with the applicable license terms. By expressly    *
 * accepting such terms or by downloading, installing, activating and/or otherwise*
 * using the software, you are agreeing that you have read, and that you agree to *
 * comply with and are bound by, such license terms. If you do not agree to be    *
 * bound by the applicable license terms, then you may not retain, install,       *
 * activate or otherwise use the software. The production use license in  *********
 * Section 2.3 is expressly granted for this software.                    *
 *                                                                        *
 **************************************************************************/
/*>>>>>>> NOTE! this file is auto-generated please do not edit it! <<<<<<<*/

/**************************************************************************
 * Example register & bit field write:                                    *
 *                                                                        *
 *  <MODULE>.<REGISTER>.B.<BIT> = 1;                                      *
 *  <MODULE>.<REGISTER>.R       = 0x10000000;                             *
 *                                                                        *
 **************************************************************************/

#ifndef _S32G274A_H_
#define _S32G274A_H_
#include "std_typedefs.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __MWERKS__
#pragma push
#pragma ANSI_strict off
#endif
#ifdef __ghs__
#pragma ghs nowarning 618
#endif
#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
#endif


/* ============================================================================
   =============================== Module: A53_GPR ============================
   ============================================================================ */

typedef union A53_GPR_GPR00_union_tag { /* GPR00 */
  vuint32_t R;
  struct {
    vuint32_t CA53_0_CORE0_AA64NAA32:1; /* AA64nAA32 of core0 of cluster0 */
    vuint32_t CA53_0_CORE1_AA64NAA32:1; /* AA64nAA32 of core1 of cluster0 */
    vuint32_t CA53_1_CORE0_AA64NAA32:1; /* AA64nAA32 of core0 of cluster1 */
    vuint32_t CA53_1_CORE1_AA64NAA32:1; /* AA64nAA32 of core1 of cluster1 */
    vuint32_t CA53_0_BROADCASTCACHEMAINT:1; /* CA53_0_BROADCASTCACHEMAINT */
    vuint32_t CA53_0_BROADCASTINNER:1; /* CA53_0_BROADCASTINNER */
    vuint32_t CA53_0_BROADCASTOUTER:1; /* CA53_0_BROADCASTOUTER */
    vuint32_t CA53_1_BROADCASTCACHEMAINT:1; /* CA53_1_BROADCASTCACHEMAINT */
    vuint32_t CA53_1_BROADCASTINNER:1; /* CA53_1_BROADCASTINNER */
    vuint32_t CA53_1_BROADCASTOUTER:1; /* CA53_1_BROADCASTOUTER */
    vuint32_t CA53_0_CORE0_CFGEND:1;   /* CFGEND of core0 of cluster0 */
    vuint32_t CA53_0_CORE1_CFGEND:1;   /* CFGEND of core1 of cluster0 */
    vuint32_t CA53_0_CORE0_CFGTE:1;    /* CFGEND of core0 of cluster0 */
    vuint32_t CA53_0_CORE1_CFGTE:1;    /* CFGEND of core1 of cluster0 */
    vuint32_t CA53_1_CORE0_CFGEND:1;   /* CFGEND of core0 of cluster1 */
    vuint32_t CA53_1_CORE1_CFGEND:1;   /* CFGEND of core1 of cluster1 */
    vuint32_t CA53_1_CORE0_CFGTE:1;    /* CFGEND of core0 of cluster1 */
    vuint32_t CA53_1_CORE1_CFGTE:1;    /* CFGEND of core1 of cluster1 */
    vuint32_t CA53_0_CORE0_VINITHI:1;  /* VINITHI of core0 of cluster0 */
    vuint32_t CA53_0_CORE1_VINITHI:1;  /* VINITHI of core1 of cluster0 */
    vuint32_t CA53_1_CORE0_VINITHI:1;  /* VINITHI of core0 of cluster1 */
    vuint32_t CA53_1_CORE1_VINITHI:1;  /* VINITHI of core1 of cluster1 */
    vuint32_t _unused_22:2;
    vuint32_t CA53_COUNTER_CLK_DIV_VAL:3; /* CA53 system counter clk divide value */
    vuint32_t _unused_27:5;
  } B;
} A53_GPR_GPR00_tag;

typedef union A53_GPR_GPR01_union_tag { /* GPR01 */
  vuint32_t R;
  struct {
    vuint32_t WFE_EVT_CA53_CLUSTER0:1; /* WFE event for CA53 cluster0 */
    vuint32_t WFE_EVT_CA53_CLUSTER1:1; /* WFE event for CA53 cluster1 */
    vuint32_t _unused_2:6;
    vuint32_t CLUSTER0_CG_EN:1;        /* Cluster0 clock gating enable */
    vuint32_t CLUSTER1_CG_EN:1;        /* Cluster1 clock gating enable */
    vuint32_t _unused_10:14;
    vuint32_t CA53_0_CORE0_CP15SDISABLE:1; /* CP15SDISABLE of core0 of cluster0 */
    vuint32_t CA53_0_CORE1_CP15SDISABLE:1; /* CP15SDISABLE of core1 of cluster0 */
    vuint32_t CA53_1_CORE0_CP15SDISABLE:1; /* CP15SDISABLE of core0 of cluster1 */
    vuint32_t CA53_1_CORE1_CP15SDISABLE:1; /* CP15SDISABLE of core1 of cluster1 */
    vuint32_t _unused_28:4;
  } B;
} A53_GPR_GPR01_tag;

typedef union A53_GPR_GPR06_union_tag { /* GPR06 */
  vuint32_t R;
  struct {
    vuint32_t CA53_LOCKSTEP_EN:1;
    vuint32_t GIC500_LOCKSTEP_EN:2;
    vuint32_t _unused_3:5;
    vuint32_t _unused_8:1;
    vuint32_t _unused_9:23;
  } B;
} A53_GPR_GPR06_tag;

typedef union A53_GPR_GPR07_union_tag { /* GPR07 */
  vuint32_t R;
  struct {
    vuint32_t CA53_0_CLUSTERIDAFF1:8;
    vuint32_t CA53_0_CLUSTERIDAFF2:8;
    vuint32_t CA53_1_CLUSTERIDAFF1:8;
    vuint32_t CA53_1_CLUSTERIDAFF2:8;
  } B;
} A53_GPR_GPR07_tag;

typedef union A53_GPR_GPR08_union_tag { /* GPR08 */
  vuint32_t R;
  struct {
    vuint32_t CA53_0_CORE0_WARM_RESET_STATUS:1; /* Warm Reset Status Of core0 of cluster0 */
    vuint32_t CA53_0_CORE1_WARM_RESET_STATUS:1; /* Warm Reset Status Of core1 of cluster0 */
    vuint32_t CA53_1_CORE0_WARM_RESET_STATUS:1; /* Warm Reset Status Of core0 of cluster1 */
    vuint32_t CA53_1_CORE1_WARM_RESET_STATUS:1; /* Warm Reset Status Of core1 of cluster1 */
    vuint32_t _unused_4:4;
    vuint32_t CLUSTER0_STANDBYWFIL2_STATUS:1; /* STANDBYWFIL2 status Of Cortex-A53 cluster0 */
    vuint32_t CLUSTER1_STANDBYWFIL2_STATUS:1; /* STANDBYWFIL2 status Of Cortex-A53 cluster1 */
    vuint32_t _unused_10:6;
    vuint32_t CA53_0_CORE0_STANDBYWFE_STATUS:1; /* STANDBYWFE Status Of core0 of cluster0 */
    vuint32_t CA53_0_CORE1_STANDBYWFE_STATUS:1; /* STANDBYWFE Status Of core1 of cluster0 */
    vuint32_t CA53_1_CORE0_STANDBYWFE_STATUS:1; /* STANDBYWFE Status Of core0 of cluster1 */
    vuint32_t CA53_1_CORE1_STANDBYWFE_STATUS:1; /* STANDBYWFE Status Of core1 of cluster1 */
    vuint32_t _unused_20:4;
    vuint32_t CA53_0_CORE0_STANDBYWFI_STATUS:1; /* STANDBYWFI Status Of core0 of cluster0 */
    vuint32_t CA53_0_CORE1_STANDBYWFI_STATUS:1; /* STANDBYWFI Status Of core1 of cluster0 */
    vuint32_t CA53_1_CORE0_STANDBYWFI_STATUS:1; /* STANDBYWFI Status Of core0 of cluster1 */
    vuint32_t CA53_1_CORE1_STANDBYWFI_STATUS:1; /* STANDBYWFI Status Of core1 of cluster1 */
    vuint32_t _unused_28:4;
  } B;
} A53_GPR_GPR08_tag;

typedef union A53_GPR_GPR09_union_tag { /* GPR09 */
  vuint32_t R;
  struct {
    vuint32_t CA53_0_CORE0_RVBARADDR_39_32:8; /* Uppermost byte of 40-bit reset vector base address of core0 of CA53 cluster0 */
    vuint32_t CA53_0_CORE1_RVBARADDR_39_32:8; /* Uppermost byte of 40-bit reset vector base address of core1 of CA53 cluster0 */
    vuint32_t CA53_1_CORE0_RVBARADDR_39_32:8; /* Uppermost byte of 40-bit reset vector base address of core0 of CA53 cluster1 */
    vuint32_t CA53_1_CORE1_RVBARADDR_39_32:8; /* Uppermost byte of 40-bit reset vector base address of core1 of CA53 cluster1 */
  } B;
} A53_GPR_GPR09_tag;

typedef union A53_GPR_GPR10_union_tag { /* GPR10 */
  vuint32_t R;
  struct {
    vuint32_t CA53_0_CORE0_CPUMERRSR_HIGH_BITS:32; /* Upper 32 bits of CPUMERRSR register of Cortex-A53 Cluster0 Core0 */
  } B;
} A53_GPR_GPR10_tag;

typedef union A53_GPR_GPR11_union_tag { /* GPR11 */
  vuint32_t R;
  struct {
    vuint32_t CA53_0_CORE0_CPUMERRSR_LOW_BITS:32; /* Lower 32 bits of CPUMERRSR register of Cortex-A53 Cluster0 Core0 */
  } B;
} A53_GPR_GPR11_tag;

typedef union A53_GPR_GPR12_union_tag { /* GPR12 */
  vuint32_t R;
  struct {
    vuint32_t CA53_0_CORE1_CPUMERRSR_HIGH_BITS:32; /* Upper 32 bits of CPUMERRSR register of Cortex-A53 Cluster0 Core1 */
  } B;
} A53_GPR_GPR12_tag;

typedef union A53_GPR_GPR13_union_tag { /* GPR13 */
  vuint32_t R;
  struct {
    vuint32_t CA53_0_CORE1_CPUMERRSR_LOW_BITS:32; /* Lower 32 bits of CPUMERRSR register of Cortex-A53 Cluster0 Core1 */
  } B;
} A53_GPR_GPR13_tag;

typedef union A53_GPR_GPR14_union_tag { /* GPR14 */
  vuint32_t R;
  struct {
    vuint32_t CA53_1_CORE0_CPUMERRSR_HIGH_BITS:32; /* Upper 32 bits of CPUMERRSR register of Cortex-A53 Cluster1 Core0 */
  } B;
} A53_GPR_GPR14_tag;

typedef union A53_GPR_GPR15_union_tag { /* GPR15 */
  vuint32_t R;
  struct {
    vuint32_t CA53_1_CORE0_CPUMERRSR_LOW_BITS:32; /* Lower 32 bits of CPUMERRSR register of Cortex-A53 Cluster1 Core0 */
  } B;
} A53_GPR_GPR15_tag;

typedef union A53_GPR_GPR16_union_tag { /* GPR16 */
  vuint32_t R;
  struct {
    vuint32_t CA53_1_CORE1_CPUMERRSR_HIGH_BITS:32; /* Upper 32 bits of CPUMERRSR register of Cortex-A53 Cluster1 Core1 */
  } B;
} A53_GPR_GPR16_tag;

typedef union A53_GPR_GPR17_union_tag { /* GPR17 */
  vuint32_t R;
  struct {
    vuint32_t CA53_1_CORE1_CPUMERRSR_LOW_BITS:32; /* Lower 32 bits of CPUMERRSR register of Cortex-A53 Cluster1 Core1 */
  } B;
} A53_GPR_GPR17_tag;

typedef union A53_GPR_GPR18_union_tag { /* GPR18 */
  vuint32_t R;
  struct {
    vuint32_t CA53_0_L2MERRSR_HIGH_BITS:32; /* Upper 32 bits of L2MERRSR register of Cortex-A53 Cluster0 */
  } B;
} A53_GPR_GPR18_tag;

typedef union A53_GPR_GPR19_union_tag { /* GPR19 */
  vuint32_t R;
  struct {
    vuint32_t CA53_0_L2MERRSR_LOW_BITS:32; /* Lower 32 bits of L2MERRSR register of Cortex-A53 Cluster0 */
  } B;
} A53_GPR_GPR19_tag;

typedef union A53_GPR_GPR20_union_tag { /* GPR20 */
  vuint32_t R;
  struct {
    vuint32_t CA53_1_L2MERRSR_HIGH_BITS:32; /* Upper 32 bits of L2MERRSR register of Cortex-A53 Cluster1 */
  } B;
} A53_GPR_GPR20_tag;

typedef union A53_GPR_GPR21_union_tag { /* GPR21 */
  vuint32_t R;
  struct {
    vuint32_t CA53_1_L2MERRSR_LOW_BITS:32; /* Lower 32 bits of L2MERRSR register of Cortex-A53 Cluster1 */
  } B;
} A53_GPR_GPR21_tag;

struct A53_GPR_tag {
  A53_GPR_GPR00_tag GPR00;             /* GPR00 */
  A53_GPR_GPR01_tag GPR01;             /* GPR01 */
  uint8_t A53_GPR_reserved0[16];
  A53_GPR_GPR06_tag GPR06;             /* GPR06 */
  A53_GPR_GPR07_tag GPR07;             /* GPR07 */
  A53_GPR_GPR08_tag GPR08;             /* GPR08 */
  A53_GPR_GPR09_tag GPR09;             /* GPR09 */
  A53_GPR_GPR10_tag GPR10;             /* GPR10 */
  A53_GPR_GPR11_tag GPR11;             /* GPR11 */
  A53_GPR_GPR12_tag GPR12;             /* GPR12 */
  A53_GPR_GPR13_tag GPR13;             /* GPR13 */
  A53_GPR_GPR14_tag GPR14;             /* GPR14 */
  A53_GPR_GPR15_tag GPR15;             /* GPR15 */
  A53_GPR_GPR16_tag GPR16;             /* GPR16 */
  A53_GPR_GPR17_tag GPR17;             /* GPR17 */
  A53_GPR_GPR18_tag GPR18;             /* GPR18 */
  A53_GPR_GPR19_tag GPR19;             /* GPR19 */
  A53_GPR_GPR20_tag GPR20;             /* GPR20 */
  A53_GPR_GPR21_tag GPR21;             /* GPR21 */
};


/* ============================================================================
   =============================== Module: ACCEL_PLL ==========================
   ============================================================================ */

typedef union ACCEL_PLL_PLLCR_union_tag { /* PLL Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t PLLPD:1;                 /* PLL power down */
  } B;
} ACCEL_PLL_PLLCR_tag;

typedef union ACCEL_PLL_PLLSR_union_tag { /* PLL status register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t LOCK:1;                  /* Lock status */
    vuint32_t LOL:1;                   /* Loss-Of-Lock flag */
    vuint32_t _unused_4:4;
    vuint32_t _unused_8:3;
    vuint32_t _unused_11:21;
  } B;
} ACCEL_PLL_PLLSR_tag;

typedef union ACCEL_PLL_PLLDV_union_tag { /* PLL Divider */
  vuint32_t R;
  struct {
    vuint32_t MFI:8;                   /* Integer portion of loop divider. */
    vuint32_t _unused_8:4;
    vuint32_t RDIV:3;                  /* Input clock predivider */
    vuint32_t _unused_15:1;
    vuint32_t _unused_16:6;
    vuint32_t _unused_22:3;
    vuint32_t _unused_25:6;
    vuint32_t _unused_31:1;
  } B;
} ACCEL_PLL_PLLDV_tag;

typedef union ACCEL_PLL_PLLFM_union_tag { /* PLL Frequency Modulation */
  vuint32_t R;
  struct {
    vuint32_t STEPNO:11;               /* Number of steps of modulation period/frequency modulation */
    vuint32_t _unused_11:5;
    vuint32_t STEPSIZE:10;             /* Frequency modulation step size */
    vuint32_t _unused_26:3;
    vuint32_t SPREADCTL:1;             /* Modulation type selection */
    vuint32_t SSCGBYP:1;               /* SSCG bypass */
    vuint32_t _unused_31:1;
  } B;
} ACCEL_PLL_PLLFM_tag;

typedef union ACCEL_PLL_PLLFD_union_tag { /* PLL Fractional Divider */
  vuint32_t R;
  struct {
    vuint32_t MFN:15;                  /* Numerator of fractional loop division factor */
    vuint32_t _unused_15:1;
    vuint32_t _unused_16:1;
    vuint32_t _unused_17:1;
    vuint32_t _unused_18:4;
    vuint32_t _unused_22:6;
    vuint32_t _unused_28:1;
    vuint32_t _unused_29:1;
    vuint32_t SDMEN:1;                 /* Sigma-delta modulation enable */
    vuint32_t _unused_31:1;
  } B;
} ACCEL_PLL_PLLFD_tag;

typedef union ACCEL_PLL_PLLCLKMUX_union_tag { /* PLL Clock Multiplexer */
  vuint32_t R;
  struct {
    vuint32_t REFCLKSEL:1;             /* Reference clock select */
    vuint32_t _unused_1:31;
  } B;
} ACCEL_PLL_PLLCLKMUX_tag;

typedef union ACCEL_PLL_PLLODIV_union_tag { /* PLL Output Divider */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved (for internal use only) */
    vuint32_t _unused_2:14;
    vuint32_t DIV:8;                   /* Division value */
    vuint32_t _unused_24:7;
    vuint32_t DE:1;                    /* Divider enable */
  } B;
} ACCEL_PLL_PLLODIV_tag;

struct ACCEL_PLL_tag {
  ACCEL_PLL_PLLCR_tag PLLCR;           /* PLL Control Register */
  ACCEL_PLL_PLLSR_tag PLLSR;           /* PLL status register */
  ACCEL_PLL_PLLDV_tag PLLDV;           /* PLL Divider */
  ACCEL_PLL_PLLFM_tag PLLFM;           /* PLL Frequency Modulation */
  ACCEL_PLL_PLLFD_tag PLLFD;           /* PLL Fractional Divider */
  uint8_t ACCEL_PLL_reserved0[12];
  ACCEL_PLL_PLLCLKMUX_tag PLLCLKMUX;   /* PLL Clock Multiplexer */
  uint8_t ACCEL_PLL_reserved1[92];
  ACCEL_PLL_PLLODIV_tag PLLODIV[2];    /* PLL Output Divider */
};


/* ============================================================================
   =============================== Module: ADC ================================
   ============================================================================ */

typedef union ADC_MCR_union_tag {      /* Main Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t PWDN:1;                  /* Power-down enable */
    vuint32_t _unused_1:3;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t ACKO:1;                  /* Auto-Clock-Off mode enable */
    vuint32_t ABORT:1;                 /* Abort conversion */
    vuint32_t ABORTCHAIN:1;            /* Abort conversion chain */
    vuint32_t ADCLKSE:1;               /* Analog clock frequency select */
    vuint32_t TSAMP:2;                 /* Sample period of calibration conversions */
    vuint32_t NRSMPL:2;                /* Number of averaging samples */
    vuint32_t AVGEN:1;                 /* Average enable */
    vuint32_t CALSTART:1;              /* Calibration start */
    vuint32_t STCL:1;                  /* Self-testing configuration lock */
    vuint32_t CTU_MODE:1;              /* Cross trigger unit mode */
    vuint32_t CTUEN:1;                 /* Cross trigger unit enable */
    vuint32_t _unused_18:2;            /* Reserved */
    vuint32_t JSTART:1;                /* Start injection conversion */
    vuint32_t JEDGE:1;                 /* Injection trigger edge selection */
    vuint32_t JTRGEN:1;                /* Injection external trigger enable */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t NSTART:1;                /* Normal conversion start */
    vuint32_t XSTRTEN:1;               /* External start enable */
    vuint32_t EDGE:1;                  /* Trigger edge select */
    vuint32_t TRGEN:1;                 /* External trigger enable */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t MODE:1;                  /* Normal scan mode select */
    vuint32_t WLSIDE:1;
    vuint32_t OWREN:1;                 /* Overwrite enable */
  } B;
} ADC_MCR_tag;

typedef union ADC_MSR_union_tag {      /* Main Status Register */
  vuint32_t R;
  struct {
    vuint32_t ADCSTATUS:3;             /* ADC status */
    vuint32_t _unused_3:2;             /* Reserved */
    vuint32_t ACKO:1;                  /* Auto-Clock-Off enable */
    vuint32_t _unused_6:3;             /* Reserved */
    vuint32_t CHADDR:7;                /* Channel address */
    vuint32_t CTUSTART:1;              /* CTUSTART is used to show that a CTU conversion is in process. */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t SELF_TEST_S:1;
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t JSTART:1;                /* Injected conversion status */
    vuint32_t _unused_21:2;            /* Reserved */
    vuint32_t JABORT:1;                /* Injected conversion abort status */
    vuint32_t NSTART:1;                /* Normal conversion status */
    vuint32_t _unused_25:4;            /* Reserved */
    vuint32_t CALBUSY:1;               /* Calibration busy */
    vuint32_t CALFAIL:1;               /* Calibration failed */
    vuint32_t CALIBRTD:1;              /* Calibration status */
  } B;
} ADC_MSR_tag;

typedef union ADC_ISR_union_tag {      /* Interrupt Status Register */
  vuint32_t R;
  struct {
    vuint32_t ECH:1;                   /* End of conversion chain */
    vuint32_t EOC:1;                   /* End of channel conversion */
    vuint32_t JECH:1;                  /* Injected end of conversion chain */
    vuint32_t JEOC:1;                  /* Injected channel end of conversion */
    vuint32_t EOCTU:1;                 /* End of CTU conversion */
    vuint32_t _unused_5:27;            /* Reserved */
  } B;
} ADC_ISR_tag;

typedef union ADC_CEOCFR0_union_tag {  /* Channel Pending Register */
  vuint32_t R;
  struct {
    vuint32_t EOC_CH0:1;               /* EOC_CH0 */
    vuint32_t EOC_CH1:1;
    vuint32_t EOC_CH2:1;
    vuint32_t EOC_CH3:1;
    vuint32_t EOC_CH4:1;
    vuint32_t EOC_CH5:1;
    vuint32_t EOC_CH6:1;
    vuint32_t EOC_CH7:1;
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ADC_CEOCFR0_tag;

typedef union ADC_CEOCFR1_union_tag {  /* Channel Pending Register 1 */
  vuint32_t R;
  struct {
    vuint32_t EOC_CH32:1;
    vuint32_t EOC_CH33:1;
    vuint32_t EOC_CH34:1;
    vuint32_t EOC_CH35:1;
    vuint32_t EOC_CH36:1;
    vuint32_t EOC_CH37:1;
    vuint32_t EOC_CH38:1;
    vuint32_t EOC_CH39:1;
    vuint32_t EOC_CH40:1;
    vuint32_t EOC_CH41:1;
    vuint32_t EOC_CH42:1;
    vuint32_t EOC_CH43:1;
    vuint32_t EOC_CH44:1;
    vuint32_t EOC_CH45:1;
    vuint32_t EOC_CH46:1;
    vuint32_t EOC_CH47:1;
    vuint32_t _unused_16:8;            /* Reserved */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} ADC_CEOCFR1_tag;

typedef union ADC_IMR_union_tag {      /* Interrupt Mask Register */
  vuint32_t R;
  struct {
    vuint32_t MSKECH:1;                /* End of chain conversion interrupt mask */
    vuint32_t MSKEOC:1;                /* End of conversion interrupt mask */
    vuint32_t MSKJECH:1;               /* End of injected chain conversion interrupt mask */
    vuint32_t MSKJEOC:1;               /* End of injected conversion interrupt mask */
    vuint32_t MSKEOCTU:1;              /* End of CTU conversion interrupt mask */
    vuint32_t _unused_5:27;            /* Reserved */
  } B;
} ADC_IMR_tag;

typedef union ADC_CIMR0_union_tag {    /* Channel Interrupt Mask Register 0 */
  vuint32_t R;
  struct {
    vuint32_t CIM0:1;
    vuint32_t CIM1:1;
    vuint32_t CIM2:1;
    vuint32_t CIM3:1;
    vuint32_t CIM4:1;
    vuint32_t CIM5:1;
    vuint32_t CIM6:1;
    vuint32_t CIM7:1;
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ADC_CIMR0_tag;

typedef union ADC_CIMR1_union_tag {    /* Channel Interrupt Mask Register 1 */
  vuint32_t R;
  struct {
    vuint32_t CIM32:1;
    vuint32_t CIM33:1;
    vuint32_t CIM34:1;
    vuint32_t CIM35:1;
    vuint32_t CIM36:1;
    vuint32_t CIM37:1;
    vuint32_t CIM38:1;
    vuint32_t CIM39:1;
    vuint32_t CIM40:1;
    vuint32_t CIM41:1;
    vuint32_t CIM42:1;
    vuint32_t CIM43:1;
    vuint32_t CIM44:1;
    vuint32_t CIM45:1;
    vuint32_t CIM46:1;
    vuint32_t CIM47:1;
    vuint32_t _unused_16:8;            /* Reserved */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} ADC_CIMR1_tag;

typedef union ADC_WTISR_union_tag {    /* Watchdog Threshold Interrupt Status Register */
  vuint32_t R;
  struct {
    vuint32_t WDG0L:1;
    vuint32_t WDG0H:1;
    vuint32_t WDG1L:1;
    vuint32_t WDG1H:1;
    vuint32_t WDG2L:1;
    vuint32_t WDG2H:1;
    vuint32_t WDG3L:1;
    vuint32_t WDG3H:1;
    vuint32_t WDG4L:1;
    vuint32_t WDG4H:1;
    vuint32_t WDG5L:1;
    vuint32_t WDG5H:1;
    vuint32_t WDG6L:1;
    vuint32_t WDG6H:1;
    vuint32_t WDG7L:1;
    vuint32_t WDG7H:1;
    vuint32_t _unused_16:2;            /* Reserved */
    vuint32_t _unused_18:2;            /* Reserved */
    vuint32_t _unused_20:2;            /* Reserved */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:2;            /* Reserved */
    vuint32_t _unused_26:2;            /* Reserved */
    vuint32_t _unused_28:2;            /* Reserved */
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} ADC_WTISR_tag;

typedef union ADC_WTIMR_union_tag {    /* Watchdog Threshold Interrupt Mask Register */
  vuint32_t R;
  struct {
    vuint32_t MSKWDG0L:1;
    vuint32_t MSKWDG0H:1;
    vuint32_t MSKWDG1L:1;
    vuint32_t MSKWDG1H:1;
    vuint32_t MSKWDG2L:1;
    vuint32_t MSKWDG2H:1;
    vuint32_t MSKWDG3L:1;
    vuint32_t MSKWDG3H:1;
    vuint32_t MSKWDG4L:1;
    vuint32_t MSKWDG4H:1;
    vuint32_t MSKWDG5L:1;
    vuint32_t MSKWDG5H:1;
    vuint32_t MSKWDG6L:1;
    vuint32_t MSKWDG6H:1;
    vuint32_t MSKWDG7L:1;
    vuint32_t MSKWDG7H:1;
    vuint32_t _unused_16:2;            /* Reserved */
    vuint32_t _unused_18:2;            /* Reserved */
    vuint32_t _unused_20:2;            /* Reserved */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:2;            /* Reserved */
    vuint32_t _unused_26:2;            /* Reserved */
    vuint32_t _unused_28:2;            /* Reserved */
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} ADC_WTIMR_tag;

typedef union ADC_DMAE_union_tag {     /* DMAE Register */
  vuint32_t R;
  struct {
    vuint32_t DMAEN:1;
    vuint32_t DCLR:1;
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} ADC_DMAE_tag;

typedef union ADC_DMAR0_union_tag {    /* DMA Register 0 */
  vuint32_t R;
  struct {
    vuint32_t DMA0:1;
    vuint32_t DMA1:1;
    vuint32_t DMA2:1;
    vuint32_t DMA3:1;
    vuint32_t DMA4:1;
    vuint32_t DMA5:1;
    vuint32_t DMA6:1;
    vuint32_t DMA7:1;
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ADC_DMAR0_tag;

typedef union ADC_DMAR1_union_tag {    /* DMA Register 1 */
  vuint32_t R;
  struct {
    vuint32_t DMA32:1;
    vuint32_t DMA33:1;
    vuint32_t DMA34:1;
    vuint32_t DMA35:1;
    vuint32_t DMA36:1;
    vuint32_t DMA37:1;
    vuint32_t DMA38:1;
    vuint32_t DMA39:1;
    vuint32_t DMA40:1;
    vuint32_t DMA41:1;
    vuint32_t DMA42:1;
    vuint32_t DMA43:1;
    vuint32_t DMA44:1;
    vuint32_t DMA45:1;
    vuint32_t DMA46:1;
    vuint32_t DMA47:1;
    vuint32_t _unused_16:8;            /* Reserved */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} ADC_DMAR1_tag;

typedef union ADC_THRHLR0_union_tag {  /* Analog Watchdog Threshold Register 0 */
  vuint32_t R;
  struct {
    vuint32_t THRL:12;
    vuint32_t _unused_12:4;            /* Reserved */
    vuint32_t THRH:12;                 /* THRH */
    vuint32_t _unused_28:4;            /* Reserved */
  } B;
} ADC_THRHLR0_tag;

typedef union ADC_THRHLR1_union_tag {  /* Analog Watchdog Threshold Register 1 */
  vuint32_t R;
  struct {
    vuint32_t THRL:12;
    vuint32_t _unused_12:4;            /* Reserved */
    vuint32_t THRH:12;
    vuint32_t _unused_28:4;            /* Reserved */
  } B;
} ADC_THRHLR1_tag;

typedef union ADC_THRHLR2_union_tag {  /* Analog Watchdog Threshold Register 2 */
  vuint32_t R;
  struct {
    vuint32_t THRL:12;
    vuint32_t _unused_12:4;            /* Reserved */
    vuint32_t THRH:12;
    vuint32_t _unused_28:4;            /* Reserved */
  } B;
} ADC_THRHLR2_tag;

typedef union ADC_THRHLR3_union_tag {  /* Analog Watchdog Threshold Register 2 */
  vuint32_t R;
  struct {
    vuint32_t THRL:12;
    vuint32_t _unused_12:4;            /* Reserved */
    vuint32_t THRH:12;
    vuint32_t _unused_28:4;            /* Reserved */
  } B;
} ADC_THRHLR3_tag;

typedef union ADC_PSCR_union_tag {     /* Presampling Control Register */
  vuint32_t R;
  struct {
    vuint32_t PRECONV:1;
    vuint32_t PREVAL0:2;               /* Internal presampling voltage selection. */
    vuint32_t PREVAL1:2;               /* Internal presampling voltage selection. */
    vuint32_t _unused_5:2;             /* Reserved */
    vuint32_t _unused_7:25;            /* Reserved */
  } B;
} ADC_PSCR_tag;

typedef union ADC_PSR0_union_tag {     /* Presampling Register 0 */
  vuint32_t R;
  struct {
    vuint32_t PRES0:1;
    vuint32_t PRES1:1;
    vuint32_t PRES2:1;
    vuint32_t PRES3:1;
    vuint32_t PRES4:1;
    vuint32_t PRES5:1;
    vuint32_t PRES6:1;
    vuint32_t PRES7:1;
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ADC_PSR0_tag;

typedef union ADC_PSR1_union_tag {     /* Presampling Register 1 */
  vuint32_t R;
  struct {
    vuint32_t PRES32:1;
    vuint32_t PRES33:1;
    vuint32_t PRES34:1;
    vuint32_t PRES35:1;
    vuint32_t PRES36:1;
    vuint32_t PRES37:1;
    vuint32_t PRES38:1;
    vuint32_t PRES39:1;
    vuint32_t PRES40:1;
    vuint32_t PRES41:1;                /* PRES41 */
    vuint32_t PRES42:1;
    vuint32_t PRES43:1;
    vuint32_t PRES44:1;
    vuint32_t PRES45:1;
    vuint32_t PRES46:1;
    vuint32_t PRES47:1;
    vuint32_t _unused_16:8;            /* Reserved */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} ADC_PSR1_tag;

typedef union ADC_CTR0_union_tag {     /* Conversion Timing Register 0 */
  vuint32_t R;
  struct {
    vuint32_t INPSAMP:8;               /* Sampling phase duration */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ADC_CTR0_tag;

typedef union ADC_CTR1_union_tag {     /* Conversion Timing Register 1 */
  vuint32_t R;
  struct {
    vuint32_t INPSAMP:8;               /* Sampling phase duration */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ADC_CTR1_tag;

typedef union ADC_NCMR0_union_tag {    /* Normal Conversion Mask Register */
  vuint32_t R;
  struct {
    vuint32_t CH0:1;
    vuint32_t CH1:1;
    vuint32_t CH2:1;
    vuint32_t CH3:1;
    vuint32_t CH4:1;
    vuint32_t CH5:1;
    vuint32_t CH6:1;
    vuint32_t CH7:1;
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ADC_NCMR0_tag;

typedef union ADC_NCMR1_union_tag {    /* Normal Conversion Mask Register */
  vuint32_t R;
  struct {
    vuint32_t CH32:1;
    vuint32_t CH33:1;
    vuint32_t CH34:1;
    vuint32_t CH35:1;
    vuint32_t CH36:1;
    vuint32_t CH37:1;
    vuint32_t CH38:1;
    vuint32_t CH39:1;
    vuint32_t CH40:1;
    vuint32_t CH41:1;
    vuint32_t CH42:1;
    vuint32_t CH43:1;
    vuint32_t CH44:1;
    vuint32_t CH45:1;
    vuint32_t CH46:1;
    vuint32_t CH47:1;
    vuint32_t _unused_16:8;            /* Reserved */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} ADC_NCMR1_tag;

typedef union ADC_JCMR0_union_tag {    /* Injected Conversion Mask Register */
  vuint32_t R;
  struct {
    vuint32_t CH0:1;
    vuint32_t CH1:1;
    vuint32_t CH2:1;
    vuint32_t CH3:1;
    vuint32_t CH4:1;
    vuint32_t CH5:1;
    vuint32_t CH6:1;
    vuint32_t CH7:1;
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ADC_JCMR0_tag;

typedef union ADC_JCMR1_union_tag {    /* Injected Conversion Mask Register */
  vuint32_t R;
  struct {
    vuint32_t CH32:1;
    vuint32_t CH33:1;
    vuint32_t CH34:1;
    vuint32_t CH35:1;
    vuint32_t CH36:1;
    vuint32_t CH37:1;
    vuint32_t CH38:1;
    vuint32_t CH39:1;
    vuint32_t CH40:1;
    vuint32_t CH41:1;
    vuint32_t CH42:1;
    vuint32_t CH43:1;
    vuint32_t CH44:1;
    vuint32_t CH45:1;
    vuint32_t CH46:1;
    vuint32_t CH47:1;
    vuint32_t _unused_16:8;            /* Reserved */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} ADC_JCMR1_tag;

typedef union ADC_USROFSGN_union_tag { /* User OFFSET and Gain Register */
  vuint32_t R;
  struct {
    vuint32_t OFFSUSER:8;              /* User defined offset */
    vuint32_t _unused_8:8;             /* Reserved */
    vuint32_t GAINUSER:10;             /* User defined gain value */
    vuint32_t _unused_26:6;            /* Reserved */
  } B;
} ADC_USROFSGN_tag;

typedef union ADC_PDEDR_union_tag {    /* Power Down Exit Delay Register */
  vuint32_t R;
  struct {
    vuint32_t PDED:8;
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ADC_PDEDR_tag;

typedef union ADC_PCDR_union_tag {     /* Precision Channel n Data Register */
  vuint32_t R;
  struct {
    vuint32_t CDATA:12;
    vuint32_t _unused_12:4;            /* Reserved */
    vuint32_t RESULT:2;
    vuint32_t OVERW:1;                 /* Data overwrite */
    vuint32_t VALID:1;                 /* Conversion data valid */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} ADC_PCDR_tag;

typedef union ADC_ICDR_union_tag {     /* Internal Channel n Data Register */
  vuint32_t R;
  struct {
    vuint32_t CDATA:12;
    vuint32_t _unused_12:4;            /* Reserved */
    vuint32_t RESULT:2;
    vuint32_t OVERW:1;                 /* Data overwrite */
    vuint32_t VALID:1;                 /* Conversion data valid */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} ADC_ICDR_tag;

typedef union ADC_THRHLR4_union_tag {  /* Analog Watchdog Threshold Register 4 */
  vuint32_t R;
  struct {
    vuint32_t THRL:12;
    vuint32_t _unused_12:4;            /* Reserved */
    vuint32_t THRH:12;
    vuint32_t _unused_28:4;            /* Reserved */
  } B;
} ADC_THRHLR4_tag;

typedef union ADC_THRHLR5_union_tag {  /* Analog Watchdog Threshold Register 5 */
  vuint32_t R;
  struct {
    vuint32_t THRL:12;
    vuint32_t _unused_12:4;            /* Reserved */
    vuint32_t THRH:12;
    vuint32_t _unused_28:4;            /* Reserved */
  } B;
} ADC_THRHLR5_tag;

typedef union ADC_THRHLR6_union_tag {  /* Analog Watchdog Threshold Register 6 */
  vuint32_t R;
  struct {
    vuint32_t THRL:12;
    vuint32_t _unused_12:4;            /* Reserved */
    vuint32_t THRH:12;
    vuint32_t _unused_28:4;            /* Reserved */
  } B;
} ADC_THRHLR6_tag;

typedef union ADC_THRHLR7_union_tag {  /* Analog Watchdog Threshold Register 7 */
  vuint32_t R;
  struct {
    vuint32_t THRL:12;
    vuint32_t _unused_12:4;            /* Reserved */
    vuint32_t THRH:12;
    vuint32_t _unused_28:4;            /* Reserved */
  } B;
} ADC_THRHLR7_tag;

typedef union ADC_CWSELR0_union_tag {  /* Channel Watchdog Select Register 0 */
  vuint32_t R;
  struct {
    vuint32_t WSEL_CH0:3;
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t WSEL_CH1:3;
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t WSEL_CH2:3;
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t WSEL_CH3:3;
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t WSEL_CH4:3;
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t WSEL_CH5:3;
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t WSEL_CH6:3;
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t WSEL_CH7:3;
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} ADC_CWSELR0_tag;

typedef union ADC_CWSELR4_union_tag {  /* Channel Watchdog Select Register 4 */
  vuint32_t R;
  struct {
    vuint32_t WSEL_CH32:3;
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t WSEL_CH33:3;
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t WSEL_CH34:3;
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t WSEL_CH35:3;
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t WSEL_CH36:3;
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t WSEL_CH37:3;
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t WSEL_CH38:3;
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t WSEL_CH39:3;
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} ADC_CWSELR4_tag;

typedef union ADC_CWSELR5_union_tag {  /* Channel Watchdog Select Register 5 */
  vuint32_t R;
  struct {
    vuint32_t WSEL_CH40:3;
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t WSEL_CH41:3;
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t WSEL_CH42:3;
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t WSEL_CH43:3;
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t WSEL_CH44:3;
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t WSEL_CH45:3;
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t WSEL_CH46:3;
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t WSEL_CH47:3;
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} ADC_CWSELR5_tag;

typedef union ADC_CWENR0_union_tag {   /* Channel Watchdog Enable Register */
  vuint32_t R;
  struct {
    vuint32_t CWEN0:1;
    vuint32_t CWEN1:1;
    vuint32_t CWEN2:1;
    vuint32_t CWEN3:1;
    vuint32_t CWEN4:1;
    vuint32_t CWEN5:1;
    vuint32_t CWEN6:1;
    vuint32_t CWEN7:1;
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ADC_CWENR0_tag;

typedef union ADC_CWENR1_union_tag {   /* Channel Watchdog Enable Register */
  vuint32_t R;
  struct {
    vuint32_t CWEN32:1;
    vuint32_t CWEN33:1;
    vuint32_t CWEN34:1;
    vuint32_t CWEN35:1;
    vuint32_t CWEN36:1;
    vuint32_t CWEN37:1;
    vuint32_t CWEN38:1;
    vuint32_t CWEN39:1;
    vuint32_t CWEN40:1;
    vuint32_t CWEN41:1;
    vuint32_t CWEN42:1;
    vuint32_t CWEN43:1;
    vuint32_t CWEN44:1;
    vuint32_t CWEN45:1;
    vuint32_t CWEN46:1;
    vuint32_t CWEN47:1;
    vuint32_t _unused_16:8;            /* Reserved */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} ADC_CWENR1_tag;

typedef union ADC_AWORR0_union_tag {   /* Analog Watchdog Out of Range Register */
  vuint32_t R;
  struct {
    vuint32_t AWOR_CH0:1;
    vuint32_t AWOR_CH1:1;
    vuint32_t AWOR_CH2:1;
    vuint32_t AWOR_CH3:1;
    vuint32_t AWOR_CH4:1;
    vuint32_t AWOR_CH5:1;
    vuint32_t AWOR_CH6:1;
    vuint32_t AWOR_CH7:1;
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ADC_AWORR0_tag;

typedef union ADC_AWORR1_union_tag {   /* Analog Watchdog Out of Range Register */
  vuint32_t R;
  struct {
    vuint32_t AWOR_CH32:1;
    vuint32_t AWOR_CH33:1;
    vuint32_t AWOR_CH34:1;
    vuint32_t AWOR_CH35:1;
    vuint32_t AWOR_CH36:1;
    vuint32_t AWOR_CH37:1;
    vuint32_t AWOR_CH38:1;
    vuint32_t AWOR_CH39:1;
    vuint32_t AWOR_CH40:1;
    vuint32_t AWOR_CH41:1;
    vuint32_t AWOR_CH42:1;
    vuint32_t AWOR_CH43:1;
    vuint32_t AWOR_CH44:1;
    vuint32_t AWOR_CH45:1;
    vuint32_t AWOR_CH46:1;
    vuint32_t AWOR_CH47:1;
    vuint32_t _unused_16:8;            /* Reserved */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} ADC_AWORR1_tag;

typedef union ADC_STCR1_union_tag {    /* Self-Test Configuration Register 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;             /* Reserved */
    vuint32_t INPSAMP_S:8;
    vuint32_t _unused_16:8;            /* Reserved */
    vuint32_t INPSAMP_C:8;
  } B;
} ADC_STCR1_tag;

typedef union ADC_STCR2_union_tag {    /* Self-Test Configuration Register 2 */
  vuint32_t R;
  struct {
    vuint32_t FMA_S:1;                 /* Fault mapping for BGAP algorithm */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t FMA_C:1;                 /* Fault mapping for algorithm C */
    vuint32_t FMA_WDTERR:1;            /* Fault mapping for watchdog timer error */
    vuint32_t FMA_WDSERR:1;            /* Fault mapping for watchdog sequence error */
    vuint32_t _unused_5:2;             /* Reserved */
    vuint32_t EN:1;                    /* Self-testing channel enable */
    vuint32_t _unused_8:3;             /* Reserved */
    vuint32_t MSKERR_S0:1;             /* Error on algorithm S0 channel interrupt mask */
    vuint32_t MSKERR_S1:1;             /* Error on algorithm S1 channel interrupt mask */
    vuint32_t MSKERR_S2:1;             /* Error on algorithm S2 channel interrupt mask */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t MSKERR_C:1;              /* Error on algorithm C channel interrupt mask */
    vuint32_t MSKWDG_EOA_S:1;          /* End of algorithm S interrupt mask */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t MSKWDG_EOA_C:1;          /* End of algorithm C interrupt mask */
    vuint32_t _unused_19:4;            /* Reserved */
    vuint32_t MSKST_EOC:1;             /* Self-Test EOC interrupt mask */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t MSKWDTERR:1;             /* Watchdog timer error interrupt mask */
    vuint32_t SERR:1;                  /* Error fault injection field (write-only). */
    vuint32_t MSKWDSERR:1;             /* Watchdog sequence error interrupt mask */
    vuint32_t _unused_28:4;            /* Reserved */
  } B;
} ADC_STCR2_tag;

typedef union ADC_STCR3_union_tag {    /* Self-Test Configuration Register 3 */
  vuint32_t R;
  struct {
    vuint32_t MSTEP:5;
    vuint32_t _unused_5:3;             /* Reserved */
    vuint32_t ALG:2;
    vuint32_t _unused_10:22;           /* Reserved */
  } B;
} ADC_STCR3_tag;

typedef union ADC_STBRR_union_tag {    /* Self-Test Baud Rate Register */
  vuint32_t R;
  struct {
    vuint32_t BR:8;                    /* Algorithm baud rate */
    vuint32_t _unused_8:8;             /* Reserved */
    vuint32_t WDT:3;
    vuint32_t _unused_19:13;           /* Reserved */
  } B;
} ADC_STBRR_tag;

typedef union ADC_STSR1_union_tag {    /* Self-Test Status Register 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:5;             /* Reserved */
    vuint32_t STEP_C:5;                /* Algorithm C step number error */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t ERR_S0:1;
    vuint32_t ERR_S1:1;
    vuint32_t ERR_S2:1;
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t ERR_C:1;                 /* Algorithm C error */
    vuint32_t WDG_EOA_S:1;
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t WDG_EOA_C:1;
    vuint32_t _unused_19:4;            /* Reserved */
    vuint32_t ST_EOC:1;                /* Self-test EOC */
    vuint32_t OVERWR:1;                /* Overwrite error */
    vuint32_t WDTERR:1;                /* Watchdog timer error */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t WDSERR:1;                /* Watchdog sequence errors */
    vuint32_t _unused_28:4;            /* Reserved */
  } B;
} ADC_STSR1_tag;

typedef union ADC_STSR2_union_tag {    /* Self-Test Status Register 2 */
  vuint32_t R;
  struct {
    vuint32_t DATA0:12;
    vuint32_t _unused_12:4;            /* Reserved */
    vuint32_t DATA1:12;
    vuint32_t _unused_28:3;            /* Reserved */
    vuint32_t OVFL:1;
  } B;
} ADC_STSR2_tag;

typedef union ADC_STSR3_union_tag {    /* Self-Test Status Register 3 */
  vuint32_t R;
  struct {
    vuint32_t DATA0:12;
    vuint32_t _unused_12:4;            /* Reserved */
    vuint32_t DATA1:12;
    vuint32_t _unused_28:4;            /* Reserved */
  } B;
} ADC_STSR3_tag;

typedef union ADC_STSR4_union_tag {    /* Self-Test Status Register 4 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t DATA1:12;                /* DATA1 */
    vuint32_t _unused_28:4;            /* Reserved */
  } B;
} ADC_STSR4_tag;

typedef union ADC_STDR1_union_tag {    /* Self-Test Data Register 1 */
  vuint32_t R;
  struct {
    vuint32_t TCDATA:12;               /* Test channel converted data */
    vuint32_t _unused_12:6;            /* Reserved */
    vuint32_t OWERWR:1;                /* Overwrite data */
    vuint32_t VALID:1;                 /* Valid data */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} ADC_STDR1_tag;

typedef union ADC_STDR2_union_tag {    /* Self-Test Data Register 2 */
  vuint32_t R;
  struct {
    vuint32_t IDATA:12;                /* Integer data */
    vuint32_t _unused_12:6;            /* Reserved */
    vuint32_t OVERWR:1;                /* Overwrite data */
    vuint32_t VALID:1;                 /* Valid data */
    vuint32_t FDATA:12;                /* Fractional data */
  } B;
} ADC_STDR2_tag;

typedef union ADC_STAW0R_union_tag {   /* Self-Test Analog Watchdog Register */
  vuint32_t R;
  struct {
    vuint32_t THRL:12;                 /* Low threshold value for Algorithm S step0 */
    vuint32_t _unused_12:4;            /* Reserved */
    vuint32_t THRH:12;                 /* High threshold value for Algorithm S step0 */
    vuint32_t _unused_28:2;            /* Reserved */
    vuint32_t WDTE:1;                  /* Watchdog timer enable (related to the Algorithm S) */
    vuint32_t AWDE:1;
  } B;
} ADC_STAW0R_tag;

typedef union ADC_STAW1AR_union_tag {  /* Self-Test Analog Watchdog Register */
  vuint32_t R;
  struct {
    vuint32_t THRL:12;
    vuint32_t _unused_12:4;            /* Reserved */
    vuint32_t THRH:12;
    vuint32_t _unused_28:3;            /* Reserved */
    vuint32_t AWDE:1;
  } B;
} ADC_STAW1AR_tag;

typedef union ADC_STAW1BR_union_tag {  /* Self-Test Analog Watchdog Register 1B */
  vuint32_t R;
  struct {
    vuint32_t THRL:12;
    vuint32_t _unused_12:4;            /* Reserved */
    vuint32_t THRH:12;
    vuint32_t _unused_28:4;            /* Reserved */
  } B;
} ADC_STAW1BR_tag;

typedef union ADC_STAW2R_union_tag {   /* Self-Test Analog Watchdog Register 2 */
  vuint32_t R;
  struct {
    vuint32_t THRL:12;                 /* Threshold level low */
    vuint32_t _unused_12:19;           /* Reserved */
    vuint32_t AWDE:1;
  } B;
} ADC_STAW2R_tag;

typedef union ADC_STAW3R_union_tag {   /* Self-Test Analog Watchdog Register 3 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:32;            /* Reserved */
  } B;
} ADC_STAW3R_tag;

typedef union ADC_STAW4R_union_tag {   /* Self-Test Analog Watchdog Register 4 */
  vuint32_t R;
  struct {
    vuint32_t THRL:12;                 /* Low threshold value for step0 of Algorithm C. */
    vuint32_t _unused_12:4;            /* Reserved */
    vuint32_t THRH:12;                 /* High threshold value for step0 of Algorithm C. */
    vuint32_t _unused_28:2;            /* Reserved */
    vuint32_t WDTE:1;                  /* Watchdog timer enable (related to Algorithm C). */
    vuint32_t AWDE:1;                  /* Analog watchdog enable (related to Algorithm C) */
  } B;
} ADC_STAW4R_tag;

typedef union ADC_STAW5R_union_tag {   /* Self-Test Analog Watchdog Register 5 */
  vuint32_t R;
  struct {
    vuint32_t THRL:12;                 /* Low threshold value for step0 of Algorithm C. */
    vuint32_t _unused_12:4;            /* Reserved */
    vuint32_t THRH:12;                 /* High threshold value for step N of Algorithm C (N = 1 to CS-1). */
    vuint32_t _unused_28:4;            /* Reserved */
  } B;
} ADC_STAW5R_tag;

typedef union ADC_CALSTAT_union_tag {  /* Calibration Status register */
  vuint32_t R;
  struct {
    vuint32_t STAT_1:1;                /* Status of calibration step 1 */
    vuint32_t STAT_2:1;                /* Status of calibration step 2 */
    vuint32_t STAT_3:1;                /* Status of calibration step 3 */
    vuint32_t STAT_4:1;                /* Status of calibration step 4 */
    vuint32_t STAT_5:1;                /* Status of calibration step 5 */
    vuint32_t STAT_6:1;                /* Status of calibration step 6 */
    vuint32_t STAT_7:1;                /* Status of calibration step 7 */
    vuint32_t STAT_8:1;                /* Status of calibration step 8 */
    vuint32_t STAT_9:1;                /* Status of calibration step 9 */
    vuint32_t STAT_10:1;               /* Status of calibration step 10 */
    vuint32_t STAT_11:1;               /* Status of calibration step 11 */
    vuint32_t STAT_12:1;               /* Status of Calibration step 12 */
    vuint32_t STAT_13:1;               /* Status of calibration step 13 */
    vuint32_t STAT_14:1;               /* Status of calibration step 14 */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t TEST_RESULT:16;          /* TEST_RESULT */
  } B;
} ADC_CALSTAT_tag;

struct ADC_tag {
  ADC_MCR_tag MCR;                     /* Main Configuration Register */
  ADC_MSR_tag MSR;                     /* Main Status Register */
  uint8_t ADC_reserved0[8];
  ADC_ISR_tag ISR;                     /* Interrupt Status Register */
  ADC_CEOCFR0_tag CEOCFR0;             /* Channel Pending Register */
  ADC_CEOCFR1_tag CEOCFR1;             /* Channel Pending Register 1 */
  uint8_t ADC_reserved1[4];
  ADC_IMR_tag IMR;                     /* Interrupt Mask Register */
  ADC_CIMR0_tag CIMR0;                 /* Channel Interrupt Mask Register 0 */
  ADC_CIMR1_tag CIMR1;                 /* Channel Interrupt Mask Register 1 */
  uint8_t ADC_reserved2[4];
  ADC_WTISR_tag WTISR;                 /* Watchdog Threshold Interrupt Status Register */
  ADC_WTIMR_tag WTIMR;                 /* Watchdog Threshold Interrupt Mask Register */
  uint8_t ADC_reserved3[8];
  ADC_DMAE_tag DMAE;                   /* DMAE Register */
  ADC_DMAR0_tag DMAR0;                 /* DMA Register 0 */
  ADC_DMAR1_tag DMAR1;                 /* DMA Register 1 */
  uint8_t ADC_reserved4[20];
  ADC_THRHLR0_tag THRHLR0;             /* Analog Watchdog Threshold Register 0 */
  ADC_THRHLR1_tag THRHLR1;             /* Analog Watchdog Threshold Register 1 */
  ADC_THRHLR2_tag THRHLR2;             /* Analog Watchdog Threshold Register 2 */
  ADC_THRHLR3_tag THRHLR3;             /* Analog Watchdog Threshold Register 2 */
  uint8_t ADC_reserved5[16];
  ADC_PSCR_tag PSCR;                   /* Presampling Control Register */
  ADC_PSR0_tag PSR0;                   /* Presampling Register 0 */
  ADC_PSR1_tag PSR1;                   /* Presampling Register 1 */
  uint8_t ADC_reserved6[8];
  ADC_CTR0_tag CTR0;                   /* Conversion Timing Register 0 */
  ADC_CTR1_tag CTR1;                   /* Conversion Timing Register 1 */
  uint8_t ADC_reserved7[8];
  ADC_NCMR0_tag NCMR0;                 /* Normal Conversion Mask Register */
  ADC_NCMR1_tag NCMR1;                 /* Normal Conversion Mask Register */
  uint8_t ADC_reserved8[8];
  ADC_JCMR0_tag JCMR0;                 /* Injected Conversion Mask Register */
  ADC_JCMR1_tag JCMR1;                 /* Injected Conversion Mask Register */
  uint8_t ADC_reserved9[4];
  ADC_USROFSGN_tag USROFSGN;           /* User OFFSET and Gain Register */
  uint8_t ADC_reserved10[4];
  ADC_PDEDR_tag PDEDR;                 /* Power Down Exit Delay Register */
  uint8_t ADC_reserved11[52];
  ADC_PCDR_tag PCDR[8];                /* Precision Channel n Data Register */
  uint8_t ADC_reserved12[96];
  ADC_ICDR_tag ICDR[16];               /* Internal Channel n Data Register */
  uint8_t ADC_reserved13[192];
  ADC_THRHLR4_tag THRHLR4;             /* Analog Watchdog Threshold Register 4 */
  ADC_THRHLR5_tag THRHLR5;             /* Analog Watchdog Threshold Register 5 */
  ADC_THRHLR6_tag THRHLR6;             /* Analog Watchdog Threshold Register 6 */
  ADC_THRHLR7_tag THRHLR7;             /* Analog Watchdog Threshold Register 7 */
  uint8_t ADC_reserved14[32];
  ADC_CWSELR0_tag CWSELR0;             /* Channel Watchdog Select Register 0 */
  uint8_t ADC_reserved15[12];
  ADC_CWSELR4_tag CWSELR4;             /* Channel Watchdog Select Register 4 */
  ADC_CWSELR5_tag CWSELR5;             /* Channel Watchdog Select Register 5 */
  uint8_t ADC_reserved16[24];
  ADC_CWENR0_tag CWENR0;               /* Channel Watchdog Enable Register */
  ADC_CWENR1_tag CWENR1;               /* Channel Watchdog Enable Register */
  uint8_t ADC_reserved17[8];
  ADC_AWORR0_tag AWORR0;               /* Analog Watchdog Out of Range Register */
  ADC_AWORR1_tag AWORR1;               /* Analog Watchdog Out of Range Register */
  uint8_t ADC_reserved18[72];
  ADC_STCR1_tag STCR1;                 /* Self-Test Configuration Register 1 */
  ADC_STCR2_tag STCR2;                 /* Self-Test Configuration Register 2 */
  ADC_STCR3_tag STCR3;                 /* Self-Test Configuration Register 3 */
  ADC_STBRR_tag STBRR;                 /* Self-Test Baud Rate Register */
  ADC_STSR1_tag STSR1;                 /* Self-Test Status Register 1 */
  ADC_STSR2_tag STSR2;                 /* Self-Test Status Register 2 */
  ADC_STSR3_tag STSR3;                 /* Self-Test Status Register 3 */
  ADC_STSR4_tag STSR4;                 /* Self-Test Status Register 4 */
  uint8_t ADC_reserved19[16];
  ADC_STDR1_tag STDR1;                 /* Self-Test Data Register 1 */
  ADC_STDR2_tag STDR2;                 /* Self-Test Data Register 2 */
  uint8_t ADC_reserved20[8];
  ADC_STAW0R_tag STAW0R;               /* Self-Test Analog Watchdog Register */
  ADC_STAW1AR_tag STAW1AR;             /* Self-Test Analog Watchdog Register */
  ADC_STAW1BR_tag STAW1BR;             /* Self-Test Analog Watchdog Register 1B */
  ADC_STAW2R_tag STAW2R;               /* Self-Test Analog Watchdog Register 2 */
  ADC_STAW3R_tag STAW3R;               /* Self-Test Analog Watchdog Register 3 */
  ADC_STAW4R_tag STAW4R;               /* Self-Test Analog Watchdog Register 4 */
  ADC_STAW5R_tag STAW5R;               /* Self-Test Analog Watchdog Register 5 */
  ADC_CALSTAT_tag CALSTAT;             /* Calibration Status register */
};


/* ============================================================================
   =============================== Module: ATP ================================
   ============================================================================ */

typedef union ATP_PLLC_union_tag {     /* PLL Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:23;
    vuint32_t PLLBYP:1;                /* PLL Clock Bypass */
    vuint32_t _unused_24:7;
    vuint32_t PLLPD:1;                 /* PLL Reset */
  } B;
} ATP_PLLC_tag;

typedef union ATP_PLLS_union_tag {     /* PLL Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t LOCK:1;                  /* PLL Lock Status */
    vuint32_t LOL:1;                   /* PLL Loss of Lock Status */
    vuint32_t _unused_4:28;
  } B;
} ATP_PLLS_tag;

typedef union ATP_PLLDIV_union_tag {   /* PLL Divider */
  vuint32_t R;
  struct {
    vuint32_t MFID:8;                  /* PLL Multiplication Factor Integer Divider */
    vuint32_t _unused_8:4;
    vuint32_t RDIV:3;                  /* PLL Input Clock Predivider */
    vuint32_t _unused_15:1;
    vuint32_t ODIV1:6;                 /* PLL Output Division Factor 1 */
    vuint32_t _unused_22:3;
    vuint32_t _unused_25:6;
    vuint32_t _unused_31:1;
  } B;
} ATP_PLLDIV_tag;

typedef union ATP_PLLCKMUX_union_tag { /* PLL Clock MUX */
  vuint32_t R;
  struct {
    vuint32_t REFCLKSEL:2;             /* Reference Clock Selection */
    vuint32_t _unused_2:30;
  } B;
} ATP_PLLCKMUX_tag;

typedef union ATP_ALS_union_tag {      /* AL Status */
  vuint32_t R;
  struct {
    vuint32_t AS:1;                    /* Aurora Status */
    vuint32_t CS:1;                    /* Channel Status */
    vuint32_t TS:2;                    /* Training Status */
    vuint32_t _unused_4:5;
    vuint32_t PRST:1;                  /* Channel Partner Reset */
    vuint32_t TXCFG:3;                 /* TX Lane Configuration */
    vuint32_t _unused_13:2;
    vuint32_t _unused_15:4;
    vuint32_t _unused_19:1;
    vuint32_t _unused_20:1;
    vuint32_t _unused_21:1;
    vuint32_t _unused_22:10;
  } B;
} ATP_ALS_tag;

typedef union ATP_ALGC_union_tag {     /* AL General Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CCOEN:1;                 /* Clock Compensation Override Enable */
    vuint32_t CRCEN:1;                 /* CRC Enable */
    vuint32_t _unused_4:4;
    vuint32_t _unused_8:1;
    vuint32_t _unused_9:1;
    vuint32_t _unused_10:3;
    vuint32_t _unused_13:1;
    vuint32_t PCRST:1;                 /* Protocol Converter Reset */
    vuint32_t _unused_15:1;
    vuint32_t _unused_16:1;
    vuint32_t _unused_17:1;
    vuint32_t _unused_18:12;
    vuint32_t _unused_30:1;
    vuint32_t RST:1;                   /* Aurora Channel Reset */
  } B;
} ATP_ALGC_tag;

typedef union ATP_ALTC_union_tag {     /* AL Training Control */
  vuint32_t R;
  struct {
    vuint32_t VTC:4;                   /* Verify Timer Count */
    vuint32_t _unused_4:6;
    vuint32_t BTC:4;                   /* Bond Timer Count */
    vuint32_t _unused_14:5;
    vuint32_t ATC:4;                   /* Align Timer Count */
    vuint32_t _unused_23:3;
    vuint32_t _unused_26:1;
    vuint32_t _unused_27:1;
    vuint32_t VHD:1;                   /* Hold in Verify */
    vuint32_t BHD:1;                   /* Hold in Bond */
    vuint32_t AHD:1;                   /* Hold in Align */
    vuint32_t STE:1;                   /* Static Training Enable */
  } B;
} ATP_ALTC_tag;

typedef union ATP_LVDSTX_union_tag {   /* LVDS TX IO Configuration */
  vuint32_t R;
  struct {
    vuint32_t TXAMODE:1;
    vuint32_t CREF_EN:1;               /* Current Reference Enable */
    vuint32_t TX_TREF_EN:1;            /* TX LVDS Termination Reference Enable */
    vuint32_t _unused_3:2;
    vuint32_t PREMPH:2;                /* Pre-Emphasis Configuration */
    vuint32_t _unused_7:1;
    vuint32_t _unused_8:4;
    vuint32_t TX_CONF:4;               /* LVDS PADS TX Control Configuration */
    vuint32_t PADS_TX_CONF_EN:1;       /* PADS TX Configuration Enable */
    vuint32_t _unused_17:15;
  } B;
} ATP_LVDSTX_tag;

typedef union ATP_LVDSRX_union_tag {   /* LVDS RX IO Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;
    vuint32_t RXICE:1;
    vuint32_t _unused_2:1;
    vuint32_t RXCB:1;                  /* RX LVDS Current Boost */
    vuint32_t _unused_4:12;
    vuint32_t RX_TREF_EN:1;            /* RX LVDS Termination Reference Enable */
    vuint32_t _unused_17:15;
  } B;
} ATP_LVDSRX_tag;

typedef union ATP_LVDSTXOBE_union_tag { /* LVDS TX OBE Configuration */
  vuint32_t R;
  struct {
    vuint32_t OBETX0:1;
    vuint32_t OBETX1:1;
    vuint32_t OBETX2:1;
    vuint32_t OBETX3:1;
    vuint32_t _unused_4:28;
  } B;
} ATP_LVDSTXOBE_tag;

typedef union ATP_CIAC_union_tag {     /* CIA Control */
  vuint32_t R;
  struct {
    vuint32_t NUM_LANE:4;              /* Number of Aurora Lanes */
    vuint32_t TPIUCM:3;                /* TPIU Control Mode */
    vuint32_t _unused_7:1;
    vuint32_t DBITR:1;
    vuint32_t DBYTER:1;
    vuint32_t _unused_10:4;
    vuint32_t _unused_14:2;
    vuint32_t _unused_16:12;
    vuint32_t _unused_28:4;
  } B;
} ATP_CIAC_tag;

typedef union ATP_ATPE_union_tag {     /* Aurora Trace Port Enable */
  vuint32_t R;
  struct {
    vuint32_t ATPEN:1;
    vuint32_t APHYEN:1;
    vuint32_t _unused_2:30;
  } B;
} ATP_ATPE_tag;

typedef union ATP_ITCTRL_union_tag {   /* Integration Mode Control */
  vuint32_t R;
  struct {
    vuint32_t IME:1;
    vuint32_t _unused_1:31;
  } B;
} ATP_ITCTRL_tag;

typedef union ATP_CLAIMSET_union_tag { /* Claim Tag Set */
  vuint32_t R;
  struct {
    vuint32_t SET:32;
  } B;
} ATP_CLAIMSET_tag;

typedef union ATP_CLAIMCLR_union_tag { /* Claim Tag Clear */
  vuint32_t R;
  struct {
    vuint32_t CLR:32;
  } B;
} ATP_CLAIMCLR_tag;

typedef union ATP_DEVAFF0_union_tag {  /* Device Affinity 0 */
  vuint32_t R;
  struct {
    vuint32_t DEVAFF0:32;              /* Value of this field is set to 0x24. */
  } B;
} ATP_DEVAFF0_tag;

typedef union ATP_DEVAFF1_union_tag {  /* Device Affinity 1 */
  vuint32_t R;
  struct {
    vuint32_t DEVAFF1:32;              /* Value of this field is set to 0x24. */
  } B;
} ATP_DEVAFF1_tag;

typedef union ATP_LAR_union_tag {      /* Lock Access Register */
  vuint32_t R;
  struct {
    vuint32_t KEY:32;
  } B;
} ATP_LAR_tag;

typedef union ATP_LSR_union_tag {      /* Lock Status Register */
  vuint32_t R;
  struct {
    vuint32_t SLI:1;
    vuint32_t SLK:1;
    vuint32_t NTT:1;
    vuint32_t _unused_3:29;
  } B;
} ATP_LSR_tag;

typedef union ATP_AUTHSTATUS_union_tag { /* Authentication Status */
  vuint32_t R;
  struct {
    vuint32_t AUTHSTATUS:8;
    vuint32_t _unused_8:24;
  } B;
} ATP_AUTHSTATUS_tag;

typedef union ATP_DEVARCH_union_tag {  /* Device Architecture */
  vuint32_t R;
  struct {
    vuint32_t ARCHID:16;               /* Architecture ID */
    vuint32_t REVISION:4;              /* Architecture revision */
    vuint32_t PRESENT:1;               /* Indicates the presence of this register. */
    vuint32_t ARCHITECT:11;            /* Defines the architect of the component. */
  } B;
} ATP_DEVARCH_tag;

typedef union ATP_DEVID2_union_tag {   /* Device Configuration 2 */
  vuint32_t R;
  struct {
    vuint32_t DEVID2:32;
  } B;
} ATP_DEVID2_tag;

typedef union ATP_DEVID1_union_tag {   /* Device Configuration 1 */
  vuint32_t R;
  struct {
    vuint32_t DEVID1:32;
  } B;
} ATP_DEVID1_tag;

typedef union ATP_DEVID_union_tag {    /* Device Configuration */
  vuint32_t R;
  struct {
    vuint32_t DEVID:32;
  } B;
} ATP_DEVID_tag;

typedef union ATP_DEVTYPE_union_tag {  /* Device Type Identifier */
  vuint32_t R;
  struct {
    vuint32_t MAJOR:4;                 /* Major Type */
    vuint32_t SUB:4;                   /* Sub Type */
    vuint32_t _unused_8:24;
  } B;
} ATP_DEVTYPE_tag;

typedef union ATP_PIDR4_union_tag {    /* Peripheral Identification Register 4 */
  vuint32_t R;
  struct {
    vuint32_t DES_2:4;                 /* JEP106 Continuation Code */
    vuint32_t SIZE:4;                  /* 4KB Count */
    vuint32_t _unused_8:24;
  } B;
} ATP_PIDR4_tag;

typedef union ATP_PIDR0_union_tag {    /* Peripheral Identification Register 0 */
  vuint32_t R;
  struct {
    vuint32_t PART_0:8;                /* Part number, bits[7:0] */
    vuint32_t _unused_8:24;
  } B;
} ATP_PIDR0_tag;

typedef union ATP_PIDR1_union_tag {    /* Peripheral Identification Register 1 */
  vuint32_t R;
  struct {
    vuint32_t PART_1:4;                /* Part number, bits[11:8] */
    vuint32_t DES_0:4;                 /* JEP106 identification code, bits[3:0] */
    vuint32_t _unused_8:24;
  } B;
} ATP_PIDR1_tag;

typedef union ATP_PIDR2_union_tag {    /* Peripheral Identification Register 2 */
  vuint32_t R;
  struct {
    vuint32_t DES_1:3;                 /* JEP106 identification code, bits[6:4] */
    vuint32_t JEDEC:1;
    vuint32_t REVISION:4;              /* Revision */
    vuint32_t _unused_8:24;
  } B;
} ATP_PIDR2_tag;

typedef union ATP_PIDR3_union_tag {    /* Peripheral Identification Register 3 */
  vuint32_t R;
  struct {
    vuint32_t REVAND:4;                /* RevAnd */
    vuint32_t CMOD:4;                  /* Customer Modified */
    vuint32_t _unused_8:24;
  } B;
} ATP_PIDR3_tag;

typedef union ATP_CIDR0_union_tag {    /* Component Identification Register 0 */
  vuint32_t R;
  struct {
    vuint32_t PRMBL_0:8;               /* Preamble */
    vuint32_t _unused_8:24;
  } B;
} ATP_CIDR0_tag;

typedef union ATP_CIDR1_union_tag {    /* Component Identification Register 1 */
  vuint32_t R;
  struct {
    vuint32_t PRMBL_1:4;               /* Preamble */
    vuint32_t CLASS:4;                 /* Component class */
    vuint32_t _unused_8:24;
  } B;
} ATP_CIDR1_tag;

typedef union ATP_CIDR2_union_tag {    /* Component Identification Register 2 */
  vuint32_t R;
  struct {
    vuint32_t PRMBL_2:8;               /* Preamble */
    vuint32_t _unused_8:24;
  } B;
} ATP_CIDR2_tag;

typedef union ATP_CIDR3_union_tag {    /* Component Identification Register 3 */
  vuint32_t R;
  struct {
    vuint32_t PRMBL_3:8;               /* Preamble */
    vuint32_t _unused_8:24;
  } B;
} ATP_CIDR3_tag;

struct ATP_tag {
  ATP_PLLC_tag PLLC;                   /* PLL Control */
  ATP_PLLS_tag PLLS;                   /* PLL Status */
  ATP_PLLDIV_tag PLLDIV;               /* PLL Divider */
  uint8_t ATP_reserved0[20];
  ATP_PLLCKMUX_tag PLLCKMUX;           /* PLL Clock MUX */
  uint8_t ATP_reserved1[732];
  ATP_ALS_tag ALS;                     /* AL Status */
  uint8_t ATP_reserved2[4];
  ATP_ALGC_tag ALGC;                   /* AL General Control */
  ATP_ALTC_tag ALTC;                   /* AL Training Control */
  uint8_t ATP_reserved3[304];
  ATP_LVDSTX_tag LVDSTX;               /* LVDS TX IO Configuration */
  ATP_LVDSRX_tag LVDSRX;               /* LVDS RX IO Configuration */
  ATP_LVDSTXOBE_tag LVDSTXOBE;         /* LVDS TX OBE Configuration */
  uint8_t ATP_reserved4[52];
  ATP_CIAC_tag CIAC;                   /* CIA Control */
  uint8_t ATP_reserved5[4];
  ATP_ATPE_tag ATPE;                   /* Aurora Trace Port Enable */
  uint8_t ATP_reserved6[2676];
  ATP_ITCTRL_tag ITCTRL;               /* Integration Mode Control */
  uint8_t ATP_reserved7[156];
  ATP_CLAIMSET_tag CLAIMSET;           /* Claim Tag Set */
  ATP_CLAIMCLR_tag CLAIMCLR;           /* Claim Tag Clear */
  ATP_DEVAFF0_tag DEVAFF0;             /* Device Affinity 0 */
  ATP_DEVAFF1_tag DEVAFF1;             /* Device Affinity 1 */
  ATP_LAR_tag LAR;                     /* Lock Access Register */
  ATP_LSR_tag LSR;                     /* Lock Status Register */
  ATP_AUTHSTATUS_tag AUTHSTATUS;       /* Authentication Status */
  ATP_DEVARCH_tag DEVARCH;             /* Device Architecture */
  ATP_DEVID2_tag DEVID2;               /* Device Configuration 2 */
  ATP_DEVID1_tag DEVID1;               /* Device Configuration 1 */
  ATP_DEVID_tag DEVID;                 /* Device Configuration */
  ATP_DEVTYPE_tag DEVTYPE;             /* Device Type Identifier */
  ATP_PIDR4_tag PIDR4;                 /* Peripheral Identification Register 4 */
  uint8_t ATP_reserved8[12];
  ATP_PIDR0_tag PIDR0;                 /* Peripheral Identification Register 0 */
  ATP_PIDR1_tag PIDR1;                 /* Peripheral Identification Register 1 */
  ATP_PIDR2_tag PIDR2;                 /* Peripheral Identification Register 2 */
  ATP_PIDR3_tag PIDR3;                 /* Peripheral Identification Register 3 */
  ATP_CIDR0_tag CIDR0;                 /* Component Identification Register 0 */
  ATP_CIDR1_tag CIDR1;                 /* Component Identification Register 1 */
  ATP_CIDR2_tag CIDR2;                 /* Component Identification Register 2 */
  ATP_CIDR3_tag CIDR3;                 /* Component Identification Register 3 */
};


/* ============================================================================
   =============================== Module: BOOT ===============================
   ============================================================================ */

typedef union BOOT_BOOT_GPR_BMR1_union_tag { /* Boot Configuration Register 1 */
  vuint32_t R;
  struct {
    vuint32_t BOOT_CFG:32;             /* Boot Configuration */
  } B;
} BOOT_BOOT_GPR_BMR1_tag;

typedef union BOOT_BOOT_GPR_BMR2_union_tag { /* Boot Configuration Register 2 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;
    vuint32_t FUSE_SEL:1;              /* FUSE_SEL value from fuses. This fuse indicates if boot configuration is to be fetched from RCON Pads or BOOT_CFG fuses. */
    vuint32_t _unused_5:19;
    vuint32_t BMODE2:1;                /* BMOD2 pin value latched at phase3 deassertion. */
    vuint32_t BMODE1:1;                /* BMOD1 pin value latched at phase3 deassertion. */
    vuint32_t _unused_26:6;
  } B;
} BOOT_BOOT_GPR_BMR2_tag;

typedef union BOOT_SRC_POR_CTRL_REG_union_tag { /* SRC POR Control Register */
  vuint32_t R;
  struct {
    vuint32_t HSE_FW_ROLLBACK_COUNT_A:8; /* Control to HSE FW primary image has been passed number of times by BootROM, but HSE FW failed to write valid HSE_FW_ROLLBACK_MARKER. */
    vuint32_t HSE_FW_ROLLBACK_COUNT_B:8; /* Control to HSE FW backup image has been passed number of times by BootROM, but HSE FW failed to write valid HSE_FW_ROLLBACK_MARKER. */
    vuint32_t HSE_FW_ROLLBACK_MARKER:16; /* HSE roll back marker written by HSE FW. BootROM defines only 0xBADA as valid marker. */
  } B;
} BOOT_SRC_POR_CTRL_REG_tag;

struct BOOT_tag {
  BOOT_BOOT_GPR_BMR1_tag BOOT_GPR_BMR1; /* Boot Configuration Register 1 */
  BOOT_BOOT_GPR_BMR2_tag BOOT_GPR_BMR2; /* Boot Configuration Register 2 */
  uint8_t BOOT_reserved0[48];
  BOOT_SRC_POR_CTRL_REG_tag SRC_POR_CTRL_REG; /* SRC POR Control Register */
};


/* ============================================================================
   =============================== Module: CAIU0 ==============================
   ============================================================================ */

typedef union CAIU0_CAIUTC_union_tag { /* CAIU Transaction Control */
  vuint32_t R;
  struct {
    vuint32_t TRANSEN:1;               /* Agent Transaction Enable */
    vuint32_t ISOLEN:1;                /* Agent Isolation Enable */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} CAIU0_CAIUTC_tag;

typedef union CAIU0_CAIUTA_union_tag { /* CAIU Transaction Activity */
  vuint32_t R;
  struct {
    vuint32_t TRANSACTV:1;             /* Transaction Active */
    vuint32_t SNPACTV:1;               /* Snoop Transaction Active */
    vuint32_t COHACTV:1;               /* Coherent Transaction Active */
    vuint32_t _unused_3:29;            /* Reserved */
  } B;
} CAIU0_CAIUTA_tag;

typedef union CAIU0_CAIUCEC_union_tag { /* CAIU Correctable Error Control */
  vuint32_t R;
  struct {
    vuint32_t ERRDETEN:1;              /* Correctable Error Detection Enable */
    vuint32_t ERRINTEN:1;              /* Correctable Error Interrupt Enable */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t ERRTHRESHOLD:8;          /* Correctable Error Threshold */
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} CAIU0_CAIUCEC_tag;

typedef union CAIU0_CAIUCES_union_tag { /* CAIU Correctable Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERRVLD:1;                /* Error Valid */
    vuint32_t ERROVF:1;                /* Error Overflow */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t ERRCOUNT:8;              /* Error Count */
    vuint32_t ERRTYPE:4;               /* Error Type */
    vuint32_t ERRINFO:8;               /* Error Info */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} CAIU0_CAIUCES_tag;

typedef union CAIU0_CAIUCELR0_union_tag { /* CAIU Correctable Error Location Register 0 */
  vuint32_t R;
  struct {
    vuint32_t ERRENTRY:20;             /* Error Entry or Set */
    vuint32_t ERRWAY:6;                /* Error Way */
    vuint32_t ERRWORD:6;               /* Error Word */
  } B;
} CAIU0_CAIUCELR0_tag;

typedef union CAIU0_CAIUCELR1_union_tag { /* CAIU Correctable Error Location Register 1 */
  vuint32_t R;
  struct {
    vuint32_t ERRADDR:12;              /* Error Address */
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} CAIU0_CAIUCELR1_tag;

typedef union CAIU0_CAIUCESA_union_tag { /* CAIU Correctable Error Status Alias */
  vuint32_t R;
  struct {
    vuint32_t ERRVLD:1;                /* Error Valid */
    vuint32_t ERROVF:1;                /* Error Overflow */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t ERRCOUNT:8;              /* Error Count */
    vuint32_t ERRTYPE:4;               /* Error Type */
    vuint32_t ERRINFO:8;               /* Error Info */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} CAIU0_CAIUCESA_tag;

typedef union CAIU0_CAIUUEC_union_tag { /* CAIU Uncorrectable Error Control */
  vuint32_t R;
  struct {
    vuint32_t ERRDETEN:1;              /* Uncorrectable Error Detection Enable */
    vuint32_t ERRINTEN:1;              /* Uncorrectable Error Interrupt Enable */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t ERRTHRESHOLD:8;          /* Uncorrectable Error Threshold */
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} CAIU0_CAIUUEC_tag;

typedef union CAIU0_CAIUUES_union_tag { /* CAIU Uncorrectable Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERRVLD:1;                /* Error Valid */
    vuint32_t ERROVF:1;                /* Error Overflow */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t ERRCOUNT:8;              /* Error Count */
    vuint32_t ERRTYPE:4;               /* Error Type */
    vuint32_t ERRINFO:8;               /* Error Info */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} CAIU0_CAIUUES_tag;

typedef union CAIU0_CAIUUELR0_union_tag { /* CAIU Uncorrectable Error Location Register 0 */
  vuint32_t R;
  struct {
    vuint32_t ERRENTRY:20;             /* Error Entry or Set */
    vuint32_t ERRWAY:6;                /* Error Way */
    vuint32_t ERRWORD:6;               /* Error Word */
  } B;
} CAIU0_CAIUUELR0_tag;

typedef union CAIU0_CAIUUELR1_union_tag { /* CAIU Uncorrectable Error Location Register 1 */
  vuint32_t R;
  struct {
    vuint32_t ERRADDR:12;              /* Error Address */
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} CAIU0_CAIUUELR1_tag;

typedef union CAIU0_CAIUUESA_union_tag { /* CAIU Uncorrectable Error Status Alias */
  vuint32_t R;
  struct {
    vuint32_t ERRVLD:1;                /* Error Valid */
    vuint32_t ERROVF:1;                /* Error Overflow */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t ERRCOUNT:8;              /* Error Count */
    vuint32_t ERRTYPE:4;               /* Error Type */
    vuint32_t ERRINFO:8;               /* Error Info */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} CAIU0_CAIUUESA_tag;

typedef union CAIU0_CAIUID_union_tag { /* CAIU Identification */
  vuint32_t R;
  struct {
    vuint32_t IMPLVER:8;               /* Implementation Version */
    vuint32_t CAIID:7;                 /* CAI Identifier */
    vuint32_t CA:1;                    /* Caching Agent */
    vuint32_t TYPE:4;                  /* Type */
    vuint32_t SFID:5;                  /* Snoop Filter Identifier */
    vuint32_t _unused_25:7;            /* Reserved */
  } B;
} CAIU0_CAIUID_tag;

struct CAIU0_tag {
  CAIU0_CAIUTC_tag CAIUTC;             /* CAIU Transaction Control */
  CAIU0_CAIUTA_tag CAIUTA;             /* CAIU Transaction Activity */
  uint8_t CAIU0_reserved0[248];
  CAIU0_CAIUCEC_tag CAIUCEC;           /* CAIU Correctable Error Control */
  CAIU0_CAIUCES_tag CAIUCES;           /* CAIU Correctable Error Status */
  CAIU0_CAIUCELR0_tag CAIUCELR0;       /* CAIU Correctable Error Location Register 0 */
  CAIU0_CAIUCELR1_tag CAIUCELR1;       /* CAIU Correctable Error Location Register 1 */
  uint8_t CAIU0_reserved1[20];
  CAIU0_CAIUCESA_tag CAIUCESA;         /* CAIU Correctable Error Status Alias */
  uint8_t CAIU0_reserved2[24];
  CAIU0_CAIUUEC_tag CAIUUEC;           /* CAIU Uncorrectable Error Control */
  CAIU0_CAIUUES_tag CAIUUES;           /* CAIU Uncorrectable Error Status */
  CAIU0_CAIUUELR0_tag CAIUUELR0;       /* CAIU Uncorrectable Error Location Register 0 */
  CAIU0_CAIUUELR1_tag CAIUUELR1;       /* CAIU Uncorrectable Error Location Register 1 */
  uint8_t CAIU0_reserved3[20];
  CAIU0_CAIUUESA_tag CAIUUESA;         /* CAIU Uncorrectable Error Status Alias */
  uint8_t CAIU0_reserved4[3732];
  CAIU0_CAIUID_tag CAIUID;             /* CAIU Identification */
};


/* ============================================================================
   =============================== Module: CAIU1 ==============================
   ============================================================================ */

typedef union CAIU1_CAIUTC_union_tag { /* CAIU Transaction Control */
  vuint32_t R;
  struct {
    vuint32_t TRANSEN:1;               /* Agent Transaction Enable */
    vuint32_t ISOLEN:1;                /* Agent Isolation Enable */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} CAIU1_CAIUTC_tag;

typedef union CAIU1_CAIUTA_union_tag { /* CAIU Transaction Activity */
  vuint32_t R;
  struct {
    vuint32_t TRANSACTV:1;             /* Transaction Active */
    vuint32_t SNPACTV:1;               /* Snoop Transaction Active */
    vuint32_t COHACTV:1;               /* Coherent Transaction Active */
    vuint32_t _unused_3:29;            /* Reserved */
  } B;
} CAIU1_CAIUTA_tag;

typedef union CAIU1_CAIUCEC_union_tag { /* CAIU Correctable Error Control */
  vuint32_t R;
  struct {
    vuint32_t ERRDETEN:1;              /* Correctable Error Detection Enable */
    vuint32_t ERRINTEN:1;              /* Correctable Error Interrupt Enable */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t ERRTHRESHOLD:8;          /* Correctable Error Threshold */
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} CAIU1_CAIUCEC_tag;

typedef union CAIU1_CAIUCES_union_tag { /* CAIU Correctable Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERRVLD:1;                /* Error Valid */
    vuint32_t ERROVF:1;                /* Error Overflow */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t ERRCOUNT:8;              /* Error Count */
    vuint32_t ERRTYPE:4;               /* Error Type */
    vuint32_t ERRINFO:8;               /* Error Info */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} CAIU1_CAIUCES_tag;

typedef union CAIU1_CAIUCELR0_union_tag { /* CAIU Correctable Error Location Register 0 */
  vuint32_t R;
  struct {
    vuint32_t ERRENTRY:20;             /* Error Entry or Set */
    vuint32_t ERRWAY:6;                /* Error Way */
    vuint32_t ERRWORD:6;               /* Error Word */
  } B;
} CAIU1_CAIUCELR0_tag;

typedef union CAIU1_CAIUCELR1_union_tag { /* CAIU Correctable Error Location Register 1 */
  vuint32_t R;
  struct {
    vuint32_t ERRADDR:12;              /* Error Address */
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} CAIU1_CAIUCELR1_tag;

typedef union CAIU1_CAIUCESA_union_tag { /* CAIU Correctable Error Status Alias */
  vuint32_t R;
  struct {
    vuint32_t ERRVLD:1;                /* Error Valid */
    vuint32_t ERROVF:1;                /* Error Overflow */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t ERRCOUNT:8;              /* Error Count */
    vuint32_t ERRTYPE:4;               /* Error Type */
    vuint32_t ERRINFO:8;               /* Error Info */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} CAIU1_CAIUCESA_tag;

typedef union CAIU1_CAIUUEC_union_tag { /* CAIU Uncorrectable Error Control */
  vuint32_t R;
  struct {
    vuint32_t ERRDETEN:1;              /* Uncorrectable Error Detection Enable */
    vuint32_t ERRINTEN:1;              /* Uncorrectable Error Interrupt Enable */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t ERRTHRESHOLD:8;          /* Uncorrectable Error Threshold */
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} CAIU1_CAIUUEC_tag;

typedef union CAIU1_CAIUUES_union_tag { /* CAIU Uncorrectable Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERRVLD:1;                /* Error Valid */
    vuint32_t ERROVF:1;                /* Error Overflow */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t ERRCOUNT:8;              /* Error Count */
    vuint32_t ERRTYPE:4;               /* Error Type */
    vuint32_t ERRINFO:8;               /* Error Info */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} CAIU1_CAIUUES_tag;

typedef union CAIU1_CAIUUELR0_union_tag { /* CAIU Uncorrectable Error Location Register 0 */
  vuint32_t R;
  struct {
    vuint32_t ERRENTRY:20;             /* Error Entry or Set */
    vuint32_t ERRWAY:6;                /* Error Way */
    vuint32_t ERRWORD:6;               /* Error Word */
  } B;
} CAIU1_CAIUUELR0_tag;

typedef union CAIU1_CAIUUELR1_union_tag { /* CAIU Uncorrectable Error Location Register 1 */
  vuint32_t R;
  struct {
    vuint32_t ERRADDR:12;              /* Error Address */
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} CAIU1_CAIUUELR1_tag;

typedef union CAIU1_CAIUUESA_union_tag { /* CAIU Uncorrectable Error Status Alias */
  vuint32_t R;
  struct {
    vuint32_t ERRVLD:1;                /* Error Valid */
    vuint32_t ERROVF:1;                /* Error Overflow */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t ERRCOUNT:8;              /* Error Count */
    vuint32_t ERRTYPE:4;               /* Error Type */
    vuint32_t ERRINFO:8;               /* Error Info */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} CAIU1_CAIUUESA_tag;

typedef union CAIU1_CAIUID_union_tag { /* CAIU Identification */
  vuint32_t R;
  struct {
    vuint32_t IMPLVER:8;               /* Implementation Version */
    vuint32_t CAIID:7;                 /* CAI Identifier */
    vuint32_t CA:1;                    /* Caching Agent */
    vuint32_t TYPE:4;                  /* Type */
    vuint32_t SFID:5;                  /* Snoop Filter Identifier */
    vuint32_t _unused_25:7;            /* Reserved */
  } B;
} CAIU1_CAIUID_tag;

struct CAIU1_tag {
  CAIU1_CAIUTC_tag CAIUTC;             /* CAIU Transaction Control */
  CAIU1_CAIUTA_tag CAIUTA;             /* CAIU Transaction Activity */
  uint8_t CAIU1_reserved0[248];
  CAIU1_CAIUCEC_tag CAIUCEC;           /* CAIU Correctable Error Control */
  CAIU1_CAIUCES_tag CAIUCES;           /* CAIU Correctable Error Status */
  CAIU1_CAIUCELR0_tag CAIUCELR0;       /* CAIU Correctable Error Location Register 0 */
  CAIU1_CAIUCELR1_tag CAIUCELR1;       /* CAIU Correctable Error Location Register 1 */
  uint8_t CAIU1_reserved1[20];
  CAIU1_CAIUCESA_tag CAIUCESA;         /* CAIU Correctable Error Status Alias */
  uint8_t CAIU1_reserved2[24];
  CAIU1_CAIUUEC_tag CAIUUEC;           /* CAIU Uncorrectable Error Control */
  CAIU1_CAIUUES_tag CAIUUES;           /* CAIU Uncorrectable Error Status */
  CAIU1_CAIUUELR0_tag CAIUUELR0;       /* CAIU Uncorrectable Error Location Register 0 */
  CAIU1_CAIUUELR1_tag CAIUUELR1;       /* CAIU Uncorrectable Error Location Register 1 */
  uint8_t CAIU1_reserved3[20];
  CAIU1_CAIUUESA_tag CAIUUESA;         /* CAIU Uncorrectable Error Status Alias */
  uint8_t CAIU1_reserved4[3732];
  CAIU1_CAIUID_tag CAIUID;             /* CAIU Identification */
};


/* ============================================================================
   =============================== Module: CCTI_fault_ctrl ====================
   ============================================================================ */

typedef union CCTI_fault_ctrl_COREID_union_tag { /* Core ID */
  vuint32_t R;
  struct {
    vuint32_t CORETYPEID:8;            /* Core Type ID */
    vuint32_t CORECHECKSUM:24;         /* Core Checksum */
  } B;
} CCTI_fault_ctrl_COREID_tag;

typedef union CCTI_fault_ctrl_REVISIONID_union_tag { /* Revision ID */
  vuint32_t R;
  struct {
    vuint32_t USERID:8;                /* User ID */
    vuint32_t NOCID:24;                /* NoC ID */
  } B;
} CCTI_fault_ctrl_REVISIONID_tag;

typedef union CCTI_fault_ctrl_MISSION_FAULT_union_tag { /* Mission Fault 0 */
  vuint32_t R;
  struct {
    vuint32_t MISSIONFAULT0:32;        /* Mission Fault */
  } B;
} CCTI_fault_ctrl_MISSION_FAULT_tag;

typedef union CCTI_fault_ctrl_LATENT_FAULT_union_tag { /* Latent Fault 0 */
  vuint32_t R;
  struct {
    vuint32_t LATENTFAULT0:32;         /* Latent Fault */
  } B;
} CCTI_fault_ctrl_LATENT_FAULT_tag;

typedef union CCTI_fault_ctrl_FAULTS_union_tag { /* Faults */
  vuint32_t R;
  struct {
    vuint32_t LATENTFAULT:1;           /* Latent Fault */
    vuint32_t MISSIONFAULT:1;          /* Mission Fault */
    vuint32_t _unused_2:30;
  } B;
} CCTI_fault_ctrl_FAULTS_tag;

typedef union CCTI_fault_ctrl_INTEN_union_tag { /* Interrupt Enable */
  vuint32_t R;
  struct {
    vuint32_t BISTDONEEN:1;            /* BIST Done Interrupt Enable */
    vuint32_t MISSIONFAULTEN:1;        /* Mission Fault Interrupt Enable */
    vuint32_t _unused_2:30;
  } B;
} CCTI_fault_ctrl_INTEN_tag;

typedef union CCTI_fault_ctrl_INTCLR_union_tag { /* Interrupt Clear */
  vuint32_t R;
  struct {
    vuint32_t LATENTFAULTCLR:1;        /* Clear Latent Fault */
    vuint32_t MISSIONFAULTCLR:1;       /* Clear Mission Fault */
    vuint32_t _unused_2:30;
  } B;
} CCTI_fault_ctrl_INTCLR_tag;

typedef union CCTI_fault_ctrl_BISTCTL_union_tag { /* BIST Control */
  vuint32_t R;
  struct {
    vuint32_t BISTSTART:1;             /* Start BIST Sequence */
    vuint32_t BISTDONECLR:1;           /* Clear BIST Done */
    vuint32_t _unused_2:30;
  } B;
} CCTI_fault_ctrl_BISTCTL_tag;

typedef union CCTI_fault_ctrl_BIST_DONE_union_tag { /* BIST Done */
  vuint32_t R;
  struct {
    vuint32_t BISTDONE:1;              /* BIST Done Status */
    vuint32_t MISSIONMODE:1;           /* Mission Mode Status */
    vuint32_t _unused_2:30;
  } B;
} CCTI_fault_ctrl_BIST_DONE_tag;

typedef union CCTI_fault_ctrl_BIST_TO1_union_tag { /* BIST Timeout 1 */
  vuint32_t R;
  struct {
    vuint32_t BISTTO1:16;              /* BIST Timeout */
    vuint32_t _unused_16:16;
  } B;
} CCTI_fault_ctrl_BIST_TO1_tag;

typedef union CCTI_fault_ctrl_BIST_TO2_union_tag { /* BIST Timeout 2 */
  vuint32_t R;
  struct {
    vuint32_t BISTTO2:8;               /* BIST Timeout */
    vuint32_t _unused_8:24;
  } B;
} CCTI_fault_ctrl_BIST_TO2_tag;

struct CCTI_fault_ctrl_tag {
  CCTI_fault_ctrl_COREID_tag COREID;   /* Core ID */
  CCTI_fault_ctrl_REVISIONID_tag REVISIONID; /* Revision ID */
  CCTI_fault_ctrl_MISSION_FAULT_tag MISSION_FAULT[4]; /* Mission Fault 0 */
  CCTI_fault_ctrl_LATENT_FAULT_tag LATENT_FAULT[4]; /* Latent Fault 0 */
  CCTI_fault_ctrl_FAULTS_tag FAULTS;   /* Faults */
  CCTI_fault_ctrl_INTEN_tag INTEN;     /* Interrupt Enable */
  CCTI_fault_ctrl_INTCLR_tag INTCLR;   /* Interrupt Clear */
  CCTI_fault_ctrl_BISTCTL_tag BISTCTL; /* BIST Control */
  CCTI_fault_ctrl_BIST_DONE_tag BIST_DONE; /* BIST Done */
  CCTI_fault_ctrl_BIST_TO1_tag BIST_TO1; /* BIST Timeout 1 */
  CCTI_fault_ctrl_BIST_TO2_tag BIST_TO2; /* BIST Timeout 2 */
};


/* ============================================================================
   =============================== Module: CM7_GPR ============================
   ============================================================================ */

typedef union CM7_GPR_CORTEXM7_GPR0_union_tag { /* CORTEXM7_GPR0 */
  vuint32_t R;
  struct {
    vuint32_t CM7_CPU_WAIT:1;          /* CORTEXM7 CPU Wait */
    vuint32_t CM7_CPU_EVENT_GENERATE:1; /* CORTEXM7 EVENT GENERATE */
    vuint32_t CM7_CPU_MEMORY_RETENTION_MODE_1:1; /* CORTEXM7 MEMORY RETENTION MODE 1 */
    vuint32_t _unused_3:5;
    vuint32_t _unused_8:24;
  } B;
} CM7_GPR_CORTEXM7_GPR0_tag;

struct CM7_GPR_tag {
  CM7_GPR_CORTEXM7_GPR0_tag CORTEXM7_GPR0; /* CORTEXM7_GPR0 */
};


/* ============================================================================
   =============================== Module: CMIU ===============================
   ============================================================================ */

typedef union CMIU_CMIUTA_union_tag {  /* CMIU Transaction Activity */
  vuint32_t R;
  struct {
    vuint32_t TRANSACTV:1;             /* Transaction Active */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} CMIU_CMIUTA_tag;

typedef union CMIU_CMIUCEC_union_tag { /* CMIU Correctable Error Control */
  vuint32_t R;
  struct {
    vuint32_t ERRDETEN:1;              /* Correctable Error Detection Enable */
    vuint32_t ERRINTEN:1;              /* Correctable Error Interrupt Enable */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t ERRTHRESHOLD:8;          /* Correctable Error Threshold */
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} CMIU_CMIUCEC_tag;

typedef union CMIU_CMIUCES_union_tag { /* CMIU Correctable Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERRVLD:1;                /* Error Valid */
    vuint32_t ERROVF:1;                /* Error Overflow */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t ERRCOUNT:8;              /* Error Count */
    vuint32_t ERRTYPE:4;               /* Error Type */
    vuint32_t ERRINFO:8;               /* Error Info */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} CMIU_CMIUCES_tag;

typedef union CMIU_CMIUCELR0_union_tag { /* CMIU Correctable Error Location Register 0 */
  vuint32_t R;
  struct {
    vuint32_t ERRENTRY:20;             /* Error Entry or Set */
    vuint32_t ERRWAY:6;                /* Error Way */
    vuint32_t ERRWORD:6;               /* Error Word */
  } B;
} CMIU_CMIUCELR0_tag;

typedef union CMIU_CMIUCELR1_union_tag { /* CMIU Correctable Error Location Register 1 */
  vuint32_t R;
  struct {
    vuint32_t ERRADDR:12;              /* Error Address */
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} CMIU_CMIUCELR1_tag;

typedef union CMIU_CMIUCESA_union_tag { /* CMIU Correctable Error Status Alias */
  vuint32_t R;
  struct {
    vuint32_t ERRVLD:1;                /* Error Valid */
    vuint32_t ERROVF:1;                /* Error Overflow */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t ERRCOUNT:8;              /* Error Count */
    vuint32_t ERRTYPE:4;               /* Error Type */
    vuint32_t ERRINFO:8;               /* Error Info */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} CMIU_CMIUCESA_tag;

typedef union CMIU_CMIUUEC_union_tag { /* CMIU Uncorrectable Error Control */
  vuint32_t R;
  struct {
    vuint32_t ERRDETEN:1;              /* Uncorrectable Error Detection Enable */
    vuint32_t ERRINTEN:1;              /* Uncorrectable Error Interrupt Enable */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t ERRTHRESHOLD:8;          /* Uncorrectable Error Threshold */
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} CMIU_CMIUUEC_tag;

typedef union CMIU_CMIUUES_union_tag { /* CMIU Uncorrectable Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERRVLD:1;                /* Error Valid */
    vuint32_t ERROVF:1;                /* Error Overflow */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t ERRCOUNT:8;              /* Error Count */
    vuint32_t ERRTYPE:4;               /* Error Type */
    vuint32_t ERRINFO:8;               /* Error Info */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} CMIU_CMIUUES_tag;

typedef union CMIU_CMIUUELR0_union_tag { /* CMIU Uncorrectable Error Location Register 0 */
  vuint32_t R;
  struct {
    vuint32_t ERRENTRY:20;             /* Error Entry (or Set) */
    vuint32_t ERRWAY:6;                /* Error Way */
    vuint32_t ERRWORD:6;               /* Error Word */
  } B;
} CMIU_CMIUUELR0_tag;

typedef union CMIU_CMIUUELR1_union_tag { /* CMIU Uncorrectable Error Location Register 1 */
  vuint32_t R;
  struct {
    vuint32_t ERRADDR:12;              /* Error Address */
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} CMIU_CMIUUELR1_tag;

typedef union CMIU_CMIUUESA_union_tag { /* CMIU Uncorrectable Error Status Alias */
  vuint32_t R;
  struct {
    vuint32_t ERRVLD:1;                /* Error Valid */
    vuint32_t ERROVF:1;                /* Error Overflow */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t ERRCOUNT:8;              /* Error Count */
    vuint32_t ERRTYPE:4;               /* Error Type */
    vuint32_t ERRINFO:8;               /* Error Info */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} CMIU_CMIUUESA_tag;

typedef union CMIU_CMIUID_union_tag {  /* CMIU Identification Register */
  vuint32_t R;
  struct {
    vuint32_t IMPLVER:8;               /* Implementation Version */
    vuint32_t CMIID:5;                 /* Coherent Memory Interface Identifier */
    vuint32_t _unused_13:1;
    vuint32_t _unused_14:17;
    vuint32_t _unused_31:1;
  } B;
} CMIU_CMIUID_tag;

struct CMIU_tag {
  uint8_t CMIU_reserved0[4];
  CMIU_CMIUTA_tag CMIUTA;              /* CMIU Transaction Activity */
  uint8_t CMIU_reserved1[248];
  CMIU_CMIUCEC_tag CMIUCEC;            /* CMIU Correctable Error Control */
  CMIU_CMIUCES_tag CMIUCES;            /* CMIU Correctable Error Status */
  CMIU_CMIUCELR0_tag CMIUCELR0;        /* CMIU Correctable Error Location Register 0 */
  CMIU_CMIUCELR1_tag CMIUCELR1;        /* CMIU Correctable Error Location Register 1 */
  uint8_t CMIU_reserved2[20];
  CMIU_CMIUCESA_tag CMIUCESA;          /* CMIU Correctable Error Status Alias */
  uint8_t CMIU_reserved3[24];
  CMIU_CMIUUEC_tag CMIUUEC;            /* CMIU Uncorrectable Error Control */
  CMIU_CMIUUES_tag CMIUUES;            /* CMIU Uncorrectable Error Status */
  CMIU_CMIUUELR0_tag CMIUUELR0;        /* CMIU Uncorrectable Error Location Register 0 */
  CMIU_CMIUUELR1_tag CMIUUELR1;        /* CMIU Uncorrectable Error Location Register 1 */
  uint8_t CMIU_reserved4[20];
  CMIU_CMIUUESA_tag CMIUUESA;          /* CMIU Uncorrectable Error Status Alias */
  uint8_t CMIU_reserved5[3732];
  CMIU_CMIUID_tag CMIUID;              /* CMIU Identification Register */
};


/* ============================================================================
   =============================== Module: CMU_FC =============================
   ============================================================================ */

typedef union CMU_FC_GCR_union_tag {   /* Global Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t FCE:1;                   /* Frequency Check Enable */
    vuint32_t _unused_1:31;
  } B;
} CMU_FC_GCR_tag;

typedef union CMU_FC_RCCR_union_tag {  /* Reference Count Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t REF_CNT:16;              /* Reference clock count */
    vuint32_t _unused_16:16;
  } B;
} CMU_FC_RCCR_tag;

typedef union CMU_FC_HTCR_union_tag {  /* High Threshold Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t HFREF:24;                /* High frequency reference threshold */
    vuint32_t _unused_24:8;
  } B;
} CMU_FC_HTCR_tag;

typedef union CMU_FC_LTCR_union_tag {  /* Low Threshold Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t LFREF:24;                /* Low Frequency Reference Threshold */
    vuint32_t _unused_24:8;
  } B;
} CMU_FC_LTCR_tag;

typedef union CMU_FC_SR_union_tag {    /* Status Register */
  vuint32_t R;
  struct {
    vuint32_t FLL:1;                   /* Frequency lower than low frequency reference threshold event status */
    vuint32_t FHH:1;                   /* Frequency higher than high frequency reference threshold event status */
    vuint32_t STATE:2;                 /* CMU_FC State */
    vuint32_t RS:1;                    /* Run Status */
    vuint32_t _unused_5:27;
  } B;
} CMU_FC_SR_tag;

typedef union CMU_FC_IER_union_tag {   /* Interrupt Enable Register */
  vuint32_t R;
  struct {
    vuint32_t FLLIE:1;                 /* Frequency Lower than Low Frequency Reference Threshold Synchronous Interrupt Enable */
    vuint32_t FHHIE:1;                 /* Frequency Higher than High Frequency Reference Threshold Synchronous Interrupt Enable */
    vuint32_t FLLAIE:1;                /* Frequency Lower than Low Frequency Reference Threshold Asynchronous Interrupt Enable */
    vuint32_t FHHAIE:1;                /* Frequency Higher than High Frequency Reference Threshold Asynchronous Interrupt Enable */
    vuint32_t _unused_4:28;
  } B;
} CMU_FC_IER_tag;

struct CMU_FC_tag {
  CMU_FC_GCR_tag GCR;                  /* Global Configuration Register */
  CMU_FC_RCCR_tag RCCR;                /* Reference Count Configuration Register */
  CMU_FC_HTCR_tag HTCR;                /* High Threshold Configuration Register */
  CMU_FC_LTCR_tag LTCR;                /* Low Threshold Configuration Register */
  CMU_FC_SR_tag SR;                    /* Status Register */
  CMU_FC_IER_tag IER;                  /* Interrupt Enable Register */
};


/* ============================================================================
   =============================== Module: CMU_FM =============================
   ============================================================================ */

typedef union CMU_FM_GCR_union_tag {   /* CMU Frequency Meter Global Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t FME:1;                   /* Frequency Meter Enable */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} CMU_FM_GCR_tag;

typedef union CMU_FM_RCCR_union_tag {  /* CMU Frequency Meter Reference Count Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t REF_CNT:16;              /* Reference Clock Count */
    vuint32_t _unused_16:16;
  } B;
} CMU_FM_RCCR_tag;

typedef union CMU_FM_SR_union_tag {    /* CMU Frequency Meter Status Register */
  vuint32_t R;
  struct {
    vuint32_t FMC:1;                   /* Frequency Meter Operation Complete */
    vuint32_t FMTO:1;                  /* Frequency Meter Time Out */
    vuint32_t STATE:2;                 /* Module State */
    vuint32_t RS:1;                    /* Run Status */
    vuint32_t _unused_5:3;             /* Reserved */
    vuint32_t MET_CNT:24;              /* Meter Clock Count */
  } B;
} CMU_FM_SR_tag;

struct CMU_FM_tag {
  CMU_FM_GCR_tag GCR;                  /* CMU Frequency Meter Global Configuration Register */
  CMU_FM_RCCR_tag RCCR;                /* CMU Frequency Meter Reference Count Configuration Register */
  CMU_FM_SR_tag SR;                    /* CMU Frequency Meter Status Register */
};


/* ============================================================================
   =============================== Module: CORE_PLL ===========================
   ============================================================================ */

typedef union CORE_PLL_PLLCR_union_tag { /* PLL Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t PLLPD:1;                 /* PLL power down */
  } B;
} CORE_PLL_PLLCR_tag;

typedef union CORE_PLL_PLLSR_union_tag { /* PLL status register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t LOCK:1;                  /* Lock status */
    vuint32_t LOL:1;                   /* Loss-Of-Lock flag */
    vuint32_t _unused_4:4;
    vuint32_t _unused_8:3;
    vuint32_t _unused_11:21;
  } B;
} CORE_PLL_PLLSR_tag;

typedef union CORE_PLL_PLLDV_union_tag { /* PLL Divider */
  vuint32_t R;
  struct {
    vuint32_t MFI:8;                   /* Integer portion of loop divider. */
    vuint32_t _unused_8:4;
    vuint32_t RDIV:3;                  /* Input clock predivider */
    vuint32_t _unused_15:1;
    vuint32_t _unused_16:6;
    vuint32_t _unused_22:3;
    vuint32_t _unused_25:6;
    vuint32_t _unused_31:1;
  } B;
} CORE_PLL_PLLDV_tag;

typedef union CORE_PLL_PLLFM_union_tag { /* PLL Frequency Modulation */
  vuint32_t R;
  struct {
    vuint32_t STEPNO:11;               /* Number of steps of modulation period/frequency modulation */
    vuint32_t _unused_11:5;
    vuint32_t STEPSIZE:10;             /* Frequency modulation step size */
    vuint32_t _unused_26:3;
    vuint32_t SPREADCTL:1;             /* Modulation type selection */
    vuint32_t SSCGBYP:1;               /* SSCG bypass */
    vuint32_t _unused_31:1;
  } B;
} CORE_PLL_PLLFM_tag;

typedef union CORE_PLL_PLLFD_union_tag { /* PLL Fractional Divider */
  vuint32_t R;
  struct {
    vuint32_t MFN:15;                  /* Numerator of fractional loop division factor */
    vuint32_t _unused_15:1;
    vuint32_t _unused_16:1;
    vuint32_t _unused_17:1;
    vuint32_t _unused_18:4;
    vuint32_t _unused_22:6;
    vuint32_t _unused_28:1;
    vuint32_t _unused_29:1;
    vuint32_t SDMEN:1;                 /* Sigma-delta modulation enable */
    vuint32_t _unused_31:1;
  } B;
} CORE_PLL_PLLFD_tag;

typedef union CORE_PLL_PLLCLKMUX_union_tag { /* PLL Clock Multiplexer */
  vuint32_t R;
  struct {
    vuint32_t REFCLKSEL:1;             /* Reference clock select */
    vuint32_t _unused_1:31;
  } B;
} CORE_PLL_PLLCLKMUX_tag;

typedef union CORE_PLL_PLLODIV_union_tag { /* PLL Output Divider */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved (for internal use only) */
    vuint32_t _unused_2:14;
    vuint32_t DIV:8;                   /* Division value */
    vuint32_t _unused_24:7;
    vuint32_t DE:1;                    /* Divider enable */
  } B;
} CORE_PLL_PLLODIV_tag;

struct CORE_PLL_tag {
  CORE_PLL_PLLCR_tag PLLCR;            /* PLL Control Register */
  CORE_PLL_PLLSR_tag PLLSR;            /* PLL status register */
  CORE_PLL_PLLDV_tag PLLDV;            /* PLL Divider */
  CORE_PLL_PLLFM_tag PLLFM;            /* PLL Frequency Modulation */
  CORE_PLL_PLLFD_tag PLLFD;            /* PLL Fractional Divider */
  uint8_t CORE_PLL_reserved0[12];
  CORE_PLL_PLLCLKMUX_tag PLLCLKMUX;    /* PLL Clock Multiplexer */
  uint8_t CORE_PLL_reserved1[92];
  CORE_PLL_PLLODIV_tag PLLODIV[2];     /* PLL Output Divider */
};


/* ============================================================================
   =============================== Module: CRC_0 ==============================
   ============================================================================ */

typedef union CRC_0_CHANNEL_CFG_union_tag { /* Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t INV:1;                   /* Inversion selection */
    vuint32_t SWAP:1;                  /* Swap selection */
    vuint32_t POLYG:2;                 /* Polynomial selection */
    vuint32_t SWAP_BITWISE:1;          /* Swap CRC_INP bit-wise */
    vuint32_t SWAP_BYTEWISE:1;         /* Swap CRC_INP byte-wise */
    vuint32_t _unused_6:18;            /* Reserved */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} CRC_0_CHANNEL_CFG_tag;

typedef union CRC_0_CHANNEL_INP_union_tag { /* Input Register */
  vuint32_t R;
  struct {
    vuint32_t INP:32;                  /* Input data for the CRC computation */
  } B;
} CRC_0_CHANNEL_INP_tag;

typedef union CRC_0_CHANNEL_CSTAT_union_tag { /* Current Status Register */
  vuint32_t R;
  struct {
    vuint32_t CSTAT:32;                /* CRC signature status */
  } B;
} CRC_0_CHANNEL_CSTAT_tag;

typedef union CRC_0_CHANNEL_OUTP_union_tag { /* Output Register */
  vuint32_t R;
  struct {
    vuint32_t OUTP:32;                 /* Final CRC signature */
  } B;
} CRC_0_CHANNEL_OUTP_tag;

typedef struct CRC_0_CHANNEL_struct_tag {
  CRC_0_CHANNEL_CFG_tag CFG;           /* Configuration Register */
  CRC_0_CHANNEL_INP_tag INP;           /* Input Register */
  CRC_0_CHANNEL_CSTAT_tag CSTAT;       /* Current Status Register */
  CRC_0_CHANNEL_OUTP_tag OUTP;         /* Output Register */
} CRC_0_CHANNEL_tag;

struct CRC_0_tag {
  CRC_0_CHANNEL_tag CHANNEL[3];
};


/* ============================================================================
   =============================== Module: CSR ================================
   ============================================================================ */

typedef union CSR_CSADSE0_union_tag {  /* Coherent Subsystem ACE DVM Snoop Enable */
  vuint32_t R;
  struct {
    vuint32_t DVMSNPEN0:1;             /* ACE DVM Snoop Enable n */
    vuint32_t DVMSNPEN1:1;             /* ACE DVM Snoop Enable n */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} CSR_CSADSE0_tag;

typedef union CSR_CSADSA_union_tag {   /* Coherent Subsystem ACE DVM Snoop Activity */
  vuint32_t R;
  struct {
    vuint32_t DVMSNPACTV0:1;           /* ACE DVM Snoop Active */
    vuint32_t DVMSNPACTV1:1;           /* ACE DVM Snoop Active */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} CSR_CSADSA_tag;

typedef union CSR_CSCEIS0_union_tag {  /* Coherent Subsystem Correctable Error Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t ERRINTVLD0:1;            /* Error Interrupt Valid */
    vuint32_t ERRINTVLD1:1;            /* Error Interrupt Valid */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} CSR_CSCEIS0_tag;

typedef union CSR_CSCEIS3_union_tag {  /* Coherent Subsystem Correctable Error Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t ERRINTVLD0:1;            /* Error Interrupt Valid */
    vuint32_t ERRINTVLD1:1;            /* Error Interrupt Valid */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} CSR_CSCEIS3_tag;

typedef union CSR_CSCEIS4_union_tag {  /* Coherent Subsystem Correctable Error Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t ERRINTVLD0:1;            /* Error Interrupt Valid */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} CSR_CSCEIS4_tag;

typedef union CSR_CSCEIS6_union_tag {  /* Coherent Subsystem Correctable Error Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t ERRINTVLD0:1;            /* Error Interrupt Valid */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} CSR_CSCEIS6_tag;

typedef union CSR_CSUEIS0_union_tag {  /* Coherent Subsystem Uncorrectable Error Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t ERRINTVLD0:1;            /* Error Interrupt Valid */
    vuint32_t ERRINTVLD1:1;            /* Error Interrupt Valid */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} CSR_CSUEIS0_tag;

typedef union CSR_CSUEIS3_union_tag {  /* Coherent Subsystem Uncorrectable Error Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t ERRINTVLD0:1;            /* Error Interrupt Valid */
    vuint32_t ERRINTVLD1:1;            /* Error Interrupt Valid */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} CSR_CSUEIS3_tag;

typedef union CSR_CSUEIS4_union_tag {  /* Coherent Subsystem Uncorrectable Error Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t ERRINTVLD0:1;            /* Error Interrupt Valid */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} CSR_CSUEIS4_tag;

typedef union CSR_CSUEIS6_union_tag {  /* Coherent Subsystem Uncorrectable Error Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t ERRINTVLD0:1;            /* Error Interrupt Valid */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} CSR_CSUEIS6_tag;

typedef union CSR_CSSFIDR_union_tag {  /* Coherent Subsystem Snoop Filter Identification */
  vuint32_t R;
  struct {
    vuint32_t NUMSETS:20;              /* Number of Snoop Filter Sets */
    vuint32_t NUMWAYS:6;               /* Number of Snoop Filter Ways */
    vuint32_t TYPE:3;                  /* Snoop Filter Type */
    vuint32_t _unused_29:3;            /* Reserved */
  } B;
} CSR_CSSFIDR_tag;

typedef union CSR_CSUID_union_tag {    /* Coherent Subsystem Unit Identification */
  vuint32_t R;
  struct {
    vuint32_t NUMCAIUS:7;              /* Number of CAIUs */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t NUMNCBUS:6;              /* Number of NCBUs */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t NUMDIRUS:6;              /* Number of DIRUs */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t NUMCMIUS:6;              /* Number of CMIUs */
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} CSR_CSUID_tag;

typedef union CSR_CSID_union_tag {     /* Coherent Subsystem Identification */
  vuint32_t R;
  struct {
    vuint32_t RELVER:8;                /* Release Version */
    vuint32_t DIRCLOFFSET:3;           /* Directory Cache Line Offset (-5) */
    vuint32_t _unused_11:7;            /* Reserved */
    vuint32_t NUMSFS:5;                /* Number of Snoop Filters (-1) */
    vuint32_t _unused_23:9;            /* Reserved */
  } B;
} CSR_CSID_tag;

struct CSR_tag {
  uint8_t CSR_reserved0[64];
  CSR_CSADSE0_tag CSADSE0;             /* Coherent Subsystem ACE DVM Snoop Enable */
  uint8_t CSR_reserved1[12];
  CSR_CSADSA_tag CSADSA;               /* Coherent Subsystem ACE DVM Snoop Activity */
  uint8_t CSR_reserved2[172];
  CSR_CSCEIS0_tag CSCEIS0;             /* Coherent Subsystem Correctable Error Interrupt Status */
  uint8_t CSR_reserved3[8];
  CSR_CSCEIS3_tag CSCEIS3;             /* Coherent Subsystem Correctable Error Interrupt Status */
  CSR_CSCEIS4_tag CSCEIS4;             /* Coherent Subsystem Correctable Error Interrupt Status */
  uint8_t CSR_reserved4[4];
  CSR_CSCEIS6_tag CSCEIS6;             /* Coherent Subsystem Correctable Error Interrupt Status */
  uint8_t CSR_reserved5[36];
  CSR_CSUEIS0_tag CSUEIS0;             /* Coherent Subsystem Uncorrectable Error Interrupt Status */
  uint8_t CSR_reserved6[8];
  CSR_CSUEIS3_tag CSUEIS3;             /* Coherent Subsystem Uncorrectable Error Interrupt Status */
  CSR_CSUEIS4_tag CSUEIS4;             /* Coherent Subsystem Uncorrectable Error Interrupt Status */
  uint8_t CSR_reserved7[4];
  CSR_CSUEIS6_tag CSUEIS6;             /* Coherent Subsystem Uncorrectable Error Interrupt Status */
  uint8_t CSR_reserved8[3492];
  CSR_CSSFIDR_tag CSSFIDR[32];         /* Coherent Subsystem Snoop Filter Identification */
  uint8_t CSR_reserved9[120];
  CSR_CSUID_tag CSUID;                 /* Coherent Subsystem Unit Identification */
  CSR_CSID_tag CSID;                   /* Coherent Subsystem Identification */
};


/* ============================================================================
   =============================== Module: CTU ================================
   ============================================================================ */

typedef union CTU_TGSISR_union_tag {   /* Trigger Generator Subunit Input Selection Register */
  vuint32_t R;
  struct {
    vuint32_t I0_RE:1;                 /* Input 0 Rising Edge Enable. */
    vuint32_t I0_FE:1;                 /* Input 0 Falling Edge Enable. */
    vuint32_t I1_RE:1;                 /* Input 1 Rising edge Enable */
    vuint32_t I1_FE:1;                 /* Input 1 Falling Edge Enable. */
    vuint32_t I2_RE:1;                 /* Input 2 Rising Edge Enable. */
    vuint32_t I2_FE:1;                 /* Input 2 Falling Edge Enable. */
    vuint32_t I3_RE:1;                 /* Input 3 Rising edge Enable */
    vuint32_t I3_FE:1;                 /* Input 3 Falling Edge Enable. */
    vuint32_t I4_RE:1;                 /* Input 4 Rising Edge Enable. */
    vuint32_t I4_FE:1;                 /* Input 4 Falling Edge Enable. */
    vuint32_t I5_RE:1;                 /* Input 5 Rising Edge Enable. */
    vuint32_t I5_FE:1;                 /* Input 5 Falling Edge Enable. */
    vuint32_t I6_RE:1;                 /* Input 6 Rising Edge Enable. */
    vuint32_t I6_FE:1;                 /* Input 6 Falling Edge Enable. */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t _unused_16:2;            /* Reserved */
    vuint32_t _unused_18:2;            /* Reserved */
    vuint32_t _unused_20:2;            /* Reserved */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:2;            /* Reserved */
    vuint32_t _unused_26:2;            /* Reserved */
    vuint32_t _unused_28:2;            /* Reserved */
    vuint32_t I15_RE:1;                /* Input 15 Rising Edge Enable. */
    vuint32_t I15_FE:1;                /* Input 15 Falling Edge Enable. */
  } B;
} CTU_TGSISR_tag;

typedef union CTU_TGSCR_union_tag {    /* Trigger Generator Subunit Control Register */
  vuint16_t R;
  struct {
    vuint16_t TGS_M:1;                 /* Trigger Generator Subunit Mode */
    vuint16_t MRS_SM:5;
    vuint16_t PRES:2;
    vuint16_t ET_TM:1;
    vuint16_t _unused_9:7;             /* Reserved */
  } B;
} CTU_TGSCR_tag;

typedef union CTU_TCR_union_tag {      /* Trigger Compare Register */
  vuint16_t R;
  struct {
    vuint16_t TCRV:16;                 /* Trigger Compare Register Value */
  } B;
} CTU_TCR_tag;

typedef union CTU_TGSCCR_union_tag {   /* TGS Counter Compare Register */
  vuint16_t R;
  struct {
    vuint16_t TGSCCV:16;
  } B;
} CTU_TGSCCR_tag;

typedef union CTU_TGSCRR_union_tag {   /* TGS Counter Reload Register */
  vuint16_t R;
  struct {
    vuint16_t TGSCRV:16;               /* TGSCRV */
  } B;
} CTU_TGSCRR_tag;

typedef union CTU_CLCR1_union_tag {    /* Commands List Control Register 1 */
  vuint32_t R;
  struct {
    vuint32_t T0_INDEX:5;
    vuint32_t _unused_5:3;             /* Reserved */
    vuint32_t T1_INDEX:5;
    vuint32_t _unused_13:3;            /* Reserved */
    vuint32_t T2_INDEX:5;
    vuint32_t _unused_21:3;            /* Reserved */
    vuint32_t T3_INDEX:5;
    vuint32_t _unused_29:3;            /* Reserved */
  } B;
} CTU_CLCR1_tag;

typedef union CTU_CLCR2_union_tag {    /* Commands List Control Register 2 */
  vuint32_t R;
  struct {
    vuint32_t T4_INDEX:5;
    vuint32_t _unused_5:3;             /* Reserved */
    vuint32_t T5_INDEX:5;
    vuint32_t _unused_13:3;            /* Reserved */
    vuint32_t T6_INDEX:5;
    vuint32_t _unused_21:3;            /* Reserved */
    vuint32_t T7_INDEX:5;              /* T7_INDEX */
    vuint32_t _unused_29:3;            /* Reserved */
  } B;
} CTU_CLCR2_tag;

typedef union CTU_THCR1_union_tag {    /* Trigger Handler Control Register 1 */
  vuint32_t R;
  struct {
    vuint32_t T0_ADCE:1;
    vuint32_t _unused_1:1;             /* Reserved. */
    vuint32_t _unused_2:1;             /* Reserved. */
    vuint32_t _unused_3:1;             /* Reserved. */
    vuint32_t _unused_4:1;             /* Reserved. */
    vuint32_t _unused_5:1;             /* Reserved. */
    vuint32_t T0_E:1;
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t T1_ADCE:1;
    vuint32_t _unused_9:1;             /* Reserved. */
    vuint32_t _unused_10:1;            /* Reserved. */
    vuint32_t _unused_11:1;            /* Reserved. */
    vuint32_t _unused_12:1;            /* Reserved. */
    vuint32_t _unused_13:1;            /* Reserved. */
    vuint32_t T1_E:1;
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t T2_ADCE:1;
    vuint32_t _unused_17:1;            /* Reserved. */
    vuint32_t _unused_18:1;            /* Reserved. */
    vuint32_t _unused_19:1;            /* Reserved. */
    vuint32_t _unused_20:1;            /* Reserved. */
    vuint32_t _unused_21:1;            /* Reserved. */
    vuint32_t T2_E:1;
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t T3_ADCE:1;
    vuint32_t _unused_25:1;            /* Reserved. */
    vuint32_t _unused_26:1;            /* Reserved. */
    vuint32_t _unused_27:1;            /* Reserved. */
    vuint32_t _unused_28:1;            /* Reserved. */
    vuint32_t _unused_29:1;            /* Reserved. */
    vuint32_t T3_E:1;
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} CTU_THCR1_tag;

typedef union CTU_THCR2_union_tag {    /* Trigger Handler Control Register 2 */
  vuint32_t R;
  struct {
    vuint32_t T4_ADCE:1;
    vuint32_t _unused_1:1;             /* Reserved. */
    vuint32_t _unused_2:1;             /* Reserved. */
    vuint32_t _unused_3:1;             /* Reserved. */
    vuint32_t _unused_4:1;             /* Reserved. */
    vuint32_t _unused_5:1;             /* Reserved. */
    vuint32_t T4_E:1;
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t T5_ADCE:1;
    vuint32_t _unused_9:1;             /* Reserved. */
    vuint32_t _unused_10:1;            /* Reserved. */
    vuint32_t _unused_11:1;            /* Reserved. */
    vuint32_t _unused_12:1;            /* Reserved. */
    vuint32_t _unused_13:1;            /* Reserved. */
    vuint32_t T5_E:1;
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t T6_ADCE:1;
    vuint32_t _unused_17:1;            /* Reserved. */
    vuint32_t _unused_18:1;            /* Reserved. */
    vuint32_t _unused_19:1;            /* Reserved. */
    vuint32_t _unused_20:1;            /* Reserved. */
    vuint32_t _unused_21:1;            /* Reserved. */
    vuint32_t T6_E:1;
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t T7_ADCE:1;
    vuint32_t _unused_25:1;            /* Reserved. */
    vuint32_t _unused_26:1;            /* Reserved. */
    vuint32_t _unused_27:1;            /* Reserved. */
    vuint32_t _unused_28:1;            /* Reserved. */
    vuint32_t _unused_29:1;            /* Reserved. */
    vuint32_t T7_E:1;
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} CTU_THCR2_tag;

typedef union CTU_CLR_A_union_tag {    /* Commands List Register A for ADC single-conversion mode commands */
  vuint16_t R;
  struct {
    vuint16_t CH:4;                    /* ADC Port channel number. */
    vuint16_t _unused_4:1;             /* Reserved */
    vuint16_t SU:1;                    /* ADC Port A / Port B selection. */
    vuint16_t _unused_6:3;             /* Reserved */
    vuint16_t ST0:1;                   /* ST0 */
    vuint16_t FIFO:3;                  /* FIFO used for ADC Port A / Port B. */
    vuint16_t CMS:1;
    vuint16_t LC:1;                    /* Last Command bit */
    vuint16_t CIR:1;
  } B;
} CTU_CLR_A_tag;

typedef union CTU_CLR_B_union_tag {    /* Command List Register B for ADC dual-conversion mode commands */
  vuint16_t R;
  struct {
    vuint16_t CH_A:4;                  /* ADC Port A channel number. */
    vuint16_t _unused_4:1;             /* Reserved */
    vuint16_t CH_B:4;                  /* ADC Port B channel number. */
    vuint16_t ST0:1;                   /* Sel-Test mode control 0. Must be 0 in this register format. */
    vuint16_t FIFO:3;                  /* FIFO used for ADC Port A / Port B. */
    vuint16_t CMS:1;
    vuint16_t LC:1;                    /* Last Command bit */
    vuint16_t CIR:1;
  } B;
} CTU_CLR_B_tag;

typedef union CTU_CLR_C_union_tag {    /* Command List Register C for self-test commands */
  vuint16_t R;
  struct {
    vuint16_t BSIZE:7;                 /* Burst size of the algorithm iteration */
    vuint16_t ALG:2;                   /* Algorithm scheduled */
    vuint16_t ST0:1;
    vuint16_t _unused_10:1;            /* Reserved */
    vuint16_t ST_SU:1;
    vuint16_t ST_CMS:1;
    vuint16_t ST1:1;
    vuint16_t LC:1;
    vuint16_t CIR:1;
  } B;
} CTU_CLR_C_tag;

typedef union CTU_CLR_union_tag {
  CTU_CLR_A_tag A;                     /* Commands List Register A for ADC single-conversion mode commands */
  CTU_CLR_B_tag B;                     /* Command List Register B for ADC dual-conversion mode commands */
  CTU_CLR_C_tag C;                     /* Command List Register C for self-test commands */
} CTU_CLR_tag;

typedef union CTU_FDCR_union_tag {     /* FIFO DMA Control Register */
  vuint16_t R;
  struct {
    vuint16_t DE0:1;
    vuint16_t DE1:1;
    vuint16_t DE2:1;
    vuint16_t DE3:1;
    vuint16_t _unused_4:4;             /* Reserved */
    vuint16_t _unused_8:1;             /* Reserved */
    vuint16_t _unused_9:1;             /* Reserved */
    vuint16_t _unused_10:1;            /* Reserved */
    vuint16_t _unused_11:1;            /* Reserved */
    vuint16_t _unused_12:4;            /* Reserved */
  } B;
} CTU_FDCR_tag;

typedef union CTU_FCR_union_tag {      /* FIFO Control Register */
  vuint32_t R;
  struct {
    vuint32_t FULL_EN0:1;
    vuint32_t EMPTY_EN0:1;
    vuint32_t OF_EN0:1;
    vuint32_t OR_EN0:1;
    vuint32_t FULL_EN1:1;
    vuint32_t EMPTY_EN1:1;
    vuint32_t OF_EN1:1;
    vuint32_t OR_EN1:1;
    vuint32_t FULL_EN2:1;
    vuint32_t EMPTY_EN2:1;
    vuint32_t OF_EN2:1;
    vuint32_t OR_EN2:1;
    vuint32_t FULL_EN3:1;
    vuint32_t EMPTY_EN3:1;
    vuint32_t OF_EN3:1;
    vuint32_t OR_EN3:1;
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} CTU_FCR_tag;

typedef union CTU_FTH_union_tag {      /* FIFO Threshold Register */
  vuint32_t R;
  struct {
    vuint32_t TH0:8;
    vuint32_t TH1:8;
    vuint32_t TH2:8;
    vuint32_t TH3:8;
  } B;
} CTU_FTH_tag;

typedef union CTU_FST_union_tag {      /* FIFO Status Register */
  vuint32_t R;
  struct {
    vuint32_t FULL0:1;
    vuint32_t EMP0:1;
    vuint32_t OF0:1;
    vuint32_t OR0:1;
    vuint32_t FULL1:1;                 /* FULL1 */
    vuint32_t EMP1:1;
    vuint32_t OF1:1;
    vuint32_t OR1:1;
    vuint32_t FULL2:1;
    vuint32_t EMP2:1;
    vuint32_t OF2:1;
    vuint32_t OR2:1;
    vuint32_t FULL3:1;
    vuint32_t EMP3:1;
    vuint32_t OF3:1;
    vuint32_t OR3:1;
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} CTU_FST_tag;

typedef union CTU_FR_union_tag {       /* FIFO Right Aligned Data Register */
  vuint32_t R;
  struct {
    vuint32_t DATA:12;
    vuint32_t _unused_12:4;            /* Reserved */
    vuint32_t N_CH:3;
    vuint32_t ADC:1;                   /* This bit indicates from which ADC Port the value in the DATA field corresponds to. */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} CTU_FR_tag;

typedef union CTU_FL_union_tag {       /* FIFO Signed Left Aligned Data Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;             /* Reserved */
    vuint32_t LA_DATA:12;              /* LA_DATA */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t N_CH:3;
    vuint32_t ADC:1;                   /* This bit indicates from which ADC Port the value in the DATA field corresponds to. */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} CTU_FL_tag;

typedef union CTU_EFR_union_tag {      /* Error Flag Register */
  vuint16_t R;
  struct {
    vuint16_t MRS_RE:1;
    vuint16_t SM_TO:1;
    vuint16_t ICE:1;
    vuint16_t MRS_O:1;
    vuint16_t TGS_OSM:1;
    vuint16_t ADC_OE:1;
    vuint16_t _unused_6:1;             /* Reserved */
    vuint16_t _unused_7:1;             /* Reserved */
    vuint16_t _unused_8:1;             /* Reserved */
    vuint16_t _unused_9:1;             /* Reserved */
    vuint16_t ERRCMP:1;
    vuint16_t _unused_11:1;            /* Reserved */
    vuint16_t CS:1;
    vuint16_t LIST_BE:1;
    vuint16_t _unused_14:2;            /* Reserved */
  } B;
} CTU_EFR_tag;

typedef union CTU_IFR_union_tag {      /* Interrupt Flag Register */
  vuint16_t R;
  struct {
    vuint16_t MRS_I:1;
    vuint16_t T0_I:1;
    vuint16_t T1_I:1;
    vuint16_t T2_I:1;
    vuint16_t T3_I:1;
    vuint16_t T4_I:1;
    vuint16_t T5_I:1;
    vuint16_t T6_I:1;
    vuint16_t T7_I:1;
    vuint16_t ADC_I:1;
    vuint16_t SERR_A:1;
    vuint16_t SERR_B:1;
    vuint16_t _unused_12:4;            /* Reserved */
  } B;
} CTU_IFR_tag;

typedef union CTU_IR_union_tag {       /* Interrupt/DMA Register */
  vuint16_t R;
  struct {
    vuint16_t IEE:1;
    vuint16_t MRS_IE:1;
    vuint16_t MRS_DMAE:1;
    vuint16_t DMA_DE:1;
    vuint16_t SAF_CNT_A_EN:1;          /* Enable the ADC Port A counter to check the conversion time. */
    vuint16_t SAF_CNT_B_EN:1;          /* Enable the ADC Port B counter to check the conversion time. */
    vuint16_t _unused_6:2;             /* Reserved */
    vuint16_t T0_IE:1;                 /* Trigger 0 Interrupt Enable */
    vuint16_t T1_IE:1;                 /* Trigger 1 Interrupt Enable */
    vuint16_t T2_IE:1;                 /* Trigger 2 Interrupt Enable */
    vuint16_t T3_IE:1;                 /* Trigger 3 Interrupt Enable */
    vuint16_t T4_IE:1;                 /* Trigger 4 Interrupt Enable */
    vuint16_t T5_IE:1;                 /* Trigger 5 Interrupt Enable */
    vuint16_t T6_IE:1;                 /* Trigger 6 Interrupt Enable */
    vuint16_t T7_IE:1;                 /* Trigger 7 Interrupt Enable */
  } B;
} CTU_IR_tag;

typedef union CTU_COTR_union_tag {     /* Control ON Time Register */
  vuint16_t R;
  struct {
    vuint16_t COTGT:8;                 /* COTGT */
    vuint16_t _unused_8:8;             /* Reserved */
  } B;
} CTU_COTR_tag;

typedef union CTU_CR_union_tag {       /* Control Register */
  vuint16_t R;
  struct {
    vuint16_t TGSISR_RE:1;
    vuint16_t GRE:1;
    vuint16_t MRS_SG:1;
    vuint16_t FGRE:1;
    vuint16_t CGRE:1;
    vuint16_t DFE:1;
    vuint16_t CTU_ODIS:1;
    vuint16_t CTU_ADC_R:1;
    vuint16_t T0_SG:1;
    vuint16_t T1_SG:1;
    vuint16_t T2_SG:1;
    vuint16_t T3_SG:1;
    vuint16_t T4_SG:1;
    vuint16_t T5_SG:1;
    vuint16_t T6_SG:1;
    vuint16_t T7_SG:1;
  } B;
} CTU_CR_tag;

typedef union CTU_DFR_union_tag {      /* Digital Filter Register */
  vuint16_t R;
  struct {
    vuint16_t FILTER_N:8;
    vuint16_t _unused_8:8;             /* Reserved */
  } B;
} CTU_DFR_tag;

typedef union CTU_EXPAR_union_tag {    /* Expected Value A Register */
  vuint16_t R;
  struct {
    vuint16_t EXPA:16;                 /* This value is the expected number of system clock cycles needed by ADC Port A to complete a conversion. */
  } B;
} CTU_EXPAR_tag;

typedef union CTU_EXPBR_union_tag {    /* Expected Value B Register */
  vuint16_t R;
  struct {
    vuint16_t EXPB:16;                 /* This value is the expected number of system clock cycles needed by ADC Port B to complete a conversion. */
  } B;
} CTU_EXPBR_tag;

typedef union CTU_CNTRNGR_union_tag {  /* Counter Range Register */
  vuint16_t R;
  struct {
    vuint16_t CNTRNG:8;                /* CNTRNG */
    vuint16_t _unused_8:8;             /* Reserved */
  } B;
} CTU_CNTRNGR_tag;

typedef union CTU_LISTCSR_union_tag {  /* List Control/Status Register */
  vuint32_t R;
  struct {
    vuint32_t PAR_LIST:1;
    vuint32_t _unused_1:15;            /* Reserved */
    vuint32_t LIST0_ADDR:5;            /* List Address 0. Indicates the command address being executed when LIST_BE flag in EFR register was set. */
    vuint32_t _unused_21:2;            /* Reserved */
    vuint32_t LIST0_BLK:1;
    vuint32_t LIST1_ADDR:5;
    vuint32_t _unused_29:2;            /* Reserved */
    vuint32_t LIST1_BLK:1;
  } B;
} CTU_LISTCSR_tag;

struct CTU_tag {
  CTU_TGSISR_tag TGSISR;               /* Trigger Generator Subunit Input Selection Register */
  CTU_TGSCR_tag TGSCR;                 /* Trigger Generator Subunit Control Register */
  CTU_TCR_tag TCR[8];                  /* Trigger Compare Register */
  CTU_TGSCCR_tag TGSCCR;               /* TGS Counter Compare Register */
  CTU_TGSCRR_tag TGSCRR;               /* TGS Counter Reload Register */
  uint8_t CTU_reserved0[2];
  CTU_CLCR1_tag CLCR1;                 /* Commands List Control Register 1 */
  CTU_CLCR2_tag CLCR2;                 /* Commands List Control Register 2 */
  CTU_THCR1_tag THCR1;                 /* Trigger Handler Control Register 1 */
  CTU_THCR2_tag THCR2;                 /* Trigger Handler Control Register 2 */
  CTU_CLR_tag CLR[24];
  uint8_t CTU_reserved1[16];
  CTU_FDCR_tag FDCR;                   /* FIFO DMA Control Register */
  uint8_t CTU_reserved2[2];
  CTU_FCR_tag FCR;                     /* FIFO Control Register */
  CTU_FTH_tag FTH;                     /* FIFO Threshold Register */
  uint8_t CTU_reserved3[4];
  CTU_FST_tag FST;                     /* FIFO Status Register */
  CTU_FR_tag FR[4];                    /* FIFO Right Aligned Data Register */
  uint8_t CTU_reserved4[16];
  CTU_FL_tag FL[4];                    /* FIFO Signed Left Aligned Data Register */
  uint8_t CTU_reserved5[16];
  CTU_EFR_tag EFR;                     /* Error Flag Register */
  CTU_IFR_tag IFR;                     /* Interrupt Flag Register */
  CTU_IR_tag IR;                       /* Interrupt/DMA Register */
  CTU_COTR_tag COTR;                   /* Control ON Time Register */
  CTU_CR_tag CR;                       /* Control Register */
  CTU_DFR_tag DFR;                     /* Digital Filter Register */
  CTU_EXPAR_tag EXPAR;                 /* Expected Value A Register */
  CTU_EXPBR_tag EXPBR;                 /* Expected Value B Register */
  CTU_CNTRNGR_tag CNTRNGR;             /* Counter Range Register */
  uint8_t CTU_reserved6[2];
  CTU_LISTCSR_tag LISTCSR;             /* List Control/Status Register */
};


/* ============================================================================
   =============================== Module: DDR_GPR ============================
   ============================================================================ */

typedef union DDR_GPR_DDR_CONFIG_0_union_tag { /* Configuration 0 Register */
  vuint32_t R;
  struct {
    vuint32_t RESERVED_0:2;            /* Reserved 0 */
    vuint32_t RESERVED_1:2;            /* Reserved 1 */
    vuint32_t PA_RMASK:6;              /* Read port mask [5:0] */
    vuint32_t PA_WMASK:3;              /* Write port mask [2:0] */
    vuint32_t RESERVED_2:1;            /* Reserved 2 */
    vuint32_t MEMORY_RET:1;            /* Memory data retention */
    vuint32_t RESERVED_4:1;            /* Reserved 4 */
    vuint32_t WRECC_CREDIR_CNT:7;      /* WRECC credit */
    vuint32_t SBRADDRESSSTARTMASK_35_32:4; /* Scrubber address start mask */
    vuint32_t SBRADDRESSRANGEMASK_35_32:4; /* Scrubber address range mask */
    vuint32_t PERF_CNT_FULL_MASK:1;    /* Monitor counter full interrupt */
  } B;
} DDR_GPR_DDR_CONFIG_0_tag;

typedef union DDR_GPR_DDR_CONFIG_1_union_tag { /* Configuration 1 Register */
  vuint32_t R;
  struct {
    vuint32_t SBRADDRESSSTARTMASK:32;  /* Scrubber address start mask */
  } B;
} DDR_GPR_DDR_CONFIG_1_tag;

typedef union DDR_GPR_DDR_CONFIG_2_union_tag { /* Configuration 2 Register */
  vuint32_t R;
  struct {
    vuint32_t SBRADDRESSRANGEMASK:32;  /* Scrubber address range mask */
  } B;
} DDR_GPR_DDR_CONFIG_2_tag;

typedef union DDR_GPR_DDR_CONFIG_3_union_tag { /* Configuration 3 Register */
  vuint32_t R;
  struct {
    vuint32_t DBG_DFI_IE_CMD_TYPE:3;   /* Debug dfi command type */
    vuint32_t HIF_REFRESH_REQ_BANK:6;  /* Refresh bank */
    vuint32_t RAQB_WCOUNT_0:4;         /* AXI port 0 read address channel */
    vuint32_t RAQB_WCOUNT_1:4;         /* AXI port 1 read address channel */
    vuint32_t RAQB_WCOUNT_2:4;         /* port 2 read address channel */
    vuint32_t STAT_DDRC_REG_SELFREF_TYPE:2; /* DDR controller 0 self refresh status and type */
    vuint32_t RESERVED:9;              /* Reserved */
  } B;
} DDR_GPR_DDR_CONFIG_3_tag;

typedef union DDR_GPR_DDR_CONFIG_4_union_tag { /* Configuration 4 Register */
  vuint32_t R;
  struct {
    vuint32_t RAQR_WCOUNT_0:4;         /* AXI port 0 read address channel */
    vuint32_t RAQR_WCOUNT_1:4;         /* AXI port 1 read address channel */
    vuint32_t RAQR_WCOUNT_2:4;         /* AXI port 2 read address channel */
    vuint32_t WAQ_WCOUNT_0:4;          /* AXI port 0 write address channel */
    vuint32_t WAQ_WCOUNT_1:4;          /* AXI port 1 write address channel */
    vuint32_t WAQ_WCOUNT_2:4;          /* AXI port 2 write address channel */
    vuint32_t _unused_24:7;            /* Reserved */
    vuint32_t RESERVED:1;              /* Reserved */
  } B;
} DDR_GPR_DDR_CONFIG_4_tag;

typedef union DDR_GPR_DDR_CONFIG_5_union_tag { /* Configuration 5 Register */
  vuint32_t R;
  struct {
    vuint32_t RAQR_POP_0:1;            /* AXI port 0 read address channel */
    vuint32_t RAQR_POP_1:1;            /* AXI port 1 read address channel */
    vuint32_t RAQR_POP_2:1;            /* AXI port 2 read address channel */
    vuint32_t RAQR_PUSH_0:1;           /* AXI port 0 read address channel */
    vuint32_t RAQR_PUSH_1:1;           /* AXI port 1 read address channel */
    vuint32_t RAQR_PUSH_2:1;           /* AXI port 2 read address channel */
    vuint32_t RAQ_SPLIT_0:1;           /* AXI port 0 read address channel */
    vuint32_t RAQ_SPLIT_1:1;           /* AXI port 1 read address channel */
    vuint32_t RAQ_SPLIT_2:1;           /* AXI port 2 read address channel */
    vuint32_t DUMMY_RCCU_SET_AXI0:1;   /* Alarm flag of Dummy RCCU */
    vuint32_t MAIN_RCCU_SET_AXI0:1;    /* Alarm flag of Main RCCU */
    vuint32_t DUMMY_RCCU_CLR_AXI0:1;   /* Alarm flag of Dummy RCCU */
    vuint32_t MAIN_RCCU_CLR_AXI0:1;    /* Alarm flag of Main RCCU */
    vuint32_t DUMMY_RCCU_SET_AXI1:1;   /* Alarm flag of Dummy RCCU */
    vuint32_t MAIN_RCCU_SET_AXI1:1;    /* Alarm flag of Main RCCU */
    vuint32_t DUMMY_RCCU_CLR_AXI1:1;   /* Alarm flag of Dummy RCCU */
    vuint32_t MAIN_RCCU_CLR_AXI1:1;    /* Alarm flag of Main RCCU */
    vuint32_t DUMMY_RCCU_SET_AXI2:1;   /* Alarm flag of Dummy RCCU */
    vuint32_t MAIN_RCCU_SET_AXI2:1;    /* Alarm flag of Main RCCU */
    vuint32_t DUMMY_RCCU_CLR_AXI2:1;   /* Alarm flag of Dummy RCCU */
    vuint32_t MAIN_RCCU_CLR_AXI2:1;    /* Alarm flag of Main RCCU */
    vuint32_t RESERVED:11;             /* Reserved */
  } B;
} DDR_GPR_DDR_CONFIG_5_tag;

typedef union DDR_GPR_DDR_CONFIG_6_union_tag { /* Configuration 6 Register */
  vuint32_t R;
  struct {
    vuint32_t RESERVED_1:16;           /* Reserved */
    vuint32_t PERF_OP_IS_ZQCL:1;       /* ZQ calibration long command */
    vuint32_t PERF_OP_IS_ZQCS:1;       /* ZQ calibration short command */
    vuint32_t RESERVED_2:14;           /* Reserved */
  } B;
} DDR_GPR_DDR_CONFIG_6_tag;

typedef union DDR_GPR_DDR_RET_CONTROL_union_tag { /* LP3 IO Retention Control Register */
  vuint32_t R;
  struct {
    vuint32_t DDR_RET_CONTROL:1;       /* DDR LP3 IO retention control */
    vuint32_t RESERVED:31;             /* Reserved */
  } B;
} DDR_GPR_DDR_RET_CONTROL_tag;

struct DDR_GPR_tag {
  DDR_GPR_DDR_CONFIG_0_tag DDR_CONFIG_0; /* Configuration 0 Register */
  DDR_GPR_DDR_CONFIG_1_tag DDR_CONFIG_1; /* Configuration 1 Register */
  DDR_GPR_DDR_CONFIG_2_tag DDR_CONFIG_2; /* Configuration 2 Register */
  DDR_GPR_DDR_CONFIG_3_tag DDR_CONFIG_3; /* Configuration 3 Register */
  DDR_GPR_DDR_CONFIG_4_tag DDR_CONFIG_4; /* Configuration 4 Register */
  DDR_GPR_DDR_CONFIG_5_tag DDR_CONFIG_5; /* Configuration 5 Register */
  DDR_GPR_DDR_CONFIG_6_tag DDR_CONFIG_6; /* Configuration 6 Register */
  DDR_GPR_DDR_RET_CONTROL_tag DDR_RET_CONTROL; /* LP3 IO Retention Control Register */
};


/* ============================================================================
   =============================== Module: DDR_PLL ============================
   ============================================================================ */

typedef union DDR_PLL_PLLCR_union_tag { /* PLL Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t PLLPD:1;                 /* PLL power down */
  } B;
} DDR_PLL_PLLCR_tag;

typedef union DDR_PLL_PLLSR_union_tag { /* PLL status register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t LOCK:1;                  /* Lock status */
    vuint32_t LOL:1;                   /* Loss-Of-Lock flag */
    vuint32_t _unused_4:4;
    vuint32_t _unused_8:3;
    vuint32_t _unused_11:21;
  } B;
} DDR_PLL_PLLSR_tag;

typedef union DDR_PLL_PLLDV_union_tag { /* PLL Divider */
  vuint32_t R;
  struct {
    vuint32_t MFI:8;                   /* Integer portion of loop divider. */
    vuint32_t _unused_8:4;
    vuint32_t RDIV:3;                  /* Input clock predivider */
    vuint32_t _unused_15:1;
    vuint32_t _unused_16:6;
    vuint32_t _unused_22:3;
    vuint32_t _unused_25:6;
    vuint32_t _unused_31:1;
  } B;
} DDR_PLL_PLLDV_tag;

typedef union DDR_PLL_PLLFM_union_tag { /* PLL Frequency Modulation */
  vuint32_t R;
  struct {
    vuint32_t STEPNO:11;               /* Number of steps of modulation period/frequency modulation */
    vuint32_t _unused_11:5;
    vuint32_t STEPSIZE:10;             /* Frequency modulation step size */
    vuint32_t _unused_26:3;
    vuint32_t SPREADCTL:1;             /* Modulation type selection */
    vuint32_t SSCGBYP:1;               /* SSCG bypass */
    vuint32_t _unused_31:1;
  } B;
} DDR_PLL_PLLFM_tag;

typedef union DDR_PLL_PLLFD_union_tag { /* PLL Fractional Divider */
  vuint32_t R;
  struct {
    vuint32_t MFN:15;                  /* Numerator of fractional loop division factor */
    vuint32_t _unused_15:1;
    vuint32_t _unused_16:1;
    vuint32_t _unused_17:1;
    vuint32_t _unused_18:4;
    vuint32_t _unused_22:6;
    vuint32_t _unused_28:1;
    vuint32_t _unused_29:1;
    vuint32_t SDMEN:1;                 /* Sigma-delta modulation enable */
    vuint32_t _unused_31:1;
  } B;
} DDR_PLL_PLLFD_tag;

typedef union DDR_PLL_PLLCLKMUX_union_tag { /* PLL Clock Multiplexer */
  vuint32_t R;
  struct {
    vuint32_t REFCLKSEL:1;             /* Reference clock select */
    vuint32_t _unused_1:31;
  } B;
} DDR_PLL_PLLCLKMUX_tag;

typedef union DDR_PLL_PLLODIV_union_tag { /* PLL Output Divider */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved (for internal use only) */
    vuint32_t _unused_2:14;
    vuint32_t DIV:8;                   /* Division value */
    vuint32_t _unused_24:7;
    vuint32_t DE:1;                    /* Divider enable */
  } B;
} DDR_PLL_PLLODIV_tag;

struct DDR_PLL_tag {
  DDR_PLL_PLLCR_tag PLLCR;             /* PLL Control Register */
  DDR_PLL_PLLSR_tag PLLSR;             /* PLL status register */
  DDR_PLL_PLLDV_tag PLLDV;             /* PLL Divider */
  DDR_PLL_PLLFM_tag PLLFM;             /* PLL Frequency Modulation */
  DDR_PLL_PLLFD_tag PLLFD;             /* PLL Fractional Divider */
  uint8_t DDR_PLL_reserved0[12];
  DDR_PLL_PLLCLKMUX_tag PLLCLKMUX;     /* PLL Clock Multiplexer */
  uint8_t DDR_PLL_reserved1[92];
  DDR_PLL_PLLODIV_tag PLLODIV[1];      /* PLL Output Divider */
};


/* ============================================================================
   =============================== Module: DFS ================================
   ============================================================================ */

typedef union DFS_PORTSR_union_tag {   /* Port status register */
  vuint32_t R;
  struct {
    vuint32_t PORTSTAT:6;              /* Port status */
    vuint32_t _unused_6:26;
  } B;
} DFS_PORTSR_tag;

typedef union DFS_PORTLOLSR_union_tag { /* Port Loss of Lock Status */
  vuint32_t R;
  struct {
    vuint32_t LOLF0:1;                 /* Loss of lock flag */
    vuint32_t LOLF1:1;                 /* Loss of lock flag */
    vuint32_t LOLF2:1;                 /* Loss of lock flag */
    vuint32_t LOLF3:1;                 /* Loss of lock flag */
    vuint32_t LOLF4:1;                 /* Loss of lock flag */
    vuint32_t LOLF5:1;                 /* Loss of lock flag */
    vuint32_t _unused_6:26;
  } B;
} DFS_PORTLOLSR_tag;

typedef union DFS_PORTRESET_union_tag { /* Port Reset */
  vuint32_t R;
  struct {
    vuint32_t RESET0:1;
    vuint32_t RESET1:1;
    vuint32_t RESET2:1;
    vuint32_t RESET3:1;
    vuint32_t RESET4:1;
    vuint32_t RESET5:1;
    vuint32_t _unused_6:26;
  } B;
} DFS_PORTRESET_tag;

typedef union DFS_CTL_union_tag {      /* Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;
    vuint32_t DFS_RESET:1;
    vuint32_t _unused_2:30;
  } B;
} DFS_CTL_tag;

typedef union DFS_DVPORT_union_tag {   /* Divider for Port 0 */
  vuint32_t R;
  struct {
    vuint32_t MFN:6;
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t MFI:8;
    vuint32_t _unused_16:16;
  } B;
} DFS_DVPORT_tag;

struct DFS_tag {
  uint8_t DFS_reserved0[12];
  DFS_PORTSR_tag PORTSR;               /* Port status register */
  DFS_PORTLOLSR_tag PORTLOLSR;         /* Port Loss of Lock Status */
  DFS_PORTRESET_tag PORTRESET;         /* Port Reset */
  DFS_CTL_tag CTL;                     /* Control */
  DFS_DVPORT_tag DVPORT[6];            /* Divider for Port 0 */
};


/* ============================================================================
   =============================== Module: DIRU ===============================
   ============================================================================ */

typedef union DIRU_DIRUTA_union_tag {  /* DIRU Transaction Activity */
  vuint32_t R;
  struct {
    vuint32_t TRANSACTV:1;             /* Transaction Active */
    vuint32_t _unused_1:31;
  } B;
} DIRU_DIRUTA_tag;

typedef union DIRU_DIRUSFE_union_tag { /* DIRU Snoop Filtering Enable */
  vuint32_t R;
  struct {
    vuint32_t SFEN0:1;                 /* Snoop Filter Enable */
    vuint32_t _unused_1:31;
  } B;
} DIRU_DIRUSFE_tag;

typedef union DIRU_DIRUCASE0_union_tag { /* DIRU Caching Agent Snoop Enable */
  vuint32_t R;
  struct {
    vuint32_t CASNPEN0:1;              /* Caching Agent Snoop Enable */
    vuint32_t CASNPEN1:1;              /* Caching Agent Snoop Enable */
    vuint32_t _unused_2:30;
  } B;
} DIRU_DIRUCASE0_tag;

typedef union DIRU_DIRUCASA0_union_tag { /* DIRU Caching Agent Snoop Activity */
  vuint32_t R;
  struct {
    vuint32_t CASNPACTV0:1;            /* Caching Agent Snoop Activity */
    vuint32_t CASNPACTV1:1;            /* Caching Agent Snoop Activity */
    vuint32_t _unused_2:30;
  } B;
} DIRU_DIRUCASA0_tag;

typedef union DIRU_DIRUSFMC_union_tag { /* DIRU Snoop Filter Maintenance Control */
  vuint32_t R;
  struct {
    vuint32_t SFMNTOP:4;               /* Snoop Filter Maintenance Operation */
    vuint32_t _unused_4:12;
    vuint32_t SFID:5;                  /* Snoop Filter Identifier */
    vuint32_t SFSECATTR:1;             /* Snoop Filter Security Attribute */
    vuint32_t _unused_22:10;
  } B;
} DIRU_DIRUSFMC_tag;

typedef union DIRU_DIRUSFMA_union_tag { /* DIRU Snoop Filter Maintenance Activity */
  vuint32_t R;
  struct {
    vuint32_t MNTOPACTV:1;             /* Maintenance Operation Active */
    vuint32_t _unused_1:31;
  } B;
} DIRU_DIRUSFMA_tag;

typedef union DIRU_DIRUSFMLR0_union_tag { /* DIRU Snoop Filter Maintenance Location Register 0 */
  vuint32_t R;
  struct {
    vuint32_t MNTSET:20;               /* Maintenance Set */
    vuint32_t MNTWAY:6;                /* Maintenance Way */
    vuint32_t MNTWORD:6;               /* Maintenance Word */
  } B;
} DIRU_DIRUSFMLR0_tag;

typedef union DIRU_DIRUSFMLR1_union_tag { /* DIRU Snoop Filter Maintenance Location Register 1 */
  vuint32_t R;
  struct {
    vuint32_t MNTADDR:12;              /* Maintenance Address */
    vuint32_t _unused_12:20;
  } B;
} DIRU_DIRUSFMLR1_tag;

typedef union DIRU_DIRUCEC_union_tag { /* DIRU Correctable Error Control */
  vuint32_t R;
  struct {
    vuint32_t ERRDETEN:1;              /* Correctable Error Detection Enable */
    vuint32_t ERRINTEN:1;              /* Correctable Error Interrupt Enable */
    vuint32_t _unused_2:2;
    vuint32_t ERRTHRESHOLD:8;          /* Correctable Error Threshold */
    vuint32_t _unused_12:20;
  } B;
} DIRU_DIRUCEC_tag;

typedef union DIRU_DIRUCES_union_tag { /* DIRU Correctable Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERRVLD:1;                /* Error Valid */
    vuint32_t ERROVF:1;                /* Error Overflow */
    vuint32_t _unused_2:2;
    vuint32_t ERRCOUNT:8;              /* Error Count */
    vuint32_t ERRTYPE:4;               /* Error Type */
    vuint32_t ERRINFO:8;               /* Error Info */
    vuint32_t _unused_24:8;
  } B;
} DIRU_DIRUCES_tag;

typedef union DIRU_DIRUCELR0_union_tag { /* DIRU Correctable Error Location Register 0 */
  vuint32_t R;
  struct {
    vuint32_t ERRENTRY:20;             /* Error Entry (or Set) */
    vuint32_t ERRWAY:6;                /* Error Way */
    vuint32_t ERRWORD:6;               /* Error Word */
  } B;
} DIRU_DIRUCELR0_tag;

typedef union DIRU_DIRUCELR1_union_tag { /* DIRU Correctable Error Location Register 1 */
  vuint32_t R;
  struct {
    vuint32_t ERRADDR:12;              /* Error Address */
    vuint32_t _unused_12:20;
  } B;
} DIRU_DIRUCELR1_tag;

typedef union DIRU_DIRUCESA_union_tag { /* DIRU Correctable Error Status Alias */
  vuint32_t R;
  struct {
    vuint32_t ERRVLD:1;                /* Error Valid */
    vuint32_t ERROVF:1;                /* Error Overflow */
    vuint32_t _unused_2:2;
    vuint32_t ERRCOUNT:8;              /* Error Count */
    vuint32_t ERRTYPE:4;               /* Error Type */
    vuint32_t ERRINFO:8;               /* Error Info */
    vuint32_t _unused_24:8;
  } B;
} DIRU_DIRUCESA_tag;

typedef union DIRU_DIRUUEC_union_tag { /* DIRU Uncorrectable Error Control */
  vuint32_t R;
  struct {
    vuint32_t ERRDETEN:1;              /* Uncorrectable Error Detection Enable */
    vuint32_t ERRINTEN:1;              /* Uncorrectable Error Interrupt Enable */
    vuint32_t _unused_2:2;
    vuint32_t ERRTHRESHOLD:8;          /* Uncorrectable Error Threshold */
    vuint32_t _unused_12:20;
  } B;
} DIRU_DIRUUEC_tag;

typedef union DIRU_DIRUUES_union_tag { /* DIRU Uncorrectable Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERRVLD:1;                /* Error Valid */
    vuint32_t ERROVF:1;                /* Error Overflow */
    vuint32_t _unused_2:2;
    vuint32_t ERRCOUNT:8;              /* Error Count */
    vuint32_t ERRTYPE:4;               /* Error Type */
    vuint32_t ERRINFO:8;               /* Error Info */
    vuint32_t _unused_24:8;
  } B;
} DIRU_DIRUUES_tag;

typedef union DIRU_DIRUUELR0_union_tag { /* DIRU Uncorrectable Error Location Register 0 */
  vuint32_t R;
  struct {
    vuint32_t ERRENTRY:20;             /* Error Entry (or Set) */
    vuint32_t ERRWAY:6;                /* Error Way */
    vuint32_t ERRWORD:6;               /* Error Word */
  } B;
} DIRU_DIRUUELR0_tag;

typedef union DIRU_DIRUUELR1_union_tag { /* DIRU Uncorrectable Error Location Register 1 */
  vuint32_t R;
  struct {
    vuint32_t ERRADDR:12;              /* Error Address */
    vuint32_t _unused_12:20;
  } B;
} DIRU_DIRUUELR1_tag;

typedef union DIRU_DIRUUESA_union_tag { /* DIRU Uncorrectable Error Status Alias */
  vuint32_t R;
  struct {
    vuint32_t ERRVLD:1;                /* Error Valid */
    vuint32_t ERROVF:1;                /* Error Overflow */
    vuint32_t _unused_2:2;
    vuint32_t ERRCOUNT:8;              /* Error Count */
    vuint32_t ERRTYPE:4;               /* Error Type */
    vuint32_t ERRINFO:8;               /* Error Info */
    vuint32_t _unused_24:8;
  } B;
} DIRU_DIRUUESA_tag;

typedef union DIRU_DIRUID_union_tag {  /* DIRU Identification Register */
  vuint32_t R;
  struct {
    vuint32_t IMPLVER:8;               /* Implementation Version */
    vuint32_t _unused_8:24;
  } B;
} DIRU_DIRUID_tag;

struct DIRU_tag {
  uint8_t DIRU_reserved0[4];
  DIRU_DIRUTA_tag DIRUTA;              /* DIRU Transaction Activity */
  uint8_t DIRU_reserved1[8];
  DIRU_DIRUSFE_tag DIRUSFE;            /* DIRU Snoop Filtering Enable */
  uint8_t DIRU_reserved2[44];
  DIRU_DIRUCASE0_tag DIRUCASE0;        /* DIRU Caching Agent Snoop Enable */
  uint8_t DIRU_reserved3[12];
  DIRU_DIRUCASA0_tag DIRUCASA0;        /* DIRU Caching Agent Snoop Activity */
  uint8_t DIRU_reserved4[44];
  DIRU_DIRUSFMC_tag DIRUSFMC;          /* DIRU Snoop Filter Maintenance Control */
  DIRU_DIRUSFMA_tag DIRUSFMA;          /* DIRU Snoop Filter Maintenance Activity */
  DIRU_DIRUSFMLR0_tag DIRUSFMLR0;      /* DIRU Snoop Filter Maintenance Location Register 0 */
  DIRU_DIRUSFMLR1_tag DIRUSFMLR1;      /* DIRU Snoop Filter Maintenance Location Register 1 */
  uint8_t DIRU_reserved5[112];
  DIRU_DIRUCEC_tag DIRUCEC;            /* DIRU Correctable Error Control */
  DIRU_DIRUCES_tag DIRUCES;            /* DIRU Correctable Error Status */
  DIRU_DIRUCELR0_tag DIRUCELR0;        /* DIRU Correctable Error Location Register 0 */
  DIRU_DIRUCELR1_tag DIRUCELR1;        /* DIRU Correctable Error Location Register 1 */
  uint8_t DIRU_reserved6[20];
  DIRU_DIRUCESA_tag DIRUCESA;          /* DIRU Correctable Error Status Alias */
  uint8_t DIRU_reserved7[24];
  DIRU_DIRUUEC_tag DIRUUEC;            /* DIRU Uncorrectable Error Control */
  DIRU_DIRUUES_tag DIRUUES;            /* DIRU Uncorrectable Error Status */
  DIRU_DIRUUELR0_tag DIRUUELR0;        /* DIRU Uncorrectable Error Location Register 0 */
  DIRU_DIRUUELR1_tag DIRUUELR1;        /* DIRU Uncorrectable Error Location Register 1 */
  uint8_t DIRU_reserved8[20];
  DIRU_DIRUUESA_tag DIRUUESA;          /* DIRU Uncorrectable Error Status Alias */
  uint8_t DIRU_reserved9[3732];
  DIRU_DIRUID_tag DIRUID;              /* DIRU Identification Register */
};


/* ============================================================================
   =============================== Module: DMAMUX =============================
   ============================================================================ */

typedef union DMAMUX_CHCFG_union_tag { /* Channel Configuration register */
  vuint8_t R;
  struct {
    vuint8_t SOURCE:6;                 /* DMA Channel Source (Slot) */
    vuint8_t TRIG:1;                   /* DMA Channel Trigger Enable */
    vuint8_t ENBL:1;                   /* DMA Channel Enable */
  } B;
} DMAMUX_CHCFG_tag;

struct DMAMUX_tag {
  DMAMUX_CHCFG_tag CHCFG[16];          /* Channel Configuration register */
};


/* ============================================================================
   =============================== Module: DMA_CRC ============================
   ============================================================================ */

typedef union DMA_CRC_GEC_union_tag {  /* Global Enable CRC Register */
  vuint32_t R;
  struct {
    vuint32_t GBL_EN:1;                /* Global Enable bit */
    vuint32_t SWAP_BIT:1;              /* Swap Bit */
    vuint32_t _unused_2:5;             /* Reserved */
    vuint32_t SWAP_BYTE:1;             /* Swap Byte */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} DMA_CRC_GEC_tag;

typedef union DMA_CRC_CONTROL_REGISTER_CTL_union_tag { /* CRC Control Register */
  vuint32_t R;
  struct {
    vuint32_t CH_SEL:6;                /* Channel Select */
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t POLY_SEL:4;              /* Polynomial Select */
    vuint32_t _unused_12:3;            /* Reserved */
    vuint32_t INIT_SEL:1;              /* Initial values of the CRC */
    vuint32_t MODE:3;                  /* CRC Mode */
    vuint32_t _unused_19:12;           /* Reserved */
    vuint32_t EN:1;                    /* CRC Logic */
  } B;
} DMA_CRC_CONTROL_REGISTER_CTL_tag;

typedef union DMA_CRC_CONTROL_REGISTER_ICRC_union_tag { /* Initial CRC Value Register */
  vuint32_t R;
  struct {
    vuint32_t INI_CRC_VAL:32;          /* Initial CRC Value */
  } B;
} DMA_CRC_CONTROL_REGISTER_ICRC_tag;

typedef union DMA_CRC_CONTROL_REGISTER_FCRC_union_tag { /* Final CRC Value Register */
  vuint32_t R;
  struct {
    vuint32_t CHKSUM_VAL:32;           /* Final CRC Value */
  } B;
} DMA_CRC_CONTROL_REGISTER_FCRC_tag;

typedef struct DMA_CRC_CONTROL_REGISTER_struct_tag {
  DMA_CRC_CONTROL_REGISTER_CTL_tag CTL; /* CRC Control Register */
  DMA_CRC_CONTROL_REGISTER_ICRC_tag ICRC; /* Initial CRC Value Register */
  DMA_CRC_CONTROL_REGISTER_FCRC_tag FCRC; /* Final CRC Value Register */
  uint8_t CONTROL_REGISTER_reserved0[4];
} DMA_CRC_CONTROL_REGISTER_tag;

struct DMA_CRC_tag {
  DMA_CRC_GEC_tag GEC;                 /* Global Enable CRC Register */
  uint8_t DMA_CRC_reserved0[12];
  DMA_CRC_CONTROL_REGISTER_tag CONTROL_REGISTER[8];
};


/* ============================================================================
   =============================== Module: D_IP_LLCE_SYN ======================
   ============================================================================ */

typedef union D_IP_LLCE_SYN_LLCE_SYSRSTR_union_tag { /* System reset control register */
  vuint32_t R;
  struct {
    vuint32_t CPU_RST0:1;              /* CPU Reset 0 */
    vuint32_t CPU_RST1:1;              /* CPU Reset 1 */
    vuint32_t CPU_RST2:1;              /* CPU Reset 2 */
    vuint32_t CPU_RST3:1;              /* CPU Reset 3 */
    vuint32_t _unused_4:28;
  } B;
} D_IP_LLCE_SYN_LLCE_SYSRSTR_tag;

typedef union D_IP_LLCE_SYN_LLCE_MASIDR_union_tag { /* LLCE master ID register */
  vuint32_t R;
  struct {
    vuint32_t MASIDR:32;               /* Window Start Value */
  } B;
} D_IP_LLCE_SYN_LLCE_MASIDR_tag;

typedef union D_IP_LLCE_SYN_LLCE_RAMCCSR_union_tag { /* RAM Controller Configuration and Status Register */
  vuint32_t R;
  struct {
    vuint32_t RCRWSC0:1;               /* Configure RAM read path data retiming for RAM Controller attached with DTE */
    vuint32_t RCRWSC1:1;               /* Configure RAM read path data retiming for RAM Controller attached with RXPPE */
    vuint32_t RCRWSC2:1;               /* Configure RAM read path data retiming for RAM Controller attached with TXPPE */
    vuint32_t RCRWSC3:1;               /* Configure RAM read path data retiming for RAM Controller attached with FRPE */
    vuint32_t RCRWSC4:1;               /* Configure RAM read path data retiming for RAM Controller attached with CAN RX */
    vuint32_t RCRWSC5:1;               /* Configure RAM read path data retiming for RAM Controller attached with CAN TX */
    vuint32_t _unused_6:10;
    vuint32_t RCRWSS0:1;               /* RAM read path data retiming status for RAM Controller attached with DTE */
    vuint32_t RCRWSS1:1;               /* RAM read path data retiming status for RAM Controller attached with RXPPE */
    vuint32_t RCRWSS2:1;               /* RAM read path data retiming status for RAM Controller attached with TXPPE */
    vuint32_t RCRWSS3:1;               /* RAM read path data retiming status for RAM Controller attached with FRPE */
    vuint32_t RCRWSS4:1;               /* RAM read path data retiming status for RAM Controller attached with CAN RX Data RAM */
    vuint32_t RCRWSS5:1;               /* RAM read path data retiming status for RAM Controller attached with CAN TX Data RAM */
    vuint32_t _unused_22:10;
  } B;
} D_IP_LLCE_SYN_LLCE_RAMCCSR_tag;

struct D_IP_LLCE_SYN_tag {
  D_IP_LLCE_SYN_LLCE_SYSRSTR_tag LLCE_SYSRSTR; /* System reset control register */
  uint8_t D_IP_LLCE_SYN_reserved0[4];
  D_IP_LLCE_SYN_LLCE_MASIDR_tag LLCE_MASIDR; /* LLCE master ID register */
  D_IP_LLCE_SYN_LLCE_RAMCCSR_tag LLCE_RAMCCSR; /* RAM Controller Configuration and Status Register */
};


/* ============================================================================
   =============================== Module: EIM ================================
   ============================================================================ */

typedef union EIM_EIMCR_union_tag {    /* Error Injection Module Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t GEIEN:1;                 /* Global Error Injection Enable */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} EIM_EIMCR_tag;

typedef union EIM_EICHEN_union_tag {   /* Error Injection Channel Enable register */
  vuint32_t R;
  struct {
    vuint32_t EICH31EN:1;              /* Error Injection Channel 31 Enable */
    vuint32_t EICH30EN:1;              /* Error Injection Channel 30 Enable */
    vuint32_t EICH29EN:1;              /* Error Injection Channel 29 Enable */
    vuint32_t EICH28EN:1;              /* Error Injection Channel 28 Enable */
    vuint32_t EICH27EN:1;              /* Error Injection Channel 27 Enable */
    vuint32_t EICH26EN:1;              /* Error Injection Channel 26 Enable */
    vuint32_t EICH25EN:1;              /* Error Injection Channel 25 Enable */
    vuint32_t EICH24EN:1;              /* Error Injection Channel 24 Enable */
    vuint32_t EICH23EN:1;              /* Error Injection Channel 23 Enable */
    vuint32_t EICH22EN:1;              /* Error Injection Channel 22 Enable */
    vuint32_t EICH21EN:1;              /* Error Injection Channel 21 Enable */
    vuint32_t EICH20EN:1;              /* Error Injection Channel 20 Enable */
    vuint32_t EICH19EN:1;              /* Error Injection Channel 19 Enable */
    vuint32_t EICH18EN:1;              /* Error Injection Channel 18 Enable */
    vuint32_t EICH17EN:1;              /* Error Injection Channel 17 Enable */
    vuint32_t EICH16EN:1;              /* Error Injection Channel 16 Enable */
    vuint32_t EICH15EN:1;              /* Error Injection Channel 15 Enable */
    vuint32_t EICH14EN:1;              /* Error Injection Channel 14 Enable */
    vuint32_t EICH13EN:1;              /* Error Injection Channel 13 Enable */
    vuint32_t EICH12EN:1;              /* Error Injection Channel 12 Enable */
    vuint32_t EICH11EN:1;              /* Error Injection Channel 11 Enable */
    vuint32_t EICH10EN:1;              /* Error Injection Channel 10 Enable */
    vuint32_t EICH9EN:1;               /* Error Injection Channel 9 Enable */
    vuint32_t EICH8EN:1;               /* Error Injection Channel 8 Enable */
    vuint32_t EICH7EN:1;               /* Error Injection Channel 7 Enable */
    vuint32_t EICH6EN:1;               /* Error Injection Channel 6 Enable */
    vuint32_t EICH5EN:1;               /* Error Injection Channel 5 Enable */
    vuint32_t EICH4EN:1;               /* Error Injection Channel 4 Enable */
    vuint32_t EICH3EN:1;               /* Error Injection Channel 3 Enable */
    vuint32_t EICH2EN:1;               /* Error Injection Channel 2 Enable */
    vuint32_t EICH1EN:1;               /* Error Injection Channel 1 Enable */
    vuint32_t EICH0EN:1;               /* Error Injection Channel 0 Enable */
  } B;
} EIM_EICHEN_tag;

typedef union EIM_EICHD0_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t CHKBIT_MASK:32;          /* Checkbit Mask, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD0_WORD0_tag;

typedef union EIM_EICHD0_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD0_WORD1_tag;

typedef union EIM_EICHD0_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD0_WORD2_tag;

typedef union EIM_EICHD0_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD0_WORD3_tag;

typedef union EIM_EICHD0_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD0_WORD4_tag;

typedef union EIM_EICHD0_WORD5_union_tag { /* Error Injection Channel Descriptor n, Word5 */
  vuint32_t R;
  struct {
    vuint32_t B16_19DATA_MASK:32;      /* Data Mask Bytes 16-19 */
  } B;
} EIM_EICHD0_WORD5_tag;

typedef union EIM_EICHD0_WORD6_union_tag { /* Error Injection Channel Descriptor n, Word6 */
  vuint32_t R;
  struct {
    vuint32_t B20_23DATA_MASK:32;      /* Data Mask Bytes 20-23 */
  } B;
} EIM_EICHD0_WORD6_tag;

typedef union EIM_EICHD0_WORD7_union_tag { /* Error Injection Channel Descriptor n, Word7 */
  vuint32_t R;
  struct {
    vuint32_t B24_27DATA_MASK:32;      /* Data Mask Bytes 24-27 */
  } B;
} EIM_EICHD0_WORD7_tag;

typedef union EIM_EICHD0_WORD8_union_tag { /* Error Injection Channel Descriptor n, Word8 */
  vuint32_t R;
  struct {
    vuint32_t B28_31DATA_MASK:32;      /* Data Mask Bytes 28-31 */
  } B;
} EIM_EICHD0_WORD8_tag;

typedef union EIM_EICHD1_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t CHKBIT_MASK:32;          /* Checkbit Mask, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD1_WORD0_tag;

typedef union EIM_EICHD1_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD1_WORD1_tag;

typedef union EIM_EICHD1_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD1_WORD2_tag;

typedef union EIM_EICHD1_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD1_WORD3_tag;

typedef union EIM_EICHD1_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD1_WORD4_tag;

typedef union EIM_EICHD1_WORD5_union_tag { /* Error Injection Channel Descriptor n, Word5 */
  vuint32_t R;
  struct {
    vuint32_t B16_19DATA_MASK:32;      /* Data Mask Bytes 16-19 */
  } B;
} EIM_EICHD1_WORD5_tag;

typedef union EIM_EICHD1_WORD6_union_tag { /* Error Injection Channel Descriptor n, Word6 */
  vuint32_t R;
  struct {
    vuint32_t B20_23DATA_MASK:32;      /* Data Mask Bytes 20-23 */
  } B;
} EIM_EICHD1_WORD6_tag;

typedef union EIM_EICHD1_WORD7_union_tag { /* Error Injection Channel Descriptor n, Word7 */
  vuint32_t R;
  struct {
    vuint32_t B24_27DATA_MASK:32;      /* Data Mask Bytes 24-27 */
  } B;
} EIM_EICHD1_WORD7_tag;

typedef union EIM_EICHD1_WORD8_union_tag { /* Error Injection Channel Descriptor n, Word8 */
  vuint32_t R;
  struct {
    vuint32_t B28_31DATA_MASK:32;      /* Data Mask Bytes 28-31 */
  } B;
} EIM_EICHD1_WORD8_tag;

typedef union EIM_EICHD2_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t CHKBIT_MASK:32;          /* Checkbit Mask, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD2_WORD0_tag;

typedef union EIM_EICHD2_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD2_WORD1_tag;

typedef union EIM_EICHD2_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD2_WORD2_tag;

typedef union EIM_EICHD2_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD2_WORD3_tag;

typedef union EIM_EICHD2_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD2_WORD4_tag;

typedef union EIM_EICHD2_WORD5_union_tag { /* Error Injection Channel Descriptor n, Word5 */
  vuint32_t R;
  struct {
    vuint32_t B16_19DATA_MASK:32;      /* Data Mask Bytes 16-19 */
  } B;
} EIM_EICHD2_WORD5_tag;

typedef union EIM_EICHD2_WORD6_union_tag { /* Error Injection Channel Descriptor n, Word6 */
  vuint32_t R;
  struct {
    vuint32_t B20_23DATA_MASK:32;      /* Data Mask Bytes 20-23 */
  } B;
} EIM_EICHD2_WORD6_tag;

typedef union EIM_EICHD2_WORD7_union_tag { /* Error Injection Channel Descriptor n, Word7 */
  vuint32_t R;
  struct {
    vuint32_t B24_27DATA_MASK:32;      /* Data Mask Bytes 24-27 */
  } B;
} EIM_EICHD2_WORD7_tag;

typedef union EIM_EICHD2_WORD8_union_tag { /* Error Injection Channel Descriptor n, Word8 */
  vuint32_t R;
  struct {
    vuint32_t B28_31DATA_MASK:32;      /* Data Mask Bytes 28-31 */
  } B;
} EIM_EICHD2_WORD8_tag;

typedef union EIM_EICHD3_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t CHKBIT_MASK:32;          /* Checkbit Mask, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD3_WORD0_tag;

typedef union EIM_EICHD3_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD3_WORD1_tag;

typedef union EIM_EICHD3_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD3_WORD2_tag;

typedef union EIM_EICHD3_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD3_WORD3_tag;

typedef union EIM_EICHD3_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD3_WORD4_tag;

typedef union EIM_EICHD3_WORD5_union_tag { /* Error Injection Channel Descriptor n, Word5 */
  vuint32_t R;
  struct {
    vuint32_t B16_19DATA_MASK:32;      /* Data Mask Bytes 16-19 */
  } B;
} EIM_EICHD3_WORD5_tag;

typedef union EIM_EICHD3_WORD6_union_tag { /* Error Injection Channel Descriptor n, Word6 */
  vuint32_t R;
  struct {
    vuint32_t B20_23DATA_MASK:32;      /* Data Mask Bytes 20-23 */
  } B;
} EIM_EICHD3_WORD6_tag;

typedef union EIM_EICHD3_WORD7_union_tag { /* Error Injection Channel Descriptor n, Word7 */
  vuint32_t R;
  struct {
    vuint32_t B24_27DATA_MASK:32;      /* Data Mask Bytes 24-27 */
  } B;
} EIM_EICHD3_WORD7_tag;

typedef union EIM_EICHD3_WORD8_union_tag { /* Error Injection Channel Descriptor n, Word8 */
  vuint32_t R;
  struct {
    vuint32_t B28_31DATA_MASK:32;      /* Data Mask Bytes 28-31 */
  } B;
} EIM_EICHD3_WORD8_tag;

typedef union EIM_EICHD4_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t CHKBIT_MASK:32;          /* Checkbit Mask, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD4_WORD0_tag;

typedef union EIM_EICHD4_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD4_WORD1_tag;

typedef union EIM_EICHD4_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD4_WORD2_tag;

typedef union EIM_EICHD4_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD4_WORD3_tag;

typedef union EIM_EICHD4_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD4_WORD4_tag;

typedef union EIM_EICHD4_WORD5_union_tag { /* Error Injection Channel Descriptor n, Word5 */
  vuint32_t R;
  struct {
    vuint32_t B16_19DATA_MASK:32;      /* Data Mask Bytes 16-19 */
  } B;
} EIM_EICHD4_WORD5_tag;

typedef union EIM_EICHD4_WORD6_union_tag { /* Error Injection Channel Descriptor n, Word6 */
  vuint32_t R;
  struct {
    vuint32_t B20_23DATA_MASK:32;      /* Data Mask Bytes 20-23 */
  } B;
} EIM_EICHD4_WORD6_tag;

typedef union EIM_EICHD4_WORD7_union_tag { /* Error Injection Channel Descriptor n, Word7 */
  vuint32_t R;
  struct {
    vuint32_t B24_27DATA_MASK:32;      /* Data Mask Bytes 24-27 */
  } B;
} EIM_EICHD4_WORD7_tag;

typedef union EIM_EICHD4_WORD8_union_tag { /* Error Injection Channel Descriptor n, Word8 */
  vuint32_t R;
  struct {
    vuint32_t B28_31DATA_MASK:32;      /* Data Mask Bytes 28-31 */
  } B;
} EIM_EICHD4_WORD8_tag;

typedef union EIM_EICHD5_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t CHKBIT_MASK:32;          /* Checkbit Mask, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD5_WORD0_tag;

typedef union EIM_EICHD5_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD5_WORD1_tag;

typedef union EIM_EICHD5_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD5_WORD2_tag;

typedef union EIM_EICHD5_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD5_WORD3_tag;

typedef union EIM_EICHD5_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD5_WORD4_tag;

typedef union EIM_EICHD5_WORD5_union_tag { /* Error Injection Channel Descriptor n, Word5 */
  vuint32_t R;
  struct {
    vuint32_t B16_19DATA_MASK:32;      /* Data Mask Bytes 16-19 */
  } B;
} EIM_EICHD5_WORD5_tag;

typedef union EIM_EICHD5_WORD6_union_tag { /* Error Injection Channel Descriptor n, Word6 */
  vuint32_t R;
  struct {
    vuint32_t B20_23DATA_MASK:32;      /* Data Mask Bytes 20-23 */
  } B;
} EIM_EICHD5_WORD6_tag;

typedef union EIM_EICHD5_WORD7_union_tag { /* Error Injection Channel Descriptor n, Word7 */
  vuint32_t R;
  struct {
    vuint32_t B24_27DATA_MASK:32;      /* Data Mask Bytes 24-27 */
  } B;
} EIM_EICHD5_WORD7_tag;

typedef union EIM_EICHD5_WORD8_union_tag { /* Error Injection Channel Descriptor n, Word8 */
  vuint32_t R;
  struct {
    vuint32_t B28_31DATA_MASK:32;      /* Data Mask Bytes 28-31 */
  } B;
} EIM_EICHD5_WORD8_tag;

typedef union EIM_EICHD6_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t CHKBIT_MASK:32;          /* Checkbit Mask, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD6_WORD0_tag;

typedef union EIM_EICHD6_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD6_WORD1_tag;

typedef union EIM_EICHD6_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD6_WORD2_tag;

typedef union EIM_EICHD6_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD6_WORD3_tag;

typedef union EIM_EICHD6_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD6_WORD4_tag;

typedef union EIM_EICHD6_WORD5_union_tag { /* Error Injection Channel Descriptor n, Word5 */
  vuint32_t R;
  struct {
    vuint32_t B16_19DATA_MASK:32;      /* Data Mask Bytes 16-19 */
  } B;
} EIM_EICHD6_WORD5_tag;

typedef union EIM_EICHD6_WORD6_union_tag { /* Error Injection Channel Descriptor n, Word6 */
  vuint32_t R;
  struct {
    vuint32_t B20_23DATA_MASK:32;      /* Data Mask Bytes 20-23 */
  } B;
} EIM_EICHD6_WORD6_tag;

typedef union EIM_EICHD6_WORD7_union_tag { /* Error Injection Channel Descriptor n, Word7 */
  vuint32_t R;
  struct {
    vuint32_t B24_27DATA_MASK:32;      /* Data Mask Bytes 24-27 */
  } B;
} EIM_EICHD6_WORD7_tag;

typedef union EIM_EICHD6_WORD8_union_tag { /* Error Injection Channel Descriptor n, Word8 */
  vuint32_t R;
  struct {
    vuint32_t B28_31DATA_MASK:32;      /* Data Mask Bytes 28-31 */
  } B;
} EIM_EICHD6_WORD8_tag;

typedef union EIM_EICHD7_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t CHKBIT_MASK:32;          /* Checkbit Mask, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD7_WORD0_tag;

typedef union EIM_EICHD7_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD7_WORD1_tag;

typedef union EIM_EICHD7_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD7_WORD2_tag;

typedef union EIM_EICHD7_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD7_WORD3_tag;

typedef union EIM_EICHD7_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD7_WORD4_tag;

typedef union EIM_EICHD7_WORD5_union_tag { /* Error Injection Channel Descriptor n, Word5 */
  vuint32_t R;
  struct {
    vuint32_t B16_19DATA_MASK:32;      /* Data Mask Bytes 16-19 */
  } B;
} EIM_EICHD7_WORD5_tag;

typedef union EIM_EICHD7_WORD6_union_tag { /* Error Injection Channel Descriptor n, Word6 */
  vuint32_t R;
  struct {
    vuint32_t B20_23DATA_MASK:32;      /* Data Mask Bytes 20-23 */
  } B;
} EIM_EICHD7_WORD6_tag;

typedef union EIM_EICHD7_WORD7_union_tag { /* Error Injection Channel Descriptor n, Word7 */
  vuint32_t R;
  struct {
    vuint32_t B24_27DATA_MASK:32;      /* Data Mask Bytes 24-27 */
  } B;
} EIM_EICHD7_WORD7_tag;

typedef union EIM_EICHD7_WORD8_union_tag { /* Error Injection Channel Descriptor n, Word8 */
  vuint32_t R;
  struct {
    vuint32_t B28_31DATA_MASK:32;      /* Data Mask Bytes 28-31 */
  } B;
} EIM_EICHD7_WORD8_tag;

typedef union EIM_EICHD8_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CHKBIT_MASK:30;          /* Checkbit Mask, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD8_WORD0_tag;

typedef union EIM_EICHD8_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD8_WORD1_tag;

typedef union EIM_EICHD8_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD8_WORD2_tag;

typedef union EIM_EICHD8_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD8_WORD3_tag;

typedef union EIM_EICHD8_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD8_WORD4_tag;

typedef union EIM_EICHD8_WORD5_union_tag { /* Error Injection Channel Descriptor n, Word5 */
  vuint32_t R;
  struct {
    vuint32_t B16_19DATA_MASK:32;      /* Data Mask Bytes 16-19 */
  } B;
} EIM_EICHD8_WORD5_tag;

typedef union EIM_EICHD8_WORD6_union_tag { /* Error Injection Channel Descriptor n, Word6 */
  vuint32_t R;
  struct {
    vuint32_t B20_23DATA_MASK:32;      /* Data Mask Bytes 20-23 */
  } B;
} EIM_EICHD8_WORD6_tag;

typedef union EIM_EICHD8_WORD7_union_tag { /* Error Injection Channel Descriptor n, Word7 */
  vuint32_t R;
  struct {
    vuint32_t B24_27DATA_MASK:32;      /* Data Mask Bytes 24-27 */
  } B;
} EIM_EICHD8_WORD7_tag;

typedef union EIM_EICHD8_WORD8_union_tag { /* Error Injection Channel Descriptor n, Word8 */
  vuint32_t R;
  struct {
    vuint32_t B28_31DATA_MASK:32;      /* Data Mask Bytes 28-31 */
  } B;
} EIM_EICHD8_WORD8_tag;

typedef union EIM_EICHD9_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;
    vuint32_t CHKBIT_MASK:20;          /* Checkbit Mask, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD9_WORD0_tag;

typedef union EIM_EICHD9_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD9_WORD1_tag;

typedef union EIM_EICHD9_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD9_WORD2_tag;

typedef union EIM_EICHD9_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD9_WORD3_tag;

typedef union EIM_EICHD9_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD9_WORD4_tag;

typedef union EIM_EICHD9_WORD5_union_tag { /* Error Injection Channel Descriptor n, Word5 */
  vuint32_t R;
  struct {
    vuint32_t B16_19DATA_MASK:32;      /* Data Mask Bytes 16-19 */
  } B;
} EIM_EICHD9_WORD5_tag;

typedef union EIM_EICHD9_WORD6_union_tag { /* Error Injection Channel Descriptor n, Word6 */
  vuint32_t R;
  struct {
    vuint32_t B20_23DATA_MASK:32;      /* Data Mask Bytes 20-23 */
  } B;
} EIM_EICHD9_WORD6_tag;

typedef union EIM_EICHD9_WORD7_union_tag { /* Error Injection Channel Descriptor n, Word7 */
  vuint32_t R;
  struct {
    vuint32_t B24_27DATA_MASK:32;      /* Data Mask Bytes 24-27 */
  } B;
} EIM_EICHD9_WORD7_tag;

typedef union EIM_EICHD9_WORD8_union_tag { /* Error Injection Channel Descriptor n, Word8 */
  vuint32_t R;
  struct {
    vuint32_t B28_31DATA_MASK:32;      /* Data Mask Bytes 28-31 */
  } B;
} EIM_EICHD9_WORD8_tag;

typedef union EIM_EICHD10_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t CHKBIT_MASK:32;          /* Checkbit Mask, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD10_WORD0_tag;

typedef union EIM_EICHD10_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD10_WORD1_tag;

typedef union EIM_EICHD10_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD10_WORD2_tag;

typedef union EIM_EICHD10_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD10_WORD3_tag;

typedef union EIM_EICHD10_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD10_WORD4_tag;

typedef union EIM_EICHD10_WORD5_union_tag { /* Error Injection Channel Descriptor n, Word5 */
  vuint32_t R;
  struct {
    vuint32_t B16_19DATA_MASK:32;      /* Data Mask Bytes 16-19 */
  } B;
} EIM_EICHD10_WORD5_tag;

typedef union EIM_EICHD10_WORD6_union_tag { /* Error Injection Channel Descriptor n, Word6 */
  vuint32_t R;
  struct {
    vuint32_t B20_23DATA_MASK:32;      /* Data Mask Bytes 20-23 */
  } B;
} EIM_EICHD10_WORD6_tag;

typedef union EIM_EICHD10_WORD7_union_tag { /* Error Injection Channel Descriptor n, Word7 */
  vuint32_t R;
  struct {
    vuint32_t B24_27DATA_MASK:32;      /* Data Mask Bytes 24-27 */
  } B;
} EIM_EICHD10_WORD7_tag;

typedef union EIM_EICHD10_WORD8_union_tag { /* Error Injection Channel Descriptor n, Word8 */
  vuint32_t R;
  struct {
    vuint32_t B28_31DATA_MASK:32;      /* Data Mask Bytes 28-31 */
  } B;
} EIM_EICHD10_WORD8_tag;

typedef union EIM_EICHD11_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;
    vuint32_t CHKBIT_MASK:20;          /* Checkbit Mask, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD11_WORD0_tag;

typedef union EIM_EICHD11_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD11_WORD1_tag;

typedef union EIM_EICHD11_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD11_WORD2_tag;

typedef union EIM_EICHD11_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD11_WORD3_tag;

typedef union EIM_EICHD11_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD11_WORD4_tag;

typedef union EIM_EICHD11_WORD5_union_tag { /* Error Injection Channel Descriptor n, Word5 */
  vuint32_t R;
  struct {
    vuint32_t B16_19DATA_MASK:32;      /* Data Mask Bytes 16-19 */
  } B;
} EIM_EICHD11_WORD5_tag;

typedef union EIM_EICHD11_WORD6_union_tag { /* Error Injection Channel Descriptor n, Word6 */
  vuint32_t R;
  struct {
    vuint32_t B20_23DATA_MASK:32;      /* Data Mask Bytes 20-23 */
  } B;
} EIM_EICHD11_WORD6_tag;

typedef union EIM_EICHD11_WORD7_union_tag { /* Error Injection Channel Descriptor n, Word7 */
  vuint32_t R;
  struct {
    vuint32_t B24_27DATA_MASK:32;      /* Data Mask Bytes 24-27 */
  } B;
} EIM_EICHD11_WORD7_tag;

typedef union EIM_EICHD11_WORD8_union_tag { /* Error Injection Channel Descriptor n, Word8 */
  vuint32_t R;
  struct {
    vuint32_t B28_31DATA_MASK:32;      /* Data Mask Bytes 28-31 */
  } B;
} EIM_EICHD11_WORD8_tag;

typedef union EIM_EICHD12_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t CHKBIT_MASK:16;          /* Checkbit Mask, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD12_WORD0_tag;

typedef union EIM_EICHD12_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD12_WORD1_tag;

typedef union EIM_EICHD12_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD12_WORD2_tag;

typedef union EIM_EICHD12_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD12_WORD3_tag;

typedef union EIM_EICHD12_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD12_WORD4_tag;

typedef union EIM_EICHD12_WORD5_union_tag { /* Error Injection Channel Descriptor n, Word5 */
  vuint32_t R;
  struct {
    vuint32_t B16_19DATA_MASK:32;      /* Data Mask Bytes 16-19 */
  } B;
} EIM_EICHD12_WORD5_tag;

typedef union EIM_EICHD12_WORD6_union_tag { /* Error Injection Channel Descriptor n, Word6 */
  vuint32_t R;
  struct {
    vuint32_t B20_23DATA_MASK:32;      /* Data Mask Bytes 20-23 */
  } B;
} EIM_EICHD12_WORD6_tag;

typedef union EIM_EICHD12_WORD7_union_tag { /* Error Injection Channel Descriptor n, Word7 */
  vuint32_t R;
  struct {
    vuint32_t B24_27DATA_MASK:32;      /* Data Mask Bytes 24-27 */
  } B;
} EIM_EICHD12_WORD7_tag;

typedef union EIM_EICHD12_WORD8_union_tag { /* Error Injection Channel Descriptor n, Word8 */
  vuint32_t R;
  struct {
    vuint32_t B28_31DATA_MASK:32;      /* Data Mask Bytes 28-31 */
  } B;
} EIM_EICHD12_WORD8_tag;

typedef union EIM_EICHD13_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CHKBIT_MASK:30;          /* Checkbit Mask, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD13_WORD0_tag;

typedef union EIM_EICHD13_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD13_WORD1_tag;

typedef union EIM_EICHD13_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD13_WORD2_tag;

typedef union EIM_EICHD13_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD13_WORD3_tag;

typedef union EIM_EICHD13_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD13_WORD4_tag;

typedef union EIM_EICHD13_WORD5_union_tag { /* Error Injection Channel Descriptor n, Word5 */
  vuint32_t R;
  struct {
    vuint32_t B16_19DATA_MASK:32;      /* Data Mask Bytes 16-19 */
  } B;
} EIM_EICHD13_WORD5_tag;

typedef union EIM_EICHD13_WORD6_union_tag { /* Error Injection Channel Descriptor n, Word6 */
  vuint32_t R;
  struct {
    vuint32_t B20_23DATA_MASK:32;      /* Data Mask Bytes 20-23 */
  } B;
} EIM_EICHD13_WORD6_tag;

typedef union EIM_EICHD13_WORD7_union_tag { /* Error Injection Channel Descriptor n, Word7 */
  vuint32_t R;
  struct {
    vuint32_t B24_27DATA_MASK:32;      /* Data Mask Bytes 24-27 */
  } B;
} EIM_EICHD13_WORD7_tag;

typedef union EIM_EICHD13_WORD8_union_tag { /* Error Injection Channel Descriptor n, Word8 */
  vuint32_t R;
  struct {
    vuint32_t B28_31DATA_MASK:32;      /* Data Mask Bytes 28-31 */
  } B;
} EIM_EICHD13_WORD8_tag;

typedef union EIM_EICHD14_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;
    vuint32_t CHKBIT_MASK:28;          /* Checkbit Mask, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD14_WORD0_tag;

typedef union EIM_EICHD14_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD14_WORD1_tag;

typedef union EIM_EICHD14_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD14_WORD2_tag;

typedef union EIM_EICHD14_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD14_WORD3_tag;

typedef union EIM_EICHD14_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD14_WORD4_tag;

typedef union EIM_EICHD14_WORD5_union_tag { /* Error Injection Channel Descriptor n, Word5 */
  vuint32_t R;
  struct {
    vuint32_t B16_19DATA_MASK:32;      /* Data Mask Bytes 16-19 */
  } B;
} EIM_EICHD14_WORD5_tag;

typedef union EIM_EICHD14_WORD6_union_tag { /* Error Injection Channel Descriptor n, Word6 */
  vuint32_t R;
  struct {
    vuint32_t B20_23DATA_MASK:32;      /* Data Mask Bytes 20-23 */
  } B;
} EIM_EICHD14_WORD6_tag;

typedef union EIM_EICHD14_WORD7_union_tag { /* Error Injection Channel Descriptor n, Word7 */
  vuint32_t R;
  struct {
    vuint32_t B24_27DATA_MASK:32;      /* Data Mask Bytes 24-27 */
  } B;
} EIM_EICHD14_WORD7_tag;

typedef union EIM_EICHD14_WORD8_union_tag { /* Error Injection Channel Descriptor n, Word8 */
  vuint32_t R;
  struct {
    vuint32_t B28_31DATA_MASK:32;      /* Data Mask Bytes 28-31 */
  } B;
} EIM_EICHD14_WORD8_tag;

typedef union EIM_EICHD15_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;
    vuint32_t CHKBIT_MASK:28;          /* Checkbit Mask, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD15_WORD0_tag;

typedef union EIM_EICHD15_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD15_WORD1_tag;

typedef union EIM_EICHD15_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD15_WORD2_tag;

typedef union EIM_EICHD15_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD15_WORD3_tag;

typedef union EIM_EICHD15_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD15_WORD4_tag;

typedef union EIM_EICHD16_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;
    vuint32_t CHKBIT_MASK:20;          /* Checkbit Mask, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD16_WORD0_tag;

typedef union EIM_EICHD16_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD16_WORD1_tag;

typedef union EIM_EICHD16_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD16_WORD2_tag;

typedef union EIM_EICHD17_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:18;
    vuint32_t CHKBIT_MASK:14;          /* Checkbit Mask, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD17_WORD0_tag;

typedef union EIM_EICHD17_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD17_WORD1_tag;

typedef union EIM_EICHD17_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD17_WORD2_tag;

typedef union EIM_EICHD18_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CHKBIT_MASK:30;          /* Checkbit Mask, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD18_WORD0_tag;

typedef union EIM_EICHD18_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD18_WORD1_tag;

typedef union EIM_EICHD18_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD18_WORD2_tag;

typedef union EIM_EICHD18_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD18_WORD3_tag;

typedef union EIM_EICHD18_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD18_WORD4_tag;

typedef union EIM_EICHD19_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;
    vuint32_t CHKBIT_MASK:28;          /* Checkbit Mask, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD19_WORD0_tag;

typedef union EIM_EICHD19_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD19_WORD1_tag;

typedef union EIM_EICHD19_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD19_WORD2_tag;

typedef union EIM_EICHD19_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD19_WORD3_tag;

typedef union EIM_EICHD19_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD19_WORD4_tag;

typedef union EIM_EICHD20_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;
    vuint32_t CHKBIT_MASK:28;          /* Checkbit Mask, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD20_WORD0_tag;

typedef union EIM_EICHD20_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3 */
  } B;
} EIM_EICHD20_WORD1_tag;

typedef union EIM_EICHD20_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD20_WORD2_tag;

typedef union EIM_EICHD20_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD20_WORD3_tag;

typedef union EIM_EICHD20_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD20_WORD4_tag;

typedef union EIM_EICHD21_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;
    vuint32_t CHKBIT_MASK:28;          /* Checkbit Mask, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD21_WORD0_tag;

typedef union EIM_EICHD21_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3 */
  } B;
} EIM_EICHD21_WORD1_tag;

typedef union EIM_EICHD21_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD21_WORD2_tag;

typedef union EIM_EICHD21_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD21_WORD3_tag;

typedef union EIM_EICHD21_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD21_WORD4_tag;

typedef union EIM_EICHD22_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t CHKBIT_MASK:32;          /* Checkbit Mask, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD22_WORD0_tag;

typedef union EIM_EICHD22_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3 */
  } B;
} EIM_EICHD22_WORD1_tag;

typedef union EIM_EICHD22_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD22_WORD2_tag;

typedef union EIM_EICHD22_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD22_WORD3_tag;

typedef union EIM_EICHD22_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD22_WORD4_tag;

typedef union EIM_EICHD22_WORD5_union_tag { /* Error Injection Channel Descriptor n, Word5 */
  vuint32_t R;
  struct {
    vuint32_t B16_19DATA_MASK:32;      /* Data Mask Bytes 16-19 */
  } B;
} EIM_EICHD22_WORD5_tag;

typedef union EIM_EICHD22_WORD6_union_tag { /* Error Injection Channel Descriptor n, Word6 */
  vuint32_t R;
  struct {
    vuint32_t B20_23DATA_MASK:32;      /* Data Mask Bytes 20-23 */
  } B;
} EIM_EICHD22_WORD6_tag;

typedef union EIM_EICHD22_WORD7_union_tag { /* Error Injection Channel Descriptor n, Word7 */
  vuint32_t R;
  struct {
    vuint32_t B24_27DATA_MASK:32;      /* Data Mask Bytes 24-27 */
  } B;
} EIM_EICHD22_WORD7_tag;

typedef union EIM_EICHD22_WORD8_union_tag { /* Error Injection Channel Descriptor n, Word8 */
  vuint32_t R;
  struct {
    vuint32_t B28_31DATA_MASK:32;      /* Data Mask Bytes 28-31 */
  } B;
} EIM_EICHD22_WORD8_tag;

typedef union EIM_EICHD23_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CHKBIT_MASK:30;          /* Checkbit Mask, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD23_WORD0_tag;

typedef union EIM_EICHD23_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD23_WORD1_tag;

typedef union EIM_EICHD23_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD23_WORD2_tag;

typedef union EIM_EICHD24_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t CHKBIT_MASK:16;          /* Checkbit Mask, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD24_WORD0_tag;

typedef union EIM_EICHD24_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD24_WORD1_tag;

typedef union EIM_EICHD24_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD24_WORD2_tag;

typedef union EIM_EICHD24_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD24_WORD3_tag;

typedef union EIM_EICHD24_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD24_WORD4_tag;

typedef union EIM_EICHD25_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;
    vuint32_t CHKBIT_MASK:28;          /* Checkbit Mask, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD25_WORD0_tag;

typedef union EIM_EICHD25_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD25_WORD1_tag;

typedef union EIM_EICHD25_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD25_WORD2_tag;

typedef union EIM_EICHD25_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD25_WORD3_tag;

typedef union EIM_EICHD25_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD25_WORD4_tag;

typedef union EIM_EICHD26_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;
    vuint32_t CHKBIT_MASK:28;          /* Checkbit Mask, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD26_WORD0_tag;

typedef union EIM_EICHD26_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3 */
  } B;
} EIM_EICHD26_WORD1_tag;

typedef union EIM_EICHD26_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD26_WORD2_tag;

typedef union EIM_EICHD26_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD26_WORD3_tag;

typedef union EIM_EICHD26_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD26_WORD4_tag;

typedef union EIM_EICHD27_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;
    vuint32_t CHKBIT_MASK:28;          /* Checkbit Mask, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD27_WORD0_tag;

typedef union EIM_EICHD27_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3 */
  } B;
} EIM_EICHD27_WORD1_tag;

typedef union EIM_EICHD27_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD27_WORD2_tag;

typedef union EIM_EICHD27_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD27_WORD3_tag;

typedef union EIM_EICHD27_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD27_WORD4_tag;

typedef union EIM_EICHD28_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CHKBIT_MASK:30;          /* Checkbit Mask, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD28_WORD0_tag;

typedef union EIM_EICHD28_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD28_WORD1_tag;

typedef union EIM_EICHD28_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD28_WORD2_tag;

typedef union EIM_EICHD28_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD28_WORD3_tag;

typedef union EIM_EICHD29_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:22;
    vuint32_t CHKBIT_MASK:10;          /* Checkbit Mask, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD29_WORD0_tag;

typedef union EIM_EICHD29_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD29_WORD1_tag;

typedef union EIM_EICHD29_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD29_WORD2_tag;

typedef union EIM_EICHD30_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;
    vuint32_t CHKBIT_MASK:20;          /* Checkbit Mask, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD30_WORD0_tag;

typedef union EIM_EICHD30_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD30_WORD1_tag;

typedef union EIM_EICHD30_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD30_WORD2_tag;

typedef union EIM_EICHD31_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;
    vuint32_t CHKBIT_MASK:20;          /* Checkbit Mask, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD31_WORD0_tag;

typedef union EIM_EICHD31_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3, merged from more bitFields with different positions or sizes */
  } B;
} EIM_EICHD31_WORD1_tag;

typedef union EIM_EICHD31_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD31_WORD2_tag;

struct EIM_tag {
  EIM_EIMCR_tag EIMCR;                 /* Error Injection Module Configuration Register */
  EIM_EICHEN_tag EICHEN;               /* Error Injection Channel Enable register */
  uint8_t EIM_reserved0[248];
  EIM_EICHD0_WORD0_tag EICHD0_WORD0;   /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD0_WORD1_tag EICHD0_WORD1;   /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD0_WORD2_tag EICHD0_WORD2;   /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD0_WORD3_tag EICHD0_WORD3;   /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD0_WORD4_tag EICHD0_WORD4;   /* Error Injection Channel Descriptor n, Word4 */
  EIM_EICHD0_WORD5_tag EICHD0_WORD5;   /* Error Injection Channel Descriptor n, Word5 */
  EIM_EICHD0_WORD6_tag EICHD0_WORD6;   /* Error Injection Channel Descriptor n, Word6 */
  EIM_EICHD0_WORD7_tag EICHD0_WORD7;   /* Error Injection Channel Descriptor n, Word7 */
  EIM_EICHD0_WORD8_tag EICHD0_WORD8;   /* Error Injection Channel Descriptor n, Word8 */
  uint8_t EIM_reserved1[28];
  EIM_EICHD1_WORD0_tag EICHD1_WORD0;   /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD1_WORD1_tag EICHD1_WORD1;   /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD1_WORD2_tag EICHD1_WORD2;   /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD1_WORD3_tag EICHD1_WORD3;   /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD1_WORD4_tag EICHD1_WORD4;   /* Error Injection Channel Descriptor n, Word4 */
  EIM_EICHD1_WORD5_tag EICHD1_WORD5;   /* Error Injection Channel Descriptor n, Word5 */
  EIM_EICHD1_WORD6_tag EICHD1_WORD6;   /* Error Injection Channel Descriptor n, Word6 */
  EIM_EICHD1_WORD7_tag EICHD1_WORD7;   /* Error Injection Channel Descriptor n, Word7 */
  EIM_EICHD1_WORD8_tag EICHD1_WORD8;   /* Error Injection Channel Descriptor n, Word8 */
  uint8_t EIM_reserved2[28];
  EIM_EICHD2_WORD0_tag EICHD2_WORD0;   /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD2_WORD1_tag EICHD2_WORD1;   /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD2_WORD2_tag EICHD2_WORD2;   /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD2_WORD3_tag EICHD2_WORD3;   /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD2_WORD4_tag EICHD2_WORD4;   /* Error Injection Channel Descriptor n, Word4 */
  EIM_EICHD2_WORD5_tag EICHD2_WORD5;   /* Error Injection Channel Descriptor n, Word5 */
  EIM_EICHD2_WORD6_tag EICHD2_WORD6;   /* Error Injection Channel Descriptor n, Word6 */
  EIM_EICHD2_WORD7_tag EICHD2_WORD7;   /* Error Injection Channel Descriptor n, Word7 */
  EIM_EICHD2_WORD8_tag EICHD2_WORD8;   /* Error Injection Channel Descriptor n, Word8 */
  uint8_t EIM_reserved3[28];
  EIM_EICHD3_WORD0_tag EICHD3_WORD0;   /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD3_WORD1_tag EICHD3_WORD1;   /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD3_WORD2_tag EICHD3_WORD2;   /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD3_WORD3_tag EICHD3_WORD3;   /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD3_WORD4_tag EICHD3_WORD4;   /* Error Injection Channel Descriptor n, Word4 */
  EIM_EICHD3_WORD5_tag EICHD3_WORD5;   /* Error Injection Channel Descriptor n, Word5 */
  EIM_EICHD3_WORD6_tag EICHD3_WORD6;   /* Error Injection Channel Descriptor n, Word6 */
  EIM_EICHD3_WORD7_tag EICHD3_WORD7;   /* Error Injection Channel Descriptor n, Word7 */
  EIM_EICHD3_WORD8_tag EICHD3_WORD8;   /* Error Injection Channel Descriptor n, Word8 */
  uint8_t EIM_reserved4[28];
  EIM_EICHD4_WORD0_tag EICHD4_WORD0;   /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD4_WORD1_tag EICHD4_WORD1;   /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD4_WORD2_tag EICHD4_WORD2;   /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD4_WORD3_tag EICHD4_WORD3;   /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD4_WORD4_tag EICHD4_WORD4;   /* Error Injection Channel Descriptor n, Word4 */
  EIM_EICHD4_WORD5_tag EICHD4_WORD5;   /* Error Injection Channel Descriptor n, Word5 */
  EIM_EICHD4_WORD6_tag EICHD4_WORD6;   /* Error Injection Channel Descriptor n, Word6 */
  EIM_EICHD4_WORD7_tag EICHD4_WORD7;   /* Error Injection Channel Descriptor n, Word7 */
  EIM_EICHD4_WORD8_tag EICHD4_WORD8;   /* Error Injection Channel Descriptor n, Word8 */
  uint8_t EIM_reserved5[28];
  EIM_EICHD5_WORD0_tag EICHD5_WORD0;   /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD5_WORD1_tag EICHD5_WORD1;   /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD5_WORD2_tag EICHD5_WORD2;   /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD5_WORD3_tag EICHD5_WORD3;   /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD5_WORD4_tag EICHD5_WORD4;   /* Error Injection Channel Descriptor n, Word4 */
  EIM_EICHD5_WORD5_tag EICHD5_WORD5;   /* Error Injection Channel Descriptor n, Word5 */
  EIM_EICHD5_WORD6_tag EICHD5_WORD6;   /* Error Injection Channel Descriptor n, Word6 */
  EIM_EICHD5_WORD7_tag EICHD5_WORD7;   /* Error Injection Channel Descriptor n, Word7 */
  EIM_EICHD5_WORD8_tag EICHD5_WORD8;   /* Error Injection Channel Descriptor n, Word8 */
  uint8_t EIM_reserved6[28];
  EIM_EICHD6_WORD0_tag EICHD6_WORD0;   /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD6_WORD1_tag EICHD6_WORD1;   /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD6_WORD2_tag EICHD6_WORD2;   /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD6_WORD3_tag EICHD6_WORD3;   /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD6_WORD4_tag EICHD6_WORD4;   /* Error Injection Channel Descriptor n, Word4 */
  EIM_EICHD6_WORD5_tag EICHD6_WORD5;   /* Error Injection Channel Descriptor n, Word5 */
  EIM_EICHD6_WORD6_tag EICHD6_WORD6;   /* Error Injection Channel Descriptor n, Word6 */
  EIM_EICHD6_WORD7_tag EICHD6_WORD7;   /* Error Injection Channel Descriptor n, Word7 */
  EIM_EICHD6_WORD8_tag EICHD6_WORD8;   /* Error Injection Channel Descriptor n, Word8 */
  uint8_t EIM_reserved7[28];
  EIM_EICHD7_WORD0_tag EICHD7_WORD0;   /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD7_WORD1_tag EICHD7_WORD1;   /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD7_WORD2_tag EICHD7_WORD2;   /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD7_WORD3_tag EICHD7_WORD3;   /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD7_WORD4_tag EICHD7_WORD4;   /* Error Injection Channel Descriptor n, Word4 */
  EIM_EICHD7_WORD5_tag EICHD7_WORD5;   /* Error Injection Channel Descriptor n, Word5 */
  EIM_EICHD7_WORD6_tag EICHD7_WORD6;   /* Error Injection Channel Descriptor n, Word6 */
  EIM_EICHD7_WORD7_tag EICHD7_WORD7;   /* Error Injection Channel Descriptor n, Word7 */
  EIM_EICHD7_WORD8_tag EICHD7_WORD8;   /* Error Injection Channel Descriptor n, Word8 */
  uint8_t EIM_reserved8[28];
  EIM_EICHD8_WORD0_tag EICHD8_WORD0;   /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD8_WORD1_tag EICHD8_WORD1;   /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD8_WORD2_tag EICHD8_WORD2;   /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD8_WORD3_tag EICHD8_WORD3;   /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD8_WORD4_tag EICHD8_WORD4;   /* Error Injection Channel Descriptor n, Word4 */
  EIM_EICHD8_WORD5_tag EICHD8_WORD5;   /* Error Injection Channel Descriptor n, Word5 */
  EIM_EICHD8_WORD6_tag EICHD8_WORD6;   /* Error Injection Channel Descriptor n, Word6 */
  EIM_EICHD8_WORD7_tag EICHD8_WORD7;   /* Error Injection Channel Descriptor n, Word7 */
  EIM_EICHD8_WORD8_tag EICHD8_WORD8;   /* Error Injection Channel Descriptor n, Word8 */
  uint8_t EIM_reserved9[28];
  EIM_EICHD9_WORD0_tag EICHD9_WORD0;   /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD9_WORD1_tag EICHD9_WORD1;   /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD9_WORD2_tag EICHD9_WORD2;   /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD9_WORD3_tag EICHD9_WORD3;   /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD9_WORD4_tag EICHD9_WORD4;   /* Error Injection Channel Descriptor n, Word4 */
  EIM_EICHD9_WORD5_tag EICHD9_WORD5;   /* Error Injection Channel Descriptor n, Word5 */
  EIM_EICHD9_WORD6_tag EICHD9_WORD6;   /* Error Injection Channel Descriptor n, Word6 */
  EIM_EICHD9_WORD7_tag EICHD9_WORD7;   /* Error Injection Channel Descriptor n, Word7 */
  EIM_EICHD9_WORD8_tag EICHD9_WORD8;   /* Error Injection Channel Descriptor n, Word8 */
  uint8_t EIM_reserved10[28];
  EIM_EICHD10_WORD0_tag EICHD10_WORD0; /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD10_WORD1_tag EICHD10_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD10_WORD2_tag EICHD10_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD10_WORD3_tag EICHD10_WORD3; /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD10_WORD4_tag EICHD10_WORD4; /* Error Injection Channel Descriptor n, Word4 */
  EIM_EICHD10_WORD5_tag EICHD10_WORD5; /* Error Injection Channel Descriptor n, Word5 */
  EIM_EICHD10_WORD6_tag EICHD10_WORD6; /* Error Injection Channel Descriptor n, Word6 */
  EIM_EICHD10_WORD7_tag EICHD10_WORD7; /* Error Injection Channel Descriptor n, Word7 */
  EIM_EICHD10_WORD8_tag EICHD10_WORD8; /* Error Injection Channel Descriptor n, Word8 */
  uint8_t EIM_reserved11[28];
  EIM_EICHD11_WORD0_tag EICHD11_WORD0; /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD11_WORD1_tag EICHD11_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD11_WORD2_tag EICHD11_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD11_WORD3_tag EICHD11_WORD3; /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD11_WORD4_tag EICHD11_WORD4; /* Error Injection Channel Descriptor n, Word4 */
  EIM_EICHD11_WORD5_tag EICHD11_WORD5; /* Error Injection Channel Descriptor n, Word5 */
  EIM_EICHD11_WORD6_tag EICHD11_WORD6; /* Error Injection Channel Descriptor n, Word6 */
  EIM_EICHD11_WORD7_tag EICHD11_WORD7; /* Error Injection Channel Descriptor n, Word7 */
  EIM_EICHD11_WORD8_tag EICHD11_WORD8; /* Error Injection Channel Descriptor n, Word8 */
  uint8_t EIM_reserved12[28];
  EIM_EICHD12_WORD0_tag EICHD12_WORD0; /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD12_WORD1_tag EICHD12_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD12_WORD2_tag EICHD12_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD12_WORD3_tag EICHD12_WORD3; /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD12_WORD4_tag EICHD12_WORD4; /* Error Injection Channel Descriptor n, Word4 */
  EIM_EICHD12_WORD5_tag EICHD12_WORD5; /* Error Injection Channel Descriptor n, Word5 */
  EIM_EICHD12_WORD6_tag EICHD12_WORD6; /* Error Injection Channel Descriptor n, Word6 */
  EIM_EICHD12_WORD7_tag EICHD12_WORD7; /* Error Injection Channel Descriptor n, Word7 */
  EIM_EICHD12_WORD8_tag EICHD12_WORD8; /* Error Injection Channel Descriptor n, Word8 */
  uint8_t EIM_reserved13[28];
  EIM_EICHD13_WORD0_tag EICHD13_WORD0; /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD13_WORD1_tag EICHD13_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD13_WORD2_tag EICHD13_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD13_WORD3_tag EICHD13_WORD3; /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD13_WORD4_tag EICHD13_WORD4; /* Error Injection Channel Descriptor n, Word4 */
  EIM_EICHD13_WORD5_tag EICHD13_WORD5; /* Error Injection Channel Descriptor n, Word5 */
  EIM_EICHD13_WORD6_tag EICHD13_WORD6; /* Error Injection Channel Descriptor n, Word6 */
  EIM_EICHD13_WORD7_tag EICHD13_WORD7; /* Error Injection Channel Descriptor n, Word7 */
  EIM_EICHD13_WORD8_tag EICHD13_WORD8; /* Error Injection Channel Descriptor n, Word8 */
  uint8_t EIM_reserved14[28];
  EIM_EICHD14_WORD0_tag EICHD14_WORD0; /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD14_WORD1_tag EICHD14_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD14_WORD2_tag EICHD14_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD14_WORD3_tag EICHD14_WORD3; /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD14_WORD4_tag EICHD14_WORD4; /* Error Injection Channel Descriptor n, Word4 */
  EIM_EICHD14_WORD5_tag EICHD14_WORD5; /* Error Injection Channel Descriptor n, Word5 */
  EIM_EICHD14_WORD6_tag EICHD14_WORD6; /* Error Injection Channel Descriptor n, Word6 */
  EIM_EICHD14_WORD7_tag EICHD14_WORD7; /* Error Injection Channel Descriptor n, Word7 */
  EIM_EICHD14_WORD8_tag EICHD14_WORD8; /* Error Injection Channel Descriptor n, Word8 */
  uint8_t EIM_reserved15[28];
  EIM_EICHD15_WORD0_tag EICHD15_WORD0; /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD15_WORD1_tag EICHD15_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD15_WORD2_tag EICHD15_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD15_WORD3_tag EICHD15_WORD3; /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD15_WORD4_tag EICHD15_WORD4; /* Error Injection Channel Descriptor n, Word4 */
  uint8_t EIM_reserved16[44];
  EIM_EICHD16_WORD0_tag EICHD16_WORD0; /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD16_WORD1_tag EICHD16_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD16_WORD2_tag EICHD16_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  uint8_t EIM_reserved17[52];
  EIM_EICHD17_WORD0_tag EICHD17_WORD0; /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD17_WORD1_tag EICHD17_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD17_WORD2_tag EICHD17_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  uint8_t EIM_reserved18[52];
  EIM_EICHD18_WORD0_tag EICHD18_WORD0; /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD18_WORD1_tag EICHD18_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD18_WORD2_tag EICHD18_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD18_WORD3_tag EICHD18_WORD3; /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD18_WORD4_tag EICHD18_WORD4; /* Error Injection Channel Descriptor n, Word4 */
  uint8_t EIM_reserved19[44];
  EIM_EICHD19_WORD0_tag EICHD19_WORD0; /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD19_WORD1_tag EICHD19_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD19_WORD2_tag EICHD19_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD19_WORD3_tag EICHD19_WORD3; /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD19_WORD4_tag EICHD19_WORD4; /* Error Injection Channel Descriptor n, Word4 */
  uint8_t EIM_reserved20[44];
  EIM_EICHD20_WORD0_tag EICHD20_WORD0; /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD20_WORD1_tag EICHD20_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD20_WORD2_tag EICHD20_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD20_WORD3_tag EICHD20_WORD3; /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD20_WORD4_tag EICHD20_WORD4; /* Error Injection Channel Descriptor n, Word4 */
  uint8_t EIM_reserved21[44];
  EIM_EICHD21_WORD0_tag EICHD21_WORD0; /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD21_WORD1_tag EICHD21_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD21_WORD2_tag EICHD21_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD21_WORD3_tag EICHD21_WORD3; /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD21_WORD4_tag EICHD21_WORD4; /* Error Injection Channel Descriptor n, Word4 */
  uint8_t EIM_reserved22[44];
  EIM_EICHD22_WORD0_tag EICHD22_WORD0; /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD22_WORD1_tag EICHD22_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD22_WORD2_tag EICHD22_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD22_WORD3_tag EICHD22_WORD3; /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD22_WORD4_tag EICHD22_WORD4; /* Error Injection Channel Descriptor n, Word4 */
  EIM_EICHD22_WORD5_tag EICHD22_WORD5; /* Error Injection Channel Descriptor n, Word5 */
  EIM_EICHD22_WORD6_tag EICHD22_WORD6; /* Error Injection Channel Descriptor n, Word6 */
  EIM_EICHD22_WORD7_tag EICHD22_WORD7; /* Error Injection Channel Descriptor n, Word7 */
  EIM_EICHD22_WORD8_tag EICHD22_WORD8; /* Error Injection Channel Descriptor n, Word8 */
  uint8_t EIM_reserved23[28];
  EIM_EICHD23_WORD0_tag EICHD23_WORD0; /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD23_WORD1_tag EICHD23_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD23_WORD2_tag EICHD23_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  uint8_t EIM_reserved24[52];
  EIM_EICHD24_WORD0_tag EICHD24_WORD0; /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD24_WORD1_tag EICHD24_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD24_WORD2_tag EICHD24_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD24_WORD3_tag EICHD24_WORD3; /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD24_WORD4_tag EICHD24_WORD4; /* Error Injection Channel Descriptor n, Word4 */
  uint8_t EIM_reserved25[44];
  EIM_EICHD25_WORD0_tag EICHD25_WORD0; /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD25_WORD1_tag EICHD25_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD25_WORD2_tag EICHD25_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD25_WORD3_tag EICHD25_WORD3; /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD25_WORD4_tag EICHD25_WORD4; /* Error Injection Channel Descriptor n, Word4 */
  uint8_t EIM_reserved26[44];
  EIM_EICHD26_WORD0_tag EICHD26_WORD0; /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD26_WORD1_tag EICHD26_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD26_WORD2_tag EICHD26_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD26_WORD3_tag EICHD26_WORD3; /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD26_WORD4_tag EICHD26_WORD4; /* Error Injection Channel Descriptor n, Word4 */
  uint8_t EIM_reserved27[44];
  EIM_EICHD27_WORD0_tag EICHD27_WORD0; /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD27_WORD1_tag EICHD27_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD27_WORD2_tag EICHD27_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD27_WORD3_tag EICHD27_WORD3; /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD27_WORD4_tag EICHD27_WORD4; /* Error Injection Channel Descriptor n, Word4 */
  uint8_t EIM_reserved28[44];
  EIM_EICHD28_WORD0_tag EICHD28_WORD0; /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD28_WORD1_tag EICHD28_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD28_WORD2_tag EICHD28_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD28_WORD3_tag EICHD28_WORD3; /* Error Injection Channel Descriptor n, Word3 */
  uint8_t EIM_reserved29[48];
  EIM_EICHD29_WORD0_tag EICHD29_WORD0; /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD29_WORD1_tag EICHD29_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD29_WORD2_tag EICHD29_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  uint8_t EIM_reserved30[52];
  EIM_EICHD30_WORD0_tag EICHD30_WORD0; /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD30_WORD1_tag EICHD30_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD30_WORD2_tag EICHD30_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  uint8_t EIM_reserved31[52];
  EIM_EICHD31_WORD0_tag EICHD31_WORD0; /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD31_WORD1_tag EICHD31_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD31_WORD2_tag EICHD31_WORD2; /* Error Injection Channel Descriptor n, Word2 */
};


/* ============================================================================
   =============================== Module: ERM ================================
   ============================================================================ */

typedef union ERM_CR0_union_tag {      /* ERM Configuration Register 0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t ENCIE7:1;                /* ENCIE7 */
    vuint32_t ESCIE7:1;                /* ESCIE7 */
    vuint32_t _unused_4:2;             /* Reserved */
    vuint32_t ENCIE6:1;                /* ENCIE6 */
    vuint32_t ESCIE6:1;                /* ESCIE6 */
    vuint32_t _unused_8:2;             /* Reserved */
    vuint32_t ENCIE5:1;                /* ENCIE5 */
    vuint32_t ESCIE5:1;                /* ESCIE5 */
    vuint32_t _unused_12:2;            /* Reserved */
    vuint32_t ENCIE4:1;                /* ENCIE4 */
    vuint32_t ESCIE4:1;                /* ESCIE4 */
    vuint32_t _unused_16:2;            /* Reserved */
    vuint32_t ENCIE3:1;                /* ENCIE3 */
    vuint32_t ESCIE3:1;                /* ESCIE3 */
    vuint32_t _unused_20:2;            /* Reserved */
    vuint32_t ENCIE2:1;                /* ENCIE2 */
    vuint32_t ESCIE2:1;                /* ESCIE2 */
    vuint32_t _unused_24:2;            /* Reserved */
    vuint32_t ENCIE1:1;                /* ENCIE1 */
    vuint32_t ESCIE1:1;                /* ESCIE1 */
    vuint32_t _unused_28:2;            /* Reserved */
    vuint32_t ENCIE0:1;                /* ENCIE0 */
    vuint32_t ESCIE0:1;                /* ESCIE0 */
  } B;
} ERM_CR0_tag;

typedef union ERM_CR1_union_tag {      /* ERM Configuration Register 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t ENCIE15:1;               /* ENCIE15 */
    vuint32_t ESCIE15:1;               /* ESCIE15 */
    vuint32_t _unused_4:2;             /* Reserved */
    vuint32_t ENCIE14:1;               /* ENCIE14 */
    vuint32_t ESCIE14:1;               /* ESCIE14 */
    vuint32_t _unused_8:2;             /* Reserved */
    vuint32_t ENCIE13:1;               /* ENCIE13 */
    vuint32_t ESCIE13:1;               /* ESCIE13 */
    vuint32_t _unused_12:2;            /* Reserved */
    vuint32_t ENCIE12:1;               /* ENCIE12 */
    vuint32_t ESCIE12:1;               /* ESCIE12 */
    vuint32_t _unused_16:2;            /* Reserved */
    vuint32_t ENCIE11:1;               /* ENCIE11 */
    vuint32_t ESCIE11:1;               /* ESCIE11 */
    vuint32_t _unused_20:2;            /* Reserved */
    vuint32_t ENCIE10:1;               /* ENCIE10 */
    vuint32_t ESCIE10:1;               /* ESCIE10 */
    vuint32_t _unused_24:2;            /* Reserved */
    vuint32_t ENCIE9:1;                /* ENCIE9 */
    vuint32_t ESCIE9:1;                /* ESCIE9 */
    vuint32_t _unused_28:2;            /* Reserved */
    vuint32_t ENCIE8:1;                /* ENCIE8 */
    vuint32_t ESCIE8:1;                /* ESCIE8 */
  } B;
} ERM_CR1_tag;

typedef union ERM_CR2_union_tag {      /* ERM Configuration Register 2 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t ENCIE23:1;               /* ENCIE23 */
    vuint32_t ESCIE23:1;               /* ESCIE23 */
    vuint32_t _unused_4:2;             /* Reserved */
    vuint32_t ENCIE22:1;               /* ENCIE22 */
    vuint32_t ESCIE22:1;               /* ESCIE22 */
    vuint32_t _unused_8:2;             /* Reserved */
    vuint32_t ENCIE21:1;               /* ENCIE21 */
    vuint32_t ESCIE21:1;               /* ESCIE21 */
    vuint32_t _unused_12:2;            /* Reserved */
    vuint32_t ENCIE20:1;               /* ENCIE20 */
    vuint32_t ESCIE20:1;               /* ESCIE20 */
    vuint32_t _unused_16:2;            /* Reserved */
    vuint32_t ENCIE19:1;               /* ENCIE19 */
    vuint32_t ESCIE19:1;               /* ESCIE19 */
    vuint32_t _unused_20:2;            /* Reserved */
    vuint32_t ENCIE18:1;               /* ENCIE18 */
    vuint32_t ESCIE18:1;               /* ESCIE18 */
    vuint32_t _unused_24:2;            /* Reserved */
    vuint32_t ENCIE17:1;               /* ENCIE17 */
    vuint32_t ESCIE17:1;               /* ESCIE17 */
    vuint32_t _unused_28:2;            /* Reserved */
    vuint32_t ENCIE16:1;               /* ENCIE16 */
    vuint32_t ESCIE16:1;               /* ESCIE16 */
  } B;
} ERM_CR2_tag;

typedef union ERM_SR0_union_tag {      /* ERM Status Register 0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t NCE7:1;                  /* NCE7 */
    vuint32_t SBC7:1;                  /* SBC7 */
    vuint32_t _unused_4:2;             /* Reserved */
    vuint32_t NCE6:1;                  /* NCE6 */
    vuint32_t SBC6:1;                  /* SBC6 */
    vuint32_t _unused_8:2;             /* Reserved */
    vuint32_t NCE5:1;                  /* NCE5 */
    vuint32_t SBC5:1;                  /* SBC5 */
    vuint32_t _unused_12:2;            /* Reserved */
    vuint32_t NCE4:1;                  /* NCE4 */
    vuint32_t SBC4:1;                  /* SBC4 */
    vuint32_t _unused_16:2;            /* Reserved */
    vuint32_t NCE3:1;                  /* NCE3 */
    vuint32_t SBC3:1;                  /* SBC3 */
    vuint32_t _unused_20:2;            /* Reserved */
    vuint32_t NCE2:1;                  /* NCE2 */
    vuint32_t SBC2:1;                  /* SBC2 */
    vuint32_t _unused_24:2;            /* Reserved */
    vuint32_t NCE1:1;                  /* NCE1 */
    vuint32_t SBC1:1;                  /* SBC1 */
    vuint32_t _unused_28:2;            /* Reserved */
    vuint32_t NCE0:1;                  /* NCE0 */
    vuint32_t SBC0:1;                  /* SBC0 */
  } B;
} ERM_SR0_tag;

typedef union ERM_SR1_union_tag {      /* ERM Status Register 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t NCE15:1;                 /* NCE15 */
    vuint32_t SBC15:1;                 /* SBC15 */
    vuint32_t _unused_4:2;             /* Reserved */
    vuint32_t NCE14:1;                 /* NCE14 */
    vuint32_t SBC14:1;                 /* SBC14 */
    vuint32_t _unused_8:2;             /* Reserved */
    vuint32_t NCE13:1;                 /* NCE13 */
    vuint32_t SBC13:1;                 /* SBC13 */
    vuint32_t _unused_12:2;            /* Reserved */
    vuint32_t NCE12:1;                 /* NCE12 */
    vuint32_t SBC12:1;                 /* SBC12 */
    vuint32_t _unused_16:2;            /* Reserved */
    vuint32_t NCE11:1;                 /* NCE11 */
    vuint32_t SBC11:1;                 /* SBC11 */
    vuint32_t _unused_20:2;            /* Reserved */
    vuint32_t NCE10:1;                 /* NCE10 */
    vuint32_t SBC10:1;                 /* SBC10 */
    vuint32_t _unused_24:2;            /* Reserved */
    vuint32_t NCE9:1;                  /* NCE9 */
    vuint32_t SBC9:1;                  /* SBC9 */
    vuint32_t _unused_28:2;            /* Reserved */
    vuint32_t NCE8:1;                  /* NCE8 */
    vuint32_t SBC8:1;                  /* SBC8 */
  } B;
} ERM_SR1_tag;

typedef union ERM_SR2_union_tag {      /* ERM Status Register 2 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t NCE23:1;                 /* NCE23 */
    vuint32_t SBC23:1;                 /* SBC23 */
    vuint32_t _unused_4:2;             /* Reserved */
    vuint32_t NCE22:1;                 /* NCE22 */
    vuint32_t SBC22:1;                 /* SBC22 */
    vuint32_t _unused_8:2;             /* Reserved */
    vuint32_t NCE21:1;                 /* NCE21 */
    vuint32_t SBC21:1;                 /* SBC21 */
    vuint32_t _unused_12:2;            /* Reserved */
    vuint32_t NCE20:1;                 /* NCE20 */
    vuint32_t SBC20:1;                 /* SBC20 */
    vuint32_t _unused_16:2;            /* Reserved */
    vuint32_t NCE19:1;                 /* NCE19 */
    vuint32_t SBC19:1;                 /* SBC19 */
    vuint32_t _unused_20:2;            /* Reserved */
    vuint32_t NCE18:1;                 /* NCE18 */
    vuint32_t SBC18:1;                 /* SBC18 */
    vuint32_t _unused_24:2;            /* Reserved */
    vuint32_t NCE17:1;                 /* NCE17 */
    vuint32_t SBC17:1;                 /* SBC17 */
    vuint32_t _unused_28:2;            /* Reserved */
    vuint32_t NCE16:1;                 /* NCE16 */
    vuint32_t SBC16:1;                 /* SBC16 */
  } B;
} ERM_SR2_tag;

typedef union ERM_EAR0_union_tag {     /* ERM Memory n Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR0_tag;

typedef union ERM_SYN0_union_tag {     /* ERM Memory n Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN0_tag;

typedef union ERM_CORR_ERR_CNT0_union_tag { /* ERM Memory n Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT0_tag;

typedef union ERM_EAR1_union_tag {     /* ERM Memory n Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR1_tag;

typedef union ERM_SYN1_union_tag {     /* ERM Memory n Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN1_tag;

typedef union ERM_CORR_ERR_CNT1_union_tag { /* ERM Memory n Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT1_tag;

typedef union ERM_EAR2_union_tag {     /* ERM Memory n Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR2_tag;

typedef union ERM_SYN2_union_tag {     /* ERM Memory n Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN2_tag;

typedef union ERM_CORR_ERR_CNT2_union_tag { /* ERM Memory n Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT2_tag;

typedef union ERM_EAR3_union_tag {     /* ERM Memory n Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR3_tag;

typedef union ERM_SYN3_union_tag {     /* ERM Memory n Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN3_tag;

typedef union ERM_CORR_ERR_CNT3_union_tag { /* ERM Memory n Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT3_tag;

typedef union ERM_EAR4_union_tag {     /* ERM Memory n Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR4_tag;

typedef union ERM_SYN4_union_tag {     /* ERM Memory n Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN4_tag;

typedef union ERM_CORR_ERR_CNT4_union_tag { /* ERM Memory n Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT4_tag;

typedef union ERM_EAR5_union_tag {     /* ERM Memory n Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR5_tag;

typedef union ERM_SYN5_union_tag {     /* ERM Memory n Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN5_tag;

typedef union ERM_CORR_ERR_CNT5_union_tag { /* ERM Memory n Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT5_tag;

typedef union ERM_EAR6_union_tag {     /* ERM Memory n Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR6_tag;

typedef union ERM_SYN6_union_tag {     /* ERM Memory n Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN6_tag;

typedef union ERM_CORR_ERR_CNT6_union_tag { /* ERM Memory n Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT6_tag;

typedef union ERM_EAR7_union_tag {     /* ERM Memory n Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR7_tag;

typedef union ERM_SYN7_union_tag {     /* ERM Memory n Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN7_tag;

typedef union ERM_CORR_ERR_CNT7_union_tag { /* ERM Memory n Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT7_tag;

typedef union ERM_EAR8_union_tag {     /* ERM Memory n Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR8_tag;

typedef union ERM_SYN8_union_tag {     /* ERM Memory n Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN8_tag;

typedef union ERM_CORR_ERR_CNT8_union_tag { /* ERM Memory n Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT8_tag;

typedef union ERM_EAR9_union_tag {     /* ERM Memory n Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR9_tag;

typedef union ERM_SYN9_union_tag {     /* ERM Memory n Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN9_tag;

typedef union ERM_CORR_ERR_CNT9_union_tag { /* ERM Memory n Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT9_tag;

typedef union ERM_EAR10_union_tag {    /* ERM Memory n Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR10_tag;

typedef union ERM_SYN10_union_tag {    /* ERM Memory n Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN10_tag;

typedef union ERM_CORR_ERR_CNT10_union_tag { /* ERM Memory n Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT10_tag;

typedef union ERM_EAR11_union_tag {    /* ERM Memory n Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR11_tag;

typedef union ERM_SYN11_union_tag {    /* ERM Memory n Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN11_tag;

typedef union ERM_CORR_ERR_CNT11_union_tag { /* ERM Memory n Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT11_tag;

typedef union ERM_EAR12_union_tag {    /* ERM Memory n Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR12_tag;

typedef union ERM_SYN12_union_tag {    /* ERM Memory n Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN12_tag;

typedef union ERM_CORR_ERR_CNT12_union_tag { /* ERM Memory n Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT12_tag;

typedef union ERM_EAR13_union_tag {    /* ERM Memory n Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR13_tag;

typedef union ERM_SYN13_union_tag {    /* ERM Memory n Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN13_tag;

typedef union ERM_CORR_ERR_CNT13_union_tag { /* ERM Memory n Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT13_tag;

typedef union ERM_EAR14_union_tag {    /* ERM Memory n Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR14_tag;

typedef union ERM_SYN14_union_tag {    /* ERM Memory n Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN14_tag;

typedef union ERM_CORR_ERR_CNT14_union_tag { /* ERM Memory n Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT14_tag;

typedef union ERM_EAR15_union_tag {    /* ERM Memory n Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR15_tag;

typedef union ERM_SYN15_union_tag {    /* ERM Memory n Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN15_tag;

typedef union ERM_CORR_ERR_CNT15_union_tag { /* ERM Memory n Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT15_tag;

typedef union ERM_EAR16_union_tag {    /* ERM Memory n Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR16_tag;

typedef union ERM_SYN16_union_tag {    /* ERM Memory n Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN16_tag;

typedef union ERM_CORR_ERR_CNT16_union_tag { /* ERM Memory n Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT16_tag;

typedef union ERM_EAR17_union_tag {    /* ERM Memory n Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR17_tag;

typedef union ERM_SYN17_union_tag {    /* ERM Memory n Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN17_tag;

typedef union ERM_CORR_ERR_CNT17_union_tag { /* ERM Memory n Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT17_tag;

typedef union ERM_EAR18_union_tag {    /* ERM Memory n Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR18_tag;

typedef union ERM_SYN18_union_tag {    /* ERM Memory n Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN18_tag;

typedef union ERM_CORR_ERR_CNT18_union_tag { /* ERM Memory n Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT18_tag;

typedef union ERM_EAR19_union_tag {    /* ERM Memory n Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR19_tag;

typedef union ERM_SYN19_union_tag {    /* ERM Memory n Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN19_tag;

typedef union ERM_CORR_ERR_CNT19_union_tag { /* ERM Memory n Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT19_tag;

typedef union ERM_EAR20_union_tag {    /* ERM Memory n Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR20_tag;

typedef union ERM_SYN20_union_tag {    /* ERM Memory n Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN20_tag;

typedef union ERM_CORR_ERR_CNT20_union_tag { /* ERM Memory n Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT20_tag;

typedef union ERM_EAR21_union_tag {    /* ERM Memory n Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR21_tag;

typedef union ERM_SYN21_union_tag {    /* ERM Memory n Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN21_tag;

typedef union ERM_CORR_ERR_CNT21_union_tag { /* ERM Memory n Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT21_tag;

typedef union ERM_EAR22_union_tag {    /* ERM Memory n Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR22_tag;

typedef union ERM_SYN22_union_tag {    /* ERM Memory n Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN22_tag;

typedef union ERM_CORR_ERR_CNT22_union_tag { /* ERM Memory n Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT22_tag;

typedef union ERM_EAR23_union_tag {    /* ERM Memory n Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR23_tag;

typedef union ERM_SYN23_union_tag {    /* ERM Memory n Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN23_tag;

typedef union ERM_CORR_ERR_CNT23_union_tag { /* ERM Memory n Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT23_tag;

struct ERM_tag {
  ERM_CR0_tag CR0;                     /* ERM Configuration Register 0 */
  ERM_CR1_tag CR1;                     /* ERM Configuration Register 1 */
  ERM_CR2_tag CR2;                     /* ERM Configuration Register 2 */
  uint8_t ERM_reserved0[4];
  ERM_SR0_tag SR0;                     /* ERM Status Register 0 */
  ERM_SR1_tag SR1;                     /* ERM Status Register 1 */
  ERM_SR2_tag SR2;                     /* ERM Status Register 2 */
  uint8_t ERM_reserved1[228];
  ERM_EAR0_tag EAR0;                   /* ERM Memory n Error Address Register */
  ERM_SYN0_tag SYN0;                   /* ERM Memory n Syndrome Register */
  ERM_CORR_ERR_CNT0_tag CORR_ERR_CNT0; /* ERM Memory n Correctable Error Count Register */
  uint8_t ERM_reserved2[4];
  ERM_EAR1_tag EAR1;                   /* ERM Memory n Error Address Register */
  ERM_SYN1_tag SYN1;                   /* ERM Memory n Syndrome Register */
  ERM_CORR_ERR_CNT1_tag CORR_ERR_CNT1; /* ERM Memory n Correctable Error Count Register */
  uint8_t ERM_reserved3[4];
  ERM_EAR2_tag EAR2;                   /* ERM Memory n Error Address Register */
  ERM_SYN2_tag SYN2;                   /* ERM Memory n Syndrome Register */
  ERM_CORR_ERR_CNT2_tag CORR_ERR_CNT2; /* ERM Memory n Correctable Error Count Register */
  uint8_t ERM_reserved4[4];
  ERM_EAR3_tag EAR3;                   /* ERM Memory n Error Address Register */
  ERM_SYN3_tag SYN3;                   /* ERM Memory n Syndrome Register */
  ERM_CORR_ERR_CNT3_tag CORR_ERR_CNT3; /* ERM Memory n Correctable Error Count Register */
  uint8_t ERM_reserved5[4];
  ERM_EAR4_tag EAR4;                   /* ERM Memory n Error Address Register */
  ERM_SYN4_tag SYN4;                   /* ERM Memory n Syndrome Register */
  ERM_CORR_ERR_CNT4_tag CORR_ERR_CNT4; /* ERM Memory n Correctable Error Count Register */
  uint8_t ERM_reserved6[4];
  ERM_EAR5_tag EAR5;                   /* ERM Memory n Error Address Register */
  ERM_SYN5_tag SYN5;                   /* ERM Memory n Syndrome Register */
  ERM_CORR_ERR_CNT5_tag CORR_ERR_CNT5; /* ERM Memory n Correctable Error Count Register */
  uint8_t ERM_reserved7[4];
  ERM_EAR6_tag EAR6;                   /* ERM Memory n Error Address Register */
  ERM_SYN6_tag SYN6;                   /* ERM Memory n Syndrome Register */
  ERM_CORR_ERR_CNT6_tag CORR_ERR_CNT6; /* ERM Memory n Correctable Error Count Register */
  uint8_t ERM_reserved8[4];
  ERM_EAR7_tag EAR7;                   /* ERM Memory n Error Address Register */
  ERM_SYN7_tag SYN7;                   /* ERM Memory n Syndrome Register */
  ERM_CORR_ERR_CNT7_tag CORR_ERR_CNT7; /* ERM Memory n Correctable Error Count Register */
  uint8_t ERM_reserved9[4];
  ERM_EAR8_tag EAR8;                   /* ERM Memory n Error Address Register */
  ERM_SYN8_tag SYN8;                   /* ERM Memory n Syndrome Register */
  ERM_CORR_ERR_CNT8_tag CORR_ERR_CNT8; /* ERM Memory n Correctable Error Count Register */
  uint8_t ERM_reserved10[4];
  ERM_EAR9_tag EAR9;                   /* ERM Memory n Error Address Register */
  ERM_SYN9_tag SYN9;                   /* ERM Memory n Syndrome Register */
  ERM_CORR_ERR_CNT9_tag CORR_ERR_CNT9; /* ERM Memory n Correctable Error Count Register */
  uint8_t ERM_reserved11[4];
  ERM_EAR10_tag EAR10;                 /* ERM Memory n Error Address Register */
  ERM_SYN10_tag SYN10;                 /* ERM Memory n Syndrome Register */
  ERM_CORR_ERR_CNT10_tag CORR_ERR_CNT10; /* ERM Memory n Correctable Error Count Register */
  uint8_t ERM_reserved12[4];
  ERM_EAR11_tag EAR11;                 /* ERM Memory n Error Address Register */
  ERM_SYN11_tag SYN11;                 /* ERM Memory n Syndrome Register */
  ERM_CORR_ERR_CNT11_tag CORR_ERR_CNT11; /* ERM Memory n Correctable Error Count Register */
  uint8_t ERM_reserved13[4];
  ERM_EAR12_tag EAR12;                 /* ERM Memory n Error Address Register */
  ERM_SYN12_tag SYN12;                 /* ERM Memory n Syndrome Register */
  ERM_CORR_ERR_CNT12_tag CORR_ERR_CNT12; /* ERM Memory n Correctable Error Count Register */
  uint8_t ERM_reserved14[4];
  ERM_EAR13_tag EAR13;                 /* ERM Memory n Error Address Register */
  ERM_SYN13_tag SYN13;                 /* ERM Memory n Syndrome Register */
  ERM_CORR_ERR_CNT13_tag CORR_ERR_CNT13; /* ERM Memory n Correctable Error Count Register */
  uint8_t ERM_reserved15[4];
  ERM_EAR14_tag EAR14;                 /* ERM Memory n Error Address Register */
  ERM_SYN14_tag SYN14;                 /* ERM Memory n Syndrome Register */
  ERM_CORR_ERR_CNT14_tag CORR_ERR_CNT14; /* ERM Memory n Correctable Error Count Register */
  uint8_t ERM_reserved16[4];
  ERM_EAR15_tag EAR15;                 /* ERM Memory n Error Address Register */
  ERM_SYN15_tag SYN15;                 /* ERM Memory n Syndrome Register */
  ERM_CORR_ERR_CNT15_tag CORR_ERR_CNT15; /* ERM Memory n Correctable Error Count Register */
  uint8_t ERM_reserved17[4];
  ERM_EAR16_tag EAR16;                 /* ERM Memory n Error Address Register */
  ERM_SYN16_tag SYN16;                 /* ERM Memory n Syndrome Register */
  ERM_CORR_ERR_CNT16_tag CORR_ERR_CNT16; /* ERM Memory n Correctable Error Count Register */
  uint8_t ERM_reserved18[4];
  ERM_EAR17_tag EAR17;                 /* ERM Memory n Error Address Register */
  ERM_SYN17_tag SYN17;                 /* ERM Memory n Syndrome Register */
  ERM_CORR_ERR_CNT17_tag CORR_ERR_CNT17; /* ERM Memory n Correctable Error Count Register */
  uint8_t ERM_reserved19[4];
  ERM_EAR18_tag EAR18;                 /* ERM Memory n Error Address Register */
  ERM_SYN18_tag SYN18;                 /* ERM Memory n Syndrome Register */
  ERM_CORR_ERR_CNT18_tag CORR_ERR_CNT18; /* ERM Memory n Correctable Error Count Register */
  uint8_t ERM_reserved20[4];
  ERM_EAR19_tag EAR19;                 /* ERM Memory n Error Address Register */
  ERM_SYN19_tag SYN19;                 /* ERM Memory n Syndrome Register */
  ERM_CORR_ERR_CNT19_tag CORR_ERR_CNT19; /* ERM Memory n Correctable Error Count Register */
  uint8_t ERM_reserved21[4];
  ERM_EAR20_tag EAR20;                 /* ERM Memory n Error Address Register */
  ERM_SYN20_tag SYN20;                 /* ERM Memory n Syndrome Register */
  ERM_CORR_ERR_CNT20_tag CORR_ERR_CNT20; /* ERM Memory n Correctable Error Count Register */
  uint8_t ERM_reserved22[4];
  ERM_EAR21_tag EAR21;                 /* ERM Memory n Error Address Register */
  ERM_SYN21_tag SYN21;                 /* ERM Memory n Syndrome Register */
  ERM_CORR_ERR_CNT21_tag CORR_ERR_CNT21; /* ERM Memory n Correctable Error Count Register */
  uint8_t ERM_reserved23[4];
  ERM_EAR22_tag EAR22;                 /* ERM Memory n Error Address Register */
  ERM_SYN22_tag SYN22;                 /* ERM Memory n Syndrome Register */
  ERM_CORR_ERR_CNT22_tag CORR_ERR_CNT22; /* ERM Memory n Correctable Error Count Register */
  uint8_t ERM_reserved24[4];
  ERM_EAR23_tag EAR23;                 /* ERM Memory n Error Address Register */
  ERM_SYN23_tag SYN23;                 /* ERM Memory n Syndrome Register */
  ERM_CORR_ERR_CNT23_tag CORR_ERR_CNT23; /* ERM Memory n Correctable Error Count Register */
};


/* ============================================================================
   =============================== Module: FBXC ===============================
   ============================================================================ */

typedef union FBXC_STR_union_tag {     /* Status Register */
  vuint32_t R;
  struct {
    vuint32_t REP_ERR:1;               /* Repair error */
    vuint32_t DRW:1;                   /* Disable repair write */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} FBXC_STR_tag;

typedef union FBXC_CTL_union_tag {     /* Control Register */
  vuint32_t R;
  struct {
    vuint32_t MR:1;                    /* Margin read enable */
    vuint32_t RSB:1;                   /* Repair enable (active-low) */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} FBXC_CTL_tag;

struct FBXC_tag {
  FBXC_STR_tag STR;                    /* Status Register */
  uint8_t FBXC_reserved0[8];
  FBXC_CTL_tag CTL;                    /* Control Register */
};


/* ============================================================================
   =============================== Module: FCCU ===============================
   ============================================================================ */

typedef union FCCU_CTRL_union_tag {    /* Control */
  vuint32_t R;
  struct {
    vuint32_t OPR:5;                   /* Operation Run */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t OPS:2;                   /* Operation Status */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t DEBUG:1;                 /* Debug Mode Enable */
    vuint32_t _unused_10:19;           /* Reserved */
    vuint32_t _unused_29:2;            /* Reserved */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} FCCU_CTRL_tag;

typedef union FCCU_CTRLK_union_tag {   /* Control Key */
  vuint32_t R;
  struct {
    vuint32_t CTRLK:32;                /* Locked-Operation Control Key */
  } B;
} FCCU_CTRLK_tag;

typedef union FCCU_CFG_union_tag {     /* Configuration */
  vuint32_t R;
  struct {
    vuint32_t FOP:6;                   /* Fault-Output (EOUT) Prescaler */
    vuint32_t FOM:3;                   /* Fault-Output (EOUT) Mode */
    vuint32_t PS:1;                    /* Fault-Output (EOUT) Polarity Selection */
    vuint32_t SM:1;                    /* Fault-Output (EOUT) Switching Mode */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t _unused_13:2;            /* Reserved */
    vuint32_t FOPE:1;                  /* Fault-Output (EOUT) Prescaler Extension */
    vuint32_t _unused_16:4;            /* Reserved */
    vuint32_t _unused_20:2;            /* Reserved */
    vuint32_t FCCU_SET_CLEAR:2;        /* Fault-Output (EOUT) Control */
    vuint32_t FCCU_SET_AFTER_RESET:1;  /* Fault-Output (EOUT) Activate */
    vuint32_t _unused_25:7;            /* Reserved */
  } B;
} FCCU_CFG_tag;

typedef union FCCU_NCF_CFG_union_tag { /* Non-critical Fault Configuration */
  vuint32_t R;
  struct {
    vuint32_t NCFC0:1;                 /* Non-critical Fault Configuration n */
    vuint32_t NCFC1:1;                 /* Non-critical Fault Configuration n */
    vuint32_t NCFC2:1;                 /* Non-critical Fault Configuration n */
    vuint32_t NCFC3:1;                 /* Non-critical Fault Configuration n */
    vuint32_t NCFC4:1;                 /* Non-critical Fault Configuration n */
    vuint32_t NCFC5:1;                 /* Non-critical Fault Configuration n */
    vuint32_t NCFC6:1;                 /* Non-critical Fault Configuration n */
    vuint32_t NCFC7:1;                 /* Non-critical Fault Configuration n */
    vuint32_t NCFC8:1;                 /* Non-critical Fault Configuration n */
    vuint32_t NCFC9:1;                 /* Non-critical Fault Configuration n */
    vuint32_t NCFC10:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC11:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC12:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC13:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC14:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC15:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC16:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC17:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC18:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC19:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC20:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC21:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC22:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC23:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC24:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC25:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC26:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC27:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC28:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC29:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC30:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC31:1;                /* Non-critical Fault Configuration n */
  } B;
} FCCU_NCF_CFG_tag;

typedef union FCCU_NCFS_CFG_union_tag { /* Non-critical Fault-State Configuration */
  vuint32_t R;
  struct {
    vuint32_t NCFSC0:2;                /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC1:2;                /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC2:2;                /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC3:2;                /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC4:2;                /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC5:2;                /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC6:2;                /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC7:2;                /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC8:2;                /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC9:2;                /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC10:2;               /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC11:2;               /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC12:2;               /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC13:2;               /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC14:2;               /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC15:2;               /* Non-critical Fault-State Configuration n */
  } B;
} FCCU_NCFS_CFG_tag;

typedef union FCCU_NCF_S_union_tag {   /* Non-critical Fault Status */
  vuint32_t R;
  struct {
    vuint32_t NCFS0:1;                 /* Non-critical Fault Status n */
    vuint32_t NCFS1:1;                 /* Non-critical Fault Status n */
    vuint32_t NCFS2:1;                 /* Non-critical Fault Status n */
    vuint32_t NCFS3:1;                 /* Non-critical Fault Status n */
    vuint32_t NCFS4:1;                 /* Non-critical Fault Status n */
    vuint32_t NCFS5:1;                 /* Non-critical Fault Status n */
    vuint32_t NCFS6:1;                 /* Non-critical Fault Status n */
    vuint32_t NCFS7:1;                 /* Non-critical Fault Status n */
    vuint32_t NCFS8:1;                 /* Non-critical Fault Status n */
    vuint32_t NCFS9:1;                 /* Non-critical Fault Status n */
    vuint32_t NCFS10:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS11:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS12:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS13:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS14:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS15:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS16:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS17:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS18:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS19:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS20:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS21:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS22:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS23:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS24:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS25:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS26:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS27:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS28:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS29:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS30:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS31:1;                /* Non-critical Fault Status n */
  } B;
} FCCU_NCF_S_tag;

typedef union FCCU_NCFK_union_tag {    /* Non-critical Fault Key */
  vuint32_t R;
  struct {
    vuint32_t NCFK:32;                 /* Non-critical Fault Key */
  } B;
} FCCU_NCFK_tag;

typedef union FCCU_NCF_E_union_tag {   /* Non-critical Fault Enable */
  vuint32_t R;
  struct {
    vuint32_t NCFE0:1;                 /* Non-critical Fault Enable n */
    vuint32_t NCFE1:1;                 /* Non-critical Fault Enable n */
    vuint32_t NCFE2:1;                 /* Non-critical Fault Enable n */
    vuint32_t NCFE3:1;                 /* Non-critical Fault Enable n */
    vuint32_t NCFE4:1;                 /* Non-critical Fault Enable n */
    vuint32_t NCFE5:1;                 /* Non-critical Fault Enable n */
    vuint32_t NCFE6:1;                 /* Non-critical Fault Enable n */
    vuint32_t NCFE7:1;                 /* Non-critical Fault Enable n */
    vuint32_t NCFE8:1;                 /* Non-critical Fault Enable n */
    vuint32_t NCFE9:1;                 /* Non-critical Fault Enable n */
    vuint32_t NCFE10:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE11:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE12:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE13:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE14:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE15:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE16:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE17:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE18:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE19:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE20:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE21:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE22:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE23:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE24:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE25:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE26:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE27:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE28:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE29:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE30:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE31:1;                /* Non-critical Fault Enable n */
  } B;
} FCCU_NCF_E_tag;

typedef union FCCU_NCF_TOE_union_tag { /* Non-critical-Fault Alarm-State Timeout Enable */
  vuint32_t R;
  struct {
    vuint32_t NCFTOE0:1;               /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE1:1;               /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE2:1;               /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE3:1;               /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE4:1;               /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE5:1;               /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE6:1;               /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE7:1;               /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE8:1;               /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE9:1;               /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE10:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE11:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE12:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE13:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE14:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE15:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE16:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE17:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE18:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE19:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE20:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE21:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE22:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE23:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE24:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE25:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE26:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE27:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE28:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE29:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE30:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE31:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
  } B;
} FCCU_NCF_TOE_tag;

typedef union FCCU_NCF_TO_union_tag {  /* Non-critical-Fault Alarm-State Timeout Interval */
  vuint32_t R;
  struct {
    vuint32_t TO:32;                   /* Non-critical-Fault Alarm-State Timeout Interval */
  } B;
} FCCU_NCF_TO_tag;

typedef union FCCU_CFG_TO_union_tag {  /* Configuration-State Timeout Interval */
  vuint32_t R;
  struct {
    vuint32_t TO:3;                    /* Configuration-State Timeout Interval */
    vuint32_t _unused_3:29;            /* Reserved */
  } B;
} FCCU_CFG_TO_tag;

typedef union FCCU_EINOUT_union_tag {  /* IO Control */
  vuint32_t R;
  struct {
    vuint32_t EOUT0:1;                 /* EOUT0 */
    vuint32_t EOUT1:1;                 /* EOUT1 */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t EIN0:1;                  /* Error Input 0 */
    vuint32_t EIN1:1;                  /* Error Input 1 */
    vuint32_t _unused_6:26;            /* Reserved */
  } B;
} FCCU_EINOUT_tag;

typedef union FCCU_STAT_union_tag {    /* Status */
  vuint32_t R;
  struct {
    vuint32_t STATUS:3;                /* FCCU State */
    vuint32_t ESTAT:1;                 /* FCCU Faulty Condition */
    vuint32_t PHYSICERRORPIN:2;        /* EOUT Signal States */
    vuint32_t _unused_6:26;            /* Reserved */
  } B;
} FCCU_STAT_tag;

typedef union FCCU_N2AF_STATUS_union_tag { /* Normal-to-Alarm Freeze Status */
  vuint32_t R;
  struct {
    vuint32_t NAFS:8;                  /* Normal-to-Alarm Freeze Status */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} FCCU_N2AF_STATUS_tag;

typedef union FCCU_A2FF_STATUS_union_tag { /* Alarm-to-Fault Freeze Status */
  vuint32_t R;
  struct {
    vuint32_t AFFS:8;                  /* Alarm-to-Fault Freeze Status */
    vuint32_t AF_SRC:2;                /* Alarm-to-Fault Source */
    vuint32_t _unused_10:22;
  } B;
} FCCU_A2FF_STATUS_tag;

typedef union FCCU_N2FF_STATUS_union_tag { /* Normal-to-Fault Freeze Status */
  vuint32_t R;
  struct {
    vuint32_t NFFS:8;                  /* Normal-to-Fault Freeze Status */
    vuint32_t NF_SRC:2;                /* Normal-to-Fault Source */
    vuint32_t _unused_10:22;           /* Reserved */
  } B;
} FCCU_N2FF_STATUS_tag;

typedef union FCCU_F2AF_STATUS_union_tag { /* Fault-to-Alarm Freeze Status */
  vuint32_t R;
  struct {
    vuint32_t FAFS:9;                  /* Fault-to-Alarm Freeze Status */
    vuint32_t _unused_9:23;            /* Reserved */
  } B;
} FCCU_F2AF_STATUS_tag;

typedef union FCCU_NCFF_union_tag {    /* Non-critical Fault Fake */
  vuint32_t R;
  struct {
    vuint32_t FNCFC:7;                 /* FNCFC */
    vuint32_t _unused_7:25;            /* Reserved */
  } B;
} FCCU_NCFF_tag;

typedef union FCCU_IRQ_STAT_union_tag { /* IRQ Status */
  vuint32_t R;
  struct {
    vuint32_t CFG_TO_STAT:1;           /* Configuration-State Timeout Status */
    vuint32_t ALRM_STAT:1;             /* Alarm Interrupt Status */
    vuint32_t NMI_STAT:1;              /* NMI Interrupt Status */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:27;            /* Reserved */
  } B;
} FCCU_IRQ_STAT_tag;

typedef union FCCU_IRQ_EN_union_tag {  /* IRQ Enable */
  vuint32_t R;
  struct {
    vuint32_t CFG_TO_IEN:1;            /* Configuration-State Timeout Interrupt Enable */
    vuint32_t _unused_1:2;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:28;            /* Reserved */
  } B;
} FCCU_IRQ_EN_tag;

typedef union FCCU_TRANS_LOCK_union_tag { /* Transient Configuration Lock */
  vuint32_t R;
  struct {
    vuint32_t TRANSKEY:9;              /* Transient Configuration Lock */
    vuint32_t _unused_9:23;            /* Reserved */
  } B;
} FCCU_TRANS_LOCK_tag;

typedef union FCCU_PERMNT_LOCK_union_tag { /* Permanent Configuration Lock */
  vuint32_t R;
  struct {
    vuint32_t PERMNTKEY:9;             /* Permanent Configuration Lock */
    vuint32_t _unused_9:23;            /* Reserved */
  } B;
} FCCU_PERMNT_LOCK_tag;

typedef union FCCU_DELTA_T_union_tag { /* Delta T */
  vuint32_t R;
  struct {
    vuint32_t DELTA_T:14;              /* Minimum Fault-Output (EOUT) Timer Interval */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t _unused_16:14;           /* Reserved */
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} FCCU_DELTA_T_tag;

typedef union FCCU_IRQ_ALARM_EN_union_tag { /* Non-critical Alarm-State Interrupt-Request Enable */
  vuint32_t R;
  struct {
    vuint32_t IRQEN0:1;                /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN1:1;                /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN2:1;                /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN3:1;                /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN4:1;                /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN5:1;                /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN6:1;                /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN7:1;                /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN8:1;                /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN9:1;                /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN10:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN11:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN12:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN13:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN14:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN15:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN16:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN17:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN18:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN19:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN20:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN21:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN22:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN23:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN24:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN25:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN26:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN27:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN28:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN29:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN30:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN31:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
  } B;
} FCCU_IRQ_ALARM_EN_tag;

typedef union FCCU_NMI_EN_union_tag {  /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable */
  vuint32_t R;
  struct {
    vuint32_t NMIEN0:1;                /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN1:1;                /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN2:1;                /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN3:1;                /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN4:1;                /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN5:1;                /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN6:1;                /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN7:1;                /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN8:1;                /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN9:1;                /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN10:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN11:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN12:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN13:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN14:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN15:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN16:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN17:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN18:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN19:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN20:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN21:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN22:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN23:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN24:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN25:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN26:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN27:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN28:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN29:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN30:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN31:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
  } B;
} FCCU_NMI_EN_tag;

typedef union FCCU_EOUT_SIG_EN_union_tag { /* Non-critical Fault-State EOUT Signaling Enable */
  vuint32_t R;
  struct {
    vuint32_t EOUTEN0:1;               /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN1:1;               /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN2:1;               /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN3:1;               /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN4:1;               /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN5:1;               /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN6:1;               /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN7:1;               /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN8:1;               /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN9:1;               /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN10:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN11:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN12:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN13:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN14:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN15:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN16:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN17:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN18:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN19:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN20:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN21:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN22:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN23:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN24:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN25:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN26:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN27:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN28:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN29:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN30:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN31:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
  } B;
} FCCU_EOUT_SIG_EN_tag;

typedef union FCCU_TMR_ALARM_union_tag { /* Alarm-State Timer */
  vuint32_t R;
  struct {
    vuint32_t COUNT:32;                /* Alarm-State Timer Count */
  } B;
} FCCU_TMR_ALARM_tag;

typedef union FCCU_TMR_CFG_union_tag { /* Configuration-State Timer */
  vuint32_t R;
  struct {
    vuint32_t COUNT:32;                /* Configuration-State Timer Count */
  } B;
} FCCU_TMR_CFG_tag;

typedef union FCCU_TMR_ETMR_union_tag { /* Fault-Output Timer */
  vuint32_t R;
  struct {
    vuint32_t COUNT:32;                /* Fault-Output Timer Count */
  } B;
} FCCU_TMR_ETMR_tag;

struct FCCU_tag {
  FCCU_CTRL_tag CTRL;                  /* Control */
  FCCU_CTRLK_tag CTRLK;                /* Control Key */
  FCCU_CFG_tag CFG;                    /* Configuration */
  uint8_t FCCU_reserved0[16];
  FCCU_NCF_CFG_tag NCF_CFG[4];         /* Non-critical Fault Configuration */
  uint8_t FCCU_reserved1[32];
  FCCU_NCFS_CFG_tag NCFS_CFG[8];       /* Non-critical Fault-State Configuration */
  uint8_t FCCU_reserved2[20];
  FCCU_NCF_S_tag NCF_S[4];             /* Non-critical Fault Status */
  FCCU_NCFK_tag NCFK;                  /* Non-critical Fault Key */
  FCCU_NCF_E_tag NCF_E[4];             /* Non-critical Fault Enable */
  FCCU_NCF_TOE_tag NCF_TOE[4];         /* Non-critical-Fault Alarm-State Timeout Enable */
  FCCU_NCF_TO_tag NCF_TO;              /* Non-critical-Fault Alarm-State Timeout Interval */
  FCCU_CFG_TO_tag CFG_TO;              /* Configuration-State Timeout Interval */
  FCCU_EINOUT_tag EINOUT;              /* IO Control */
  FCCU_STAT_tag STAT;                  /* Status */
  FCCU_N2AF_STATUS_tag N2AF_STATUS;    /* Normal-to-Alarm Freeze Status */
  FCCU_A2FF_STATUS_tag A2FF_STATUS;    /* Alarm-to-Fault Freeze Status */
  FCCU_N2FF_STATUS_tag N2FF_STATUS;    /* Normal-to-Fault Freeze Status */
  FCCU_F2AF_STATUS_tag F2AF_STATUS;    /* Fault-to-Alarm Freeze Status */
  uint8_t FCCU_reserved3[8];
  FCCU_NCFF_tag NCFF;                  /* Non-critical Fault Fake */
  FCCU_IRQ_STAT_tag IRQ_STAT;          /* IRQ Status */
  FCCU_IRQ_EN_tag IRQ_EN;              /* IRQ Enable */
  uint8_t FCCU_reserved4[8];
  FCCU_TRANS_LOCK_tag TRANS_LOCK;      /* Transient Configuration Lock */
  FCCU_PERMNT_LOCK_tag PERMNT_LOCK;    /* Permanent Configuration Lock */
  FCCU_DELTA_T_tag DELTA_T;            /* Delta T */
  FCCU_IRQ_ALARM_EN_tag IRQ_ALARM_EN[4]; /* Non-critical Alarm-State Interrupt-Request Enable */
  FCCU_NMI_EN_tag NMI_EN[4];           /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable */
  FCCU_EOUT_SIG_EN_tag EOUT_SIG_EN[4]; /* Non-critical Fault-State EOUT Signaling Enable */
  FCCU_TMR_ALARM_tag TMR_ALARM;        /* Alarm-State Timer */
  uint8_t FCCU_reserved5[4];
  FCCU_TMR_CFG_tag TMR_CFG;            /* Configuration-State Timer */
  FCCU_TMR_ETMR_tag TMR_ETMR;          /* Fault-Output Timer */
};


/* ============================================================================
   =============================== Module: FLEXCAN ============================
   ============================================================================ */

typedef union FLEXCAN_MCR_union_tag {  /* Module Configuration register */
  vuint32_t R;
  struct {
    vuint32_t MAXMB:7;                 /* Number Of The Last Message Buffer */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t IDAM:2;                  /* ID Acceptance Mode */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t FDEN:1;                  /* CAN FD operation enable */
    vuint32_t AEN:1;                   /* Abort Enable */
    vuint32_t LPRIOEN:1;               /* Local Priority Enable */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t DMA:1;                   /* DMA Enable */
    vuint32_t IRMQ:1;                  /* Individual Rx Masking And Queue Enable */
    vuint32_t SRXDIS:1;                /* Self Reception Disable */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t LPMACK:1;                /* Low-Power Mode Acknowledge */
    vuint32_t WRNEN:1;                 /* Warning Interrupt Enable */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t FRZACK:1;                /* Freeze Mode Acknowledge */
    vuint32_t SOFTRST:1;               /* Soft Reset */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t NOTRDY:1;                /* FlexCAN Not Ready */
    vuint32_t HALT:1;                  /* Halt FlexCAN */
    vuint32_t RFEN:1;                  /* Legacy Rx FIFO Enable */
    vuint32_t FRZ:1;                   /* Freeze Enable */
    vuint32_t MDIS:1;                  /* Module Disable */
  } B;
} FLEXCAN_MCR_tag;

typedef union FLEXCAN_CTRL1_union_tag { /* Control 1 register */
  vuint32_t R;
  struct {
    vuint32_t PROPSEG:3;               /* Propagation Segment */
    vuint32_t LOM:1;                   /* Listen-Only Mode */
    vuint32_t LBUF:1;                  /* Lowest Buffer Transmitted First */
    vuint32_t TSYN:1;                  /* Timer Sync */
    vuint32_t BOFFREC:1;               /* Bus Off Recovery */
    vuint32_t SMP:1;                   /* CAN Bit Sampling */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t RWRNMSK:1;               /* Rx Warning Interrupt Mask */
    vuint32_t TWRNMSK:1;               /* Tx Warning Interrupt Mask */
    vuint32_t LPB:1;                   /* Loop Back Mode */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t ERRMSK:1;                /* Error Interrupt Mask */
    vuint32_t BOFFMSK:1;               /* Bus Off Interrupt Mask */
    vuint32_t PSEG2:3;                 /* Phase Segment 2 */
    vuint32_t PSEG1:3;                 /* Phase Segment 1 */
    vuint32_t RJW:2;                   /* Resync Jump Width */
    vuint32_t PRESDIV:8;               /* Prescaler Division Factor */
  } B;
} FLEXCAN_CTRL1_tag;

typedef union FLEXCAN_TIMER_union_tag { /* Free Running Timer */
  vuint32_t R;
  struct {
    vuint32_t TIMER:16;                /* Timer Value */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} FLEXCAN_TIMER_tag;

typedef union FLEXCAN_RXMGMASK_union_tag { /* Rx Mailboxes Global Mask register */
  vuint32_t R;
  struct {
    vuint32_t MG:32;                   /* Rx Mailboxes Global Mask Bits */
  } B;
} FLEXCAN_RXMGMASK_tag;

typedef union FLEXCAN_RX14MASK_union_tag { /* Rx 14 Mask register */
  vuint32_t R;
  struct {
    vuint32_t RX14M:32;                /* Rx Buffer 14 Mask Bits */
  } B;
} FLEXCAN_RX14MASK_tag;

typedef union FLEXCAN_RX15MASK_union_tag { /* Rx 15 Mask register */
  vuint32_t R;
  struct {
    vuint32_t RX15M:32;                /* Rx Buffer 15 Mask Bits */
  } B;
} FLEXCAN_RX15MASK_tag;

typedef union FLEXCAN_ECR_union_tag {  /* Error Counter */
  vuint32_t R;
  struct {
    vuint32_t TXERRCNT:8;              /* Transmit Error Counter */
    vuint32_t RXERRCNT:8;              /* Receive Error Counter */
    vuint32_t TXERRCNT_FAST:8;         /* Transmit Error Counter for fast bits */
    vuint32_t RXERRCNT_FAST:8;         /* Receive Error Counter for fast bits */
  } B;
} FLEXCAN_ECR_tag;

typedef union FLEXCAN_ESR1_union_tag { /* Error and Status 1 register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t ERRINT:1;                /* Error Interrupt */
    vuint32_t BOFFINT:1;               /* Bus Off Interrupt */
    vuint32_t RX:1;                    /* FlexCAN In Reception */
    vuint32_t FLTCONF:2;               /* Fault Confinement State */
    vuint32_t TX:1;                    /* FlexCAN In Transmission */
    vuint32_t IDLE:1;                  /* IDLE */
    vuint32_t RXWRN:1;                 /* Rx Error Warning */
    vuint32_t TXWRN:1;                 /* TX Error Warning */
    vuint32_t STFERR:1;                /* Stuffing Error */
    vuint32_t FRMERR:1;                /* Form Error */
    vuint32_t CRCERR:1;                /* Cyclic Redundancy Check Error */
    vuint32_t ACKERR:1;                /* Acknowledge Error */
    vuint32_t BIT0ERR:1;               /* Bit0 Error */
    vuint32_t BIT1ERR:1;               /* Bit1 Error */
    vuint32_t RWRNINT:1;               /* Rx Warning Interrupt Flag */
    vuint32_t TWRNINT:1;               /* Tx Warning Interrupt Flag */
    vuint32_t SYNCH:1;                 /* CAN Synchronization Status */
    vuint32_t BOFFDONEINT:1;           /* Bus Off Done Interrupt */
    vuint32_t ERRINT_FAST:1;           /* Error interrupt for errors detected in Data Phase of CAN FD frames with BRS bit set */
    vuint32_t ERROVR:1;                /* Error Overrun */
    vuint32_t _unused_22:4;            /* Reserved */
    vuint32_t STFERR_FAST:1;           /* Stuffing Error in the Data Phase of CAN FD frames with the BRS bit set */
    vuint32_t FRMERR_FAST:1;           /* Form Error in the Data Phase of CAN FD frames with the BRS bit set */
    vuint32_t CRCERR_FAST:1;           /* Cyclic Redundancy Check Error in the CRC field of CAN FD frames with the BRS bit set */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t BIT0ERR_FAST:1;          /* Bit0 Error in the Data Phase of CAN FD frames with the BRS bit set */
    vuint32_t BIT1ERR_FAST:1;          /* Bit1 Error in the Data Phase of CAN FD frames with the BRS bit set */
  } B;
} FLEXCAN_ESR1_tag;

typedef union FLEXCAN_IMASK2_union_tag { /* Interrupt Masks 2 register */
  vuint32_t R;
  struct {
    vuint32_t BUF63TO32M:32;           /* Buffer MB i Mask */
  } B;
} FLEXCAN_IMASK2_tag;

typedef union FLEXCAN_IMASK1_union_tag { /* Interrupt Masks 1 register */
  vuint32_t R;
  struct {
    vuint32_t BUF31TO0M:32;            /* Buffer MB i Mask */
  } B;
} FLEXCAN_IMASK1_tag;

typedef union FLEXCAN_IFLAG2_union_tag { /* Interrupt Flags 2 register */
  vuint32_t R;
  struct {
    vuint32_t BUF63TO32I:32;           /* Buffer MB i Interrupt */
  } B;
} FLEXCAN_IFLAG2_tag;

typedef union FLEXCAN_IFLAG1_union_tag { /* Interrupt Flags 1 register */
  vuint32_t R;
  struct {
    vuint32_t BUF0I:1;                 /* Buffer MB0 Interrupt Or Clear Legacy FIFO bit */
    vuint32_t BUF4TO1I:4;              /* Buffer MB i Interrupt Or Reserved */
    vuint32_t BUF5I:1;                 /* Buffer MB5 Interrupt Or Frames available in Legacy Rx FIFO */
    vuint32_t BUF6I:1;                 /* Buffer MB6 Interrupt Or Legacy Rx FIFO Warning */
    vuint32_t BUF7I:1;                 /* Buffer MB7 Interrupt Or Legacy Rx FIFO Overflow */
    vuint32_t BUF31TO8I:24;            /* Buffer MBi Interrupt */
  } B;
} FLEXCAN_IFLAG1_tag;

typedef union FLEXCAN_CTRL2_union_tag { /* Control 2 register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t TSTAMPCAP:2;             /* Time Stamp Capture Point */
    vuint32_t MBTSBASE:2;              /* Message Buffer Time Stamp Base */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t EDFLTDIS:1;              /* Edge Filter Disable */
    vuint32_t ISOCANFDEN:1;            /* ISO CAN FD Enable */
    vuint32_t BTE:1;                   /* Bit Timing Expansion enable */
    vuint32_t PREXCEN:1;               /* Protocol Exception Enable */
    vuint32_t TIMER_SRC:1;             /* Timer Source */
    vuint32_t EACEN:1;                 /* Entire Frame Arbitration Field Comparison Enable For Rx Mailboxes */
    vuint32_t RRS:1;                   /* Remote Request Storing */
    vuint32_t MRP:1;                   /* Mailboxes Reception Priority */
    vuint32_t TASD:5;                  /* Tx Arbitration Start Delay */
    vuint32_t RFFN:4;                  /* Number Of Legacy Rx FIFO Filters */
    vuint32_t WRMFRZ:1;                /* Write-Access To Memory In Freeze Mode */
    vuint32_t ECRWRE:1;                /* Error-correction Configuration Register Write Enable */
    vuint32_t BOFFDONEMSK:1;           /* Bus Off Done Interrupt Mask */
    vuint32_t ERRMSK_FAST:1;           /* Error Interrupt Mask for errors detected in the data phase of fast CAN FD frames */
  } B;
} FLEXCAN_CTRL2_tag;

typedef union FLEXCAN_ESR2_union_tag { /* Error and Status 2 register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:13;            /* Reserved */
    vuint32_t IMB:1;                   /* Inactive Mailbox */
    vuint32_t VPS:1;                   /* Valid Priority Status */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t LPTM:7;                  /* Lowest Priority Tx Mailbox */
    vuint32_t _unused_23:9;            /* Reserved */
  } B;
} FLEXCAN_ESR2_tag;

typedef union FLEXCAN_CRCR_union_tag { /* CRC register */
  vuint32_t R;
  struct {
    vuint32_t TXCRC:15;                /* Transmitted CRC value */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t MBCRC:7;                 /* CRC Mailbox */
    vuint32_t _unused_23:9;            /* Reserved */
  } B;
} FLEXCAN_CRCR_tag;

typedef union FLEXCAN_RXFGMASK_union_tag { /* Legacy Rx FIFO Global Mask register */
  vuint32_t R;
  struct {
    vuint32_t FGM:32;                  /* Legacy Rx FIFO Global Mask Bits */
  } B;
} FLEXCAN_RXFGMASK_tag;

typedef union FLEXCAN_RXFIR_union_tag { /* Legacy Rx FIFO Information register */
  vuint32_t R;
  struct {
    vuint32_t IDHIT:9;                 /* Identifier Acceptance Filter Hit Indicator */
    vuint32_t _unused_9:23;            /* Reserved */
  } B;
} FLEXCAN_RXFIR_tag;

typedef union FLEXCAN_CBT_union_tag {  /* CAN Bit Timing register */
  vuint32_t R;
  struct {
    vuint32_t EPSEG2:5;                /* Extended Phase Segment 2 */
    vuint32_t EPSEG1:5;                /* Extended Phase Segment 1 */
    vuint32_t EPROPSEG:6;              /* Extended Propagation Segment */
    vuint32_t ERJW:5;                  /* Extended Resync Jump Width */
    vuint32_t EPRESDIV:10;             /* Extended Prescaler Division Factor */
    vuint32_t BTF:1;                   /* Bit Timing Format Enable */
  } B;
} FLEXCAN_CBT_tag;

typedef union FLEXCAN_IMASK4_union_tag { /* Interrupt Masks 4 register */
  vuint32_t R;
  struct {
    vuint32_t BUF127TO96M:32;          /* Buffer MB i Mask */
  } B;
} FLEXCAN_IMASK4_tag;

typedef union FLEXCAN_IMASK3_union_tag { /* Interrupt Masks 3 register */
  vuint32_t R;
  struct {
    vuint32_t BUF95TO64M:32;           /* Buffer MB i Mask */
  } B;
} FLEXCAN_IMASK3_tag;

typedef union FLEXCAN_IFLAG4_union_tag { /* Interrupt Flags 4 register */
  vuint32_t R;
  struct {
    vuint32_t BUF127TO96:32;           /* Buffer MB i Interrupt */
  } B;
} FLEXCAN_IFLAG4_tag;

typedef union FLEXCAN_IFLAG3_union_tag { /* Interrupt Flags 3 register */
  vuint32_t R;
  struct {
    vuint32_t BUF95TO64:32;            /* Buffer MB i Interrupt */
  } B;
} FLEXCAN_IFLAG3_tag;

typedef union FLEXCAN_RXIMR_union_tag { /* Rx Individual Mask registers */
  vuint32_t R;
  struct {
    vuint32_t MI:32;                   /* Individual Mask Bits */
  } B;
} FLEXCAN_RXIMR_tag;

typedef union FLEXCAN_MECR_union_tag { /* Memory Error Control register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:7;             /* Reserved */
    vuint32_t NCEFAFRZ:1;              /* Non-Correctable Errors In FlexCAN Access Put Device In Freeze Mode */
    vuint32_t ECCDIS:1;                /* Error Correction Disable */
    vuint32_t RERRDIS:1;               /* Error Report Disable */
    vuint32_t _unused_10:3;            /* Reserved */
    vuint32_t EXTERRIE:1;              /* Extended Error Injection Enable */
    vuint32_t FAERRIE:1;               /* FlexCAN Access Error Injection Enable */
    vuint32_t HAERRIE:1;               /* Host Access Error Injection Enable */
    vuint32_t CEI_MSK:1;               /* Correctable Errors Interrupt Mask */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t FANCEI_MSK:1;            /* FlexCAN Access With Non-Correctable Errors Interrupt Mask */
    vuint32_t HANCEI_MSK:1;            /* Host Access With Non-Correctable Errors Interrupt Mask */
    vuint32_t _unused_20:11;           /* Reserved */
    vuint32_t ECRWRDIS:1;              /* Error Configuration Register Write Disable */
  } B;
} FLEXCAN_MECR_tag;

typedef union FLEXCAN_ERRIAR_union_tag { /* Error Injection Address register */
  vuint32_t R;
  struct {
    vuint32_t INJADDR_L:2;             /* Error Injection Address Low */
    vuint32_t INJADDR_H:12;            /* Error Injection Address High */
    vuint32_t _unused_14:18;           /* Reserved */
  } B;
} FLEXCAN_ERRIAR_tag;

typedef union FLEXCAN_ERRIDPR_union_tag { /* Error Injection Data Pattern register */
  vuint32_t R;
  struct {
    vuint32_t DFLIP:32;                /* Data flip pattern */
  } B;
} FLEXCAN_ERRIDPR_tag;

typedef union FLEXCAN_ERRIPPR_union_tag { /* Error Injection Parity Pattern register */
  vuint32_t R;
  struct {
    vuint32_t PFLIP0:5;                /* Parity Flip Pattern For Byte 0 (Least Significant) */
    vuint32_t _unused_5:3;             /* Reserved */
    vuint32_t PFLIP1:5;                /* Parity Flip Pattern For Byte 1 */
    vuint32_t _unused_13:3;            /* Reserved */
    vuint32_t PFLIP2:5;                /* Parity Flip Pattern For Byte 2 */
    vuint32_t _unused_21:3;            /* Reserved */
    vuint32_t PFLIP3:5;                /* Parity Flip Pattern For Byte 3 (most significant) */
    vuint32_t _unused_29:3;            /* Reserved */
  } B;
} FLEXCAN_ERRIPPR_tag;

typedef union FLEXCAN_RERRAR_union_tag { /* Error Report Address register */
  vuint32_t R;
  struct {
    vuint32_t ERRADDR:14;              /* Address Where Error Detected */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t SAID:3;                  /* SAID */
    vuint32_t _unused_19:5;            /* Reserved */
    vuint32_t NCE:1;                   /* Non-Correctable Error */
    vuint32_t _unused_25:7;            /* Reserved */
  } B;
} FLEXCAN_RERRAR_tag;

typedef union FLEXCAN_RERRDR_union_tag { /* Error Report Data register */
  vuint32_t R;
  struct {
    vuint32_t RDATA:32;                /* Raw data word read from memory with error */
  } B;
} FLEXCAN_RERRDR_tag;

typedef union FLEXCAN_RERRSYNR_union_tag { /* Error Report Syndrome register */
  vuint32_t R;
  struct {
    vuint32_t SYND0:5;                 /* Error Syndrome For Byte 0 (least significant) */
    vuint32_t _unused_5:2;             /* Reserved */
    vuint32_t BE0:1;                   /* Byte Enabled For Byte 0 (least significant) */
    vuint32_t SYND1:5;                 /* Error Syndrome for Byte 1 */
    vuint32_t _unused_13:2;            /* Reserved */
    vuint32_t BE1:1;                   /* Byte Enabled For Byte 1 */
    vuint32_t SYND2:5;                 /* Error Syndrome For Byte 2 */
    vuint32_t _unused_21:2;            /* Reserved */
    vuint32_t BE2:1;                   /* Byte Enabled For Byte 2 */
    vuint32_t SYND3:5;                 /* Error Syndrome For Byte 3 (most significant) */
    vuint32_t _unused_29:2;            /* Reserved */
    vuint32_t BE3:1;                   /* Byte Enabled For Byte 3 (most significant) */
  } B;
} FLEXCAN_RERRSYNR_tag;

typedef union FLEXCAN_ERRSR_union_tag { /* Error Status register */
  vuint32_t R;
  struct {
    vuint32_t CEIOF:1;                 /* Correctable Error Interrupt Overrun Flag */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t FANCEIOF:1;              /* FlexCAN Access With Non-Correctable Error Interrupt Overrun Flag */
    vuint32_t HANCEIOF:1;              /* Host Access With Non-Correctable Error Interrupt Overrun Flag */
    vuint32_t _unused_4:12;            /* Reserved */
    vuint32_t CEIF:1;                  /* Correctable Error Interrupt Flag */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t FANCEIF:1;               /* FlexCAN Access With Non-Correctable Error Interrupt Flag */
    vuint32_t HANCEIF:1;               /* Host Access With Non-Correctable Error Interrupt Flag */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} FLEXCAN_ERRSR_tag;

typedef union FLEXCAN_EPRS_union_tag { /* Enhanced CAN Bit Timing Prescalers */
  vuint32_t R;
  struct {
    vuint32_t ENPRESDIV:10;            /* Extended Nominal Prescaler Division Factor */
    vuint32_t _unused_10:6;            /* Reserved. */
    vuint32_t EDPRESDIV:10;            /* Extended Data Phase Prescaler Division Factor */
    vuint32_t _unused_26:6;
  } B;
} FLEXCAN_EPRS_tag;

typedef union FLEXCAN_ENCBT_union_tag { /* Enhanced Nominal CAN Bit Timing */
  vuint32_t R;
  struct {
    vuint32_t NTSEG1:8;                /* Nominal Time Segment 1 */
    vuint32_t _unused_8:4;
    vuint32_t NTSEG2:7;                /* Nominal Time Segment 2 */
    vuint32_t _unused_19:3;
    vuint32_t NRJW:7;                  /* Nominal Resynchronization Jump Width */
    vuint32_t _unused_29:3;
  } B;
} FLEXCAN_ENCBT_tag;

typedef union FLEXCAN_EDCBT_union_tag { /* Enhanced Data Phase CAN bit Timing */
  vuint32_t R;
  struct {
    vuint32_t DTSEG1:5;                /* Data Phase Segment 1 */
    vuint32_t _unused_5:7;
    vuint32_t DTSEG2:4;                /* Data Phase Time Segment 2 */
    vuint32_t _unused_16:6;
    vuint32_t DRJW:4;                  /* Data Phase Resynchronization Jump Width */
    vuint32_t _unused_26:6;
  } B;
} FLEXCAN_EDCBT_tag;

typedef union FLEXCAN_ETDC_union_tag { /* Enhanced Transceiver Delay Compensation */
  vuint32_t R;
  struct {
    vuint32_t ETDCVAL:8;               /* Enhanced Transceiver Delay Compensation Value */
    vuint32_t _unused_8:7;
    vuint32_t ETDCFAIL:1;              /* Transceiver Delay Compensation Fail */
    vuint32_t ETDCOFF:7;               /* Enhanced Transceiver Delay Compensation Offset */
    vuint32_t _unused_23:7;
    vuint32_t TDMDIS:1;                /* Transceiver Delay Measurement Disable */
    vuint32_t ETDCEN:1;                /* Transceiver Delay Compensation Enable */
  } B;
} FLEXCAN_ETDC_tag;

typedef union FLEXCAN_FDCTRL_union_tag { /* CAN FD Control register */
  vuint32_t R;
  struct {
    vuint32_t TDCVAL:6;                /* Transceiver Delay Compensation Value */
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t TDCOFF:5;                /* Transceiver Delay Compensation Offset */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t TDCFAIL:1;               /* Transceiver Delay Compensation Fail */
    vuint32_t TDCEN:1;                 /* Transceiver Delay Compensation Enable */
    vuint32_t MBDSR0:2;                /* Message Buffer Data Size for Region 0 */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t MBDSR1:2;                /* Message Buffer Data Size for Region 1 */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t MBDSR2:2;                /* Message Buffer Data Size for Region 2 */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t MBDSR3:2;                /* Message Buffer Data Size for Region 3 */
    vuint32_t _unused_27:4;            /* Reserved */
    vuint32_t FDRATE:1;                /* Bit Rate Switch Enable */
  } B;
} FLEXCAN_FDCTRL_tag;

typedef union FLEXCAN_FDCBT_union_tag { /* CAN FD Bit Timing register */
  vuint32_t R;
  struct {
    vuint32_t FPSEG2:3;                /* Fast Phase Segment 2 */
    vuint32_t _unused_3:2;             /* Reserved */
    vuint32_t FPSEG1:3;                /* Fast Phase Segment 1 */
    vuint32_t _unused_8:2;             /* Reserved */
    vuint32_t FPROPSEG:5;              /* Fast Propagation Segment */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t FRJW:3;                  /* Fast Resync Jump Width */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t FPRESDIV:10;             /* Fast Prescaler Division Factor */
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} FLEXCAN_FDCBT_tag;

typedef union FLEXCAN_FDCRC_union_tag { /* CAN FD CRC register */
  vuint32_t R;
  struct {
    vuint32_t FD_TXCRC:21;             /* Extended Transmitted CRC value */
    vuint32_t _unused_21:3;            /* Reserved */
    vuint32_t FD_MBCRC:7;              /* CRC Mailbox Number for FD_TXCRC */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} FLEXCAN_FDCRC_tag;

typedef union FLEXCAN_ERFCR_union_tag { /* Enhanced Rx FIFO Control register */
  vuint32_t R;
  struct {
    vuint32_t ERFWM:5;                 /* Enhanced Rx FIFO Watermark */
    vuint32_t _unused_5:3;             /* Reserved. */
    vuint32_t NFE:6;                   /* Number of Enhanced Rx FIFO Filter Elements */
    vuint32_t _unused_14:2;            /* Reserved. */
    vuint32_t NEXIF:7;                 /* Number of Extended ID Filter Elements */
    vuint32_t _unused_23:3;            /* Reserved. */
    vuint32_t DMALW:5;                 /* DMA Last Word */
    vuint32_t ERFEN:1;                 /* Enhanced Rx FIFO enable */
  } B;
} FLEXCAN_ERFCR_tag;

typedef union FLEXCAN_ERFIER_union_tag { /* Enhanced Rx FIFO Interrupt Enable register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:28;            /* Reserved */
    vuint32_t ERFDAIE:1;               /* Enhanced Rx FIFO Data Available Interrupt Enable */
    vuint32_t ERFWMIIE:1;              /* Enhanced Rx FIFO Watermark Indication Interrupt Enable */
    vuint32_t ERFOVFIE:1;              /* Enhanced Rx FIFO Overflow Interrupt Enable */
    vuint32_t ERFUFWIE:1;              /* Enhanced Rx FIFO Underflow Interrupt Enable */
  } B;
} FLEXCAN_ERFIER_tag;

typedef union FLEXCAN_ERFSR_union_tag { /* Enhanced Rx FIFO Status register */
  vuint32_t R;
  struct {
    vuint32_t ERFEL:6;                 /* Enhanced Rx FIFO Elements */
    vuint32_t _unused_6:10;            /* Reserved */
    vuint32_t ERFF:1;                  /* Enhanced Rx FIFO full */
    vuint32_t ERFE:1;                  /* Enhanced Rx FIFO empty */
    vuint32_t _unused_18:9;            /* Reserved */
    vuint32_t ERFCLR:1;                /* Enhanced Rx FIFO Clear */
    vuint32_t ERFDA:1;                 /* Enhanced Rx FIFO Data Available */
    vuint32_t ERFWMI:1;                /* Enhanced Rx FIFO Watermark Indication */
    vuint32_t ERFOVF:1;                /* Enhanced Rx FIFO Overflow */
    vuint32_t ERFUFW:1;                /* Enhanced Rx FIFO Underflow */
  } B;
} FLEXCAN_ERFSR_tag;

typedef union FLEXCAN_HR_TIME_STAMP_union_tag { /* High Resolution Time Stamp */
  vuint32_t R;
  struct {
    vuint32_t TS:32;                   /* High Resolution Time Stamp */
  } B;
} FLEXCAN_HR_TIME_STAMP_tag;

typedef union FLEXCAN_ERFFEL_union_tag { /* Enhanced Rx FIFO Filter Element */
  vuint32_t R;
  struct {
    vuint32_t FEL:32;                  /* Filter Element Bits */
  } B;
} FLEXCAN_ERFFEL_tag;

struct FLEXCAN_tag {
  FLEXCAN_MCR_tag MCR;                 /* Module Configuration register */
  FLEXCAN_CTRL1_tag CTRL1;             /* Control 1 register */
  FLEXCAN_TIMER_tag TIMER;             /* Free Running Timer */
  uint8_t FLEXCAN_reserved0[4];
  FLEXCAN_RXMGMASK_tag RXMGMASK;       /* Rx Mailboxes Global Mask register */
  FLEXCAN_RX14MASK_tag RX14MASK;       /* Rx 14 Mask register */
  FLEXCAN_RX15MASK_tag RX15MASK;       /* Rx 15 Mask register */
  FLEXCAN_ECR_tag ECR;                 /* Error Counter */
  FLEXCAN_ESR1_tag ESR1;               /* Error and Status 1 register */
  FLEXCAN_IMASK2_tag IMASK2;           /* Interrupt Masks 2 register */
  FLEXCAN_IMASK1_tag IMASK1;           /* Interrupt Masks 1 register */
  FLEXCAN_IFLAG2_tag IFLAG2;           /* Interrupt Flags 2 register */
  FLEXCAN_IFLAG1_tag IFLAG1;           /* Interrupt Flags 1 register */
  FLEXCAN_CTRL2_tag CTRL2;             /* Control 2 register */
  FLEXCAN_ESR2_tag ESR2;               /* Error and Status 2 register */
  uint8_t FLEXCAN_reserved1[8];
  FLEXCAN_CRCR_tag CRCR;               /* CRC register */
  FLEXCAN_RXFGMASK_tag RXFGMASK;       /* Legacy Rx FIFO Global Mask register */
  FLEXCAN_RXFIR_tag RXFIR;             /* Legacy Rx FIFO Information register */
  FLEXCAN_CBT_tag CBT;                 /* CAN Bit Timing register */
  uint8_t FLEXCAN_reserved2[20];
  FLEXCAN_IMASK4_tag IMASK4;           /* Interrupt Masks 4 register */
  FLEXCAN_IMASK3_tag IMASK3;           /* Interrupt Masks 3 register */
  FLEXCAN_IFLAG4_tag IFLAG4;           /* Interrupt Flags 4 register */
  FLEXCAN_IFLAG3_tag IFLAG3;           /* Interrupt Flags 3 register */
  uint8_t FLEXCAN_reserved3[2056];
  FLEXCAN_RXIMR_tag RXIMR[128];        /* Rx Individual Mask registers */
  uint8_t FLEXCAN_reserved4[96];
  FLEXCAN_MECR_tag MECR;               /* Memory Error Control register */
  FLEXCAN_ERRIAR_tag ERRIAR;           /* Error Injection Address register */
  FLEXCAN_ERRIDPR_tag ERRIDPR;         /* Error Injection Data Pattern register */
  FLEXCAN_ERRIPPR_tag ERRIPPR;         /* Error Injection Parity Pattern register */
  FLEXCAN_RERRAR_tag RERRAR;           /* Error Report Address register */
  FLEXCAN_RERRDR_tag RERRDR;           /* Error Report Data register */
  FLEXCAN_RERRSYNR_tag RERRSYNR;       /* Error Report Syndrome register */
  FLEXCAN_ERRSR_tag ERRSR;             /* Error Status register */
  uint8_t FLEXCAN_reserved5[240];
  FLEXCAN_EPRS_tag EPRS;               /* Enhanced CAN Bit Timing Prescalers */
  FLEXCAN_ENCBT_tag ENCBT;             /* Enhanced Nominal CAN Bit Timing */
  FLEXCAN_EDCBT_tag EDCBT;             /* Enhanced Data Phase CAN bit Timing */
  FLEXCAN_ETDC_tag ETDC;               /* Enhanced Transceiver Delay Compensation */
  FLEXCAN_FDCTRL_tag FDCTRL;           /* CAN FD Control register */
  FLEXCAN_FDCBT_tag FDCBT;             /* CAN FD Bit Timing register */
  FLEXCAN_FDCRC_tag FDCRC;             /* CAN FD CRC register */
  FLEXCAN_ERFCR_tag ERFCR;             /* Enhanced Rx FIFO Control register */
  FLEXCAN_ERFIER_tag ERFIER;           /* Enhanced Rx FIFO Interrupt Enable register */
  FLEXCAN_ERFSR_tag ERFSR;             /* Enhanced Rx FIFO Status register */
  uint8_t FLEXCAN_reserved6[24];
  FLEXCAN_HR_TIME_STAMP_tag HR_TIME_STAMP[128]; /* High Resolution Time Stamp */
  uint8_t FLEXCAN_reserved7[8656];
  FLEXCAN_ERFFEL_tag ERFFEL[128];      /* Enhanced Rx FIFO Filter Element */
};


/* ============================================================================
   =============================== Module: FLEXRAY ============================
   ============================================================================ */

typedef union FLEXRAY_MVR_union_tag {  /* Module Version Register */
  vuint16_t R;
  struct {
    vuint16_t PEVER:8;                 /* PE Version Number */
    vuint16_t CHIVER:8;                /* CHI Version Number */
  } B;
} FLEXRAY_MVR_tag;

typedef union FLEXRAY_MCR_union_tag {  /* Module Configuration Register */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:1;             /* Reserved */
    vuint16_t BITRATE:3;
    vuint16_t _unused_4:1;             /* Reserved */
    vuint16_t _unused_5:1;             /* Reserved */
    vuint16_t FAM:1;                   /* FIFO Address Mode */
    vuint16_t FUM:1;                   /* FIFO Update Mode */
    vuint16_t _unused_8:1;             /* Reserved bit, will not be changed. Application must not write any value different from the reset value. */
    vuint16_t ECCE:1;                  /* ECC Functionality Enable */
    vuint16_t SFFE:1;                  /* Synchronization Frame Filter Enable */
    vuint16_t CHA:1;                   /* Channel A Enable */
    vuint16_t CHB:1;                   /* Channel B Enable */
    vuint16_t SCM:1;                   /* Single Channel Device Mode */
    vuint16_t SBFF:1;                  /* System Bus Failure Freeze */
    vuint16_t MEN:1;                   /* Module Enable */
  } B;
} FLEXRAY_MCR_tag;

typedef union FLEXRAY_SYMBADHR_union_tag { /* System Memory Base Address High Register */
  vuint16_t R;
  struct {
    vuint16_t SMBA:16;                 /* System Memory Base Address high */
  } B;
} FLEXRAY_SYMBADHR_tag;

typedef union FLEXRAY_SYMBADLR_union_tag { /* System Memory Base Address Low Register */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:4;             /* Reserved */
    vuint16_t SMBA:12;                 /* System Memory Base Address low */
  } B;
} FLEXRAY_SYMBADLR_tag;

typedef union FLEXRAY_STBSCR_union_tag { /* Strobe Signal Control Register */
  vuint16_t R;
  struct {
    vuint16_t STBPSEL:2;               /* Strobe Port Select */
    vuint16_t _unused_2:2;             /* Reserved */
    vuint16_t ENB:1;                   /* Strobe Signal Enable */
    vuint16_t _unused_5:3;             /* Reserved */
    vuint16_t SEL:4;                   /* Strobe Signal Select */
    vuint16_t _unused_12:3;            /* Reserved */
    vuint16_t WMD:1;                   /* Write Mode */
  } B;
} FLEXRAY_STBSCR_tag;

typedef union FLEXRAY_MBDSR_union_tag { /* Message Buffer Data Size Register */
  vuint16_t R;
  struct {
    vuint16_t MBSEG1DS:7;              /* Message Buffer Segment 1 Data Size */
    vuint16_t _unused_7:1;             /* Reserved */
    vuint16_t MBSEG2DS:7;              /* Message Buffer Segment 2 Data Size */
    vuint16_t _unused_15:1;            /* Reserved */
  } B;
} FLEXRAY_MBDSR_tag;

typedef union FLEXRAY_MBSSUTR_union_tag { /* Message Buffer Segment Size and Utilization Register */
  vuint16_t R;
  struct {
    vuint16_t LAST_MB_UTIL:8;          /* Last Message Buffer Utilized */
    vuint16_t LAST_MB_SEG1:8;          /* Last Message Buffer In Segment 1 */
  } B;
} FLEXRAY_MBSSUTR_tag;

typedef union FLEXRAY_PEDRAR_union_tag { /* PE DRAM Access Register */
  vuint16_t R;
  struct {
    vuint16_t DAD:1;
    vuint16_t ADDR:11;
    vuint16_t INST:4;
  } B;
} FLEXRAY_PEDRAR_tag;

typedef union FLEXRAY_PEDRDR_union_tag { /* PE DRAM Data Register */
  vuint16_t R;
  struct {
    vuint16_t DATA:16;
  } B;
} FLEXRAY_PEDRDR_tag;

typedef union FLEXRAY_POCR_union_tag { /* Protocol Operation Control Register */
  vuint16_t R;
  struct {
    vuint16_t POCCMD:4;                /* Protocol Control Command */
    vuint16_t _unused_4:3;             /* Reserved */
    vuint16_t BSY_WMC:1;
    vuint16_t ERC_AP:2;                /* External Rate Correction Application */
    vuint16_t EOC_AP:2;                /* External Offset Correction Application */
    vuint16_t _unused_12:3;            /* Reserved */
    vuint16_t WME:1;                   /* Write Mode External Correction */
  } B;
} FLEXRAY_POCR_tag;

typedef union FLEXRAY_GIFER_union_tag { /* Global Interrupt Flag and Enable Register */
  vuint16_t R;
  struct {
    vuint16_t TBIE:1;                  /* Transmit Message Buffer Interrupt Enable */
    vuint16_t RBIE:1;                  /* Receive Message Buffer Interrupt Enable */
    vuint16_t FAFAIE:1;                /* Receive FIFO Channel A Almost Full Interrupt Enable */
    vuint16_t FAFBIE:1;                /* Receive FIFO Channel B Almost Full Interrupt Enable */
    vuint16_t WUPIE:1;                 /* Wakeup Interrupt Enable */
    vuint16_t CHIE:1;                  /* CHI Interrupt Enable */
    vuint16_t PRIE:1;                  /* Protocol Interrupt Enable */
    vuint16_t MIE:1;                   /* Module Interrupt Enable */
    vuint16_t TBIF:1;                  /* Transmit Message Buffer Interrupt Flag */
    vuint16_t RBIF:1;                  /* Receive Message Buffer Interrupt Flag */
    vuint16_t FAFAIF:1;                /* Receive FIFO Channel A Almost Full Interrupt Flag */
    vuint16_t FAFBIF:1;                /* Receive FIFO Channel B Almost Full Interrupt Flag */
    vuint16_t WUPIF:1;                 /* Wakeup Interrupt Flag */
    vuint16_t CHIF:1;                  /* CHI Interrupt Flag */
    vuint16_t PRIF:1;                  /* Protocol Interrupt Flag */
    vuint16_t MIF:1;                   /* Module Interrupt Flag */
  } B;
} FLEXRAY_GIFER_tag;

typedef union FLEXRAY_PIFR0_union_tag { /* Protocol Interrupt Flag Register 0 */
  vuint16_t R;
  struct {
    vuint16_t CYS_IF:1;                /* Cycle Start Interrupt Flag */
    vuint16_t TI1_IF:1;                /* Timer 1 Expired Interrupt Flag */
    vuint16_t TI2_IF:1;                /* Timer 2 Expired Interrupt Flag */
    vuint16_t TBVA_IF:1;               /* Transmission across boundary on channel A Interrupt Flag */
    vuint16_t TBVB_IF:1;               /* Transmission across boundary on channel B Interrupt Flag */
    vuint16_t LTXA_IF:1;               /* pLatestTx Violation on Channel A Interrupt Flag */
    vuint16_t LTXB_IF:1;               /* pLatestTx Violation on Channel B Interrupt Flag */
    vuint16_t MTX_IF:1;                /* Media Access Test Symbol Received Interrupt Flag */
    vuint16_t MXS_IF:1;                /* Max Sync Frames Detected Interrupt Flag */
    vuint16_t CCL_IF:1;                /* Clock Correction Limit Reached Interrupt Flag */
    vuint16_t MOC_IF:1;                /* Missing Offset Correction Interrupt Flag */
    vuint16_t MRC_IF:1;                /* Missing Rate Correction Interrupt Flag */
    vuint16_t CSA_IF:1;                /* Cold Start Abort Interrupt Flag */
    vuint16_t ILCF_IF:1;               /* Illegal Protocol Configuration Interrupt Flag */
    vuint16_t INTL_IF:1;               /* Internal Protocol Error Interrupt Flag */
    vuint16_t FATL_IF:1;               /* Fatal Protocol Error Interrupt Flag */
  } B;
} FLEXRAY_PIFR0_tag;

typedef union FLEXRAY_PIFR1_union_tag { /* Protocol Interrupt Flag Register 1 */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:4;             /* Reserved */
    vuint16_t ODT_IF:1;                /* Odd Cycle Table Written Interrupt Flag */
    vuint16_t EVT_IF:1;                /* Even Cycle Table Written Interrupt Flag */
    vuint16_t _unused_6:2;             /* Reserved */
    vuint16_t SSI0_IF:1;               /* Slot Status Counter Incremented Interrupt Flag */
    vuint16_t SSI1_IF:1;               /* Slot Status Counter Incremented Interrupt Flag */
    vuint16_t SSI2_IF:1;               /* Slot Status Counter Incremented Interrupt Flag */
    vuint16_t SSI3_IF:1;               /* Slot Status Counter Incremented Interrupt Flag */
    vuint16_t PSC_IF:1;                /* Protocol State Changed Interrupt Flag */
    vuint16_t PECF_IF:1;               /* Protocol Engine Communication Failure Interrupt Flag */
    vuint16_t IPC_IF:1;                /* Illegal Protocol Control Command Interrupt Flag */
    vuint16_t EMC_IF:1;                /* Error Mode Changed Interrupt Flag */
  } B;
} FLEXRAY_PIFR1_tag;

typedef union FLEXRAY_PIER0_union_tag { /* Protocol Interrupt Enable Register 0 */
  vuint16_t R;
  struct {
    vuint16_t CYS_IE:1;                /* Cycle Start Interrupt Enable */
    vuint16_t TI1_IE:1;                /* Timer 1 Expired Interrupt Enable */
    vuint16_t TI2_IE:1;                /* Timer 2 Expired Interrupt Enable */
    vuint16_t TBVA_IE:1;               /* Transmission across boundary on channel A Interrupt Enable */
    vuint16_t TBVB_IE:1;               /* Transmission across boundary on channel B Interrupt Enable */
    vuint16_t LTXA_IE:1;               /* pLatestTx Violation on Channel A Interrupt Enable */
    vuint16_t LTXB_IE:1;               /* pLatestTx Violation on Channel B Interrupt Enable */
    vuint16_t MTX_IE:1;                /* Media Access Test Symbol Received Interrupt Enable */
    vuint16_t MXS_IE:1;                /* Max Sync Frames Detected Interrupt Enable */
    vuint16_t CCL_IE:1;                /* Clock Correction Limit Reached Interrupt Enable */
    vuint16_t MOC_IE:1;                /* Missing Offset Correction Interrupt Enable */
    vuint16_t MRC_IE:1;                /* Missing Rate Correction Interrupt Enable */
    vuint16_t CSA_IE:1;                /* Cold Start Abort Interrupt Enable */
    vuint16_t ILCF_IE:1;               /* Illegal Protocol Configuration Interrupt Enable */
    vuint16_t INTL_IE:1;               /* Internal Protocol Error Interrupt Enable */
    vuint16_t FATL_IE:1;               /* Fatal Protocol Error Interrupt Enable */
  } B;
} FLEXRAY_PIER0_tag;

typedef union FLEXRAY_PIER1_union_tag { /* Protocol Interrupt Enable Register 1 */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:4;             /* Reserved */
    vuint16_t ODT_IE:1;                /* Odd Cycle Table Written Interrupt Enable */
    vuint16_t EVT_IE:1;                /* Even Cycle Table Written Interrupt Enable */
    vuint16_t _unused_6:2;             /* Reserved */
    vuint16_t SSI0_IE:1;               /* Slot Status Counter Incremented Interrupt Enable */
    vuint16_t SSI1_IE:1;               /* Slot Status Counter Incremented Interrupt Enable */
    vuint16_t SSI2_IE:1;               /* Slot Status Counter Incremented Interrupt Enable */
    vuint16_t SSI3_IE:1;               /* Slot Status Counter Incremented Interrupt Enable */
    vuint16_t PSC_IE:1;                /* Protocol State Changed Interrupt Enable */
    vuint16_t PECF_IE:1;               /* Protocol Engine Communication Failure Interrupt Enable */
    vuint16_t IPC_IE:1;                /* Illegal Protocol Control Command Interrupt Enable */
    vuint16_t EMC_IE:1;                /* Error Mode Changed Interrupt Enable */
  } B;
} FLEXRAY_PIER1_tag;

typedef union FLEXRAY_CHIERFR_union_tag { /* CHI Error Flag Register */
  vuint16_t R;
  struct {
    vuint16_t ILSA_EF:1;               /* Illegal System Bus Address Error Flag */
    vuint16_t NMF_EF:1;                /* Network Management Frame Error Flag */
    vuint16_t NML_EF:1;                /* Network Management Length Error Flag */
    vuint16_t SPL_EF:1;                /* Static Payload Length Error Flag */
    vuint16_t DPL_EF:1;                /* Dynamic Payload Length Error Flag */
    vuint16_t FID_EF:1;                /* Frame ID Error Flag */
    vuint16_t SBCF_EF:1;               /* System Bus Communication Failure Error Flag */
    vuint16_t _unused_7:1;             /* Reserved */
    vuint16_t LCK_EF:1;                /* Lock Error Flag */
    vuint16_t MBU_EF:1;                /* Message Buffer Utilization Error Flag */
    vuint16_t MBS_EF:1;                /* Message Buffer Search Error Flag */
    vuint16_t FOVA_EF:1;               /* Receive FIFO Overrun Channel A Error Flag */
    vuint16_t FOVB_EF:1;               /* Receive FIFO Overrun Channel B Error Flag */
    vuint16_t PCMI_EF:1;               /* Protocol Command Ignored Error Flag */
    vuint16_t FRLA_EF:1;               /* Frame Lost Channel A Error Flag */
    vuint16_t FRLB_EF:1;               /* Frame Lost Channel B Error Flag */
  } B;
} FLEXRAY_CHIERFR_tag;

typedef union FLEXRAY_MBIVEC_union_tag { /* Message Buffer Interrupt Vector Register */
  vuint16_t R;
  struct {
    vuint16_t RBIVEC:8;                /* Receive Buffer Interrupt Vector */
    vuint16_t TBIVEC:8;                /* Transmit Buffer Interrupt Vector */
  } B;
} FLEXRAY_MBIVEC_tag;

typedef union FLEXRAY_CASERCR_union_tag { /* Channel A Status Error Counter Register */
  vuint16_t R;
  struct {
    vuint16_t CHAERSCNT:16;            /* Channel A Status Error Counter */
  } B;
} FLEXRAY_CASERCR_tag;

typedef union FLEXRAY_CBSERCR_union_tag { /* Channel B Status Error Counter Register */
  vuint16_t R;
  struct {
    vuint16_t CHBERSCNT:16;            /* Channel B Status Error Counter */
  } B;
} FLEXRAY_CBSERCR_tag;

typedef union FLEXRAY_PSR0_union_tag { /* Protocol Status Register 0 */
  vuint16_t R;
  struct {
    vuint16_t WAKEUPSTATUS:3;          /* Wakeup Status */
    vuint16_t _unused_3:1;             /* Reserved */
    vuint16_t STARTUPSTATE:4;          /* Startup State */
    vuint16_t PROTSTATE:3;             /* Protocol State */
    vuint16_t _unused_11:1;            /* Reserved */
    vuint16_t SLOTMODE:2;              /* Slot Mode */
    vuint16_t ERRMODE:2;               /* Error Mode */
  } B;
} FLEXRAY_PSR0_tag;

typedef union FLEXRAY_PSR1_union_tag { /* Protocol Status Register 1 */
  vuint16_t R;
  struct {
    vuint16_t APTAC:5;                 /* Allow Passive to Active Counter */
    vuint16_t FRZ:1;                   /* Freeze Occurred */
    vuint16_t HHR:1;                   /* Host Halt Request Pending */
    vuint16_t CPN:1;                   /* Leading Cold Start Path Noise */
    vuint16_t REMCSAT:5;               /* Remaining Coldstart Attempts */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t CSP:1;                   /* Leading Cold Start Path */
    vuint16_t CSAA:1;                  /* Cold Start Attempt Aborted Flag */
  } B;
} FLEXRAY_PSR1_tag;

typedef union FLEXRAY_PSR2_union_tag { /* Protocol Status Register 2 */
  vuint16_t R;
  struct {
    vuint16_t CKCORFCNT:4;             /* Clock Correction Failed Counter */
    vuint16_t MTA:1;                   /* Media Access Test Symbol MTS Received on Channel A */
    vuint16_t SSEA:1;                  /* Symbol Window Syntax Error on Channel A */
    vuint16_t SBVA:1;                  /* Symbol Window Boundary Violation on Channel A */
    vuint16_t STCA:1;                  /* Symbol Window Transmit Conflict on Channel A */
    vuint16_t NSEA:1;                  /* NIT Syntax Error on Channel A */
    vuint16_t NBVA:1;                  /* NIT Boundary Violation on Channel A */
    vuint16_t MTB:1;                   /* Media Access Test Symbol MTS Received on Channel B */
    vuint16_t SSEB:1;                  /* Symbol Window Syntax Error on Channel B */
    vuint16_t SBVB:1;                  /* Symbol Window Boundary Violation on Channel B */
    vuint16_t STCB:1;                  /* Symbol Window Transmit Conflict on Channel B */
    vuint16_t NSEB:1;                  /* NIT Syntax Error on Channel B */
    vuint16_t NBVB:1;                  /* NIT Boundary Violation on Channel B */
  } B;
} FLEXRAY_PSR2_tag;

typedef union FLEXRAY_PSR3_union_tag { /* Protocol Status Register 3 */
  vuint16_t R;
  struct {
    vuint16_t AVFA:1;                  /* Aggregated Valid Frame on Channel A */
    vuint16_t ASEA:1;                  /* Aggregated Syntax Error on Channel A */
    vuint16_t ACEA:1;                  /* Aggregated Content Error on Channel A */
    vuint16_t AACA:1;                  /* Aggregated Additional Communication on Channel A */
    vuint16_t ABVA:1;                  /* Aggregated Boundary Violation on Channel A */
    vuint16_t WUA:1;                   /* Wakeup Symbol Received on Channel A */
    vuint16_t _unused_6:2;             /* Reserved */
    vuint16_t AVFB:1;                  /* Aggregated Valid Frame on Channel B */
    vuint16_t ASEB:1;                  /* Aggregated Syntax Error on Channel B */
    vuint16_t ACEB:1;                  /* Aggregated Content Error on Channel B */
    vuint16_t AACB:1;                  /* Aggregated Additional Communication on Channel B */
    vuint16_t ABVB:1;                  /* Aggregated Boundary Violation on Channel B */
    vuint16_t WUB:1;                   /* Wakeup Symbol Received on Channel B */
    vuint16_t _unused_14:2;            /* Reserved */
  } B;
} FLEXRAY_PSR3_tag;

typedef union FLEXRAY_MTCTR_union_tag { /* Macrotick Counter Register */
  vuint16_t R;
  struct {
    vuint16_t MTCT:14;                 /* Macrotick Counter */
    vuint16_t _unused_14:2;            /* Reserved */
  } B;
} FLEXRAY_MTCTR_tag;

typedef union FLEXRAY_CYCTR_union_tag { /* Cycle Counter Register */
  vuint16_t R;
  struct {
    vuint16_t CYCCNT:6;                /* Cycle Counter */
    vuint16_t _unused_6:10;            /* Reserved */
  } B;
} FLEXRAY_CYCTR_tag;

typedef union FLEXRAY_SLTCTAR_union_tag { /* Slot Counter Channel A Register */
  vuint16_t R;
  struct {
    vuint16_t SLOTCNTA:11;             /* Slot Counter Value for Channel A */
    vuint16_t _unused_11:5;            /* Reserved */
  } B;
} FLEXRAY_SLTCTAR_tag;

typedef union FLEXRAY_SLTCTBR_union_tag { /* Slot Counter Channel B Register */
  vuint16_t R;
  struct {
    vuint16_t SLOTCNTB:11;             /* Slot Counter Value for Channel B */
    vuint16_t _unused_11:5;            /* Reserved */
  } B;
} FLEXRAY_SLTCTBR_tag;

typedef union FLEXRAY_RTCORVR_union_tag { /* Rate Correction Value Register */
  vuint16_t R;
  struct {
    vuint16_t RATECORR:16;             /* Rate Correction Value */
  } B;
} FLEXRAY_RTCORVR_tag;

typedef union FLEXRAY_OFCORVR_union_tag { /* Offset Correction Value Register */
  vuint16_t R;
  struct {
    vuint16_t OFFSETCORR:16;           /* Offset Correction Value */
  } B;
} FLEXRAY_OFCORVR_tag;

typedef union FLEXRAY_CIFR_union_tag { /* Combined Interrupt Flag Register */
  vuint16_t R;
  struct {
    vuint16_t TBIF:1;                  /* Transmit Message Buffer Interrupt Flag */
    vuint16_t RBIF:1;                  /* Receive Message Buffer Interrupt Flag */
    vuint16_t FAFAIF:1;                /* Receive FIFO Channel A Almost Full Interrupt Flag */
    vuint16_t FAFBIF:1;                /* Receive FIFO Channel B Almost Full Interrupt Flag */
    vuint16_t WUPIF:1;                 /* Wakeup Interrupt Flag */
    vuint16_t CHIF:1;                  /* CHI Interrupt Flag */
    vuint16_t PRIF:1;                  /* Protocol Interrupt Flag */
    vuint16_t MIF:1;                   /* Module Interrupt Flag */
    vuint16_t _unused_8:8;             /* Reserved */
  } B;
} FLEXRAY_CIFR_tag;

typedef union FLEXRAY_SYMATOR_union_tag { /* System Memory Access Time-Out Register */
  vuint16_t R;
  struct {
    vuint16_t TIMEOUT:8;               /* System Memory Access Time-Out */
    vuint16_t _unused_8:8;             /* Reserved */
  } B;
} FLEXRAY_SYMATOR_tag;

typedef union FLEXRAY_SFCNTR_union_tag { /* Sync Frame Counter Register */
  vuint16_t R;
  struct {
    vuint16_t SFODA:4;                 /* Sync Frames Channel A, odd cycle */
    vuint16_t SFODB:4;                 /* Sync Frames Channel B, odd cycle */
    vuint16_t SFEVA:4;                 /* Sync Frames Channel A, even cycle */
    vuint16_t SFEVB:4;                 /* Sync Frames Channel B, even cycle */
  } B;
} FLEXRAY_SFCNTR_tag;

typedef union FLEXRAY_SFTOR_union_tag { /* Sync Frame Table Offset Register */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:1;             /* Reserved */
    vuint16_t SFT_OFFSET:15;           /* Sync Frame Table Offset */
  } B;
} FLEXRAY_SFTOR_tag;

typedef union FLEXRAY_SFTCCSR_union_tag { /* Sync Frame Table Configuration Control Status Register */
  vuint16_t R;
  struct {
    vuint16_t SIDEN:1;                 /* SIDEN */
    vuint16_t SDVEN:1;                 /* Sync Frame Deviation Table Enable */
    vuint16_t OPT:1;                   /* One Pair Trigger */
    vuint16_t _unused_3:1;             /* Reserved */
    vuint16_t OVAL:1;                  /* Odd Cycle Tables Valid */
    vuint16_t EVAL:1;                  /* Even Cycle Tables Valid */
    vuint16_t OLKS:1;                  /* Odd Cycle Tables Lock Status */
    vuint16_t ELKS:1;                  /* Even Cycle Tables Lock Status */
    vuint16_t CYCNUM:6;                /* Cycle Number */
    vuint16_t OLKT:1;                  /* Odd Cycle Tables Lock/Unlock Trigger */
    vuint16_t ELKT:1;                  /* Even Cycle Tables Lock/Unlock Trigger */
  } B;
} FLEXRAY_SFTCCSR_tag;

typedef union FLEXRAY_SFIDRFR_union_tag { /* Sync Frame ID Rejection Filter Register */
  vuint16_t R;
  struct {
    vuint16_t SYNFRID:10;              /* Sync Frame Rejection ID */
    vuint16_t _unused_10:6;            /* Reserved */
  } B;
} FLEXRAY_SFIDRFR_tag;

typedef union FLEXRAY_SFIDAFVR_union_tag { /* Sync Frame ID Acceptance Filter Value Register */
  vuint16_t R;
  struct {
    vuint16_t FVAL:10;                 /* Filter Value */
    vuint16_t _unused_10:6;            /* Reserved */
  } B;
} FLEXRAY_SFIDAFVR_tag;

typedef union FLEXRAY_SFIDAFMR_union_tag { /* Sync Frame ID Acceptance Filter Mask Register */
  vuint16_t R;
  struct {
    vuint16_t FMSK:10;                 /* Filter Mask */
    vuint16_t _unused_10:6;            /* Reserved */
  } B;
} FLEXRAY_SFIDAFMR_tag;

typedef union FLEXRAY_NMVR_union_tag { /* Network Management Vector Register */
  vuint16_t R;
  struct {
    vuint16_t NMVP:16;                 /* Network Management Vector Part */
  } B;
} FLEXRAY_NMVR_tag;

typedef union FLEXRAY_NMVLR_union_tag { /* Network Management Vector Length Register */
  vuint16_t R;
  struct {
    vuint16_t NMVL:4;                  /* Network Management Vector Length */
    vuint16_t _unused_4:12;            /* Reserved */
  } B;
} FLEXRAY_NMVLR_tag;

typedef union FLEXRAY_TICCR_union_tag { /* Timer Configuration and Control Register */
  vuint16_t R;
  struct {
    vuint16_t T1ST:1;                  /* Timer T1 State */
    vuint16_t T1TR:1;                  /* Timer T1 Trigger */
    vuint16_t T1SP:1;                  /* Timer T1 Stop */
    vuint16_t _unused_3:1;             /* Reserved */
    vuint16_t T1_REP:1;                /* Timer T1 Repetitive Mode */
    vuint16_t _unused_5:3;             /* Reserved */
    vuint16_t T2ST:1;                  /* Timer T2 State */
    vuint16_t T2TR:1;                  /* Timer T2 Trigger */
    vuint16_t T2SP:1;                  /* Timer T2 Stop */
    vuint16_t _unused_11:1;            /* Reserved */
    vuint16_t T2_REP:1;                /* Timer T2 Repetitive Mode */
    vuint16_t T2_CFG:1;                /* Timer T2 Configuration */
    vuint16_t _unused_14:2;            /* Reserved */
  } B;
} FLEXRAY_TICCR_tag;

typedef union FLEXRAY_TI1CYSR_union_tag { /* Timer 1 Cycle Set Register */
  vuint16_t R;
  struct {
    vuint16_t T1_CYC_MSK:6;            /* Timer T1 Cycle Filter Mask */
    vuint16_t _unused_6:2;             /* Reserved */
    vuint16_t T1_CYC_VAL:6;            /* Timer T1 Cycle Filter Value */
    vuint16_t _unused_14:2;            /* Reserved */
  } B;
} FLEXRAY_TI1CYSR_tag;

typedef union FLEXRAY_TI1MTOR_union_tag { /* Timer 1 Macrotick Offset Register */
  vuint16_t R;
  struct {
    vuint16_t T1_MTOFFSET:14;          /* Timer 1 Macrotick Offset */
    vuint16_t _unused_14:2;            /* Reserved */
  } B;
} FLEXRAY_TI1MTOR_tag;

typedef union FLEXRAY_TI2CR0_ABS_union_tag { /* Timer 2 Configuration Register 0 (Absolute Timer Configuration) */
  vuint16_t R;
  struct {
    vuint16_t T2CYCMSK:6;              /* Timer T2 Cycle Filter Mask */
    vuint16_t _unused_6:2;             /* Reserved */
    vuint16_t T2CYCVAL:6;              /* Timer T2 Cycle Filter Mask */
    vuint16_t _unused_14:2;            /* Reserved */
  } B;
} FLEXRAY_TI2CR0_ABS_tag;

typedef union FLEXRAY_TI2CR0_REL_union_tag { /* Timer 2 Configuration Register 0 (Relative Timer Configuration) */
  vuint16_t R;
  struct {
    vuint16_t T2MTCNT:16;              /* Timer T2 Macrotick High Word */
  } B;
} FLEXRAY_TI2CR0_REL_tag;

typedef union FLEXRAY_TI2CR0_union_tag {
  FLEXRAY_TI2CR0_ABS_tag ABS;          /* Timer 2 Configuration Register 0 (Absolute Timer Configuration) */
  FLEXRAY_TI2CR0_REL_tag REL;          /* Timer 2 Configuration Register 0 (Relative Timer Configuration) */
} FLEXRAY_TI2CR0_tag;

typedef union FLEXRAY_TI2CR1_ABS_union_tag { /* Timer 2 Configuration Register 1 (Absolute Timer Configuration) */
  vuint16_t R;
  struct {
    vuint16_t T2MOFF:14;               /* Timer T2 Macrotick Offset */
    vuint16_t _unused_14:2;            /* Reserved */
  } B;
} FLEXRAY_TI2CR1_ABS_tag;

typedef union FLEXRAY_TI2CR1_REL_union_tag { /* Timer 2 Configuration Register 1 (Relative Timer Configuration) */
  vuint16_t R;
  struct {
    vuint16_t T2MTCNT:16;
  } B;
} FLEXRAY_TI2CR1_REL_tag;

typedef union FLEXRAY_TI2CR1_union_tag {
  FLEXRAY_TI2CR1_ABS_tag ABS;          /* Timer 2 Configuration Register 1 (Absolute Timer Configuration) */
  FLEXRAY_TI2CR1_REL_tag REL;          /* Timer 2 Configuration Register 1 (Relative Timer Configuration) */
} FLEXRAY_TI2CR1_tag;

typedef union FLEXRAY_SSSR_union_tag { /* Slot Status Selection Register */
  vuint16_t R;
  struct {
    vuint16_t SLOTNUMBER:11;           /* Slot Number */
    vuint16_t _unused_11:1;            /* Reserved */
    vuint16_t SEL:2;                   /* Selector */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t WMD:1;                   /* Write Mode */
  } B;
} FLEXRAY_SSSR_tag;

typedef union FLEXRAY_SSCCR_union_tag { /* Slot Status Counter Condition Register */
  vuint16_t R;
  struct {
    vuint16_t STATUSMASK:4;            /* Slot Status Mask */
    vuint16_t SUF:1;                   /* Startup Frame Restriction */
    vuint16_t NUF:1;                   /* Null Frame Restriction */
    vuint16_t SYF:1;                   /* Sync Frame Restriction */
    vuint16_t VFR:1;                   /* Valid Frame Restriction */
    vuint16_t MCY:1;                   /* Multi Cycle Selection */
    vuint16_t CNTCFG:2;                /* Counter Configuration */
    vuint16_t _unused_11:1;            /* Reserved */
    vuint16_t SEL:2;                   /* Selector */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t WMD:1;                   /* Write Mode */
  } B;
} FLEXRAY_SSCCR_tag;

typedef union FLEXRAY_SSR_union_tag {  /* Slot Status Register */
  vuint16_t R;
  struct {
    vuint16_t TCA:1;                   /* Transmission Conflict on Channel A */
    vuint16_t BVA:1;                   /* Boundary Violation on Channel A */
    vuint16_t CEA:1;                   /* Content Error on Channel A */
    vuint16_t SEA:1;                   /* SEA */
    vuint16_t SUA:1;                   /* Startup Frame Indicator Channel A */
    vuint16_t NFA:1;                   /* Null Frame Indicator Channel A */
    vuint16_t SYA:1;                   /* Sync Frame Indicator Channel A */
    vuint16_t VFA:1;                   /* Valid Frame on Channel A */
    vuint16_t TCB:1;                   /* Transmission Conflict on Channel B */
    vuint16_t BVB:1;                   /* Boundary Violation on Channel B */
    vuint16_t CEB:1;                   /* Content Error on Channel B */
    vuint16_t SEB:1;                   /* Syntax Error on Channel B */
    vuint16_t SUB:1;                   /* Startup Frame Indicator Channel B */
    vuint16_t NFB:1;                   /* Null Frame Indicator Channel B */
    vuint16_t SYB:1;                   /* Sync Frame Indicator Channel B */
    vuint16_t VFB:1;                   /* Valid Frame on Channel B */
  } B;
} FLEXRAY_SSR_tag;

typedef union FLEXRAY_SSCR_union_tag { /* Slot Status Counter Register */
  vuint16_t R;
  struct {
    vuint16_t SLOTSTATUSCNT:16;        /* Slot Status Counter */
  } B;
} FLEXRAY_SSCR_tag;

typedef union FLEXRAY_MTSACFR_union_tag { /* MTS A Configuration Register */
  vuint16_t R;
  struct {
    vuint16_t CYCCNTVAL:6;             /* Cycle Counter Value */
    vuint16_t _unused_6:2;             /* Reserved */
    vuint16_t CYCCNTMSK:6;             /* Cycle Counter Mask */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t MTE:1;                   /* Media Access Test Symbol Transmission Enable */
  } B;
} FLEXRAY_MTSACFR_tag;

typedef union FLEXRAY_MTSBCFR_union_tag { /* MTS B Configuration Register */
  vuint16_t R;
  struct {
    vuint16_t CYCCNTVAL:6;             /* Cycle Counter Value */
    vuint16_t _unused_6:2;             /* Reserved */
    vuint16_t CYCCNTMSK:6;             /* Cycle Counter Mask */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t MTE:1;                   /* Media Access Test Symbol Transmission Enable */
  } B;
} FLEXRAY_MTSBCFR_tag;

typedef union FLEXRAY_RSBIR_union_tag { /* Receive Shadow Buffer Index Register */
  vuint16_t R;
  struct {
    vuint16_t RSBIDX:9;                /* RSBIDXA1/RSBIDXA2/RSBIDXB1/RSBIDXB2- Receive Shadow Buffer Index */
    vuint16_t _unused_9:3;             /* Reserved */
    vuint16_t SEL:2;                   /* Selector */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t WMD:1;                   /* Write Mode */
  } B;
} FLEXRAY_RSBIR_tag;

typedef union FLEXRAY_RFWMSR_union_tag { /* Receive FIFO Watermark and Selection Register */
  vuint16_t R;
  struct {
    vuint16_t SEL:1;                   /* Select */
    vuint16_t _unused_1:7;             /* Reserved */
    vuint16_t WM:8;                    /* WMA/WMB - Watermark */
  } B;
} FLEXRAY_RFWMSR_tag;

typedef union FLEXRAY_RFSIR_union_tag { /* Receive FIFO Start Index Register */
  vuint16_t R;
  struct {
    vuint16_t SIDX:10;                 /* SIDXA/SIDXB - Start Index */
    vuint16_t _unused_10:6;            /* Reserved */
  } B;
} FLEXRAY_RFSIR_tag;

typedef union FLEXRAY_RFDSR_union_tag { /* Receive FIFO Depth and Size Register */
  vuint16_t R;
  struct {
    vuint16_t ENTRY_SIZE:7;            /* ENTRY_SIZEA/ENTRY_SIZEB - Entry Size */
    vuint16_t _unused_7:1;             /* Reserved */
    vuint16_t FIFO_DEPTH:8;            /* FIFO_DEPTHA/FIFO_DEPTHB - FIFO Depth */
  } B;
} FLEXRAY_RFDSR_tag;

typedef union FLEXRAY_RFARIR_union_tag { /* Receive FIFO A Read Index Register */
  vuint16_t R;
  struct {
    vuint16_t RDIDX:10;                /* Read Index */
    vuint16_t _unused_10:6;            /* Reserved */
  } B;
} FLEXRAY_RFARIR_tag;

typedef union FLEXRAY_RFBRIR_union_tag { /* Receive FIFO B Read Index Register */
  vuint16_t R;
  struct {
    vuint16_t RDIDX:10;                /* Read Index */
    vuint16_t _unused_10:6;            /* Reserved */
  } B;
} FLEXRAY_RFBRIR_tag;

typedef union FLEXRAY_RFMIDAFVR_union_tag { /* Receive FIFO Message ID Acceptance Filter Value Register */
  vuint16_t R;
  struct {
    vuint16_t MIDAFVAL:16;             /* MIDAFVALA/MIDAFVALB - Message ID Acceptance Filter Value */
  } B;
} FLEXRAY_RFMIDAFVR_tag;

typedef union FLEXRAY_RFMIDAFMR_union_tag { /* Receive FIFO Message ID Acceptance Filter Mask Register */
  vuint16_t R;
  struct {
    vuint16_t MIDAFMSK:16;             /* MIDAFMSKA/MIDAFMSKB - Message ID Acceptance Filter Mask */
  } B;
} FLEXRAY_RFMIDAFMR_tag;

typedef union FLEXRAY_RFFIDRFVR_union_tag { /* Receive FIFO Frame ID Rejection Filter Value Register */
  vuint16_t R;
  struct {
    vuint16_t FIDRFVAL:11;             /* FIDRFVALA/FIDRFVALB - Frame ID Rejection Filter Value */
    vuint16_t _unused_11:5;            /* Reserved */
  } B;
} FLEXRAY_RFFIDRFVR_tag;

typedef union FLEXRAY_RFFIDRFMR_union_tag { /* Receive FIFO Frame ID Rejection Filter Mask Register */
  vuint16_t R;
  struct {
    vuint16_t FIDRFMSK:11;             /* Frame ID Rejection Filter Mask */
    vuint16_t _unused_11:5;            /* Reserved */
  } B;
} FLEXRAY_RFFIDRFMR_tag;

typedef union FLEXRAY_RFRFCFR_union_tag { /* Receive FIFO Range Filter Configuration Register */
  vuint16_t R;
  struct {
    vuint16_t SID:11;                  /* Slot ID */
    vuint16_t _unused_11:1;            /* Reserved */
    vuint16_t SEL:2;                   /* Filter Selector */
    vuint16_t IBD:1;                   /* Interval Boundary */
    vuint16_t WMD:1;                   /* Write Mode */
  } B;
} FLEXRAY_RFRFCFR_tag;

typedef union FLEXRAY_RFRFCTR_union_tag { /* Receive FIFO Range Filter Control Register */
  vuint16_t R;
  struct {
    vuint16_t F0EN:1;                  /* Range Filter 0 Enable */
    vuint16_t F1EN:1;                  /* Range Filter 1 Enable */
    vuint16_t F2EN:1;                  /* Range Filter 2 Enable */
    vuint16_t F3EN:1;                  /* Range Filter 3 Enable */
    vuint16_t _unused_4:4;             /* Reserved */
    vuint16_t F0MD:1;                  /* Range Filter 0 Mode */
    vuint16_t F1MD:1;                  /* Range Filter 1 Mode */
    vuint16_t F2MD:1;                  /* Range Filter 2 Mode */
    vuint16_t F3MD:1;                  /* Range Filter 3 Mode */
    vuint16_t _unused_12:4;            /* Reserved */
  } B;
} FLEXRAY_RFRFCTR_tag;

typedef union FLEXRAY_LDTXSLAR_union_tag { /* Last Dynamic Transmit Slot Channel A Register */
  vuint16_t R;
  struct {
    vuint16_t LDYNTXSLOTA:11;          /* Last Dynamic Transmission Slot Channel A */
    vuint16_t _unused_11:5;            /* Reserved */
  } B;
} FLEXRAY_LDTXSLAR_tag;

typedef union FLEXRAY_LDTXSLBR_union_tag { /* Last Dynamic Transmit Slot Channel B Register */
  vuint16_t R;
  struct {
    vuint16_t LDYNTXSLOTB:11;          /* Last Dynamic Transmission Slot Channel B */
    vuint16_t _unused_11:5;            /* Reserved */
  } B;
} FLEXRAY_LDTXSLBR_tag;

typedef union FLEXRAY_PCR0_union_tag { /* Protocol Configuration Register 0 */
  vuint16_t R;
  struct {
    vuint16_t STATIC_SLOT_LENGTH:10;   /* static_slot_length */
    vuint16_t ACTION_POINT_OFFSET:6;   /* action_point_offset */
  } B;
} FLEXRAY_PCR0_tag;

typedef union FLEXRAY_PCR1_union_tag { /* Protocol Configuration Register 1 */
  vuint16_t R;
  struct {
    vuint16_t MACRO_AFTER_FIRST_STATIC_SLOT:14; /* macro_after_first_static_slot */
    vuint16_t _unused_14:2;            /* Reserved */
  } B;
} FLEXRAY_PCR1_tag;

typedef union FLEXRAY_PCR2_union_tag { /* Protocol Configuration Register 2 */
  vuint16_t R;
  struct {
    vuint16_t NUMBER_OF_STATIC_SLOTS:10; /* gNumberOfStaticSlots */
    vuint16_t MINISLOT_AFTER_ACTION_POINT:6; /* minislot_after_action_point */
  } B;
} FLEXRAY_PCR2_tag;

typedef union FLEXRAY_PCR3_union_tag { /* Protocol Configuration Register 3 */
  vuint16_t R;
  struct {
    vuint16_t COLDSTART_ATTEMPTS:5;    /* coldstart_attempts */
    vuint16_t MINISLOT_ACTION_POINT_OFFSET:5; /* minislot_action_point_offset */
    vuint16_t WAKEUP_SYMBOL_RX_LOW:6;  /* wakeup_symbol_rx_low */
  } B;
} FLEXRAY_PCR3_tag;

typedef union FLEXRAY_PCR4_union_tag { /* Protocol Configuration Register 4 */
  vuint16_t R;
  struct {
    vuint16_t WAKEUP_SYMBOL_RX_WINDOW:9; /* wakeup_symbol_rx_window */
    vuint16_t CAS_RX_LOW_MAX:7;        /* cas_rx_low_max */
  } B;
} FLEXRAY_PCR4_tag;

typedef union FLEXRAY_PCR5_union_tag { /* Protocol Configuration Register 5 */
  vuint16_t R;
  struct {
    vuint16_t WAKEUP_SYMBOL_RX_IDLE:6; /* wakeup_symbol_rx_idle */
    vuint16_t WAKEUP_SYMBOL_TX_LOW:6;  /* wakeup_symbol_tx_low */
    vuint16_t TSS_TRANSMITTER:4;       /* tss_transmitter */
  } B;
} FLEXRAY_PCR5_tag;

typedef union FLEXRAY_PCR6_union_tag { /* Protocol Configuration Register 6 */
  vuint16_t R;
  struct {
    vuint16_t MACRO_INITIAL_OFFSET_A:7; /* macro_initial_offset_a */
    vuint16_t SYMBOL_WINDOW_AFTER_ACTION_POINT:8; /* symbol_window_after_action_point */
    vuint16_t _unused_15:1;            /* Reserved */
  } B;
} FLEXRAY_PCR6_tag;

typedef union FLEXRAY_PCR7_union_tag { /* Protocol Configuration Register 7 */
  vuint16_t R;
  struct {
    vuint16_t MICRO_PER_MACRO_NOM_HALF:7; /* micro_per_macro_nom_half */
    vuint16_t DECODING_CORRECTION_B:9; /* decoding_correction_b */
  } B;
} FLEXRAY_PCR7_tag;

typedef union FLEXRAY_PCR8_union_tag { /* Protocol Configuration Register 8 */
  vuint16_t R;
  struct {
    vuint16_t WAKEUP_SYMBOL_TX_IDLE:8; /* wakeup_symbol_tx_idle */
    vuint16_t MAX_WITHOUT_CLOCK_CORRECTION_PASSIVE:4; /* max_without_clock_correction_passive */
    vuint16_t MAX_WITHOUT_CLOCK_CORRECTION_FATAL:4; /* max_without_clock_correction_fatal */
  } B;
} FLEXRAY_PCR8_tag;

typedef union FLEXRAY_PCR9_union_tag { /* Protocol Configuration Register 9 */
  vuint16_t R;
  struct {
    vuint16_t OFFSET_CORRECTION_OUT:14; /* offset_correction_out */
    vuint16_t SYMBOL_WINDOW_EXISTS:1;  /* symbol_window_exists */
    vuint16_t MINISLOT_EXISTS:1;       /* minislot_exists */
  } B;
} FLEXRAY_PCR9_tag;

typedef union FLEXRAY_PCR10_union_tag { /* Protocol Configuration Register 10 */
  vuint16_t R;
  struct {
    vuint16_t MACRO_PER_CYCLE:14;      /* macro_per_cycle */
    vuint16_t WAKEUP_CHANNEL:1;        /* wakeup_channel */
    vuint16_t SINGLE_SLOT_ENABLED:1;   /* single_slot_enabled */
  } B;
} FLEXRAY_PCR10_tag;

typedef union FLEXRAY_PCR11_union_tag { /* Protocol Configuration Register 11 */
  vuint16_t R;
  struct {
    vuint16_t OFFSET_CORRECTION_START:14; /* offset_correction_start */
    vuint16_t KEY_SLOT_USED_FOR_SYNC:1; /* key_slot_used_for_sync */
    vuint16_t KEY_SLOT_USED_FOR_STARTUP:1; /* key_slot_used_for_startup */
  } B;
} FLEXRAY_PCR11_tag;

typedef union FLEXRAY_PCR12_union_tag { /* Protocol Configuration Register 12 */
  vuint16_t R;
  struct {
    vuint16_t KEY_SLOT_HEADER_CRC:11;  /* key_slot_header_crc */
    vuint16_t ALLOW_PASSIVE_TO_ACTIVE:5; /* allow_passive_to_active */
  } B;
} FLEXRAY_PCR12_tag;

typedef union FLEXRAY_PCR13_union_tag { /* Protocol Configuration Register 13 */
  vuint16_t R;
  struct {
    vuint16_t STATIC_SLOT_AFTER_ACTION_POINT:10; /* static_slot_after_action_point */
    vuint16_t FIRST_MINISLOT_ACTION_POINT_OFFSET:6; /* first_minislot_action_point_offset */
  } B;
} FLEXRAY_PCR13_tag;

typedef union FLEXRAY_PCR14_union_tag { /* Protocol Configuration Register 14 */
  vuint16_t R;
  struct {
    vuint16_t LISTEN_TIMEOUT:5;        /* listen_timeout */
    vuint16_t RATE_CORRECTION_OUT:11;  /* rate_correction_out */
  } B;
} FLEXRAY_PCR14_tag;

typedef union FLEXRAY_PCR15_union_tag { /* Protocol Configuration Register 15 */
  vuint16_t R;
  struct {
    vuint16_t LISTEN_TIMEOUT:16;       /* listen_timeout */
  } B;
} FLEXRAY_PCR15_tag;

typedef union FLEXRAY_PCR16_union_tag { /* Protocol Configuration Register 16 */
  vuint16_t R;
  struct {
    vuint16_t NOISE_LISTEN_TIMEOUT:9;  /* noise_listen_timeout */
    vuint16_t MACRO_INITIAL_OFFSET_B:7; /* macro_initial_offset_b */
  } B;
} FLEXRAY_PCR16_tag;

typedef union FLEXRAY_PCR17_union_tag { /* Protocol Configuration Register 17 */
  vuint16_t R;
  struct {
    vuint16_t NOISE_LISTEN_TIMEOUT:16; /* noise_listen_timeout */
  } B;
} FLEXRAY_PCR17_tag;

typedef union FLEXRAY_PCR18_union_tag { /* Protocol Configuration Register 18 */
  vuint16_t R;
  struct {
    vuint16_t KEY_SLOT_ID:10;          /* key_slot_id */
    vuint16_t WAKEUP_PATTERN:6;        /* wakeup_pattern */
  } B;
} FLEXRAY_PCR18_tag;

typedef union FLEXRAY_PCR19_union_tag { /* Protocol Configuration Register 19 */
  vuint16_t R;
  struct {
    vuint16_t PAYLOAD_LENGTH_STATIC:7; /* payload_length_static */
    vuint16_t DECODING_CORRECTION_A:9; /* decoding_correction_a */
  } B;
} FLEXRAY_PCR19_tag;

typedef union FLEXRAY_PCR20_union_tag { /* Protocol Configuration Register 20 */
  vuint16_t R;
  struct {
    vuint16_t MICRO_INITIAL_OFFSET_A:8; /* micro_initial_offset_a */
    vuint16_t MICRO_INITIAL_OFFSET_B:8; /* micro_initial_offset_b */
  } B;
} FLEXRAY_PCR20_tag;

typedef union FLEXRAY_PCR21_union_tag { /* Protocol Configuration Register 21 */
  vuint16_t R;
  struct {
    vuint16_t LATEST_TX:13;            /* latest_tx */
    vuint16_t EXTERN_RATE_CORRECTION:3; /* extern_rate_correction */
  } B;
} FLEXRAY_PCR21_tag;

typedef union FLEXRAY_PCR22_union_tag { /* Protocol Configuration Register 22 */
  vuint16_t R;
  struct {
    vuint16_t MICRO_PER_CYCLE:4;       /* micro_per_cycle */
    vuint16_t COMP_ACCEPTED_STARTUP_RANGE_A:11; /* comp_accepted_startup_range_a */
    vuint16_t _unused_15:1;            /* Reserved bit, will not be changed. Application must not write any value different from the reset value. */
  } B;
} FLEXRAY_PCR22_tag;

typedef union FLEXRAY_PCR23_union_tag { /* Protocol Configuration Register 23 */
  vuint16_t R;
  struct {
    vuint16_t MICRO_PER_CYCLE:16;      /* micro_per_cycle */
  } B;
} FLEXRAY_PCR23_tag;

typedef union FLEXRAY_PCR24_union_tag { /* Protocol Configuration Register 24 */
  vuint16_t R;
  struct {
    vuint16_t MICRO_PER_CYCLE_MIN:4;   /* micro_per_cycle_min */
    vuint16_t MAX_PAYLOAD_LENGTH_DYNAMIC:7; /* max_payload_length_dynamic */
    vuint16_t CLUSTER_DRIFT_DAMPING:5; /* cluster_drift_damping */
  } B;
} FLEXRAY_PCR24_tag;

typedef union FLEXRAY_PCR25_union_tag { /* Protocol Configuration Register 25 */
  vuint16_t R;
  struct {
    vuint16_t MICRO_PER_CYCLE_MIN:16;  /* micro_per_cycle_min */
  } B;
} FLEXRAY_PCR25_tag;

typedef union FLEXRAY_PCR26_union_tag { /* Protocol Configuration Register 26 */
  vuint16_t R;
  struct {
    vuint16_t MICRO_PER_CYCLE_MAX:4;   /* micro_per_cycle_max */
    vuint16_t COMP_ACCEPTED_STARTUP_RANGE_B:11; /* comp_accepted_startup_range_b */
    vuint16_t ALLOW_HALT_DUE_TO_CLOCK:1; /* allow_halt_due_to_clock */
  } B;
} FLEXRAY_PCR26_tag;

typedef union FLEXRAY_PCR27_union_tag { /* Protocol Configuration Register 27 */
  vuint16_t R;
  struct {
    vuint16_t MICRO_PER_CYCLE_MAX:16;  /* micro_per_cycle_max */
  } B;
} FLEXRAY_PCR27_tag;

typedef union FLEXRAY_PCR28_union_tag { /* Protocol Configuration Register 28 */
  vuint16_t R;
  struct {
    vuint16_t MACRO_AFTER_OFFSET_CORRECTION:14; /* macro_after_offset_correction */
    vuint16_t DYNAMIC_SLOT_IDLE_PHASE:2; /* dynamic_slot_idle_phase */
  } B;
} FLEXRAY_PCR28_tag;

typedef union FLEXRAY_PCR29_union_tag { /* Protocol Configuration Register 29 */
  vuint16_t R;
  struct {
    vuint16_t MINISLOTS_MAX:13;        /* minislots_max */
    vuint16_t EXTERN_OFFSET_CORRECTION:3; /* extern_offset_correction */
  } B;
} FLEXRAY_PCR29_tag;

typedef union FLEXRAY_PCR30_union_tag { /* Protocol Configuration Register 30 */
  vuint16_t R;
  struct {
    vuint16_t SYNC_NODE_MAX:4;         /* sync_node_max */
    vuint16_t _unused_4:12;            /* Reserved */
  } B;
} FLEXRAY_PCR30_tag;

typedef union FLEXRAY_STPWHR_union_tag { /* StopWatch Count High Register */
  vuint16_t R;
  struct {
    vuint16_t STPW_S_H:16;             /* StopWatch Count High */
  } B;
} FLEXRAY_STPWHR_tag;

typedef union FLEXRAY_STPWLR_union_tag { /* Stop Watch Count Low Register */
  vuint16_t R;
  struct {
    vuint16_t STPW_S_L:16;             /* StopWatch Count Low */
  } B;
} FLEXRAY_STPWLR_tag;

typedef union FLEXRAY_PEOER_union_tag { /* Protocol Event Output Enable and StopWatch Control Register */
  vuint16_t R;
  struct {
    vuint16_t CYC_EE:1;                /* Cycle Start Event Output Enable */
    vuint16_t TIM1_EE:1;               /* Timer 1 expired Event Output Enable */
    vuint16_t TIM2_EE:1;               /* imer 2 expired Event Output Enable */
    vuint16_t _unused_3:5;             /* Reserved */
    vuint16_t STPW_EN:1;               /* Stopwatch count Enable */
    vuint16_t _unused_9:7;             /* Reserved */
  } B;
} FLEXRAY_PEOER_tag;

typedef union FLEXRAY_RFSDOR_union_tag { /* Receive FIFO Start Data Offset Register */
  vuint16_t R;
  struct {
    vuint16_t SDO:16;                  /* SDOA/SDOB - Start Data Field Offset */
  } B;
} FLEXRAY_RFSDOR_tag;

typedef union FLEXRAY_RFSYMBADHR_union_tag { /* Receive FIFO System Memory Base Address High Register */
  vuint16_t R;
  struct {
    vuint16_t SMBA:16;                 /* System Memory Base Address */
  } B;
} FLEXRAY_RFSYMBADHR_tag;

typedef union FLEXRAY_RFSYMBADLR_union_tag { /* Receive FIFO System Memory Base Address Low Register */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:4;             /* Reserved */
    vuint16_t SMBA:12;                 /* System Memory Base Address */
  } B;
} FLEXRAY_RFSYMBADLR_tag;

typedef union FLEXRAY_RFPTR_union_tag { /* Receive FIFO Periodic Timer Register */
  vuint16_t R;
  struct {
    vuint16_t PTD:14;                  /* Periodic Timer Duration */
    vuint16_t _unused_14:2;            /* Reserved */
  } B;
} FLEXRAY_RFPTR_tag;

typedef union FLEXRAY_RFFLPCR_union_tag { /* Receive FIFO Fill Level and POP Count Register */
  vuint16_t R;
  struct {
    vuint16_t FLA_OR_PCA:8;            /* FLA_or_PCA */
    vuint16_t FLB_OR_PCB:8;            /* FLB_or_PCB */
  } B;
} FLEXRAY_RFFLPCR_tag;

typedef union FLEXRAY_EEIFER_union_tag { /* ECC Error Interrupt Flag and Enable Register */
  vuint16_t R;
  struct {
    vuint16_t DRCE_IE:1;               /* DRAM Corrected Error Interrupt Enable */
    vuint16_t DRNE_IE:1;               /* DRAM Non-Corrected Error Interrupt Enable */
    vuint16_t LRCE_IE:1;               /* LRAM Corrected Error Interrupt Enable */
    vuint16_t LRNE_IE:1;               /* LRAM Non-Corrected Error Interrupt Enable */
    vuint16_t _unused_4:4;             /* Reserved */
    vuint16_t DRCE_IF:1;               /* DRAM Corrected Error Interrupt Flag */
    vuint16_t DRNE_IF:1;               /* DRAM Non-Corrected Error Interrupt Flag */
    vuint16_t LRCE_IF:1;               /* LRAM Corrected Error Interrupt Flag */
    vuint16_t LRNE_IF:1;               /* LRAM Non-Corrected Error Interrupt Flag */
    vuint16_t DRCE_OF:1;               /* DRAM Corrected Error Overflow Flag */
    vuint16_t DRNE_OF:1;               /* DRAM Non-Corrected Error Overflow Flag */
    vuint16_t LRCE_OF:1;               /* LRAM Corrected Error Overflow Flag */
    vuint16_t LRNE_OF:1;               /* LRAM Non-Corrected Error Overflow Flag */
  } B;
} FLEXRAY_EEIFER_tag;

typedef union FLEXRAY_EERICR_union_tag { /* ECC Error Report and Injection Control Register */
  vuint16_t R;
  struct {
    vuint16_t EIE:1;                   /* Error Injection Enable */
    vuint16_t EIM:1;                   /* Error Injection Mode */
    vuint16_t _unused_2:2;             /* Reserved */
    vuint16_t ERM:1;                   /* Error Report Mode */
    vuint16_t _unused_5:3;             /* Reserved */
    vuint16_t ERS:2;                   /* Error Report Select */
    vuint16_t _unused_10:5;            /* Reserved */
    vuint16_t BSY:1;                   /* Register Update Busy */
  } B;
} FLEXRAY_EERICR_tag;

typedef union FLEXRAY_EERAR_union_tag { /* ECC Error Report Address Register */
  vuint16_t R;
  struct {
    vuint16_t ADDR:12;                 /* Memory Address */
    vuint16_t BANK:3;                  /* Memory Bank */
    vuint16_t MID:1;                   /* Memory Identifier */
  } B;
} FLEXRAY_EERAR_tag;

typedef union FLEXRAY_EERDR_union_tag { /* ECC Error Report Data Register */
  vuint16_t R;
  struct {
    vuint16_t DATA:16;                 /* Data */
  } B;
} FLEXRAY_EERDR_tag;

typedef union FLEXRAY_EERCR_union_tag { /* ECC Error Report Code Register */
  vuint16_t R;
  struct {
    vuint16_t CODE:5;                  /* Code */
    vuint16_t _unused_5:11;            /* Reserved */
  } B;
} FLEXRAY_EERCR_tag;

typedef union FLEXRAY_EEIAR_union_tag { /* ECC Error Injection Address Register */
  vuint16_t R;
  struct {
    vuint16_t ADDR:12;                 /* Memory Address */
    vuint16_t BANK:3;                  /* Memory Bank */
    vuint16_t MID:1;                   /* Memory Identifier */
  } B;
} FLEXRAY_EEIAR_tag;

typedef union FLEXRAY_EEIDR_union_tag { /* ECC Error Injection Data Register */
  vuint16_t R;
  struct {
    vuint16_t DATA:16;                 /* Data */
  } B;
} FLEXRAY_EEIDR_tag;

typedef union FLEXRAY_EEICR_union_tag { /* ECC Error Injection Code Register */
  vuint16_t R;
  struct {
    vuint16_t CODE:5;                  /* Code */
    vuint16_t _unused_5:11;            /* Reserved */
  } B;
} FLEXRAY_EEICR_tag;

typedef union FLEXRAY_MB_CCSR_union_tag { /* Message Buffer Configuration Control Status Register */
  vuint16_t R;
  struct {
    vuint16_t MBIF:1;                  /* Message Buffer Interrupt Flag */
    vuint16_t LCKS:1;                  /* Lock Status */
    vuint16_t EDS:1;                   /* Enable/Disable Status */
    vuint16_t DVAL:1;                  /* Data Valid */
    vuint16_t DUP:1;                   /* Data Updated */
    vuint16_t _unused_5:3;             /* Reserved */
    vuint16_t MBIE:1;                  /* Message Buffer Interrupt Enable */
    vuint16_t LCKT:1;                  /* Lock/Unlock Trigger */
    vuint16_t EDT:1;                   /* Enable/Disable Trigger */
    vuint16_t CMT:1;                   /* Commit for Transmission */
    vuint16_t MTD:1;                   /* Message Buffer Transfer Direction */
    vuint16_t _unused_13:3;            /* Reserved */
  } B;
} FLEXRAY_MB_CCSR_tag;

typedef union FLEXRAY_MB_CCFR_union_tag { /* Message Buffer Cycle Counter Filter Register */
  vuint16_t R;
  struct {
    vuint16_t CCFVAL:6;                /* Cycle Counter Filtering Value */
    vuint16_t CCFMSK:6;                /* Cycle Counter Filtering Mask */
    vuint16_t CCFE:1;                  /* Cycle Counter Filtering Enable */
    vuint16_t CHB:1;                   /* Channel Assignment */
    vuint16_t CHA:1;                   /* Channel Assignment */
    vuint16_t MTM:1;                   /* Message Buffer Transmission Mode */
  } B;
} FLEXRAY_MB_CCFR_tag;

typedef union FLEXRAY_MB_FIDR_union_tag { /* Message Buffer Frame ID Register */
  vuint16_t R;
  struct {
    vuint16_t FID:11;                  /* Frame ID */
    vuint16_t _unused_11:5;            /* Reserved */
  } B;
} FLEXRAY_MB_FIDR_tag;

typedef union FLEXRAY_MB_IDXR_union_tag { /* Message Buffer Index Register */
  vuint16_t R;
  struct {
    vuint16_t MBIDX:9;                 /* Message Buffer Index */
    vuint16_t _unused_9:7;             /* Reserved */
  } B;
} FLEXRAY_MB_IDXR_tag;

typedef struct FLEXRAY_MB_struct_tag {
  FLEXRAY_MB_CCSR_tag CCSR;            /* Message Buffer Configuration Control Status Register */
  FLEXRAY_MB_CCFR_tag CCFR;            /* Message Buffer Cycle Counter Filter Register */
  FLEXRAY_MB_FIDR_tag FIDR;            /* Message Buffer Frame ID Register */
  FLEXRAY_MB_IDXR_tag IDXR;            /* Message Buffer Index Register */
} FLEXRAY_MB_tag;

typedef union FLEXRAY_MBDOR_union_tag { /* Message Buffer Data Field Offset Register */
  vuint16_t R;
  struct {
    vuint16_t MBDO:16;                 /* Message Buffer Data Field Offset */
  } B;
} FLEXRAY_MBDOR_tag;

typedef union FLEXRAY_LEETR_union_tag { /* LRAM ECC Error Test Register */
  vuint16_t R;
  struct {
    vuint16_t LEETD:16;                /* LRAM ECC Error Test Data */
  } B;
} FLEXRAY_LEETR_tag;

struct FLEXRAY_tag {
  FLEXRAY_MVR_tag MVR;                 /* Module Version Register */
  FLEXRAY_MCR_tag MCR;                 /* Module Configuration Register */
  FLEXRAY_SYMBADHR_tag SYMBADHR;       /* System Memory Base Address High Register */
  FLEXRAY_SYMBADLR_tag SYMBADLR;       /* System Memory Base Address Low Register */
  FLEXRAY_STBSCR_tag STBSCR;           /* Strobe Signal Control Register */
  uint8_t FLEXRAY_reserved0[2];
  FLEXRAY_MBDSR_tag MBDSR;             /* Message Buffer Data Size Register */
  FLEXRAY_MBSSUTR_tag MBSSUTR;         /* Message Buffer Segment Size and Utilization Register */
  FLEXRAY_PEDRAR_tag PEDRAR;           /* PE DRAM Access Register */
  FLEXRAY_PEDRDR_tag PEDRDR;           /* PE DRAM Data Register */
  FLEXRAY_POCR_tag POCR;               /* Protocol Operation Control Register */
  FLEXRAY_GIFER_tag GIFER;             /* Global Interrupt Flag and Enable Register */
  FLEXRAY_PIFR0_tag PIFR0;             /* Protocol Interrupt Flag Register 0 */
  FLEXRAY_PIFR1_tag PIFR1;             /* Protocol Interrupt Flag Register 1 */
  FLEXRAY_PIER0_tag PIER0;             /* Protocol Interrupt Enable Register 0 */
  FLEXRAY_PIER1_tag PIER1;             /* Protocol Interrupt Enable Register 1 */
  FLEXRAY_CHIERFR_tag CHIERFR;         /* CHI Error Flag Register */
  FLEXRAY_MBIVEC_tag MBIVEC;           /* Message Buffer Interrupt Vector Register */
  FLEXRAY_CASERCR_tag CASERCR;         /* Channel A Status Error Counter Register */
  FLEXRAY_CBSERCR_tag CBSERCR;         /* Channel B Status Error Counter Register */
  FLEXRAY_PSR0_tag PSR0;               /* Protocol Status Register 0 */
  FLEXRAY_PSR1_tag PSR1;               /* Protocol Status Register 1 */
  FLEXRAY_PSR2_tag PSR2;               /* Protocol Status Register 2 */
  FLEXRAY_PSR3_tag PSR3;               /* Protocol Status Register 3 */
  FLEXRAY_MTCTR_tag MTCTR;             /* Macrotick Counter Register */
  FLEXRAY_CYCTR_tag CYCTR;             /* Cycle Counter Register */
  FLEXRAY_SLTCTAR_tag SLTCTAR;         /* Slot Counter Channel A Register */
  FLEXRAY_SLTCTBR_tag SLTCTBR;         /* Slot Counter Channel B Register */
  FLEXRAY_RTCORVR_tag RTCORVR;         /* Rate Correction Value Register */
  FLEXRAY_OFCORVR_tag OFCORVR;         /* Offset Correction Value Register */
  FLEXRAY_CIFR_tag CIFR;               /* Combined Interrupt Flag Register */
  FLEXRAY_SYMATOR_tag SYMATOR;         /* System Memory Access Time-Out Register */
  FLEXRAY_SFCNTR_tag SFCNTR;           /* Sync Frame Counter Register */
  FLEXRAY_SFTOR_tag SFTOR;             /* Sync Frame Table Offset Register */
  FLEXRAY_SFTCCSR_tag SFTCCSR;         /* Sync Frame Table Configuration Control Status Register */
  FLEXRAY_SFIDRFR_tag SFIDRFR;         /* Sync Frame ID Rejection Filter Register */
  FLEXRAY_SFIDAFVR_tag SFIDAFVR;       /* Sync Frame ID Acceptance Filter Value Register */
  FLEXRAY_SFIDAFMR_tag SFIDAFMR;       /* Sync Frame ID Acceptance Filter Mask Register */
  FLEXRAY_NMVR_tag NMVR[6];            /* Network Management Vector Register */
  FLEXRAY_NMVLR_tag NMVLR;             /* Network Management Vector Length Register */
  FLEXRAY_TICCR_tag TICCR;             /* Timer Configuration and Control Register */
  FLEXRAY_TI1CYSR_tag TI1CYSR;         /* Timer 1 Cycle Set Register */
  FLEXRAY_TI1MTOR_tag TI1MTOR;         /* Timer 1 Macrotick Offset Register */
  FLEXRAY_TI2CR0_tag TI2CR0;
  FLEXRAY_TI2CR1_tag TI2CR1;
  FLEXRAY_SSSR_tag SSSR;               /* Slot Status Selection Register */
  FLEXRAY_SSCCR_tag SSCCR;             /* Slot Status Counter Condition Register */
  FLEXRAY_SSR_tag SSR[8];              /* Slot Status Register */
  FLEXRAY_SSCR_tag SSCR[4];            /* Slot Status Counter Register */
  FLEXRAY_MTSACFR_tag MTSACFR;         /* MTS A Configuration Register */
  FLEXRAY_MTSBCFR_tag MTSBCFR;         /* MTS B Configuration Register */
  FLEXRAY_RSBIR_tag RSBIR;             /* Receive Shadow Buffer Index Register */
  FLEXRAY_RFWMSR_tag RFWMSR;           /* Receive FIFO Watermark and Selection Register */
  FLEXRAY_RFSIR_tag RFSIR;             /* Receive FIFO Start Index Register */
  FLEXRAY_RFDSR_tag RFDSR;             /* Receive FIFO Depth and Size Register */
  FLEXRAY_RFARIR_tag RFARIR;           /* Receive FIFO A Read Index Register */
  FLEXRAY_RFBRIR_tag RFBRIR;           /* Receive FIFO B Read Index Register */
  FLEXRAY_RFMIDAFVR_tag RFMIDAFVR;     /* Receive FIFO Message ID Acceptance Filter Value Register */
  FLEXRAY_RFMIDAFMR_tag RFMIDAFMR;     /* Receive FIFO Message ID Acceptance Filter Mask Register */
  FLEXRAY_RFFIDRFVR_tag RFFIDRFVR;     /* Receive FIFO Frame ID Rejection Filter Value Register */
  FLEXRAY_RFFIDRFMR_tag RFFIDRFMR;     /* Receive FIFO Frame ID Rejection Filter Mask Register */
  FLEXRAY_RFRFCFR_tag RFRFCFR;         /* Receive FIFO Range Filter Configuration Register */
  FLEXRAY_RFRFCTR_tag RFRFCTR;         /* Receive FIFO Range Filter Control Register */
  FLEXRAY_LDTXSLAR_tag LDTXSLAR;       /* Last Dynamic Transmit Slot Channel A Register */
  FLEXRAY_LDTXSLBR_tag LDTXSLBR;       /* Last Dynamic Transmit Slot Channel B Register */
  FLEXRAY_PCR0_tag PCR0;               /* Protocol Configuration Register 0 */
  FLEXRAY_PCR1_tag PCR1;               /* Protocol Configuration Register 1 */
  FLEXRAY_PCR2_tag PCR2;               /* Protocol Configuration Register 2 */
  FLEXRAY_PCR3_tag PCR3;               /* Protocol Configuration Register 3 */
  FLEXRAY_PCR4_tag PCR4;               /* Protocol Configuration Register 4 */
  FLEXRAY_PCR5_tag PCR5;               /* Protocol Configuration Register 5 */
  FLEXRAY_PCR6_tag PCR6;               /* Protocol Configuration Register 6 */
  FLEXRAY_PCR7_tag PCR7;               /* Protocol Configuration Register 7 */
  FLEXRAY_PCR8_tag PCR8;               /* Protocol Configuration Register 8 */
  FLEXRAY_PCR9_tag PCR9;               /* Protocol Configuration Register 9 */
  FLEXRAY_PCR10_tag PCR10;             /* Protocol Configuration Register 10 */
  FLEXRAY_PCR11_tag PCR11;             /* Protocol Configuration Register 11 */
  FLEXRAY_PCR12_tag PCR12;             /* Protocol Configuration Register 12 */
  FLEXRAY_PCR13_tag PCR13;             /* Protocol Configuration Register 13 */
  FLEXRAY_PCR14_tag PCR14;             /* Protocol Configuration Register 14 */
  FLEXRAY_PCR15_tag PCR15;             /* Protocol Configuration Register 15 */
  FLEXRAY_PCR16_tag PCR16;             /* Protocol Configuration Register 16 */
  FLEXRAY_PCR17_tag PCR17;             /* Protocol Configuration Register 17 */
  FLEXRAY_PCR18_tag PCR18;             /* Protocol Configuration Register 18 */
  FLEXRAY_PCR19_tag PCR19;             /* Protocol Configuration Register 19 */
  FLEXRAY_PCR20_tag PCR20;             /* Protocol Configuration Register 20 */
  FLEXRAY_PCR21_tag PCR21;             /* Protocol Configuration Register 21 */
  FLEXRAY_PCR22_tag PCR22;             /* Protocol Configuration Register 22 */
  FLEXRAY_PCR23_tag PCR23;             /* Protocol Configuration Register 23 */
  FLEXRAY_PCR24_tag PCR24;             /* Protocol Configuration Register 24 */
  FLEXRAY_PCR25_tag PCR25;             /* Protocol Configuration Register 25 */
  FLEXRAY_PCR26_tag PCR26;             /* Protocol Configuration Register 26 */
  FLEXRAY_PCR27_tag PCR27;             /* Protocol Configuration Register 27 */
  FLEXRAY_PCR28_tag PCR28;             /* Protocol Configuration Register 28 */
  FLEXRAY_PCR29_tag PCR29;             /* Protocol Configuration Register 29 */
  FLEXRAY_PCR30_tag PCR30;             /* Protocol Configuration Register 30 */
  FLEXRAY_STPWHR_tag STPWHR;           /* StopWatch Count High Register */
  FLEXRAY_STPWLR_tag STPWLR;           /* Stop Watch Count Low Register */
  FLEXRAY_PEOER_tag PEOER;             /* Protocol Event Output Enable and StopWatch Control Register */
  uint8_t FLEXRAY_reserved1[2];
  FLEXRAY_RFSDOR_tag RFSDOR;           /* Receive FIFO Start Data Offset Register */
  FLEXRAY_RFSYMBADHR_tag RFSYMBADHR;   /* Receive FIFO System Memory Base Address High Register */
  FLEXRAY_RFSYMBADLR_tag RFSYMBADLR;   /* Receive FIFO System Memory Base Address Low Register */
  FLEXRAY_RFPTR_tag RFPTR;             /* Receive FIFO Periodic Timer Register */
  FLEXRAY_RFFLPCR_tag RFFLPCR;         /* Receive FIFO Fill Level and POP Count Register */
  FLEXRAY_EEIFER_tag EEIFER;           /* ECC Error Interrupt Flag and Enable Register */
  FLEXRAY_EERICR_tag EERICR;           /* ECC Error Report and Injection Control Register */
  FLEXRAY_EERAR_tag EERAR;             /* ECC Error Report Address Register */
  FLEXRAY_EERDR_tag EERDR;             /* ECC Error Report Data Register */
  FLEXRAY_EERCR_tag EERCR;             /* ECC Error Report Code Register */
  FLEXRAY_EEIAR_tag EEIAR;             /* ECC Error Injection Address Register */
  FLEXRAY_EEIDR_tag EEIDR;             /* ECC Error Injection Data Register */
  FLEXRAY_EEICR_tag EEICR;             /* ECC Error Injection Code Register */
  uint8_t FLEXRAY_reserved2[1792];
  FLEXRAY_MB_tag MB[256];
  FLEXRAY_MBDOR_tag MBDOR[260];        /* Message Buffer Data Field Offset Register */
  uint8_t FLEXRAY_reserved3[8];
  FLEXRAY_LEETR_tag LEETR[6];          /* LRAM ECC Error Test Register */
};


/* ============================================================================
   =============================== Module: FLEXTIMER ==========================
   ============================================================================ */

typedef union FLEXTIMER_SC_union_tag { /* Status And Control */
  vuint32_t R;
  struct {
    vuint32_t PS:3;                    /* Prescale Factor Selection */
    vuint32_t CLKS:2;                  /* Clock Source Selection */
    vuint32_t CPWMS:1;                 /* Center-Aligned PWM Select */
    vuint32_t RIE:1;                   /* Reload Point Interrupt Enable */
    vuint32_t RF:1;                    /* Reload Flag */
    vuint32_t TOIE:1;                  /* Timer Overflow Interrupt Enable */
    vuint32_t TOF:1;                   /* Timer Overflow Flag */
    vuint32_t _unused_10:6;            /* Reserved */
    vuint32_t PWMEN0:1;                /* Channel 0 PWM enable bit */
    vuint32_t PWMEN1:1;                /* Channel 1 PWM enable bit */
    vuint32_t PWMEN2:1;                /* Channel 2 PWM enable bit */
    vuint32_t PWMEN3:1;                /* Channel 3 PWM enable bit */
    vuint32_t PWMEN4:1;                /* Channel 4 PWM enable bit */
    vuint32_t PWMEN5:1;                /* Channel 5 PWM enable bit */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t FLTPS:4;                 /* Filter Prescaler */
    vuint32_t _unused_28:4;            /* Reserved */
  } B;
} FLEXTIMER_SC_tag;

typedef union FLEXTIMER_CNT_union_tag { /* Counter */
  vuint32_t R;
  struct {
    vuint32_t COUNT:16;                /* Counter Value */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} FLEXTIMER_CNT_tag;

typedef union FLEXTIMER_MOD_union_tag { /* Modulo */
  vuint32_t R;
  struct {
    vuint32_t MOD:16;                  /* MOD */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} FLEXTIMER_MOD_tag;

typedef union FLEXTIMER_CONTROLS_CSC_union_tag { /* Channel (n) Status And Control */
  vuint32_t R;
  struct {
    vuint32_t DMA:1;                   /* DMA Enable */
    vuint32_t ICRST:1;                 /* FTM counter reset by the selected input capture event. */
    vuint32_t ELSA:1;                  /* Channel (n) Edge or Level Select */
    vuint32_t ELSB:1;                  /* Channel (n) Edge or Level Select */
    vuint32_t MSA:1;                   /* Channel (n) Mode Select */
    vuint32_t MSB:1;                   /* Channel (n) Mode Select */
    vuint32_t CHIE:1;                  /* Channel (n) Interrupt Enable */
    vuint32_t CHF:1;                   /* Channel (n) Flag */
    vuint32_t TRIGMODE:1;              /* Trigger mode control */
    vuint32_t CHIS:1;                  /* Channel (n) Input State */
    vuint32_t CHOV:1;                  /* Channel (n) Output Value */
    vuint32_t _unused_11:21;           /* Reserved */
  } B;
} FLEXTIMER_CONTROLS_CSC_tag;

typedef union FLEXTIMER_CONTROLS_CV_union_tag { /* Channel (n) Value */
  vuint32_t R;
  struct {
    vuint32_t VAL:16;                  /* Channel Value */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} FLEXTIMER_CONTROLS_CV_tag;

typedef struct FLEXTIMER_CONTROLS_struct_tag {
  FLEXTIMER_CONTROLS_CSC_tag CSC;      /* Channel (n) Status And Control */
  FLEXTIMER_CONTROLS_CV_tag CV;        /* Channel (n) Value */
} FLEXTIMER_CONTROLS_tag;

typedef union FLEXTIMER_CNTIN_union_tag { /* Counter Initial Value */
  vuint32_t R;
  struct {
    vuint32_t INIT:16;                 /* INIT */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} FLEXTIMER_CNTIN_tag;

typedef union FLEXTIMER_STATUS_union_tag { /* Capture And Compare Status */
  vuint32_t R;
  struct {
    vuint32_t CH0F:1;                  /* Channel 0 Flag */
    vuint32_t CH1F:1;                  /* Channel 1 Flag */
    vuint32_t CH2F:1;                  /* Channel 2 Flag */
    vuint32_t CH3F:1;                  /* Channel 3 Flag */
    vuint32_t CH4F:1;                  /* Channel 4 Flag */
    vuint32_t CH5F:1;                  /* Channel 5 Flag */
    vuint32_t _unused_6:26;            /* Reserved */
  } B;
} FLEXTIMER_STATUS_tag;

typedef union FLEXTIMER_MODE_union_tag { /* Features Mode Selection */
  vuint32_t R;
  struct {
    vuint32_t FTMEN:1;                 /* FTM Enable */
    vuint32_t INIT:1;                  /* Initialize The Channels Output */
    vuint32_t WPDIS:1;                 /* Write Protection Disable */
    vuint32_t PWMSYNC:1;               /* PWM Synchronization Mode */
    vuint32_t CAPTEST:1;               /* Capture Test Mode Enable */
    vuint32_t _unused_5:3;             /* Reserved */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} FLEXTIMER_MODE_tag;

typedef union FLEXTIMER_SYNC_union_tag { /* Synchronization */
  vuint32_t R;
  struct {
    vuint32_t CNTMIN:1;                /* Minimum Loading Point Enable */
    vuint32_t CNTMAX:1;                /* Maximum Loading Point Enable */
    vuint32_t REINIT:1;                /* FTM Counter Reinitialization by Synchronization */
    vuint32_t SYNCHOM:1;               /* Output Mask Synchronization */
    vuint32_t TRIG0:1;                 /* PWM Synchronization Hardware Trigger 0 */
    vuint32_t TRIG1:1;                 /* PWM Synchronization Hardware Trigger 1 */
    vuint32_t TRIG2:1;                 /* PWM Synchronization Hardware Trigger 2 */
    vuint32_t SWSYNC:1;                /* PWM Synchronization Software Trigger */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} FLEXTIMER_SYNC_tag;

typedef union FLEXTIMER_OUTINIT_union_tag { /* Initial State For Channels Output */
  vuint32_t R;
  struct {
    vuint32_t CH0OI:1;                 /* Channel 0 Output Initialization Value */
    vuint32_t CH1OI:1;                 /* Channel 1 Output Initialization Value */
    vuint32_t CH2OI:1;                 /* Channel 2 Output Initialization Value */
    vuint32_t CH3OI:1;                 /* Channel 3 Output Initialization Value */
    vuint32_t CH4OI:1;                 /* Channel 4 Output Initialization Value */
    vuint32_t CH5OI:1;                 /* Channel 5 Output Initialization Value */
    vuint32_t _unused_6:26;            /* Reserved */
  } B;
} FLEXTIMER_OUTINIT_tag;

typedef union FLEXTIMER_OUTMASK_union_tag { /* Output Mask */
  vuint32_t R;
  struct {
    vuint32_t CH0OM:1;                 /* Channel 0 Output Mask */
    vuint32_t CH1OM:1;                 /* Channel 1 Output Mask */
    vuint32_t CH2OM:1;                 /* Channel 2 Output Mask */
    vuint32_t CH3OM:1;                 /* Channel 3 Output Mask */
    vuint32_t CH4OM:1;                 /* Channel 4 Output Mask */
    vuint32_t CH5OM:1;                 /* Channel 5 Output Mask */
    vuint32_t _unused_6:26;            /* Reserved */
  } B;
} FLEXTIMER_OUTMASK_tag;

typedef union FLEXTIMER_COMBINE_union_tag { /* Function For Linked Channels */
  vuint32_t R;
  struct {
    vuint32_t COMBINE0:1;              /* Combine Channels For n = 0 */
    vuint32_t COMP0:1;                 /* Complement Of Channel (n) For n = 0 */
    vuint32_t DECAPEN0:1;              /* Dual Edge Capture Mode Enable For n = 0 */
    vuint32_t DECAP0:1;                /* Dual Edge Capture Mode Captures For n = 0 */
    vuint32_t DTEN0:1;                 /* Deadtime Enable For n = 0 */
    vuint32_t SYNCEN0:1;               /* Synchronization Enable For n = 0 */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t MCOMBINE0:1;             /* Modified Combine Mode For n = 0 */
    vuint32_t COMBINE1:1;              /* Combine Channels For n = 2 */
    vuint32_t COMP1:1;                 /* Complement Of Channel (n) For n = 2 */
    vuint32_t DECAPEN1:1;              /* Dual Edge Capture Mode Enable For n = 2 */
    vuint32_t DECAP1:1;                /* Dual Edge Capture Mode Captures For n = 2 */
    vuint32_t DTEN1:1;                 /* Deadtime Enable For n = 2 */
    vuint32_t SYNCEN1:1;               /* Synchronization Enable For n = 2 */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t MCOMBINE1:1;             /* Modified Combine Mode For n = 2 */
    vuint32_t COMBINE2:1;              /* Combine Channels For n = 4 */
    vuint32_t COMP2:1;                 /* Complement Of Channel (n) For n = 4 */
    vuint32_t DECAPEN2:1;              /* Dual Edge Capture Mode Enable For n = 4 */
    vuint32_t DECAP2:1;                /* Dual Edge Capture Mode Captures For n = 4 */
    vuint32_t DTEN2:1;                 /* Deadtime Enable For n = 4 */
    vuint32_t SYNCEN2:1;               /* Synchronization Enable For n = 4 */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t MCOMBINE2:1;             /* Modified Combine Mode For n = 4 */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} FLEXTIMER_COMBINE_tag;

typedef union FLEXTIMER_DEADTIME_union_tag { /* Deadtime Configuration */
  vuint32_t R;
  struct {
    vuint32_t DTVAL:6;                 /* Deadtime Value */
    vuint32_t DTPS:2;                  /* Deadtime Prescaler Value */
    vuint32_t _unused_8:8;             /* Reserved */
    vuint32_t DTVALEX:4;               /* Extended Deadtime Value */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} FLEXTIMER_DEADTIME_tag;

typedef union FLEXTIMER_EXTTRIG_union_tag { /* FTM External Trigger */
  vuint32_t R;
  struct {
    vuint32_t CH2TRIG:1;               /* Channel 2 External Trigger Enable */
    vuint32_t CH3TRIG:1;               /* Channel 3 External Trigger Enable */
    vuint32_t CH4TRIG:1;               /* Channel 4 External Trigger Enable */
    vuint32_t CH5TRIG:1;               /* Channel 5 External Trigger Enable */
    vuint32_t CH0TRIG:1;               /* Channel 0 External Trigger Enable */
    vuint32_t CH1TRIG:1;               /* Channel 1 External Trigger Enable */
    vuint32_t INITTRIGEN:1;            /* Initialization Trigger Enable */
    vuint32_t TRIGF:1;                 /* Channel Trigger Flag */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t _unused_10:22;           /* Reserved */
  } B;
} FLEXTIMER_EXTTRIG_tag;

typedef union FLEXTIMER_POL_union_tag { /* Channels Polarity */
  vuint32_t R;
  struct {
    vuint32_t POL0:1;                  /* Channel 0 Polarity */
    vuint32_t POL1:1;                  /* Channel 1 Polarity */
    vuint32_t POL2:1;                  /* Channel 2 Polarity */
    vuint32_t POL3:1;                  /* Channel 3 Polarity */
    vuint32_t POL4:1;                  /* Channel 4 Polarity */
    vuint32_t POL5:1;                  /* Channel 5 Polarity */
    vuint32_t _unused_6:26;            /* Reserved */
  } B;
} FLEXTIMER_POL_tag;

typedef union FLEXTIMER_FMS_union_tag { /* Fault Mode Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t WPEN:1;                  /* Write Protection Enable */
    vuint32_t _unused_7:25;            /* Reserved */
  } B;
} FLEXTIMER_FMS_tag;

typedef union FLEXTIMER_FILTER_union_tag { /* Input Capture Filter Control */
  vuint32_t R;
  struct {
    vuint32_t CH0FVAL:4;               /* Channel 0 Input Filter */
    vuint32_t CH1FVAL:4;               /* Channel 1 Input Filter */
    vuint32_t CH2FVAL:4;               /* Channel 2 Input Filter */
    vuint32_t CH3FVAL:4;               /* Channel 3 Input Filter */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} FLEXTIMER_FILTER_tag;

typedef union FLEXTIMER_QDCTRL_union_tag { /* Quadrature Decoder Control And Status */
  vuint32_t R;
  struct {
    vuint32_t QUADEN:1;                /* Quadrature Decoder Mode Enable */
    vuint32_t TOFDIR:1;                /* Timer Overflow Direction In Quadrature Decoder Mode */
    vuint32_t QUADIR:1;                /* FTM Counter Direction In Quadrature Decoder Mode */
    vuint32_t QUADMODE:1;              /* Quadrature Decoder Mode */
    vuint32_t PHBPOL:1;                /* Phase B Input Polarity */
    vuint32_t PHAPOL:1;                /* Phase A Input Polarity */
    vuint32_t PHBFLTREN:1;             /* Phase B Input Filter Enable */
    vuint32_t PHAFLTREN:1;             /* Phase A Input Filter Enable */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} FLEXTIMER_QDCTRL_tag;

typedef union FLEXTIMER_CONF_union_tag { /* Configuration */
  vuint32_t R;
  struct {
    vuint32_t LDFQ:5;                  /* Frequency of the Reload Opportunities */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t BDMMODE:2;               /* Debug Mode */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t GTBEEN:1;                /* Global Time Base Enable */
    vuint32_t GTBEOUT:1;               /* Global Time Base Output */
    vuint32_t ITRIGR:1;                /* Initialization trigger on Reload Point */
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} FLEXTIMER_CONF_tag;

typedef union FLEXTIMER_SYNCONF_union_tag { /* Synchronization Configuration */
  vuint32_t R;
  struct {
    vuint32_t HWTRIGMODE:1;            /* Hardware Trigger Mode */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t CNTINC:1;                /* CNTIN Register Synchronization */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t INVC:1;                  /* INVCTRL Register Synchronization */
    vuint32_t SWOC:1;                  /* SWOCTRL Register Synchronization */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t SYNCMODE:1;              /* Synchronization Mode */
    vuint32_t SWRSTCNT:1;              /* FTM counter synchronization is activated by the software trigger */
    vuint32_t SWWRBUF:1;               /* MOD, HCR, CNTIN, and CV registers synchronization is activated by the software trigger */
    vuint32_t SWOM:1;                  /* Output mask synchronization is activated by the software trigger */
    vuint32_t SWINVC:1;                /* Inverting control synchronization is activated by the software trigger */
    vuint32_t SWSOC:1;                 /* Software output control synchronization is activated by the software trigger */
    vuint32_t _unused_13:3;            /* Reserved */
    vuint32_t HWRSTCNT:1;              /* FTM counter synchronization is activated by a hardware trigger */
    vuint32_t HWWRBUF:1;               /* MOD, HCR, CNTIN, and CV registers synchronization is activated by a hardware trigger */
    vuint32_t HWOM:1;                  /* Output mask synchronization is activated by a hardware trigger */
    vuint32_t HWINVC:1;                /* Inverting control synchronization is activated by a hardware trigger */
    vuint32_t HWSOC:1;                 /* Software output control synchronization is activated by a hardware trigger */
    vuint32_t _unused_21:11;           /* Reserved */
  } B;
} FLEXTIMER_SYNCONF_tag;

typedef union FLEXTIMER_INVCTRL_union_tag { /* FTM Inverting Control */
  vuint32_t R;
  struct {
    vuint32_t INV0EN:1;                /* Pair Channels 0 Inverting Enable */
    vuint32_t INV1EN:1;                /* Pair Channels 1 Inverting Enable */
    vuint32_t INV2EN:1;                /* Pair Channels 2 Inverting Enable */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:28;            /* Reserved */
  } B;
} FLEXTIMER_INVCTRL_tag;

typedef union FLEXTIMER_SWOCTRL_union_tag { /* FTM Software Output Control */
  vuint32_t R;
  struct {
    vuint32_t CH0OC:1;                 /* Channel 0 Software Output Control Enable */
    vuint32_t CH1OC:1;                 /* Channel 1 Software Output Control Enable */
    vuint32_t CH2OC:1;                 /* Channel 2 Software Output Control Enable */
    vuint32_t CH3OC:1;                 /* Channel 3 Software Output Control Enable */
    vuint32_t CH4OC:1;                 /* Channel 4 Software Output Control Enable */
    vuint32_t CH5OC:1;                 /* Channel 5 Software Output Control Enable */
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t CH0OCV:1;                /* Channel 0 Software Output Control Value */
    vuint32_t CH1OCV:1;                /* Channel 1 Software Output Control Value */
    vuint32_t CH2OCV:1;                /* Channel 2 Software Output Control Value */
    vuint32_t CH3OCV:1;                /* Channel 3 Software Output Control Value */
    vuint32_t CH4OCV:1;                /* Channel 4 Software Output Control Value */
    vuint32_t CH5OCV:1;                /* Channel 5 Software Output Control Value */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} FLEXTIMER_SWOCTRL_tag;

typedef union FLEXTIMER_PWMLOAD_union_tag { /* FTM PWM Load */
  vuint32_t R;
  struct {
    vuint32_t CH0SEL:1;                /* Channel 0 Select */
    vuint32_t CH1SEL:1;                /* Channel 1 Select */
    vuint32_t CH2SEL:1;                /* Channel 2 Select */
    vuint32_t CH3SEL:1;                /* Channel 3 Select */
    vuint32_t CH4SEL:1;                /* Channel 4 Select */
    vuint32_t CH5SEL:1;                /* Channel 5 Select */
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t HCSEL:1;                 /* Half Cycle Select */
    vuint32_t LDOK:1;                  /* Load Enable */
    vuint32_t GLEN:1;                  /* Global Load Enable */
    vuint32_t GLDOK:1;                 /* Global Load OK */
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} FLEXTIMER_PWMLOAD_tag;

typedef union FLEXTIMER_HCR_union_tag { /* Half Cycle Register */
  vuint32_t R;
  struct {
    vuint32_t HCVAL:16;                /* Half Cycle Value */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} FLEXTIMER_HCR_tag;

typedef union FLEXTIMER_MOD_MIRROR_union_tag { /* Mirror of Modulo Value */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:11;            /* Reserved */
    vuint32_t FRACMOD:5;               /* Modulo Fractional Value */
    vuint32_t MOD:16;                  /* Mirror of the Modulo Integer Value */
  } B;
} FLEXTIMER_MOD_MIRROR_tag;

typedef union FLEXTIMER_CV_MIRROR_union_tag { /* Mirror of Channel (n) Match Value */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:11;            /* Reserved */
    vuint32_t FRACVAL:5;               /* Channel (n) Match Fractional Value */
    vuint32_t VAL:16;                  /* Mirror of the Channel (n) Match Integer Value */
  } B;
} FLEXTIMER_CV_MIRROR_tag;

struct FLEXTIMER_tag {
  FLEXTIMER_SC_tag SC;                 /* Status And Control */
  FLEXTIMER_CNT_tag CNT;               /* Counter */
  FLEXTIMER_MOD_tag MOD;               /* Modulo */
  FLEXTIMER_CONTROLS_tag CONTROLS[6];
  uint8_t FLEXTIMER_reserved0[16];
  FLEXTIMER_CNTIN_tag CNTIN;           /* Counter Initial Value */
  FLEXTIMER_STATUS_tag STATUS;         /* Capture And Compare Status */
  FLEXTIMER_MODE_tag MODE;             /* Features Mode Selection */
  FLEXTIMER_SYNC_tag SYNC;             /* Synchronization */
  FLEXTIMER_OUTINIT_tag OUTINIT;       /* Initial State For Channels Output */
  FLEXTIMER_OUTMASK_tag OUTMASK;       /* Output Mask */
  FLEXTIMER_COMBINE_tag COMBINE;       /* Function For Linked Channels */
  FLEXTIMER_DEADTIME_tag DEADTIME;     /* Deadtime Configuration */
  FLEXTIMER_EXTTRIG_tag EXTTRIG;       /* FTM External Trigger */
  FLEXTIMER_POL_tag POL;               /* Channels Polarity */
  FLEXTIMER_FMS_tag FMS;               /* Fault Mode Status */
  FLEXTIMER_FILTER_tag FILTER;         /* Input Capture Filter Control */
  uint8_t FLEXTIMER_reserved1[4];
  FLEXTIMER_QDCTRL_tag QDCTRL;         /* Quadrature Decoder Control And Status */
  FLEXTIMER_CONF_tag CONF;             /* Configuration */
  uint8_t FLEXTIMER_reserved2[4];
  FLEXTIMER_SYNCONF_tag SYNCONF;       /* Synchronization Configuration */
  FLEXTIMER_INVCTRL_tag INVCTRL;       /* FTM Inverting Control */
  FLEXTIMER_SWOCTRL_tag SWOCTRL;       /* FTM Software Output Control */
  FLEXTIMER_PWMLOAD_tag PWMLOAD;       /* FTM PWM Load */
  FLEXTIMER_HCR_tag HCR;               /* Half Cycle Register */
  uint8_t FLEXTIMER_reserved3[352];
  FLEXTIMER_MOD_MIRROR_tag MOD_MIRROR; /* Mirror of Modulo Value */
  FLEXTIMER_CV_MIRROR_tag CV_MIRROR[6]; /* Mirror of Channel (n) Match Value */
};


/* ============================================================================
   =============================== Module: FSC ================================
   ============================================================================ */

typedef union FSC_SCBISTC_union_tag {  /* FSC BIST Control */
  vuint32_t R;
  struct {
    vuint32_t BISTSTART:1;             /* BIST Start */
    vuint32_t BISTSTEP:1;              /* BIST Step */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} FSC_SCBISTC_tag;

typedef union FSC_SCBISTA_union_tag {  /* FSC BIST Activity */
  vuint32_t R;
  struct {
    vuint32_t BISTDONE:5;              /* BIST Done */
    vuint32_t BISTERR:5;               /* BIST Error */
    vuint32_t _unused_10:22;           /* Reserved */
  } B;
} FSC_SCBISTA_tag;

typedef union FSC_SCCETH_union_tag {   /* FSC Correctable Errors Threshold */
  vuint32_t R;
  struct {
    vuint32_t CERRTHRES:8;             /* Correctable Errors Threshold */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} FSC_SCCETH_tag;

typedef union FSC_SCLF0_union_tag {    /* FSC Latent Fault */
  vuint32_t R;
  struct {
    vuint32_t LATENTFAULT:6;           /* Latent Fault */
    vuint32_t _unused_6:26;            /* Reserved */
  } B;
} FSC_SCLF0_tag;

typedef union FSC_SCMF0_union_tag {    /* FSC Mission Fault */
  vuint32_t R;
  struct {
    vuint32_t MISSIONFAULT:6;          /* Mission Faults */
    vuint32_t _unused_6:26;            /* Reserved */
  } B;
} FSC_SCMF0_tag;

typedef union FSC_SCCETHF0_union_tag { /* FSC Correctble Error Threshold Fault */
  vuint32_t R;
  struct {
    vuint32_t CERRTHFAULT:6;           /* Correctable Error Threshold Fault */
    vuint32_t _unused_6:26;            /* Reserved */
  } B;
} FSC_SCCETHF0_tag;

struct FSC_tag {
  FSC_SCBISTC_tag SCBISTC;             /* FSC BIST Control */
  FSC_SCBISTA_tag SCBISTA;             /* FSC BIST Activity */
  FSC_SCCETH_tag SCCETH;               /* FSC Correctable Errors Threshold */
  uint8_t FSC_reserved0[4];
  FSC_SCLF0_tag SCLF0;                 /* FSC Latent Fault */
  uint8_t FSC_reserved1[12];
  FSC_SCMF0_tag SCMF0;                 /* FSC Mission Fault */
  uint8_t FSC_reserved2[12];
  FSC_SCCETHF0_tag SCCETHF0;           /* FSC Correctble Error Threshold Fault */
};


/* ============================================================================
   =============================== Module: FXOSC ==============================
   ============================================================================ */

typedef union FXOSC_CTRL_union_tag {   /* FXOSC Control Register */
  vuint32_t R;
  struct {
    vuint32_t OSCON:1;                 /* Crystal oscillator power-down control */
    vuint32_t _unused_1:1;
    vuint32_t _unused_2:1;
    vuint32_t _unused_3:1;
    vuint32_t GM_SEL:4;                /* Crystal overdrive protection */
    vuint32_t _unused_8:8;
    vuint32_t EOCV:8;                  /* End of count value */
    vuint32_t COMP_EN:1;               /* Comparator enable */
    vuint32_t _unused_25:1;
    vuint32_t _unused_26:4;
    vuint32_t _unused_30:1;
    vuint32_t OSC_BYP:1;               /* Oscillator bypass */
  } B;
} FXOSC_CTRL_tag;

typedef union FXOSC_STAT_union_tag {   /* Oscillator Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;
    vuint32_t OSC_STAT:1;              /* Crystal oscillator status */
  } B;
} FXOSC_STAT_tag;

struct FXOSC_tag {
  FXOSC_CTRL_tag CTRL;                 /* FXOSC Control Register */
  FXOSC_STAT_tag STAT;                 /* Oscillator Status Register */
};


/* ============================================================================
   =============================== Module: GMAC ===============================
   ============================================================================ */

typedef union GMAC_MAC_CONFIGURATION_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RE:1;                    /* Receiver Enable When this bit is set, the Rx state machine of the MAC is enabled for receiving packets from the GMII or MII interface. When this bit is reset, the MAC Rx state machine is disabled after it completes the reception of the current packet. The Rx state machine does not receive any more packets from the GMII or MII interface. */
    vuint32_t TE:1;                    /* Transmitter Enable When this bit is set, the Tx state machine of the MAC is enabled for transmission on the GMII or MII interface. When this bit is reset, the MAC Tx state machine is disabled after it completes the transmission of the current packet. The Tx state machine does not transmit any more packets. */
    vuint32_t PRELEN:2;                /* Preamble Length for Transmit packets These bits control the number of preamble bytes that are added to the beginning of every Tx packet. The preamble reduction occurs only when the MAC is operating in the full-duplex mode. */
    vuint32_t DC:1;                    /* Deferral Check When this bit is set, the deferral check function is enabled in the MAC. The MAC issues a Packet Abort status, along with the excessive deferral error bit set in the Tx packet status, when the Tx state machine is deferred for more than 24,288 bit times in 10 or 100 Mbps mode. If the MAC is configured for 1000/2500 Mbps operation, the threshold for deferral is 155,680 bits times. Deferral begins when the transmitter is ready to transmit, but it is prevented because of an active carrier sense signal (CRS) on GMII or MII. The defer time is not cumulative. For example, if the transmitter defers for 10,000 bit times because the CRS signal is active and the CRS signal becomes inactive, the transmitter transmits and collision happens. Because of collision, the transmitter needs to back off and then defer again after back off completion. In such a scenario, the deferral timer is reset to 0, and it is restarted. When this bit is reset, the deferral check function is disabled and the MAC defers until the CRS signal goes inactive. This bit is applicable only in the half-duplex mode. */
    vuint32_t BL:2;                    /* Back-Off Limit The back-off limit determines the random integer number (r) of slot time delays (4,096 bit times for 1000/2500 Mbps; 512 bit times for 10/100 Mbps) for which the MAC waits before rescheduling a transmission attempt during retries after a collision. n = retransmission attempt. The random integer r takes the value in the range 0 <= r < 2^k This bit is applicable only in the half-duplex mode. */
    vuint32_t _unused_7:1;             /* Reserved. */
    vuint32_t DR:1;                    /* Disable Retry When this bit is set, the MAC attempts only one transmission. When a collision occurs on the GMII or MII interface, the MAC ignores the current packet transmission and reports a Packet Abort with excessive collision error in the Tx packet status. When this bit is reset, the MAC retries based on the settings of the BL field. This bit is applicable only in the half-duplex mode. */
    vuint32_t DCRS:1;                  /* Disable Carrier Sense During Transmission When this bit is set, the MAC transmitter ignores the (G)MII CRS signal during packet transmission in the half-duplex mode. As a result, no errors are generated because of Loss of Carrier or No Carrier during transmission. When this bit is reset, the MAC transmitter generates errors because of Carrier Sense. The MAC can even abort the transmission. */
    vuint32_t DO:1;                    /* Disable Receive Own When this bit is set, the MAC disables the reception of packets when the gmii_txen_o is asserted in the half-duplex mode. When this bit is reset, the MAC receives all packets given by the PHY. This bit is not applicable in the full-duplex mode. */
    vuint32_t ECRSFD:1;                /* Enable Carrier Sense Before Transmission in Full-Duplex Mode When this bit is set, the MAC transmitter checks the CRS signal before packet transmission in the full-duplex mode. The MAC starts the transmission only when the CRS signal is low. When this bit is reset, the MAC transmitter ignores the status of the CRS signal. */
    vuint32_t LM:1;                    /* Loopback Mode When this bit is set, the MAC operates in the loopback mode at GMII or MII. The (G)MII Rx clock input (clk_rx_i) is required for the loopback to work properly. This is because the Tx clock is not internally looped back. */
    vuint32_t DM:1;                    /* Duplex Mode When this bit is set, the MAC operates in the full-duplex mode in which it can transmit and receive simultaneously. This bit is RO with default value of 1'b1 in the full-duplex-only configurations. */
    vuint32_t FES:1;                   /* Speed This bit selects the speed mode. The mac_speed_o[0] signal reflects the value of this bit. */
    vuint32_t PS:1;                    /* Port Select This bit selects the Ethernet line speed. This bit, along with Bit 14, selects the exact line speed. In the 10/100 Mbps-only (always 1) or 1000 Mbps-only (always 0) configurations, this bit is read-only (RO) with appropriate value. In default 10/100/1000 Mbps configurations, this bit is read-write (R/W). The mac_speed_o[1] signal reflects the value of this bit. */
    vuint32_t JE:1;                    /* Jumbo Packet Enable When this bit is set, the MAC allows jumbo packets of 9,018 bytes (9,022 bytes for VLAN tagged packets) without reporting a giant packet error in the Rx packet status. */
    vuint32_t JD:1;                    /* Jabber Disable When this bit is set, the MAC disables the jabber timer on the transmitter. The MAC can transfer packets of up to 16,383 bytes. When this bit is reset, if the application sends more than 2,048 bytes of data (10,240 if JE is set high) during transmission, the MAC does not send rest of the bytes in that packet. */
    vuint32_t BE:1;                    /* Packet Burst Enable When this bit is set, the MAC allows packet bursting during transmission in the GMII half-duplex mode. */
    vuint32_t WD:1;                    /* Watchdog Disable When this bit is set, the MAC disables the watchdog timer on the receiver. The MAC can receive packets of up to 16,383 bytes. When this bit is reset, the MAC does not allow more than 2,048 bytes (10,240 if JE is set high) of the packet being received. The MAC cuts off any bytes received after 2,048 bytes. */
    vuint32_t ACS:1;                   /* Automatic Pad or CRC Stripping When this bit is set, the MAC strips the Pad or FCS field on the incoming packets only if the value of the length field is less than 1,536 bytes. All received packets with length field greater than or equal to 1,536 bytes are passed to the application without stripping the Pad or FCS field. When this bit is reset, the MAC passes all incoming packets to the application, without any modification. Note: For information about how the settings of CST bit and this bit impact the packet length, see the Table, Packet Length based on the CST and ACS Bit . */
    vuint32_t CST:1;                   /* CRC stripping for Type packets When this bit is set, the last four bytes (FCS) of all packets of Ether type (type field greater than 1,536) are stripped and dropped before forwarding the packet to the application. Note: For information about how the settings of the ACS bit and this bit impact the packet length, see the Table, Packet Length based on the CST and ACS Bits. */
    vuint32_t S2KP:1;                  /* IEEE 802.3as Support for 2K Packets When this bit is set, the MAC considers all packets with up to 2,000 bytes length as normal packets. When the JE bit is not set, the MAC considers all received packets of size more than 2K bytes as Giant packets. When this bit is reset and the JE bit is not set, the MAC considers all received packets of size more than 1,518 bytes (1,522 bytes for tagged) as giant packets. For more information about how the setting of this bit and the JE bit impact the Giant packet status, see the Table, Gaint Packet Status based on S2KP and JE Bits. Note: When the JE bit is set, setting this bit has no effect on the giant packet status. */
    vuint32_t GPSLCE:1;                /* Giant Packet Size Limit Control Enable When this bit is set, the MAC considers the value in GPSL field in MAC_Ext_Configuration register to declare a received packet as Giant packet. This field must be programmed to more than 1,518 bytes. Otherwise, the MAC considers 1,518 bytes as giant packet limit. When this bit is reset, the MAC considers a received packet as Giant packet when its size is greater than 1,518 bytes (1522 bytes for tagged packet). The watchdog timeout limit, Jumbo Packet Enable and 2K Packet Enable have higher precedence over this bit, that is the MAC considers a received packet as Giant packet when its size is greater than 9,018 bytes (9,022 bytes for tagged packet) with Jumbo Packet Enabled and greater than 2,000 bytes with 2K Packet Enabled. The watchdog timeout, if enabled, terminates the received packet when watchdog limit is reached. Therefore, the programmed giant packet limit should be less than the watchdog limit to get the giant packet status. */
    vuint32_t IPG:3;                   /* Inter-Packet Gap These bits control the minimum IPG between packets during transmission. This range of minimum IPG is valid in full-duplex mode. In the half-duplex mode, the minimum IPG can be configured only for 64-bit times (IPG = 100). Lower values are not considered. When a JAM pattern is being transmitted because of backpressure activation, the MAC does not consider the minimum IPG. The above function (IPG less than 96 bit times) is valid only when EIPGEN bit in MAC_Ext_Configuration register is reset. When EIPGEN is set, then the minimum IPG (greater than 96 bit times) is controlled as per the description given in EIPG field in MAC_Ext_Configuration register. */
    vuint32_t IPC:1;                   /* Checksum Offload When set, this bit enables the IPv4 header checksum checking and IPv4 or IPv6 TCP, UDP, or ICMP payload checksum checking. When this bit is reset, the COE function in the receiver is disabled. The Layer 3 and Layer 4 Packet Filter and Enable Split Header features automatically selects the IPC Full Checksum Offload Engine on the Receive side. When any of these features are enabled, you must set the IPC bit. */
    vuint32_t SARC:3;                  /* Source Address Insertion or Replacement Control This field controls the source address insertion or replacement for all transmitted packets. Bit 30 specifies which MAC Address register (0 or 1) is used for source address insertion or replacement based on the values of Bits[29:28]: 2'b0x: - The mti_sa_ctrl_i and ati_sa_ctrl_i input signals control the SA field generation. 2'b10: - If Bit 30 is set to 0, the MAC inserts the content of the MAC Address 0 registers in the SA field of all transmitted packets. - If Bit 30 is set to 1 and the Enable MAC Address Register 1 option is selected while configuring the core, the MAC inserts the content of the MAC Address 1 registers in the SA field of all transmitted packets. 2'b11: - If Bit 30 is set to 0, the MAC replaces the content of the MAC Address 0 registers in the SA field of all transmitted packets. - If Bit 30 is set to 1 and the MAC Address Register 1 is enabled, the MAC replaces the content of the MAC Address 1 registers in the SA field of all transmitted packets. Note: - Changes to this field take effect only on the start of a packet. If you write to this register field when a packet is being transmitted, only the subsequent packet can use the updated value, that is, the current packet does not use the updated value. */
    vuint32_t ARPEN:1;                 /* ARP Offload Enable When this bit is set, the MAC can recognize an incoming ARP request packet and schedules the ARP packet for transmission. It forwards the ARP packet to the application and also indicate the events in the RxStatus. When this bit is reset, the MAC receiver does not recognize any ARP packet and indicates them as Type frame in the RxStatus. This bit is available only when the Enable IPv4 ARP Offload is selected. */
  } B;
} GMAC_MAC_CONFIGURATION_tag;

typedef union GMAC_MAC_EXT_CONFIGURATION_union_tag {
  vuint32_t R;
  struct {
    vuint32_t GPSL:14;                 /* Giant Packet Size Limit If the received packet size is greater than the value programmed in this field in units of bytes, the MAC declares the received packet as Giant packet. The value programmed in this field must be greater than or equal to 1,518 bytes. Any other programmed value is considered as 1,518 bytes. For VLAN tagged packets, the MAC adds 4 bytes to the programmed value. When the Enable Double VLAN Processing option is selected, the MAC adds 8 bytes to the programmed value for double VLAN tagged packets. The value in this field is applicable when the GPSLCE bit is set in MAC_Configuration register. */
    vuint32_t _unused_14:2;            /* Reserved. */
    vuint32_t DCRCC:1;                 /* Disable CRC Checking for Received Packets When this bit is set, the MAC receiver does not check the CRC field in the received packets. When this bit is reset, the MAC receiver always checks the CRC field in the received packets. */
    vuint32_t SPEN:1;                  /* Slow Protocol Detection Enable When this bit is set, MAC processes the Slow Protocol packets (Ether Type 0x8809) and provides the Rx status. The MAC discards the Slow Protocol packets with invalid sub-types. When this bit is reset, the MAC forwards all error-free Slow Protocol packets to the application. The MAC considers such packets as normal Type packets. */
    vuint32_t USP:1;                   /* Unicast Slow Protocol Packet Detect When this bit is set, the MAC detects the Slow Protocol packets with unicast address of the station specified in the MAC_Address0_High and MAC_Address0_Low registers. The MAC also detects the Slow Protocol packets with the Slow Protocols multicast address (01-80-C2-00-00-02). When this bit is reset, the MAC detects only Slow Protocol packets with the Slow Protocol multicast address specified in the IEEE 802.3-2015, Section 5. */
    vuint32_t PDC:1;                   /* Packet Duplication Control When this bit is set, the received packet with Multicast/Broadcast Destination address is routed to multiple Receive DMA Channels. The Receive DMA Channels is identified by the DCS field of MAC_Address(#i)_High register corresponding to the MAC Address register that matches the Multicast/Broadcast Destination address in the received packet. The DCS field is interpreted to be a one-hot value, each bit corresponding to the Receive DMA Channel. When this bit is reset, the received packet is routed to single Receive DMA Channel. The Receive DMA Channel is identified by the DCS field of MAC_Address(#i)_High register corresponding to the MAC Address register that matches the Destination address in the received packet. The DCS field is interpreted as a binary value. */
    vuint32_t HDSMS:3;                 /* Maximum Size for Splitting the Header Data These bits indicate the maximum header size allowed for splitting the header data in the received packet. */
    vuint32_t _unused_23:1;            /* Reserved. */
    vuint32_t EIPGEN:1;                /* Extended Inter-Packet Gap Enable When this bit is set, the MAC interprets EIPG field and IPG field in MAC_Configuration register together as minimum IPG greater than 96 bit times in steps of 8 bit times. When this bit is reset, the MAC ignores EIPG field and interprets IPG field in MAC_Configuration register as minimum IPG less than or equal to 96 bit times in steps of 8 bit times. Note: The extended Inter-Packet Gap feature must be enabled when operating in Full-Duplex mode only. There may be undesirable effects on back-pressure function and frame transmission if it is enabled in Half-Duplex mode. */
    vuint32_t EIPG:5;                  /* Extended Inter-Packet Gap The value in this field is applicable when the EIPGEN bit is set. This field (as Most Significant bits), along with IPG field in MAC_Configuration register, gives the minimum IPG greater than 96 bit times in steps of 8 bit times: {EIPG, IPG} 8'h00 - 104 bit times 8'h01 - 112 bit times 8'h02 - 120 bit times ----------------------- 8'hFF - 2144 bit times */
    vuint32_t _unused_30:1;            /* Reserved. */
    vuint32_t _unused_31:1;            /* Reserved. */
  } B;
} GMAC_MAC_EXT_CONFIGURATION_tag;

typedef union GMAC_MAC_PACKET_FILTER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PR:1;                    /* Promiscuous Mode When this bit is set, the Address Filtering module passes all incoming packets irrespective of the destination or source address. The SA or DA Filter Fails status bits of the Rx Status Word are always cleared when PR is set. */
    vuint32_t HUC:1;                   /* Hash Unicast When this bit is set, the MAC performs the destination address filtering of unicast packets according to the hash table. When this bit is reset, the MAC performs a perfect destination address filtering for unicast packets, that is, it compares the DA field with the values programmed in DA registers. */
    vuint32_t HMC:1;                   /* Hash Multicast When this bit is set, the MAC performs the destination address filtering of received multicast packets according to the hash table. When this bit is reset, the MAC performs the perfect destination address filtering for multicast packets, that is, it compares the DA field with the values programmed in DA registers. */
    vuint32_t DAIF:1;                  /* DA Inverse Filtering When this bit is set, the Address Check block operates in inverse filtering mode for the DA address comparison for both unicast and multicast packets. When this bit is reset, normal filtering of packets is performed. */
    vuint32_t PM:1;                    /* Pass All Multicast When this bit is set, it indicates that all received packets with a multicast destination address (first bit in the destination address field is '1') are passed. When this bit is reset, filtering of multicast packet depends on HMC bit. */
    vuint32_t DBF:1;                   /* Disable Broadcast Packets When this bit is set, the AFM module blocks all incoming broadcast packets. In addition, it overrides all other filter settings. When this bit is reset, the AFM module passes all received broadcast packets. */
    vuint32_t PCF:2;                   /* Pass Control Packets These bits control the forwarding of all control packets (including unicast and multicast Pause packets). */
    vuint32_t SAIF:1;                  /* SA Inverse Filtering When this bit is set, the Address Check block operates in the inverse filtering mode for SA address comparison. If the SA of a packet matches the values programmed in the SA registers, it is marked as failing the SA Address filter. When this bit is reset, if the SA of a packet does not match the values programmed in the SA registers, it is marked as failing the SA Address filter. */
    vuint32_t SAF:1;                   /* Source Address Filter Enable When this bit is set, the MAC compares the SA field of the received packets with the values programmed in the enabled SA registers. If the comparison fails, the MAC drops the packet. When this bit is reset, the MAC forwards the received packet to the application with updated SAF bit of the Rx Status depending on the SA address comparison. Note: According to the IEEE specification, Bit 47 of the SA is reserved. However, in GMAC, the MAC compares all 48 bits. The software driver should take this into consideration while programming the MAC address registers for SA. */
    vuint32_t HPF:1;                   /* Hash or Perfect Filter When this bit is set, the address filter passes a packet if it matches either the perfect filtering or hash filtering as set by the HMC or HUC bit. When this bit is reset and the HUC or HMC bit is set, the packet is passed only if it matches the Hash filter. */
    vuint32_t _unused_11:5;            /* Reserved. */
    vuint32_t VTFE:1;                  /* VLAN Tag Filter Enable When this bit is set, the MAC drops the VLAN tagged packets that do not match the VLAN Tag. When this bit is reset, the MAC forwards all packets irrespective of the match status of the VLAN Tag. */
    vuint32_t _unused_17:3;            /* Reserved. */
    vuint32_t IPFE:1;                  /* Layer 3 and Layer 4 Filter Enable When this bit is set, the MAC drops packets that do not match the enabled Layer 3 and Layer 4 filters. If Layer 3 or Layer 4 filters are not enabled for matching, this bit does not have any effect. When this bit is reset, the MAC forwards all packets irrespective of the match status of the Layer 3 and Layer 4 fields. */
    vuint32_t DNTU:1;                  /* Drop Non-TCP/UDP over IP Packets When this bit is set, the MAC drops the non-TCP or UDP over IP packets. The MAC forward only those packets that are processed by the Layer 4 filter. When this bit is reset, the MAC forwards all non-TCP or UDP over IP packets. */
    vuint32_t _unused_22:9;            /* Reserved. */
    vuint32_t RA:1;                    /* Receive All When this bit is set, the MAC Receiver module passes all received packets to the application, irrespective of whether they pass the address filter or not. The result of the SA or DA filtering is updated (pass or fail) in the corresponding bit in the Rx Status Word. When this bit is reset, the Receiver module passes only those packets to the application that pass the SA or DA address filter. */
  } B;
} GMAC_MAC_PACKET_FILTER_tag;

typedef union GMAC_MAC_WATCHDOG_TIMEOUT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t WTO:4;                   /* Watchdog Timeout When the PWE bit is set and the WD bit of the MAC_Configuration register is reset, this field is used as watchdog timeout for a received packet. If the length of a received packet exceeds the value of this field, such packet is terminated and declared as an error packet. Note: When the PWE bit is set, the value in this field should be more than 1,522 (0x05F2). Otherwise, the IEEE 802.3-specified valid tagged packets are declared as error packets and then dropped. */
    vuint32_t _unused_4:4;             /* Reserved. */
    vuint32_t PWE:1;                   /* Programmable Watchdog Enable When this bit is set and the WD bit of the MAC_Configuration register is reset, the WTO field is used as watchdog timeout for a received packet. When this bit is cleared, the watchdog timeout for a received packet is controlled by setting of WD and JE bits in MAC_Configuration register. */
    vuint32_t _unused_9:23;            /* Reserved. */
  } B;
} GMAC_MAC_WATCHDOG_TIMEOUT_tag;

typedef union GMAC_MAC_HASH_TABLE_REG0_union_tag {
  vuint32_t R;
  struct {
    vuint32_t HT31T0:32;               /* MAC Hash Table First 32 Bits This field contains the first 32 Bits [31:0] of the Hash table. */
  } B;
} GMAC_MAC_HASH_TABLE_REG0_tag;

typedef union GMAC_MAC_HASH_TABLE_REG1_union_tag {
  vuint32_t R;
  struct {
    vuint32_t HT63T32:32;              /* MAC Hash Table Second 32 Bits This field contains the second 32 Bits [63:32] of the Hash table. */
  } B;
} GMAC_MAC_HASH_TABLE_REG1_tag;

typedef union GMAC_MAC_HASH_TABLE_REG2_union_tag {
  vuint32_t R;
  struct {
    vuint32_t HT95T64:32;              /* MAC Hash Table Third 32 Bits This field contains the third 32 Bits [95:64] of the Hash table. */
  } B;
} GMAC_MAC_HASH_TABLE_REG2_tag;

typedef union GMAC_MAC_HASH_TABLE_REG3_union_tag {
  vuint32_t R;
  struct {
    vuint32_t HT127T96:32;             /* MAC Hash Table Fourth 32 Bits This field contains the fourth 32 Bits [127:96] of the Hash table. */
  } B;
} GMAC_MAC_HASH_TABLE_REG3_tag;

typedef union GMAC_MAC_HASH_TABLE_REG4_union_tag {
  vuint32_t R;
  struct {
    vuint32_t HT159T128:32;            /* MAC Hash Table Fifth 32 Bits This field contains the fifth 32 Bits [159:128] of the Hash table. */
  } B;
} GMAC_MAC_HASH_TABLE_REG4_tag;

typedef union GMAC_MAC_HASH_TABLE_REG5_union_tag {
  vuint32_t R;
  struct {
    vuint32_t HT191T160:32;            /* MAC Hash Table Sixth 32 Bits This field contains the sixth 32 Bits [191:160] of the Hash table. */
  } B;
} GMAC_MAC_HASH_TABLE_REG5_tag;

typedef union GMAC_MAC_HASH_TABLE_REG6_union_tag {
  vuint32_t R;
  struct {
    vuint32_t HT223T192:32;            /* MAC Hash Table Seventh 32 Bits This field contains the seventh 32 Bits [223:192] of the Hash table. */
  } B;
} GMAC_MAC_HASH_TABLE_REG6_tag;

typedef union GMAC_MAC_HASH_TABLE_REG7_union_tag {
  vuint32_t R;
  struct {
    vuint32_t HT255T224:32;            /* MAC Hash Table Eighth 32 Bits This field contains the eighth 32 Bits [255:224] of the Hash table. */
  } B;
} GMAC_MAC_HASH_TABLE_REG7_tag;

typedef union GMAC_MAC_VLAN_TAG_CTRL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t OB:1;                    /* Operation Busy This bit is set along with a read or write command for initiating the indirect access to per VLAN Tag Filter register. This bit is reset when the read or write command to per VLAN Tag Filter indirect access register is complete. The next indirect register access can be initiated only after this bit is reset. During a write operation, the bit is reset only after the data has been written into the Per VLAN Tag register. During a read operation, the data should be read from the MAC_VLAN_Tag_Data register only after this bit is reset. */
    vuint32_t CT:1;                    /* Command Type This bit indicates if the current register access is a read or a write. When set, it indicate a read operation. When reset, it indicates a write operation. */
    vuint32_t OFS:5;                   /* Offset This field holds the address offset of the MAC VLAN Tag Filter Register which the application is trying to access. The width of the field depends on the number of MAC VLAN Tag Registers enabled. */
    vuint32_t _unused_7:10;            /* Reserved. */
    vuint32_t VTIM:1;                  /* VLAN Tag Inverse Match Enable When this bit is set, this bit enables the VLAN Tag inverse matching. The packets without matching VLAN Tag are marked as matched. When reset, this bit enables the VLAN Tag perfect matching. The packets with matched VLAN Tag are marked as matched. */
    vuint32_t ESVL:1;                  /* Enable S-VLAN When this bit is set, the MAC transmitter and receiver consider the S-VLAN packets (Type = 0x88A8) as valid VLAN tagged packets. */
    vuint32_t _unused_19:2;            /* Reserved. */
    vuint32_t EVLS:2;                  /* Enable VLAN Tag Stripping on Receive This field indicates the stripping operation on the outer VLAN Tag in received packet. */
    vuint32_t _unused_23:1;            /* Reserved. */
    vuint32_t EVLRXS:1;                /* Enable VLAN Tag in Rx status When this bit is set, MAC provides the outer VLAN Tag in the Rx status. When this bit is reset, the MAC does not provide the outer VLAN Tag in Rx status. */
    vuint32_t VTHM:1;                  /* VLAN Tag Hash Table Match Enable When this bit is set, the most significant four bits of CRC of VLAN Tag (ones-complement of most significant four bits of CRC of VLAN Tag when ETV bit is reset) are used to index the content of the MAC_VLAN_Hash_Table register. A value of 1 in the VLAN Hash Table register, corresponding to the index, indicates that the packet matched the VLAN hash table. When the ETV bit is set, the CRC of the 12-bit VLAN Identifier (VID) is used for comparison. When the ETV bit is reset, the ones-complement of the CRC of the 16-bit VLAN tag is used for comparison. When this bit is reset, the VLAN Hash Match operation is not performed. */
    vuint32_t EDVLP:1;                 /* Enable Double VLAN Processing When this bit is set, the MAC enables processing of up to two VLAN Tags on Tx and Rx (if present). When this bit is reset, the MAC enables processing of up to one VLAN Tag on Tx and Rx (if present). */
    vuint32_t ERIVLT:1;                /* ERIVLT */
    vuint32_t EIVLS:2;                 /* Enable Inner VLAN Tag Stripping on Receive This field indicates the stripping operation on inner VLAN Tag in received packet. */
    vuint32_t _unused_30:1;            /* Reserved. */
    vuint32_t EIVLRXS:1;               /* Enable Inner VLAN Tag in Rx Status When this bit is set, the MAC provides the inner VLAN Tag in the Rx status. When this bit is reset, the MAC does not provide the inner VLAN Tag in Rx status. */
  } B;
} GMAC_MAC_VLAN_TAG_CTRL_tag;

typedef union GMAC_MAC_VLAN_TAG_DATA_union_tag {
  vuint32_t R;
  struct {
    vuint32_t VID:16;                  /* VLAN Tag ID This field holds the VLAN Tag value which is used by the MAC for perfect comparison. It is valid when VLAN Tag Enable is set. */
    vuint32_t VEN:1;                   /* VLAN Tag Enable This bit is used to enable or disable the VLAN Tag. When this bit is set, the MAC compares the VLAN Tag of received packet with the VLAN Tag ID. When this bit is reset, no comparison is performed irrespective of the programming of the other fields. */
    vuint32_t ETV:1;                   /* 12bits or 16bits VLAN comparison This bit is valid only when VEN of the Filter is set. When this bit is set, a 12-bit VLAN identifier is used for comparing and filtering instead of the complete 16-bit VLAN tag. Bits [11:0] of VLAN tag are compared with the corresponding field in the received VLAN-tagged packet. */
    vuint32_t DOVLTC:1;                /* Disable VLAN Type Comparison This bit is valid only when VLAN Tag Enable of the Filter is set. When this bit is set, the MAC does not check whether the VLAN Tag specified by the Enable Inner VLAN Tag Comparison bit is of type S-VLAN or C-VLAN. When this bit is reset, the MAC filters or matches the VLAN Tag specified by the Enable Inner VLAN Tag Comparison bit only when VLAN Tag type is similar to the one specified by the Enable S-VLAN Match for received Frames bit. */
    vuint32_t ERSVLM:1;                /* Enable S-VLAN Match for received Frames This bit is valid only when VLAN Tag Enable of the Filter is set. When this bit is set, the MAC receiver enables filtering or matching for S-VLAN (Type = 0x88A8) packets. When this bit is reset, the MAC receiver enables filtering or matching for C-VLAN (Type = 0x8100) packets. */
    vuint32_t ERIVLT:1;                /* Enable Inner VLAN Tag Comparison This bit is valid only when VLAN Tag Enable of the Filter is set. When this bit and the EDVLP field are set, the MAC receiver enables operation on the inner VLAN Tag (if present). When this bit is reset, the MAC receiver enables operation on the outer VLAN Tag (if present). */
    vuint32_t _unused_21:3;            /* Reserved. */
    vuint32_t DMACHEN:1;               /* DMA Channel Number Enable This bit is the Enable for the DMA Channel Number value programmed in the field DMACH. When this bit is reset, the Routing does not occur based on VLAN Filter result. The frame is routed based on DA Based DMA Channel Routing. */
    vuint32_t DMACHN:3;                /* DMA Channel Number The DMA Channel number to which the VLAN Tagged Frame is to be routed if it passes this VLAN Tag Filter is programmed in this field. If the Routing based on VLAN Tag Filter is not necessary, this field need not be programmed. */
    vuint32_t _unused_28:4;            /* Reserved. */
  } B;
} GMAC_MAC_VLAN_TAG_DATA_tag;

typedef union GMAC_MAC_VLAN_HASH_TABLE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t VLHT:16;                 /* VLAN Hash Table This field contains the 16-bit VLAN Hash Table. */
    vuint32_t _unused_16:16;           /* Reserved. */
  } B;
} GMAC_MAC_VLAN_HASH_TABLE_tag;

typedef union GMAC_MAC_VLAN_INCL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t VLT:16;                  /* VLAN Tag for Transmit Packets This field contains the value of the VLAN tag to be inserted or replaced. The value must only be changed when the transmit lines are inactive or during the initialization phase. Bits[15:13] are the User Priority field, Bit 12 is the CFI/DEI field, and Bits[11:0] are the VID field in the VLAN tag. The following list describes the bits of this field: - Bits[15:13]: User Priority - Bit 12: Canonical Format Indicator (CFI) or Drop Eligible Indicator (DEI) - Bits[11:0]: VLAN Identifier (VID) field of VLAN tag */
    vuint32_t VLC:2;                   /* VLAN Tag Control in Transmit Packets - 2'b00: No VLAN tag deletion, insertion, or replacement - 2'b01: VLAN tag deletion The MAC removes the VLAN type (bytes 13 and 14) and VLAN tag (bytes 15 and 16) of all transmitted packets with VLAN tags. - 2'b10: VLAN tag insertion The MAC inserts VLT in bytes 15 and 16 of the packet after inserting the Type value (0x8100 or 0x88a8) in bytes 13 and 14. This operation is performed on all transmitted packets, irrespective of whether they already have a VLAN tag. - 2'b11: VLAN tag replacement The MAC replaces VLT in bytes 15 and 16 of all VLAN-type transmitted packets (Bytes 13 and 14 are 0x8100 or 0x88a8). Note: Changes to this field take effect only on the start of a packet. If you write this register field when a packet is being transmitted, only the subsequent packet can use the updated value, that is, the current packet does not use the updated value. */
    vuint32_t VLP:1;                   /* VLAN Priority Control When this bit is set, the control bits[17:16] are used for VLAN deletion, insertion, or replacement. When this bit is reset, the mti_vlan_ctrl_i control input is used and bits[17:16] are ignored. */
    vuint32_t CSVL:1;                  /* C-VLAN or S-VLAN When this bit is set, S-VLAN type (0x88A8) is inserted or replaced in the 13th and 14th bytes of transmitted packets. When this bit is reset, C-VLAN type (0x8100) is inserted or replaced in the 13th and 14th bytes of transmitted packets. */
    vuint32_t VLTI:1;                  /* VLAN Tag Input When this bit is set, it indicates that the VLAN tag to be inserted or replaced in Tx packet should be taken from: - The Tx descriptor */
    vuint32_t CBTI:1;                  /* Channel based tag insertion When this bit is set, outer VLAN tag is inserted for every packets transmitted by the MAC. The tag value is taken from the queue/channel specific VLAN tag register. The VLTI, VLP, VLC, and VLT fields of this register are ignored when this bit is set. When this bit is set, a write operation to byte 3 of this register initiates the read/write access to the indirect register. When reset, outer VLAN operation is based on the setting of VLTI, VLP, VLC and VLT fields of this register. */
    vuint32_t _unused_22:2;            /* Reserved. */
    vuint32_t ADDR:3;                  /* Address This field selects one of the queue/channel specific VLAN Inclusion register for read/write access. This does not have any effect when CBTI is reset. */
    vuint32_t _unused_27:3;            /* Reserved. */
    vuint32_t RDWR:1;                  /* Read write control This bit controls the read or write operation for indirectly accessing the queue/channel specific VLAN Inclusion register. When set indicates write operation and when reset indicates read operation. This does not have any effect when CBTI is reset. */
    vuint32_t BUSY:1;                  /* Busy This bit indicates the status of the read/write operation of indirect access to the queue/channel specific VLAN inclusion register. For write operation write to a register is complete when this bit is reset. For read operation the read data is valid when the bit is reset. The application must make sure that this bit is reset before attempting subsequent access to this register. */
  } B;
} GMAC_MAC_VLAN_INCL_tag;

typedef union GMAC_MAC_INNER_VLAN_INCL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t VLT:16;                  /* VLAN Tag for Transmit Packets This field contains the value of the VLAN tag to be inserted or replaced. The value must only be changed when the transmit lines are inactive or during the initialization phase. Bits[15:13] are the User Priority field, Bit 12 is the CFI/DEI field, and Bits[11:0] are the VID field in the VLAN tag. The following list describes the bits of this field: - Bits[15:13]: User Priority - Bit 12: Canonical Format Indicator (CFI) or Drop Eligible Indicator (DEI) - Bits[11:0]: VLAN Identifier (VID) field of VLAN tag */
    vuint32_t VLC:2;                   /* VLAN Tag Control in Transmit Packets - 2'b00: No VLAN tag deletion, insertion, or replacement - 2'b01: VLAN tag deletion The MAC removes the VLAN type (bytes 17 and 18) and VLAN tag (bytes 19 and 20) of all transmitted packets with VLAN tags. - 2'b10: VLAN tag insertion The MAC inserts VLT in bytes 19 and 20 of the packet after inserting the Type value (0x8100 or 0x88a8) in bytes 17 and 18. This operation is performed on all transmitted packets, irrespective of whether they already have a VLAN tag. - 2'b11: VLAN tag replacement The MAC replaces VLT in bytes 19 and 20 of all VLAN-type transmitted packets (Bytes 17 and 18 are 0x8100 or 0x88a8). Note: Changes to this field take effect only on the start of a packet. If you write this register field when a packet is being transmitted, only the subsequent packet can use the updated value, that is, the current packet does not use the updated value. */
    vuint32_t VLP:1;                   /* VLAN Priority Control When this bit is set, the VLC field is used for VLAN deletion, insertion, or replacement. When this bit is reset, the mti_vlan_ctrl_i control input is used and the VLC field is ignored. */
    vuint32_t CSVL:1;                  /* C-VLAN or S-VLAN When this bit is set, S-VLAN type (0x88A8) is inserted or replaced in the 13th and 14th bytes of transmitted packets. When this bit is reset, C-VLAN type (0x8100) is inserted or replaced in the 13th and 14th bytes of transmitted packets. */
    vuint32_t VLTI:1;                  /* VLAN Tag Input When this bit is set, it indicates that the VLAN tag to be inserted or replaced in Tx packet should be taken from: - The Tx descriptor */
    vuint32_t _unused_21:11;           /* Reserved. */
  } B;
} GMAC_MAC_INNER_VLAN_INCL_tag;

typedef union GMAC_MAC_Q0_TX_FLOW_CTRL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t FCB_BPA:1;               /* Flow Control Busy or Backpressure Activate This bit initiates a Pause packet in the full-duplex mode and activates the backpressure function in the half-duplex mode if the TFE bit is set. Full-Duplex Mode: In the full-duplex mode, this bit should be read as 1'b0 before writing to this register. To initiate a Pause packet, the application must set this bit to 1'b1. During Control packet transfer, this bit continues to be set to indicate that a packet transmission is in progress. When Pause packet transmission is complete, the MAC resets this bit to 1'b0. You should not write to this register until this bit is cleared. Half-Duplex Mode: When this bit is set (and TFE bit is set) in the half-duplex mode, the MAC asserts the backpressure. During backpressure, when the MAC receives a new packet, the transmitter starts sending a JAM pattern resulting in a collision. This control register bit is logically ORed with the mti_flowctrl_i input signal for the backpressure function. When the MAC is configured for the full-duplex mode, the BPA is automatically disabled. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t TFE:1;                   /* Transmit Flow Control Enable Full-Duplex Mode: In the full-duplex mode, when this bit is set, the MAC enables the flow control operation to Tx Pause packets. When this bit is reset, the flow control operation in the MAC is disabled, and the MAC does not transmit any Pause packets. Half-Duplex Mode: In the half-duplex mode, when this bit is set, the MAC enables the backpressure operation. When this bit is reset, the backpressure feature is disabled. */
    vuint32_t _unused_2:2;             /* Reserved. */
    vuint32_t PLT:3;                   /* Pause Low Threshold This field configures the threshold of the Pause timer at which the input flow control signal mti_flowctrl_i (or sbd_flowctrl_i) is checked for automatic retransmission of the Pause packet. The threshold values should be always less than the Pause Time configured in Bits[31:16]. For example, if PT = 100H (256 slot times), and PLT = 001, a second Pause packet is automatically transmitted if the mti_flowctrl_i signal is asserted at 228 (256-28) slot times after the first Pause packet is transmitted. The following list provides the threshold values for different values. The slot time is defined as the time taken to transmit 512 bits (64 bytes) on the GMII or MII interface. This (approximate) computation is based on the packet size (64, 1518, 2000, 9018, 16384, or 32768) + 2 Pause Packet Size + IPG in Slot Times. */
    vuint32_t DZPQ:1;                  /* Disable Zero-Quanta Pause When this bit is set, it disables the automatic generation of the zero-quanta Pause packets on de-assertion of the flow-control signal from the FIFO layer (MTL or external sideband flow control signal sbd_flowctrl_i or mti_flowctrl_i). When this bit is reset, normal operation with automatic zero-quanta Pause packet generation is enabled. */
    vuint32_t _unused_8:8;             /* Reserved. */
    vuint32_t PT:16;                   /* Pause Time This field holds the value to be used in the Pause Time field in the Tx control packet. If the Pause Time bits are configured to be double-synchronized to the (G)MII clock domain, consecutive writes to this register should be performed only after at least four clock cycles in the destination clock domain. */
  } B;
} GMAC_MAC_Q0_TX_FLOW_CTRL_tag;

typedef union GMAC_MAC_Q1_TX_FLOW_CTRL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t FCB_BPA:1;               /* Flow Control Busy This bit initiates a PFC packet if the TFE bit is set. To initiate a PFC packet, the application must set this bit to 1'b1. During Control packet transfer, this bit continues to be set to indicate that a packet transmission is in progress. When PFC packet transmission is complete, the MAC resets this bit to 1'b0. You should not write to this register until this bit is cleared. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t TFE:1;                   /* Transmit Flow Control Enable When this bit is set in full-duplex mode, the MAC enables the flow control operation to Tx Pause packets. When this bit is reset, the flow control operation in the MAC is disabled, and the MAC does not transmit any Pause packets. */
    vuint32_t _unused_2:2;             /* Reserved. */
    vuint32_t PLT:3;                   /* Pause Low Threshold This field configures the threshold of the Pause timer at which the input flow control signal mti_flowctrl_i (or sbd_flowctrl_i) is checked for automatic retransmission of the Pause packet. The threshold values should be always less than the Pause Time configured in Bits[31:16]. For example, if PT = 100H (256 slot times), and PLT = 001, a second Pause packet is automatically transmitted if the mti_flowctrl_i signal is asserted at 228 (256-28) slot times after the first Pause packet is transmitted. The following list provides the threshold values for different values. The slot time is defined as the time taken to transmit 512 bits (64 bytes) on the GMII or MII interface. This (approximate) computation is based on the packet size (64, 1518, 2000, 9018, 16384, or 32768) + 2 Pause Packet Size + IPG in Slot Times. */
    vuint32_t DZPQ:1;                  /* Disable Zero-Quanta Pause When this bit is set, it disables the automatic generation of the zero-quanta Pause packets on de-assertion of the flow-control signal from the FIFO layer (MTL or external sideband flow control signal sbd_flowctrl_i or mti_flowctrl_i). When this bit is reset, normal operation with automatic zero-quanta Pause packet generation is enabled. */
    vuint32_t _unused_8:8;             /* Reserved. */
    vuint32_t PT:16;                   /* Pause Time This field holds the value to be used in the Pause Time field in the Tx control packet. If the Pause Time bits are configured to be double-synchronized to the (G)MII clock domain, consecutive writes to this register should be performed only after at least four clock cycles in the destination clock domain. */
  } B;
} GMAC_MAC_Q1_TX_FLOW_CTRL_tag;

typedef union GMAC_MAC_Q2_TX_FLOW_CTRL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t FCB_BPA:1;               /* Flow Control Busy This bit initiates a PFC packet if the TFE bit is set. To initiate a PFC packet, the application must set this bit to 1'b1. During Control packet transfer, this bit continues to be set to indicate that a packet transmission is in progress. When PFC packet transmission is complete, the MAC resets this bit to 1'b0. You should not write to this register until this bit is cleared. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t TFE:1;                   /* Transmit Flow Control Enable When this bit is set in full-duplex mode, the MAC enables the flow control operation to Tx Pause packets. When this bit is reset, the flow control operation in the MAC is disabled, and the MAC does not transmit any Pause packets. */
    vuint32_t _unused_2:2;             /* Reserved. */
    vuint32_t PLT:3;                   /* Pause Low Threshold This field configures the threshold of the Pause timer at which the input flow control signal mti_flowctrl_i (or sbd_flowctrl_i) is checked for automatic retransmission of the Pause packet. The threshold values should be always less than the Pause Time configured in Bits[31:16]. For example, if PT = 100H (256 slot times), and PLT = 001, a second Pause packet is automatically transmitted if the mti_flowctrl_i signal is asserted at 228 (256-28) slot times after the first Pause packet is transmitted. The following list provides the threshold values for different values. The slot time is defined as the time taken to transmit 512 bits (64 bytes) on the GMII or MII interface. This (approximate) computation is based on the packet size (64, 1518, 2000, 9018, 16384, or 32768) + 2 Pause Packet Size + IPG in Slot Times. */
    vuint32_t DZPQ:1;                  /* Disable Zero-Quanta Pause When this bit is set, it disables the automatic generation of the zero-quanta Pause packets on de-assertion of the flow-control signal from the FIFO layer (MTL or external sideband flow control signal sbd_flowctrl_i or mti_flowctrl_i). When this bit is reset, normal operation with automatic zero-quanta Pause packet generation is enabled. */
    vuint32_t _unused_8:8;             /* Reserved. */
    vuint32_t PT:16;                   /* Pause Time This field holds the value to be used in the Pause Time field in the Tx control packet. If the Pause Time bits are configured to be double-synchronized to the (G)MII clock domain, consecutive writes to this register should be performed only after at least four clock cycles in the destination clock domain. */
  } B;
} GMAC_MAC_Q2_TX_FLOW_CTRL_tag;

typedef union GMAC_MAC_Q3_TX_FLOW_CTRL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t FCB_BPA:1;               /* Flow Control Busy This bit initiates a PFC packet if the TFE bit is set. To initiate a PFC packet, the application must set this bit to 1'b1. During Control packet transfer, this bit continues to be set to indicate that a packet transmission is in progress. When PFC packet transmission is complete, the MAC resets this bit to 1'b0. You should not write to this register until this bit is cleared. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t TFE:1;                   /* Transmit Flow Control Enable When this bit is set in full-duplex mode, the MAC enables the flow control operation to Tx Pause packets. When this bit is reset, the flow control operation in the MAC is disabled, and the MAC does not transmit any Pause packets. */
    vuint32_t _unused_2:2;             /* Reserved. */
    vuint32_t PLT:3;                   /* Pause Low Threshold This field configures the threshold of the Pause timer at which the input flow control signal mti_flowctrl_i (or sbd_flowctrl_i) is checked for automatic retransmission of the Pause packet. The threshold values should be always less than the Pause Time configured in Bits[31:16]. For example, if PT = 100H (256 slot times), and PLT = 001, a second Pause packet is automatically transmitted if the mti_flowctrl_i signal is asserted at 228 (256-28) slot times after the first Pause packet is transmitted. The following list provides the threshold values for different values. The slot time is defined as the time taken to transmit 512 bits (64 bytes) on the GMII or MII interface. This (approximate) computation is based on the packet size (64, 1518, 2000, 9018, 16384, or 32768) + 2 Pause Packet Size + IPG in Slot Times. */
    vuint32_t DZPQ:1;                  /* Disable Zero-Quanta Pause When this bit is set, it disables the automatic generation of the zero-quanta Pause packets on de-assertion of the flow-control signal from the FIFO layer (MTL or external sideband flow control signal sbd_flowctrl_i or mti_flowctrl_i). When this bit is reset, normal operation with automatic zero-quanta Pause packet generation is enabled. */
    vuint32_t _unused_8:8;             /* Reserved. */
    vuint32_t PT:16;                   /* Pause Time This field holds the value to be used in the Pause Time field in the Tx control packet. If the Pause Time bits are configured to be double-synchronized to the (G)MII clock domain, consecutive writes to this register should be performed only after at least four clock cycles in the destination clock domain. */
  } B;
} GMAC_MAC_Q3_TX_FLOW_CTRL_tag;

typedef union GMAC_MAC_Q4_TX_FLOW_CTRL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t FCB_BPA:1;               /* Flow Control Busy This bit initiates a PFC packet if the TFE bit is set. To initiate a PFC packet, the application must set this bit to 1'b1. During Control packet transfer, this bit continues to be set to indicate that a packet transmission is in progress. When PFC packet transmission is complete, the MAC resets this bit to 1'b0. You should not write to this register until this bit is cleared. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t TFE:1;                   /* Transmit Flow Control Enable When this bit is set in full-duplex mode, the MAC enables the flow control operation to Tx Pause packets. When this bit is reset, the flow control operation in the MAC is disabled, and the MAC does not transmit any Pause packets. */
    vuint32_t _unused_2:2;             /* Reserved. */
    vuint32_t PLT:3;                   /* Pause Low Threshold This field configures the threshold of the Pause timer at which the input flow control signal mti_flowctrl_i (or sbd_flowctrl_i) is checked for automatic retransmission of the Pause packet. The threshold values should be always less than the Pause Time configured in Bits[31:16]. For example, if PT = 100H (256 slot times), and PLT = 001, a second Pause packet is automatically transmitted if the mti_flowctrl_i signal is asserted at 228 (256-28) slot times after the first Pause packet is transmitted. The following list provides the threshold values for different values. The slot time is defined as the time taken to transmit 512 bits (64 bytes) on the GMII or MII interface. This (approximate) computation is based on the packet size (64, 1518, 2000, 9018, 16384, or 32768) + 2 Pause Packet Size + IPG in Slot Times. */
    vuint32_t DZPQ:1;                  /* Disable Zero-Quanta Pause When this bit is set, it disables the automatic generation of the zero-quanta Pause packets on de-assertion of the flow-control signal from the FIFO layer (MTL or external sideband flow control signal sbd_flowctrl_i or mti_flowctrl_i). When this bit is reset, normal operation with automatic zero-quanta Pause packet generation is enabled. */
    vuint32_t _unused_8:8;             /* Reserved. */
    vuint32_t PT:16;                   /* Pause Time This field holds the value to be used in the Pause Time field in the Tx control packet. If the Pause Time bits are configured to be double-synchronized to the (G)MII clock domain, consecutive writes to this register should be performed only after at least four clock cycles in the destination clock domain. */
  } B;
} GMAC_MAC_Q4_TX_FLOW_CTRL_tag;

typedef union GMAC_MAC_RX_FLOW_CTRL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RFE:1;                   /* Receive Flow Control Enable When this bit is set and the MAC is operating in full-duplex mode, the MAC decodes the received Pause packet and disables its transmitter for a specified (Pause) time. When this bit is reset or the MAC is operating in half-duplex mode, the decode function of the Pause packet is disabled. When PFC is enabled, flow control is enabled for PFC packets. The MAC decodes the received PFC packet and disables the Transmit queue, with matching priorities, for a duration of received Pause time. */
    vuint32_t UP:1;                    /* Unicast Pause Packet Detect A pause packet is processed when it has the unique multicast address specified in the IEEE 802.3. When this bit is set, the MAC can also detect Pause packets with unicast address of the station. This unicast address should be as specified in MAC_Address0_High and MAC_Address0_Low. When this bit is reset, the MAC only detects Pause packets with unique multicast address. Note: The MAC does not process a Pause packet if the multicast address is different from the unique multicast address. This is also applicable to the received PFC packet when the Priority Flow Control (PFC) is enabled. The unique multicast address (0x01_80_C2_00_00_01) is as specified in IEEE 802.1 Qbb-2011. */
    vuint32_t _unused_2:6;             /* Reserved. */
    vuint32_t PFCE:1;                  /* Priority Based Flow Control Enable When this bit is set, it enables generation and reception of priority-based flow control (PFC) packets. When this bit is reset, it enables generation and reception of 802.3x Pause control packets. */
    vuint32_t _unused_9:23;            /* Reserved. */
  } B;
} GMAC_MAC_RX_FLOW_CTRL_tag;

typedef union GMAC_MAC_RXQ_CTRL4_union_tag {
  vuint32_t R;
  struct {
    vuint32_t UFFQE:1;                 /* Unicast Address Filter Fail Packets Queuing Enable. When this bit is set, the Unicast packets which fail the Destination or Source address filter is routed to the Rx Queue Number programmed in the UFFQ. When this bit is reset, the Unicast packets which fail the Destination or Source address filter is routed based on other routing options. This bit is valid only when the RA bit of the MAC_Packet_Filter register is set. */
    vuint32_t UFFQ:3;                  /* Unicast Address Filter Fail Packets Queue. This field holds the Rx queue number to which the Unicast packets failing the Destination or Source Address filter are routed to. This field is valid only when the UFFQE bit is set. */
    vuint32_t _unused_4:4;             /* Reserved. */
    vuint32_t MFFQE:1;                 /* Multicast Address Filter Fail Packets Queuing Enable. When this bit is set, the Multicast packets which fail the Destination or Source address filter is routed to the Rx Queue Number programmed in the MFFQ. When this bit is reset, the Multicast packets which fail the Destination or Source address filter is routed based on other routing options. This bit is valid only when the RA bit of the MAC_Packet_Filter register is set. */
    vuint32_t MFFQ:3;                  /* Multicast Address Filter Fail Packets Queue. This field holds the Rx queue number to which the Multicast packets failing the Destination or Source Address filter are routed to. This field is valid only when the MFFQE bit is set. */
    vuint32_t _unused_12:4;            /* Reserved. */
    vuint32_t VFFQE:1;                 /* VLAN Tag Filter Fail Packets Queuing Enable When this bit is set, the tagged packets which fail the Destination or Source address filter or fail the VLAN tag filter, are routed to the Rx Queue Number programmed in the VFFQ. When this bit is reset, the tagged packets which fail the Destination or Source address filter or fail the VLAN tag filter are routed based on other routing options. This bit is valid only when the RA bit of the MAC_Packet_Filter register is set. */
    vuint32_t VFFQ:3;                  /* VLAN Tag Filter Fail Packets Queue This field holds the Rx queue number to which the tagged packets failing the Destination or Source Address filter (and UFFQE/MFFQE not enabled) or failing the VLAN tag filter must be routed to. This field is valid only when the VFFQE bit is set. */
    vuint32_t _unused_20:12;           /* Reserved. */
  } B;
} GMAC_MAC_RXQ_CTRL4_tag;

typedef union GMAC_MAC_TXQ_PRTY_MAP0_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PSTQ0:8;                 /* Priorities Selected in Transmit Queue 0 This field holds the priorities assigned to Tx Queue 0 by the software. This field determines if Tx Queue 0 should be blocked from transmitting specified pause time when a PFC packet is received with priorities matching the priorities programmed in this field. If the content of this field is not mutually exclusive to corresponding fields of other Transmit queues, that is, same priority is mapped to multiple Tx queues, the MAC blocks all queues with matching priority for specified time. */
    vuint32_t PSTQ1:8;                 /* Priorities Selected in Transmit Queue 1 This bit is similar to the PSTQ0 bit. */
    vuint32_t PSTQ2:8;                 /* Priorities Selected in Transmit Queue 2 This bit is similar to the PSTQ0 bit. */
    vuint32_t PSTQ3:8;                 /* Priorities Selected in Transmit Queue 3 This bit is similar to the PSTQ0 bit. */
  } B;
} GMAC_MAC_TXQ_PRTY_MAP0_tag;

typedef union GMAC_MAC_TXQ_PRTY_MAP1_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PSTQ4:8;                 /* Priorities Selected in Transmit Queue 4 This field holds the priorities assigned to Tx Queue 4 by the software. This field determines if Tx Queue 4 should be blocked from transmitting specified pause time when a PFC packet is received with priorities matching the priorities programmed in this field. If the content of this field is not mutually exclusive to corresponding fields of other Transmit queues, that is, same priority is mapped to multiple Tx queues, the MAC blocks all queues with matching priority for specified time. */
    vuint32_t _unused_8:8;             /* Reserved. */
    vuint32_t _unused_16:8;            /* Reserved. */
    vuint32_t _unused_24:8;            /* Reserved. */
  } B;
} GMAC_MAC_TXQ_PRTY_MAP1_tag;

typedef union GMAC_MAC_RXQ_CTRL0_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXQ0EN:2;                /* Receive Queue 0 Enable This field indicates whether Rx Queue 0 is enabled for AV or DCB. */
    vuint32_t RXQ1EN:2;                /* Receive Queue 1 Enable This field is similar to the RXQ0EN field. */
    vuint32_t RXQ2EN:2;                /* Receive Queue 2 Enable This field is similar to the RXQ0EN field. */
    vuint32_t RXQ3EN:2;                /* Receive Queue 3 Enable This field is similar to the RXQ0EN field. */
    vuint32_t RXQ4EN:2;                /* Receive Queue 4 Enable This field is similar to the RXQ0EN field. */
    vuint32_t _unused_10:2;            /* Reserved. */
    vuint32_t _unused_12:2;            /* Reserved. */
    vuint32_t _unused_14:2;            /* Reserved. */
    vuint32_t _unused_16:16;           /* Reserved. */
  } B;
} GMAC_MAC_RXQ_CTRL0_tag;

typedef union GMAC_MAC_RXQ_CTRL1_union_tag {
  vuint32_t R;
  struct {
    vuint32_t AVCPQ:3;                 /* AV Untagged Control Packets Queue This field specifies the Receive queue on which the received AV tagged and untagged control packets are routed. The AV tagged (when TACPQE bit is set) and untagged control packets are routed to Receive queue specified by this field. */
    vuint32_t _unused_3:1;             /* Reserved. */
    vuint32_t PTPQ:3;                  /* PTP Packets Queue This field specifies the Rx queue on which the PTP packets sent over the Ethernet payload (not over IPv4 or IPv6) are routed. When the AV8021ASMEN bit of MAC_Timestamp_Control register is set, only untagged PTP over Ethernet packets are routed on an Rx Queue. If the bit is not set, then based on programming of TPQC field, both tagged and untagged PTPoE packets can be routed to this Rx Queue. */
    vuint32_t _unused_7:1;             /* Reserved. */
    vuint32_t DCBCPQ:3;                /* DCB Control Packets Queue This field specifies the Rx queue on which the received DCB control packets are routed. The DCB data packets are routed based on the PSRQ field of the Transmit Flow Control Register of corresponding queue. */
    vuint32_t _unused_11:1;            /* Reserved. */
    vuint32_t UPQ:3;                   /* Untagged Packet Queue This field indicates the Rx Queue to which Untagged Packets are to be routed. Any Rx Queue enabled for Generic/DCB/AV traffic can be used to route the Untagged Packets. */
    vuint32_t _unused_15:1;            /* Reserved. */
    vuint32_t MCBCQ:3;                 /* Multicast and Broadcast Queue This field specifies the Rx Queue onto which Multicast or Broadcast Packets are routed. Any Rx Queue enabled for Generic/DCB/AV traffic can be used to route the Multicast or Broadcast Packets. */
    vuint32_t _unused_19:1;            /* Reserved. */
    vuint32_t MCBCQEN:1;               /* Multicast and Broadcast Queue Enable This bit specifies that Multicast or Broadcast packets routing to the Rx Queue is enabled and the Multicast or Broadcast packets must be routed to Rx Queue specified in MCBCQ field. */
    vuint32_t TACPQE:1;                /* Tagged AV Control Packets Queuing Enable. When set, the MAC routes the received Tagged AV Control packets to the Rx queue specified by AVCPQ field. When reset, the MAC routes the received Tagged AV Control packets based on the tag priority matching the PSRQ fields in MAC_RxQ_Ctrl2 and MAC_RxQ_Ctrl3 registers. */
    vuint32_t TPQC:2;                  /* Tagged PTP over Ethernet Packets Queuing Control. This field controls the routing of the VLAN Tagged PTPoE packets. If DWC_EQOS_AV_ENABLE is selected in the configuration, the following programmable options are allowed. - 2'b00: VLAN Tagged PTPoE packets are routed as generic VLAN Tagged packet (based on PSRQ for only non-AV enabled Rx Queues). - 2'b01: VLAN Tagged PTPoE packets are routed to Rx Queue specified by PTPQ field (That Rx Queue can be enabled for AV or non-AV traffic). - 2'b10: VLAN Tagged PTPoE packets are routed to only AV enabled Rx Queues based on PSRQ. - 2'b11: Reserved If DWC_EQOS_AV_ENABLE is not selected in the configuration, the following programmable options are allowed. - 1'b0: VLAN Tagged PTPoE packets are routed as generic VLAN Tagged packet (based on PSRQ for DCB/Generic enabled Rx Queues). - 1'b1: VLAN Tagged PTPoE packets are routed to Rx Queues specified by PTPQ field. */
    vuint32_t FPRQ:3;                  /* Frame Preemption Residue Queue This field holds the Rx queue number to which the residual preemption frames must be forwarded. Preemption frames that are tagged and pass the SA/DA/VLAN filtering are routed based on PSRQ and all other frames are treated as residual frames and is routed to the queue number mentioned in this field. The Queue-0 is used as a default queue for express frames, so this field cannot be programmed to a value 0. */
    vuint32_t _unused_27:5;            /* Reserved. */
  } B;
} GMAC_MAC_RXQ_CTRL1_tag;

typedef union GMAC_MAC_RXQ_CTRL2_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PSRQ0:8;                 /* Priorities Selected in the Receive Queue 0 This field decides the priorities assigned to Rx Queue 0. All packets with priorities that match the values set in this field are routed to Rx Queue 0. For example, if PSRQ0[5] is set, packets with USP field equal to 5 are routed to Rx Queue 0. The software must ensure that the content of this field is mutually exclusive to the PSRQ fields for other queues, that is, the same priority is not mapped to multiple Rx queues. this field also determines the priorities to be included in the PFC packet sent to remote station when Rx Queue 0 crosses the flow control threshold settings. */
    vuint32_t PSRQ1:8;                 /* Priorities Selected in the Receive Queue 1 This field decides the priorities assigned to Rx Queue 1. All packets with priorities that match the values set in this field are routed to Rx Queue 1. For example, if PSRQ1[4] is set, packets with USP field equal to 4 are routed to Rx Queue 1. The software must ensure that the content of this field is mutually exclusive to the PSRQ fields for other queues, that is, the same priority is not mapped to multiple Rx queues. this field also determines the priorities to be included in the PFC packet sent to remote station when Rx Queue 1 crosses the flow control threshold settings. */
    vuint32_t PSRQ2:8;                 /* Priorities Selected in the Receive Queue 2 This field decides the priorities assigned to Rx Queue 2. All packets with priorities that match the values set in this field are routed to Rx Queue 2. For example, if PSRQ2[1, 0] are set, packets with USP field equal to 1 or 0 are routed to Rx Queue 2. The software must ensure that the content of this field is mutually exclusive to the PSRQ fields for other queues, that is, the same priority is not mapped to multiple Rx queues. this field also determines the priorities to be included in the PFC packet sent to remote station when Rx Queue 2 crosses the flow control threshold settings. */
    vuint32_t PSRQ3:8;                 /* Priorities Selected in the Receive Queue 3 This field decides the priorities assigned to Rx Queue 3. All packets with priorities that match the values set in this field are routed to Rx Queue 3. For example, if PSRQ3[6, 3] are set, packets with USP field equal to 3 or 6 are routed to Rx Queue 3. The software must ensure that the content of this field is mutually exclusive to the PSRQ fields for other queues, that is, the same priority is not mapped to multiple Rx queues. this field also determines the priorities to be included in the PFC packet sent to remote station when Rx Queue 3 crosses the flow control threshold settings. */
  } B;
} GMAC_MAC_RXQ_CTRL2_tag;

typedef union GMAC_MAC_RXQ_CTRL3_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PSRQ4:8;                 /* Priorities Selected in the Receive Queue 4 This field decides the priorities assigned to Rx Queue 4. All packets with priorities that match the values set in this field are routed to Rx Queue 4. For example, if PSRQ4[7:4] is set, packets with USP field equal to 7, 6, 5, or 4 are routed to Rx Queue 4. The software must ensure that the content of this field is mutually exclusive to the PSRQ fields for other queues, that is, the same priority is not mapped to multiple Rx queues. this field also determines the priorities to be included in the PFC packet sent to remote station when Rx Queue 4 crosses the flow control threshold settings. */
    vuint32_t _unused_8:8;             /* Reserved. */
    vuint32_t _unused_16:8;            /* Reserved. */
    vuint32_t _unused_24:8;            /* Reserved. */
  } B;
} GMAC_MAC_RXQ_CTRL3_tag;

typedef union GMAC_MAC_INTERRUPT_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RGSMIIIS:1;              /* RGMII or SMII Interrupt Status This bit is set because of any change in value of the Link Status of RGMII or SMII interface (LNKSTS bit in MAC_PHYIF_Control_Status register). This bit is cleared when the MAC_PHYIF_Control_Status register is read (or LNKSTS bit of MAC_PHYIF_Control_Status register is written to 1 when RCWE bit of MAC_CSR_SW_Ctrl register is set). This bit is valid only when you select the optional RGMII or SMII PHY interface. */
    vuint32_t _unused_1:1;             /* Reserved. */
    vuint32_t _unused_2:1;             /* Reserved. */
    vuint32_t PHYIS:1;                 /* PHY Interrupt This bit is set when rising edge is detected on the phy_intr_i input. This bit is cleared when this register is read (or this bit is written to 1 when RCWE bit of MAC_CSR_SW_Ctrl register is set). */
    vuint32_t PMTIS:1;                 /* PMT Interrupt Status This bit is set when a Magic packet or Wake-on-LAN packet is received in the power-down mode (RWKPRCVD and MGKPRCVD bits in MAC_PMT_Control_Status register). This bit is cleared when corresponding interrupt source bit are cleared because of a Read operation to the MAC_PMT_Control_Status register (or corresponding interrupt source bit of MAC_PMT_Control_Status register is written to 1 when RCWE bit of MAC_CSR_SW_Ctrl register is set). This bit is valid only when you select the Enable Power Management option. */
    vuint32_t _unused_5:1;             /* Reserved. */
    vuint32_t _unused_6:2;             /* Reserved. */
    vuint32_t MMCIS:1;                 /* MMC Interrupt Status This bit is set high when Bit 11, Bit 10, or Bit 9 is set high. This bit is cleared only when all these bits are low. This bit is valid only when you select the Enable MAC Management Counters (MMC) option. */
    vuint32_t MMCRXIS:1;               /* MMC Receive Interrupt Status This bit is set high when an interrupt is generated in the MMC Receive Interrupt Register. This bit is cleared when all bits in this interrupt register are cleared. This bit is valid only when you select the Enable MAC Management Counters (MMC) option. */
    vuint32_t MMCTXIS:1;               /* MMC Transmit Interrupt Status This bit is set high when an interrupt is generated in the MMC Transmit Interrupt Register. This bit is cleared when all bits in this interrupt register are cleared. This bit is valid only when you select the Enable MAC Management Counters (MMC) option. */
    vuint32_t _unused_11:1;            /* Reserved. */
    vuint32_t TSIS:1;                  /* Timestamp Interrupt Status If the Timestamp feature is enabled, this bit is set when any of the following conditions is true: - The system time value is equal to or exceeds the value specified in the Target Time High and Low registers. - There is an overflow in the Seconds register. - The Target Time Error occurred, that is, programmed target time already elapsed. If the Auxiliary Snapshot feature is enabled, this bit is set when the auxiliary snapshot trigger is asserted. In configurations other than EQOS_CORE, when drop transmit status is enabled in MTL, this bit is set when the captured transmit timestamp is updated in the MAC_Tx_Timestamp_Status_Nanoseconds and Mac_TxTimestamp_Status_Seconds registers. When PTP offload feature is enabled, this bit is set when the captured transmit timestamp is updated in the MAC_Tx_Timestamp_Status_Nanoseconds and MAC_Tx_Timestamp_Status_Seconds registers, for PTO generated Delay Request and Pdelay request packets. This bit is cleared when the corresponding interrupt source bit is read (or corresponding interrupt source bit is written to 1 when RCWE bit of MAC_CSR_SW_Ctrl register is set) in the MAC_Timestamp_Status register. */
    vuint32_t TXSTSIS:1;               /* Transmit Status Interrupt This bit indicates the status of transmitted packets. This bit is set when any of the following bits is set in the MAC_Rx_Tx_Status register: - Excessive Collision (EXCOL) - Late Collision (LCOL) - Excessive Deferral (EXDEF) - Loss of Carrier (LCARR) - No Carrier (NCARR) - Jabber Timeout (TJT) This bit is cleared when the corresponding interrupt source bit is read (or corresponding interrupt source bit is written to 1 when RCWE bit of MAC_CSR_SW_Ctrl register is set) in the MAC_Rx_Tx_Status register. */
    vuint32_t RXSTSIS:1;               /* Receive Status Interrupt This bit indicates the status of received packets. This bit is set when the RWT bit is set in the MAC_Rx_Tx_Status register. This bit is cleared when the corresponding interrupt source bit is read (or corresponding interrupt source bit is written to 1 when RCWE bit of MAC_CSR_SW_Ctrl register is set) in the MAC_Rx_Tx_Status register. */
    vuint32_t _unused_15:1;            /* Reserved. */
    vuint32_t _unused_16:1;            /* Reserved. */
    vuint32_t FPEIS:1;                 /* Frame Preemption Interrupt Status This bit indicates an interrupt event during the operation of Frame Preemption (Bits[19:16] of MAC_FPE_CTRL_STS register is set). To reset this bit, the application must clear the event in MAC_FPE_CTRL_STS that has caused the Interrupt. */
    vuint32_t MDIOIS:1;                /* MDIO Interrupt Status This bit indicates an interrupt event after the completion of MDIO operation. To reset this bit, the application has to read this bit/Write 1 to this bit when RCWE bit of MAC_CSR_SW_Ctrl register is set. Access restriction applies. Clears on read (or write of 1 when RCWE bit in MAC_CSR_SW_Ctrl register is set). Self-set to 1 on internal event. */
    vuint32_t MFTIS:1;                 /* MMC FPE Transmit Interrupt Status This bit is set high when an interrupt is generated in the MMC FPE Transmit Interrupt Register. This bit is cleared when all bits in this interrupt register are cleared. This bit is valid only when you select the Enable MAC Management Counters (MMC) option along with FPE support. */
    vuint32_t MFRIS:1;                 /* MMC FPE Receive Interrupt Status This bit is set high when an interrupt is generated in the MMC FPE Receive Interrupt Register. This bit is cleared when all bits in this interrupt register are cleared. This bit is valid only when you select the Enable MAC Management Counters (MMC) option along with FPE support. */
    vuint32_t _unused_21:11;           /* Reserved. */
  } B;
} GMAC_MAC_INTERRUPT_STATUS_tag;

typedef union GMAC_MAC_INTERRUPT_ENABLE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RGSMIIIE:1;              /* RGMII or SMII Interrupt Enable When this bit is set, it enables the assertion of the interrupt signal because of the setting of RGSMIIIS bit in MAC_Interrupt_Status register. */
    vuint32_t _unused_1:1;             /* Reserved. */
    vuint32_t _unused_2:1;             /* Reserved. */
    vuint32_t PHYIE:1;                 /* PHY Interrupt Enable When this bit is set, it enables the assertion of the interrupt signal because of the setting of PHYIS bit in MAC_Interrupt_Status register. */
    vuint32_t PMTIE:1;                 /* PMT Interrupt Enable When this bit is set, it enables the assertion of the interrupt signal because of the setting of PMTIS bit in MAC_Interrupt_Status register. */
    vuint32_t _unused_5:1;             /* Reserved. */
    vuint32_t _unused_6:6;             /* Reserved. */
    vuint32_t TSIE:1;                  /* Timestamp Interrupt Enable When this bit is set, it enables the assertion of the interrupt signal because of the setting of TSIS bit in MAC_Interrupt_Status register. */
    vuint32_t TXSTSIE:1;               /* Transmit Status Interrupt Enable When this bit is set, it enables the assertion of the interrupt signal because of the setting of TXSTSIS bit in the MAC_Interrupt_Status register. */
    vuint32_t RXSTSIE:1;               /* Receive Status Interrupt Enable When this bit is set, it enables the assertion of the interrupt signal because of the setting of RXSTSIS bit in the MAC_Interrupt_Status register. */
    vuint32_t _unused_15:1;            /* Reserved. */
    vuint32_t _unused_16:1;            /* Reserved. */
    vuint32_t FPEIE:1;                 /* Frame Preemption Interrupt Enable When this bit is set, it enables the assertion of the interrupt when FPEIS field is set in the MAC_Interrupt_Status register. */
    vuint32_t MDIOIE:1;                /* MDIO Interrupt Enable When this bit is set, it enables the assertion of the interrupt when MDIOIS field is set in the MAC_Interrupt_Status register. */
    vuint32_t _unused_19:13;           /* Reserved. */
  } B;
} GMAC_MAC_INTERRUPT_ENABLE_tag;

typedef union GMAC_MAC_RX_TX_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TJT:1;                   /* Transmit Jabber Timeout This bit indicates that the Transmit Jabber Timer expired which happens when the packet size exceeds 2,048 bytes and JD bit is reset in the MAC_Configuration register. This bit is set when the packet size exceeds 16,383 bytes and the JD bit is set in the MAC_Configuration register. Access restriction applies. Clears on read (or write of 1 when RCWE bit in MAC_CSR_SW_Ctrl register is set). Self-set to 1 on internal event. */
    vuint32_t NCARR:1;                 /* No Carrier When the DTXSTS bit is set in the MTL_Operation_Mode register, this bit indicates that the carrier signal from the PHY is not present at the end of preamble transmission. Access restriction applies. Clears on read (or write of 1 when RCWE bit in MAC_CSR_SW_Ctrl register is set). Self-set to 1 on internal event. */
    vuint32_t LCARR:1;                 /* Loss of Carrier When the DTXSTS bit is set in the MTL_Operation_Mode register, this bit indicates that the loss of carrier occurred during packet transmission, that is, the phy_crs_i signal was inactive for one or more transmission clock periods during packet transmission. This bit is valid only for packets transmitted without collision. Access restriction applies. Clears on read (or write of 1 when RCWE bit in MAC_CSR_SW_Ctrl register is set). Self-set to 1 on internal event. */
    vuint32_t EXDEF:1;                 /* Excessive Deferral When the DTXSTS bit is set in the MTL_Operation_Mode register and the DC bit is set in the MAC_Configuration register, this bit indicates that the transmission ended because of excessive deferral of over 24,288 bit times. Access restriction applies. Clears on read (or write of 1 when RCWE bit in MAC_CSR_SW_Ctrl register is set). Self-set to 1 on internal event. */
    vuint32_t LCOL:1;                  /* Late Collision When the DTXSTS bit is set in the MTL_Operation_Mode register, this bit indicates that the packet transmission aborted because a collision occurred after the collision window (64 bytes including Preamble in MII mode; 512 bytes including Preamble and Carrier Extension in GMII mode). This bit is not valid if the Underflow error occurs. Access restriction applies. Clears on read (or write of 1 when RCWE bit in MAC_CSR_SW_Ctrl register is set). Self-set to 1 on internal event. */
    vuint32_t EXCOL:1;                 /* Excessive Collisions When the DTXSTS bit is set in the MTL_Operation_Mode register, this bit indicates that the transmission aborted after 16 successive collisions while attempting to transmit the current packet. If the DR bit is set in the MAC_Configuration register, this bit is set after the first collision and the packet transmission is aborted. Access restriction applies. Clears on read (or write of 1 when RCWE bit in MAC_CSR_SW_Ctrl register is set). Self-set to 1 on internal event. */
    vuint32_t _unused_6:2;             /* Reserved. */
    vuint32_t RWT:1;                   /* Receive Watchdog Timeout This bit is set when a packet with length greater than 2,048 bytes is received and the WD bit is reset in the MAC_Configuration register. This bit is set when a packet with length greater than 16,383 bytes is received and the WD bit is set in the MAC_Configuration register. Access restriction applies. Clears on read (or write of 1 when RCWE bit in MAC_CSR_SW_Ctrl register is set). Self-set to 1 on internal event. */
    vuint32_t _unused_9:23;            /* Reserved. */
  } B;
} GMAC_MAC_RX_TX_STATUS_tag;

typedef union GMAC_MAC_PMT_CONTROL_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PWRDWN:1;                /* Power Down When this bit is set, the MAC receiver drops all received packets until it receives the expected magic packet or remote wake-up packet. This bit is then self-cleared and the power-down mode is disabled. The software can clear this bit before the expected magic packet or remote wake-up packet is received. The packets received by the MAC after this bit is cleared are forwarded to the application. This bit must only be set when the Magic Packet Enable, Global Unicast, or Remote Wake-Up Packet Enable bit is set high. Note: You can gate-off the CSR clock during the power-down mode. However, when the CSR clock is gated-off, you cannot perform any read or write operations on this register. Therefore, the Software cannot clear this bit. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t MGKPKTEN:1;              /* Magic Packet Enable When this bit is set, a power management event is generated when the MAC receives a magic packet. */
    vuint32_t RWKPKTEN:1;              /* Remote Wake-Up Packet Enable When this bit is set, a power management event is generated when the MAC receives a remote wake-up packet. */
    vuint32_t _unused_3:2;             /* Reserved. */
    vuint32_t MGKPRCVD:1;              /* Magic Packet Received When this bit is set, it indicates that the power management event is generated because of the reception of a magic packet. This bit is cleared when this register is read. Access restriction applies. Clears on read (or write of 1 when RCWE bit in MAC_CSR_SW_Ctrl register is set). Self-set to 1 on internal event. */
    vuint32_t RWKPRCVD:1;              /* Remote Wake-Up Packet Received When this bit is set, it indicates that the power management event is generated because of the reception of a remote wake-up packet. This bit is cleared when this register is read. Access restriction applies. Clears on read (or write of 1 when RCWE bit in MAC_CSR_SW_Ctrl register is set). Self-set to 1 on internal event. */
    vuint32_t _unused_7:2;             /* Reserved. */
    vuint32_t GLBLUCAST:1;             /* Global Unicast When this bit set, any unicast packet filtered by the MAC (DAF) address recognition is detected as a remote wake-up packet. */
    vuint32_t RWKPFE:1;                /* Remote Wake-up Packet Forwarding Enable When this bit is set along with RWKPKTEN, the MAC receiver drops all received frames until it receives the expected Wake-up frame. All frames after that event including the received wake-up frame are forwarded to application. This bit is then self-cleared on receiving the wake-up packet. The application can also clear this bit before the expected wake-up frame is received. In such cases, the MAC reverts to the default behavior where packets received are forwarded to the application. This bit must only be set when RWKPKTEN is set high and PWRDWN is set low. The setting of this bit has no effect when PWRDWN is set high. Note: If Magic Packet Enable and Wake-Up Frame Enable are both set along with setting of this bit and Magic Packet is received prior to wake-up frame, this bit is self-cleared on receiving Magic Packet, the received Magic packet is dropped, and all frames after received Magic Packet are forwarded to application. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t _unused_11:13;           /* Reserved. */
    vuint32_t RWKPTR:5;                /* Remote Wake-up FIFO Pointer This field gives the current value (0 to 7, 15, or 31 when 4, 8, or 16 Remote Wake-up Packet Filters are selected) of the Remote Wake-up Packet Filter register pointer. When the value of this pointer is equal to maximum for the selected number of Remote Wake-up Packet Filters, the contents of the Remote Wake-up Packet Filter Register are transferred to the clk_rx_i domain when a Write occurs to that register. */
    vuint32_t _unused_29:2;            /* Reserved. */
    vuint32_t RWKFILTRST:1;            /* Remote Wake-Up Packet Filter Register Pointer Reset When this bit is set, the remote wake-up packet filter register pointer is reset to 3'b000. It is automatically cleared after 1 clock cycle. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
  } B;
} GMAC_MAC_PMT_CONTROL_STATUS_tag;

typedef union GMAC_MAC_RWK_PACKET_FILTER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t WKUPFRMFTR:32;           /* RWK Packet Filter This field contains the various controls of RWK Packet filter. */
  } B;
} GMAC_MAC_RWK_PACKET_FILTER_tag;

typedef union GMAC_MAC_PHYIF_CONTROL_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TC:1;                    /* Transmit Configuration in RGMII, SGMII, or SMII When set, this bit enables the transmission of duplex mode, link speed, and link up or down information to the PHY in the RGMII, SMII, or SGMII port. When this bit is reset, no such information is driven to the PHY. The details of this feature are provided in the following sections: - "Reduced Gigabit Media Independent Interface" - "Serial Media Independent Interface" - "Serial Gigabit Media Independent Interface" */
    vuint32_t LUD:1;                   /* Link Up or Down This bit indicates whether the link is up or down during transmission of configuration in the RGMII, SGMII, or SMII interface. */
    vuint32_t _unused_2:1;             /* Reserved. */
    vuint32_t _unused_3:1;             /* Reserved. */
    vuint32_t _unused_4:1;             /* Reserved. */
    vuint32_t _unused_5:11;            /* Reserved. */
    vuint32_t LNKMOD:1;                /* Link Mode This bit indicates the current mode of operation of the link. */
    vuint32_t LNKSPEED:2;              /* Link Speed This bit indicates the current speed of the link. */
    vuint32_t LNKSTS:1;                /* Link Status This bit indicates whether the link is up (1'b1) or down (1'b0). */
    vuint32_t _unused_20:1;            /* Reserved. */
    vuint32_t _unused_21:1;            /* Reserved. */
    vuint32_t _unused_22:10;           /* Reserved. */
  } B;
} GMAC_MAC_PHYIF_CONTROL_STATUS_tag;

typedef union GMAC_MAC_VERSION_union_tag {
  vuint32_t R;
  struct {
    vuint32_t IPVER:8;                 /* IP version */
    vuint32_t CFGVER:8;                /* IP configuration version */
    vuint32_t _unused_16:16;           /* Reserved. */
  } B;
} GMAC_MAC_VERSION_tag;

typedef union GMAC_MAC_DEBUG_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RPESTS:1;                /* MAC GMII or MII Receive Protocol Engine Status When this bit is set, it indicates that the MAC GMII or MII receive protocol engine is actively receiving data, and it is not in the Idle state. */
    vuint32_t RFCFCSTS:2;              /* MAC Receive Packet Controller FIFO Status When this bit is set, this field indicates the active state of the small FIFO Read and Write controllers of the MAC Receive Packet Controller module. */
    vuint32_t _unused_3:13;            /* Reserved. */
    vuint32_t TPESTS:1;                /* MAC GMII or MII Transmit Protocol Engine Status When this bit is set, it indicates that the MAC GMII or MII transmit protocol engine is actively transmitting data, and it is not in the Idle state. */
    vuint32_t TFCSTS:2;                /* MAC Transmit Packet Controller Status This field indicates the state of the MAC Transmit Packet Controller module. */
    vuint32_t _unused_19:13;           /* Reserved. */
  } B;
} GMAC_MAC_DEBUG_tag;

typedef union GMAC_MAC_HW_FEATURE0_union_tag {
  vuint32_t R;
  struct {
    vuint32_t MIISEL:1;                /* 10 or 100 Mbps Support This bit is set to 1 when 10/100 Mbps is selected as the Mode of Operation */
    vuint32_t GMIISEL:1;               /* 1000 Mbps Support This bit is set to 1 when 1000 Mbps is selected as the Mode of Operation */
    vuint32_t HDSEL:1;                 /* Half-duplex Support This bit is set to 1 when the half-duplex mode is selected */
    vuint32_t PCSSEL:1;                /* PCS Registers (TBI, SGMII, or RTBI PHY interface) This bit is set to 1 when the TBI, SGMII, or RTBI PHY interface option is selected */
    vuint32_t VLHASH:1;                /* VLAN Hash Filter Selected This bit is set to 1 when the Enable VLAN Hash Table Based Filtering option is selected */
    vuint32_t SMASEL:1;                /* SMA (MDIO) Interface This bit is set to 1 when the Enable Station Management (MDIO Interface) option is selected */
    vuint32_t RWKSEL:1;                /* PMT Remote Wake-up Packet Enable This bit is set to 1 when the Enable Remote Wake-Up Packet Detection option is selected */
    vuint32_t MGKSEL:1;                /* PMT Magic Packet Enable This bit is set to 1 when the Enable Magic Packet Detection option is selected */
    vuint32_t MMCSEL:1;                /* RMON Module Enable This bit is set to 1 when the Enable MAC Management Counters (MMC) option is selected */
    vuint32_t ARPOFFSEL:1;             /* ARP Offload Enabled This bit is set to 1 when the Enable IPv4 ARP Offload option is selected */
    vuint32_t _unused_10:2;            /* Reserved. */
    vuint32_t TSSEL:1;                 /* IEEE 1588-2008 Timestamp Enabled This bit is set to 1 when the Enable IEEE 1588 Timestamp Support option is selected */
    vuint32_t _unused_13:1;            /* Reserved. */
    vuint32_t TXCOESEL:1;              /* Transmit Checksum Offload Enabled This bit is set to 1 when the Enable Transmit TCP/IP Checksum Insertion option is selected */
    vuint32_t _unused_15:1;            /* Reserved. */
    vuint32_t RXCOESEL:1;              /* Receive Checksum Offload Enabled This bit is set to 1 when the Enable Receive TCP/IP Checksum Check option is selected */
    vuint32_t _unused_17:1;            /* Reserved. */
    vuint32_t ADDMACADRSEL:5;          /* MAC Addresses 1-31 Selected This bit is set to 1 when the non-zero value is selected for Enable Additional 1-31 MAC Address Registers option */
    vuint32_t MACADR32SEL:1;           /* MAC Addresses 32-63 Selected This bit is set to 1 when the Enable Additional 32 MAC Address Registers (32-63) option is selected */
    vuint32_t MACADR64SEL:1;           /* MAC Addresses 64-127 Selected This bit is set to 1 when the Enable Additional 64 MAC Address Registers (64-127) option is selected */
    vuint32_t TSSTSSEL:2;              /* Timestamp System Time Source This bit indicates the source of the Timestamp system time: This bit is set to 1 when the Enable IEEE 1588 Timestamp Support option is selected */
    vuint32_t SAVLANINS:1;             /* Source Address or VLAN Insertion Enable This bit is set to 1 when the Enable SA and VLAN Insertion on Tx option is selected */
    vuint32_t ACTPHYSEL:3;             /* Active PHY Selected When you have multiple PHY interfaces in your configuration, this field indicates the sampled value of phy_intf_sel_i during reset de-assertion. */
    vuint32_t _unused_31:1;            /* Reserved. */
  } B;
} GMAC_MAC_HW_FEATURE0_tag;

typedef union GMAC_MAC_HW_FEATURE1_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXFIFOSIZE:5;            /* MTL Receive FIFO Size This field contains the configured value of MTL Rx FIFO in bytes expressed as Log to base 2 minus 7, that is, Log2(RXFIFO_SIZE) -7: */
    vuint32_t SPRAM:1;                 /* Single Port RAM Enable This bit is set to 1 when the Use single port RAM Feature is selected. */
    vuint32_t TXFIFOSIZE:5;            /* MTL Transmit FIFO Size This field contains the configured value of MTL Tx FIFO in bytes expressed as Log to base 2 minus 7, that is, Log2(TXFIFO_SIZE) -7: */
    vuint32_t OSTEN:1;                 /* One-Step Timestamping Enable This bit is set to 1 when the Enable One-Step Timestamp Feature is selected. */
    vuint32_t PTOEN:1;                 /* PTP Offload Enable This bit is set to 1 when the Enable PTP Timestamp Offload Feature is selected. */
    vuint32_t ADVTHWORD:1;             /* IEEE 1588 High Word Register Enable This bit is set to 1 when the Add IEEE 1588 Higher Word Register option is selected */
    vuint32_t ADDR64:2;                /* Address Width. This field indicates the configured address width: */
    vuint32_t DCBEN:1;                 /* DCB Feature Enable This bit is set to 1 when the Enable Data Center Bridging option is selected */
    vuint32_t SPHEN:1;                 /* Split Header Feature Enable This bit is set to 1 when the Enable Split Header Structure option is selected */
    vuint32_t _unused_18:1;            /* Reserved. */
    vuint32_t DBGMEMA:1;               /* DMA Debug Registers Enable This bit is set to 1 when the Debug Mode Enable option is selected */
    vuint32_t AVSEL:1;                 /* AV Feature Enable This bit is set to 1 when the Enable Audio Video Bridging option is selected. */
    vuint32_t RAVSEL:1;                /* Rx Side Only AV Feature Enable This bit is set to 1 when the Enable Audio Video Bridging option on Rx Side Only is selected. */
    vuint32_t _unused_22:1;            /* Reserved. */
    vuint32_t POUOST:1;                /* One Step for PTP over UDP/IP Feature Enable This bit is set to 1 when the Enable One step timestamp for PTP over UDP/IP feature is selected. */
    vuint32_t HASHTBLSZ:2;             /* Hash Table Size This field indicates the size of the hash table: */
    vuint32_t _unused_26:1;            /* Reserved. */
    vuint32_t L3L4FNUM:4;              /* Total number of L3 or L4 Filters This field indicates the total number of L3 or L4 filters: */
    vuint32_t _unused_31:1;            /* Reserved. */
  } B;
} GMAC_MAC_HW_FEATURE1_tag;

typedef union GMAC_MAC_HW_FEATURE2_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXQCNT:4;                /* Number of MTL Receive Queues This field indicates the number of MTL Receive queues: */
    vuint32_t _unused_4:2;             /* Reserved. */
    vuint32_t TXQCNT:4;                /* Number of MTL Transmit Queues This field indicates the number of MTL Transmit queues: */
    vuint32_t _unused_10:2;            /* Reserved. */
    vuint32_t RXCHCNT:4;               /* Number of DMA Receive Channels This field indicates the number of DMA Receive channels: */
    vuint32_t _unused_16:2;            /* Reserved. */
    vuint32_t TXCHCNT:4;               /* Number of DMA Transmit Channels This field indicates the number of DMA Transmit channels: */
    vuint32_t _unused_22:2;            /* Reserved. */
    vuint32_t PPSOUTNUM:3;             /* Number of PPS Outputs This field indicates the number of PPS outputs: */
    vuint32_t _unused_27:1;            /* Reserved. */
    vuint32_t AUXSNAPNUM:3;            /* Number of Auxiliary Snapshot Inputs This field indicates the number of auxiliary snapshot inputs: */
    vuint32_t _unused_31:1;            /* Reserved. */
  } B;
} GMAC_MAC_HW_FEATURE2_tag;

typedef union GMAC_MAC_HW_FEATURE3_union_tag {
  vuint32_t R;
  struct {
    vuint32_t NRVF:3;                  /* Number of Extended VLAN Tag Filters Enabled This field indicates the Number of Extended VLAN Tag Filters selected: */
    vuint32_t _unused_3:1;             /* Reserved. */
    vuint32_t CBTISEL:1;               /* Queue/Channel based VLAN tag insertion on Tx Enable This bit is set to 1 when the Enable Queue/Channel based VLAN tag insertion on Tx Feature is selected. */
    vuint32_t DVLAN:1;                 /* Double VLAN Tag Processing Selected This bit is set to 1 when the Enable Double VLAN Processing Feature is selected. */
    vuint32_t _unused_6:3;             /* Reserved. */
    vuint32_t PDUPSEL:1;               /* Broadcast/Multicast Packet Duplication This bit is set to 1 when the Broadcast/Multicast Packet Duplication feature is selected. */
    vuint32_t FRPSEL:1;                /* Flexible Receive Parser Selected This bit is set to 1 when the Enable Flexible Programmable Receive Parser option is selected. */
    vuint32_t FRPBS:2;                 /* Flexible Receive Parser Buffer size This field indicates the supported Max Number of bytes of the packet data to be Parsed by Flexible Receive Parser. */
    vuint32_t FRPES:2;                 /* Flexible Receive Parser Table Entries size This field indicates the Max Number of Parser Entries supported by Flexible Receive Parser. */
    vuint32_t _unused_15:1;            /* Reserved. */
    vuint32_t ESTSEL:1;                /* Enhancements to Scheduling Traffic Enable This bit is set to 1 when the Enable Enhancements to Scheduling Traffic feature is selected. */
    vuint32_t ESTDEP:3;                /* Depth of the Gate Control List */
    vuint32_t ESTWID:2;                /* Width of the Time Interval field in the Gate Control List This field indicates the width of the Configured Time Interval Field */
    vuint32_t _unused_22:4;            /* Reserved. */
    vuint32_t FPESEL:1;                /* Frame Preemption Enable This bit is set to 1 when the Enable Frame preemption feature is selected. */
    vuint32_t TBSSEL:1;                /* Time Based Scheduling Enable This bit is set to 1 when the Time Based Scheduling feature is selected. */
    vuint32_t ASP:2;                   /* Automotive Safety Package Following are the encoding for the different Safety features */
    vuint32_t _unused_30:2;            /* Reserved. */
  } B;
} GMAC_MAC_HW_FEATURE3_tag;

typedef union GMAC_MAC_DPP_FSM_INTERRUPT_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved. */
    vuint32_t _unused_1:1;             /* Reserved. */
    vuint32_t RDPES:1;                 /* Read Descriptor Parity checker Error Status This bit when set indicates that a parity error is detected at the DMA Read descriptor parity checker (or at PC3 as shown in Fig.Transmit data path parity protection). */
    vuint32_t MPES:1;                  /* MTL data path Parity checker Error Status This bit when set indicates that a parity error is detected at the MTL transmit write controller parity checker (or at PC4 as shown in Fig.Transmit data path parity protection). */
    vuint32_t MTSPES:1;                /* MTL TX Status data path Parity checker Error Status This filed when set indicates that, parity error is detected on the MTL TX Status data on ati interface (or at PC5 as shown in Fig.Transmit data path parity protection). */
    vuint32_t ARPES:1;                 /* Application Receive interface data path Parity Error Status This bit when set indicates that a parity error is detected at following checkers based on the system configuration as described below - In MTL configuration (DWC_EQOS_SYS=1), parity checker (PC6 as shown in Fig.Receive Data path Parity protection) at ARI interface. - In DMA configuration (DWC_EQOS_SYS=2), parity checker (PC6 as shown in Fig.Receive Data path Parity protection) at DMA application interface. - In AHB configuration (DWC_EQOS_SYS=3), parity checker (PC6 as shown in Fig.Receive Data path Parity protection) at AHB master interface. - In AXI configuration (DWC_EQOS_SYS=4), parity checker (PC6 as shown in Fig.Receive Data path Parity protection) at AXI master interface. */
    vuint32_t _unused_6:1;             /* Reserved. */
    vuint32_t _unused_7:1;             /* Reserved. */
    vuint32_t TTES:1;                  /* Tx FSM Timeout Error Status This field when set indicates that one of the Tx FSM Timeout has occurred. */
    vuint32_t RTES:1;                  /* Rx FSM Timeout Error Status This field when set indicates that one of the Rx FSM Timeout has occurred. */
    vuint32_t _unused_10:1;            /* Reserved. */
    vuint32_t ATES:1;                  /* APP FSM Timeout Error Status This field when set indicates that one of the APP FSM Timeout has occurred. */
    vuint32_t PTES:1;                  /* PTP FSM Timeout Error Status This field when set indicates that one of the PTP FSM Timeout has occurred. */
    vuint32_t _unused_13:1;            /* Reserved. */
    vuint32_t _unused_14:1;            /* Reserved. */
    vuint32_t _unused_15:1;            /* Reserved. */
    vuint32_t MSTTES:1;                /* Master Read/Write Timeout Error Status This field when set indicates that an Application/CSR Timeout has occurred on the master (AXI/AHB/ARI/ATI) interface. */
    vuint32_t _unused_17:1;            /* Reserved. */
    vuint32_t _unused_18:6;            /* Reserved. */
    vuint32_t FSMPES:1;                /* FSM State Parity Error Status This field when set indicates one of the FSMs State registers has a parity error detected. */
    vuint32_t _unused_25:7;            /* Reserved. */
  } B;
} GMAC_MAC_DPP_FSM_INTERRUPT_STATUS_tag;

typedef union GMAC_MAC_FSM_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TMOUTEN:1;               /* This bit when set indicates that the FSM timeout feature is enabled. */
    vuint32_t PRTYEN:1;                /* This bit when set indicates that the FSM parity feature is enabled. */
    vuint32_t _unused_2:6;
    vuint32_t TTEIN:1;                 /* Tx FSM Timeout Error Injection This field when set indicates that Error Injection for TX FSM timeout is enabled. */
    vuint32_t RTEIN:1;                 /* Rx FSM Timeout Error Injection This field when set indicates that Error Injection for RX FSM timeout is enabled. */
    vuint32_t _unused_10:1;            /* Reserved. */
    vuint32_t ATEIN:1;                 /* APP FSM Timeout Error Injection This field when set indicates that Error Injection for APP FSM timeout is enabled. */
    vuint32_t PTEIN:1;                 /* PTP FSM Timeout Error Injection This field when set indicates that Error Injection for PTP FSM timeout is enabled. */
    vuint32_t _unused_13:1;            /* Reserved. */
    vuint32_t _unused_14:1;            /* Reserved. */
    vuint32_t _unused_15:1;            /* Reserved. */
    vuint32_t TPEIN:1;                 /* Tx FSM Parity Error Injection This field when set indicates that Error Injection for TX FSM Parity is enabled. */
    vuint32_t RPEIN:1;                 /* Rx FSM Parity Error Injection This field when set indicates that Error Injection for RX FSM Parity is enabled. */
    vuint32_t _unused_18:1;            /* Reserved. */
    vuint32_t APEIN:1;                 /* APP FSM Parity Error Injection This field when set indicates that Error Injection for APP FSM Parity is enabled. */
    vuint32_t PPEIN:1;                 /* PTP FSM Parity Error Injection This field when set indicates that Error Injection for PTP FSM Parity is enabled. */
    vuint32_t _unused_21:1;            /* Reserved. */
    vuint32_t _unused_22:1;            /* Reserved. */
    vuint32_t _unused_23:1;            /* Reserved. */
    vuint32_t TLGRNML:1;               /* Tx Large/Normal Mode Select This field when set indicates that large mode tic generation is used for Tx domain, else normal mode tic generation is used. */
    vuint32_t RLGRNML:1;               /* Rx Large/Normal Mode Select This field when set indicates that large mode tic generation is used for Rx domain, else normal mode tic generation is used. */
    vuint32_t _unused_26:1;            /* Reserved. */
    vuint32_t ALGRNML:1;               /* APP Large/Normal Mode Select This field when set indicates that large mode tic generation is used for APP domain, else normal mode tic generation is used. */
    vuint32_t PLGRNML:1;               /* PTP Large/Normal Mode Select This field when set indicates that large mode tic generation is used for PTP domain, else normal mode tic generation is used. */
    vuint32_t _unused_29:1;            /* Reserved. */
    vuint32_t _unused_30:1;            /* Reserved. */
    vuint32_t _unused_31:1;            /* Reserved. */
  } B;
} GMAC_MAC_FSM_CONTROL_tag;

typedef union GMAC_MAC_FSM_ACT_TIMER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TMR:10;                  /* This field indicates the number of CSR clocks required to generate 1us tic. */
    vuint32_t _unused_10:6;            /* Reserved. */
    vuint32_t NTMRMD:4;                /* This field provides the value to be used for normal mode FSM and other interface time outs. The timeout duration based on the mode value is given below */
    vuint32_t LTMRMD:4;                /* This field provides the mode value to be used for large mode FSM and other interface time outs. The timeout duration based on the mode value is given below */
    vuint32_t _unused_24:8;            /* Reserved. */
  } B;
} GMAC_MAC_FSM_ACT_TIMER_tag;

typedef union GMAC_SCS_REG1_union_tag {
  vuint32_t R;
  struct {
    vuint32_t MAC_SCS1:32;             /* NXP Reserved, All the bits must be set to "0". This field is reserved for NXP Internal use, and must always be set to "0" unless instructed by NXP. Setting any bit to "1" might cause unexpected behavior in the IP. */
  } B;
} GMAC_SCS_REG1_tag;

typedef union GMAC_MAC_MDIO_ADDRESS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t GB:1;                    /* GMII Busy The application sets this bit to instruct the SMA to initiate a Read or Write access to the MDIO slave. The MAC clears this bit after the MDIO frame transfer is completed. Hence the software must not write or change any of the fields in MAC_MDIO_Address and MAC_MDIO_Data registers as long as this bit is set. For write transfers, the application must first write 16-bit data in the GDl field (and also RA field when C45E is set) in MAC_MDIO_Data register before setting this bit. When C45E is set, it should also write into the RA field of MAC_MDIO_Data register before initiating a read transfer. When a read transfer is completed (GB=0), the data read from the PHY register is valid in the GD field of the MAC_MDIO_Data register. Note: Even if the addressed PHY is not present, there is no change in the functionality of this bit. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t C45E:1;                  /* Clause 45 PHY Enable When this bit is set, Clause 45 capable PHY is connected to MDIO. When this bit is reset, Clause 22 capable PHY is connected to MDIO. */
    vuint32_t GOC_0:1;                 /* GMII Operation Command 0 This is the lower bit of the operation command to the PHY or RevMII. When in SMA mode (MDIO master) this bit along with GOC_1 determines the operation to be performed to the PHY. When only RevMII is selected in configuration this bit is read-only and tied to 1. */
    vuint32_t GOC_1:1;                 /* GMII Operation Command 1 This bit is higher bit of the operation command to the PHY or RevMII, GOC_1 and GOC_O is encoded as follows: - 00: Reserved - 01: Write - 10: Post Read Increment Address for Clause 45 PHY - 11: Read When Clause 22 PHY or RevMII is enabled, only Write and Read commands are valid. */
    vuint32_t SKAP:1;                  /* Skip Address Packet When this bit is set, the SMA does not send the address packets before read, write, or post-read increment address packets. This bit is valid only when C45E is set. */
    vuint32_t _unused_5:3;             /* Reserved. */
    vuint32_t CR:4;                    /* CSR Clock Range The CSR Clock Range selection determines the frequency of the MDC clock according to the CSR clock frequency used in your design: - 0000: CSR clock = 60-100 MHz; MDC clock = CSR clock/42 - 0001: CSR clock = 100-150 MHz; MDC clock = CSR clock/62 - 0010: CSR clock = 20-35 MHz; MDC clock = CSR clock/16 - 0011: CSR clock = 35-60 MHz; MDC clock = CSR clock/26 - 0100: CSR clock = 150-250 MHz; MDC clock = CSR clock/102 - 0101: CSR clock = 250-300 MHz; MDC clock = CSR clock/124 - 0110: CSR clock = 300-500 MHz; MDC clock = CSR clock/204 - 0111: CSR clock = 500-800 MHz; MDC clock = CSR clock/324 The suggested range of CSR clock frequency applicable for each value (when Bit 11 = 0) ensures that the MDC clock is approximately between 1.0 MHz to 2.5 MHz freqency range. When Bit 11 is set, you can achieve a higher frequency of the MDC clock than the frequency limit of 2.5 MHz (specified in the IEEE 802.3) and program a clock divider of lower value. For example, when CSR clock is of 100 MHz frequency and you program these bits as 1010, the resultant MDC clock is of 12.5 MHz which is above the range specified in IEEE 802.3. Program the following values only if the interfacing chips support faster MDC clocks: - 1000: CSR clock/4 - 1001: CSR clock/6 - 1010: CSR clock/8 - 1011: CSR clock/10 - 1100: CSR clock/12 - 1101: CSR clock/14 - 1110: CSR clock/16 - 1111: CSR clock/18 These bits are not used for accessing RevMII. These bits are read-only if the RevMII interface is selected as single PHY interface. */
    vuint32_t NTC:3;                   /* Number of Trailing Clocks This field controls the number of trailing clock cycles generated on gmii_mdc_o (MDC) after the end of transmission of MDIO frame. The valid values can be from 0 to 7. Programming the value to 3'h3 indicates that there are additional three clock cycles on the MDC line after the end of MDIO frame transfer. */
    vuint32_t _unused_15:1;            /* Reserved. */
    vuint32_t RDA:5;                   /* Register/Device Address These bits select the PHY register in selected Clause 22 PHY device. These bits select the Device (MMD) in selected Clause 45 capable PHY. */
    vuint32_t PA:5;                    /* Physical Layer Address This field indicates which Clause 22 PHY devices (out of 32 devices) the MAC is accessing. This field indicates which Clause 45 capable PHYs (out of 32 PHYs) the MAC is accessing. */
    vuint32_t BTB:1;                   /* Back to Back transactions When this bit is set and the NTC has value greater than 0, then the MAC informs the completion of a read or write command at the end of frame transfer (before the trailing clocks are transmitted). The software can thus initiate the next command which is executed immediately irrespective of the number trailing clocks generated for the previous frame. When this bit is reset, then the read/write command completion (GB is cleared) only after the trailing clocks are generated. In this mode, it is ensured that the NTC is always generated after each frame. This bit must not be set when NTC=0. */
    vuint32_t PSE:1;                   /* Preamble Suppression Enable When this bit is set, the SMA suppresses the 32-bit preamble and transmits MDIO frames with only 1 preamble bit. When this bit is 0, the MDIO frame always has 32 bits of preamble as defined in the IEEE specifications. */
    vuint32_t _unused_28:4;            /* Reserved. */
  } B;
} GMAC_MAC_MDIO_ADDRESS_tag;

typedef union GMAC_MAC_MDIO_DATA_union_tag {
  vuint32_t R;
  struct {
    vuint32_t GD:16;                   /* GMII Data This field contains the 16-bit data value read from the PHY or RevMII after a Management Read operation or the 16-bit data value to be written to the PHY or RevMII before a Management Write operation. */
    vuint32_t RA:16;                   /* Register Address This field is valid only when C45E is set. It contains the Register Address in the PHY to which the MDIO frame is intended for. */
  } B;
} GMAC_MAC_MDIO_DATA_tag;

typedef union GMAC_MAC_ARP_ADDRESS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ARPPA:32;                /* ARP Protocol Address This field contains the IPv4 Destination Address of the MAC. This address is used for perfect match with the Protocol Address of Target field in the received ARP packet. This field is available only when the Enable IPv4 ARP Offload option is selected. */
  } B;
} GMAC_MAC_ARP_ADDRESS_tag;

typedef union GMAC_MAC_CSR_SW_CTRL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RCWE:1;                  /* Register Clear on Write 1 Enable When this bit is set, the access mode of some register fields changes to Clear on Write 1, the application needs to set that respective bit to 1 to clear it. When this bit is reset, the access mode of these register fields remain as Clear on Read. */
    vuint32_t _unused_1:7;             /* Reserved. */
    vuint32_t SEEN:1;                  /* Slave Error Response Enable When this bit is set, the MAC responds with Slave Error for accesses to reserved registers in CSR space. When this bit is reset, the MAC responds with Okay response to any register accessed from CSR space. */
    vuint32_t _unused_9:23;            /* Reserved. */
  } B;
} GMAC_MAC_CSR_SW_CTRL_tag;

typedef union GMAC_MAC_FPE_CTRL_STS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t EFPE:1;                  /* Enable Tx Frame Preemption When set Frame Preemption Tx functionality is enabled. */
    vuint32_t SVER:1;                  /* Send Verify mPacket When set indicates hardware to send a verify mPacket. Reset by hardware after sending the Verify mPacket. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t SRSP:1;                  /* Send Respond mPacket When set indicates hardware to send a Respond mPacket. Reset by hardware after sending the Respond mPacket. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t S1_SET_0:1;              /* NXP Reserved, Must be set to "0". This field is reserved for NXP Internal use, and must always be set to "0" unless instructed by NXP. Setting to "1" might cause unexpected behavior in the IP. */
    vuint32_t _unused_4:12;            /* Reserved. */
    vuint32_t RVER:1;                  /* Received Verify Frame Set when a Verify mPacket is received. An interrupt can be generated for this event if FPEIE bit of MAC_Interrupt_Enable is set. Access restriction applies. Clears on read (or write of 1 when RCWE bit in MAC_CSR_SW_Ctrl register is set). Self-set to 1 on internal event. */
    vuint32_t RRSP:1;                  /* Received Respond Frame Set when a Respond mPacket is received. An interrupt can be generated for this event if FPEIE bit of MAC_Interrupt_Enable is set. Access restriction applies. Clears on read (or write of 1 when RCWE bit in MAC_CSR_SW_Ctrl register is set). Self-set to 1 on internal event. */
    vuint32_t TVER:1;                  /* Transmitted Verify Frame Set when a Verify mPacket is transmitted (triggered by setting SVER field). An interrupt can be generated for this event if FPEIE bit of MAC_Interrupt_Enable is set. Access restriction applies. Clears on read (or write of 1 when RCWE bit in MAC_CSR_SW_Ctrl register is set). Self-set to 1 on internal event. */
    vuint32_t TRSP:1;                  /* Transmitted Respond Frame Set when a Respond mPacket is transmitted (triggered by setting SRSP field). An interrupt can be generated for this event if FPEIE bit of MAC_Interrupt_Enable is set. Access restriction applies. Clears on read (or write of 1 when RCWE bit in MAC_CSR_SW_Ctrl register is set). Self-set to 1 on internal event. */
    vuint32_t _unused_20:12;           /* Reserved. */
  } B;
} GMAC_MAC_FPE_CTRL_STS_tag;

typedef union GMAC_MAC_EXT_CFG1_union_tag {
  vuint32_t R;
  struct {
    vuint32_t SPLOFST:7;               /* Split Offset These bits indicate the value of offset from the beginning of Length/Type field at which header split should take place when the appropriate SPLM is selected. The reset value of this field is 2 bytes indicating a split at L2 header. Value is in terms of bytes. */
    vuint32_t _unused_7:1;             /* Reserved. */
    vuint32_t SPLM:2;                  /* Split Mode These bits indicate the mode of splitting the incoming Rx packets. They are */
    vuint32_t _unused_10:22;           /* Reserved. */
  } B;
} GMAC_MAC_EXT_CFG1_tag;

typedef union GMAC_MAC_PRESN_TIME_NS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t MPTN:32;                 /* MAC 1722 Presentation Time in ns These bits indicate the value of the 32-bit binary rollover equivalent time of the PTP System Time in ns */
  } B;
} GMAC_MAC_PRESN_TIME_NS_tag;

typedef union GMAC_MAC_PRESN_TIME_UPDT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t MPTU:32;                 /* MAC 1722 Presentation Time Update This field holds the init value or the update value for the presentation time. When used for update, this field holds the 32-bit value in ns, that should be added to the Current Presentation Time Counter value. Init happens when TSINIT is set, and update happens when the TSUPDT bit is set (TSINIT and TSINIT defined in MAC_Timestamp_ Control register). When ADDSUB field of MAC_System_Time_Nanoseconds_Update is set, this value is directly used for subtraction */
  } B;
} GMAC_MAC_PRESN_TIME_UPDT_tag;

typedef union GMAC_MAC_ADDRESS0_HIGH_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ADDRHI:16;               /* MAC Address0[47:32] This field contains the upper 16 bits [47:32] of the first 6-byte MAC address. The MAC uses this field for filtering the received packets and inserting the MAC address in the Transmit Flow Control (Pause) Packets. */
    vuint32_t DCS:5;                   /* DMA Channel Select If the PDC bit of MAC_Ext_Configuration register is not set: This field contains the binary representation of the DMA Channel number to which an Rx packet whose DA matches the MAC Address0 content is routed. If the PDC bit of MAC_Ext_Configuration register is set: This field contains the one-hot representation of one or more DMA Channel numbers to which an Rx packet whose DA matches the MAC Address0 content is routed. */
    vuint32_t _unused_21:10;           /* Reserved. */
    vuint32_t AE:1;                    /* Address Enable This bit is always set to 1. */
  } B;
} GMAC_MAC_ADDRESS0_HIGH_tag;

typedef union GMAC_MAC_ADDRESS0_LOW_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ADDRLO:32;               /* MAC Address0[31:0] This field contains the lower 32 bits of the first 6-byte MAC address. The MAC uses this field for filtering the received packets and inserting the MAC address in the Transmit Flow Control (Pause) Packets. */
  } B;
} GMAC_MAC_ADDRESS0_LOW_tag;

typedef union GMAC_MAC_ADDRESS1_HIGH_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ADDRHI:16;               /* MAC Address1 [47:32] This field contains the upper 16 bits[47:32] of the second 6-byte MAC address. */
    vuint32_t DCS:5;                   /* DMA Channel Select If the PDC bit of MAC_Ext_Configuration register is not set: This field contains the binary representation of the DMA Channel number to which an Rx packet whose DA matches the MAC Address(#i) content is routed. If the PDC bit of MAC_Ext_Configuration register is set: This field contains the one-hot representation of one or more DMA Channel numbers to which an Rx packet whose DA matches the MAC Address(#i) content is routed. */
    vuint32_t _unused_21:3;            /* Reserved. */
    vuint32_t MBC:6;                   /* Mask Byte Control These bits are mask control bits for comparing each of the MAC Address bytes. When set high, the MAC does not compare the corresponding byte of received DA or SA with the contents of MAC Address1 registers. Each bit controls the masking of the bytes as follows: - Bit 29: MAC_Address${i}_High[15:8] - Bit 28: MAC_Address${i}_High[7:0] - Bit 27: MAC_Address${i}_Low[31:24] - .. - Bit 24: MAC_Address${i}_Low[7:0] You can filter a group of addresses (known as group address filtering) by masking one or more bytes of the address. */
    vuint32_t SA:1;                    /* Source Address When this bit is set, the MAC Address1[47:0] is used to compare with the SA fields of the received packet. When this bit is reset, the MAC Address1[47:0] is used to compare with the DA fields of the received packet. */
    vuint32_t AE:1;                    /* Address Enable When this bit is set, the address filter module uses the second MAC address for perfect filtering. When this bit is reset, the address filter module ignores the address for filtering. */
  } B;
} GMAC_MAC_ADDRESS1_HIGH_tag;

typedef union GMAC_MAC_ADDRESS1_LOW_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ADDRLO:32;               /* MAC Address1 [31:0] This field contains the lower 32 bits of second 6-byte MAC address. The content of this field is undefined until loaded by the application after the initialization process. */
  } B;
} GMAC_MAC_ADDRESS1_LOW_tag;

typedef union GMAC_MMC_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t CNTRST:1;                /* Counters Reset When this bit is set, all counters are reset. This bit is cleared automatically after 1 clock cycle. Access restriction applies. Self-cleared. Setting 0 clears. Setting 1 sets. */
    vuint32_t CNTSTOPRO:1;             /* Counter Stop Rollover When this bit is set, the counter does not roll over to zero after reaching the maximum value. */
    vuint32_t RSTONRD:1;               /* Reset on Read When this bit is set, the MMC counters are reset to zero after Read (self-clearing after reset). The counters are cleared when the least significant byte lane (Bits[7:0]) is read. */
    vuint32_t CNTFREEZ:1;              /* MMC Counter Freeze When this bit is set, it freezes all MMC counters to their current value. Until this bit is reset to 0, no MMC counter is updated because of any transmitted or received packet. If any MMC counter is read with the Reset on Read bit set, then that counter is also cleared in this mode. */
    vuint32_t CNTPRST:1;               /* Counters Preset When this bit is set, all counters are initialized or preset to almost full or almost half according to the CNTPRSTLVL bit. This bit is cleared automatically after 1 clock cycle. This bit, along with the CNTPRSTLVL bit, is useful for debugging and testing the assertion of interrupts because of MMC counter becoming half-full or full. Access restriction applies. Self-cleared. Setting 0 clears. Setting 1 sets. */
    vuint32_t CNTPRSTLVL:1;            /* Full-Half Preset When this bit is low and the CNTPRST bit is set, all MMC counters get preset to almost-half value. All octet counters get preset to 0x7FFF_F800 (Half 2KBytes) and all packet-counters gets preset to 0x7FFF_FFF0 (Half 16). When this bit is high and the CNTPRST bit is set, all MMC counters get preset to almost-full value. All octet counters get preset to 0xFFFF_F800 (Full 2KBytes) and all packet-counters gets preset to 0xFFFF_FFF0 (Full 16). For 16-bit counters, the almost-half preset values are 0x7800 and 0x7FF0 for the respective octet and packet counters. Similarly, the almost-full preset values for the 16-bit counters are 0xF800 and 0xFFF0. */
    vuint32_t _unused_6:2;             /* Reserved. */
    vuint32_t UCDBC:1;                 /* Update MMC Counters for Dropped Broadcast Packets Note: The CNTRST bit has a higher priority than the CNTPRST bit. Therefore, when the software tries to set both bits in the same write cycle, all counters are cleared and the CNTPRST bit is not set. When set, the MAC updates all related MMC Counters for Broadcast packets that are dropped because of the setting of the DBF bit of MAC_Packet_Filter register. When reset, the MMC Counters are not updated for dropped Broadcast packets. */
    vuint32_t _unused_9:23;            /* Reserved. */
  } B;
} GMAC_MMC_CONTROL_tag;

typedef union GMAC_MMC_RX_INTERRUPT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXGBPKTIS:1;             /* MMC Receive Good Bad Packet Counter Interrupt Status This bit is set when the rxpacketcount_gb counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t RXGBOCTIS:1;             /* MMC Receive Good Bad Octet Counter Interrupt Status This bit is set when the rxoctetcount_gb counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t RXGOCTIS:1;              /* MMC Receive Good Octet Counter Interrupt Status This bit is set when the rxoctetcount_g counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t RXBCGPIS:1;              /* MMC Receive Broadcast Good Packet Counter Interrupt Status This bit is set when the rxbroadcastpackets_g counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t RXMCGPIS:1;              /* MMC Receive Multicast Good Packet Counter Interrupt Status This bit is set when the rxmulticastpackets_g counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t RXCRCERPIS:1;            /* MMC Receive CRC Error Packet Counter Interrupt Status This bit is set when the rxcrcerror counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t RXALGNERPIS:1;           /* MMC Receive Alignment Error Packet Counter Interrupt Status This bit is set when the rxalignmenterror counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t RXRUNTPIS:1;             /* MMC Receive Runt Packet Counter Interrupt Status This bit is set when the rxrunterror counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t RXJABERPIS:1;            /* MMC Receive Jabber Error Packet Counter Interrupt Status This bit is set when the rxjabbererror counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t RXUSIZEGPIS:1;           /* MMC Receive Undersize Good Packet Counter Interrupt Status This bit is set when the rxundersize_g counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t RXOSIZEGPIS:1;           /* MMC Receive Oversize Good Packet Counter Interrupt Status This bit is set when the rxoversize_g counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t RX64OCTGBPIS:1;          /* MMC Receive 64 Octet Good Bad Packet Counter Interrupt Status This bit is set when the rx64octets_gb counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t RX65T127OCTGBPIS:1;      /* MMC Receive 65 to 127 Octet Good Bad Packet Counter Interrupt Status This bit is set when the rx65to127octets_gb counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t RX128T255OCTGBPIS:1;     /* MMC Receive 128 to 255 Octet Good Bad Packet Counter Interrupt Status This bit is set when the rx128to255octets_gb counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t RX256T511OCTGBPIS:1;     /* MMC Receive 256 to 511 Octet Good Bad Packet Counter Interrupt Status This bit is set when the rx256to511octets_gb counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t RX512T1023OCTGBPIS:1;    /* MMC Receive 512 to 1023 Octet Good Bad Packet Counter Interrupt Status This bit is set when the rx512to1023octets_gb counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t RX1024TMAXOCTGBPIS:1;    /* MMC Receive 1024 to Maximum Octet Good Bad Packet Counter Interrupt Status This bit is set when the rx1024tomaxoctets_gb counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t RXUCGPIS:1;              /* MMC Receive Unicast Good Packet Counter Interrupt Status This bit is set when the rxunicastpackets_g counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t RXLENERPIS:1;            /* MMC Receive Length Error Packet Counter Interrupt Status This bit is set when the rxlengtherror counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t RXORANGEPIS:1;           /* MMC Receive Out Of Range Error Packet Counter Interrupt Status. This bit is set when the rxoutofrangetype counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t RXPAUSPIS:1;             /* MMC Receive Pause Packet Counter Interrupt Status This bit is set when the rxpausepackets counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t RXFOVPIS:1;              /* MMC Receive FIFO Overflow Packet Counter Interrupt Status This bit is set when the rxfifooverflow counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t RXVLANGBPIS:1;           /* MMC Receive VLAN Good Bad Packet Counter Interrupt Status This bit is set when the rxvlanpackets_gb counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t RXWDOGPIS:1;             /* MMC Receive Watchdog Error Packet Counter Interrupt Status This bit is set when the rxwatchdog error counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t RXRCVERRPIS:1;           /* MMC Receive Error Packet Counter Interrupt Status This bit is set when the rxrcverror counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t RXCTRLPIS:1;             /* MMC Receive Control Packet Counter Interrupt Status This bit is set when the rxctrlpackets_g counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t _unused_26:1;            /* Reserved. */
    vuint32_t _unused_27:1;            /* Reserved. */
    vuint32_t _unused_28:4;            /* Reserved. */
  } B;
} GMAC_MMC_RX_INTERRUPT_tag;

typedef union GMAC_MMC_TX_INTERRUPT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXGBOCTIS:1;             /* MMC Transmit Good Bad Octet Counter Interrupt Status This bit is set when the txoctetcount_gb counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t TXGBPKTIS:1;             /* MMC Transmit Good Bad Packet Counter Interrupt Status This bit is set when the txpacketcount_gb counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t TXBCGPIS:1;              /* MMC Transmit Broadcast Good Packet Counter Interrupt Status This bit is set when the txbroadcastpackets_g counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t TXMCGPIS:1;              /* MMC Transmit Multicast Good Packet Counter Interrupt Status This bit is set when the txmulticastpackets_g counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t TX64OCTGBPIS:1;          /* MMC Transmit 64 Octet Good Bad Packet Counter Interrupt Status This bit is set when the tx64octets_gb counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t TX65T127OCTGBPIS:1;      /* MMC Transmit 65 to 127 Octet Good Bad Packet Counter Interrupt Status This bit is set when the tx65to127octets_gb counter reaches half the maximum value, and also when it reaches the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t TX128T255OCTGBPIS:1;     /* MMC Transmit 128 to 255 Octet Good Bad Packet Counter Interrupt Status This bit is set when the tx128to255octets_gb counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t TX256T511OCTGBPIS:1;     /* MMC Transmit 256 to 511 Octet Good Bad Packet Counter Interrupt Status This bit is set when the tx256to511octets_gb counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t TX512T1023OCTGBPIS:1;    /* MMC Transmit 512 to 1023 Octet Good Bad Packet Counter Interrupt Status This bit is set when the tx512to1023octets_gb counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t TX1024TMAXOCTGBPIS:1;    /* MMC Transmit 1024 to Maximum Octet Good Bad Packet Counter Interrupt Status This bit is set when the tx1024tomaxoctets_gb counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t TXUCGBPIS:1;             /* MMC Transmit Unicast Good Bad Packet Counter Interrupt Status This bit is set when the txunicastpackets_gb counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t TXMCGBPIS:1;             /* MMC Transmit Multicast Good Bad Packet Counter Interrupt Status The bit is set when the txmulticastpackets_gb counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t TXBCGBPIS:1;             /* MMC Transmit Broadcast Good Bad Packet Counter Interrupt Status This bit is set when the txbroadcastpackets_gb counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t TXUFLOWERPIS:1;          /* MMC Transmit Underflow Error Packet Counter Interrupt Status This bit is set when the txunderflowerror counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t TXSCOLGPIS:1;            /* MMC Transmit Single Collision Good Packet Counter Interrupt Status This bit is set when the txsinglecol_g counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t TXMCOLGPIS:1;            /* MMC Transmit Multiple Collision Good Packet Counter Interrupt Status This bit is set when the txmulticol_g counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t TXDEFPIS:1;              /* MMC Transmit Deferred Packet Counter Interrupt Status This bit is set when the txdeferred counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t TXLATCOLPIS:1;           /* MMC Transmit Late Collision Packet Counter Interrupt Status This bit is set when the txlatecol counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t TXEXCOLPIS:1;            /* MMC Transmit Excessive Collision Packet Counter Interrupt Status This bit is set when the txexesscol counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t TXCARERPIS:1;            /* MMC Transmit Carrier Error Packet Counter Interrupt Status This bit is set when the txcarriererror counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t TXGOCTIS:1;              /* MMC Transmit Good Octet Counter Interrupt Status This bit is set when the txoctetcount_g counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t TXGPKTIS:1;              /* MMC Transmit Good Packet Counter Interrupt Status This bit is set when the txpacketcount_g counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t TXEXDEFPIS:1;            /* MMC Transmit Excessive Deferral Packet Counter Interrupt Status This bit is set when the txexcessdef counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t TXPAUSPIS:1;             /* MMC Transmit Pause Packet Counter Interrupt Status This bit is set when the txpausepacketserror counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t TXVLANGPIS:1;            /* MMC Transmit VLAN Good Packet Counter Interrupt Status This bit is set when the txvlanpackets_g counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t TXOSIZEGPIS:1;           /* MMC Transmit Oversize Good Packet Counter Interrupt Status This bit is set when the txoversize_g counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t _unused_26:1;            /* Reserved. */
    vuint32_t _unused_27:1;            /* Reserved. */
    vuint32_t _unused_28:4;            /* Reserved. */
  } B;
} GMAC_MMC_TX_INTERRUPT_tag;

typedef union GMAC_MMC_RX_INTERRUPT_MASK_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXGBPKTIM:1;             /* MMC Receive Good Bad Packet Counter Interrupt Mask Setting this bit masks the interrupt when the rxpacketcount_gb counter reaches half of the maximum value or the maximum value. */
    vuint32_t RXGBOCTIM:1;             /* MMC Receive Good Bad Octet Counter Interrupt Mask Setting this bit masks the interrupt when the rxoctetcount_gb counter reaches half of the maximum value or the maximum value. */
    vuint32_t RXGOCTIM:1;              /* MMC Receive Good Octet Counter Interrupt Mask Setting this bit masks the interrupt when the rxoctetcount_g counter reaches half of the maximum value or the maximum value. */
    vuint32_t RXBCGPIM:1;              /* MMC Receive Broadcast Good Packet Counter Interrupt Mask Setting this bit masks the interrupt when the rxbroadcastpackets_g counter reaches half of the maximum value or the maximum value. */
    vuint32_t RXMCGPIM:1;              /* MMC Receive Multicast Good Packet Counter Interrupt Mask Setting this bit masks the interrupt when the rxmulticastpackets_g counter reaches half of the maximum value or the maximum value. */
    vuint32_t RXCRCERPIM:1;            /* MMC Receive CRC Error Packet Counter Interrupt Mask Setting this bit masks the interrupt when the rxcrcerror counter reaches half of the maximum value or the maximum value. */
    vuint32_t RXALGNERPIM:1;           /* MMC Receive Alignment Error Packet Counter Interrupt Mask Setting this bit masks the interrupt when the rxalignmenterror counter reaches half of the maximum value or the maximum value. */
    vuint32_t RXRUNTPIM:1;             /* MMC Receive Runt Packet Counter Interrupt Mask Setting this bit masks the interrupt when the rxrunterror counter reaches half of the maximum value or the maximum value. */
    vuint32_t RXJABERPIM:1;            /* MMC Receive Jabber Error Packet Counter Interrupt Mask Setting this bit masks the interrupt when the rxjabbererror counter reaches half of the maximum value or the maximum value. */
    vuint32_t RXUSIZEGPIM:1;           /* MMC Receive Undersize Good Packet Counter Interrupt Mask Setting this bit masks the interrupt when the rxundersize_g counter reaches half of the maximum value or the maximum value. */
    vuint32_t RXOSIZEGPIM:1;           /* MMC Receive Oversize Good Packet Counter Interrupt Mask Setting this bit masks the interrupt when the rxoversize_g counter reaches half of the maximum value or the maximum value. */
    vuint32_t RX64OCTGBPIM:1;          /* MMC Receive 64 Octet Good Bad Packet Counter Interrupt Mask Setting this bit masks the interrupt when the rx64octets_gb counter reaches half of the maximum value or the maximum value. */
    vuint32_t RX65T127OCTGBPIM:1;      /* MMC Receive 65 to 127 Octet Good Bad Packet Counter Interrupt Mask Setting this bit masks the interrupt when the rx65to127octets_gb counter reaches half of the maximum value or the maximum value. */
    vuint32_t RX128T255OCTGBPIM:1;     /* MMC Receive 128 to 255 Octet Good Bad Packet Counter Interrupt Mask Setting this bit masks the interrupt when the rx128to255octets_gb counter reaches half of the maximum value or the maximum value. */
    vuint32_t RX256T511OCTGBPIM:1;     /* MMC Receive 256 to 511 Octet Good Bad Packet Counter Interrupt Mask Setting this bit masks the interrupt when the rx256to511octets_gb counter reaches half of the maximum value or the maximum value. */
    vuint32_t RX512T1023OCTGBPIM:1;    /* MMC Receive 512 to 1023 Octet Good Bad Packet Counter Interrupt Mask Setting this bit masks the interrupt when the rx512to1023octets_gb counter reaches half of the maximum value or the maximum value. */
    vuint32_t RX1024TMAXOCTGBPIM:1;    /* MMC Receive 1024 to Maximum Octet Good Bad Packet Counter Interrupt Mask. Setting this bit masks the interrupt when the rx1024tomaxoctets_gb counter reaches half of the maximum value or the maximum value. */
    vuint32_t RXUCGPIM:1;              /* MMC Receive Unicast Good Packet Counter Interrupt Mask Setting this bit masks the interrupt when the rxunicastpackets_g counter reaches half of the maximum value or the maximum value. */
    vuint32_t RXLENERPIM:1;            /* MMC Receive Length Error Packet Counter Interrupt Mask Setting this bit masks the interrupt when the rxlengtherror counter reaches half of the maximum value or the maximum value. */
    vuint32_t RXORANGEPIM:1;           /* MMC Receive Out Of Range Error Packet Counter Interrupt Mask Setting this bit masks the interrupt when the rxoutofrangetype counter reaches half of the maximum value or the maximum value. */
    vuint32_t RXPAUSPIM:1;             /* MMC Receive Pause Packet Counter Interrupt Mask Setting this bit masks the interrupt when the rxpausepackets counter reaches half of the maximum value or the maximum value. */
    vuint32_t RXFOVPIM:1;              /* MMC Receive FIFO Overflow Packet Counter Interrupt Mask Setting this bit masks the interrupt when the rxfifooverflow counter reaches half of the maximum value or the maximum value. */
    vuint32_t RXVLANGBPIM:1;           /* MMC Receive VLAN Good Bad Packet Counter Interrupt Mask Setting this bit masks the interrupt when the rxvlanpackets_gb counter reaches half of the maximum value or the maximum value. */
    vuint32_t RXWDOGPIM:1;             /* MMC Receive Watchdog Error Packet Counter Interrupt Mask Setting this bit masks the interrupt when the rxwatchdog counter reaches half of the maximum value or the maximum value. */
    vuint32_t RXRCVERRPIM:1;           /* MMC Receive Error Packet Counter Interrupt Mask Setting this bit masks the interrupt when the rxrcverror counter reaches half of the maximum value or the maximum value. */
    vuint32_t RXCTRLPIM:1;             /* MMC Receive Control Packet Counter Interrupt Mask Setting this bit masks the interrupt when the rxctrlpackets_g counter reaches half of the maximum value or the maximum value. */
    vuint32_t _unused_26:1;            /* Reserved. */
    vuint32_t _unused_27:1;            /* Reserved. */
    vuint32_t _unused_28:4;            /* Reserved. */
  } B;
} GMAC_MMC_RX_INTERRUPT_MASK_tag;

typedef union GMAC_MMC_TX_INTERRUPT_MASK_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXGBOCTIM:1;             /* MMC Transmit Good Bad Octet Counter Interrupt Mask Setting this bit masks the interrupt when the txoctetcount_gb counter reaches half of the maximum value or the maximum value. */
    vuint32_t TXGBPKTIM:1;             /* MMC Transmit Good Bad Packet Counter Interrupt Mask Setting this bit masks the interrupt when the txpacketcount_gb counter reaches half of the maximum value or the maximum value. */
    vuint32_t TXBCGPIM:1;              /* MMC Transmit Broadcast Good Packet Counter Interrupt Mask Setting this bit masks the interrupt when the txbroadcastpackets_g counter reaches half of the maximum value or the maximum value. */
    vuint32_t TXMCGPIM:1;              /* MMC Transmit Multicast Good Packet Counter Interrupt Mask Setting this bit masks the interrupt when the txmulticastpackets_g counter reaches half of the maximum value or the maximum value. */
    vuint32_t TX64OCTGBPIM:1;          /* MMC Transmit 64 Octet Good Bad Packet Counter Interrupt Mask Setting this bit masks the interrupt when the tx64octets_gb counter reaches half of the maximum value or the maximum value. */
    vuint32_t TX65T127OCTGBPIM:1;      /* MMC Transmit 65 to 127 Octet Good Bad Packet Counter Interrupt Mask Setting this bit masks the interrupt when the tx65to127octets_gb counter reaches half of the maximum value or the maximum value. */
    vuint32_t TX128T255OCTGBPIM:1;     /* MMC Transmit 128 to 255 Octet Good Bad Packet Counter Interrupt Mask Setting this bit masks the interrupt when the tx128to255octets_gb counter reaches half of the maximum value or the maximum value. */
    vuint32_t TX256T511OCTGBPIM:1;     /* MMC Transmit 256 to 511 Octet Good Bad Packet Counter Interrupt Mask Setting this bit masks the interrupt when the tx256to511octets_gb counter reaches half of the maximum value or the maximum value. */
    vuint32_t TX512T1023OCTGBPIM:1;    /* MMC Transmit 512 to 1023 Octet Good Bad Packet Counter Interrupt Mask Setting this bit masks the interrupt when the tx512to1023octets_gb counter reaches half of the maximum value or the maximum value. */
    vuint32_t TX1024TMAXOCTGBPIM:1;    /* MMC Transmit 1024 to Maximum Octet Good Bad Packet Counter Interrupt Mask Setting this bit masks the interrupt when the tx1024tomaxoctets_gb counter reaches half of the maximum value or the maximum value. */
    vuint32_t TXUCGBPIM:1;             /* MMC Transmit Unicast Good Bad Packet Counter Interrupt Mask Setting this bit masks the interrupt when the txunicastpackets_gb counter reaches half of the maximum value or the maximum value. */
    vuint32_t TXMCGBPIM:1;             /* MMC Transmit Multicast Good Bad Packet Counter Interrupt Mask Setting this bit masks the interrupt when the txmulticastpackets_gb counter reaches half of the maximum value or the maximum value. */
    vuint32_t TXBCGBPIM:1;             /* MMC Transmit Broadcast Good Bad Packet Counter Interrupt Mask Setting this bit masks the interrupt when the txbroadcastpackets_gb counter reaches half of the maximum value or the maximum value. */
    vuint32_t TXUFLOWERPIM:1;          /* MMC Transmit Underflow Error Packet Counter Interrupt Mask Setting this bit masks the interrupt when the txunderflowerror counter reaches half of the maximum value or the maximum value. */
    vuint32_t TXSCOLGPIM:1;            /* MMC Transmit Single Collision Good Packet Counter Interrupt Mask Setting this bit masks the interrupt when the txsinglecol_g counter reaches half of the maximum value or the maximum value. */
    vuint32_t TXMCOLGPIM:1;            /* MMC Transmit Multiple Collision Good Packet Counter Interrupt Mask Setting this bit masks the interrupt when the txmulticol_g counter reaches half of the maximum value or the maximum value. */
    vuint32_t TXDEFPIM:1;              /* MMC Transmit Deferred Packet Counter Interrupt Mask Setting this bit masks the interrupt when the txdeferred counter reaches half of the maximum value or the maximum value. */
    vuint32_t TXLATCOLPIM:1;           /* MMC Transmit Late Collision Packet Counter Interrupt Mask Setting this bit masks the interrupt when the txlatecol counter reaches half of the maximum value or the maximum value. */
    vuint32_t TXEXCOLPIM:1;            /* MMC Transmit Excessive Collision Packet Counter Interrupt Mask Setting this bit masks the interrupt when the txexcesscol counter reaches half of the maximum value or the maximum value. */
    vuint32_t TXCARERPIM:1;            /* MMC Transmit Carrier Error Packet Counter Interrupt Mask Setting this bit masks the interrupt when the txcarriererror counter reaches half of the maximum value or the maximum value. */
    vuint32_t TXGOCTIM:1;              /* MMC Transmit Good Octet Counter Interrupt Mask Setting this bit masks the interrupt when the txoctetcount_g counter reaches half of the maximum value or the maximum value. */
    vuint32_t TXGPKTIM:1;              /* MMC Transmit Good Packet Counter Interrupt Mask Setting this bit masks the interrupt when the txpacketcount_g counter reaches half of the maximum value or the maximum value. */
    vuint32_t TXEXDEFPIM:1;            /* MMC Transmit Excessive Deferral Packet Counter Interrupt Mask Setting this bit masks the interrupt when the txexcessdef counter reaches half of the maximum value or the maximum value. */
    vuint32_t TXPAUSPIM:1;             /* MMC Transmit Pause Packet Counter Interrupt Mask Setting this bit masks the interrupt when the txpausepackets counter reaches half of the maximum value or the maximum value. */
    vuint32_t TXVLANGPIM:1;            /* MMC Transmit VLAN Good Packet Counter Interrupt Mask Setting this bit masks the interrupt when the txvlanpackets_g counter reaches half of the maximum value or the maximum value. */
    vuint32_t TXOSIZEGPIM:1;           /* MMC Transmit Oversize Good Packet Counter Interrupt Mask Setting this bit masks the interrupt when the txoversize_g counter reaches half of the maximum value or the maximum value. */
    vuint32_t _unused_26:1;            /* Reserved. */
    vuint32_t _unused_27:1;            /* Reserved. */
    vuint32_t _unused_28:4;            /* Reserved. */
  } B;
} GMAC_MMC_TX_INTERRUPT_MASK_tag;

typedef union GMAC_TX_OCTET_COUNT_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXOCTGB:32;              /* Tx Octet Count Good Bad This field indicates the number of bytes transmitted, exclusive of preamble and retried bytes, in good and bad packets. */
  } B;
} GMAC_TX_OCTET_COUNT_GOOD_BAD_tag;

typedef union GMAC_TX_PACKET_COUNT_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXPKTGB:32;              /* Tx Packet Count Good Bad This field indicates the number of good and bad packets transmitted, exclusive of retried packets. */
  } B;
} GMAC_TX_PACKET_COUNT_GOOD_BAD_tag;

typedef union GMAC_TX_BROADCAST_PACKETS_GOOD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXBCASTG:32;             /* Tx Broadcast Packets Good This field indicates the number of good broadcast packets transmitted. */
  } B;
} GMAC_TX_BROADCAST_PACKETS_GOOD_tag;

typedef union GMAC_TX_MULTICAST_PACKETS_GOOD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXMCASTG:32;             /* Tx Multicast Packets Good This field indicates the number of good multicast packets transmitted. */
  } B;
} GMAC_TX_MULTICAST_PACKETS_GOOD_tag;

typedef union GMAC_TX_64OCTETS_PACKETS_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TX64OCTGB:32;            /* Tx 64Octets Packets Good_Bad This field indicates the number of good and bad packets transmitted with length 64 bytes, exclusive of preamble and retried packets. */
  } B;
} GMAC_TX_64OCTETS_PACKETS_GOOD_BAD_tag;

typedef union GMAC_TX_65TO127OCTETS_PACKETS_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TX65_127OCTGB:32;        /* Tx 65To127Octets Packets Good Bad This field indicates the number of good and bad packets transmitted with length between 65 and 127 (inclusive) bytes, exclusive of preamble and retried packets. */
  } B;
} GMAC_TX_65TO127OCTETS_PACKETS_GOOD_BAD_tag;

typedef union GMAC_TX_128TO255OCTETS_PACKETS_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TX128_255OCTGB:32;       /* Tx 128To255Octets Packets Good Bad This field indicates the number of good and bad packets transmitted with length between 128 and 255 (inclusive) bytes, exclusive of preamble and retried packets. */
  } B;
} GMAC_TX_128TO255OCTETS_PACKETS_GOOD_BAD_tag;

typedef union GMAC_TX_256TO511OCTETS_PACKETS_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TX256_511OCTGB:32;       /* Tx 256To511Octets Packets Good Bad This field indicates the number of good and bad packets transmitted with length between 256 and 511 (inclusive) bytes, exclusive of preamble and retried packets. */
  } B;
} GMAC_TX_256TO511OCTETS_PACKETS_GOOD_BAD_tag;

typedef union GMAC_TX_512TO1023OCTETS_PACKETS_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TX512_1023OCTGB:32;      /* Tx 512To1023Octets Packets Good Bad This field indicates the number of good and bad packets transmitted with length between 512 and 1023 (inclusive) bytes, exclusive of preamble and retried packets. */
  } B;
} GMAC_TX_512TO1023OCTETS_PACKETS_GOOD_BAD_tag;

typedef union GMAC_TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TX1024_MAXOCTGB:32;      /* Tx 1024ToMaxOctets Packets Good Bad This field indicates the number of good and bad packets transmitted with length between 1024 and maxsize (inclusive) bytes, exclusive of preamble and retried packets. */
  } B;
} GMAC_TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_tag;

typedef union GMAC_TX_UNICAST_PACKETS_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXUCASTGB:32;            /* Tx Unicast Packets Good Bad This field indicates the number of good and bad unicast packets transmitted. */
  } B;
} GMAC_TX_UNICAST_PACKETS_GOOD_BAD_tag;

typedef union GMAC_TX_MULTICAST_PACKETS_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXMCASTGB:32;            /* Tx Multicast Packets Good Bad This field indicates the number of good and bad multicast packets transmitted. */
  } B;
} GMAC_TX_MULTICAST_PACKETS_GOOD_BAD_tag;

typedef union GMAC_TX_BROADCAST_PACKETS_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXBCASTGB:32;            /* Tx Broadcast Packets Good Bad This field indicates the number of good and bad broadcast packets transmitted. */
  } B;
} GMAC_TX_BROADCAST_PACKETS_GOOD_BAD_tag;

typedef union GMAC_TX_UNDERFLOW_ERROR_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXUNDRFLW:32;            /* Tx Underflow Error Packets This field indicates the number of packets aborted because of packets underflow error. */
  } B;
} GMAC_TX_UNDERFLOW_ERROR_PACKETS_tag;

typedef union GMAC_TX_SINGLE_COLLISION_GOOD_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXSNGLCOLG:32;           /* Tx Single Collision Good Packets This field indicates the number of successfully transmitted packets after a single collision in the half-duplex mode. */
  } B;
} GMAC_TX_SINGLE_COLLISION_GOOD_PACKETS_tag;

typedef union GMAC_TX_MULTIPLE_COLLISION_GOOD_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXMULTCOLG:32;           /* Tx Multiple Collision Good Packets This field indicates the number of successfully transmitted packets after multiple collisions in the half-duplex mode. */
  } B;
} GMAC_TX_MULTIPLE_COLLISION_GOOD_PACKETS_tag;

typedef union GMAC_TX_DEFERRED_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXDEFRD:32;              /* Tx Deferred Packets This field indicates the number of successfully transmitted after a deferral in the half-duplex mode. */
  } B;
} GMAC_TX_DEFERRED_PACKETS_tag;

typedef union GMAC_TX_LATE_COLLISION_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXLATECOL:32;            /* Tx Late Collision Packets This field indicates the number of packets aborted because of late collision error. */
  } B;
} GMAC_TX_LATE_COLLISION_PACKETS_tag;

typedef union GMAC_TX_EXCESSIVE_COLLISION_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXEXSCOL:32;             /* Tx Excessive Collision Packets This field indicates the number of packets aborted because of excessive (16) collision errors. */
  } B;
} GMAC_TX_EXCESSIVE_COLLISION_PACKETS_tag;

typedef union GMAC_TX_CARRIER_ERROR_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXCARR:32;               /* Tx Carrier Error Packets This field indicates the number of packets aborted because of carrier sense error (no carrier or loss of carrier). */
  } B;
} GMAC_TX_CARRIER_ERROR_PACKETS_tag;

typedef union GMAC_TX_OCTET_COUNT_GOOD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXOCTG:32;               /* Tx Octet Count Good This field indicates the number of bytes transmitted, exclusive of preamble, only in good packets. */
  } B;
} GMAC_TX_OCTET_COUNT_GOOD_tag;

typedef union GMAC_TX_PACKET_COUNT_GOOD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXPKTG:32;               /* Tx Packet Count Good This field indicates the number of good packets transmitted. */
  } B;
} GMAC_TX_PACKET_COUNT_GOOD_tag;

typedef union GMAC_TX_EXCESSIVE_DEFERRAL_ERROR_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXEXSDEF:32;             /* Tx Excessive Deferral Error This field indicates the number of packets aborted because of excessive deferral error (deferred for more than two max-sized packet times). */
  } B;
} GMAC_TX_EXCESSIVE_DEFERRAL_ERROR_tag;

typedef union GMAC_TX_PAUSE_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXPAUSE:32;              /* Tx Pause Packets This field indicates the number of good Pause packets transmitted. */
  } B;
} GMAC_TX_PAUSE_PACKETS_tag;

typedef union GMAC_TX_VLAN_PACKETS_GOOD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXVLANG:32;              /* Tx VLAN Packets Good This field provides the number of good VLAN packets transmitted. */
  } B;
} GMAC_TX_VLAN_PACKETS_GOOD_tag;

typedef union GMAC_TX_OSIZE_PACKETS_GOOD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXOSIZG:32;              /* Tx OSize Packets Good This field indicates the number of packets transmitted without errors and with length greater than the maxsize (1,518 or 1,522 bytes for VLAN tagged packets; 2000 bytes if enabled in S2KP bit of the MAC_Configuration register). */
  } B;
} GMAC_TX_OSIZE_PACKETS_GOOD_tag;

typedef union GMAC_RX_PACKETS_COUNT_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXPKTGB:32;              /* Rx Packets Count Good Bad This field indicates the number of good and bad packets received. */
  } B;
} GMAC_RX_PACKETS_COUNT_GOOD_BAD_tag;

typedef union GMAC_RX_OCTET_COUNT_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXOCTGB:32;              /* Rx Octet Count Good Bad This field indicates the number of bytes received, exclusive of preamble, in good and bad packets. */
  } B;
} GMAC_RX_OCTET_COUNT_GOOD_BAD_tag;

typedef union GMAC_RX_OCTET_COUNT_GOOD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXOCTG:32;               /* Rx Octet Count Good This field indicates the number of bytes received, exclusive of preamble, only in good packets. */
  } B;
} GMAC_RX_OCTET_COUNT_GOOD_tag;

typedef union GMAC_RX_BROADCAST_PACKETS_GOOD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXBCASTG:32;             /* Rx Broadcast Packets Good This field indicates the number of good broadcast packets received. */
  } B;
} GMAC_RX_BROADCAST_PACKETS_GOOD_tag;

typedef union GMAC_RX_MULTICAST_PACKETS_GOOD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXMCASTG:32;             /* Rx Multicast Packets Good This field indicates the number of good multicast packets received. */
  } B;
} GMAC_RX_MULTICAST_PACKETS_GOOD_tag;

typedef union GMAC_RX_CRC_ERROR_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXCRCERR:32;             /* Rx CRC Error Packets This field indicates the number of packets received with CRC error. */
  } B;
} GMAC_RX_CRC_ERROR_PACKETS_tag;

typedef union GMAC_RX_ALIGNMENT_ERROR_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXALGNERR:32;            /* Rx Alignment Error Packets This field indicates the number of packets received with alignment (dribble) error. It is valid only in 10/100 mode. */
  } B;
} GMAC_RX_ALIGNMENT_ERROR_PACKETS_tag;

typedef union GMAC_RX_RUNT_ERROR_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXRUNTERR:32;            /* Rx Runt Error Packets This field indicates the number of packets received with runt (length less than 64 bytes and CRC error) error. */
  } B;
} GMAC_RX_RUNT_ERROR_PACKETS_tag;

typedef union GMAC_RX_JABBER_ERROR_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXJABERR:32;             /* Rx Jabber Error Packets This field indicates the number of giant packets received with length (including CRC) greater than 1,518 bytes (1,522 bytes for VLAN tagged) and with CRC error. If Jumbo Packet mode is enabled, packets of length greater than 9,018 bytes (9,022 bytes for VLAN tagged) are considered as giant packets. */
  } B;
} GMAC_RX_JABBER_ERROR_PACKETS_tag;

typedef union GMAC_RX_UNDERSIZE_PACKETS_GOOD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXUNDERSZG:32;           /* Rx Undersize Packets Good This field indicates the number of packets received with length less than 64 bytes, without any errors. */
  } B;
} GMAC_RX_UNDERSIZE_PACKETS_GOOD_tag;

typedef union GMAC_RX_OVERSIZE_PACKETS_GOOD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXOVERSZG:32;            /* Rx Oversize Packets Good This field indicates the number of packets received without errors, with length greater than the maxsize (1,518 bytes or 1,522 bytes for VLAN tagged packets; 2000 bytes if enabled in the S2KP bit of the MAC_Configuration register). */
  } B;
} GMAC_RX_OVERSIZE_PACKETS_GOOD_tag;

typedef union GMAC_RX_64OCTETS_PACKETS_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RX64OCTGB:32;            /* Rx 64 Octets Packets Good Bad This field indicates the number of good and bad packets received with length 64 bytes, exclusive of the preamble. */
  } B;
} GMAC_RX_64OCTETS_PACKETS_GOOD_BAD_tag;

typedef union GMAC_RX_65TO127OCTETS_PACKETS_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RX65_127OCTGB:32;        /* Rx 65-127 Octets Packets Good Bad This field indicates the number of good and bad packets received with length between 65 and 127 (inclusive) bytes, exclusive of the preamble. */
  } B;
} GMAC_RX_65TO127OCTETS_PACKETS_GOOD_BAD_tag;

typedef union GMAC_RX_128TO255OCTETS_PACKETS_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RX128_255OCTGB:32;       /* Rx 128-255 Octets Packets Good Bad This field indicates the number of good and bad packets received with length between 128 and 255 (inclusive) bytes, exclusive of the preamble. */
  } B;
} GMAC_RX_128TO255OCTETS_PACKETS_GOOD_BAD_tag;

typedef union GMAC_RX_256TO511OCTETS_PACKETS_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RX256_511OCTGB:32;       /* Rx 256-511 Octets Packets Good Bad This field indicates the number of good and bad packets received with length between 256 and 511 (inclusive) bytes, exclusive of the preamble. */
  } B;
} GMAC_RX_256TO511OCTETS_PACKETS_GOOD_BAD_tag;

typedef union GMAC_RX_512TO1023OCTETS_PACKETS_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RX512_1023OCTGB:32;      /* RX 512-1023 Octets Packets Good Bad This field indicates the number of good and bad packets received with length between 512 and 1023 (inclusive) bytes, exclusive of the preamble. */
  } B;
} GMAC_RX_512TO1023OCTETS_PACKETS_GOOD_BAD_tag;

typedef union GMAC_RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RX1024_MAXOCTGB:32;      /* Rx 1024-Max Octets Good Bad This field indicates the number of good and bad packets received with length between 1024 and maxsize (inclusive) bytes, exclusive of the preamble. */
  } B;
} GMAC_RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_tag;

typedef union GMAC_RX_UNICAST_PACKETS_GOOD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXUCASTG:32;             /* Rx Unicast Packets Good This field indicates the number of good unicast packets received. */
  } B;
} GMAC_RX_UNICAST_PACKETS_GOOD_tag;

typedef union GMAC_RX_LENGTH_ERROR_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXLENERR:32;             /* Rx Length Error Packets This field indicates the number of packets received with length error (Length Type field not equal to packet size), for all packets with valid length field. */
  } B;
} GMAC_RX_LENGTH_ERROR_PACKETS_tag;

typedef union GMAC_RX_OUT_OF_RANGE_TYPE_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXOUTOFRNG:32;           /* Rx Out of Range Type Packet This field indicates the number of packets received with length field not equal to the valid packet size (greater than 1,500 but less than 1,536). */
  } B;
} GMAC_RX_OUT_OF_RANGE_TYPE_PACKETS_tag;

typedef union GMAC_RX_PAUSE_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXPAUSEPKT:32;           /* Rx Pause Packets This field indicates the number of good and valid Pause packets received. */
  } B;
} GMAC_RX_PAUSE_PACKETS_tag;

typedef union GMAC_RX_FIFO_OVERFLOW_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXFIFOOVFL:32;           /* Rx FIFO Overflow Packets This field indicates the number of missed received packets because of FIFO overflow. */
  } B;
} GMAC_RX_FIFO_OVERFLOW_PACKETS_tag;

typedef union GMAC_RX_VLAN_PACKETS_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXVLANPKTGB:32;          /* Rx VLAN Packets Good Bad This field indicates the number of good and bad VLAN packets received. */
  } B;
} GMAC_RX_VLAN_PACKETS_GOOD_BAD_tag;

typedef union GMAC_RX_WATCHDOG_ERROR_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXWDGERR:32;             /* Rx Watchdog Error Packets This field indicates the number of packets received with error because of watchdog timeout error (packets with a data load larger than 2,048 bytes (when JE and WD bits are reset in MAC_Configuration register), 10,240 bytes (when JE bit is set and WD bit is reset in MAC_Configuration register), 16,384 bytes (when WD bit is set in MAC_Configuration register) or the value programmed in the MAC_Watchdog_Timeout register). */
  } B;
} GMAC_RX_WATCHDOG_ERROR_PACKETS_tag;

typedef union GMAC_RX_RECEIVE_ERROR_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXRCVERR:32;             /* Rx Receive Error Packets This field indicates the number of packets received with Receive error or Packet Extension error on the GMII or MII interface. */
  } B;
} GMAC_RX_RECEIVE_ERROR_PACKETS_tag;

typedef union GMAC_RX_CONTROL_PACKETS_GOOD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXCTRLG:32;              /* Rx Control Packets Good This field indicates the number of good control packets received. */
  } B;
} GMAC_RX_CONTROL_PACKETS_GOOD_tag;

typedef union GMAC_MMC_FPE_TX_INTERRUPT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t FCIS:1;                  /* MMC Tx FPE Fragment Counter Interrupt status This bit is set when the Tx_FPE_Fragment_Cntr counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. Exists when any one of the RX/TX MMC counters are enabled during FPE Enabled configuration. */
    vuint32_t HRCIS:1;                 /* MMC Tx Hold Request Counter Interrupt Status This bit is set when the Tx_Hold_Req_Cntr counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. Exists when any one of the RX/TX MMC counters are enabled during FPE with AV_EST Enabled configuration. */
    vuint32_t _unused_2:30;            /* Reserved. */
  } B;
} GMAC_MMC_FPE_TX_INTERRUPT_tag;

typedef union GMAC_MMC_FPE_TX_INTERRUPT_MASK_union_tag {
  vuint32_t R;
  struct {
    vuint32_t FCIM:1;                  /* MMC Transmit Fragment Counter Interrupt Mask Setting this bit masks the interrupt when the Tx_FPE_Fragment_Cntr counter reaches half of the maximum value or the maximum value. Exists when any one of the RX/TX MMC counters are enabled during FPE Enabled configuration. */
    vuint32_t HRCIM:1;                 /* MMC Transmit Hold Request Counter Interrupt Mask Setting this bit masks the interrupt when the Tx_Hold_Req_Cntr counter reaches half of the maximum value or the maximum value. Exists when any one of the RX/TX MMC counters are enabled during FPE with AV_EST Enabled configuration. */
    vuint32_t _unused_2:30;            /* Reserved. */
  } B;
} GMAC_MMC_FPE_TX_INTERRUPT_MASK_tag;

typedef union GMAC_MMC_TX_FPE_FRAGMENT_CNTR_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXFFC:32;                /* Tx FPE Fragment counter This field indicates the number of additional mPackets that has been transmitted due to preemption Exists when any one of the RX/TX MMC counters are enabled during FPE Enabled configuration. */
  } B;
} GMAC_MMC_TX_FPE_FRAGMENT_CNTR_tag;

typedef union GMAC_MMC_TX_HOLD_REQ_CNTR_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXHRC:32;                /* Tx Hold Request Counter This field indicates count of number of a hold request is given to MAC. Exists when any one of the RX/TX MMC counters are enabled during FPE with AV_EST Enabled configuration. */
  } B;
} GMAC_MMC_TX_HOLD_REQ_CNTR_tag;

typedef union GMAC_MMC_FPE_RX_INTERRUPT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PAECIS:1;                /* MMC Rx Packet Assembly Error Counter Interrupt Status This bit is set when the Rx_Packet_Assemble_Err_Cntr counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. Exists when any one of the RX/TX MMC counters are enabled during FPE Enabled configuration. */
    vuint32_t PSECIS:1;                /* MMC Rx Packet SMD Error Counter Interrupt Status This bit is set when the Rx_Packet_SMD_Err_Cntr counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. Exists when any one of the RX/TX MMC counters are enabled during FPE Enabled configuration. */
    vuint32_t PAOCIS:1;                /* MMC Rx Packet Assembly OK Counter Interrupt Status This bit is set when the Rx_Packet_Assemble_Ok_Cntr counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. Exists when any one of the RX/TX MMC counters are enabled during FPE Enabled configuration. */
    vuint32_t FCIS:1;                  /* MMC Rx FPE Fragment Counter Interrupt Status This bit is set when the Rx_FPE_Fragment_Cntr counter reaches half of the maximum value or the maximum value. Access restriction applies. Clears on read. Self-set to 1 on internal event. Exists when any one of the RX/TX MMC counters are enabled during FPE Enabled configuration. */
    vuint32_t _unused_4:28;            /* Reserved. */
  } B;
} GMAC_MMC_FPE_RX_INTERRUPT_tag;

typedef union GMAC_MMC_FPE_RX_INTERRUPT_MASK_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PAECIM:1;                /* MMC Rx Packet Assembly Error Counter Interrupt Mask Setting this bit masks the interrupt when the R Rx_Packet_Assemble_Err_Cntr counter reaches half of the maximum value or the maximum value. Exists when any one of the RX/TX MMC counters are enabled during FPE Enabled configuration. */
    vuint32_t PSECIM:1;                /* MMC Rx Packet SMD Error Counter Interrupt Mask Setting this bit masks the interrupt when the R Rx_Packet_SMD_Err_Cntr counter reaches half of the maximum value or the maximum value. Exists when any one of the RX/TX MMC counters are enabled during FPE Enabled configuration. */
    vuint32_t PAOCIM:1;                /* MMC Rx Packet Assembly OK Counter Interrupt Mask Setting this bit masks the interrupt when the Rx_Packet_Assemble_Ok_Cntr counter reaches half of the maximum value or the maximum value. Exists when any one of the RX/TX MMC counters are enabled during FPE Enabled configuration. */
    vuint32_t FCIM:1;                  /* MMC Rx FPE Fragment Counter Interrupt Mask Setting this bit masks the interrupt when the Tx_FPE_Fragment_Cntr counter reaches half of the maximum value or the maximum value. Exists when any one of the RX/TX MMC counters are enabled during FPE Enabled configuration. */
    vuint32_t _unused_4:28;            /* Reserved. */
  } B;
} GMAC_MMC_FPE_RX_INTERRUPT_MASK_tag;

typedef union GMAC_MMC_RX_PACKET_ASSEMBLY_ERR_CNTR_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PAEC:32;                 /* Rx Packet Assembly Error Counter This field indicates the number of MAC frames with reassembly errors on the Receiver, due to mismatch in the Fragment Count value. Exists when any one of the RX/TX MMC counters are enabled during FPE Enabled configuration. */
  } B;
} GMAC_MMC_RX_PACKET_ASSEMBLY_ERR_CNTR_tag;

typedef union GMAC_MMC_RX_PACKET_SMD_ERR_CNTR_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PSEC:32;                 /* Rx Packet SMD Error Counter This field indicates the number of MAC frames rejected due to unknown SMD value and MAC frame fragments rejected due to arriving with an SMD-C when there was no preceding preempted frame. Exists when at least one of the RX/TX MMC counters are enabled during FPE Enabled configuration. */
  } B;
} GMAC_MMC_RX_PACKET_SMD_ERR_CNTR_tag;

typedef union GMAC_MMC_RX_PACKET_ASSEMBLY_OK_CNTR_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PAOC:32;                 /* Rx Packet Assembly OK Counter This field indicates the number of MAC frames that were successfully reassembled and delivered to MAC. Exists when at least one of the RX/TX MMC counters are enabled during FPE Enabled configuration. */
  } B;
} GMAC_MMC_RX_PACKET_ASSEMBLY_OK_CNTR_tag;

typedef union GMAC_MMC_RX_FPE_FRAGMENT_CNTR_union_tag {
  vuint32_t R;
  struct {
    vuint32_t FFC:32;                  /* Rx FPE Fragment Counter This field indicates the number of additional mPackets received due to preemption Exists when at least one of the RX/TX MMC counters are enabled during FPE Enabled configuration. */
  } B;
} GMAC_MMC_RX_FPE_FRAGMENT_CNTR_tag;

typedef union GMAC_MAC_L3_L4_CONTROL0_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3PEN0:1;                /* Layer 3 Protocol Enable When this bit is set, the Layer 3 IP Source or Destination Address matching is enabled for IPv6 packets. When this bit is reset, the Layer 3 IP Source or Destination Address matching is enabled for IPv4 packets. The Layer 3 matching is done only when the L3SAM0 or L3DAM0 bit is set. */
    vuint32_t _unused_1:1;             /* Reserved. */
    vuint32_t L3SAM0:1;                /* Layer 3 IP SA Match Enable When this bit is set, the Layer 3 IP Source Address field is enabled for matching. When this bit is reset, the MAC ignores the Layer 3 IP Source Address field for matching. Note: When the L3PEN0 bit is set, you should set either this bit or the L3DAM0 bit because either IPv6 SA or DA can be checked for filtering. */
    vuint32_t L3SAIM0:1;               /* Layer 3 IP SA Inverse Match Enable When this bit is set, the Layer 3 IP Source Address field is enabled for inverse matching. When this bit reset, the Layer 3 IP Source Address field is enabled for perfect matching. This bit is valid and applicable only when the L3SAM0 bit is set. */
    vuint32_t L3DAM0:1;                /* Layer 3 IP DA Match Enable When this bit is set, the Layer 3 IP Destination Address field is enabled for matching. When this bit is reset, the MAC ignores the Layer 3 IP Destination Address field for matching. Note: When the L3PEN0 bit is set, you should set either this bit or the L3SAM0 bit because either IPv6 DA or SA can be checked for filtering. */
    vuint32_t L3DAIM0:1;               /* Layer 3 IP DA Inverse Match Enable When this bit is set, the Layer 3 IP Destination Address field is enabled for inverse matching. When this bit is reset, the Layer 3 IP Destination Address field is enabled for perfect matching. This bit is valid and applicable only when the L3DAM0 bit is set high. */
    vuint32_t L3HSBM0:5;               /* Layer 3 IP SA Higher Bits Match IPv4 Packets: This field contains the number of lower bits of IP Source Address that are masked for matching in the IPv4 packets. The following list describes the values of this field: - 0: No bits are masked. - 1: LSb[0] is masked - 2: Two LSbs [1:0] are masked - .. - 31: All bits except MSb are masked. IPv6 Packets: This field contains Bits[4:0] of L3HSBM0. These bits indicate the number of higher bits of IP Source or Destination Address matched in the IPv6 packets. This field is valid and applicable only when the L3DAM0 or L3SAM0 bit is set high. */
    vuint32_t L3HDBM0:5;               /* Layer 3 IP DA Higher Bits Match IPv4 Packets: This field contains the number of higher bits of IP Destination Address that are matched in the IPv4 packets. The following list describes the values of this field: - 0: No bits are masked. - 1: LSb[0] is masked - 2: Two LSbs [1:0] are masked - .. - 31: All bits except MSb are masked. IPv6 Packets: Bits[12:11] of this field correspond to Bits[6:5] of L3HSBM0 which indicate the number of lower bits of IP Source or Destination Address that are masked in the IPv6 packets. The following list describes the concatenated values of the L3HDBM0[1:0] and L3HSBM0 bits: - 0: No bits are masked. - 1: LSb[0] is masked. - 2: Two LSbs [1:0] are masked - .. - 127: All bits except MSb are masked. This field is valid and applicable only when the L3DAM0 or L3SAM0 bit is set. */
    vuint32_t L4PEN0:1;                /* Layer 4 Protocol Enable When this bit is set, the Source and Destination Port number fields of UDP packets are used for matching. When this bit is reset, the Source and Destination Port number fields of TCP packets are used for matching. The Layer 4 matching is done only when the L4SPM0 or L4DPM0 bit is set. */
    vuint32_t _unused_17:1;            /* Reserved. */
    vuint32_t L4SPM0:1;                /* Layer 4 Source Port Match Enable When this bit is set, the Layer 4 Source Port number field is enabled for matching. When this bit is reset, the MAC ignores the Layer 4 Source Port number field for matching. */
    vuint32_t L4SPIM0:1;               /* Layer 4 Source Port Inverse Match Enable When this bit is set, the Layer 4 Source Port number field is enabled for inverse matching. When this bit is reset, the Layer 4 Source Port number field is enabled for perfect matching. This bit is valid and applicable only when the L4SPM0 bit is set high. */
    vuint32_t L4DPM0:1;                /* Layer 4 Destination Port Match Enable When this bit is set, the Layer 4 Destination Port number field is enabled for matching. When this bit is reset, the MAC ignores the Layer 4 Destination Port number field for matching. */
    vuint32_t L4DPIM0:1;               /* Layer 4 Destination Port Inverse Match Enable When this bit is set, the Layer 4 Destination Port number field is enabled for inverse matching. When this bit is reset, the Layer 4 Destination Port number field is enabled for perfect matching. This bit is valid and applicable only when the L4DPM0 bit is set high. */
    vuint32_t _unused_22:2;            /* Reserved. */
    vuint32_t DMCHN0:3;                /* DMA Channel Number When DMCHEN is set high, this field selects the DMA Channel number to which the packet passed by this filter is routed. The width of this field depends on the number of the DMA channels present in your configuration. */
    vuint32_t _unused_27:1;            /* Reserved. */
    vuint32_t DMCHEN0:1;               /* DMA Channel Select Enable When set, this bit enables the selection of the DMA channel number for the packet that is passed by this L3_L4 filter. The DMA channel is indicated by the DMCHN bits. When this bit is reset, the DMA channel is not decided by this filter. */
    vuint32_t _unused_29:3;            /* Reserved. */
  } B;
} GMAC_MAC_L3_L4_CONTROL0_tag;

typedef union GMAC_MAC_LAYER4_ADDRESS0_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L4SP0:16;                /* Layer 4 Source Port Number Field When the L4PEN0 bit is reset and the L4SPM0 bit is set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with the TCP Source Port Number field in the IPv4 or IPv6 packets. When the L4PEN0 and L4SPM0 bits are set in MAC_L3_L4_Control0 register, this field contains the value to be matched with the UDP Source Port Number field in the IPv4 or IPv6 packets. */
    vuint32_t L4DP0:16;                /* Layer 4 Destination Port Number Field When the L4PEN0 bit is reset and the L4DPM0 bit is set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with the TCP Destination Port Number field in the IPv4 or IPv6 packets. When the L4PEN0 and L4DPM0 bits are set in MAC_L3_L4_Control0 register, this field contains the value to be matched with the UDP Destination Port Number field in the IPv4 or IPv6 packets. */
  } B;
} GMAC_MAC_LAYER4_ADDRESS0_tag;

typedef union GMAC_MAC_LAYER3_ADDR0_REG0_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A00:32;                /* Layer 3 Address 0 Field When the L3PEN0 and L3SAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[31:0] of the IP Source Address field in the IPv6 packets. When the L3PEN0 and L3DAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[31:0] of the IP Destination Address field in the IPv6 packets. When the L3PEN0 bit is reset and the L3SAM0 bit is set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with the IP Source Address field in the IPv4 packets. */
  } B;
} GMAC_MAC_LAYER3_ADDR0_REG0_tag;

typedef union GMAC_MAC_LAYER3_ADDR1_REG0_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A10:32;                /* Layer 3 Address 1 Field When the L3PEN0 and L3SAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[63:32] of the IP Source Address field in the IPv6 packets. When the L3PEN0 and L3DAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[63:32] of the IP Destination Address field in the IPv6 packets. When the L3PEN0 bit is reset and the L3SAM0 bit is set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with the IP Destination Address field in the IPv4 packets. */
  } B;
} GMAC_MAC_LAYER3_ADDR1_REG0_tag;

typedef union GMAC_MAC_LAYER3_ADDR2_REG0_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A20:32;                /* Layer 3 Address 2 Field When the L3PEN0 and L3SAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[95:64] of the IP Source Address field in the IPv6 packets. When the L3PEN0 and L3DAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[95:64] of the IP Destination Address field in the IPv6 packets. When the L3PEN0 bit is reset in the MAC_L3_L4_Control0 register, this field is not used. */
  } B;
} GMAC_MAC_LAYER3_ADDR2_REG0_tag;

typedef union GMAC_MAC_LAYER3_ADDR3_REG0_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A30:32;                /* Layer 3 Address 3 Field When the L3PEN0 and L3SAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[127:96] of the IP Source Address field in the IPv6 packets. When the L3PEN0 and L3DAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[127:96] of the IP Destination Address field in the IPv6 packets. When the L3PEN0 bit is reset in the MAC_L3_L4_Control0 register, this field is not used. */
  } B;
} GMAC_MAC_LAYER3_ADDR3_REG0_tag;

typedef union GMAC_MAC_L3_L4_CONTROL1_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3PEN1:1;                /* Layer 3 Protocol Enable When this bit is set, the Layer 3 IP Source or Destination Address matching is enabled for IPv6 packets. When this bit is reset, the Layer 3 IP Source or Destination Address matching is enabled for IPv4 packets. The Layer 3 matching is done only when the L3SAM0 or L3DAM0 bit is set. */
    vuint32_t _unused_1:1;             /* Reserved. */
    vuint32_t L3SAM1:1;                /* Layer 3 IP SA Match Enable When this bit is set, the Layer 3 IP Source Address field is enabled for matching. When this bit is reset, the MAC ignores the Layer 3 IP Source Address field for matching. Note: When the L3PEN0 bit is set, you should set either this bit or the L3DAM0 bit because either IPv6 SA or DA can be checked for filtering. */
    vuint32_t L3SAIM1:1;               /* Layer 3 IP SA Inverse Match Enable When this bit is set, the Layer 3 IP Source Address field is enabled for inverse matching. When this bit reset, the Layer 3 IP Source Address field is enabled for perfect matching. This bit is valid and applicable only when the L3SAM0 bit is set. */
    vuint32_t L3DAM1:1;                /* Layer 3 IP DA Match Enable When this bit is set, the Layer 3 IP Destination Address field is enabled for matching. When this bit is reset, the MAC ignores the Layer 3 IP Destination Address field for matching. Note: When the L3PEN0 bit is set, you should set either this bit or the L3SAM0 bit because either IPv6 DA or SA can be checked for filtering. */
    vuint32_t L3DAIM1:1;               /* Layer 3 IP DA Inverse Match Enable When this bit is set, the Layer 3 IP Destination Address field is enabled for inverse matching. When this bit is reset, the Layer 3 IP Destination Address field is enabled for perfect matching. This bit is valid and applicable only when the L3DAM0 bit is set high. */
    vuint32_t L3HSBM1:5;               /* Layer 3 IP SA Higher Bits Match IPv4 Packets: This field contains the number of lower bits of IP Source Address that are masked for matching in the IPv4 packets. The following list describes the values of this field: - 0: No bits are masked. - 1: LSb[0] is masked - 2: Two LSbs [1:0] are masked - .. - 31: All bits except MSb are masked. IPv6 Packets: This field contains Bits[4:0] of L3HSBM0. These bits indicate the number of higher bits of IP Source or Destination Address matched in the IPv6 packets. This field is valid and applicable only when the L3DAM0 or L3SAM0 bit is set high. */
    vuint32_t L3HDBM1:5;               /* Layer 3 IP DA Higher Bits Match IPv4 Packets: This field contains the number of higher bits of IP Destination Address that are matched in the IPv4 packets. The following list describes the values of this field: - 0: No bits are masked. - 1: LSb[0] is masked - 2: Two LSbs [1:0] are masked - .. - 31: All bits except MSb are masked. IPv6 Packets: Bits[12:11] of this field correspond to Bits[6:5] of L3HSBM0 which indicate the number of lower bits of IP Source or Destination Address that are masked in the IPv6 packets. The following list describes the concatenated values of the L3HDBM0[1:0] and L3HSBM0 bits: - 0: No bits are masked. - 1: LSb[0] is masked. - 2: Two LSbs [1:0] are masked - .. - 127: All bits except MSb are masked. This field is valid and applicable only when the L3DAM0 or L3SAM0 bit is set. */
    vuint32_t L4PEN1:1;                /* Layer 4 Protocol Enable When this bit is set, the Source and Destination Port number fields of UDP packets are used for matching. When this bit is reset, the Source and Destination Port number fields of TCP packets are used for matching. The Layer 4 matching is done only when the L4SPM0 or L4DPM0 bit is set. */
    vuint32_t _unused_17:1;            /* Reserved. */
    vuint32_t L4SPM1:1;                /* Layer 4 Source Port Match Enable When this bit is set, the Layer 4 Source Port number field is enabled for matching. When this bit is reset, the MAC ignores the Layer 4 Source Port number field for matching. */
    vuint32_t L4SPIM1:1;               /* Layer 4 Source Port Inverse Match Enable When this bit is set, the Layer 4 Source Port number field is enabled for inverse matching. When this bit is reset, the Layer 4 Source Port number field is enabled for perfect matching. This bit is valid and applicable only when the L4SPM0 bit is set high. */
    vuint32_t L4DPM1:1;                /* Layer 4 Destination Port Match Enable When this bit is set, the Layer 4 Destination Port number field is enabled for matching. When this bit is reset, the MAC ignores the Layer 4 Destination Port number field for matching. */
    vuint32_t L4DPIM1:1;               /* Layer 4 Destination Port Inverse Match Enable When this bit is set, the Layer 4 Destination Port number field is enabled for inverse matching. When this bit is reset, the Layer 4 Destination Port number field is enabled for perfect matching. This bit is valid and applicable only when the L4DPM0 bit is set high. */
    vuint32_t _unused_22:2;            /* Reserved. */
    vuint32_t DMCHN1:3;                /* DMA Channel Number When DMCHEN is set high, this field selects the DMA Channel number to which the packet passed by this filter is routed. The width of this field depends on the number of the DMA channels present in your configuration. */
    vuint32_t _unused_27:1;            /* Reserved. */
    vuint32_t DMCHEN1:1;               /* DMA Channel Select Enable When set, this bit enables the selection of the DMA channel number for the packet that is passed by this L3_L4 filter. The DMA channel is indicated by the DMCHN bits. When this bit is reset, the DMA channel is not decided by this filter. */
    vuint32_t _unused_29:3;            /* Reserved. */
  } B;
} GMAC_MAC_L3_L4_CONTROL1_tag;

typedef union GMAC_MAC_LAYER4_ADDRESS1_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L4SP1:16;                /* Layer 4 Source Port Number Field When the L4PEN0 bit is reset and the L4SPM0 bit is set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with the TCP Source Port Number field in the IPv4 or IPv6 packets. When the L4PEN0 and L4SPM0 bits are set in MAC_L3_L4_Control0 register, this field contains the value to be matched with the UDP Source Port Number field in the IPv4 or IPv6 packets. */
    vuint32_t L4DP1:16;                /* Layer 4 Destination Port Number Field When the L4PEN0 bit is reset and the L4DPM0 bit is set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with the TCP Destination Port Number field in the IPv4 or IPv6 packets. When the L4PEN0 and L4DPM0 bits are set in MAC_L3_L4_Control0 register, this field contains the value to be matched with the UDP Destination Port Number field in the IPv4 or IPv6 packets. */
  } B;
} GMAC_MAC_LAYER4_ADDRESS1_tag;

typedef union GMAC_MAC_LAYER3_ADDR0_REG1_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A01:32;                /* Layer 3 Address 0 Field When the L3PEN0 and L3SAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[31:0] of the IP Source Address field in the IPv6 packets. When the L3PEN0 and L3DAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[31:0] of the IP Destination Address field in the IPv6 packets. When the L3PEN0 bit is reset and the L3SAM0 bit is set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with the IP Source Address field in the IPv4 packets. */
  } B;
} GMAC_MAC_LAYER3_ADDR0_REG1_tag;

typedef union GMAC_MAC_LAYER3_ADDR1_REG1_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A11:32;                /* Layer 3 Address 1 Field When the L3PEN0 and L3SAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[63:32] of the IP Source Address field in the IPv6 packets. When the L3PEN0 and L3DAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[63:32] of the IP Destination Address field in the IPv6 packets. When the L3PEN0 bit is reset and the L3SAM0 bit is set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with the IP Destination Address field in the IPv4 packets. */
  } B;
} GMAC_MAC_LAYER3_ADDR1_REG1_tag;

typedef union GMAC_MAC_LAYER3_ADDR2_REG1_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A21:32;                /* Layer 3 Address 2 Field When the L3PEN0 and L3SAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[95:64] of the IP Source Address field in the IPv6 packets. When the L3PEN0 and L3DAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[95:64] of the IP Destination Address field in the IPv6 packets. When the L3PEN0 bit is reset in the MAC_L3_L4_Control0 register, this field is not used. */
  } B;
} GMAC_MAC_LAYER3_ADDR2_REG1_tag;

typedef union GMAC_MAC_LAYER3_ADDR3_REG1_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A31:32;                /* Layer 3 Address 3 Field When the L3PEN0 and L3SAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[127:96] of the IP Source Address field in the IPv6 packets. When the L3PEN0 and L3DAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[127:96] of the IP Destination Address field in the IPv6 packets. When the L3PEN0 bit is reset in the MAC_L3_L4_Control0 register, this field is not used. */
  } B;
} GMAC_MAC_LAYER3_ADDR3_REG1_tag;

typedef union GMAC_MAC_L3_L4_CONTROL2_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3PEN2:1;                /* Layer 3 Protocol Enable When this bit is set, the Layer 3 IP Source or Destination Address matching is enabled for IPv6 packets. When this bit is reset, the Layer 3 IP Source or Destination Address matching is enabled for IPv4 packets. The Layer 3 matching is done only when the L3SAM0 or L3DAM0 bit is set. */
    vuint32_t _unused_1:1;             /* Reserved. */
    vuint32_t L3SAM2:1;                /* Layer 3 IP SA Match Enable When this bit is set, the Layer 3 IP Source Address field is enabled for matching. When this bit is reset, the MAC ignores the Layer 3 IP Source Address field for matching. Note: When the L3PEN0 bit is set, you should set either this bit or the L3DAM0 bit because either IPv6 SA or DA can be checked for filtering. */
    vuint32_t L3SAIM2:1;               /* Layer 3 IP SA Inverse Match Enable When this bit is set, the Layer 3 IP Source Address field is enabled for inverse matching. When this bit reset, the Layer 3 IP Source Address field is enabled for perfect matching. This bit is valid and applicable only when the L3SAM0 bit is set. */
    vuint32_t L3DAM2:1;                /* Layer 3 IP DA Match Enable When this bit is set, the Layer 3 IP Destination Address field is enabled for matching. When this bit is reset, the MAC ignores the Layer 3 IP Destination Address field for matching. Note: When the L3PEN0 bit is set, you should set either this bit or the L3SAM0 bit because either IPv6 DA or SA can be checked for filtering. */
    vuint32_t L3DAIM2:1;               /* Layer 3 IP DA Inverse Match Enable When this bit is set, the Layer 3 IP Destination Address field is enabled for inverse matching. When this bit is reset, the Layer 3 IP Destination Address field is enabled for perfect matching. This bit is valid and applicable only when the L3DAM0 bit is set high. */
    vuint32_t L3HSBM2:5;               /* Layer 3 IP SA Higher Bits Match IPv4 Packets: This field contains the number of lower bits of IP Source Address that are masked for matching in the IPv4 packets. The following list describes the values of this field: - 0: No bits are masked. - 1: LSb[0] is masked - 2: Two LSbs [1:0] are masked - .. - 31: All bits except MSb are masked. IPv6 Packets: This field contains Bits[4:0] of L3HSBM0. These bits indicate the number of higher bits of IP Source or Destination Address matched in the IPv6 packets. This field is valid and applicable only when the L3DAM0 or L3SAM0 bit is set high. */
    vuint32_t L3HDBM2:5;               /* Layer 3 IP DA Higher Bits Match IPv4 Packets: This field contains the number of higher bits of IP Destination Address that are matched in the IPv4 packets. The following list describes the values of this field: - 0: No bits are masked. - 1: LSb[0] is masked - 2: Two LSbs [1:0] are masked - .. - 31: All bits except MSb are masked. IPv6 Packets: Bits[12:11] of this field correspond to Bits[6:5] of L3HSBM0 which indicate the number of lower bits of IP Source or Destination Address that are masked in the IPv6 packets. The following list describes the concatenated values of the L3HDBM0[1:0] and L3HSBM0 bits: - 0: No bits are masked. - 1: LSb[0] is masked. - 2: Two LSbs [1:0] are masked - .. - 127: All bits except MSb are masked. This field is valid and applicable only when the L3DAM0 or L3SAM0 bit is set. */
    vuint32_t L4PEN2:1;                /* Layer 4 Protocol Enable When this bit is set, the Source and Destination Port number fields of UDP packets are used for matching. When this bit is reset, the Source and Destination Port number fields of TCP packets are used for matching. The Layer 4 matching is done only when the L4SPM0 or L4DPM0 bit is set. */
    vuint32_t _unused_17:1;            /* Reserved. */
    vuint32_t L4SPM2:1;                /* Layer 4 Source Port Match Enable When this bit is set, the Layer 4 Source Port number field is enabled for matching. When this bit is reset, the MAC ignores the Layer 4 Source Port number field for matching. */
    vuint32_t L4SPIM2:1;               /* Layer 4 Source Port Inverse Match Enable When this bit is set, the Layer 4 Source Port number field is enabled for inverse matching. When this bit is reset, the Layer 4 Source Port number field is enabled for perfect matching. This bit is valid and applicable only when the L4SPM0 bit is set high. */
    vuint32_t L4DPM2:1;                /* Layer 4 Destination Port Match Enable When this bit is set, the Layer 4 Destination Port number field is enabled for matching. When this bit is reset, the MAC ignores the Layer 4 Destination Port number field for matching. */
    vuint32_t L4DPIM2:1;               /* Layer 4 Destination Port Inverse Match Enable When this bit is set, the Layer 4 Destination Port number field is enabled for inverse matching. When this bit is reset, the Layer 4 Destination Port number field is enabled for perfect matching. This bit is valid and applicable only when the L4DPM0 bit is set high. */
    vuint32_t _unused_22:2;            /* Reserved. */
    vuint32_t DMCHN2:3;                /* DMA Channel Number When DMCHEN is set high, this field selects the DMA Channel number to which the packet passed by this filter is routed. The width of this field depends on the number of the DMA channels present in your configuration. */
    vuint32_t _unused_27:1;            /* Reserved. */
    vuint32_t DMCHEN2:1;               /* DMA Channel Select Enable When set, this bit enables the selection of the DMA channel number for the packet that is passed by this L3_L4 filter. The DMA channel is indicated by the DMCHN bits. When this bit is reset, the DMA channel is not decided by this filter. */
    vuint32_t _unused_29:3;            /* Reserved. */
  } B;
} GMAC_MAC_L3_L4_CONTROL2_tag;

typedef union GMAC_MAC_LAYER4_ADDRESS2_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L4SP2:16;                /* Layer 4 Source Port Number Field When the L4PEN0 bit is reset and the L4SPM0 bit is set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with the TCP Source Port Number field in the IPv4 or IPv6 packets. When the L4PEN0 and L4SPM0 bits are set in MAC_L3_L4_Control0 register, this field contains the value to be matched with the UDP Source Port Number field in the IPv4 or IPv6 packets. */
    vuint32_t L4DP2:16;                /* Layer 4 Destination Port Number Field When the L4PEN0 bit is reset and the L4DPM0 bit is set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with the TCP Destination Port Number field in the IPv4 or IPv6 packets. When the L4PEN0 and L4DPM0 bits are set in MAC_L3_L4_Control0 register, this field contains the value to be matched with the UDP Destination Port Number field in the IPv4 or IPv6 packets. */
  } B;
} GMAC_MAC_LAYER4_ADDRESS2_tag;

typedef union GMAC_MAC_LAYER3_ADDR0_REG2_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A02:32;                /* Layer 3 Address 0 Field When the L3PEN0 and L3SAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[31:0] of the IP Source Address field in the IPv6 packets. When the L3PEN0 and L3DAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[31:0] of the IP Destination Address field in the IPv6 packets. When the L3PEN0 bit is reset and the L3SAM0 bit is set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with the IP Source Address field in the IPv4 packets. */
  } B;
} GMAC_MAC_LAYER3_ADDR0_REG2_tag;

typedef union GMAC_MAC_LAYER3_ADDR1_REG2_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A12:32;                /* Layer 3 Address 1 Field When the L3PEN0 and L3SAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[63:32] of the IP Source Address field in the IPv6 packets. When the L3PEN0 and L3DAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[63:32] of the IP Destination Address field in the IPv6 packets. When the L3PEN0 bit is reset and the L3SAM0 bit is set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with the IP Destination Address field in the IPv4 packets. */
  } B;
} GMAC_MAC_LAYER3_ADDR1_REG2_tag;

typedef union GMAC_MAC_LAYER3_ADDR2_REG2_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A22:32;                /* Layer 3 Address 2 Field When the L3PEN0 and L3SAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[95:64] of the IP Source Address field in the IPv6 packets. When the L3PEN0 and L3DAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[95:64] of the IP Destination Address field in the IPv6 packets. When the L3PEN0 bit is reset in the MAC_L3_L4_Control0 register, this field is not used. */
  } B;
} GMAC_MAC_LAYER3_ADDR2_REG2_tag;

typedef union GMAC_MAC_LAYER3_ADDR3_REG2_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A32:32;                /* Layer 3 Address 3 Field When the L3PEN0 and L3SAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[127:96] of the IP Source Address field in the IPv6 packets. When the L3PEN0 and L3DAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[127:96] of the IP Destination Address field in the IPv6 packets. When the L3PEN0 bit is reset in the MAC_L3_L4_Control0 register, this field is not used. */
  } B;
} GMAC_MAC_LAYER3_ADDR3_REG2_tag;

typedef union GMAC_MAC_L3_L4_CONTROL3_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3PEN3:1;                /* Layer 3 Protocol Enable When this bit is set, the Layer 3 IP Source or Destination Address matching is enabled for IPv6 packets. When this bit is reset, the Layer 3 IP Source or Destination Address matching is enabled for IPv4 packets. The Layer 3 matching is done only when the L3SAM0 or L3DAM0 bit is set. */
    vuint32_t _unused_1:1;             /* Reserved. */
    vuint32_t L3SAM3:1;                /* Layer 3 IP SA Match Enable When this bit is set, the Layer 3 IP Source Address field is enabled for matching. When this bit is reset, the MAC ignores the Layer 3 IP Source Address field for matching. Note: When the L3PEN0 bit is set, you should set either this bit or the L3DAM0 bit because either IPv6 SA or DA can be checked for filtering. */
    vuint32_t L3SAIM3:1;               /* Layer 3 IP SA Inverse Match Enable When this bit is set, the Layer 3 IP Source Address field is enabled for inverse matching. When this bit reset, the Layer 3 IP Source Address field is enabled for perfect matching. This bit is valid and applicable only when the L3SAM0 bit is set. */
    vuint32_t L3DAM3:1;                /* Layer 3 IP DA Match Enable When this bit is set, the Layer 3 IP Destination Address field is enabled for matching. When this bit is reset, the MAC ignores the Layer 3 IP Destination Address field for matching. Note: When the L3PEN0 bit is set, you should set either this bit or the L3SAM0 bit because either IPv6 DA or SA can be checked for filtering. */
    vuint32_t L3DAIM3:1;               /* Layer 3 IP DA Inverse Match Enable When this bit is set, the Layer 3 IP Destination Address field is enabled for inverse matching. When this bit is reset, the Layer 3 IP Destination Address field is enabled for perfect matching. This bit is valid and applicable only when the L3DAM0 bit is set high. */
    vuint32_t L3HSBM3:5;               /* Layer 3 IP SA Higher Bits Match IPv4 Packets: This field contains the number of lower bits of IP Source Address that are masked for matching in the IPv4 packets. The following list describes the values of this field: - 0: No bits are masked. - 1: LSb[0] is masked - 2: Two LSbs [1:0] are masked - .. - 31: All bits except MSb are masked. IPv6 Packets: This field contains Bits[4:0] of L3HSBM0. These bits indicate the number of higher bits of IP Source or Destination Address matched in the IPv6 packets. This field is valid and applicable only when the L3DAM0 or L3SAM0 bit is set high. */
    vuint32_t L3HDBM3:5;               /* Layer 3 IP DA Higher Bits Match IPv4 Packets: This field contains the number of higher bits of IP Destination Address that are matched in the IPv4 packets. The following list describes the values of this field: - 0: No bits are masked. - 1: LSb[0] is masked - 2: Two LSbs [1:0] are masked - .. - 31: All bits except MSb are masked. IPv6 Packets: Bits[12:11] of this field correspond to Bits[6:5] of L3HSBM0 which indicate the number of lower bits of IP Source or Destination Address that are masked in the IPv6 packets. The following list describes the concatenated values of the L3HDBM0[1:0] and L3HSBM0 bits: - 0: No bits are masked. - 1: LSb[0] is masked. - 2: Two LSbs [1:0] are masked - .. - 127: All bits except MSb are masked. This field is valid and applicable only when the L3DAM0 or L3SAM0 bit is set. */
    vuint32_t L4PEN3:1;                /* Layer 4 Protocol Enable When this bit is set, the Source and Destination Port number fields of UDP packets are used for matching. When this bit is reset, the Source and Destination Port number fields of TCP packets are used for matching. The Layer 4 matching is done only when the L4SPM0 or L4DPM0 bit is set. */
    vuint32_t _unused_17:1;            /* Reserved. */
    vuint32_t L4SPM3:1;                /* Layer 4 Source Port Match Enable When this bit is set, the Layer 4 Source Port number field is enabled for matching. When this bit is reset, the MAC ignores the Layer 4 Source Port number field for matching. */
    vuint32_t L4SPIM3:1;               /* Layer 4 Source Port Inverse Match Enable When this bit is set, the Layer 4 Source Port number field is enabled for inverse matching. When this bit is reset, the Layer 4 Source Port number field is enabled for perfect matching. This bit is valid and applicable only when the L4SPM0 bit is set high. */
    vuint32_t L4DPM3:1;                /* Layer 4 Destination Port Match Enable When this bit is set, the Layer 4 Destination Port number field is enabled for matching. When this bit is reset, the MAC ignores the Layer 4 Destination Port number field for matching. */
    vuint32_t L4DPIM3:1;               /* Layer 4 Destination Port Inverse Match Enable When this bit is set, the Layer 4 Destination Port number field is enabled for inverse matching. When this bit is reset, the Layer 4 Destination Port number field is enabled for perfect matching. This bit is valid and applicable only when the L4DPM0 bit is set high. */
    vuint32_t _unused_22:2;            /* Reserved. */
    vuint32_t DMCHN3:3;                /* DMA Channel Number When DMCHEN is set high, this field selects the DMA Channel number to which the packet passed by this filter is routed. The width of this field depends on the number of the DMA channels present in your configuration. */
    vuint32_t _unused_27:1;            /* Reserved. */
    vuint32_t DMCHEN3:1;               /* DMA Channel Select Enable When set, this bit enables the selection of the DMA channel number for the packet that is passed by this L3_L4 filter. The DMA channel is indicated by the DMCHN bits. When this bit is reset, the DMA channel is not decided by this filter. */
    vuint32_t _unused_29:3;            /* Reserved. */
  } B;
} GMAC_MAC_L3_L4_CONTROL3_tag;

typedef union GMAC_MAC_LAYER4_ADDRESS3_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L4SP3:16;                /* Layer 4 Source Port Number Field When the L4PEN0 bit is reset and the L4SPM0 bit is set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with the TCP Source Port Number field in the IPv4 or IPv6 packets. When the L4PEN0 and L4SPM0 bits are set in MAC_L3_L4_Control0 register, this field contains the value to be matched with the UDP Source Port Number field in the IPv4 or IPv6 packets. */
    vuint32_t L4DP3:16;                /* Layer 4 Destination Port Number Field When the L4PEN0 bit is reset and the L4DPM0 bit is set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with the TCP Destination Port Number field in the IPv4 or IPv6 packets. When the L4PEN0 and L4DPM0 bits are set in MAC_L3_L4_Control0 register, this field contains the value to be matched with the UDP Destination Port Number field in the IPv4 or IPv6 packets. */
  } B;
} GMAC_MAC_LAYER4_ADDRESS3_tag;

typedef union GMAC_MAC_LAYER3_ADDR0_REG3_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A03:32;                /* Layer 3 Address 0 Field When the L3PEN0 and L3SAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[31:0] of the IP Source Address field in the IPv6 packets. When the L3PEN0 and L3DAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[31:0] of the IP Destination Address field in the IPv6 packets. When the L3PEN0 bit is reset and the L3SAM0 bit is set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with the IP Source Address field in the IPv4 packets. */
  } B;
} GMAC_MAC_LAYER3_ADDR0_REG3_tag;

typedef union GMAC_MAC_LAYER3_ADDR1_REG3_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A13:32;                /* Layer 3 Address 1 Field When the L3PEN0 and L3SAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[63:32] of the IP Source Address field in the IPv6 packets. When the L3PEN0 and L3DAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[63:32] of the IP Destination Address field in the IPv6 packets. When the L3PEN0 bit is reset and the L3SAM0 bit is set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with the IP Destination Address field in the IPv4 packets. */
  } B;
} GMAC_MAC_LAYER3_ADDR1_REG3_tag;

typedef union GMAC_MAC_LAYER3_ADDR2_REG3_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A23:32;                /* Layer 3 Address 2 Field When the L3PEN0 and L3SAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[95:64] of the IP Source Address field in the IPv6 packets. When the L3PEN0 and L3DAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[95:64] of the IP Destination Address field in the IPv6 packets. When the L3PEN0 bit is reset in the MAC_L3_L4_Control0 register, this field is not used. */
  } B;
} GMAC_MAC_LAYER3_ADDR2_REG3_tag;

typedef union GMAC_MAC_LAYER3_ADDR3_REG3_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A33:32;                /* Layer 3 Address 3 Field When the L3PEN0 and L3SAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[127:96] of the IP Source Address field in the IPv6 packets. When the L3PEN0 and L3DAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[127:96] of the IP Destination Address field in the IPv6 packets. When the L3PEN0 bit is reset in the MAC_L3_L4_Control0 register, this field is not used. */
  } B;
} GMAC_MAC_LAYER3_ADDR3_REG3_tag;

typedef union GMAC_MAC_L3_L4_CONTROL4_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3PEN4:1;                /* Layer 3 Protocol Enable When this bit is set, the Layer 3 IP Source or Destination Address matching is enabled for IPv6 packets. When this bit is reset, the Layer 3 IP Source or Destination Address matching is enabled for IPv4 packets. The Layer 3 matching is done only when the L3SAM0 or L3DAM0 bit is set. */
    vuint32_t _unused_1:1;             /* Reserved. */
    vuint32_t L3SAM4:1;                /* Layer 3 IP SA Match Enable When this bit is set, the Layer 3 IP Source Address field is enabled for matching. When this bit is reset, the MAC ignores the Layer 3 IP Source Address field for matching. Note: When the L3PEN0 bit is set, you should set either this bit or the L3DAM0 bit because either IPv6 SA or DA can be checked for filtering. */
    vuint32_t L3SAIM4:1;               /* Layer 3 IP SA Inverse Match Enable When this bit is set, the Layer 3 IP Source Address field is enabled for inverse matching. When this bit reset, the Layer 3 IP Source Address field is enabled for perfect matching. This bit is valid and applicable only when the L3SAM0 bit is set. */
    vuint32_t L3DAM4:1;                /* Layer 3 IP DA Match Enable When this bit is set, the Layer 3 IP Destination Address field is enabled for matching. When this bit is reset, the MAC ignores the Layer 3 IP Destination Address field for matching. Note: When the L3PEN0 bit is set, you should set either this bit or the L3SAM0 bit because either IPv6 DA or SA can be checked for filtering. */
    vuint32_t L3DAIM4:1;               /* Layer 3 IP DA Inverse Match Enable When this bit is set, the Layer 3 IP Destination Address field is enabled for inverse matching. When this bit is reset, the Layer 3 IP Destination Address field is enabled for perfect matching. This bit is valid and applicable only when the L3DAM0 bit is set high. */
    vuint32_t L3HSBM4:5;               /* Layer 3 IP SA Higher Bits Match IPv4 Packets: This field contains the number of lower bits of IP Source Address that are masked for matching in the IPv4 packets. The following list describes the values of this field: - 0: No bits are masked. - 1: LSb[0] is masked - 2: Two LSbs [1:0] are masked - .. - 31: All bits except MSb are masked. IPv6 Packets: This field contains Bits[4:0] of L3HSBM0. These bits indicate the number of higher bits of IP Source or Destination Address matched in the IPv6 packets. This field is valid and applicable only when the L3DAM0 or L3SAM0 bit is set high. */
    vuint32_t L3HDBM4:5;               /* Layer 3 IP DA Higher Bits Match IPv4 Packets: This field contains the number of higher bits of IP Destination Address that are matched in the IPv4 packets. The following list describes the values of this field: - 0: No bits are masked. - 1: LSb[0] is masked - 2: Two LSbs [1:0] are masked - .. - 31: All bits except MSb are masked. IPv6 Packets: Bits[12:11] of this field correspond to Bits[6:5] of L3HSBM0 which indicate the number of lower bits of IP Source or Destination Address that are masked in the IPv6 packets. The following list describes the concatenated values of the L3HDBM0[1:0] and L3HSBM0 bits: - 0: No bits are masked. - 1: LSb[0] is masked. - 2: Two LSbs [1:0] are masked - .. - 127: All bits except MSb are masked. This field is valid and applicable only when the L3DAM0 or L3SAM0 bit is set. */
    vuint32_t L4PEN4:1;                /* Layer 4 Protocol Enable When this bit is set, the Source and Destination Port number fields of UDP packets are used for matching. When this bit is reset, the Source and Destination Port number fields of TCP packets are used for matching. The Layer 4 matching is done only when the L4SPM0 or L4DPM0 bit is set. */
    vuint32_t _unused_17:1;            /* Reserved. */
    vuint32_t L4SPM4:1;                /* Layer 4 Source Port Match Enable When this bit is set, the Layer 4 Source Port number field is enabled for matching. When this bit is reset, the MAC ignores the Layer 4 Source Port number field for matching. */
    vuint32_t L4SPIM4:1;               /* Layer 4 Source Port Inverse Match Enable When this bit is set, the Layer 4 Source Port number field is enabled for inverse matching. When this bit is reset, the Layer 4 Source Port number field is enabled for perfect matching. This bit is valid and applicable only when the L4SPM0 bit is set high. */
    vuint32_t L4DPM4:1;                /* Layer 4 Destination Port Match Enable When this bit is set, the Layer 4 Destination Port number field is enabled for matching. When this bit is reset, the MAC ignores the Layer 4 Destination Port number field for matching. */
    vuint32_t L4DPIM4:1;               /* Layer 4 Destination Port Inverse Match Enable When this bit is set, the Layer 4 Destination Port number field is enabled for inverse matching. When this bit is reset, the Layer 4 Destination Port number field is enabled for perfect matching. This bit is valid and applicable only when the L4DPM0 bit is set high. */
    vuint32_t _unused_22:2;            /* Reserved. */
    vuint32_t DMCHN4:3;                /* DMA Channel Number When DMCHEN is set high, this field selects the DMA Channel number to which the packet passed by this filter is routed. The width of this field depends on the number of the DMA channels present in your configuration. */
    vuint32_t _unused_27:1;            /* Reserved. */
    vuint32_t DMCHEN4:1;               /* DMA Channel Select Enable When set, this bit enables the selection of the DMA channel number for the packet that is passed by this L3_L4 filter. The DMA channel is indicated by the DMCHN bits. When this bit is reset, the DMA channel is not decided by this filter. */
    vuint32_t _unused_29:3;            /* Reserved. */
  } B;
} GMAC_MAC_L3_L4_CONTROL4_tag;

typedef union GMAC_MAC_LAYER4_ADDRESS4_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L4SP4:16;                /* Layer 4 Source Port Number Field When the L4PEN0 bit is reset and the L4SPM0 bit is set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with the TCP Source Port Number field in the IPv4 or IPv6 packets. When the L4PEN0 and L4SPM0 bits are set in MAC_L3_L4_Control0 register, this field contains the value to be matched with the UDP Source Port Number field in the IPv4 or IPv6 packets. */
    vuint32_t L4DP4:16;                /* Layer 4 Destination Port Number Field When the L4PEN0 bit is reset and the L4DPM0 bit is set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with the TCP Destination Port Number field in the IPv4 or IPv6 packets. When the L4PEN0 and L4DPM0 bits are set in MAC_L3_L4_Control0 register, this field contains the value to be matched with the UDP Destination Port Number field in the IPv4 or IPv6 packets. */
  } B;
} GMAC_MAC_LAYER4_ADDRESS4_tag;

typedef union GMAC_MAC_LAYER3_ADDR0_REG4_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A04:32;                /* Layer 3 Address 0 Field When the L3PEN0 and L3SAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[31:0] of the IP Source Address field in the IPv6 packets. When the L3PEN0 and L3DAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[31:0] of the IP Destination Address field in the IPv6 packets. When the L3PEN0 bit is reset and the L3SAM0 bit is set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with the IP Source Address field in the IPv4 packets. */
  } B;
} GMAC_MAC_LAYER3_ADDR0_REG4_tag;

typedef union GMAC_MAC_LAYER3_ADDR1_REG4_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A14:32;                /* Layer 3 Address 1 Field When the L3PEN0 and L3SAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[63:32] of the IP Source Address field in the IPv6 packets. When the L3PEN0 and L3DAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[63:32] of the IP Destination Address field in the IPv6 packets. When the L3PEN0 bit is reset and the L3SAM0 bit is set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with the IP Destination Address field in the IPv4 packets. */
  } B;
} GMAC_MAC_LAYER3_ADDR1_REG4_tag;

typedef union GMAC_MAC_LAYER3_ADDR2_REG4_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A24:32;                /* Layer 3 Address 2 Field When the L3PEN0 and L3SAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[95:64] of the IP Source Address field in the IPv6 packets. When the L3PEN0 and L3DAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[95:64] of the IP Destination Address field in the IPv6 packets. When the L3PEN0 bit is reset in the MAC_L3_L4_Control0 register, this field is not used. */
  } B;
} GMAC_MAC_LAYER3_ADDR2_REG4_tag;

typedef union GMAC_MAC_LAYER3_ADDR3_REG4_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A34:32;                /* Layer 3 Address 3 Field When the L3PEN0 and L3SAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[127:96] of the IP Source Address field in the IPv6 packets. When the L3PEN0 and L3DAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[127:96] of the IP Destination Address field in the IPv6 packets. When the L3PEN0 bit is reset in the MAC_L3_L4_Control0 register, this field is not used. */
  } B;
} GMAC_MAC_LAYER3_ADDR3_REG4_tag;

typedef union GMAC_MAC_L3_L4_CONTROL5_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3PEN5:1;                /* Layer 3 Protocol Enable When this bit is set, the Layer 3 IP Source or Destination Address matching is enabled for IPv6 packets. When this bit is reset, the Layer 3 IP Source or Destination Address matching is enabled for IPv4 packets. The Layer 3 matching is done only when the L3SAM0 or L3DAM0 bit is set. */
    vuint32_t _unused_1:1;             /* Reserved. */
    vuint32_t L3SAM5:1;                /* Layer 3 IP SA Match Enable When this bit is set, the Layer 3 IP Source Address field is enabled for matching. When this bit is reset, the MAC ignores the Layer 3 IP Source Address field for matching. Note: When the L3PEN0 bit is set, you should set either this bit or the L3DAM0 bit because either IPv6 SA or DA can be checked for filtering. */
    vuint32_t L3SAIM5:1;               /* Layer 3 IP SA Inverse Match Enable When this bit is set, the Layer 3 IP Source Address field is enabled for inverse matching. When this bit reset, the Layer 3 IP Source Address field is enabled for perfect matching. This bit is valid and applicable only when the L3SAM0 bit is set. */
    vuint32_t L3DAM5:1;                /* Layer 3 IP DA Match Enable When this bit is set, the Layer 3 IP Destination Address field is enabled for matching. When this bit is reset, the MAC ignores the Layer 3 IP Destination Address field for matching. Note: When the L3PEN0 bit is set, you should set either this bit or the L3SAM0 bit because either IPv6 DA or SA can be checked for filtering. */
    vuint32_t L3DAIM5:1;               /* Layer 3 IP DA Inverse Match Enable When this bit is set, the Layer 3 IP Destination Address field is enabled for inverse matching. When this bit is reset, the Layer 3 IP Destination Address field is enabled for perfect matching. This bit is valid and applicable only when the L3DAM0 bit is set high. */
    vuint32_t L3HSBM5:5;               /* Layer 3 IP SA Higher Bits Match IPv4 Packets: This field contains the number of lower bits of IP Source Address that are masked for matching in the IPv4 packets. The following list describes the values of this field: - 0: No bits are masked. - 1: LSb[0] is masked - 2: Two LSbs [1:0] are masked - .. - 31: All bits except MSb are masked. IPv6 Packets: This field contains Bits[4:0] of L3HSBM0. These bits indicate the number of higher bits of IP Source or Destination Address matched in the IPv6 packets. This field is valid and applicable only when the L3DAM0 or L3SAM0 bit is set high. */
    vuint32_t L3HDBM5:5;               /* Layer 3 IP DA Higher Bits Match IPv4 Packets: This field contains the number of higher bits of IP Destination Address that are matched in the IPv4 packets. The following list describes the values of this field: - 0: No bits are masked. - 1: LSb[0] is masked - 2: Two LSbs [1:0] are masked - .. - 31: All bits except MSb are masked. IPv6 Packets: Bits[12:11] of this field correspond to Bits[6:5] of L3HSBM0 which indicate the number of lower bits of IP Source or Destination Address that are masked in the IPv6 packets. The following list describes the concatenated values of the L3HDBM0[1:0] and L3HSBM0 bits: - 0: No bits are masked. - 1: LSb[0] is masked. - 2: Two LSbs [1:0] are masked - .. - 127: All bits except MSb are masked. This field is valid and applicable only when the L3DAM0 or L3SAM0 bit is set. */
    vuint32_t L4PEN5:1;                /* Layer 4 Protocol Enable When this bit is set, the Source and Destination Port number fields of UDP packets are used for matching. When this bit is reset, the Source and Destination Port number fields of TCP packets are used for matching. The Layer 4 matching is done only when the L4SPM0 or L4DPM0 bit is set. */
    vuint32_t _unused_17:1;            /* Reserved. */
    vuint32_t L4SPM5:1;                /* Layer 4 Source Port Match Enable When this bit is set, the Layer 4 Source Port number field is enabled for matching. When this bit is reset, the MAC ignores the Layer 4 Source Port number field for matching. */
    vuint32_t L4SPIM5:1;               /* Layer 4 Source Port Inverse Match Enable When this bit is set, the Layer 4 Source Port number field is enabled for inverse matching. When this bit is reset, the Layer 4 Source Port number field is enabled for perfect matching. This bit is valid and applicable only when the L4SPM0 bit is set high. */
    vuint32_t L4DPM5:1;                /* Layer 4 Destination Port Match Enable When this bit is set, the Layer 4 Destination Port number field is enabled for matching. When this bit is reset, the MAC ignores the Layer 4 Destination Port number field for matching. */
    vuint32_t L4DPIM5:1;               /* Layer 4 Destination Port Inverse Match Enable When this bit is set, the Layer 4 Destination Port number field is enabled for inverse matching. When this bit is reset, the Layer 4 Destination Port number field is enabled for perfect matching. This bit is valid and applicable only when the L4DPM0 bit is set high. */
    vuint32_t _unused_22:2;            /* Reserved. */
    vuint32_t DMCHN5:3;                /* DMA Channel Number When DMCHEN is set high, this field selects the DMA Channel number to which the packet passed by this filter is routed. The width of this field depends on the number of the DMA channels present in your configuration. */
    vuint32_t _unused_27:1;            /* Reserved. */
    vuint32_t DMCHEN5:1;               /* DMA Channel Select Enable When set, this bit enables the selection of the DMA channel number for the packet that is passed by this L3_L4 filter. The DMA channel is indicated by the DMCHN bits. When this bit is reset, the DMA channel is not decided by this filter. */
    vuint32_t _unused_29:3;            /* Reserved. */
  } B;
} GMAC_MAC_L3_L4_CONTROL5_tag;

typedef union GMAC_MAC_LAYER4_ADDRESS5_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L4SP5:16;                /* Layer 4 Source Port Number Field When the L4PEN0 bit is reset and the L4SPM0 bit is set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with the TCP Source Port Number field in the IPv4 or IPv6 packets. When the L4PEN0 and L4SPM0 bits are set in MAC_L3_L4_Control0 register, this field contains the value to be matched with the UDP Source Port Number field in the IPv4 or IPv6 packets. */
    vuint32_t L4DP5:16;                /* Layer 4 Destination Port Number Field When the L4PEN0 bit is reset and the L4DPM0 bit is set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with the TCP Destination Port Number field in the IPv4 or IPv6 packets. When the L4PEN0 and L4DPM0 bits are set in MAC_L3_L4_Control0 register, this field contains the value to be matched with the UDP Destination Port Number field in the IPv4 or IPv6 packets. */
  } B;
} GMAC_MAC_LAYER4_ADDRESS5_tag;

typedef union GMAC_MAC_LAYER3_ADDR0_REG5_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A05:32;                /* Layer 3 Address 0 Field When the L3PEN0 and L3SAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[31:0] of the IP Source Address field in the IPv6 packets. When the L3PEN0 and L3DAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[31:0] of the IP Destination Address field in the IPv6 packets. When the L3PEN0 bit is reset and the L3SAM0 bit is set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with the IP Source Address field in the IPv4 packets. */
  } B;
} GMAC_MAC_LAYER3_ADDR0_REG5_tag;

typedef union GMAC_MAC_LAYER3_ADDR1_REG5_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A15:32;                /* Layer 3 Address 1 Field When the L3PEN0 and L3SAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[63:32] of the IP Source Address field in the IPv6 packets. When the L3PEN0 and L3DAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[63:32] of the IP Destination Address field in the IPv6 packets. When the L3PEN0 bit is reset and the L3SAM0 bit is set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with the IP Destination Address field in the IPv4 packets. */
  } B;
} GMAC_MAC_LAYER3_ADDR1_REG5_tag;

typedef union GMAC_MAC_LAYER3_ADDR2_REG5_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A25:32;                /* Layer 3 Address 2 Field When the L3PEN0 and L3SAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[95:64] of the IP Source Address field in the IPv6 packets. When the L3PEN0 and L3DAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[95:64] of the IP Destination Address field in the IPv6 packets. When the L3PEN0 bit is reset in the MAC_L3_L4_Control0 register, this field is not used. */
  } B;
} GMAC_MAC_LAYER3_ADDR2_REG5_tag;

typedef union GMAC_MAC_LAYER3_ADDR3_REG5_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A35:32;                /* Layer 3 Address 3 Field When the L3PEN0 and L3SAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[127:96] of the IP Source Address field in the IPv6 packets. When the L3PEN0 and L3DAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[127:96] of the IP Destination Address field in the IPv6 packets. When the L3PEN0 bit is reset in the MAC_L3_L4_Control0 register, this field is not used. */
  } B;
} GMAC_MAC_LAYER3_ADDR3_REG5_tag;

typedef union GMAC_MAC_L3_L4_CONTROL6_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3PEN6:1;                /* Layer 3 Protocol Enable When this bit is set, the Layer 3 IP Source or Destination Address matching is enabled for IPv6 packets. When this bit is reset, the Layer 3 IP Source or Destination Address matching is enabled for IPv4 packets. The Layer 3 matching is done only when the L3SAM0 or L3DAM0 bit is set. */
    vuint32_t _unused_1:1;             /* Reserved. */
    vuint32_t L3SAM6:1;                /* Layer 3 IP SA Match Enable When this bit is set, the Layer 3 IP Source Address field is enabled for matching. When this bit is reset, the MAC ignores the Layer 3 IP Source Address field for matching. Note: When the L3PEN0 bit is set, you should set either this bit or the L3DAM0 bit because either IPv6 SA or DA can be checked for filtering. */
    vuint32_t L3SAIM6:1;               /* Layer 3 IP SA Inverse Match Enable When this bit is set, the Layer 3 IP Source Address field is enabled for inverse matching. When this bit reset, the Layer 3 IP Source Address field is enabled for perfect matching. This bit is valid and applicable only when the L3SAM0 bit is set. */
    vuint32_t L3DAM6:1;                /* Layer 3 IP DA Match Enable When this bit is set, the Layer 3 IP Destination Address field is enabled for matching. When this bit is reset, the MAC ignores the Layer 3 IP Destination Address field for matching. Note: When the L3PEN0 bit is set, you should set either this bit or the L3SAM0 bit because either IPv6 DA or SA can be checked for filtering. */
    vuint32_t L3DAIM6:1;               /* Layer 3 IP DA Inverse Match Enable When this bit is set, the Layer 3 IP Destination Address field is enabled for inverse matching. When this bit is reset, the Layer 3 IP Destination Address field is enabled for perfect matching. This bit is valid and applicable only when the L3DAM0 bit is set high. */
    vuint32_t L3HSBM6:5;               /* Layer 3 IP SA Higher Bits Match IPv4 Packets: This field contains the number of lower bits of IP Source Address that are masked for matching in the IPv4 packets. The following list describes the values of this field: - 0: No bits are masked. - 1: LSb[0] is masked - 2: Two LSbs [1:0] are masked - .. - 31: All bits except MSb are masked. IPv6 Packets: This field contains Bits[4:0] of L3HSBM0. These bits indicate the number of higher bits of IP Source or Destination Address matched in the IPv6 packets. This field is valid and applicable only when the L3DAM0 or L3SAM0 bit is set high. */
    vuint32_t L3HDBM6:5;               /* Layer 3 IP DA Higher Bits Match IPv4 Packets: This field contains the number of higher bits of IP Destination Address that are matched in the IPv4 packets. The following list describes the values of this field: - 0: No bits are masked. - 1: LSb[0] is masked - 2: Two LSbs [1:0] are masked - .. - 31: All bits except MSb are masked. IPv6 Packets: Bits[12:11] of this field correspond to Bits[6:5] of L3HSBM0 which indicate the number of lower bits of IP Source or Destination Address that are masked in the IPv6 packets. The following list describes the concatenated values of the L3HDBM0[1:0] and L3HSBM0 bits: - 0: No bits are masked. - 1: LSb[0] is masked. - 2: Two LSbs [1:0] are masked - .. - 127: All bits except MSb are masked. This field is valid and applicable only when the L3DAM0 or L3SAM0 bit is set. */
    vuint32_t L4PEN6:1;                /* Layer 4 Protocol Enable When this bit is set, the Source and Destination Port number fields of UDP packets are used for matching. When this bit is reset, the Source and Destination Port number fields of TCP packets are used for matching. The Layer 4 matching is done only when the L4SPM0 or L4DPM0 bit is set. */
    vuint32_t _unused_17:1;            /* Reserved. */
    vuint32_t L4SPM6:1;                /* Layer 4 Source Port Match Enable When this bit is set, the Layer 4 Source Port number field is enabled for matching. When this bit is reset, the MAC ignores the Layer 4 Source Port number field for matching. */
    vuint32_t L4SPIM6:1;               /* Layer 4 Source Port Inverse Match Enable When this bit is set, the Layer 4 Source Port number field is enabled for inverse matching. When this bit is reset, the Layer 4 Source Port number field is enabled for perfect matching. This bit is valid and applicable only when the L4SPM0 bit is set high. */
    vuint32_t L4DPM6:1;                /* Layer 4 Destination Port Match Enable When this bit is set, the Layer 4 Destination Port number field is enabled for matching. When this bit is reset, the MAC ignores the Layer 4 Destination Port number field for matching. */
    vuint32_t L4DPIM6:1;               /* Layer 4 Destination Port Inverse Match Enable When this bit is set, the Layer 4 Destination Port number field is enabled for inverse matching. When this bit is reset, the Layer 4 Destination Port number field is enabled for perfect matching. This bit is valid and applicable only when the L4DPM0 bit is set high. */
    vuint32_t _unused_22:2;            /* Reserved. */
    vuint32_t DMCHN6:3;                /* DMA Channel Number When DMCHEN is set high, this field selects the DMA Channel number to which the packet passed by this filter is routed. The width of this field depends on the number of the DMA channels present in your configuration. */
    vuint32_t _unused_27:1;            /* Reserved. */
    vuint32_t DMCHEN6:1;               /* DMA Channel Select Enable When set, this bit enables the selection of the DMA channel number for the packet that is passed by this L3_L4 filter. The DMA channel is indicated by the DMCHN bits. When this bit is reset, the DMA channel is not decided by this filter. */
    vuint32_t _unused_29:3;            /* Reserved. */
  } B;
} GMAC_MAC_L3_L4_CONTROL6_tag;

typedef union GMAC_MAC_LAYER4_ADDRESS6_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L4SP6:16;                /* Layer 4 Source Port Number Field When the L4PEN0 bit is reset and the L4SPM0 bit is set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with the TCP Source Port Number field in the IPv4 or IPv6 packets. When the L4PEN0 and L4SPM0 bits are set in MAC_L3_L4_Control0 register, this field contains the value to be matched with the UDP Source Port Number field in the IPv4 or IPv6 packets. */
    vuint32_t L4DP6:16;                /* Layer 4 Destination Port Number Field When the L4PEN0 bit is reset and the L4DPM0 bit is set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with the TCP Destination Port Number field in the IPv4 or IPv6 packets. When the L4PEN0 and L4DPM0 bits are set in MAC_L3_L4_Control0 register, this field contains the value to be matched with the UDP Destination Port Number field in the IPv4 or IPv6 packets. */
  } B;
} GMAC_MAC_LAYER4_ADDRESS6_tag;

typedef union GMAC_MAC_LAYER3_ADDR0_REG6_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A06:32;                /* Layer 3 Address 0 Field When the L3PEN0 and L3SAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[31:0] of the IP Source Address field in the IPv6 packets. When the L3PEN0 and L3DAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[31:0] of the IP Destination Address field in the IPv6 packets. When the L3PEN0 bit is reset and the L3SAM0 bit is set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with the IP Source Address field in the IPv4 packets. */
  } B;
} GMAC_MAC_LAYER3_ADDR0_REG6_tag;

typedef union GMAC_MAC_LAYER3_ADDR1_REG6_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A16:32;                /* Layer 3 Address 1 Field When the L3PEN0 and L3SAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[63:32] of the IP Source Address field in the IPv6 packets. When the L3PEN0 and L3DAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[63:32] of the IP Destination Address field in the IPv6 packets. When the L3PEN0 bit is reset and the L3SAM0 bit is set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with the IP Destination Address field in the IPv4 packets. */
  } B;
} GMAC_MAC_LAYER3_ADDR1_REG6_tag;

typedef union GMAC_MAC_LAYER3_ADDR2_REG6_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A26:32;                /* Layer 3 Address 2 Field When the L3PEN0 and L3SAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[95:64] of the IP Source Address field in the IPv6 packets. When the L3PEN0 and L3DAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[95:64] of the IP Destination Address field in the IPv6 packets. When the L3PEN0 bit is reset in the MAC_L3_L4_Control0 register, this field is not used. */
  } B;
} GMAC_MAC_LAYER3_ADDR2_REG6_tag;

typedef union GMAC_MAC_LAYER3_ADDR3_REG6_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A36:32;                /* Layer 3 Address 3 Field When the L3PEN0 and L3SAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[127:96] of the IP Source Address field in the IPv6 packets. When the L3PEN0 and L3DAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[127:96] of the IP Destination Address field in the IPv6 packets. When the L3PEN0 bit is reset in the MAC_L3_L4_Control0 register, this field is not used. */
  } B;
} GMAC_MAC_LAYER3_ADDR3_REG6_tag;

typedef union GMAC_MAC_L3_L4_CONTROL7_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3PEN7:1;                /* Layer 3 Protocol Enable When this bit is set, the Layer 3 IP Source or Destination Address matching is enabled for IPv6 packets. When this bit is reset, the Layer 3 IP Source or Destination Address matching is enabled for IPv4 packets. The Layer 3 matching is done only when the L3SAM0 or L3DAM0 bit is set. */
    vuint32_t _unused_1:1;             /* Reserved. */
    vuint32_t L3SAM7:1;                /* Layer 3 IP SA Match Enable When this bit is set, the Layer 3 IP Source Address field is enabled for matching. When this bit is reset, the MAC ignores the Layer 3 IP Source Address field for matching. Note: When the L3PEN0 bit is set, you should set either this bit or the L3DAM0 bit because either IPv6 SA or DA can be checked for filtering. */
    vuint32_t L3SAIM7:1;               /* Layer 3 IP SA Inverse Match Enable When this bit is set, the Layer 3 IP Source Address field is enabled for inverse matching. When this bit reset, the Layer 3 IP Source Address field is enabled for perfect matching. This bit is valid and applicable only when the L3SAM0 bit is set. */
    vuint32_t L3DAM7:1;                /* Layer 3 IP DA Match Enable When this bit is set, the Layer 3 IP Destination Address field is enabled for matching. When this bit is reset, the MAC ignores the Layer 3 IP Destination Address field for matching. Note: When the L3PEN0 bit is set, you should set either this bit or the L3SAM0 bit because either IPv6 DA or SA can be checked for filtering. */
    vuint32_t L3DAIM7:1;               /* Layer 3 IP DA Inverse Match Enable When this bit is set, the Layer 3 IP Destination Address field is enabled for inverse matching. When this bit is reset, the Layer 3 IP Destination Address field is enabled for perfect matching. This bit is valid and applicable only when the L3DAM0 bit is set high. */
    vuint32_t L3HSBM7:5;               /* Layer 3 IP SA Higher Bits Match IPv4 Packets: This field contains the number of lower bits of IP Source Address that are masked for matching in the IPv4 packets. The following list describes the values of this field: - 0: No bits are masked. - 1: LSb[0] is masked - 2: Two LSbs [1:0] are masked - .. - 31: All bits except MSb are masked. IPv6 Packets: This field contains Bits[4:0] of L3HSBM0. These bits indicate the number of higher bits of IP Source or Destination Address matched in the IPv6 packets. This field is valid and applicable only when the L3DAM0 or L3SAM0 bit is set high. */
    vuint32_t L3HDBM7:5;               /* Layer 3 IP DA Higher Bits Match IPv4 Packets: This field contains the number of higher bits of IP Destination Address that are matched in the IPv4 packets. The following list describes the values of this field: - 0: No bits are masked. - 1: LSb[0] is masked - 2: Two LSbs [1:0] are masked - .. - 31: All bits except MSb are masked. IPv6 Packets: Bits[12:11] of this field correspond to Bits[6:5] of L3HSBM0 which indicate the number of lower bits of IP Source or Destination Address that are masked in the IPv6 packets. The following list describes the concatenated values of the L3HDBM0[1:0] and L3HSBM0 bits: - 0: No bits are masked. - 1: LSb[0] is masked. - 2: Two LSbs [1:0] are masked - .. - 127: All bits except MSb are masked. This field is valid and applicable only when the L3DAM0 or L3SAM0 bit is set. */
    vuint32_t L4PEN7:1;                /* Layer 4 Protocol Enable When this bit is set, the Source and Destination Port number fields of UDP packets are used for matching. When this bit is reset, the Source and Destination Port number fields of TCP packets are used for matching. The Layer 4 matching is done only when the L4SPM0 or L4DPM0 bit is set. */
    vuint32_t _unused_17:1;            /* Reserved. */
    vuint32_t L4SPM7:1;                /* Layer 4 Source Port Match Enable When this bit is set, the Layer 4 Source Port number field is enabled for matching. When this bit is reset, the MAC ignores the Layer 4 Source Port number field for matching. */
    vuint32_t L4SPIM7:1;               /* Layer 4 Source Port Inverse Match Enable When this bit is set, the Layer 4 Source Port number field is enabled for inverse matching. When this bit is reset, the Layer 4 Source Port number field is enabled for perfect matching. This bit is valid and applicable only when the L4SPM0 bit is set high. */
    vuint32_t L4DPM7:1;                /* Layer 4 Destination Port Match Enable When this bit is set, the Layer 4 Destination Port number field is enabled for matching. When this bit is reset, the MAC ignores the Layer 4 Destination Port number field for matching. */
    vuint32_t L4DPIM7:1;               /* Layer 4 Destination Port Inverse Match Enable When this bit is set, the Layer 4 Destination Port number field is enabled for inverse matching. When this bit is reset, the Layer 4 Destination Port number field is enabled for perfect matching. This bit is valid and applicable only when the L4DPM0 bit is set high. */
    vuint32_t _unused_22:2;            /* Reserved. */
    vuint32_t DMCHN7:3;                /* DMA Channel Number When DMCHEN is set high, this field selects the DMA Channel number to which the packet passed by this filter is routed. The width of this field depends on the number of the DMA channels present in your configuration. */
    vuint32_t _unused_27:1;            /* Reserved. */
    vuint32_t DMCHEN7:1;               /* DMA Channel Select Enable When set, this bit enables the selection of the DMA channel number for the packet that is passed by this L3_L4 filter. The DMA channel is indicated by the DMCHN bits. When this bit is reset, the DMA channel is not decided by this filter. */
    vuint32_t _unused_29:3;            /* Reserved. */
  } B;
} GMAC_MAC_L3_L4_CONTROL7_tag;

typedef union GMAC_MAC_LAYER4_ADDRESS7_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L4SP7:16;                /* Layer 4 Source Port Number Field When the L4PEN0 bit is reset and the L4SPM0 bit is set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with the TCP Source Port Number field in the IPv4 or IPv6 packets. When the L4PEN0 and L4SPM0 bits are set in MAC_L3_L4_Control0 register, this field contains the value to be matched with the UDP Source Port Number field in the IPv4 or IPv6 packets. */
    vuint32_t L4DP7:16;                /* Layer 4 Destination Port Number Field When the L4PEN0 bit is reset and the L4DPM0 bit is set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with the TCP Destination Port Number field in the IPv4 or IPv6 packets. When the L4PEN0 and L4DPM0 bits are set in MAC_L3_L4_Control0 register, this field contains the value to be matched with the UDP Destination Port Number field in the IPv4 or IPv6 packets. */
  } B;
} GMAC_MAC_LAYER4_ADDRESS7_tag;

typedef union GMAC_MAC_LAYER3_ADDR0_REG7_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A07:32;                /* Layer 3 Address 0 Field When the L3PEN0 and L3SAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[31:0] of the IP Source Address field in the IPv6 packets. When the L3PEN0 and L3DAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[31:0] of the IP Destination Address field in the IPv6 packets. When the L3PEN0 bit is reset and the L3SAM0 bit is set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with the IP Source Address field in the IPv4 packets. */
  } B;
} GMAC_MAC_LAYER3_ADDR0_REG7_tag;

typedef union GMAC_MAC_LAYER3_ADDR1_REG7_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A17:32;                /* Layer 3 Address 1 Field When the L3PEN0 and L3SAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[63:32] of the IP Source Address field in the IPv6 packets. When the L3PEN0 and L3DAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[63:32] of the IP Destination Address field in the IPv6 packets. When the L3PEN0 bit is reset and the L3SAM0 bit is set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with the IP Destination Address field in the IPv4 packets. */
  } B;
} GMAC_MAC_LAYER3_ADDR1_REG7_tag;

typedef union GMAC_MAC_LAYER3_ADDR2_REG7_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A27:32;                /* Layer 3 Address 2 Field When the L3PEN0 and L3SAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[95:64] of the IP Source Address field in the IPv6 packets. When the L3PEN0 and L3DAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[95:64] of the IP Destination Address field in the IPv6 packets. When the L3PEN0 bit is reset in the MAC_L3_L4_Control0 register, this field is not used. */
  } B;
} GMAC_MAC_LAYER3_ADDR2_REG7_tag;

typedef union GMAC_MAC_LAYER3_ADDR3_REG7_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A37:32;                /* Layer 3 Address 3 Field When the L3PEN0 and L3SAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[127:96] of the IP Source Address field in the IPv6 packets. When the L3PEN0 and L3DAM0 bits are set in the MAC_L3_L4_Control0 register, this field contains the value to be matched with Bits[127:96] of the IP Destination Address field in the IPv6 packets. When the L3PEN0 bit is reset in the MAC_L3_L4_Control0 register, this field is not used. */
  } B;
} GMAC_MAC_LAYER3_ADDR3_REG7_tag;

typedef union GMAC_MAC_TIMESTAMP_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TSENA:1;                 /* Enable Timestamp When this bit is set, the timestamp is added for Transmit and Receive packets. When disabled, timestamp is not added for transmit and receive packets and the Timestamp Generator is also suspended. You need to initialize the Timestamp (system time) after enabling this mode. On the Receive side, the MAC processes the IEEE 1588 packets only if this bit is set. */
    vuint32_t TSCFUPDT:1;              /* Fine or Coarse Timestamp Update When this bit is set, the Fine method is used to update system timestamp. When this bit is reset, Coarse method is used to update the system timestamp. */
    vuint32_t TSINIT:1;                /* Initialize Timestamp When this bit is set, the system time is initialized (overwritten) with the value specified in the MAC_System_Time_Seconds_Update and MAC_System_Time_Nanoseconds_Update registers. This bit should be zero before it is updated. This bit is reset when the initialization is complete. The Timestamp Higher Word register (if enabled during core configuration) can only be initialized. When Media Clock Generation and Recovery is configured (DWC_EQOS_FLEXI_PPS_OUT_EN) and enabled MAC_Presn_Time_Updt should also be updated before setting this field. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t TSUPDT:1;                /* Update Timestamp When this bit is set, the system time is updated (added or subtracted) with the value specified in MAC_System_Time_Seconds_Update and MAC_System_Time_Nanoseconds_Update registers. This bit should be zero before updating it. This bit is reset when the update is complete in hardware. The Timestamp Higher Word register (if enabled during core configuration) is not updated. When Media Clock Generation and Recovery is configured (DWC_EQOS_FLEXI_PPS_OUT_EN) and enabled MAC_Presn_Time_Updt should also be updated before setting this field. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t _unused_4:1;             /* Reserved. */
    vuint32_t TSADDREG:1;              /* Update Addend Register When this bit is set, the content of the Timestamp Addend register is updated in the PTP block for fine correction. This bit is cleared when the update is complete. This bit should be zero before it is set. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t PTGE:1;                  /* Presentation Time Generation Enable When this bit is set the Presentation Time generation will be enabled. */
    vuint32_t _unused_7:1;             /* Reserved. */
    vuint32_t TSENALL:1;               /* Enable Timestamp for All Packets When this bit is set, the timestamp snapshot is enabled for all packets received by the MAC. */
    vuint32_t TSCTRLSSR:1;             /* Timestamp Digital or Binary Rollover Control When this bit is set, the Timestamp Low register rolls over after 0x3B9A_C9FF value (that is, 1 nanosecond accuracy) and increments the timestamp (High) seconds. When this bit is reset, the rollover value of sub-second register is 0x7FFF_FFFF. The sub-second increment must be programmed correctly depending on the PTP reference clock frequency and the value of this bit. */
    vuint32_t TSVER2ENA:1;             /* Enable PTP Packet Processing for Version 2 Format When this bit is set, the IEEE 1588 version 2 format is used to process the PTP packets. When this bit is reset, the IEEE 1588 version 1 format is used to process the PTP packets. The IEEE 1588 formats are described in 'PTP Processing and Control'. */
    vuint32_t TSIPENA:1;               /* Enable Processing of PTP over Ethernet Packets When this bit is set, the MAC receiver processes the PTP packets encapsulated directly in the Ethernet packets. When this bit is reset, the MAC ignores the PTP over Ethernet packets. */
    vuint32_t TSIPV6ENA:1;             /* Enable Processing of PTP Packets Sent over IPv6-UDP When this bit is set, the MAC receiver processes the PTP packets encapsulated in IPv6-UDP packets. When this bit is clear, the MAC ignores the PTP transported over IPv6-UDP packets. */
    vuint32_t TSIPV4ENA:1;             /* Enable Processing of PTP Packets Sent over IPv4-UDP When this bit is set, the MAC receiver processes the PTP packets encapsulated in IPv4-UDP packets. When this bit is reset, the MAC ignores the PTP transported over IPv4-UDP packets. This bit is set by default. */
    vuint32_t TSEVNTENA:1;             /* Enable Timestamp Snapshot for Event Messages When this bit is set, the timestamp snapshot is taken only for event messages (SYNC, Delay_Req, Pdelay_Req, or Pdelay_Resp). When this bit is reset, the snapshot is taken for all messages except Announce, Management, and Signaling. For more information about the timestamp snapshots, see Timestamp Snapshot Dependency on Register Bits Table. */
    vuint32_t TSMSTRENA:1;             /* Enable Snapshot for Messages Relevant to Master When this bit is set, the snapshot is taken only for the messages that are relevant to the master node. Otherwise, the snapshot is taken for the messages relevant to the slave node. */
    vuint32_t SNAPTYPSEL:2;            /* Select PTP packets for Taking Snapshots These bits, along with Bits 15 and 14, decide the set of PTP packet types for which snapshot needs to be taken. The encoding is given in Timestamp Snapshot Dependency on Register Bits Table. */
    vuint32_t TSENMACADDR:1;           /* Enable MAC Address for PTP Packet Filtering When this bit is set, the DA MAC address (that matches any MAC Address register) is used to filter the PTP packets when PTP is directly sent over Ethernet. When this bit is set, received PTP packets with DA containing a special multicast or unicast address that matches the one programmed in MAC address registers are considered for processing as indicated below, when PTP is directly sent over Ethernet. For normal time stamping operation, MAC address registers 0 to 31 is considered for unicast destination address matching. For PTP offload, only MAC address register 0 is considered for unicast destination address matching. */
    vuint32_t CSC:1;                   /* Enable checksum correction during OST for PTP over UDP/IPv4 packets When this bit is set, the last two bytes of PTP message sent over UDP/IPv4 is updated to keep the UDP checksum correct, for changes made to origin timestamp and/or correction field as part of one step timestamp operation. The application shall form the packet with these two dummy bytes. When reset, no updates are done to keep the UDP checksum correct. The application shall form the packet with UDP checksum set to 0. */
    vuint32_t ESTI:1;                  /* External System Time Input When this bit is set, the MAC uses the external 64-bit reference System Time input for the following: - To take the timestamp provided as status - To insert the timestamp in transmit PTP packets when One-step Timestamp or Timestamp Offload feature is enabled. When this bit is reset, the MAC uses the internal reference System Time. */
    vuint32_t _unused_21:3;            /* Reserved. */
    vuint32_t TXTSSTSM:1;              /* Transmit Timestamp Status Mode When this bit is set, the MAC overwrites the earlier transmit timestamp status even if it is not read by the software. The MAC indicates this by setting the TXTSSMIS bit of the MAC_Tx_Timestamp_Status_Nanoseconds register. When this bit is reset, the MAC ignores the timestamp status of current packet if the timestamp status of previous packet is not read by the software. The MAC indicates this by setting the TXTSSMIS bit of the MAC_Tx_Timestamp_Status_Nanoseconds register. */
    vuint32_t _unused_25:3;            /* Reserved. */
    vuint32_t AV8021ASMEN:1;           /* AV 802.1AS Mode Enable When this bit is set, the MAC processes only untagged PTP over Ethernet packets for providing PTP status and capturing timestamp snapshots, that is, IEEE 802.1AS mode of operation. When PTP offload feature is enabled, for the purpose of PTP offload, the transport specific field in the PTP header is generated and checked based on the value of this bit. */
    vuint32_t _unused_29:3;            /* Reserved. */
  } B;
} GMAC_MAC_TIMESTAMP_CONTROL_tag;

typedef union GMAC_MAC_SUB_SECOND_INCREMENT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;             /* Reserved. */
    vuint32_t SNSINC:8;                /* Sub-nanosecond Increment Value This field contains the sub-nanosecond increment value, represented in nanoseconds multiplied by 2^8. This value is accumulated with the sub-nanoseconds field of the subsecond register. For example, when TSCTRLSSR field in the MAC_Timestamp_Control register is set. and if the required increment is 5.3ns, then SSINC should be 0x05 and SNSINC should be 0x4C. */
    vuint32_t SSINC:8;                 /* Sub-second Increment Value The value programmed in this field is accumulated every clock cycle (of clk_ptp_i) with the contents of the sub-second register. For example, when the PTP clock is 50 MHz (period is 20 ns), you should program 20 (0x14) when the System Time Nanoseconds register has an accuracy of 1 ns [Bit 9 (TSCTRLSSR) is set in MAC_Timestamp_Control]. When TSCTRLSSR is clear, the Nanoseconds register has a resolution of ~0.465 ns. In this case, you should program a value of 43 (0x2B) which is derived by 20 ns/0.465. */
    vuint32_t _unused_24:8;            /* Reserved. */
  } B;
} GMAC_MAC_SUB_SECOND_INCREMENT_tag;

typedef union GMAC_MAC_SYSTEM_TIME_SECONDS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TSS:32;                  /* Timestamp Second The value in this field indicates the current value in seconds of the System Time maintained by the MAC. */
  } B;
} GMAC_MAC_SYSTEM_TIME_SECONDS_tag;

typedef union GMAC_MAC_SYSTEM_TIME_NANOSECONDS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TSSS:31;                 /* Timestamp Sub Seconds The value in this field has the sub-second representation of time, with an accuracy of 0.46 ns. When Bit 9 is set in MAC_Timestamp_Control, each bit represents 1 ns. The maximum value is 0x3B9A_C9FF after which it rolls-over to zero. */
    vuint32_t _unused_31:1;            /* Reserved. */
  } B;
} GMAC_MAC_SYSTEM_TIME_NANOSECONDS_tag;

typedef union GMAC_MAC_SYSTEM_TIME_SECONDS_UPDATE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TSS:32;                  /* Timestamp Seconds The value in this field is the seconds part of the update. When ADDSUB is reset, this field must be programmed with the seconds part of the update value. When ADDSUB is set, this field must be programmed with the complement of the seconds part of the update value. For example, if 2.000000001 seconds need to be subtracted from the system time, the TSS field in the MAC_Timestamp_Seconds_Update register must be 0xFFFF_FFFE (that is, 2^32 - 2). */
  } B;
} GMAC_MAC_SYSTEM_TIME_SECONDS_UPDATE_tag;

typedef union GMAC_MAC_SYSTEM_TIME_NANOSECONDS_UPDATE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TSSS:31;                 /* Timestamp Sub Seconds The value in this field is the sub-seconds part of the update. When ADDSUB is reset, this field must be programmed with the sub-seconds part of the update value, with an accuracy based on the TSCTRLSSR bit of the MAC_Timestamp_Control register. When ADDSUB is set, this field must be programmed with the complement of the sub-seconds part of the update value as described below. When TSCTRLSSR bit in MAC_Timestamp_Control is set, the programmed value must be 10^9 - <sub-second value>. When TSCTRLSSR bit in MAC_Timestamp_Control is reset, the programmed value must be 2^31 - <sub-second_value>. When the TSCTRLSSR bit is reset in the MAC_Timestamp_Control register, each bit represents an accuracy of 0.46 ns. When the TSCTRLSSR bit is set in the MAC_Timestamp_Control register, each bit represents 1 ns and the programmed value should not exceed 0x3B9A_C9FF. For example, if 2.000000001 seconds need to be subtracted from the system time, then the TSSS field in the MAC_Timestamp_Nanoseconds_Update register must be 0x7FFF_FFFF (that is, 2^31 - 1), when TSCTRLSSR bit in MAC_Timestamp_Control is reset and 0x3B9A_C9FF (that is, 10^9 - 1), when TSCTRLSSR bit in MAC_Timestamp_Control is set. */
    vuint32_t ADDSUB:1;                /* Add or Subtract Time When this bit is set, the time value is subtracted with the contents of the update register. When this bit is reset, the time value is added with the contents of the update register. */
  } B;
} GMAC_MAC_SYSTEM_TIME_NANOSECONDS_UPDATE_tag;

typedef union GMAC_MAC_TIMESTAMP_ADDEND_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TSAR:32;                 /* Timestamp Addend Register This field indicates the 32-bit time value to be added to the Accumulator register to achieve time synchronization. */
  } B;
} GMAC_MAC_TIMESTAMP_ADDEND_tag;

typedef union GMAC_MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TSHWR:16;                /* Timestamp Higher Word Register This field contains the most-significant 16-bits of timestamp seconds value. This register is optional. You can add this register by selecting the Add IEEE 1588 Higher Word Register option. This register is directly written to initialize the value and it is incremented when there is an overflow from 32-bits of the System Time Seconds register. Access restriction applies. Updated based on the event. Setting 1 sets. Setting 0 clears. */
    vuint32_t _unused_16:16;           /* Reserved. */
  } B;
} GMAC_MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS_tag;

typedef union GMAC_MAC_TIMESTAMP_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TSSOVF:1;                /* Timestamp Seconds Overflow When this bit is set, it indicates that the seconds value of the timestamp (when supporting version 2 format) has overflowed beyond 32'hFFFF_FFFF. Access restriction applies. Clears on read (or this bit is written to 1 when RCWE bit in MAC_CSR_SW_Ctrl register is set). Self-set to 1 on internal event. */
    vuint32_t TSTARGT0:1;              /* Timestamp Target Time Reached When set, this bit indicates that the value of system time is greater than or equal to the value specified in the MAC_PPS0_Target_Time_Seconds and MAC_PPS0_Target_Time_Nanoseconds registers. Access restriction applies. Clears on read (or this bit is written to 1 when RCWE bit in MAC_CSR_SW_Ctrl register is set). Self-set to 1 on internal event. */
    vuint32_t AUXTSTRIG:1;             /* Auxiliary Timestamp Trigger Snapshot This bit is set high when the auxiliary snapshot is written to the FIFO. This bit is valid only if the Add IEEE 1588 Auxiliary Snapshot option is selected. Access restriction applies. Clears on read (or this bit is written to 1 when RCWE bit in MAC_CSR_SW_Ctrl register is set). Self-set to 1 on internal event. */
    vuint32_t TSTRGTERR0:1;            /* Timestamp Target Time Error This bit is set when the latest target time programmed in the MAC_PPS0_Target_Time_Seconds and MAC_PPS0_Target_Time_Nanoseconds registers elapses. This bit is cleared when the application reads this bit. Access restriction applies. Clears on read (or this bit is written to 1 when RCWE bit in MAC_CSR_SW_Ctrl register is set). Self-set to 1 on internal event. */
    vuint32_t TSTARGT1:1;              /* Timestamp Target Time Reached for Target Time PPS1 When set, this bit indicates that the value of system time is greater than or equal to the value specified in the MAC_PPS1_Target_Time_Seconds and MAC_PPS1_Target_Time_Nanoseconds registers. Access restriction applies. Clears on read (or this bit is written to 1 when RCWE bit in MAC_CSR_SW_Ctrl register is set). Self-set to 1 on internal event. */
    vuint32_t TSTRGTERR1:1;            /* Timestamp Target Time Error This bit is set when the latest target time programmed in the MAC_PPS1_Target_Time_Seconds and MAC_PPS1_Target_Time_Nanoseconds registers elapses. This bit is cleared when the application reads this bit. Access restriction applies. Clears on read (or this bit is written to 1 when RCWE bit in MAC_CSR_SW_Ctrl register is set). Self-set to 1 on internal event. */
    vuint32_t TSTARGT2:1;              /* Timestamp Target Time Reached for Target Time PPS2 When set, this bit indicates that the value of system time is greater than or equal to the value specified in the MAC_PPS2_Target_Time_Seconds and MAC_PPS2_Target_Time_Nanoseconds registers. Access restriction applies. Clears on read (or this bit is written to 1 when RCWE bit in MAC_CSR_SW_Ctrl register is set). Self-set to 1 on internal event. */
    vuint32_t TSTRGTERR2:1;            /* Timestamp Target Time Error This bit is set when the latest target time programmed in the MAC_PPS2_Target_Time_Seconds and MAC_PPS2_Target_Time_Nanoseconds registers elapses. This bit is cleared when the application reads this bit. Access restriction applies. Clears on read (or this bit is written to 1 when RCWE bit in MAC_CSR_SW_Ctrl register is set). Self-set to 1 on internal event. */
    vuint32_t TSTARGT3:1;              /* Timestamp Target Time Reached for Target Time PPS3 When this bit is set, it indicates that the value of system time is greater than or equal to the value specified in the MAC_PPS3_Target_Time_Seconds and MAC_PPS3_Target_Time_Nanoseconds registers. Access restriction applies. Clears on read (or this bit is written to 1 when RCWE bit in MAC_CSR_SW_Ctrl register is set). Self-set to 1 on internal event. */
    vuint32_t TSTRGTERR3:1;            /* Timestamp Target Time Error This bit is set when the latest target time programmed in the MAC_PPS3_Target_Time_Seconds and MAC_PPS3_Target_Time_Nanoseconds registers elapses. This bit is cleared when the application reads this bit. Access restriction applies. Clears on read (or this bit is written to 1 when RCWE bit in MAC_CSR_SW_Ctrl register is set). Self-set to 1 on internal event. */
    vuint32_t _unused_10:5;            /* Reserved. */
    vuint32_t TXTSSIS:1;               /* Tx Timestamp Status Interrupt Status In non-EQOS_CORE configurations when drop transmit status is enabled in MTL, this bit is set when the captured transmit timestamp is updated in the MAC_Tx_Timestamp_Status_Nanoseconds and MAC_Tx_Timestamp_Status_Seconds registers. When PTP offload feature is enabled, this bit is set when the captured transmit timestamp is updated in the MAC_Tx_Timestamp_Status_Nanoseconds and MAC_Tx_Timestamp_Status_Seconds registers, for PTO generated Delay Request and Pdelay request packets. This bit is cleared when the MAC_Tx_Timestamp_Status_Seconds register is read (or write to MAC_Tx_Timestamp_Status_Seconds register when RCWE bit of MAC_CSR_SW_Ctrl register is set). */
    vuint32_t ATSSTN:4;                /* Auxiliary Timestamp Snapshot Trigger Identifier These bits identify the Auxiliary trigger inputs for which the timestamp available in the Auxiliary Snapshot Register is applicable. When more than one bit is set at the same time, it means that corresponding auxiliary triggers were sampled at the same clock. These bits are applicable only if the number of Auxiliary snapshots is more than one. One bit is assigned for each trigger as shown in the following list: - Bit 16: Auxiliary trigger 0 - Bit 17: Auxiliary trigger 1 - Bit 18: Auxiliary trigger 2 - Bit 19: Auxiliary trigger 3 The software can read this register to find the triggers that are set when the timestamp is taken. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t _unused_20:4;            /* Reserved. */
    vuint32_t ATSSTM:1;                /* Auxiliary Timestamp Snapshot Trigger Missed This bit is set when the Auxiliary timestamp snapshot FIFO is full and external trigger was set. This indicates that the latest snapshot is not stored in the FIFO. This bit is valid only if the Add IEEE 1588 Auxiliary Snapshot option is selected. */
    vuint32_t ATSNS:5;                 /* Number of Auxiliary Timestamp Snapshots This field indicates the number of Snapshots available in the FIFO. A value equal to the selected depth of FIFO (4, 8, or 16) indicates that the Auxiliary Snapshot FIFO is full. These bits are cleared (to 00000) when the Auxiliary snapshot FIFO clear bit is set. This bit is valid only if the Add IEEE 1588 Auxiliary Snapshot option is selected. */
    vuint32_t _unused_30:2;            /* Reserved. */
  } B;
} GMAC_MAC_TIMESTAMP_STATUS_tag;

typedef union GMAC_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXTSSLO:31;              /* Transmit Timestamp Status Low This field contains the 31 bits of the Nanoseconds field of the Transmit packet's captured timestamp. */
    vuint32_t TXTSSMIS:1;              /* Transmit Timestamp Status Missed When this bit is set, it indicates one of the following: - The timestamp of the current packet is ignored if TXTSSTSM bit of the MAC_Timestamp_Control register is reset - The timestamp of the previous packet is overwritten with timestamp of the current packet if TXTSSTSM bit of the MAC_Timestamp_Control register is set. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
  } B;
} GMAC_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS_tag;

typedef union GMAC_MAC_TX_TIMESTAMP_STATUS_SECONDS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXTSSHI:32;              /* Transmit Timestamp Status High This field contains the lower 32 bits of the Seconds field of Transmit packet's captured timestamp. */
  } B;
} GMAC_MAC_TX_TIMESTAMP_STATUS_SECONDS_tag;

typedef union GMAC_MAC_AUXILIARY_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ATSFC:1;                 /* Auxiliary Snapshot FIFO Clear When set, this bit resets the pointers of the Auxiliary Snapshot FIFO. This bit is cleared when the pointers are reset and the FIFO is empty. When this bit is high, the auxiliary snapshots are stored in the FIFO. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t _unused_1:3;             /* Reserved. */
    vuint32_t ATSEN0:1;                /* Auxiliary Snapshot 0 Enable This bit controls the capturing of Auxiliary Snapshot Trigger 0. When this bit is set, the auxiliary snapshot of the event on ptp_aux_trig_i[0] input is enabled. When this bit is reset, the events on this input are ignored. */
    vuint32_t ATSEN1:1;                /* Auxiliary Snapshot 1 Enable This bit controls the capturing of Auxiliary Snapshot Trigger 1. When this bit is set, the auxiliary snapshot of the event on ptp_aux_trig_i[1] input is enabled. When this bit is reset, the events on this input are ignored. */
    vuint32_t ATSEN2:1;                /* Auxiliary Snapshot 2 Enable This bit controls the capturing of Auxiliary Snapshot Trigger 2. When this bit is set, the auxiliary snapshot of the event on ptp_aux_trig_i[2] input is enabled. When this bit is reset, the events on this input are ignored. */
    vuint32_t ATSEN3:1;                /* Auxiliary Snapshot 3 Enable This bit controls the capturing of Auxiliary Snapshot Trigger 3. When this bit is set, the auxiliary snapshot of the event on ptp_aux_trig_i[3] input is enabled. When this bit is reset, the events on this input are ignored. */
    vuint32_t _unused_8:24;            /* Reserved. */
  } B;
} GMAC_MAC_AUXILIARY_CONTROL_tag;

typedef union GMAC_MAC_AUXILIARY_TIMESTAMP_NANOSECONDS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t AUXTSLO:31;              /* Auxiliary Timestamp Contains the lower 31 bits (nanoseconds field) of the auxiliary timestamp. */
    vuint32_t _unused_31:1;            /* Reserved. */
  } B;
} GMAC_MAC_AUXILIARY_TIMESTAMP_NANOSECONDS_tag;

typedef union GMAC_MAC_AUXILIARY_TIMESTAMP_SECONDS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t AUXTSHI:32;              /* Auxiliary Timestamp Contains the lower 32 bits of the Seconds field of the auxiliary timestamp. */
  } B;
} GMAC_MAC_AUXILIARY_TIMESTAMP_SECONDS_tag;

typedef union GMAC_MAC_TIMESTAMP_INGRESS_ASYM_CORR_union_tag {
  vuint32_t R;
  struct {
    vuint32_t OSTIAC:32;               /* One-Step Timestamp Ingress Asymmetry Correction This field contains the ingress path asymmetry value to be added to correctionField of Pdelay_Resp PTP packet. The programmed value should be in units of nanoseconds and multiplied by 2^16. For example, 2.5 ns is represented as 0x00028000. The value can also be negative, which is represented in 2's complement form with bit 31 representing the sign bit. */
  } B;
} GMAC_MAC_TIMESTAMP_INGRESS_ASYM_CORR_tag;

typedef union GMAC_MAC_TIMESTAMP_EGRESS_ASYM_CORR_union_tag {
  vuint32_t R;
  struct {
    vuint32_t OSTEAC:32;               /* One-Step Timestamp Egress Asymmetry Correction This field contains the egress path asymmetry value to be subtracted from correctionField of Pdelay_Resp PTP packet. The programmed value must be the negated value in units of nanoseconds multiplied by 2^16. For example, if the required correction is +2.5 ns, the programmed value must be 0xFFFD_8000, which is the 2's complement of 0x0002_8000(2.5 * 216). Similarly, if the required correction is -3.3 ns, the programmed value is 0x0003_4CCC (3.3 * 216). */
  } B;
} GMAC_MAC_TIMESTAMP_EGRESS_ASYM_CORR_tag;

typedef union GMAC_MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TSIC:32;                 /* Timestamp Ingress Correction This field contains the ingress path correction value as defined by the Ingress Correction expression. */
  } B;
} GMAC_MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND_tag;

typedef union GMAC_MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TSEC:32;                 /* Timestamp Egress Correction This field contains the nanoseconds part of the egress path correction value as defined by the Egress Correction expression. */
  } B;
} GMAC_MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND_tag;

typedef union GMAC_MAC_TIMESTAMP_INGRESS_CORR_SUBNANOSEC_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;             /* Reserved. */
    vuint32_t TSICSNS:8;               /* Timestamp Ingress Correction, sub-nanoseconds This field contains the sub-nanoseconds part of the ingress path correction value as defined by the "Ingress Correction" expression. */
    vuint32_t _unused_16:16;           /* Reserved. */
  } B;
} GMAC_MAC_TIMESTAMP_INGRESS_CORR_SUBNANOSEC_tag;

typedef union GMAC_MAC_TIMESTAMP_EGRESS_CORR_SUBNANOSEC_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;             /* Reserved. */
    vuint32_t TSECSNS:8;               /* Timestamp Egress Correction, sub-nanoseconds This field contains the sub-nanoseconds part of the egress path correction value as defined by the "Egress Correction" expression. */
    vuint32_t _unused_16:16;           /* Reserved. */
  } B;
} GMAC_MAC_TIMESTAMP_EGRESS_CORR_SUBNANOSEC_tag;

typedef union GMAC_MAC_TIMESTAMP_INGRESS_LATENCY_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;             /* Reserved. */
    vuint32_t ITLSNS:8;                /* Ingress Timestamp Latency, in nanoseconds This register holds the average latency in nanoseconds between the input ports (phy_rxd_i) of MAC and the actual point (GMII/MII) where the ingress timestamp is taken. Ingress correction value is computed as described in the section 7.1.2.4.1 of QoS Databook. */
    vuint32_t ITLNS:12;                /* Ingress Timestamp Latency, in sub-nanoseconds This register holds the average latency in sub-nanoseconds between the input ports (phy_rxd_i) of MAC and the actual point (GMII/MII) where the ingress timestamp is taken. Ingress correction value is computed as described in the section 7.1.2.4.1 of QoS Databook. */
    vuint32_t _unused_28:4;            /* Reserved. */
  } B;
} GMAC_MAC_TIMESTAMP_INGRESS_LATENCY_tag;

typedef union GMAC_MAC_TIMESTAMP_EGRESS_LATENCY_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;             /* Reserved. */
    vuint32_t ETLSNS:8;                /* Egress Timestamp Latency, in sub-nanoseconds This register holds the average latency in sub-nanoseconds between the actual point (GMII/MII) where the egress timestamp is taken and the output ports (phy_txd_o) of the MAC. Ingress correction value is computed as described in the section 7.1.2.4.2 of QoS Databook. */
    vuint32_t ETLNS:12;                /* Egress Timestamp Latency, in nanoseconds This register holds the average latency in nanoseconds between the actual point (GMII/MII) where the egress timestamp is taken and the output ports (phy_txd_o) of the MAC. Ingress correction value is computed as described in the section 7.1.2.4.2 of QoS Databook. */
    vuint32_t _unused_28:4;            /* Reserved. */
  } B;
} GMAC_MAC_TIMESTAMP_EGRESS_LATENCY_tag;

typedef union GMAC_MAC_PPS_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PPSCTRL_PPSCMD:4;        /* PPS Output Frequency Control This field controls the frequency of the PPS0 output (ptp_pps_o[0]) signal. The default value of PPSCTRL is 0000, and the PPS output is 1 pulse (of width clk_ptp_i) every second. For other values of PPSCTRL, the PPS output becomes a generated clock of following frequencies: - 0001: The binary rollover is 2 Hz, and the digital rollover is 1 Hz. - 0010: The binary rollover is 4 Hz, and the digital rollover is 2 Hz. - 0011: The binary rollover is 8 Hz, and the digital rollover is 4 Hz. - 0100: The binary rollover is 16 Hz, and the digital rollover is 8 Hz. - .. - 1111: The binary rollover is 32.768 kHz and the digital rollover is 16.384 kHz. In the binary rollover mode, the PPS output (ptp_pps_o) has a duty cycle of 50 percent with these frequencies. In the digital rollover mode, the PPS output frequency is an average number. The actual clock is of different frequency that gets synchronized every second. For example: - When PPSCTRL = 0001, the PPS (1 Hz) has a low period of 537 ms and a high period of 463 ms - When PPSCTRL = 0010, the PPS (2 Hz) is a sequence of One clock of 50 percent duty cycle and 537 ms period Second clock of 463 ms period (268 ms low and 195 ms high) - When PPSCTRL = 0011, the PPS (4 Hz) is a sequence of Three clocks of 50 percent duty cycle and 268 ms period Fourth clock of 195 ms period (134 ms low and 61 ms high) This behavior is because of the non-linear toggling of bits in the digital rollover mode in the MAC_System_Time_Nanoseconds register. or Flexible PPS Output (ptp_pps_o[0]) Control Programming these bits with a non-zero value instructs the MAC to initiate an event. When the command is transferred or synchronized to the PTP clock domain, these bits get cleared automatically. The software should ensure that these bits are programmed only when they are 'all-zero'. The following list describes the values of PPSCMD0: - 0000: No Command - 0001: START Single Pulse This command generates single pulse rising at the start point defined in MAC_PPS0_Target_Time_Seconds and MAC_PPS0_Target_Time_Nanoseconds register and of a duration defined in the PPS0 Width Register. - 0010: START Pulse Train This command generates the train of pulses rising at the start point defined in the Target Time Registers and of a duration defined in the PPS0 Width Register and repeated at interval defined in the PPS Interval Register. By default, the PPS pulse train is free-running unless stopped by the 'Stop Pulse train at time' or 'Stop Pulse Train immediately' commands. - 0011: Cancel START This command cancels the START Single Pulse and START Pulse Train commands if the system time has not crossed the programmed start time. - 0100: STOP Pulse train at time This command stops the train of pulses initiated by the START Pulse Train command (PPSCMD = 0010) after the time programmed in the Target Time registers elapses. - 0101: STOP Pulse Train immediately This command immediately stops the train of pulses initiated by the START Pulse Train command (PPSCMD = 0010). - 110: Cancel STOP Pulse train This command cancels the STOP pulse train at time command if the programmed stop time has not elapsed. The PPS pulse train becomes free-running on the successful execution of this command. - 0111-1111: Reserved or Presentation Time Control If MCGREN0 is set then these bits are treated as Presentation time control bits. The following list describes the values of PPSCMD0: - 0000: No Operation related to MCGR will be carried out. If set to this value in the mid of clock recovery or generation all the processing inputs will be flushed. - 0001: Capture the Presentation time at rising edge of mcg_pst_trig_i[0] into the MAC_PPS0_Target_Time_Seconds register - 0010: Capture the Presentation time at falling edge of mcg_pst_trig_i[0] into the MAC_PPS0_Target_Time_Seconds register - 0011: Capture the Presentation time at both edges of mcg_pst_trig_i[0] into the MAC_PPS0_Target_Time_Seconds register - 0100-1000: Reserved - 1001: Toggle output on compare - 1010: Pulse output low on compare for one PTP-clock cycle - 1011: Pulse output high on compare for one PTP-clock cycle - 1100-1111: Reserved */
    vuint32_t PPSEN0:1;                /* Flexible PPS Output Mode Enable When this bit is set, Bits[3:0] function as PPSCMD. When this bit is reset, Bits[3:0] function as PPSCTRL (Fixed PPS mode). */
    vuint32_t TRGTMODSEL0:2;           /* Target Time Register Mode for PPS0 Output This field indicates the Target Time registers (MAC_PPS0_Target_Time_Seconds and MAC_PPS0_Target_Time_Nanoseconds) mode for PPS0 output signal: */
    vuint32_t MCGREN0:1;               /* MCGR Mode Enable for PPS0 Output This field enables the 0th PPS instance to operate in PPS or MCGR mode. When set it operates in MCGR mode and on reset it operates in PPS mode. */
    vuint32_t PPSCMD1:4;               /* Flexible PPS1 Output Control This field controls the flexible PPS1 output (ptp_pps_o[1]) signal. This field is similar to the PPSCMD0 field. If MCGREN1 is set, then PPSCMD1 indicated by these 4 bits [11:8] are taken as Presentation Time Control bits for media clock generation and recovery for comparator instance 1. This field is similar to the PPSCMD0 Presentation Time Control bits. If MCGREN1 is not set then only 3 bits from [10:8] is used as PPSCMD1 and the 4th bit is to be set as 0. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t _unused_12:1;            /* Reserved. */
    vuint32_t TRGTMODSEL1:2;           /* Target Time Register Mode for PPS1 Output This field indicates the Target Time registers (MAC_PPS1_Target_Time_Seconds and MAC_PPS1_Target_Time_Nanoseconds) mode for PPS1 output signal. */
    vuint32_t MCGREN1:1;               /* MCGR Mode Enable for PPS1 Output This field enables the 1st PPS instance to operate in PPS or MCGR mode. When set it operates in MCGR mode and on reset it operates in PPS mode. */
    vuint32_t PPSCMD2:4;               /* Flexible PPS2 Output Control This field controls the flexible PPS2 output (ptp_pps_o[2]) signal. This field is similar to the PPSCMD0 field. If MCGREN2 is set, then PPSCMD2 indicated by these 4 bits [19:16] are taken as Presentation Time Control bits for media clock generation and recovery for comparator instance 2. This field is similar to the PPSCMD0 Presentation Time Control bits. If MCGREN2 is not set then only 3 bits from [18:16] is used as PPSCMD2 and the 4th bit is to be set as 0. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t _unused_20:1;            /* Reserved. */
    vuint32_t TRGTMODSEL2:2;           /* Target Time Register Mode for PPS2 Output This field indicates the Target Time registers (MAC_PPS2_Target_Time_Seconds and MAC_PPS2_Target_Time_Nanoseconds) mode for PPS2 output signal. */
    vuint32_t MCGREN2:1;               /* MCGR Mode Enable for PPS2 Output This field enables the 2nd PPS instance to operate in PPS or MCGR mode. When set it operates in MCGR mode and on reset it operates in PPS mode. */
    vuint32_t PPSCMD3:4;               /* Flexible PPS3 Output Control This field controls the flexible PPS3 output (ptp_pps_o[3]) signal. This field is similar to the PPSCMD0[2:0] field. If MCGREN3 is set, then PPSCMD3 indicated by these 4 bits [27:24] are taken as Presentation Time Control bits for media clock generation and recovery for comparator instance 3. This field is similar to the PPSCMD0 Presentation Time Control bits. If MCGREN3 is not set then only 3 bits from [26:24] is used as PPSCMD3 and the 4th bit is to be set as 0. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t _unused_28:1;            /* Reserved. */
    vuint32_t TRGTMODSEL3:2;           /* Target Time Register Mode for PPS3 Output This field indicates the Target Time registers (MAC_PPS3_Target_Time_Seconds and MAC_PPS3_Target_Time_Nanoseconds) mode for PPS3 output signal. */
    vuint32_t MCGREN3:1;               /* MCGR Mode Enable for PPS3 Output This field enables the 3rd PPS instance to operate in PPS or MCGR mode. When set it operates in MCGR mode and on reset it operates in PPS mode. */
  } B;
} GMAC_MAC_PPS_CONTROL_tag;

typedef union GMAC_MAC_PPS0_TARGET_TIME_SECONDS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TSTRH0:32;               /* PPS Target Time Seconds Register This field stores the time in seconds. When the timestamp value matches or exceeds both Target Timestamp registers, the MAC starts or stops the PPS signal output and generates an interrupt (if enabled) based on Target Time mode selected for the corresponding PPS output in the MAC_PPS_Control register. If DWC_EQOS_FLEXI_PPS_OUT_EN is enabled in the configuration and PTGE field of MAC_Timestamp_Control Register is set with Presentation time control set in recovery mode, then these bits indicate the TPT being programmed by the application and in generation mode it indicates the CPT generated at the sampled trigger. */
  } B;
} GMAC_MAC_PPS0_TARGET_TIME_SECONDS_tag;

typedef union GMAC_MAC_PPS0_TARGET_TIME_NANOSECONDS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TTSL0:31;                /* Target Time Low for PPS Register This register stores the time in (signed) nanoseconds. When the value of the timestamp matches the value in both Target Timestamp registers, the MAC starts or stops the PPS signal output and generates an interrupt (if enabled) based on the TRGTMODSEL0 field (Bits [6:5]) in MAC_PPS_Control. When the TSCTRLSSR bit is reset in the MAC_Timestamp_Control register, this value should be (time in ns / 0.465). The actual start or stop time of the PPS signal output may have an error margin up to one unit of sub-second increment value. When the TSCTRLSSR bit is set in the MAC_Timestamp_Control register, this value should not exceed 0x3B9A_C9FF. The actual start or stop time of the PPS signal output may have an error margin up to one unit of sub-second increment value. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t TRGTBUSY0:1;             /* PPS Target Time Register Busy The MAC sets this bit when the PPSCMD0 field in the MAC_PPS_Control register is programmed to 010 or 011. Programming the PPSCMD0 field to 010 or 011 instructs the MAC to synchronize the Target Time Registers to the PTP clock domain. The MAC clears this bit after synchronizing the Target Time Registers to the PTP clock domain The application must not update the Target Time Registers when this bit is read as 1. Otherwise, the synchronization of the previous programmed time gets corrupted. */
  } B;
} GMAC_MAC_PPS0_TARGET_TIME_NANOSECONDS_tag;

typedef union GMAC_MAC_PPS0_INTERVAL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PPSINT0:32;              /* PPS Output Signal Interval These bits store the interval between the rising edges of PPS0 signal output. The interval is stored in terms of number of units of sub-second increment value. You need to program one value less than the required interval. For example, if the PTP reference clock is 50 MHz (period of 20 ns), and desired interval between the rising edges of PPS0 signal output is 100 ns (that is, 5 units of sub-second increment value), you should program value 4 (5-1) in this register. */
  } B;
} GMAC_MAC_PPS0_INTERVAL_tag;

typedef union GMAC_MAC_PPS0_WIDTH_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PPSWIDTH0:32;            /* PPS Output Signal Width These bits store the width between the rising edge and corresponding falling edge of PPS0 signal output. The width is stored in terms of number of units of sub-second increment value. You need to program one value less than the required interval. For example, if PTP reference clock is 50 MHz (period of 20 ns), and width between the rising and corresponding falling edges of PPS0 signal output is 80 ns (that is, four units of sub-second increment value), you should program value 3 (4-1) in this register. Note: The value programmed in this register must be lesser than the value programmed in MAC_PPS0_Interval. */
  } B;
} GMAC_MAC_PPS0_WIDTH_tag;

typedef union GMAC_MAC_PPS1_TARGET_TIME_SECONDS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TSTRH1:32;               /* PPS Target Time Seconds Register This field stores the time in seconds. When the timestamp value matches or exceeds both Target Timestamp registers, the MAC starts or stops the PPS signal output and generates an interrupt (if enabled) based on Target Time mode selected for the corresponding PPS output in the MAC_PPS_Control register. If DWC_EQOS_FLEXI_PPS_OUT_EN is enabled in the configuration and PTGE field of MAC_Timestamp_Control Register is set with Presentation time control set in recovery mode, then these bits indicate the TPT being programmed by the application and in generation mode it indicates the CPT generated at the sampled trigger. */
  } B;
} GMAC_MAC_PPS1_TARGET_TIME_SECONDS_tag;

typedef union GMAC_MAC_PPS1_TARGET_TIME_NANOSECONDS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TTSL1:31;                /* Target Time Low for PPS Register This register stores the time in (signed) nanoseconds. When the value of the timestamp matches the value in both Target Timestamp registers, the MAC starts or stops the PPS signal output and generates an interrupt (if enabled) based on the TRGTMODSEL0 field (Bits [6:5]) in MAC_PPS_Control. When the TSCTRLSSR bit is reset in the MAC_Timestamp_Control register, this value should be (time in ns / 0.465). The actual start or stop time of the PPS signal output may have an error margin up to one unit of sub-second increment value. When the TSCTRLSSR bit is set in the MAC_Timestamp_Control register, this value should not exceed 0x3B9A_C9FF. The actual start or stop time of the PPS signal output may have an error margin up to one unit of sub-second increment value. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t TRGTBUSY1:1;             /* PPS Target Time Register Busy The MAC sets this bit when the PPSCMD0 field in the MAC_PPS_Control register is programmed to 010 or 011. Programming the PPSCMD0 field to 010 or 011 instructs the MAC to synchronize the Target Time Registers to the PTP clock domain. The MAC clears this bit after synchronizing the Target Time Registers to the PTP clock domain The application must not update the Target Time Registers when this bit is read as 1. Otherwise, the synchronization of the previous programmed time gets corrupted. */
  } B;
} GMAC_MAC_PPS1_TARGET_TIME_NANOSECONDS_tag;

typedef union GMAC_MAC_PPS1_INTERVAL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PPSINT1:32;              /* PPS Output Signal Interval These bits store the interval between the rising edges of PPS0 signal output. The interval is stored in terms of number of units of sub-second increment value. You need to program one value less than the required interval. For example, if the PTP reference clock is 50 MHz (period of 20 ns), and desired interval between the rising edges of PPS0 signal output is 100 ns (that is, 5 units of sub-second increment value), you should program value 4 (5-1) in this register. */
  } B;
} GMAC_MAC_PPS1_INTERVAL_tag;

typedef union GMAC_MAC_PPS1_WIDTH_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PPSWIDTH1:32;            /* PPS Output Signal Width These bits store the width between the rising edge and corresponding falling edge of PPS0 signal output. The width is stored in terms of number of units of sub-second increment value. You need to program one value less than the required interval. For example, if PTP reference clock is 50 MHz (period of 20 ns), and width between the rising and corresponding falling edges of PPS0 signal output is 80 ns (that is, four units of sub-second increment value), you should program value 3 (4-1) in this register. Note: The value programmed in this register must be lesser than the value programmed in MAC_PPS0_Interval. */
  } B;
} GMAC_MAC_PPS1_WIDTH_tag;

typedef union GMAC_MAC_PPS2_TARGET_TIME_SECONDS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TSTRH2:32;               /* PPS Target Time Seconds Register This field stores the time in seconds. When the timestamp value matches or exceeds both Target Timestamp registers, the MAC starts or stops the PPS signal output and generates an interrupt (if enabled) based on Target Time mode selected for the corresponding PPS output in the MAC_PPS_Control register. If DWC_EQOS_FLEXI_PPS_OUT_EN is enabled in the configuration and PTGE field of MAC_Timestamp_Control Register is set with Presentation time control set in recovery mode, then these bits indicate the TPT being programmed by the application and in generation mode it indicates the CPT generated at the sampled trigger. */
  } B;
} GMAC_MAC_PPS2_TARGET_TIME_SECONDS_tag;

typedef union GMAC_MAC_PPS2_TARGET_TIME_NANOSECONDS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TTSL2:31;                /* Target Time Low for PPS Register This register stores the time in (signed) nanoseconds. When the value of the timestamp matches the value in both Target Timestamp registers, the MAC starts or stops the PPS signal output and generates an interrupt (if enabled) based on the TRGTMODSEL0 field (Bits [6:5]) in MAC_PPS_Control. When the TSCTRLSSR bit is reset in the MAC_Timestamp_Control register, this value should be (time in ns / 0.465). The actual start or stop time of the PPS signal output may have an error margin up to one unit of sub-second increment value. When the TSCTRLSSR bit is set in the MAC_Timestamp_Control register, this value should not exceed 0x3B9A_C9FF. The actual start or stop time of the PPS signal output may have an error margin up to one unit of sub-second increment value. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t TRGTBUSY2:1;             /* PPS Target Time Register Busy The MAC sets this bit when the PPSCMD0 field in the MAC_PPS_Control register is programmed to 010 or 011. Programming the PPSCMD0 field to 010 or 011 instructs the MAC to synchronize the Target Time Registers to the PTP clock domain. The MAC clears this bit after synchronizing the Target Time Registers to the PTP clock domain The application must not update the Target Time Registers when this bit is read as 1. Otherwise, the synchronization of the previous programmed time gets corrupted. */
  } B;
} GMAC_MAC_PPS2_TARGET_TIME_NANOSECONDS_tag;

typedef union GMAC_MAC_PPS2_INTERVAL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PPSINT2:32;              /* PPS Output Signal Interval These bits store the interval between the rising edges of PPS0 signal output. The interval is stored in terms of number of units of sub-second increment value. You need to program one value less than the required interval. For example, if the PTP reference clock is 50 MHz (period of 20 ns), and desired interval between the rising edges of PPS0 signal output is 100 ns (that is, 5 units of sub-second increment value), you should program value 4 (5-1) in this register. */
  } B;
} GMAC_MAC_PPS2_INTERVAL_tag;

typedef union GMAC_MAC_PPS2_WIDTH_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PPSWIDTH2:32;            /* PPS Output Signal Width These bits store the width between the rising edge and corresponding falling edge of PPS0 signal output. The width is stored in terms of number of units of sub-second increment value. You need to program one value less than the required interval. For example, if PTP reference clock is 50 MHz (period of 20 ns), and width between the rising and corresponding falling edges of PPS0 signal output is 80 ns (that is, four units of sub-second increment value), you should program value 3 (4-1) in this register. Note: The value programmed in this register must be lesser than the value programmed in MAC_PPS0_Interval. */
  } B;
} GMAC_MAC_PPS2_WIDTH_tag;

typedef union GMAC_MAC_PPS3_TARGET_TIME_SECONDS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TSTRH3:32;               /* PPS Target Time Seconds Register This field stores the time in seconds. When the timestamp value matches or exceeds both Target Timestamp registers, the MAC starts or stops the PPS signal output and generates an interrupt (if enabled) based on Target Time mode selected for the corresponding PPS output in the MAC_PPS_Control register. If DWC_EQOS_FLEXI_PPS_OUT_EN is enabled in the configuration and PTGE field of MAC_Timestamp_Control Register is set with Presentation time control set in recovery mode, then these bits indicate the TPT being programmed by the application and in generation mode it indicates the CPT generated at the sampled trigger. */
  } B;
} GMAC_MAC_PPS3_TARGET_TIME_SECONDS_tag;

typedef union GMAC_MAC_PPS3_TARGET_TIME_NANOSECONDS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TTSL3:31;                /* Target Time Low for PPS Register This register stores the time in (signed) nanoseconds. When the value of the timestamp matches the value in both Target Timestamp registers, the MAC starts or stops the PPS signal output and generates an interrupt (if enabled) based on the TRGTMODSEL0 field (Bits [6:5]) in MAC_PPS_Control. When the TSCTRLSSR bit is reset in the MAC_Timestamp_Control register, this value should be (time in ns / 0.465). The actual start or stop time of the PPS signal output may have an error margin up to one unit of sub-second increment value. When the TSCTRLSSR bit is set in the MAC_Timestamp_Control register, this value should not exceed 0x3B9A_C9FF. The actual start or stop time of the PPS signal output may have an error margin up to one unit of sub-second increment value. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t TRGTBUSY3:1;             /* PPS Target Time Register Busy The MAC sets this bit when the PPSCMD0 field in the MAC_PPS_Control register is programmed to 010 or 011. Programming the PPSCMD0 field to 010 or 011 instructs the MAC to synchronize the Target Time Registers to the PTP clock domain. The MAC clears this bit after synchronizing the Target Time Registers to the PTP clock domain The application must not update the Target Time Registers when this bit is read as 1. Otherwise, the synchronization of the previous programmed time gets corrupted. */
  } B;
} GMAC_MAC_PPS3_TARGET_TIME_NANOSECONDS_tag;

typedef union GMAC_MAC_PPS3_INTERVAL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PPSINT3:32;              /* PPS Output Signal Interval These bits store the interval between the rising edges of PPS0 signal output. The interval is stored in terms of number of units of sub-second increment value. You need to program one value less than the required interval. For example, if the PTP reference clock is 50 MHz (period of 20 ns), and desired interval between the rising edges of PPS0 signal output is 100 ns (that is, 5 units of sub-second increment value), you should program value 4 (5-1) in this register. */
  } B;
} GMAC_MAC_PPS3_INTERVAL_tag;

typedef union GMAC_MAC_PPS3_WIDTH_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PPSWIDTH3:32;            /* PPS Output Signal Width These bits store the width between the rising edge and corresponding falling edge of PPS0 signal output. The width is stored in terms of number of units of sub-second increment value. You need to program one value less than the required interval. For example, if PTP reference clock is 50 MHz (period of 20 ns), and width between the rising and corresponding falling edges of PPS0 signal output is 80 ns (that is, four units of sub-second increment value), you should program value 3 (4-1) in this register. Note: The value programmed in this register must be lesser than the value programmed in MAC_PPS0_Interval. */
  } B;
} GMAC_MAC_PPS3_WIDTH_tag;

typedef union GMAC_MAC_PTO_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PTOEN:1;                 /* PTP Offload Enable When this bit is set, the PTP Offload feature is enabled. */
    vuint32_t ASYNCEN:1;               /* Automatic PTP SYNC message Enable When this bit is set, PTP SYNC message is generated periodically based on interval programmed or trigger from application, when the MAC is programmed to be in Clock Master mode. */
    vuint32_t APDREQEN:1;              /* Automatic PTP Pdelay_Req message Enable When this bit is set, PTP Pdelay_Req message is generated periodically based on interval programmed or trigger from application, when the MAC is programmed to be in Peer-to-Peer Transparent mode. */
    vuint32_t _unused_3:1;             /* Reserved. */
    vuint32_t ASYNCTRIG:1;             /* Automatic PTP SYNC message Trigger When this bit is set, one PTP SYNC message is transmitted. This bit is automatically cleared after the PTP SYNC message is transmitted. The application should set the ASYNCEN bit for this operation. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t APDREQTRIG:1;            /* Automatic PTP Pdelay_Req message Trigger When this bit is set, one PTP Pdelay_Req message is transmitted. This bit is automatically cleared after the PTP Pdelay_Req message is transmitted. The application should set the APDREQEN bit for this operation. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t DRRDIS:1;                /* Disable PTO Delay Request/Response response generation When this bit is set, the Delay Request and Delay response is not generated for received SYNC and Delay request packet respectively, as required by the programmed mode. */
    vuint32_t PDRDIS:1;                /* Disable Peer Delay Response response generation When this bit is set, the Peer Delay Response (Pdelay_Resp) response is not be generated for received Peer Delay Request (Pdelay_Req) request packet, as required by the programmed mode. Note: Setting this bit to 1 affects the normal PTP Offload operation and the time synchronization. So, this bit must be set only if there is problem with Pdelay_Resp generation in Hardware and/or Pdelay_Resp generation is handled by Software. */
    vuint32_t DN:8;                    /* Domain Number This field indicates the domain Number in which the PTP node is operating. */
    vuint32_t _unused_16:16;           /* Reserved. */
  } B;
} GMAC_MAC_PTO_CONTROL_tag;

typedef union GMAC_MAC_SOURCE_PORT_IDENTITY0_union_tag {
  vuint32_t R;
  struct {
    vuint32_t SPI0:32;                 /* Source Port Identity 0 This field indicates bits [31:0] of sourcePortIdentity of PTP node. */
  } B;
} GMAC_MAC_SOURCE_PORT_IDENTITY0_tag;

typedef union GMAC_MAC_SOURCE_PORT_IDENTITY1_union_tag {
  vuint32_t R;
  struct {
    vuint32_t SPI1:32;                 /* Source Port Identity 1 This field indicates bits [63:32] of sourcePortIdentity of PTP node. */
  } B;
} GMAC_MAC_SOURCE_PORT_IDENTITY1_tag;

typedef union GMAC_MAC_SOURCE_PORT_IDENTITY2_union_tag {
  vuint32_t R;
  struct {
    vuint32_t SPI2:16;                 /* Source Port Identity 2 This field indicates bits [79:64] of sourcePortIdentity of PTP node. */
    vuint32_t _unused_16:16;           /* Reserved. */
  } B;
} GMAC_MAC_SOURCE_PORT_IDENTITY2_tag;

typedef union GMAC_MAC_LOG_MESSAGE_INTERVAL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t LSI:8;                   /* Log Sync Interval This field indicates the periodicity of the automatically generated SYNC message when the PTP node is Master. Allowed values are -15 to 15. Negative value must be represented in 2's-complement form. For example, if the required value is -1, the value programmed must be 0xFF. */
    vuint32_t DRSYNCR:3;               /* Delay_Req to SYNC Ratio In Slave mode, it is used for controlling frequency of Delay_Req messages transmitted. - 0: DelayReq generated for every received SYNC - 1: DelayReq generated every alternate reception of SYNC - 2: for every 4 SYNC messages - 3: for every 8 SYNC messages - 4: for every 16 SYNC messages - 5: for every 32 SYNC messages - 6-7: Reserved The master sends this information (logMinDelayReqInterval) in the DelayResp PTP messages to the slave. The DWC_ether_qos Receiver processes this value from the received DelayResp messages and updates this field accordingly. In the Slave mode, the host must not write/update this register unless it has to override the received value. In Master mode, the sum of this field and logSyncInterval (LSI) field is provided in the logMinDelayReqInterval field of the generated multicast Delay_Resp PTP message. Access restriction applies. Updated based on the event. Setting 1 sets. Setting 0 clears. */
    vuint32_t _unused_11:13;           /* Reserved. */
    vuint32_t LMPDRI:8;                /* Log Min Pdelay_Req Interval This field indicates logMinPdelayReqInterval of PTP node. This is used to schedule the periodic Pdelay request packet transmission. Allowed values are -15 to 15.Negative value must be represented in 2's-complement form. For example, if the required value is -1, the value programmed must be 0xFF. */
  } B;
} GMAC_MAC_LOG_MESSAGE_INTERVAL_tag;

typedef union GMAC_MTL_OPERATION_MODE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved. */
    vuint32_t DTXSTS:1;                /* Drop Transmit Status When this bit is set, the Tx packet status received from the MAC is dropped in the MTL. When this bit is reset, the Tx packet status received from the MAC is forwarded to the application. */
    vuint32_t RAA:1;                   /* Receive Arbitration Algorithm This field is used to select the arbitration algorithm for the Rx side. - 0: Strict priority (SP) Queue 0 has the lowest priority and the last queue has the highest priority. - 1: Weighted Strict Priority (WSP) */
    vuint32_t _unused_3:2;             /* Reserved. */
    vuint32_t SCHALG:2;                /* Tx Scheduling Algorithm This field indicates the algorithm for Tx scheduling: */
    vuint32_t _unused_7:1;             /* Reserved. */
    vuint32_t CNTPRST:1;               /* Counters Preset When this bit is set, - MTL_TxQ[0-7]_Underflow register is initialized/preset to 12'h7F0. - Missed Packet and Overflow Packet counters in MTL_RxQ[0-7]_Missed_Packet_Overflow_Cnt register is initialized/preset to 12'h7F0. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t CNTCLR:1;                /* Counters Reset When this bit is set, all counters are reset. This bit is cleared automatically after 1 clock cycle. If this bit is set along with CNT_PRESET bit, CNT_PRESET has precedence. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t _unused_10:5;            /* Reserved. */
    vuint32_t FRPE:1;                  /* Flexible Rx parser Enable When this bit is set to 1, the Programmable Rx Parser functionality is enabled. When the Rx parser is disabled and if the Rx parser is in the middle of the parsing then it gets disabled only after completing the current packet parsing. When the Rx parser is enabled from disabled state then the Rx parser gets activated for the next immediate packet. */
    vuint32_t _unused_16:16;           /* Reserved. */
  } B;
} GMAC_MTL_OPERATION_MODE_tag;

typedef union GMAC_MTL_DBG_CTL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t FDBGEN:1;                /* FIFO Debug Access Enable When this bit is set, it indicates that the debug mode access to the FIFO is enabled. When this bit is reset, it indicates that the FIFO can be accessed only through a master interface. */
    vuint32_t DBGMOD:1;                /* Debug Mode Access to FIFO When this bit is set, it indicates that the current access to the FIFO is read, write, and debug access. In this mode, the following access types are allowed: - Read and Write access to Tx FIFO, TSO FIFO, and Rx FIFO - Read access is allowed to Tx Status FIFO. When this bit is reset, it indicates that the current access to the FIFO is slave access bypassing the DMA. In this mode, the following access are allowed: - Write access to the Tx FIFO - Read access to the Rx FIFO and Tx Status FIFO */
    vuint32_t BYTEEN:2;                /* Byte Enables This field indicates the number of data bytes valid in the data register during Write operation. This is valid only when PKTSTATE is 2'b10 (EOP) and Tx FIFO or Rx FIFO is selected. */
    vuint32_t _unused_4:1;             /* Reserved. */
    vuint32_t PKTSTATE:2;              /* Encoded Packet State This field is used to write the control information to the Tx FIFO or Rx FIFO. Tx FIFO: - 00: Packet Data - 01: Control Word - 10: SOP Data - 11: EOP Data Rx FIFO: - 00: Packet Data - 01: Normal Status - 10: Last Status - 11: EOP */
    vuint32_t _unused_7:1;             /* Reserved. */
    vuint32_t RSTALL:1;                /* Reset All Pointers When this bit is set, the pointers of all FIFOs are reset when FIFO Debug Access is enabled. This bit must not be written to 1 when FIFO Debug Access is not enabled, that is FDBGEN bit is 0. Access restriction applies. Self-cleared. Setting 0 clears. Setting 1 sets. */
    vuint32_t RSTSEL:1;                /* Reset Pointers of Selected FIFO When this bit is set, the pointers of the currently-selected FIFO are reset when FIFO Debug Access is enabled. This bit must not be written to 1 when FIFO Debug Access is not enabled, that is FDBGEN bit is 0. Access restriction applies. Self-cleared. Setting 0 clears. Setting 1 sets. */
    vuint32_t FIFORDEN:1;              /* FIFO Read Enable When this bit is set, it enables the Read operation on selected FIFO when FIFO Debug Access is enabled. This bit must not be written to 1 when FIFO Debug Access is not enabled, that is FDBGEN bit is 0. Access restriction applies. Self-cleared. Setting 0 clears. Setting 1 sets. */
    vuint32_t FIFOWREN:1;              /* FIFO Write Enable When this bit is set, it enables the Write operation on selected FIFO when FIFO Debug Access is enabled. This bit must not be written to 1 when FIFO Debug Access is not enabled, that is FDBGEN bit is 0. Access restriction applies. Self-cleared. Setting 0 clears. Setting 1 sets. */
    vuint32_t FIFOSEL:2;               /* FIFO Selected for Access This field indicates the FIFO selected for debug access: */
    vuint32_t PKTIE:1;                 /* Receive Packet Available Interrupt Status Enable When this bit is set, an interrupt is generated when EOP of received packet is written to the Rx FIFO. */
    vuint32_t STSIE:1;                 /* Transmit Status Available Interrupt Status Enable When this bit is set, an interrupt is generated when Transmit status is available in slave mode. */
    vuint32_t EIEE:1;                  /* ECC Inject Error Enable for Tx, Rx and TSO memories When set, enables the ECC error injection feature. When reset, disables the ECC error injection feature. */
    vuint32_t EIEC:2;                  /* ECC Inject Error Control for Tx, Rx and TSO memories When EIEE bit of this register is set, following are the errors inserted based on the value encoded in this field. */
    vuint32_t _unused_19:13;           /* Reserved. */
  } B;
} GMAC_MTL_DBG_CTL_tag;

typedef union GMAC_MTL_DBG_STS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t FIFOBUSY:1;              /* FIFO Busy When set, this bit indicates that a FIFO operation is in progress in the MAC and content of the following fields is not valid: - All other fields of this register - All fields of the MTL_FIFO_Debug_Data register */
    vuint32_t PKTSTATE:2;              /* Encoded Packet State This field is used to get the control or status information of the selected FIFO. Tx FIFO: - 00: Packet Data - 01: Control Word - 10: SOP Data - 11: EOP Data Rx FIFO: - 00: Packet Data - 01: Normal Status - 10: Last Status - 11: EOP This field is applicable only for Tx FIFO and Rx FIFO during Read operation. */
    vuint32_t BYTEEN:2;                /* Byte Enables This field indicates the number of data bytes valid in the data register during Read operation. This is valid only when PKTSTATE is 2'b10 (EOP) and Tx FIFO or Rx FIFO is selected. */
    vuint32_t _unused_5:3;             /* Reserved. */
    vuint32_t PKTI:1;                  /* Receive Packet Available Interrupt Status When set, this bit indicates that MAC layer has written the EOP of received packet to the Rx FIFO. This bit is reset when 1 is written to this bit. */
    vuint32_t STSI:1;                  /* Transmit Status Available Interrupt Status When set, this bit indicates that the Slave mode Tx packet is transmitted, and the status is available in Tx Status FIFO. This bit is reset when 1 is written to this bit. */
    vuint32_t _unused_10:5;            /* Reserved. */
    vuint32_t LOCR:17;                 /* Remaining Locations in the FIFO Slave Access Mode: This field indicates the space available in selected FIFO. Debug Access Mode: This field contains the Write or Read pointer value of the selected FIFO during Write or Read operation, respectively. Reset: In single Tx Queue configurations, (DWC_EQOS_TXFIFO_SIZE/(DWC_EQOS_DATAWIDTH/8)), Otherwise 0000H */
  } B;
} GMAC_MTL_DBG_STS_tag;

typedef union GMAC_MTL_FIFO_DEBUG_DATA_union_tag {
  vuint32_t R;
  struct {
    vuint32_t FDBGDATA:32;             /* FIFO Debug Data During debug or slave access write operation, this field contains the data to be written to the Tx FIFO, Rx FIFO, or TSO FIFO. During debug or slave access read operation, this field contains the data read from the Tx FIFO, Rx FIFO, TSO FIFO, or Tx Status FIFO. */
  } B;
} GMAC_MTL_FIFO_DEBUG_DATA_tag;

typedef union GMAC_MTL_INTERRUPT_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t Q0IS:1;                  /* Queue 0 Interrupt status This bit indicates that there is an interrupt from Queue 0. To reset this bit, the application must read Queue 0 Interrupt Control and Status register to get the exact cause of the interrupt and clear its source. */
    vuint32_t Q1IS:1;                  /* Queue 1 Interrupt status This bit indicates that there is an interrupt from Queue 1. To reset this bit, the application must read the MTL_Q1_Interrupt_Control_Status register to get the exact cause of the interrupt and clear its source. */
    vuint32_t Q2IS:1;                  /* Queue 2 Interrupt status This bit indicates that there is an interrupt from Queue 2. To reset this bit, the application must read the MTL_Q2_Interrupt_Control_Status register to get the exact cause of the interrupt and clear its source. */
    vuint32_t Q3IS:1;                  /* Queue 3 Interrupt status This bit indicates that there is an interrupt from Queue 3. To reset this bit, the application must read the MTL_Q3_Interrupt_Control_Status register to get the exact cause of the interrupt and clear its source. */
    vuint32_t Q4IS:1;                  /* Queue 4 Interrupt status This bit indicates that there is an interrupt from Queue 4. To reset this bit, the application must read the MTL_Q4_Interrupt_Control_Status register to get the exact cause of the interrupt and clear its source. */
    vuint32_t _unused_5:1;             /* Reserved. */
    vuint32_t _unused_6:1;             /* Reserved. */
    vuint32_t _unused_7:1;             /* Reserved. */
    vuint32_t _unused_8:8;             /* Reserved. */
    vuint32_t _unused_16:1;            /* Reserved. */
    vuint32_t DBGIS:1;                 /* Debug Interrupt status This bit indicates an interrupt event during the slave access. To reset this bit, the application must read the FIFO Debug Access Status register to get the exact cause of the interrupt and clear its source. */
    vuint32_t ESTIS:1;                 /* EST (TAS- 802.1Qbv) Interrupt Status This bit indicates an interrupt event during the operation of 802.1Qbv. To reset this bit, the application must clear the error/event that has caused the Interrupt. */
    vuint32_t _unused_19:4;            /* Reserved. */
    vuint32_t MTLPIS:1;                /* MTL Rx Parser Interrupt Status This bit indicates that there is an interrupt from Rx Parser Block. To reset this bit, the application must read the MTL_ Rxp_Interrupt_Status register to get the exact cause of the interrupt and clear its source. */
    vuint32_t _unused_24:8;            /* Reserved. */
  } B;
} GMAC_MTL_INTERRUPT_STATUS_tag;

typedef union GMAC_MTL_RXQ_DMA_MAP0_union_tag {
  vuint32_t R;
  struct {
    vuint32_t Q0MDMACH:3;              /* Queue 0 Mapped to DMA Channel This field controls the routing of the packet received in Queue 0 to the DMA channel: - 000: DMA Channel 0 - 001: DMA Channel 1 - 010: DMA Channel 2 - 011: DMA Channel 3 - 100: DMA Channel 4 - 101: DMA Channel 5 - 110: DMA Channel 6 - 111: DMA Channel 7 This field is valid when the Q0DDMACH field is reset. The width of this field depends on the number of RX DMA channels and not all the values may be valid in some configurations. For example, if the number of RX DMA channels selected is 2, only 000 and 001 are valid, the other bits are reserved. */
    vuint32_t _unused_3:1;             /* Reserved. */
    vuint32_t Q0DDMACH:1;              /* Queue 0 Enabled for DA-based DMA Channel Selection When set, this bit indicates that the packets received in Queue 0 are routed to a particular DMA channel as decided in the MAC Receiver based on the DMA channel number programmed in the L3-L4 filter registers, or the Ethernet DA address. When reset, this bit indicates that the packets received in Queue 0 are routed to the DMA Channel programmed in the Q0MDMACH field. */
    vuint32_t _unused_5:3;             /* Reserved. */
    vuint32_t Q1MDMACH:3;              /* Queue 1 Mapped to DMA Channel This field controls the routing of the received packet in Queue 1 to the DMA channel: - 000: DMA Channel 0 - 001: DMA Channel 1 - 010: DMA Channel 2 - 011: DMA Channel 3 - 100: DMA Channel 4 - 101: DMA Channel 5 - 110: DMA Channel 6 - 111: DMA Channel 7 This field is valid when the Q1DDMACH field is reset. The width of this field depends on the number of RX DMA channels and not all the values may be valid in some configurations. For example, if the number of RX DMA channels selected is 2, only 000 and 001 are valid, the other bits are reserved. */
    vuint32_t _unused_11:1;            /* Reserved. */
    vuint32_t Q1DDMACH:1;              /* Queue 1 Enabled for DA-based DMA Channel Selection When set, this bit indicates that the packets received in Queue 1 are routed to a particular DMA channel as decided in the MAC Receiver based on the DMA channel number programmed in the L3-L4 filter registers, or the Ethernet DA address. When reset, this bit indicates that the packets received in Queue 1 are routed to the DMA Channel programmed in the Q1MDMACH field (Bits[10:8]). */
    vuint32_t _unused_13:3;            /* Reserved. */
    vuint32_t Q2MDMACH:3;              /* Queue 2 Mapped to DMA Channel This field controls the routing of the received packet in Queue 2 to the DMA channel: - 000: DMA Channel 0 - 001: DMA Channel 1 - 010: DMA Channel 2 - 011: DMA Channel 3 - 100: DMA Channel 4 - 101: DMA Channel 5 - 110: DMA Channel 6 - 111: DMA Channel 7 This field is valid when the Q2DDMACH field is reset. */
    vuint32_t _unused_19:1;            /* Reserved. */
    vuint32_t Q2DDMACH:1;              /* Queue 2 Enabled for DA-based DMA Channel Selection When set, this bit indicates that the packets received in Queue 2 are routed to a particular DMA channel as decided in the MAC Receiver based on the DMA channel number programmed in the L3-L4 filter registers, or the Ethernet DA address. When reset, this bit indicates that the packets received in Queue 2 are routed to the DMA Channel programmed in the Q2MDMACH field (Bits[18:16]). */
    vuint32_t _unused_21:3;            /* Reserved. */
    vuint32_t Q3MDMACH:3;              /* Queue 3 Mapped to DMA Channel This field controls the routing of the received packet in Queue 3 to the DMA channel: - 000: DMA Channel 0 - 001: DMA Channel 1 - 010: DMA Channel 2 - 011: DMA Channel 3 - 100: DMA Channel 4 - 101: DMA Channel 5 - 110: DMA Channel 6 - 111: DMA Channel 7 This field is valid when the Q3DDMACH field is reset. Note: The width of this field depends on the number of RX DMA channels and not all the values may be valid in some configurations. For example, if the number of RX DMA channels selected is 2, only 000 and 001 are valid, the others are reserved */
    vuint32_t _unused_27:1;            /* Reserved. */
    vuint32_t Q3DDMACH:1;              /* Queue 3 Enabled for Dynamic (per packet) DMA Channel Selection When set, this bit indicates that the packets received in Queue 3 are routed to a particular DMA channel as decided in the MAC Receiver based on the DMA channel number programmed in the L3-L4 filter registers, or the Ethernet DA address. When reset, this bit indicates that the packets received in Queue 3 are routed to the DMA Channel programmed in the Q3MDMACH field (Bits[26:24]). */
    vuint32_t _unused_29:3;            /* Reserved. */
  } B;
} GMAC_MTL_RXQ_DMA_MAP0_tag;

typedef union GMAC_MTL_RXQ_DMA_MAP1_union_tag {
  vuint32_t R;
  struct {
    vuint32_t Q4MDMACH:3;              /* Queue 4 Mapped to DMA Channel This field controls the routing of the packet received in Queue 4 to the DMA channel: - 000: DMA Channel 0 - 001: DMA Channel 1 - 010: DMA Channel 2 - 011: DMA Channel 3 - 100: DMA Channel 4 - 101: DMA Channel 5 - 110: DMA Channel 6 - 111: DMA Channel 7 This field is valid when the Q4DDMACH field is reset. The width of this field depends on the number of RX DMA channels and not all the values may be valid in some configurations. For example, if the number of RX DMA channels selected is 2, only 000 and 001 are valid, the other bits are reserved. */
    vuint32_t _unused_3:1;             /* Reserved. */
    vuint32_t Q4DDMACH:1;              /* Queue 4 Enabled for DA-based DMA Channel Selection When set, this bit indicates that the packets received in Queue 4 are routed to a particular DMA channel as decided in the MAC Receiver based on the DMA channel number programmed in the L3-L4 filter registers, or the Ethernet DA address. When reset, this bit indicates that the packets received in Queue 4 are routed to the DMA Channel programmed in the Q4MDMACH field. */
    vuint32_t _unused_5:3;             /* Reserved. */
    vuint32_t _unused_8:3;             /* Reserved. */
    vuint32_t _unused_11:1;            /* Reserved. */
    vuint32_t _unused_12:1;            /* Reserved. */
    vuint32_t _unused_13:3;            /* Reserved. */
    vuint32_t _unused_16:3;            /* Reserved. */
    vuint32_t _unused_19:1;            /* Reserved. */
    vuint32_t _unused_20:1;            /* Reserved. */
    vuint32_t _unused_21:3;            /* Reserved. */
    vuint32_t _unused_24:3;            /* Reserved. */
    vuint32_t _unused_27:1;            /* Reserved. */
    vuint32_t _unused_28:1;            /* Reserved. */
    vuint32_t _unused_29:3;            /* Reserved. */
  } B;
} GMAC_MTL_RXQ_DMA_MAP1_tag;

typedef union GMAC_MTL_TBS_CTRL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ESTM:1;                  /* EST offset Mode When this bit is set, the Launch Time value used in Time Based Scheduling is interpreted as an EST offset value and is added to the Base Time Register (BTR) of the current list. When reset, the Launch Time value is used as an absolute value that should be compared with the System time [39:8]. */
    vuint32_t LEOV:1;                  /* Launch Expiry Offset Valid When set indicates the LEOS field is valid. When not set, indicates the Launch Expiry Offset is not valid and the MTL must not check for Launch expiry time. */
    vuint32_t _unused_2:2;             /* Reserved. */
    vuint32_t LEGOS:3;                 /* Launch Expiry GSN Offset The number GSN slots that has to be added to the Launch GSN to compute the Launch Expiry time. Value valid only when LEOV is set. */
    vuint32_t _unused_7:1;             /* Reserved. */
    vuint32_t LEOS:24;                 /* Launch Expiry Offset The value in units of 256 nanoseconds that has to be added to the Launch time to compute the Launch Expiry time. Value valid only when LEOV is set. Max value: 999,999,999 ns, additionally should be smaller than CTR-1 value when ESTM mode is set since this value is a modulo CTR value. */
  } B;
} GMAC_MTL_TBS_CTRL_tag;

typedef union GMAC_MTL_EST_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t EEST:1;                  /* Enable EST When reset, the gate control list processing is halted and all gates are assumed to be in Open state. Should be set for the hardware to start processing the gate control lists. During the toggle from 0 to 1, the gate control list processing starts only after the SSWL bit it set. When DWC_EQOS_ASP_ECC is selected during the configuration, if any uncorrectable error is detected in the EST memory the hardware will reset this bit and disable the EST function. */
    vuint32_t SSWL:1;                  /* Switch to S/W owned list When set indicates that the software has programmed that list that it currently owns (SWOL) and the hardware should switch to the new list based on the new BTR. Hardware clears this bit when the switch to the SWOL happens to indicate the completion of the switch or when an BTR error (BTRE in Status register) is set. When BTRE is set this bit is cleared but SWOL is not updated as the switch was not successful. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t _unused_2:2;             /* Reserved. */
    vuint32_t DDBF:1;                  /* Do not Drop frames during Frame Size Error When set, frames are not be dropped during Head-of-Line blocking due to Frame Size Error (HLBF field of EST_Status register). */
    vuint32_t DFBS:1;                  /* Drop Frames causing Scheduling Error When set frames reported to cause HOL Blocking due to not getting scheduled (HLBS field of EST_Status register) after 4,8,16,32 (based on LCSE field of this register) GCL iterations are dropped. */
    vuint32_t LCSE:2;                  /* Loop Count to report Scheduling Error Programmable number of GCL list iterations before reporting an HLBS error defined in EST_Status register. */
    vuint32_t TILS:3;                  /* Time Interval Left Shift Amount This field provides the left shift amount for the programmed Time Interval values used in the Gate Control Lists. - 000: No left shift needed (equal to x1ns) - 001: Left shift TI by 1 bit (equal to x2ns) - 010: Left shift TI by 2 bits (equal to x4ns) - . - . - 100: Left shift TI by 7 bits (equal to x128ns) Based on the configuration one or more bits of this field should be treated as Reserved/Read-Only. */
    vuint32_t _unused_11:1;            /* Reserved. */
    vuint32_t CTOV:12;                 /* Current Time Offset Value Provides a 12 bit time offset value in nano second that is added to the current time to compensate for all the implementation pipeline delays such as the CDC sync delay, buffering delays, data path delays etc. This offset helps to ensure that the impact of gate controls is visible on the line exactly at the pre-determined schedule (or as close to the schedule as possible). */
    vuint32_t PTOV:8;                  /* PTP Time Offset Value The value of PTP Clock period multiplied by 6 in nanoseconds. This value is needed to avoid transmission overruns at the beginning of the installation of a new GCL. */
  } B;
} GMAC_MTL_EST_CONTROL_tag;

typedef union GMAC_MTL_EST_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t SWLC:1;                  /* Switch to S/W owned list Complete When "1" indicates the hardware has successfully switched to the SWOL, and the SWOL bit has been updated to that effect. Cleared when the SSWL of EST_Control register transitions from 0 to 1, or on a software write. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t BTRE:1;                  /* BTR Error When "1" indicates a programming error in the BTR of SWOL where the programmed value is less than current time. If the BTRL = "1111", SWOL is not updated and Software should reprogram the BTR to a value greater than current time and then set SSWL to reinitiate the switch to SWOL. Else if the value of BTRL < "1111", SWOL is updated and this field indicates the number of iterations (of + CycleTime) taken by hardware to update the BTR to a value greater than Current Time. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t HLBF:1;                  /* Head-Of-Line Blocking due to Frame Size Set when HOL Blocking is noticed on one or more Queues as a result of none of the Time Intervals of gate open in the GCL being greater than or equal to the duration needed for frame size (or frame fragment size when preemption is enabled) transmission. The one hot encoded Queue numbers that are experiencing HLBF are indicated in the MTL_EST_Frm_Size_Error register. Additionally, the first Queue number that experienced HLBF along with the frame size is captured in MTL_EST_Frm_Size_Capture register. Bit cleared when MTL_EST_Frame_Size_ Error register is all zeros. */
    vuint32_t HLBS:1;                  /* Head-Of-Line Blocking due to Scheduling Set when the frame is not able to win arbitration and get scheduled even after 4 iterations of the GCL. Indicates to software a potential programming error. The one hot encoded values of the Queue Numbers that are not able to make progress are indicated in the MTL_EST_Sch_Error register. Bit cleared when MTL_EST_Sch_Error register is all zeros. */
    vuint32_t CGCE:1;                  /* Constant Gate Control Error This error occurs when the list length (LLR) is 1 and the programmed Time Interval (TI) value after the optional Left Shifting is less than or equal to the Cycle Time (CTR). The above programming implies Gates are either always Closed or always Open based on the Gate Control values; the same effect can be achieved by other simpler (non TSN) programming mechanisms. Since the implementation does not support such a programming an error is reported. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t _unused_5:2;             /* Reserved. */
    vuint32_t SWOL:1;                  /* S/W owned list When '0' indicates Gate control list number "0" is owned by software and when "1" indicates the Gate Control list "1" is owned by the software. Any reads/writes by the software (using indirect access via GCL_Control) is directed to the list indicated by this value by default. The inverse of this value is treated as HWOL. R/W operations performed by hardware are directed to the list pointed by HWOL by default. */
    vuint32_t BTRL:4;                  /* BTR Error Loop Count Provides the minimum count (N) for which the equation Current Time =< New BTR + (N * New Cycle Time) becomes true. N = "1111" indicates the iterations exceeded the value of 8 and the hardware was not able to update New BTR to be equal to or greater than Current Time. Software intervention is needed to update the New BTR. Value cleared when BTRE field of this register is cleared. */
    vuint32_t _unused_12:4;            /* Reserved. */
    vuint32_t CGSN:4;                  /* Current GCL Slot Number Indicates the slot number of the GCL list. Slot number is a modulo 16 count of the GCL List loops executed so far. Even if a new GCL list is installed, the count is incremental. */
    vuint32_t _unused_20:12;           /* Reserved. */
  } B;
} GMAC_MTL_EST_STATUS_tag;

typedef union GMAC_MTL_EST_SCH_ERROR_union_tag {
  vuint32_t R;
  struct {
    vuint32_t SEQN:5;                  /* Schedule Error Queue Number The One Hot Encoded Queue Numbers that have experienced error/timeout described in HLBS field of status register. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t _unused_5:27;            /* Reserved. */
  } B;
} GMAC_MTL_EST_SCH_ERROR_tag;

typedef union GMAC_MTL_EST_FRM_SIZE_ERROR_union_tag {
  vuint32_t R;
  struct {
    vuint32_t FEQN:5;                  /* Frame Size Error Queue Number The One Hot Encoded Queue Numbers that have experienced error described in HLBF field of status register. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t _unused_5:27;            /* Reserved. */
  } B;
} GMAC_MTL_EST_FRM_SIZE_ERROR_tag;

typedef union GMAC_MTL_EST_FRM_SIZE_CAPTURE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t HBFS:15;                 /* Frame Size of HLBF Captures the Frame Size of the dropped frame related to queue number indicated in HBFQ field of this register. Contents of this register should be considered invalid, if this field is zero. Cleared when MTL_EST_Frm_Size_Error register is all zeros. */
    vuint32_t _unused_15:1;            /* Reserved. */
    vuint32_t HBFQ:3;                  /* Queue Number of HLBF Captures the binary value of the of the first Queue (number) experiencing HLBF error (see HLBF field of status register). Value once written is not altered by any subsequent queue errors of similar nature. Once cleared the queue number of the next occurring HLBF error is captured. Width is based on the number of Tx Queues configured; remaining bits are Read-Only. Cleared when MTL_EST_Frm_Size_Error register is all zeros. */
    vuint32_t _unused_19:13;           /* Reserved. */
  } B;
} GMAC_MTL_EST_FRM_SIZE_CAPTURE_tag;

typedef union GMAC_MTL_EST_INTR_ENABLE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t IECC:1;                  /* Interrupt Enable for Switch List When set, generates interrupt when the configuration change is successful and the hardware has switched to the new list. When reset this event does not generate an interrupt. */
    vuint32_t IEBE:1;                  /* Interrupt Enable for BTR Error When set, generates interrupt when the BTR Error occurs and is indicated in the status. When reset this event does not generate an interrupt. */
    vuint32_t IEHF:1;                  /* Interrupt Enable for HLBF When set, generates interrupt when the Head-of-Line Blocking due to Frame Size error occurs and is indicated in the status. When reset this event does not generate an interrupt. */
    vuint32_t IEHS:1;                  /* Interrupt Enable for HLBS When set, generates interrupt when the Head-of-Line Blocking due to Scheduling issue and is indicated in the status. When reset this event does not generate an interrupt. */
    vuint32_t CGCE:1;                  /* Interrupt Enable for CGCE When set, generates interrupt when the Constant Gate Control Error occurs and is indicated in the status. When reset this event does not generate an interrupt */
    vuint32_t _unused_5:27;            /* Reserved. */
  } B;
} GMAC_MTL_EST_INTR_ENABLE_tag;

typedef union GMAC_MTL_EST_GCL_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t SRWO:1;                  /* Start Read/Write Op When set indicates a Read/Write Op has started and is in progress. When reset by hardware indicates the R/W Op has completed or an error has occurred (when bit 20 is set) Reads: Data can be read from MTL_EST_GCL_Data register after this bit is reset Writes: MTL_EST_GCL_Data should be programmed with write data before setting SRWO. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t R1W0:1;                  /* Read '1', Write '0': When set to '1': Read Operation When set to '0': Write Operation. */
    vuint32_t GCRR:1;                  /* Gate Control Related Registers When set to "1" indicates the R/W access is for the GCL related registers (BTR, CTR, TER, LLR) whose address is provided by GCRA. When "0" indicates R/W should be directed to GCL from the address provided by GCLA. */
    vuint32_t _unused_3:1;             /* Reserved. */
    vuint32_t DBGM:1;                  /* Debug Mode When set to "1" indicates R/W in debug mode where the memory bank (for GCL and Time related registers) is explicitly provided by DBGB value, when set to "0" SWOL bit is used to determine which bank to use. */
    vuint32_t DBGB:1;                  /* Debug Mode Bank Select When set to "0" indicates R/W in debug mode should be directed to Bank 0 (GCL0 and corresponding Time related registers). When set to "1" indicates R/W in debug mode should be directed to Bank 1 (GCL1 and corresponding Time related registers). This value is used when DBGM is set and overrides by value of SWOL which is normally used. */
    vuint32_t _unused_6:2;             /* Reserved. */
    vuint32_t ADDR:8;                  /* Gate Control List Address: (GCLA when GCRR is "0"). Provides the address (row number) of the Gate Control List at which the R/W operation has to be performed. By default the Gate Control List pointed by SWOL of MTL_EST_Status is selected for R/W, however if the DBGM bit of this register is set, a debug mode access is given to R/W from DBGB. The width of this field is dependent on DWC_EQOS_EST_DEP; unused bits should be treated as read only. Gate Control list Related Registers Address: (GCRA when GCRR is "1"). By default the GCL related register set pointed by SWOL of MTL_EST_Status is selected for R/W, however if the DBGM bit of this register is set, a debug mode access is given to R/W from DBGB. Lower 3 bits are only used in this mode, higher order bits are treated as dont cares. - 000: BTR Low (31:0) - 001: BTR High (63:31) - 010: CTR Low (31:0) - 011: CTR High (39:32) - 100: TER (31:0) - 101: LLR (n:0) (where n is (log{DWC_EQOS_EST_DEP} / log2)) - Others: Reserved */
    vuint32_t _unused_16:4;            /* Reserved. */
    vuint32_t ERR0:1;                  /* When set indicates the last write operation was aborted as software writes to GCL and GCL registers is prohibited when SSWL bit of MTL_EST_Control Register is set. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t ESTEIEE:1;               /* EST ECC Inject Error Enable When set along with EEST bit of MTL_EST_Control register, enables the ECC error injection feature. When reset, disables the ECC error injection feature. */
    vuint32_t ESTEIEC:2;               /* ECC Inject Error Control for EST Memory When EIEE bit of this register is set, following are the errors inserted based on the value encoded in this field. This filed will be valid only if DWC_EQOS_ASP_ECC feature is selected during the configuration, else it will be reserved. */
    vuint32_t _unused_24:8;            /* Reserved. */
  } B;
} GMAC_MTL_EST_GCL_CONTROL_tag;

typedef union GMAC_MTL_EST_GCL_DATA_union_tag {
  vuint32_t R;
  struct {
    vuint32_t GCD:32;                  /* Gate Control Data The data corresponding to the address selected in the GCL_Control register. Used for both Read and Write operations. */
  } B;
} GMAC_MTL_EST_GCL_DATA_tag;

typedef union GMAC_MTL_FPE_CTRL_STS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t AFSZ:2;                  /* Additional Fragment Size used to indicate, in units of 64 bytes, the minimum number of bytes over 64 bytes required in non-final fragments of preempted frames. The minimum non-final fragment size is (AFSZ +1) * 64 bytes */
    vuint32_t _unused_2:6;             /* Reserved. */
    vuint32_t PEC:5;                   /* Preemption Classification When set indicates the corresponding Queue must be classified as preemptable, when '0' Queue is classified as express. When both EST (Qbv) and Preemption are enabled, Queue-0 is always assumed to be preemptable. When EST (Qbv) is enabled Queues categorized as preemptable here are always assumed to be in "Open" state in the Gate Control List. */
    vuint32_t _unused_13:3;            /* Reserved. */
    vuint32_t _unused_16:12;           /* Reserved. */
    vuint32_t HRS:1;                   /* Hold/Release Status - 1: Indicates a Set-and-Hold-MAC operation was last executed and the pMAC is in Hold State. - 0: Indicates a Set-and-Release-MAC operation was last executed and the pMAC is in Release State. */
    vuint32_t _unused_29:3;            /* Reserved. */
  } B;
} GMAC_MTL_FPE_CTRL_STS_tag;

typedef union GMAC_MTL_FPE_ADVANCE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t HADV:16;                 /* Hold Advance The maximum time in nanoseconds that can elapse between issuing a HOLD to the MAC and the MAC ceasing to transmit any preemptable frame that is in the process of transmission or any preemptable frames that are queued for transmission. */
    vuint32_t RADV:16;                 /* Release Advance The maximum time in nanoseconds that can elapse between issuing a RELEASE to the MAC and the MAC being ready to resume transmission of preemptable frames, in the absence of there being any express frames available for transmission. */
  } B;
} GMAC_MTL_FPE_ADVANCE_tag;

typedef union GMAC_MTL_RXP_CONTROL_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t NVE:8;                   /* Number of valid entries in the Instruction table This control indicates the number of valid entries in the Instruction Memory. This is used in Rx parser logic to detect any programming Error. In case while parsing Table address (memory address) found to be more than this entry then NVEOVIS bit in the MTL_RXP_Interrupt_Control_Status register is set. Note: The minimum value of this should be 2. */
    vuint32_t _unused_8:8;             /* Reserved. */
    vuint32_t NPE:8;                   /* Number of parsable entries in the Instruction table This control indicates the number of parsable entries in the Instruction Memory. This is used in Rx parser logic to detect programming Error. In case number of parsed entries for a packet is more than this entry then NPEOVIS bit in the MTL_RXP_Interrupt_Control_Status register is set. */
    vuint32_t _unused_24:7;            /* Reserved. */
    vuint32_t RXPI:1;                  /* RX Parser in Idle state This status bit is set to 1 when the Rx parser is in Idle State and waiting for a new packet for processing. This bit is used as a handshake with software when parser gets disables. After disabling, when bit is set then software can update the Rx parser instruction table. */
  } B;
} GMAC_MTL_RXP_CONTROL_STATUS_tag;

typedef union GMAC_MTL_RXP_INTERRUPT_CONTROL_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t NVEOVIS:1;               /* Number of Valid Entries Overflow Interrupt Status While parsing if the Instruction address found to be more than NVE (Number of Valid Entries in MTL_RXP_Control register), then this bit is set to 1. This bit is cleared when the application writes 1 to this bit. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t NPEOVIS:1;               /* Number of Parsable Entries Overflow Interrupt Status While parsing a packet if the number of parsed entries found to be more than NPE[] (Number of Parseable Entries in MTL_RXP_Control register),then this bit is set to 1. This bit is cleared when the application writes 1 to this bit. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t FOOVIS:1;                /* Frame Offset Overflow Interrupt Status While parsing if the Instruction table entry's 'Frame Offset' found to be more than EOF offset, then then this bit is set. This bit is cleared when the application writes 1 to this bit. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t PDRFIS:1;                /* Packet Dropped due to RF Interrupt Status If the Rx Parser result says to drop the packet by setting RF=1 in the instruction memory, then this bit is set to 1. This bit is cleared when the application writes 1 to this bit. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t _unused_4:12;            /* Reserved. */
    vuint32_t NVEOVIE:1;               /* Number of Valid Entries Overflow Interrupt Enable When this bit is set, the NVEOVIS interrupt is enabled. When this bit is reset, the NVEOVIS interrupt is disabled. */
    vuint32_t NPEOVIE:1;               /* Number of Parsable Entries Overflow Interrupt Enable When this bit is set, the NPEOVIS interrupt is enabled. When this bit is reset, the NPEOVIS interrupt is disabled. */
    vuint32_t FOOVIE:1;                /* Frame Offset Overflow Interrupt Enable When this bit is set, the FOOVIS interrupt is enabled. When this bit is reset, the FOOVIS interrupt is disabled. */
    vuint32_t PDRFIE:1;                /* Packet Drop due to RF Interrupt Enable When this bit is set, the PDRFIS interrupt is enabled. When this bit is reset, the PDRFIS interrupt is disabled. */
    vuint32_t _unused_20:12;           /* Reserved. */
  } B;
} GMAC_MTL_RXP_INTERRUPT_CONTROL_STATUS_tag;

typedef union GMAC_MTL_RXP_DROP_CNT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXPDC:31;                /* Rx Parser Drop count This 31-bit counter is implemented whenever a Rx Parser Drops a packet due to RF =1. The counter is cleared when the register is read. */
    vuint32_t RXPDCOVF:1;              /* Rx Parser Drop Counter Overflow Bit When set, this bit indicates that the MTL_RXP_Drop_cnt (RXPDC) Counter field crossed the maximum limit. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
  } B;
} GMAC_MTL_RXP_DROP_CNT_tag;

typedef union GMAC_MTL_RXP_ERROR_CNT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXPEC:31;                /* Rx Parser Error count This 31-bit counter is implemented whenever a Rx Parser encounters following Error scenarios - Entry address >= NVE[] - Number Parsed Entries >= NPE[] - Entry address > EOF data entry address The counter is cleared when the register is read. */
    vuint32_t RXPECOVF:1;              /* Rx Parser Error Counter Overflow Bit When set, this bit indicates that the MTL_RXP_Error_cnt (RXPEC) Counter field crossed the maximum limit. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
  } B;
} GMAC_MTL_RXP_ERROR_CNT_tag;

typedef union GMAC_MTL_RXP_INDIRECT_ACC_CONTROL_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ADDR:10;                 /* FRP Instruction Table Offset Address This field indicates the ADDR of the 32-bit entry in Rx parser instruction table. Each entry has 128-bit (4x32-bit words). The X depends on the configurable DWC_EQOS_FRP_ENTRIES If DWC_EQOS_FRP_ENTRIES == 256 , then X = 9 If DWC_EQOS_FRP_ENTRIES = 128 , then X = 8 IF DWC_EQOS_FRP_ENTRIES = 64, then X = 7 This is can be written by the software before issuing any Read/Write command. The hardware auto-increments this field after the read-write operation gets completed. */
    vuint32_t _unused_10:6;            /* Reserved. */
    vuint32_t WRRDN:1;                 /* Read Write Control When this bit is set to 1 indicates the write operation to the Rx Parser Memory. When this bit is set to 0 indicates the read operation to the Rx Parser Memory. */
    vuint32_t _unused_17:3;            /* Reserved. */
    vuint32_t RXPEIEE:1;               /* ECC Inject Error Enable for Rx Parser Memory When set, enables the ECC error injection feature. When reset, disables the ECC error injection feature. */
    vuint32_t RXPEIEC:2;               /* ECC Inject Error Control for Rx Parser Memory When EIEE bit of this register is set, following are the errors inserted based on the value encoded in this field. */
    vuint32_t _unused_23:8;            /* Reserved. */
    vuint32_t STARTBUSY:1;             /* FRP Instruction Table Access Busy When this bit is set to 1 by the software then it indicates to start the Read/Write operation from/to the Rx Parser Memory. Software should read this bit as 0 before issuing read or write request to access the Parser Memory Instructions. This bit when set to 1 indicates that hardware is busy until its gets cleared by hardware and software should not issue any read or write operation. */
  } B;
} GMAC_MTL_RXP_INDIRECT_ACC_CONTROL_STATUS_tag;

typedef union GMAC_MTL_RXP_INDIRECT_ACC_DATA_union_tag {
  vuint32_t R;
  struct {
    vuint32_t DATA:32;                 /* FRP Instruction Table Write/Read Data Software should write this register before issuing any write command. The hardware provides the read data from the Rx Parser Memory for read operation when STARTBUSY =0 after read command. */
  } B;
} GMAC_MTL_RXP_INDIRECT_ACC_DATA_tag;

typedef union GMAC_MTL_ECC_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t MTXEE:1;                 /* MTL Tx FIFO ECC Enable When set to 1, enables the ECC feature for MTL Tx FIFO memory. When set to zero, disables the ECC feature for MTL Tx FIFO memory. */
    vuint32_t MRXEE:1;                 /* MTL Rx FIFO ECC Enable When set to 1, enables the ECC feature for MTL Rx FIFO memory. When set to zero, disables the ECC feature for MTL Rx FIFO memory. */
    vuint32_t MESTEE:1;                /* MTL EST ECC Enable When set to 1, enables the ECC feature for EST memory. When set to zero, disables the ECC feature for EST memory. */
    vuint32_t MRXPEE:1;                /* MTL Rx Parser ECC Enable When set to 1, enables the ECC feature for Rx Parser memory. When set to zero, disables the ECC feature for Rx Parser memory. */
    vuint32_t _unused_4:1;             /* Reserved. */
    vuint32_t _unused_5:3;             /* Reserved. */
    vuint32_t MEEAO:1;                 /* MTL ECC Error Address Status Over-ride When set, the following error address fields will hold the last valid address where the error is detected. When reset, the following error address fields will hold the first address where the error is detected. EUEAS/ECEAS of MTL_ECC_Err_Addr_Status register. */
    vuint32_t _unused_9:23;            /* Reserved. */
  } B;
} GMAC_MTL_ECC_CONTROL_tag;

typedef union GMAC_MTL_SAFETY_INTERRUPT_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t MECIS:1;                 /* MTL ECC Correctable error Interrupt Status This bit indicates that a correctable error interrupt event in the MTL ECC safety feature. To get the exact cause of the interrupt the application should read the MTL_ECC_Interrupt_Status register. */
    vuint32_t MEUIS:1;                 /* MTL ECC Uncorrectable error Interrupt Status This bit indicates that an uncorrectable error interrupt event in the MTL ECC safety feature. To get the exact cause of the interrupt the application should read the MTL_ECC_Interrupt_Status register. */
    vuint32_t _unused_2:29;            /* Reserved. */
    vuint32_t MCSIS:1;                 /* MAC Safety Uncorrectable Interrupt Status Indicates an uncorrectable Safety-related Interrupt is set in the MAC module. MAC_DPP_FSM_Interrupt_Status register should be read when this bit is set, to get the cause of the Safety Interrupt in MAC. */
  } B;
} GMAC_MTL_SAFETY_INTERRUPT_STATUS_tag;

typedef union GMAC_MTL_ECC_INTERRUPT_ENABLE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXCEIE:1;                /* Tx memory Correctable Error Interrupt Enable When set, generates an interrupt when a correctable error is detected at the MTL Tx memory interface. It is indicated in the TXCES bit of MTL_ECC_Interrupt_Status register. When reset this event does not generates an interrupt. */
    vuint32_t _unused_1:3;             /* Reserved. */
    vuint32_t RXCEIE:1;                /* Rx memory Correctable Error Interrupt Enable When set, generates an interrupt when a correctable error is detected at the MTL Rx memory interface. It is indicated in the RXCES bit of MTL_ECC_Interrupt_Status register. When reset this event does not generates an interrupt. */
    vuint32_t _unused_5:3;             /* Reserved. */
    vuint32_t ECEIE:1;                 /* EST memory Correctable Error Interrupt Enable When set, generates an interrupt when a correctable error is detected at the MTL EST memory interface. It is indicated in the ECES bit of MTL_ECC_Interrupt_Status register. When reset this event does not generates an interrupt. */
    vuint32_t _unused_9:3;             /* Reserved. */
    vuint32_t RPCEIE:1;                /* Rx Parser memory Correctable Error Interrupt Enable When set, generates an interrupt when an uncorrectable error is detected at the Rx Parser memory interface. It is indicated in RPCES status bit of MTL_ECC_Interrupt_Status register. When reset this event does not generates an interrupt. */
    vuint32_t _unused_13:19;           /* Reserved. */
  } B;
} GMAC_MTL_ECC_INTERRUPT_ENABLE_tag;

typedef union GMAC_MTL_ECC_INTERRUPT_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXCES:1;                 /* MTL Tx memory Correctable Error Status This bit when set indicates that a correctable error is detected at the MTL Tx memory. */
    vuint32_t TXAMS:1;                 /* MTL Tx memory Address Mismatch Status This bit when set indicates that address mismatch is found for address bus of the MTL Tx memory. */
    vuint32_t TXUES:1;                 /* MTL Tx memory Uncorrectable Error Status When set, indicates that an uncorrectable error is detected at the MTL TX memory interface. */
    vuint32_t _unused_3:1;             /* Reserved. */
    vuint32_t RXCES:1;                 /* MTL Rx memory Correctable Error Status This bit when set indicates that correctable error is detected at the MTL Rx memory. */
    vuint32_t RXAMS:1;                 /* MTL Rx memory Address Mismatch Status This bit when set indicates that address mismatch is found for address bus of the MTL Rx memory. */
    vuint32_t RXUES:1;                 /* MTL Rx memory Uncorrectable Error Status When set, indicates that an uncorrectable error is detected at the MTL Rx memory interface. */
    vuint32_t _unused_7:1;             /* Reserved. */
    vuint32_t ECES:1;                  /* MTL EST memory Correctable Error Status This bit when set indicates that correctable error is detected at the MTL EST memory. */
    vuint32_t EAMS:1;                  /* MTL EST memory Address Mismatch Status This bit when set indicates that address mismatch is found for address bus of MTL EST memory. */
    vuint32_t EUES:1;                  /* MTL EST memory Uncorrectable Error Status When set, indicates that an uncorrectable error is detected at MTL EST memory interface. */
    vuint32_t _unused_11:1;            /* Reserved. */
    vuint32_t RPCES:1;                 /* MTL Rx Parser memory Correctable Error Status This bit when set indicates that correctable error is detected at RX Parser memory interface. */
    vuint32_t RPAMS:1;                 /* MTL Rx Parser memory Address Mismatch Status This bit when set indicates that address mismatch is found for address bus of Rx Parser memory. */
    vuint32_t RPUES:1;                 /* Rx Parser memory Uncorrectable Error Status When set, indicates that an uncorrectable error is detected at Rx Parser memory interface. */
    vuint32_t _unused_15:17;           /* Reserved. */
  } B;
} GMAC_MTL_ECC_INTERRUPT_STATUS_tag;

typedef union GMAC_MTL_ECC_ERR_STS_RCTL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t EESRE:1;                 /* MTL ECC Error Status Read Enable When this bit is set, based on the EMS field of this register, the respective memory's error status values will be captured as described below - The correctable and uncorrectable error count values will be captured into MTL_ECC_Err_Cnt_Status register - The address location's of correctable and uncorrectable errors will be captured into MTL_ECC_Err_Addr_Status register. Hardware resets this bit when all the status values are captured into the MTL_ECC_Err_Cnt_Status and MTL_ECC_Err_Addr_Status registers. */
    vuint32_t EMS:3;                   /* MTL ECC Memory Selection When EESRE bit of this register is set, this field indicates which memory's error status value to be read. The memory selection encoding is as described below. */
    vuint32_t CCES:1;                  /* Clear Correctable Error Status When this bit is set along with EESRE bit of this register, based on the EMS field of this register, the respective memory's correctable error address and correctable error count values will be cleared upon reading. Hardware resets this bit when all the error status values are cleared. */
    vuint32_t CUES:1;                  /* Clear Uncorrectable Error Status When this bit is set along with EESRE bit of this register, based on the EMS field of this register, the respective memory's uncorrectable error address and uncorrectable error count values will be cleared upon reading. Hardware resets this bit when all the error status values are cleared. */
    vuint32_t _unused_6:26;            /* Reserved. */
  } B;
} GMAC_MTL_ECC_ERR_STS_RCTL_tag;

typedef union GMAC_MTL_ECC_ERR_ADDR_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ECEAS:16;                /* MTL ECC Correctable Error Address Status Based on the EMS field of MTL_ECC_Err_Sts_Rctl register, this field holds the respective memory's address locations for which a correctable error is detected. When MEEAO bit of MTL_ECC_Control register is set, this field holds the last valid address of memory for which correctable error or address mismatch is detected. When MEEAO bit of MTL_ECC_Control register is reset, this field holds the first address of the memory for which correctable error is detected. */
    vuint32_t EUEAS:16;                /* MTL ECC Uncorrectable Error Address Status Based on the EMS field of MTL_ECC_Err_Sts_Rctl register, this field holds the respective memory's address locations for which an uncorrectable error or address mismatch is detected. When MEEAO bit of MTL_ECC_Control register is set, this field holds the last valid address of memory for which either an uncorrectable error or an address mismatch is detected. When MEEAO bit of MTL_ECC_Control register is reset, this field holds the first address of the memory for which either an uncorrectable error or address mismatch is detected. */
  } B;
} GMAC_MTL_ECC_ERR_ADDR_STATUS_tag;

typedef union GMAC_MTL_ECC_ERR_CNTR_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ECECS:8;                 /* MTL ECC Correctable Error Counter Status Based on the EMS field of MTL_ECC_Err_Cntr_Rctl register, this field holds the respective memory's correctable error count value. */
    vuint32_t _unused_8:8;             /* Reserved. */
    vuint32_t EUECS:4;                 /* MTL ECC Uncorrectable Error Counter Status Based on the EMS field of MTL_ECC_Err_Cntr_Rctl register, this field holds the respective memory's uncorrectable error count value. */
    vuint32_t _unused_20:12;           /* Reserved. */
  } B;
} GMAC_MTL_ECC_ERR_CNTR_STATUS_tag;

typedef union GMAC_MTL_DPP_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t EDPP:1;                  /* Enable Data path Parity Protection When set to 1, enables the parity protection for EQOS datapath by generating and checking the parity on EQOS datapath. When set to 0, disables the parity protection for EQOS datapath. */
    vuint32_t OPE:1;                   /* Odd Parity Enable When set to 1, enables odd parity protection on all the external interfaces and when set to 0, enables even parity protection on all the external interfaces. */
    vuint32_t _unused_2:1;             /* Reserved. */
    vuint32_t _unused_3:1;             /* Reserved. */
    vuint32_t IPEID:1;                 /* Insert Parity Error in Interface Data parity generator When set to 1, parity bit of first valid input data generated by the Interface data parity generator (or at PG1 as shown in Fig.Transmit data path parity protection) is flipped. Following are the input data bus on which parity bits are generated based on configuration selected In AHB Config, hrdata_i In AXI config, rdata_m_i In DMA Config, mdc_rdata_i In MTL Config, ati_data_i Hardware will clear this bit once the respective parity bit is flipped. */
    vuint32_t IPEMC:1;                 /* Insert Parity Error in MTL checksum parity generator When set to 1, parity bit of first valid data generated by the MTL checksum parity generator (or at PG5 as shown in Fig.Transmit data path parity protection) is flipped. Hardware will clear this bit once the respective parity bit is flipped. */
    vuint32_t IPEMTS:1;                /* Insert Parity Error in MTL Tx Status parity generator When set to 1, parity bit of first valid data generated by the MTL Tx Status parity generator (or at PG6 as shown in Fig.Transmit data path parity protection) is flipped. Hardware will clear this bit once respective parity bit is flipped. */
    vuint32_t IPEMRF:1;                /* Insert Parity Error in MTL Rx FIFO read control parity generator When set to 1, parity bit of first valid data generated by the MTL Rx FIFO read control parity generator (or at PG7 as shown in Fig.Receive data path parity protection) is flipped. Hardware will clear this bit once respective parity bit is flipped. */
    vuint32_t IPEDDC:1;                /* Insert Parity Error in DMA DTX Control word parity generator When set to 1, parity bit of first valid data generated by the DMA DTX Control word parity generator (or at PG2 as shown in Fig.Transmit data path parity protection) is flipped. Hardware will clear this bit once respective parity bit is flipped. */
    vuint32_t _unused_9:1;             /* Reserved. */
    vuint32_t IPETD:1;                 /* Insert Parity error in Tx write-back Descriptor parity generator When set to 1, parity bit of first valid data generated by the DMA Tx write-back descriptor parity generator(or at PG4 as shown in Fig.Transmit data path parity protection) is flipped. Hardware will clear this bit once respective parity bit is flipped. */
    vuint32_t IPERD:1;                 /* Insert Parity error in Rx write-back Descriptor parity generator When set to 1, parity bit of first valid data generated by the DMA Rx write-back descriptor parity generator(or at PG8 as shown in Fig.Receive data path parity protection) is flipped. */
    vuint32_t _unused_12:1;            /* Reserved. */
    vuint32_t _unused_13:1;            /* Reserved. */
    vuint32_t _unused_14:18;           /* Reserved. */
  } B;
} GMAC_MTL_DPP_CONTROL_tag;

typedef union GMAC_MTL_TXQ0_OPERATION_MODE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t FTQ:1;                   /* Flush Transmit Queue When this bit is set, the Tx queue controller logic is reset to its default values. Therefore, all the data in the Tx queue is lost or flushed. This bit is internally reset when the flushing operation is complete. Until this bit is reset, you should not write to the MTL_TxQ1_Operation_Mode register. The data which is already accepted by the MAC transmitter is not flushed. It is scheduled for transmission and results in underflow and runt packet transmission. Note: The flush operation is complete only when the Tx queue is empty and the application has accepted the pending Tx Status of all transmitted packets. To complete this flush operation, the PHY Tx clock (clk_tx_i) should be active. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t TSF:1;                   /* Transmit Store and Forward When this bit is set, the transmission starts when a full packet resides in the MTL Tx queue. When this bit is set, the TTC values specified in Bits[6:4] of this register are ignored. This bit should be changed only when the transmission is stopped. */
    vuint32_t TXQEN:2;                 /* Transmit Queue Enable This field is used to enable/disable the transmit queue 0. - 2'b00: Not enabled - 2'b01: Reserved - 2'b10: Enabled - 2'b11: Reserved This field is Read Only in Single Queue configurations and Read Write in Multiple Queue configurations. Note: In multiple Tx queues configuration, all the queues are disabled by default. Enable the Tx queue by programming this field. */
    vuint32_t TTC:3;                   /* Transmit Threshold Control These bits control the threshold level of the MTL Tx Queue. The transmission starts when the packet size within the MTL Tx Queue is larger than the threshold. In addition, full packets with length less than the threshold are also transmitted. These bits are used only when the TSF bit is reset. */
    vuint32_t _unused_7:9;             /* Reserved. */
    vuint32_t TQS:7;                   /* Transmit Queue Size This field indicates the size of the allocated Transmit queues in blocks of 256 bytes. The TQS field is read-write only if the number of Tx Queues more than one, the reset value is 0x0 and indicates size of 256 bytes. When the number of Tx Queues is one, the field is read-only and the configured TX FIFO size in blocks of 256 bytes is reflected in the reset value. The width of this field depends on the Tx memory size selected in your configuration. For example, if the memory size is 2048, the width of this field is 3 bits: LOG2(2048/256) = LOG2(8) = 3 bits */
    vuint32_t _unused_23:9;            /* Reserved. */
  } B;
} GMAC_MTL_TXQ0_OPERATION_MODE_tag;

typedef union GMAC_MTL_TXQ0_UNDERFLOW_union_tag {
  vuint32_t R;
  struct {
    vuint32_t UFFRMCNT:11;             /* Underflow Packet Counter This field indicates the number of packets aborted by the controller because of Tx Queue Underflow. This counter is incremented each time the MAC aborts outgoing packet because of underflow. The counter is cleared when this register is read with mci_be_i[0] at 1'b1. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t UFCNTOVF:1;              /* Overflow Bit for Underflow Packet Counter This bit is set every time the Tx queue Underflow Packet Counter field overflows, that is, it has crossed the maximum count. In such a scenario, the overflow packet counter is reset to all-zeros and this bit indicates that the rollover happened. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t _unused_12:20;           /* Reserved. */
  } B;
} GMAC_MTL_TXQ0_UNDERFLOW_tag;

typedef union GMAC_MTL_TXQ0_DEBUG_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXQPAUSED:1;             /* Transmit Queue in Pause When this bit is high and the Rx flow control is enabled, it indicates that the Tx Queue is in the Pause condition (in the full-duplex only mode) because of the following: - Reception of the PFC packet for the priorities assigned to the Tx Queue when PFC is enabled - Reception of 802.3x Pause packet when PFC is disabled */
    vuint32_t TRCSTS:2;                /* MTL Tx Queue Read Controller Status This field indicates the state of the Tx Queue Read Controller: */
    vuint32_t TWCSTS:1;                /* MTL Tx Queue Write Controller Status When high, this bit indicates that the MTL Tx Queue Write Controller is active, and it is transferring the data to the Tx Queue. */
    vuint32_t TXQSTS:1;                /* MTL Tx Queue Not Empty Status When this bit is high, it indicates that the MTL Tx Queue is not empty and some data is left for transmission. */
    vuint32_t TXSTSFSTS:1;             /* MTL Tx Status FIFO Full Status When high, this bit indicates that the MTL Tx Status FIFO is full. Therefore, the MTL cannot accept any more packets for transmission. */
    vuint32_t _unused_6:10;            /* Reserved. */
    vuint32_t PTXQ:3;                  /* Number of Packets in the Transmit Queue This field indicates the current number of packets in the Tx Queue. When the DTXSTS bit of MTL_Operation_Mode register is set to 1, this field does not reflect the number of packets in the Transmit queue. */
    vuint32_t _unused_19:1;            /* Reserved. */
    vuint32_t STXSTSF:3;               /* Number of Status Words in Tx Status FIFO of Queue This field indicates the current number of status in the Tx Status FIFO of this queue. When the DTXSTS bit of MTL_Operation_Mode register is set to 1, this field does not reflect the number of status words in Tx Status FIFO. */
    vuint32_t _unused_23:9;            /* Reserved. */
  } B;
} GMAC_MTL_TXQ0_DEBUG_tag;

typedef union GMAC_MTL_TXQ0_ETS_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ABS:24;                  /* Average Bits per Slot This field contains the average transmitted bits per slot. When the DCB operation is enabled for Queue 0, this field is computed over every 10 million bit times slot (4 ms in 2500 Mbps; 10 ms in 1000 Mbps; 100 ms in 100 Mbps). The maximum value is 0x989680. */
    vuint32_t _unused_24:8;            /* Reserved. */
  } B;
} GMAC_MTL_TXQ0_ETS_STATUS_tag;

typedef union GMAC_MTL_TXQ0_QUANTUM_WEIGHT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ISCQW:21;                /* Quantum or Weights When the DCB operation is enabled with DWRR algorithm for Queue 0 traffic, this field contains the quantum value in bytes to be added to credit during every queue scanning cycle. The maximum value is 0x1312D0 bytes. When DCB operation is enabled with WFQ algorithm for Queue 0 traffic, this field contains the weight for this queue. The maximum value is 0x3FFF where weight of 0 indicates 100% bandwidth. Bits[20:14] must be written to zero. The higher the programmed weights lesser the bandwidth allocated for the particular Transmit Queue. This is because the weights are used to compute the packet finish time (weights*packet_size). Lesser the finish time, higher the probability of the packet getting scheduled first and using more bandwidth. When DCB operation or generic queuing operation is enabled with WRR algorithm for Queue 0 traffic, this field contains the weight for this queue. The maximum value is 0x64. Bits [20:7] must be written to zero. */
    vuint32_t _unused_21:11;           /* Reserved. */
  } B;
} GMAC_MTL_TXQ0_QUANTUM_WEIGHT_tag;

typedef union GMAC_MTL_Q0_INTERRUPT_CONTROL_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXUNFIS:1;               /* Transmit Queue Underflow Interrupt Status This bit indicates that the Transmit Queue had an underflow while transmitting the packet. Transmission is suspended and an Underflow Error TDES3[2] is set. This bit is cleared when the application writes 1 to this bit. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t ABPSIS:1;                /* Average Bits Per Slot Interrupt Status When set, this bit indicates that the MAC has updated the ABS value. This bit is cleared when the application writes 1 to this bit. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t _unused_2:6;             /* Reserved. */
    vuint32_t TXUIE:1;                 /* Transmit Queue Underflow Interrupt Enable When this bit is set, the Transmit Queue Underflow interrupt is enabled. When this bit is reset, the Transmit Queue Underflow interrupt is disabled. */
    vuint32_t ABPSIE:1;                /* Average Bits Per Slot Interrupt Enable When this bit is set, the MAC asserts the sbd_intr_o or mci_intr_o interrupt when the average bits per slot status is updated. When this bit is cleared, the interrupt is not asserted for such an event. */
    vuint32_t _unused_10:6;            /* Reserved. */
    vuint32_t RXOVFIS:1;               /* Receive Queue Overflow Interrupt Status This bit indicates that the Receive Queue had an overflow while receiving the packet. If a partial packet is transferred to the application, the overflow status is set in RDES3[21]. This bit is cleared when the application writes 1 to this bit. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t _unused_17:7;            /* Reserved. */
    vuint32_t RXOIE:1;                 /* Receive Queue Overflow Interrupt Enable When this bit is set, the Receive Queue Overflow interrupt is enabled. When this bit is reset, the Receive Queue Overflow interrupt is disabled. */
    vuint32_t _unused_25:7;            /* Reserved. */
  } B;
} GMAC_MTL_Q0_INTERRUPT_CONTROL_STATUS_tag;

typedef union GMAC_MTL_RXQ0_OPERATION_MODE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RTC:2;                   /* Receive Queue Threshold Control These bits control the threshold level of the MTL Rx queue (in bytes): The received packet is transferred to the application or DMA when the packet size within the MTL Rx queue is larger than the threshold. In addition, full packets with length less than the threshold are automatically transferred. This field is valid only when the RSF bit is zero. This field is ignored when the RSF bit is set to 1. */
    vuint32_t _unused_2:1;             /* Reserved. */
    vuint32_t FUP:1;                   /* Forward Undersized Good Packets When this bit is set, the Rx queue forwards the undersized good packets (packets with no error and length less than 64 bytes), including pad-bytes and CRC. When this bit is reset, the Rx queue drops all packets of less than 64 bytes, unless a packet is already transferred because of the lower value of Rx Threshold, for example, RTC = 01. */
    vuint32_t FEP:1;                   /* Forward Error Packets When this bit is reset, the Rx queue drops packets with error status (CRC error, GMII_ER, watchdog timeout, or overflow). However, if the start byte (write) pointer of a packet is already transferred to the read controller side (in Threshold mode), the packet is not dropped. When this bit is set, all packets except the runt error packets are forwarded to the application or DMA. If the RSF bit is set and the Rx queue overflows when a partial packet is written, the packet is dropped irrespective of the setting of this bit. However, if the RSF bit is reset and the Rx queue overflows when a partial packet is written, a partial packet may be forwarded to the application or DMA. */
    vuint32_t RSF:1;                   /* Receive Queue Store and Forward When this bit is set, the DWC_ether_qos reads a packet from the Rx queue only after the complete packet has been written to it, ignoring the RTC field of this register. When this bit is reset, the Rx queue operates in the Threshold (cut-through) mode, subject to the threshold specified by the RTC field of this register. */
    vuint32_t DIS_TCP_EF:1;            /* Disable Dropping of TCP/IP Checksum Error Packets When this bit is set, the MAC does not drop the packets which only have the errors detected by the Receive Checksum Offload engine. Such packets have errors only in the encapsulated payload. There are no errors (including FCS error) in the Ethernet packet received by the MAC. When this bit is reset, all error packets are dropped if the FEP bit is reset. */
    vuint32_t EHFC:1;                  /* Enable Hardware Flow Control When this bit is set, the flow control signal operation, based on the fill-level of Rx queue, is enabled. When reset, the flow control operation is disabled. */
    vuint32_t RFA:6;                   /* Threshold for Activating Flow Control (in half-duplex and full-duplex These bits control the threshold (fill-level of Rx queue) at which the flow control is activated: For more information on encoding for this field, see RFD. */
    vuint32_t RFD:6;                   /* Threshold for Deactivating Flow Control (in half-duplex and full-duplex modes) These bits control the threshold (fill-level of Rx queue) at which the flow control is de-asserted after activation: - 0: Full minus 1 KB, that is, FULL 1 KB - 1: Full minus 1.5 KB, that is, FULL 1.5 KB - 2: Full minus 2 KB, that is, FULL 2 KB - 3: Full minus 2.5 KB, that is, FULL 2.5 KB - ... - 62: Full minus 32 KB, that is, FULL 32 KB - 63: Full minus 32.5 KB, that is, FULL 32.5 KB The de-assertion is effective only after flow control is asserted. Note: The value must be programmed in such a way to make sure that the threshold is a positive number. When the EHFC is set high, these values are applicable only when the Rx queue size determined by the RQS field of this register, is equal to or greater than 4 KB. For a given queue size, the values ranges between 0 and the encoding for FULL minus (QSIZE - 0.5 KB) and all other values are illegal. Here the term FULL and QSIZE refers to the queue size determined by the RQS field of this register. The width of this field depends on RX FIFO size selected during the configuration. Remaining bits are reserved and read only. */
    vuint32_t RQS:7;                   /* Receive Queue Size This field indicates the size of the allocated Receive queues in blocks of 256 bytes. The RQS field is read-write only if the number of Rx Queues more than one, the reset value is 0x0 and indicates size of 256 bytes. When the number of Rx Queues is one, the field is read-only and the configured RX FIFO size in blocks of 256 bytes is reflected in the reset value. The width of this field depends on the Rx memory size selected in your configuration. For example, if the memory size is 2048, the width of this field is 3 bits: LOG2(2048/256) = LOG2(8) = 3 bits */
    vuint32_t _unused_27:5;            /* Reserved. */
  } B;
} GMAC_MTL_RXQ0_OPERATION_MODE_tag;

typedef union GMAC_MTL_RXQ0_MISSED_PACKET_OVERFLOW_CNT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t OVFPKTCNT:11;            /* Overflow Packet Counter This field indicates the number of packets discarded by the DWC_ether_qos because of Receive queue overflow. This counter is incremented each time the DWC_ether_qos discards an incoming packet because of overflow. This counter is reset when this register is read with mci_be_i[0] at 1'b1. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t OVFCNTOVF:1;             /* Overflow Counter Overflow Bit When set, this bit indicates that the Rx Queue Overflow Packet Counter field crossed the maximum limit. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t _unused_12:4;            /* Reserved. */
    vuint32_t MISPKTCNT:11;            /* Missed Packet Counter This field indicates the number of packets missed by the DWC_ether_qos because the application asserted ari_pkt_flush_i[] for this queue. This counter is reset when this register is read with mci_be_i[0] at 1b1. This counter is incremented by 1 when the DMA discards the packet because of buffer unavailability. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t MISCNTOVF:1;             /* Missed Packet Counter Overflow Bit When set, this bit indicates that the Rx Queue Missed Packet Counter crossed the maximum limit. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t _unused_28:4;            /* Reserved. */
  } B;
} GMAC_MTL_RXQ0_MISSED_PACKET_OVERFLOW_CNT_tag;

typedef union GMAC_MTL_RXQ0_DEBUG_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RWCSTS:1;                /* MTL Rx Queue Write Controller Active Status When high, this bit indicates that the MTL Rx queue Write controller is active, and it is transferring a received packet to the Rx Queue. */
    vuint32_t RRCSTS:2;                /* MTL Rx Queue Read Controller State This field gives the state of the Rx queue Read controller: */
    vuint32_t _unused_3:1;             /* Reserved. */
    vuint32_t RXQSTS:2;                /* MTL Rx Queue Fill-Level Status This field gives the status of the fill-level of the Rx Queue: */
    vuint32_t _unused_6:10;            /* Reserved. */
    vuint32_t PRXQ:14;                 /* Number of Packets in Receive Queue This field indicates the current number of packets in the Rx Queue. The theoretical maximum value for this field is 256KB/16B = 16K Packets, that is, Max_Queue_Size/Min_Packet_Size. */
    vuint32_t _unused_30:2;            /* Reserved. */
  } B;
} GMAC_MTL_RXQ0_DEBUG_tag;

typedef union GMAC_MTL_RXQ0_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXQ_WEGT:3;              /* Receive Queue Weight This field indicates the weight assigned to the Rx Queue 0. The weight is used as the number of continuous PBL or packets requests (depending on the RXQ_FRM_ARBIT) allocated to the queue in one arbitration cycle. */
    vuint32_t RXQ_FRM_ARBIT:1;         /* Receive Queue Packet Arbitration When this bit is set, the DWC_ether_qos drives the packet data to the ARI interface such that the entire packet data of currently-selected queue is transmitted before switching to other queue. When this bit is reset, the DWC_ether_qos drives the packet data to the ARI interface such that the following amount of data of currently-selected queue is transmitted before switching to other queue: - PBL amount of data (indicated by ari_qN_pbl_i[]) or - Complete data of a packet The status and the timestamp are not a part of the PBL data. Therefore, the DWC_ether_qos drives the complete status (including timestamp status) during first PBL request for the packet (in store-and-forward mode) or the last PBL request for the packet (in Threshold mode). */
    vuint32_t _unused_4:28;            /* Reserved. */
  } B;
} GMAC_MTL_RXQ0_CONTROL_tag;

typedef union GMAC_MTL_TXQ1_OPERATION_MODE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t FTQ:1;                   /* Flush Transmit Queue When this bit is set, the Tx queue controller logic is reset to its default values. Therefore, all the data in the Tx queue is lost or flushed. This bit is internally reset when the flushing operation is complete. Until this bit is reset, you should not write to the MTL_TxQ1_Operation_Mode register. The data which is already accepted by the MAC transmitter is not flushed. It is scheduled for transmission and results in underflow and runt packet transmission. Note: The flush operation is complete only when the Tx queue is empty and the application has accepted the pending Tx Status of all transmitted packets. To complete this flush operation, the PHY Tx clock (clk_tx_i) should be active. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t TSF:1;                   /* Transmit Store and Forward When this bit is set, the transmission starts when a full packet resides in the MTL Tx queue. When this bit is set, the TTC values specified in Bits[6:4] of this register are ignored. This bit should be changed only when the transmission is stopped. */
    vuint32_t TXQEN:2;                 /* Transmit Queue Enable This field is used to enable/disable the transmit queue 0. - 2'b00: Not enabled - 2'b01: Enable in AV mode - 2'b10: Enabled - 2'b11: Reserved Note: In multiple Tx queues configuration, all the queues are disabled by default. Enable the Tx queue by programming this field. */
    vuint32_t TTC:3;                   /* Transmit Threshold Control These bits control the threshold level of the MTL Tx Queue. The transmission starts when the packet size within the MTL Tx Queue is larger than the threshold. In addition, full packets with length less than the threshold are also transmitted. These bits are used only when the TSF bit is reset. */
    vuint32_t _unused_7:9;             /* Reserved. */
    vuint32_t TQS:7;                   /* Transmit Queue Size This field indicates the size of the allocated Transmit queues in blocks of 256 bytes. The TQS field is read-write only if the number of Tx Queues more than one, the reset value is 0x0 and indicates size of 256 bytes. When the number of Tx Queues is one, the field is read-only and the configured TX FIFO size in blocks of 256 bytes is reflected in the reset value. The width of this field depends on the Tx memory size selected in your configuration. For example, if the memory size is 2048, the width of this field is 3 bits: LOG2(2048/256) = LOG2(8) = 3 bits */
    vuint32_t _unused_23:9;            /* Reserved. */
  } B;
} GMAC_MTL_TXQ1_OPERATION_MODE_tag;

typedef union GMAC_MTL_TXQ1_UNDERFLOW_union_tag {
  vuint32_t R;
  struct {
    vuint32_t UFFRMCNT:11;             /* Underflow Packet Counter This field indicates the number of packets aborted by the controller because of Tx Queue Underflow. This counter is incremented each time the MAC aborts outgoing packet because of underflow. The counter is cleared when this register is read with mci_be_i[0] at 1'b1. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t UFCNTOVF:1;              /* Overflow Bit for Underflow Packet Counter This bit is set every time the Tx queue Underflow Packet Counter field overflows, that is, it has crossed the maximum count. In such a scenario, the overflow packet counter is reset to all-zeros and this bit indicates that the rollover happened. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t _unused_12:20;           /* Reserved. */
  } B;
} GMAC_MTL_TXQ1_UNDERFLOW_tag;

typedef union GMAC_MTL_TXQ1_DEBUG_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXQPAUSED:1;             /* Transmit Queue in Pause When this bit is high and the Rx flow control is enabled, it indicates that the Tx Queue is in the Pause condition (in the full-duplex only mode) because of the following: - Reception of the PFC packet for the priorities assigned to the Tx Queue when PFC is enabled - Reception of 802.3x Pause packet when PFC is disabled */
    vuint32_t TRCSTS:2;                /* MTL Tx Queue Read Controller Status This field indicates the state of the Tx Queue Read Controller: */
    vuint32_t TWCSTS:1;                /* MTL Tx Queue Write Controller Status When high, this bit indicates that the MTL Tx Queue Write Controller is active, and it is transferring the data to the Tx Queue. */
    vuint32_t TXQSTS:1;                /* MTL Tx Queue Not Empty Status When this bit is high, it indicates that the MTL Tx Queue is not empty and some data is left for transmission. */
    vuint32_t TXSTSFSTS:1;             /* MTL Tx Status FIFO Full Status When high, this bit indicates that the MTL Tx Status FIFO is full. Therefore, the MTL cannot accept any more packets for transmission. */
    vuint32_t _unused_6:10;            /* Reserved. */
    vuint32_t PTXQ:3;                  /* Number of Packets in the Transmit Queue This field indicates the current number of packets in the Tx Queue. When the DTXSTS bit of MTL_Operation_Mode register is set to 1, this field does not reflect the number of packets in the Transmit queue. */
    vuint32_t _unused_19:1;            /* Reserved. */
    vuint32_t STXSTSF:3;               /* Number of Status Words in Tx Status FIFO of Queue This field indicates the current number of status in the Tx Status FIFO of this queue. When the DTXSTS bit of MTL_Operation_Mode register is set to 1, this field does not reflect the number of status words in Tx Status FIFO. */
    vuint32_t _unused_23:9;            /* Reserved. */
  } B;
} GMAC_MTL_TXQ1_DEBUG_tag;

typedef union GMAC_MTL_TXQ1_ETS_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved. */
    vuint32_t AVALG:1;                 /* AV Algorithm When Queue 1 is programmed for AV, this field configures the scheduling algorithm for this queue: This bit when set, indicates credit based shaper algorithm (CBS) is selected for Queue 1 traffic. When reset, strict priority is selected. */
    vuint32_t CC:1;                    /* Credit Control When this bit is set, the accumulated credit parameter in the credit-based shaper algorithm logic is not reset to zero when there is positive credit and no packet to transmit in Channel 1. The credit accumulates even when there is no packet waiting in Channel 1 and another channel is transmitting. When this bit is reset, the accumulated credit parameter in the credit-based shaper algorithm logic is set to zero when there is positive credit and no packet to transmit in Channel 1. When there is no packet waiting in Channel 1 and other channel is transmitting, no credit is accumulated. */
    vuint32_t SLC:3;                   /* Slot Count If the credit-based shaper algorithm is enabled, the software can program the number of slots (of duration programmed in DMA_CH[n]_Slot_Interval register) over which the average transmitted bits per slot, provided in the MTL_TxQ[n]_ETS_Status register, need to be computed for Queue. The encoding is as follows: */
    vuint32_t _unused_7:25;            /* Reserved. */
  } B;
} GMAC_MTL_TXQ1_ETS_CONTROL_tag;

typedef union GMAC_MTL_TXQ1_ETS_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ABS:24;                  /* Average Bits per Slot This field contains the average transmitted bits per slot. If AV operation is enabled, this field is computed over number of slots, programmed in the SLC field of MTL_TxQ[n]_ETS_CONTROL register. The maximum value of this field is 0x6_4000 in 100 Mbps, 0x3E_8000 in 1000 Mbps and 9C_4000 in 2500 Mbps mode respectively. When the DCB operation is enabled for Queue, this field is computed over every 10 million bit times slot (4 ms in 2500 Mbps; 10 ms in 1000 Mbps; 100 ms in 100 Mbps). The maximum value is 0x989680. */
    vuint32_t _unused_24:8;            /* Reserved. */
  } B;
} GMAC_MTL_TXQ1_ETS_STATUS_tag;

typedef union GMAC_MTL_TXQ1_QUANTUM_WEIGHT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ISCQW:21;                /* idleSlopeCredit, Quantum or Weights - idleSlopeCredit When AV feature is enabled, this field contains the idleSlopeCredit value required for the credit-based shaper algorithm for Queue 1. This is the rate of change of credit in bits per cycle (40 ns for 100 Mbps; 8 ns for 1000 Mbps; 3.2 ns for 2500 Mbps) when the credit is increasing. The software should program this field with computed credit in bits per cycle scaled by 1,024. The maximum value is portTransmitRate, that is, 0x2000 in 1000/2500 Mbps mode and 0x1000 in 100 Mbps mode. Bits[20:14] must be written to zero. - Quantum When the DCB operation is enabled with DWRR algorithm for Queue 1 traffic, this field contains the quantum value in bytes to be added to credit during every queue scanning cycle. The maximum value is 0x1312D0 bytes. - Weights When DCB operation is enabled with WFQ algorithm for Queue 1 traffic, this field contains the weight for this queue. The maximum value is 0x3FFF where weight of 0 indicates 100% bandwidth. Bits[20:14] must be written to zero. When DCB operation or generic queuing operation is enabled with WRR algorithm for Queue 1 traffic, this field contains the weight for this queue. The maximum value is 0x64. Bits [20:7] must be written to zero. - Note 1: In multiple Queue configuration this field in respective per queue register must be programmed to some non-zero value when multiple queues are enabled or single queue other than Q0 is enabled. This field need not be programmed when only Q0 is enabled. In general, when WRR algorithm is selected a non-zero value must be programmed on both Receive and Transmit. In Receive, the register is MTL_Operation_Mode register. - Note 2: For WFQ algorithm, higher the programmed weights lesser the bandwidth allocated for that Transmit Queue. The finish time is not a function of particular packet alone but it is as per the formula: (previous_finish_time of particular Transmit Queue + (weights*packet_size)) - Note 3: The weights programmed do not correspond to the number of packets but the fraction of bandwidth or time allocated for particular queue w.r.t. total BW or time. */
    vuint32_t _unused_21:11;           /* Reserved. */
  } B;
} GMAC_MTL_TXQ1_QUANTUM_WEIGHT_tag;

typedef union GMAC_MTL_TXQ1_SENDSLOPECREDIT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t SSC:14;                  /* sendSlopeCredit Value When AV operation is enabled, this field contains the sendSlopeCredit value required for credit-based shaper algorithm for Queue 1. This is the rate of change of credit in bits per cycle (40 ns, 8 ns and 3.2 ns for 100 Mbps, 1000 Mbps and 2500 Mbps respectively) when the credit is decreasing. The software should program this field with computed credit in bits per cycle scaled by 1,024. The maximum value is portTransmitRate, that is, 0x2000 in 1000/2500 Mbps mode and 0x1000 in 100 Mbps mode. This field should be programmed with absolute sendSlopeCredit value. The credit-based shaper logic subtracts it from the accumulated credit when Channel 1 is selected for transmission. */
    vuint32_t _unused_14:18;           /* Reserved. */
  } B;
} GMAC_MTL_TXQ1_SENDSLOPECREDIT_tag;

typedef union GMAC_MTL_TXQ1_HICREDIT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t HC:29;                   /* hiCredit Value When the AV feature is enabled, this field contains the hiCredit value required for the credit-based shaper algorithm. This is the maximum value that can be accumulated in the credit parameter. This is specified in bits scaled by 1,024. The maximum value is maxInterferenceSize, that is, best-effort maximum packet size (16,384 bytes or 131,072 bits). The value to be specified is 131,072 * 1,024 = 134,217,728 or 0x0800_0000. */
    vuint32_t _unused_29:3;            /* Reserved. */
  } B;
} GMAC_MTL_TXQ1_HICREDIT_tag;

typedef union GMAC_MTL_TXQ1_LOCREDIT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t LC:29;                   /* loCredit Value When AV operation is enabled, this field contains the loCredit value required for the credit-based shaper algorithm. This is the minimum value that can be accumulated in the credit parameter. This is specified in bits scaled by 1,024. The maximum value to be programmed is corresponds to twice the maxFrameSize transmitted from this queue. If the maxFrameSize is 8192 bytes, then (8192*2) * 8 * 1024 = 134,217,728 or 0x0800_0000. Because it is a negative value, the programmed value is 2's complement of the value, that is, 0x1800_0000. */
    vuint32_t _unused_29:3;            /* Reserved. */
  } B;
} GMAC_MTL_TXQ1_LOCREDIT_tag;

typedef union GMAC_MTL_Q1_INTERRUPT_CONTROL_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXUNFIS:1;               /* Transmit Queue Underflow Interrupt Status This bit indicates that the Transmit Queue had an underflow while transmitting the packet. Transmission is suspended and an Underflow Error TDES3[2] is set. This bit is cleared when the application writes 1 to this bit. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t ABPSIS:1;                /* Average Bits Per Slot Interrupt Status When set, this bit indicates that the MAC has updated the ABS value. This bit is cleared when the application writes 1 to this bit. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t _unused_2:6;             /* Reserved. */
    vuint32_t TXUIE:1;                 /* Transmit Queue Underflow Interrupt Enable When this bit is set, the Transmit Queue Underflow interrupt is enabled. When this bit is reset, the Transmit Queue Underflow interrupt is disabled. */
    vuint32_t ABPSIE:1;                /* Average Bits Per Slot Interrupt Enable When this bit is set, the MAC asserts the sbd_intr_o or mci_intr_o interrupt when the average bits per slot status is updated. When this bit is cleared, the interrupt is not asserted for such an event. */
    vuint32_t _unused_10:6;            /* Reserved. */
    vuint32_t RXOVFIS:1;               /* Receive Queue Overflow Interrupt Status This bit indicates that the Receive Queue had an overflow while receiving the packet. If a partial packet is transferred to the application, the overflow status is set in RDES3[21]. This bit is cleared when the application writes 1 to this bit. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t _unused_17:7;            /* Reserved. */
    vuint32_t RXOIE:1;                 /* Receive Queue Overflow Interrupt Enable When this bit is set, the Receive Queue Overflow interrupt is enabled. When this bit is reset, the Receive Queue Overflow interrupt is disabled. */
    vuint32_t _unused_25:7;            /* Reserved. */
  } B;
} GMAC_MTL_Q1_INTERRUPT_CONTROL_STATUS_tag;

typedef union GMAC_MTL_RXQ1_OPERATION_MODE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RTC:2;                   /* Receive Queue Threshold Control These bits control the threshold level of the MTL Rx queue (in bytes): The received packet is transferred to the application or DMA when the packet size within the MTL Rx queue is larger than the threshold. In addition, full packets with length less than the threshold are automatically transferred. This field is valid only when the RSF bit is zero. This field is ignored when the RSF bit is set to 1. */
    vuint32_t _unused_2:1;             /* Reserved. */
    vuint32_t FUP:1;                   /* Forward Undersized Good Packets When this bit is set, the Rx queue forwards the undersized good packets (packets with no error and length less than 64 bytes), including pad-bytes and CRC. When this bit is reset, the Rx queue drops all packets of less than 64 bytes, unless a packet is already transferred because of the lower value of Rx Threshold, for example, RTC = 01. */
    vuint32_t FEP:1;                   /* Forward Error Packets When this bit is reset, the Rx queue drops packets with error status (CRC error, GMII_ER, watchdog timeout, or overflow). However, if the start byte (write) pointer of a packet is already transferred to the read controller side (in Threshold mode), the packet is not dropped. When this bit is set, all packets except the runt error packets are forwarded to the application or DMA. If the RSF bit is set and the Rx queue overflows when a partial packet is written, the packet is dropped irrespective of the setting of this bit. However, if the RSF bit is reset and the Rx queue overflows when a partial packet is written, a partial packet may be forwarded to the application or DMA. */
    vuint32_t RSF:1;                   /* Receive Queue Store and Forward When this bit is set, the DWC_ether_qos reads a packet from the Rx queue only after the complete packet has been written to it, ignoring the RTC field of this register. When this bit is reset, the Rx queue operates in the Threshold (cut-through) mode, subject to the threshold specified by the RTC field of this register. */
    vuint32_t DIS_TCP_EF:1;            /* Disable Dropping of TCP/IP Checksum Error Packets When this bit is set, the MAC does not drop the packets which only have the errors detected by the Receive Checksum Offload engine. Such packets have errors only in the encapsulated payload. There are no errors (including FCS error) in the Ethernet packet received by the MAC. When this bit is reset, all error packets are dropped if the FEP bit is reset. */
    vuint32_t EHFC:1;                  /* Enable Hardware Flow Control When this bit is set, the flow control signal operation, based on the fill-level of Rx queue, is enabled. When reset, the flow control operation is disabled. */
    vuint32_t RFA:6;                   /* Threshold for Activating Flow Control (in half-duplex and full-duplex These bits control the threshold (fill-level of Rx queue) at which the flow control is activated: For more information on encoding for this field, see RFD. */
    vuint32_t RFD:6;                   /* Threshold for Deactivating Flow Control (in half-duplex and full-duplex modes) These bits control the threshold (fill-level of Rx queue) at which the flow control is de-asserted after activation: - 0: Full minus 1 KB, that is, FULL 1 KB - 1: Full minus 1.5 KB, that is, FULL 1.5 KB - 2: Full minus 2 KB, that is, FULL 2 KB - 3: Full minus 2.5 KB, that is, FULL 2.5 KB - ... - 62: Full minus 32 KB, that is, FULL 32 KB - 63: Full minus 32.5 KB, that is, FULL 32.5 KB The de-assertion is effective only after flow control is asserted. Note: The value must be programmed in such a way to make sure that the threshold is a positive number. When the EHFC is set high, these values are applicable only when the Rx queue size determined by the RQS field of this register, is equal to or greater than 4 KB. For a given queue size, the values ranges between 0 and the encoding for FULL minus (QSIZE - 0.5 KB) and all other values are illegal. Here the term FULL and QSIZE refers to the queue size determined by the RQS field of this register. The width of this field depends on RX FIFO size selected during the configuration. Remaining bits are reserved and read only. */
    vuint32_t RQS:7;                   /* Receive Queue Size This field indicates the size of the allocated Receive queues in blocks of 256 bytes. The RQS field is read-write only if the number of Rx Queues more than one, the reset value is 0x0 and indicates size of 256 bytes. When the number of Rx Queues is one, the field is read-only and the configured RX FIFO size in blocks of 256 bytes is reflected in the reset value. The width of this field depends on the Rx memory size selected in your configuration. For example, if the memory size is 2048, the width of this field is 3 bits: LOG2(2048/256) = LOG2(8) = 3 bits */
    vuint32_t _unused_27:5;            /* Reserved. */
  } B;
} GMAC_MTL_RXQ1_OPERATION_MODE_tag;

typedef union GMAC_MTL_RXQ1_MISSED_PACKET_OVERFLOW_CNT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t OVFPKTCNT:11;            /* Overflow Packet Counter This field indicates the number of packets discarded by the DWC_ether_qos because of Receive queue overflow. This counter is incremented each time the DWC_ether_qos discards an incoming packet because of overflow. This counter is reset when this register is read with mci_be_i[0] at 1'b1. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t OVFCNTOVF:1;             /* Overflow Counter Overflow Bit When set, this bit indicates that the Rx Queue Overflow Packet Counter field crossed the maximum limit. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t _unused_12:4;            /* Reserved. */
    vuint32_t MISPKTCNT:11;            /* Missed Packet Counter This field indicates the number of packets missed by the DWC_ether_qos because the application asserted ari_pkt_flush_i[] for this queue. This counter is reset when this register is read with mci_be_i[0] at 1b1. This counter is incremented by 1 when the DMA discards the packet because of buffer unavailability. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t MISCNTOVF:1;             /* Missed Packet Counter Overflow Bit When set, this bit indicates that the Rx Queue Missed Packet Counter crossed the maximum limit. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t _unused_28:4;            /* Reserved. */
  } B;
} GMAC_MTL_RXQ1_MISSED_PACKET_OVERFLOW_CNT_tag;

typedef union GMAC_MTL_RXQ1_DEBUG_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RWCSTS:1;                /* MTL Rx Queue Write Controller Active Status When high, this bit indicates that the MTL Rx queue Write controller is active, and it is transferring a received packet to the Rx Queue. */
    vuint32_t RRCSTS:2;                /* MTL Rx Queue Read Controller State This field gives the state of the Rx queue Read controller: */
    vuint32_t _unused_3:1;             /* Reserved. */
    vuint32_t RXQSTS:2;                /* MTL Rx Queue Fill-Level Status This field gives the status of the fill-level of the Rx Queue: */
    vuint32_t _unused_6:10;            /* Reserved. */
    vuint32_t PRXQ:14;                 /* Number of Packets in Receive Queue This field indicates the current number of packets in the Rx Queue. The theoretical maximum value for this field is 256KB/16B = 16K Packets, that is, Max_Queue_Size/Min_Packet_Size. */
    vuint32_t _unused_30:2;            /* Reserved. */
  } B;
} GMAC_MTL_RXQ1_DEBUG_tag;

typedef union GMAC_MTL_RXQ1_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXQ_WEGT:3;              /* Receive Queue Weight This field indicates the weight assigned to the Rx Queue 0. The weight is used as the number of continuous PBL or packets requests (depending on the RXQ_FRM_ARBIT) allocated to the queue in one arbitration cycle. */
    vuint32_t RXQ_FRM_ARBIT:1;         /* Receive Queue Packet Arbitration When this bit is set, the DWC_ether_qos drives the packet data to the ARI interface such that the entire packet data of currently-selected queue is transmitted before switching to other queue. When this bit is reset, the DWC_ether_qos drives the packet data to the ARI interface such that the following amount of data of currently-selected queue is transmitted before switching to other queue: - PBL amount of data (indicated by ari_qN_pbl_i[]) or - Complete data of a packet The status and the timestamp are not a part of the PBL data. Therefore, the DWC_ether_qos drives the complete status (including timestamp status) during first PBL request for the packet (in store-and-forward mode) or the last PBL request for the packet (in Threshold mode). */
    vuint32_t _unused_4:28;            /* Reserved. */
  } B;
} GMAC_MTL_RXQ1_CONTROL_tag;

typedef union GMAC_MTL_TXQ2_OPERATION_MODE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t FTQ:1;                   /* Flush Transmit Queue When this bit is set, the Tx queue controller logic is reset to its default values. Therefore, all the data in the Tx queue is lost or flushed. This bit is internally reset when the flushing operation is complete. Until this bit is reset, you should not write to the MTL_TxQ1_Operation_Mode register. The data which is already accepted by the MAC transmitter is not flushed. It is scheduled for transmission and results in underflow and runt packet transmission. Note: The flush operation is complete only when the Tx queue is empty and the application has accepted the pending Tx Status of all transmitted packets. To complete this flush operation, the PHY Tx clock (clk_tx_i) should be active. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t TSF:1;                   /* Transmit Store and Forward When this bit is set, the transmission starts when a full packet resides in the MTL Tx queue. When this bit is set, the TTC values specified in Bits[6:4] of this register are ignored. This bit should be changed only when the transmission is stopped. */
    vuint32_t TXQEN:2;                 /* Transmit Queue Enable This field is used to enable/disable the transmit queue 0. - 2'b00: Not enabled - 2'b01: Enable in AV mode - 2'b10: Enabled - 2'b11: Reserved Note: In multiple Tx queues configuration, all the queues are disabled by default. Enable the Tx queue by programming this field. */
    vuint32_t TTC:3;                   /* Transmit Threshold Control These bits control the threshold level of the MTL Tx Queue. The transmission starts when the packet size within the MTL Tx Queue is larger than the threshold. In addition, full packets with length less than the threshold are also transmitted. These bits are used only when the TSF bit is reset. */
    vuint32_t _unused_7:9;             /* Reserved. */
    vuint32_t TQS:7;                   /* Transmit Queue Size This field indicates the size of the allocated Transmit queues in blocks of 256 bytes. The TQS field is read-write only if the number of Tx Queues more than one, the reset value is 0x0 and indicates size of 256 bytes. When the number of Tx Queues is one, the field is read-only and the configured TX FIFO size in blocks of 256 bytes is reflected in the reset value. The width of this field depends on the Tx memory size selected in your configuration. For example, if the memory size is 2048, the width of this field is 3 bits: LOG2(2048/256) = LOG2(8) = 3 bits */
    vuint32_t _unused_23:9;            /* Reserved. */
  } B;
} GMAC_MTL_TXQ2_OPERATION_MODE_tag;

typedef union GMAC_MTL_TXQ2_UNDERFLOW_union_tag {
  vuint32_t R;
  struct {
    vuint32_t UFFRMCNT:11;             /* Underflow Packet Counter This field indicates the number of packets aborted by the controller because of Tx Queue Underflow. This counter is incremented each time the MAC aborts outgoing packet because of underflow. The counter is cleared when this register is read with mci_be_i[0] at 1'b1. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t UFCNTOVF:1;              /* Overflow Bit for Underflow Packet Counter This bit is set every time the Tx queue Underflow Packet Counter field overflows, that is, it has crossed the maximum count. In such a scenario, the overflow packet counter is reset to all-zeros and this bit indicates that the rollover happened. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t _unused_12:20;           /* Reserved. */
  } B;
} GMAC_MTL_TXQ2_UNDERFLOW_tag;

typedef union GMAC_MTL_TXQ2_DEBUG_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXQPAUSED:1;             /* Transmit Queue in Pause When this bit is high and the Rx flow control is enabled, it indicates that the Tx Queue is in the Pause condition (in the full-duplex only mode) because of the following: - Reception of the PFC packet for the priorities assigned to the Tx Queue when PFC is enabled - Reception of 802.3x Pause packet when PFC is disabled */
    vuint32_t TRCSTS:2;                /* MTL Tx Queue Read Controller Status This field indicates the state of the Tx Queue Read Controller: */
    vuint32_t TWCSTS:1;                /* MTL Tx Queue Write Controller Status When high, this bit indicates that the MTL Tx Queue Write Controller is active, and it is transferring the data to the Tx Queue. */
    vuint32_t TXQSTS:1;                /* MTL Tx Queue Not Empty Status When this bit is high, it indicates that the MTL Tx Queue is not empty and some data is left for transmission. */
    vuint32_t TXSTSFSTS:1;             /* MTL Tx Status FIFO Full Status When high, this bit indicates that the MTL Tx Status FIFO is full. Therefore, the MTL cannot accept any more packets for transmission. */
    vuint32_t _unused_6:10;            /* Reserved. */
    vuint32_t PTXQ:3;                  /* Number of Packets in the Transmit Queue This field indicates the current number of packets in the Tx Queue. When the DTXSTS bit of MTL_Operation_Mode register is set to 1, this field does not reflect the number of packets in the Transmit queue. */
    vuint32_t _unused_19:1;            /* Reserved. */
    vuint32_t STXSTSF:3;               /* Number of Status Words in Tx Status FIFO of Queue This field indicates the current number of status in the Tx Status FIFO of this queue. When the DTXSTS bit of MTL_Operation_Mode register is set to 1, this field does not reflect the number of status words in Tx Status FIFO. */
    vuint32_t _unused_23:9;            /* Reserved. */
  } B;
} GMAC_MTL_TXQ2_DEBUG_tag;

typedef union GMAC_MTL_TXQ2_ETS_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved. */
    vuint32_t AVALG:1;                 /* AV Algorithm When Queue 1 is programmed for AV, this field configures the scheduling algorithm for this queue: This bit when set, indicates credit based shaper algorithm (CBS) is selected for Queue 1 traffic. When reset, strict priority is selected. */
    vuint32_t CC:1;                    /* Credit Control When this bit is set, the accumulated credit parameter in the credit-based shaper algorithm logic is not reset to zero when there is positive credit and no packet to transmit in Channel 1. The credit accumulates even when there is no packet waiting in Channel 1 and another channel is transmitting. When this bit is reset, the accumulated credit parameter in the credit-based shaper algorithm logic is set to zero when there is positive credit and no packet to transmit in Channel 1. When there is no packet waiting in Channel 1 and other channel is transmitting, no credit is accumulated. */
    vuint32_t SLC:3;                   /* Slot Count If the credit-based shaper algorithm is enabled, the software can program the number of slots (of duration programmed in DMA_CH[n]_Slot_Interval register) over which the average transmitted bits per slot, provided in the MTL_TxQ[n]_ETS_Status register, need to be computed for Queue. The encoding is as follows: */
    vuint32_t _unused_7:25;            /* Reserved. */
  } B;
} GMAC_MTL_TXQ2_ETS_CONTROL_tag;

typedef union GMAC_MTL_TXQ2_ETS_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ABS:24;                  /* Average Bits per Slot This field contains the average transmitted bits per slot. If AV operation is enabled, this field is computed over number of slots, programmed in the SLC field of MTL_TxQ[n]_ETS_CONTROL register. The maximum value of this field is 0x6_4000 in 100 Mbps, 0x3E_8000 in 1000 Mbps and 9C_4000 in 2500 Mbps mode respectively. When the DCB operation is enabled for Queue, this field is computed over every 10 million bit times slot (4 ms in 2500 Mbps; 10 ms in 1000 Mbps; 100 ms in 100 Mbps). The maximum value is 0x989680. */
    vuint32_t _unused_24:8;            /* Reserved. */
  } B;
} GMAC_MTL_TXQ2_ETS_STATUS_tag;

typedef union GMAC_MTL_TXQ2_QUANTUM_WEIGHT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ISCQW:21;                /* idleSlopeCredit, Quantum or Weights - idleSlopeCredit When AV feature is enabled, this field contains the idleSlopeCredit value required for the credit-based shaper algorithm for Queue 1. This is the rate of change of credit in bits per cycle (40 ns for 100 Mbps; 8 ns for 1000 Mbps; 3.2 ns for 2500 Mbps) when the credit is increasing. The software should program this field with computed credit in bits per cycle scaled by 1,024. The maximum value is portTransmitRate, that is, 0x2000 in 1000/2500 Mbps mode and 0x1000 in 100 Mbps mode. Bits[20:14] must be written to zero. - Quantum When the DCB operation is enabled with DWRR algorithm for Queue 1 traffic, this field contains the quantum value in bytes to be added to credit during every queue scanning cycle. The maximum value is 0x1312D0 bytes. - Weights When DCB operation is enabled with WFQ algorithm for Queue 1 traffic, this field contains the weight for this queue. The maximum value is 0x3FFF where weight of 0 indicates 100% bandwidth. Bits[20:14] must be written to zero. When DCB operation or generic queuing operation is enabled with WRR algorithm for Queue 1 traffic, this field contains the weight for this queue. The maximum value is 0x64. Bits [20:7] must be written to zero. - Note 1: In multiple Queue configuration this field in respective per queue register must be programmed to some non-zero value when multiple queues are enabled or single queue other than Q0 is enabled. This field need not be programmed when only Q0 is enabled. In general, when WRR algorithm is selected a non-zero value must be programmed on both Receive and Transmit. In Receive, the register is MTL_Operation_Mode register. - Note 2: For WFQ algorithm, higher the programmed weights lesser the bandwidth allocated for that Transmit Queue. The finish time is not a function of particular packet alone but it is as per the formula: (previous_finish_time of particular Transmit Queue + (weights*packet_size)) - Note 3: The weights programmed do not correspond to the number of packets but the fraction of bandwidth or time allocated for particular queue w.r.t. total BW or time. */
    vuint32_t _unused_21:11;           /* Reserved. */
  } B;
} GMAC_MTL_TXQ2_QUANTUM_WEIGHT_tag;

typedef union GMAC_MTL_TXQ2_SENDSLOPECREDIT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t SSC:14;                  /* sendSlopeCredit Value When AV operation is enabled, this field contains the sendSlopeCredit value required for credit-based shaper algorithm for Queue 1. This is the rate of change of credit in bits per cycle (40 ns, 8 ns and 3.2 ns for 100 Mbps, 1000 Mbps and 2500 Mbps respectively) when the credit is decreasing. The software should program this field with computed credit in bits per cycle scaled by 1,024. The maximum value is portTransmitRate, that is, 0x2000 in 1000/2500 Mbps mode and 0x1000 in 100 Mbps mode. This field should be programmed with absolute sendSlopeCredit value. The credit-based shaper logic subtracts it from the accumulated credit when Channel 1 is selected for transmission. */
    vuint32_t _unused_14:18;           /* Reserved. */
  } B;
} GMAC_MTL_TXQ2_SENDSLOPECREDIT_tag;

typedef union GMAC_MTL_TXQ2_HICREDIT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t HC:29;                   /* hiCredit Value When the AV feature is enabled, this field contains the hiCredit value required for the credit-based shaper algorithm. This is the maximum value that can be accumulated in the credit parameter. This is specified in bits scaled by 1,024. The maximum value is maxInterferenceSize, that is, best-effort maximum packet size (16,384 bytes or 131,072 bits). The value to be specified is 131,072 * 1,024 = 134,217,728 or 0x0800_0000. */
    vuint32_t _unused_29:3;            /* Reserved. */
  } B;
} GMAC_MTL_TXQ2_HICREDIT_tag;

typedef union GMAC_MTL_TXQ2_LOCREDIT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t LC:29;                   /* loCredit Value When AV operation is enabled, this field contains the loCredit value required for the credit-based shaper algorithm. This is the minimum value that can be accumulated in the credit parameter. This is specified in bits scaled by 1,024. The maximum value to be programmed is corresponds to twice the maxFrameSize transmitted from this queue. If the maxFrameSize is 8192 bytes, then (8192*2) * 8 * 1024 = 134,217,728 or 0x0800_0000. Because it is a negative value, the programmed value is 2's complement of the value, that is, 0x1800_0000. */
    vuint32_t _unused_29:3;            /* Reserved. */
  } B;
} GMAC_MTL_TXQ2_LOCREDIT_tag;

typedef union GMAC_MTL_Q2_INTERRUPT_CONTROL_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXUNFIS:1;               /* Transmit Queue Underflow Interrupt Status This bit indicates that the Transmit Queue had an underflow while transmitting the packet. Transmission is suspended and an Underflow Error TDES3[2] is set. This bit is cleared when the application writes 1 to this bit. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t ABPSIS:1;                /* Average Bits Per Slot Interrupt Status When set, this bit indicates that the MAC has updated the ABS value. This bit is cleared when the application writes 1 to this bit. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t _unused_2:6;             /* Reserved. */
    vuint32_t TXUIE:1;                 /* Transmit Queue Underflow Interrupt Enable When this bit is set, the Transmit Queue Underflow interrupt is enabled. When this bit is reset, the Transmit Queue Underflow interrupt is disabled. */
    vuint32_t ABPSIE:1;                /* Average Bits Per Slot Interrupt Enable When this bit is set, the MAC asserts the sbd_intr_o or mci_intr_o interrupt when the average bits per slot status is updated. When this bit is cleared, the interrupt is not asserted for such an event. */
    vuint32_t _unused_10:6;            /* Reserved. */
    vuint32_t RXOVFIS:1;               /* Receive Queue Overflow Interrupt Status This bit indicates that the Receive Queue had an overflow while receiving the packet. If a partial packet is transferred to the application, the overflow status is set in RDES3[21]. This bit is cleared when the application writes 1 to this bit. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t _unused_17:7;            /* Reserved. */
    vuint32_t RXOIE:1;                 /* Receive Queue Overflow Interrupt Enable When this bit is set, the Receive Queue Overflow interrupt is enabled. When this bit is reset, the Receive Queue Overflow interrupt is disabled. */
    vuint32_t _unused_25:7;            /* Reserved. */
  } B;
} GMAC_MTL_Q2_INTERRUPT_CONTROL_STATUS_tag;

typedef union GMAC_MTL_RXQ2_OPERATION_MODE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RTC:2;                   /* Receive Queue Threshold Control These bits control the threshold level of the MTL Rx queue (in bytes): The received packet is transferred to the application or DMA when the packet size within the MTL Rx queue is larger than the threshold. In addition, full packets with length less than the threshold are automatically transferred. This field is valid only when the RSF bit is zero. This field is ignored when the RSF bit is set to 1. */
    vuint32_t _unused_2:1;             /* Reserved. */
    vuint32_t FUP:1;                   /* Forward Undersized Good Packets When this bit is set, the Rx queue forwards the undersized good packets (packets with no error and length less than 64 bytes), including pad-bytes and CRC. When this bit is reset, the Rx queue drops all packets of less than 64 bytes, unless a packet is already transferred because of the lower value of Rx Threshold, for example, RTC = 01. */
    vuint32_t FEP:1;                   /* Forward Error Packets When this bit is reset, the Rx queue drops packets with error status (CRC error, GMII_ER, watchdog timeout, or overflow). However, if the start byte (write) pointer of a packet is already transferred to the read controller side (in Threshold mode), the packet is not dropped. When this bit is set, all packets except the runt error packets are forwarded to the application or DMA. If the RSF bit is set and the Rx queue overflows when a partial packet is written, the packet is dropped irrespective of the setting of this bit. However, if the RSF bit is reset and the Rx queue overflows when a partial packet is written, a partial packet may be forwarded to the application or DMA. */
    vuint32_t RSF:1;                   /* Receive Queue Store and Forward When this bit is set, the DWC_ether_qos reads a packet from the Rx queue only after the complete packet has been written to it, ignoring the RTC field of this register. When this bit is reset, the Rx queue operates in the Threshold (cut-through) mode, subject to the threshold specified by the RTC field of this register. */
    vuint32_t DIS_TCP_EF:1;            /* Disable Dropping of TCP/IP Checksum Error Packets When this bit is set, the MAC does not drop the packets which only have the errors detected by the Receive Checksum Offload engine. Such packets have errors only in the encapsulated payload. There are no errors (including FCS error) in the Ethernet packet received by the MAC. When this bit is reset, all error packets are dropped if the FEP bit is reset. */
    vuint32_t EHFC:1;                  /* Enable Hardware Flow Control When this bit is set, the flow control signal operation, based on the fill-level of Rx queue, is enabled. When reset, the flow control operation is disabled. */
    vuint32_t RFA:6;                   /* Threshold for Activating Flow Control (in half-duplex and full-duplex These bits control the threshold (fill-level of Rx queue) at which the flow control is activated: For more information on encoding for this field, see RFD. */
    vuint32_t RFD:6;                   /* Threshold for Deactivating Flow Control (in half-duplex and full-duplex modes) These bits control the threshold (fill-level of Rx queue) at which the flow control is de-asserted after activation: - 0: Full minus 1 KB, that is, FULL 1 KB - 1: Full minus 1.5 KB, that is, FULL 1.5 KB - 2: Full minus 2 KB, that is, FULL 2 KB - 3: Full minus 2.5 KB, that is, FULL 2.5 KB - ... - 62: Full minus 32 KB, that is, FULL 32 KB - 63: Full minus 32.5 KB, that is, FULL 32.5 KB The de-assertion is effective only after flow control is asserted. Note: The value must be programmed in such a way to make sure that the threshold is a positive number. When the EHFC is set high, these values are applicable only when the Rx queue size determined by the RQS field of this register, is equal to or greater than 4 KB. For a given queue size, the values ranges between 0 and the encoding for FULL minus (QSIZE - 0.5 KB) and all other values are illegal. Here the term FULL and QSIZE refers to the queue size determined by the RQS field of this register. The width of this field depends on RX FIFO size selected during the configuration. Remaining bits are reserved and read only. */
    vuint32_t RQS:7;                   /* Receive Queue Size This field indicates the size of the allocated Receive queues in blocks of 256 bytes. The RQS field is read-write only if the number of Rx Queues more than one, the reset value is 0x0 and indicates size of 256 bytes. When the number of Rx Queues is one, the field is read-only and the configured RX FIFO size in blocks of 256 bytes is reflected in the reset value. The width of this field depends on the Rx memory size selected in your configuration. For example, if the memory size is 2048, the width of this field is 3 bits: LOG2(2048/256) = LOG2(8) = 3 bits */
    vuint32_t _unused_27:5;            /* Reserved. */
  } B;
} GMAC_MTL_RXQ2_OPERATION_MODE_tag;

typedef union GMAC_MTL_RXQ2_MISSED_PACKET_OVERFLOW_CNT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t OVFPKTCNT:11;            /* Overflow Packet Counter This field indicates the number of packets discarded by the DWC_ether_qos because of Receive queue overflow. This counter is incremented each time the DWC_ether_qos discards an incoming packet because of overflow. This counter is reset when this register is read with mci_be_i[0] at 1'b1. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t OVFCNTOVF:1;             /* Overflow Counter Overflow Bit When set, this bit indicates that the Rx Queue Overflow Packet Counter field crossed the maximum limit. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t _unused_12:4;            /* Reserved. */
    vuint32_t MISPKTCNT:11;            /* Missed Packet Counter This field indicates the number of packets missed by the DWC_ether_qos because the application asserted ari_pkt_flush_i[] for this queue. This counter is reset when this register is read with mci_be_i[0] at 1b1. This counter is incremented by 1 when the DMA discards the packet because of buffer unavailability. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t MISCNTOVF:1;             /* Missed Packet Counter Overflow Bit When set, this bit indicates that the Rx Queue Missed Packet Counter crossed the maximum limit. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t _unused_28:4;            /* Reserved. */
  } B;
} GMAC_MTL_RXQ2_MISSED_PACKET_OVERFLOW_CNT_tag;

typedef union GMAC_MTL_RXQ2_DEBUG_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RWCSTS:1;                /* MTL Rx Queue Write Controller Active Status When high, this bit indicates that the MTL Rx queue Write controller is active, and it is transferring a received packet to the Rx Queue. */
    vuint32_t RRCSTS:2;                /* MTL Rx Queue Read Controller State This field gives the state of the Rx queue Read controller: */
    vuint32_t _unused_3:1;             /* Reserved. */
    vuint32_t RXQSTS:2;                /* MTL Rx Queue Fill-Level Status This field gives the status of the fill-level of the Rx Queue: */
    vuint32_t _unused_6:10;            /* Reserved. */
    vuint32_t PRXQ:14;                 /* Number of Packets in Receive Queue This field indicates the current number of packets in the Rx Queue. The theoretical maximum value for this field is 256KB/16B = 16K Packets, that is, Max_Queue_Size/Min_Packet_Size. */
    vuint32_t _unused_30:2;            /* Reserved. */
  } B;
} GMAC_MTL_RXQ2_DEBUG_tag;

typedef union GMAC_MTL_RXQ2_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXQ_WEGT:3;              /* Receive Queue Weight This field indicates the weight assigned to the Rx Queue 0. The weight is used as the number of continuous PBL or packets requests (depending on the RXQ_FRM_ARBIT) allocated to the queue in one arbitration cycle. */
    vuint32_t RXQ_FRM_ARBIT:1;         /* Receive Queue Packet Arbitration When this bit is set, the DWC_ether_qos drives the packet data to the ARI interface such that the entire packet data of currently-selected queue is transmitted before switching to other queue. When this bit is reset, the DWC_ether_qos drives the packet data to the ARI interface such that the following amount of data of currently-selected queue is transmitted before switching to other queue: - PBL amount of data (indicated by ari_qN_pbl_i[]) or - Complete data of a packet The status and the timestamp are not a part of the PBL data. Therefore, the DWC_ether_qos drives the complete status (including timestamp status) during first PBL request for the packet (in store-and-forward mode) or the last PBL request for the packet (in Threshold mode). */
    vuint32_t _unused_4:28;            /* Reserved. */
  } B;
} GMAC_MTL_RXQ2_CONTROL_tag;

typedef union GMAC_MTL_TXQ3_OPERATION_MODE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t FTQ:1;                   /* Flush Transmit Queue When this bit is set, the Tx queue controller logic is reset to its default values. Therefore, all the data in the Tx queue is lost or flushed. This bit is internally reset when the flushing operation is complete. Until this bit is reset, you should not write to the MTL_TxQ1_Operation_Mode register. The data which is already accepted by the MAC transmitter is not flushed. It is scheduled for transmission and results in underflow and runt packet transmission. Note: The flush operation is complete only when the Tx queue is empty and the application has accepted the pending Tx Status of all transmitted packets. To complete this flush operation, the PHY Tx clock (clk_tx_i) should be active. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t TSF:1;                   /* Transmit Store and Forward When this bit is set, the transmission starts when a full packet resides in the MTL Tx queue. When this bit is set, the TTC values specified in Bits[6:4] of this register are ignored. This bit should be changed only when the transmission is stopped. */
    vuint32_t TXQEN:2;                 /* Transmit Queue Enable This field is used to enable/disable the transmit queue 0. - 2'b00: Not enabled - 2'b01: Enable in AV mode - 2'b10: Enabled - 2'b11: Reserved Note: In multiple Tx queues configuration, all the queues are disabled by default. Enable the Tx queue by programming this field. */
    vuint32_t TTC:3;                   /* Transmit Threshold Control These bits control the threshold level of the MTL Tx Queue. The transmission starts when the packet size within the MTL Tx Queue is larger than the threshold. In addition, full packets with length less than the threshold are also transmitted. These bits are used only when the TSF bit is reset. */
    vuint32_t _unused_7:9;             /* Reserved. */
    vuint32_t TQS:7;                   /* Transmit Queue Size This field indicates the size of the allocated Transmit queues in blocks of 256 bytes. The TQS field is read-write only if the number of Tx Queues more than one, the reset value is 0x0 and indicates size of 256 bytes. When the number of Tx Queues is one, the field is read-only and the configured TX FIFO size in blocks of 256 bytes is reflected in the reset value. The width of this field depends on the Tx memory size selected in your configuration. For example, if the memory size is 2048, the width of this field is 3 bits: LOG2(2048/256) = LOG2(8) = 3 bits */
    vuint32_t _unused_23:9;            /* Reserved. */
  } B;
} GMAC_MTL_TXQ3_OPERATION_MODE_tag;

typedef union GMAC_MTL_TXQ3_UNDERFLOW_union_tag {
  vuint32_t R;
  struct {
    vuint32_t UFFRMCNT:11;             /* Underflow Packet Counter This field indicates the number of packets aborted by the controller because of Tx Queue Underflow. This counter is incremented each time the MAC aborts outgoing packet because of underflow. The counter is cleared when this register is read with mci_be_i[0] at 1'b1. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t UFCNTOVF:1;              /* Overflow Bit for Underflow Packet Counter This bit is set every time the Tx queue Underflow Packet Counter field overflows, that is, it has crossed the maximum count. In such a scenario, the overflow packet counter is reset to all-zeros and this bit indicates that the rollover happened. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t _unused_12:20;           /* Reserved. */
  } B;
} GMAC_MTL_TXQ3_UNDERFLOW_tag;

typedef union GMAC_MTL_TXQ3_DEBUG_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXQPAUSED:1;             /* Transmit Queue in Pause When this bit is high and the Rx flow control is enabled, it indicates that the Tx Queue is in the Pause condition (in the full-duplex only mode) because of the following: - Reception of the PFC packet for the priorities assigned to the Tx Queue when PFC is enabled - Reception of 802.3x Pause packet when PFC is disabled */
    vuint32_t TRCSTS:2;                /* MTL Tx Queue Read Controller Status This field indicates the state of the Tx Queue Read Controller: */
    vuint32_t TWCSTS:1;                /* MTL Tx Queue Write Controller Status When high, this bit indicates that the MTL Tx Queue Write Controller is active, and it is transferring the data to the Tx Queue. */
    vuint32_t TXQSTS:1;                /* MTL Tx Queue Not Empty Status When this bit is high, it indicates that the MTL Tx Queue is not empty and some data is left for transmission. */
    vuint32_t TXSTSFSTS:1;             /* MTL Tx Status FIFO Full Status When high, this bit indicates that the MTL Tx Status FIFO is full. Therefore, the MTL cannot accept any more packets for transmission. */
    vuint32_t _unused_6:10;            /* Reserved. */
    vuint32_t PTXQ:3;                  /* Number of Packets in the Transmit Queue This field indicates the current number of packets in the Tx Queue. When the DTXSTS bit of MTL_Operation_Mode register is set to 1, this field does not reflect the number of packets in the Transmit queue. */
    vuint32_t _unused_19:1;            /* Reserved. */
    vuint32_t STXSTSF:3;               /* Number of Status Words in Tx Status FIFO of Queue This field indicates the current number of status in the Tx Status FIFO of this queue. When the DTXSTS bit of MTL_Operation_Mode register is set to 1, this field does not reflect the number of status words in Tx Status FIFO. */
    vuint32_t _unused_23:9;            /* Reserved. */
  } B;
} GMAC_MTL_TXQ3_DEBUG_tag;

typedef union GMAC_MTL_TXQ3_ETS_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved. */
    vuint32_t AVALG:1;                 /* AV Algorithm When Queue 1 is programmed for AV, this field configures the scheduling algorithm for this queue: This bit when set, indicates credit based shaper algorithm (CBS) is selected for Queue 1 traffic. When reset, strict priority is selected. */
    vuint32_t CC:1;                    /* Credit Control When this bit is set, the accumulated credit parameter in the credit-based shaper algorithm logic is not reset to zero when there is positive credit and no packet to transmit in Channel 1. The credit accumulates even when there is no packet waiting in Channel 1 and another channel is transmitting. When this bit is reset, the accumulated credit parameter in the credit-based shaper algorithm logic is set to zero when there is positive credit and no packet to transmit in Channel 1. When there is no packet waiting in Channel 1 and other channel is transmitting, no credit is accumulated. */
    vuint32_t SLC:3;                   /* Slot Count If the credit-based shaper algorithm is enabled, the software can program the number of slots (of duration programmed in DMA_CH[n]_Slot_Interval register) over which the average transmitted bits per slot, provided in the MTL_TxQ[n]_ETS_Status register, need to be computed for Queue. The encoding is as follows: */
    vuint32_t _unused_7:25;            /* Reserved. */
  } B;
} GMAC_MTL_TXQ3_ETS_CONTROL_tag;

typedef union GMAC_MTL_TXQ3_ETS_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ABS:24;                  /* Average Bits per Slot This field contains the average transmitted bits per slot. If AV operation is enabled, this field is computed over number of slots, programmed in the SLC field of MTL_TxQ[n]_ETS_CONTROL register. The maximum value of this field is 0x6_4000 in 100 Mbps, 0x3E_8000 in 1000 Mbps and 9C_4000 in 2500 Mbps mode respectively. When the DCB operation is enabled for Queue, this field is computed over every 10 million bit times slot (4 ms in 2500 Mbps; 10 ms in 1000 Mbps; 100 ms in 100 Mbps). The maximum value is 0x989680. */
    vuint32_t _unused_24:8;            /* Reserved. */
  } B;
} GMAC_MTL_TXQ3_ETS_STATUS_tag;

typedef union GMAC_MTL_TXQ3_QUANTUM_WEIGHT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ISCQW:21;                /* idleSlopeCredit, Quantum or Weights - idleSlopeCredit When AV feature is enabled, this field contains the idleSlopeCredit value required for the credit-based shaper algorithm for Queue 1. This is the rate of change of credit in bits per cycle (40 ns for 100 Mbps; 8 ns for 1000 Mbps; 3.2 ns for 2500 Mbps) when the credit is increasing. The software should program this field with computed credit in bits per cycle scaled by 1,024. The maximum value is portTransmitRate, that is, 0x2000 in 1000/2500 Mbps mode and 0x1000 in 100 Mbps mode. Bits[20:14] must be written to zero. - Quantum When the DCB operation is enabled with DWRR algorithm for Queue 1 traffic, this field contains the quantum value in bytes to be added to credit during every queue scanning cycle. The maximum value is 0x1312D0 bytes. - Weights When DCB operation is enabled with WFQ algorithm for Queue 1 traffic, this field contains the weight for this queue. The maximum value is 0x3FFF where weight of 0 indicates 100% bandwidth. Bits[20:14] must be written to zero. When DCB operation or generic queuing operation is enabled with WRR algorithm for Queue 1 traffic, this field contains the weight for this queue. The maximum value is 0x64. Bits [20:7] must be written to zero. - Note 1: In multiple Queue configuration this field in respective per queue register must be programmed to some non-zero value when multiple queues are enabled or single queue other than Q0 is enabled. This field need not be programmed when only Q0 is enabled. In general, when WRR algorithm is selected a non-zero value must be programmed on both Receive and Transmit. In Receive, the register is MTL_Operation_Mode register. - Note 2: For WFQ algorithm, higher the programmed weights lesser the bandwidth allocated for that Transmit Queue. The finish time is not a function of particular packet alone but it is as per the formula: (previous_finish_time of particular Transmit Queue + (weights*packet_size)) - Note 3: The weights programmed do not correspond to the number of packets but the fraction of bandwidth or time allocated for particular queue w.r.t. total BW or time. */
    vuint32_t _unused_21:11;           /* Reserved. */
  } B;
} GMAC_MTL_TXQ3_QUANTUM_WEIGHT_tag;

typedef union GMAC_MTL_TXQ3_SENDSLOPECREDIT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t SSC:14;                  /* sendSlopeCredit Value When AV operation is enabled, this field contains the sendSlopeCredit value required for credit-based shaper algorithm for Queue 1. This is the rate of change of credit in bits per cycle (40 ns, 8 ns and 3.2 ns for 100 Mbps, 1000 Mbps and 2500 Mbps respectively) when the credit is decreasing. The software should program this field with computed credit in bits per cycle scaled by 1,024. The maximum value is portTransmitRate, that is, 0x2000 in 1000/2500 Mbps mode and 0x1000 in 100 Mbps mode. This field should be programmed with absolute sendSlopeCredit value. The credit-based shaper logic subtracts it from the accumulated credit when Channel 1 is selected for transmission. */
    vuint32_t _unused_14:18;           /* Reserved. */
  } B;
} GMAC_MTL_TXQ3_SENDSLOPECREDIT_tag;

typedef union GMAC_MTL_TXQ3_HICREDIT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t HC:29;                   /* hiCredit Value When the AV feature is enabled, this field contains the hiCredit value required for the credit-based shaper algorithm. This is the maximum value that can be accumulated in the credit parameter. This is specified in bits scaled by 1,024. The maximum value is maxInterferenceSize, that is, best-effort maximum packet size (16,384 bytes or 131,072 bits). The value to be specified is 131,072 * 1,024 = 134,217,728 or 0x0800_0000. */
    vuint32_t _unused_29:3;            /* Reserved. */
  } B;
} GMAC_MTL_TXQ3_HICREDIT_tag;

typedef union GMAC_MTL_TXQ3_LOCREDIT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t LC:29;                   /* loCredit Value When AV operation is enabled, this field contains the loCredit value required for the credit-based shaper algorithm. This is the minimum value that can be accumulated in the credit parameter. This is specified in bits scaled by 1,024. The maximum value to be programmed is corresponds to twice the maxFrameSize transmitted from this queue. If the maxFrameSize is 8192 bytes, then (8192*2) * 8 * 1024 = 134,217,728 or 0x0800_0000. Because it is a negative value, the programmed value is 2's complement of the value, that is, 0x1800_0000. */
    vuint32_t _unused_29:3;            /* Reserved. */
  } B;
} GMAC_MTL_TXQ3_LOCREDIT_tag;

typedef union GMAC_MTL_Q3_INTERRUPT_CONTROL_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXUNFIS:1;               /* Transmit Queue Underflow Interrupt Status This bit indicates that the Transmit Queue had an underflow while transmitting the packet. Transmission is suspended and an Underflow Error TDES3[2] is set. This bit is cleared when the application writes 1 to this bit. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t ABPSIS:1;                /* Average Bits Per Slot Interrupt Status When set, this bit indicates that the MAC has updated the ABS value. This bit is cleared when the application writes 1 to this bit. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t _unused_2:6;             /* Reserved. */
    vuint32_t TXUIE:1;                 /* Transmit Queue Underflow Interrupt Enable When this bit is set, the Transmit Queue Underflow interrupt is enabled. When this bit is reset, the Transmit Queue Underflow interrupt is disabled. */
    vuint32_t ABPSIE:1;                /* Average Bits Per Slot Interrupt Enable When this bit is set, the MAC asserts the sbd_intr_o or mci_intr_o interrupt when the average bits per slot status is updated. When this bit is cleared, the interrupt is not asserted for such an event. */
    vuint32_t _unused_10:6;            /* Reserved. */
    vuint32_t RXOVFIS:1;               /* Receive Queue Overflow Interrupt Status This bit indicates that the Receive Queue had an overflow while receiving the packet. If a partial packet is transferred to the application, the overflow status is set in RDES3[21]. This bit is cleared when the application writes 1 to this bit. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t _unused_17:7;            /* Reserved. */
    vuint32_t RXOIE:1;                 /* Receive Queue Overflow Interrupt Enable When this bit is set, the Receive Queue Overflow interrupt is enabled. When this bit is reset, the Receive Queue Overflow interrupt is disabled. */
    vuint32_t _unused_25:7;            /* Reserved. */
  } B;
} GMAC_MTL_Q3_INTERRUPT_CONTROL_STATUS_tag;

typedef union GMAC_MTL_RXQ3_OPERATION_MODE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RTC:2;                   /* Receive Queue Threshold Control These bits control the threshold level of the MTL Rx queue (in bytes): The received packet is transferred to the application or DMA when the packet size within the MTL Rx queue is larger than the threshold. In addition, full packets with length less than the threshold are automatically transferred. This field is valid only when the RSF bit is zero. This field is ignored when the RSF bit is set to 1. */
    vuint32_t _unused_2:1;             /* Reserved. */
    vuint32_t FUP:1;                   /* Forward Undersized Good Packets When this bit is set, the Rx queue forwards the undersized good packets (packets with no error and length less than 64 bytes), including pad-bytes and CRC. When this bit is reset, the Rx queue drops all packets of less than 64 bytes, unless a packet is already transferred because of the lower value of Rx Threshold, for example, RTC = 01. */
    vuint32_t FEP:1;                   /* Forward Error Packets When this bit is reset, the Rx queue drops packets with error status (CRC error, GMII_ER, watchdog timeout, or overflow). However, if the start byte (write) pointer of a packet is already transferred to the read controller side (in Threshold mode), the packet is not dropped. When this bit is set, all packets except the runt error packets are forwarded to the application or DMA. If the RSF bit is set and the Rx queue overflows when a partial packet is written, the packet is dropped irrespective of the setting of this bit. However, if the RSF bit is reset and the Rx queue overflows when a partial packet is written, a partial packet may be forwarded to the application or DMA. */
    vuint32_t RSF:1;                   /* Receive Queue Store and Forward When this bit is set, the DWC_ether_qos reads a packet from the Rx queue only after the complete packet has been written to it, ignoring the RTC field of this register. When this bit is reset, the Rx queue operates in the Threshold (cut-through) mode, subject to the threshold specified by the RTC field of this register. */
    vuint32_t DIS_TCP_EF:1;            /* Disable Dropping of TCP/IP Checksum Error Packets When this bit is set, the MAC does not drop the packets which only have the errors detected by the Receive Checksum Offload engine. Such packets have errors only in the encapsulated payload. There are no errors (including FCS error) in the Ethernet packet received by the MAC. When this bit is reset, all error packets are dropped if the FEP bit is reset. */
    vuint32_t EHFC:1;                  /* Enable Hardware Flow Control When this bit is set, the flow control signal operation, based on the fill-level of Rx queue, is enabled. When reset, the flow control operation is disabled. */
    vuint32_t RFA:6;                   /* Threshold for Activating Flow Control (in half-duplex and full-duplex These bits control the threshold (fill-level of Rx queue) at which the flow control is activated: For more information on encoding for this field, see RFD. */
    vuint32_t RFD:6;                   /* Threshold for Deactivating Flow Control (in half-duplex and full-duplex modes) These bits control the threshold (fill-level of Rx queue) at which the flow control is de-asserted after activation: - 0: Full minus 1 KB, that is, FULL 1 KB - 1: Full minus 1.5 KB, that is, FULL 1.5 KB - 2: Full minus 2 KB, that is, FULL 2 KB - 3: Full minus 2.5 KB, that is, FULL 2.5 KB - ... - 62: Full minus 32 KB, that is, FULL 32 KB - 63: Full minus 32.5 KB, that is, FULL 32.5 KB The de-assertion is effective only after flow control is asserted. Note: The value must be programmed in such a way to make sure that the threshold is a positive number. When the EHFC is set high, these values are applicable only when the Rx queue size determined by the RQS field of this register, is equal to or greater than 4 KB. For a given queue size, the values ranges between 0 and the encoding for FULL minus (QSIZE - 0.5 KB) and all other values are illegal. Here the term FULL and QSIZE refers to the queue size determined by the RQS field of this register. The width of this field depends on RX FIFO size selected during the configuration. Remaining bits are reserved and read only. */
    vuint32_t RQS:7;                   /* Receive Queue Size This field indicates the size of the allocated Receive queues in blocks of 256 bytes. The RQS field is read-write only if the number of Rx Queues more than one, the reset value is 0x0 and indicates size of 256 bytes. When the number of Rx Queues is one, the field is read-only and the configured RX FIFO size in blocks of 256 bytes is reflected in the reset value. The width of this field depends on the Rx memory size selected in your configuration. For example, if the memory size is 2048, the width of this field is 3 bits: LOG2(2048/256) = LOG2(8) = 3 bits */
    vuint32_t _unused_27:5;            /* Reserved. */
  } B;
} GMAC_MTL_RXQ3_OPERATION_MODE_tag;

typedef union GMAC_MTL_RXQ3_MISSED_PACKET_OVERFLOW_CNT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t OVFPKTCNT:11;            /* Overflow Packet Counter This field indicates the number of packets discarded by the DWC_ether_qos because of Receive queue overflow. This counter is incremented each time the DWC_ether_qos discards an incoming packet because of overflow. This counter is reset when this register is read with mci_be_i[0] at 1'b1. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t OVFCNTOVF:1;             /* Overflow Counter Overflow Bit When set, this bit indicates that the Rx Queue Overflow Packet Counter field crossed the maximum limit. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t _unused_12:4;            /* Reserved. */
    vuint32_t MISPKTCNT:11;            /* Missed Packet Counter This field indicates the number of packets missed by the DWC_ether_qos because the application asserted ari_pkt_flush_i[] for this queue. This counter is reset when this register is read with mci_be_i[0] at 1b1. This counter is incremented by 1 when the DMA discards the packet because of buffer unavailability. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t MISCNTOVF:1;             /* Missed Packet Counter Overflow Bit When set, this bit indicates that the Rx Queue Missed Packet Counter crossed the maximum limit. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t _unused_28:4;            /* Reserved. */
  } B;
} GMAC_MTL_RXQ3_MISSED_PACKET_OVERFLOW_CNT_tag;

typedef union GMAC_MTL_RXQ3_DEBUG_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RWCSTS:1;                /* MTL Rx Queue Write Controller Active Status When high, this bit indicates that the MTL Rx queue Write controller is active, and it is transferring a received packet to the Rx Queue. */
    vuint32_t RRCSTS:2;                /* MTL Rx Queue Read Controller State This field gives the state of the Rx queue Read controller: */
    vuint32_t _unused_3:1;             /* Reserved. */
    vuint32_t RXQSTS:2;                /* MTL Rx Queue Fill-Level Status This field gives the status of the fill-level of the Rx Queue: */
    vuint32_t _unused_6:10;            /* Reserved. */
    vuint32_t PRXQ:14;                 /* Number of Packets in Receive Queue This field indicates the current number of packets in the Rx Queue. The theoretical maximum value for this field is 256KB/16B = 16K Packets, that is, Max_Queue_Size/Min_Packet_Size. */
    vuint32_t _unused_30:2;            /* Reserved. */
  } B;
} GMAC_MTL_RXQ3_DEBUG_tag;

typedef union GMAC_MTL_RXQ3_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXQ_WEGT:3;              /* Receive Queue Weight This field indicates the weight assigned to the Rx Queue 0. The weight is used as the number of continuous PBL or packets requests (depending on the RXQ_FRM_ARBIT) allocated to the queue in one arbitration cycle. */
    vuint32_t RXQ_FRM_ARBIT:1;         /* Receive Queue Packet Arbitration When this bit is set, the DWC_ether_qos drives the packet data to the ARI interface such that the entire packet data of currently-selected queue is transmitted before switching to other queue. When this bit is reset, the DWC_ether_qos drives the packet data to the ARI interface such that the following amount of data of currently-selected queue is transmitted before switching to other queue: - PBL amount of data (indicated by ari_qN_pbl_i[]) or - Complete data of a packet The status and the timestamp are not a part of the PBL data. Therefore, the DWC_ether_qos drives the complete status (including timestamp status) during first PBL request for the packet (in store-and-forward mode) or the last PBL request for the packet (in Threshold mode). */
    vuint32_t _unused_4:28;            /* Reserved. */
  } B;
} GMAC_MTL_RXQ3_CONTROL_tag;

typedef union GMAC_MTL_TXQ4_OPERATION_MODE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t FTQ:1;                   /* Flush Transmit Queue When this bit is set, the Tx queue controller logic is reset to its default values. Therefore, all the data in the Tx queue is lost or flushed. This bit is internally reset when the flushing operation is complete. Until this bit is reset, you should not write to the MTL_TxQ1_Operation_Mode register. The data which is already accepted by the MAC transmitter is not flushed. It is scheduled for transmission and results in underflow and runt packet transmission. Note: The flush operation is complete only when the Tx queue is empty and the application has accepted the pending Tx Status of all transmitted packets. To complete this flush operation, the PHY Tx clock (clk_tx_i) should be active. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t TSF:1;                   /* Transmit Store and Forward When this bit is set, the transmission starts when a full packet resides in the MTL Tx queue. When this bit is set, the TTC values specified in Bits[6:4] of this register are ignored. This bit should be changed only when the transmission is stopped. */
    vuint32_t TXQEN:2;                 /* Transmit Queue Enable This field is used to enable/disable the transmit queue 0. - 2'b00: Not enabled - 2'b01: Enable in AV mode - 2'b10: Enabled - 2'b11: Reserved Note: In multiple Tx queues configuration, all the queues are disabled by default. Enable the Tx queue by programming this field. */
    vuint32_t TTC:3;                   /* Transmit Threshold Control These bits control the threshold level of the MTL Tx Queue. The transmission starts when the packet size within the MTL Tx Queue is larger than the threshold. In addition, full packets with length less than the threshold are also transmitted. These bits are used only when the TSF bit is reset. */
    vuint32_t _unused_7:9;             /* Reserved. */
    vuint32_t TQS:7;                   /* Transmit Queue Size This field indicates the size of the allocated Transmit queues in blocks of 256 bytes. The TQS field is read-write only if the number of Tx Queues more than one, the reset value is 0x0 and indicates size of 256 bytes. When the number of Tx Queues is one, the field is read-only and the configured TX FIFO size in blocks of 256 bytes is reflected in the reset value. The width of this field depends on the Tx memory size selected in your configuration. For example, if the memory size is 2048, the width of this field is 3 bits: LOG2(2048/256) = LOG2(8) = 3 bits */
    vuint32_t _unused_23:9;            /* Reserved. */
  } B;
} GMAC_MTL_TXQ4_OPERATION_MODE_tag;

typedef union GMAC_MTL_TXQ4_UNDERFLOW_union_tag {
  vuint32_t R;
  struct {
    vuint32_t UFFRMCNT:11;             /* Underflow Packet Counter This field indicates the number of packets aborted by the controller because of Tx Queue Underflow. This counter is incremented each time the MAC aborts outgoing packet because of underflow. The counter is cleared when this register is read with mci_be_i[0] at 1'b1. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t UFCNTOVF:1;              /* Overflow Bit for Underflow Packet Counter This bit is set every time the Tx queue Underflow Packet Counter field overflows, that is, it has crossed the maximum count. In such a scenario, the overflow packet counter is reset to all-zeros and this bit indicates that the rollover happened. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t _unused_12:20;           /* Reserved. */
  } B;
} GMAC_MTL_TXQ4_UNDERFLOW_tag;

typedef union GMAC_MTL_TXQ4_DEBUG_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXQPAUSED:1;             /* Transmit Queue in Pause When this bit is high and the Rx flow control is enabled, it indicates that the Tx Queue is in the Pause condition (in the full-duplex only mode) because of the following: - Reception of the PFC packet for the priorities assigned to the Tx Queue when PFC is enabled - Reception of 802.3x Pause packet when PFC is disabled */
    vuint32_t TRCSTS:2;                /* MTL Tx Queue Read Controller Status This field indicates the state of the Tx Queue Read Controller: */
    vuint32_t TWCSTS:1;                /* MTL Tx Queue Write Controller Status When high, this bit indicates that the MTL Tx Queue Write Controller is active, and it is transferring the data to the Tx Queue. */
    vuint32_t TXQSTS:1;                /* MTL Tx Queue Not Empty Status When this bit is high, it indicates that the MTL Tx Queue is not empty and some data is left for transmission. */
    vuint32_t TXSTSFSTS:1;             /* MTL Tx Status FIFO Full Status When high, this bit indicates that the MTL Tx Status FIFO is full. Therefore, the MTL cannot accept any more packets for transmission. */
    vuint32_t _unused_6:10;            /* Reserved. */
    vuint32_t PTXQ:3;                  /* Number of Packets in the Transmit Queue This field indicates the current number of packets in the Tx Queue. When the DTXSTS bit of MTL_Operation_Mode register is set to 1, this field does not reflect the number of packets in the Transmit queue. */
    vuint32_t _unused_19:1;            /* Reserved. */
    vuint32_t STXSTSF:3;               /* Number of Status Words in Tx Status FIFO of Queue This field indicates the current number of status in the Tx Status FIFO of this queue. When the DTXSTS bit of MTL_Operation_Mode register is set to 1, this field does not reflect the number of status words in Tx Status FIFO. */
    vuint32_t _unused_23:9;            /* Reserved. */
  } B;
} GMAC_MTL_TXQ4_DEBUG_tag;

typedef union GMAC_MTL_TXQ4_ETS_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved. */
    vuint32_t AVALG:1;                 /* AV Algorithm When Queue 1 is programmed for AV, this field configures the scheduling algorithm for this queue: This bit when set, indicates credit based shaper algorithm (CBS) is selected for Queue 1 traffic. When reset, strict priority is selected. */
    vuint32_t CC:1;                    /* Credit Control When this bit is set, the accumulated credit parameter in the credit-based shaper algorithm logic is not reset to zero when there is positive credit and no packet to transmit in Channel 1. The credit accumulates even when there is no packet waiting in Channel 1 and another channel is transmitting. When this bit is reset, the accumulated credit parameter in the credit-based shaper algorithm logic is set to zero when there is positive credit and no packet to transmit in Channel 1. When there is no packet waiting in Channel 1 and other channel is transmitting, no credit is accumulated. */
    vuint32_t SLC:3;                   /* Slot Count If the credit-based shaper algorithm is enabled, the software can program the number of slots (of duration programmed in DMA_CH[n]_Slot_Interval register) over which the average transmitted bits per slot, provided in the MTL_TxQ[n]_ETS_Status register, need to be computed for Queue. The encoding is as follows: */
    vuint32_t _unused_7:25;            /* Reserved. */
  } B;
} GMAC_MTL_TXQ4_ETS_CONTROL_tag;

typedef union GMAC_MTL_TXQ4_ETS_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ABS:24;                  /* Average Bits per Slot This field contains the average transmitted bits per slot. If AV operation is enabled, this field is computed over number of slots, programmed in the SLC field of MTL_TxQ[n]_ETS_CONTROL register. The maximum value of this field is 0x6_4000 in 100 Mbps, 0x3E_8000 in 1000 Mbps and 9C_4000 in 2500 Mbps mode respectively. When the DCB operation is enabled for Queue, this field is computed over every 10 million bit times slot (4 ms in 2500 Mbps; 10 ms in 1000 Mbps; 100 ms in 100 Mbps). The maximum value is 0x989680. */
    vuint32_t _unused_24:8;            /* Reserved. */
  } B;
} GMAC_MTL_TXQ4_ETS_STATUS_tag;

typedef union GMAC_MTL_TXQ4_QUANTUM_WEIGHT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ISCQW:21;                /* idleSlopeCredit, Quantum or Weights - idleSlopeCredit When AV feature is enabled, this field contains the idleSlopeCredit value required for the credit-based shaper algorithm for Queue 1. This is the rate of change of credit in bits per cycle (40 ns for 100 Mbps; 8 ns for 1000 Mbps; 3.2 ns for 2500 Mbps) when the credit is increasing. The software should program this field with computed credit in bits per cycle scaled by 1,024. The maximum value is portTransmitRate, that is, 0x2000 in 1000/2500 Mbps mode and 0x1000 in 100 Mbps mode. Bits[20:14] must be written to zero. - Quantum When the DCB operation is enabled with DWRR algorithm for Queue 1 traffic, this field contains the quantum value in bytes to be added to credit during every queue scanning cycle. The maximum value is 0x1312D0 bytes. - Weights When DCB operation is enabled with WFQ algorithm for Queue 1 traffic, this field contains the weight for this queue. The maximum value is 0x3FFF where weight of 0 indicates 100% bandwidth. Bits[20:14] must be written to zero. When DCB operation or generic queuing operation is enabled with WRR algorithm for Queue 1 traffic, this field contains the weight for this queue. The maximum value is 0x64. Bits [20:7] must be written to zero. - Note 1: In multiple Queue configuration this field in respective per queue register must be programmed to some non-zero value when multiple queues are enabled or single queue other than Q0 is enabled. This field need not be programmed when only Q0 is enabled. In general, when WRR algorithm is selected a non-zero value must be programmed on both Receive and Transmit. In Receive, the register is MTL_Operation_Mode register. - Note 2: For WFQ algorithm, higher the programmed weights lesser the bandwidth allocated for that Transmit Queue. The finish time is not a function of particular packet alone but it is as per the formula: (previous_finish_time of particular Transmit Queue + (weights*packet_size)) - Note 3: The weights programmed do not correspond to the number of packets but the fraction of bandwidth or time allocated for particular queue w.r.t. total BW or time. */
    vuint32_t _unused_21:11;           /* Reserved. */
  } B;
} GMAC_MTL_TXQ4_QUANTUM_WEIGHT_tag;

typedef union GMAC_MTL_TXQ4_SENDSLOPECREDIT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t SSC:14;                  /* sendSlopeCredit Value When AV operation is enabled, this field contains the sendSlopeCredit value required for credit-based shaper algorithm for Queue 1. This is the rate of change of credit in bits per cycle (40 ns, 8 ns and 3.2 ns for 100 Mbps, 1000 Mbps and 2500 Mbps respectively) when the credit is decreasing. The software should program this field with computed credit in bits per cycle scaled by 1,024. The maximum value is portTransmitRate, that is, 0x2000 in 1000/2500 Mbps mode and 0x1000 in 100 Mbps mode. This field should be programmed with absolute sendSlopeCredit value. The credit-based shaper logic subtracts it from the accumulated credit when Channel 1 is selected for transmission. */
    vuint32_t _unused_14:18;           /* Reserved. */
  } B;
} GMAC_MTL_TXQ4_SENDSLOPECREDIT_tag;

typedef union GMAC_MTL_TXQ4_HICREDIT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t HC:29;                   /* hiCredit Value When the AV feature is enabled, this field contains the hiCredit value required for the credit-based shaper algorithm. This is the maximum value that can be accumulated in the credit parameter. This is specified in bits scaled by 1,024. The maximum value is maxInterferenceSize, that is, best-effort maximum packet size (16,384 bytes or 131,072 bits). The value to be specified is 131,072 * 1,024 = 134,217,728 or 0x0800_0000. */
    vuint32_t _unused_29:3;            /* Reserved. */
  } B;
} GMAC_MTL_TXQ4_HICREDIT_tag;

typedef union GMAC_MTL_TXQ4_LOCREDIT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t LC:29;                   /* loCredit Value When AV operation is enabled, this field contains the loCredit value required for the credit-based shaper algorithm. This is the minimum value that can be accumulated in the credit parameter. This is specified in bits scaled by 1,024. The maximum value to be programmed is corresponds to twice the maxFrameSize transmitted from this queue. If the maxFrameSize is 8192 bytes, then (8192*2) * 8 * 1024 = 134,217,728 or 0x0800_0000. Because it is a negative value, the programmed value is 2's complement of the value, that is, 0x1800_0000. */
    vuint32_t _unused_29:3;            /* Reserved. */
  } B;
} GMAC_MTL_TXQ4_LOCREDIT_tag;

typedef union GMAC_MTL_Q4_INTERRUPT_CONTROL_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXUNFIS:1;               /* Transmit Queue Underflow Interrupt Status This bit indicates that the Transmit Queue had an underflow while transmitting the packet. Transmission is suspended and an Underflow Error TDES3[2] is set. This bit is cleared when the application writes 1 to this bit. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t ABPSIS:1;                /* Average Bits Per Slot Interrupt Status When set, this bit indicates that the MAC has updated the ABS value. This bit is cleared when the application writes 1 to this bit. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t _unused_2:6;             /* Reserved. */
    vuint32_t TXUIE:1;                 /* Transmit Queue Underflow Interrupt Enable When this bit is set, the Transmit Queue Underflow interrupt is enabled. When this bit is reset, the Transmit Queue Underflow interrupt is disabled. */
    vuint32_t ABPSIE:1;                /* Average Bits Per Slot Interrupt Enable When this bit is set, the MAC asserts the sbd_intr_o or mci_intr_o interrupt when the average bits per slot status is updated. When this bit is cleared, the interrupt is not asserted for such an event. */
    vuint32_t _unused_10:6;            /* Reserved. */
    vuint32_t RXOVFIS:1;               /* Receive Queue Overflow Interrupt Status This bit indicates that the Receive Queue had an overflow while receiving the packet. If a partial packet is transferred to the application, the overflow status is set in RDES3[21]. This bit is cleared when the application writes 1 to this bit. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t _unused_17:7;            /* Reserved. */
    vuint32_t RXOIE:1;                 /* Receive Queue Overflow Interrupt Enable When this bit is set, the Receive Queue Overflow interrupt is enabled. When this bit is reset, the Receive Queue Overflow interrupt is disabled. */
    vuint32_t _unused_25:7;            /* Reserved. */
  } B;
} GMAC_MTL_Q4_INTERRUPT_CONTROL_STATUS_tag;

typedef union GMAC_MTL_RXQ4_OPERATION_MODE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RTC:2;                   /* Receive Queue Threshold Control These bits control the threshold level of the MTL Rx queue (in bytes): The received packet is transferred to the application or DMA when the packet size within the MTL Rx queue is larger than the threshold. In addition, full packets with length less than the threshold are automatically transferred. This field is valid only when the RSF bit is zero. This field is ignored when the RSF bit is set to 1. */
    vuint32_t _unused_2:1;             /* Reserved. */
    vuint32_t FUP:1;                   /* Forward Undersized Good Packets When this bit is set, the Rx queue forwards the undersized good packets (packets with no error and length less than 64 bytes), including pad-bytes and CRC. When this bit is reset, the Rx queue drops all packets of less than 64 bytes, unless a packet is already transferred because of the lower value of Rx Threshold, for example, RTC = 01. */
    vuint32_t FEP:1;                   /* Forward Error Packets When this bit is reset, the Rx queue drops packets with error status (CRC error, GMII_ER, watchdog timeout, or overflow). However, if the start byte (write) pointer of a packet is already transferred to the read controller side (in Threshold mode), the packet is not dropped. When this bit is set, all packets except the runt error packets are forwarded to the application or DMA. If the RSF bit is set and the Rx queue overflows when a partial packet is written, the packet is dropped irrespective of the setting of this bit. However, if the RSF bit is reset and the Rx queue overflows when a partial packet is written, a partial packet may be forwarded to the application or DMA. */
    vuint32_t RSF:1;                   /* Receive Queue Store and Forward When this bit is set, the DWC_ether_qos reads a packet from the Rx queue only after the complete packet has been written to it, ignoring the RTC field of this register. When this bit is reset, the Rx queue operates in the Threshold (cut-through) mode, subject to the threshold specified by the RTC field of this register. */
    vuint32_t DIS_TCP_EF:1;            /* Disable Dropping of TCP/IP Checksum Error Packets When this bit is set, the MAC does not drop the packets which only have the errors detected by the Receive Checksum Offload engine. Such packets have errors only in the encapsulated payload. There are no errors (including FCS error) in the Ethernet packet received by the MAC. When this bit is reset, all error packets are dropped if the FEP bit is reset. */
    vuint32_t EHFC:1;                  /* Enable Hardware Flow Control When this bit is set, the flow control signal operation, based on the fill-level of Rx queue, is enabled. When reset, the flow control operation is disabled. */
    vuint32_t RFA:6;                   /* Threshold for Activating Flow Control (in half-duplex and full-duplex These bits control the threshold (fill-level of Rx queue) at which the flow control is activated: For more information on encoding for this field, see RFD. */
    vuint32_t RFD:6;                   /* Threshold for Deactivating Flow Control (in half-duplex and full-duplex modes) These bits control the threshold (fill-level of Rx queue) at which the flow control is de-asserted after activation: - 0: Full minus 1 KB, that is, FULL 1 KB - 1: Full minus 1.5 KB, that is, FULL 1.5 KB - 2: Full minus 2 KB, that is, FULL 2 KB - 3: Full minus 2.5 KB, that is, FULL 2.5 KB - ... - 62: Full minus 32 KB, that is, FULL 32 KB - 63: Full minus 32.5 KB, that is, FULL 32.5 KB The de-assertion is effective only after flow control is asserted. Note: The value must be programmed in such a way to make sure that the threshold is a positive number. When the EHFC is set high, these values are applicable only when the Rx queue size determined by the RQS field of this register, is equal to or greater than 4 KB. For a given queue size, the values ranges between 0 and the encoding for FULL minus (QSIZE - 0.5 KB) and all other values are illegal. Here the term FULL and QSIZE refers to the queue size determined by the RQS field of this register. The width of this field depends on RX FIFO size selected during the configuration. Remaining bits are reserved and read only. */
    vuint32_t RQS:7;                   /* Receive Queue Size This field indicates the size of the allocated Receive queues in blocks of 256 bytes. The RQS field is read-write only if the number of Rx Queues more than one, the reset value is 0x0 and indicates size of 256 bytes. When the number of Rx Queues is one, the field is read-only and the configured RX FIFO size in blocks of 256 bytes is reflected in the reset value. The width of this field depends on the Rx memory size selected in your configuration. For example, if the memory size is 2048, the width of this field is 3 bits: LOG2(2048/256) = LOG2(8) = 3 bits */
    vuint32_t _unused_27:5;            /* Reserved. */
  } B;
} GMAC_MTL_RXQ4_OPERATION_MODE_tag;

typedef union GMAC_MTL_RXQ4_MISSED_PACKET_OVERFLOW_CNT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t OVFPKTCNT:11;            /* Overflow Packet Counter This field indicates the number of packets discarded by the DWC_ether_qos because of Receive queue overflow. This counter is incremented each time the DWC_ether_qos discards an incoming packet because of overflow. This counter is reset when this register is read with mci_be_i[0] at 1'b1. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t OVFCNTOVF:1;             /* Overflow Counter Overflow Bit When set, this bit indicates that the Rx Queue Overflow Packet Counter field crossed the maximum limit. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t _unused_12:4;            /* Reserved. */
    vuint32_t MISPKTCNT:11;            /* Missed Packet Counter This field indicates the number of packets missed by the DWC_ether_qos because the application asserted ari_pkt_flush_i[] for this queue. This counter is reset when this register is read with mci_be_i[0] at 1b1. This counter is incremented by 1 when the DMA discards the packet because of buffer unavailability. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t MISCNTOVF:1;             /* Missed Packet Counter Overflow Bit When set, this bit indicates that the Rx Queue Missed Packet Counter crossed the maximum limit. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t _unused_28:4;            /* Reserved. */
  } B;
} GMAC_MTL_RXQ4_MISSED_PACKET_OVERFLOW_CNT_tag;

typedef union GMAC_MTL_RXQ4_DEBUG_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RWCSTS:1;                /* MTL Rx Queue Write Controller Active Status When high, this bit indicates that the MTL Rx queue Write controller is active, and it is transferring a received packet to the Rx Queue. */
    vuint32_t RRCSTS:2;                /* MTL Rx Queue Read Controller State This field gives the state of the Rx queue Read controller: */
    vuint32_t _unused_3:1;             /* Reserved. */
    vuint32_t RXQSTS:2;                /* MTL Rx Queue Fill-Level Status This field gives the status of the fill-level of the Rx Queue: */
    vuint32_t _unused_6:10;            /* Reserved. */
    vuint32_t PRXQ:14;                 /* Number of Packets in Receive Queue This field indicates the current number of packets in the Rx Queue. The theoretical maximum value for this field is 256KB/16B = 16K Packets, that is, Max_Queue_Size/Min_Packet_Size. */
    vuint32_t _unused_30:2;            /* Reserved. */
  } B;
} GMAC_MTL_RXQ4_DEBUG_tag;

typedef union GMAC_MTL_RXQ4_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXQ_WEGT:3;              /* Receive Queue Weight This field indicates the weight assigned to the Rx Queue 0. The weight is used as the number of continuous PBL or packets requests (depending on the RXQ_FRM_ARBIT) allocated to the queue in one arbitration cycle. */
    vuint32_t RXQ_FRM_ARBIT:1;         /* Receive Queue Packet Arbitration When this bit is set, the DWC_ether_qos drives the packet data to the ARI interface such that the entire packet data of currently-selected queue is transmitted before switching to other queue. When this bit is reset, the DWC_ether_qos drives the packet data to the ARI interface such that the following amount of data of currently-selected queue is transmitted before switching to other queue: - PBL amount of data (indicated by ari_qN_pbl_i[]) or - Complete data of a packet The status and the timestamp are not a part of the PBL data. Therefore, the DWC_ether_qos drives the complete status (including timestamp status) during first PBL request for the packet (in store-and-forward mode) or the last PBL request for the packet (in Threshold mode). */
    vuint32_t _unused_4:28;            /* Reserved. */
  } B;
} GMAC_MTL_RXQ4_CONTROL_tag;

typedef union GMAC_DMA_MODE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t SWR:1;                   /* Software Reset When this bit is set, the MAC and the DMA controller reset the logic and all internal registers of the DMA, MTL, and MAC. This bit is automatically cleared after the reset operation is complete in all DWC_ether_qos clock domains. Before reprogramming any DWC_ether_qos register, a value of zero should be read in this bit. This bit must be read at least 4 CSR clock cycles after it is written to 1. Note: The reset operation is complete only when all resets in all active clock domains are de-asserted. Therefore, it is essential that all PHY inputs clocks (applicable for the selected PHY interface) are present for software reset completion. The time to complete the software reset operation depends on the frequency of the slowest active clock. Access restriction applies. Setting 1 sets. Self-cleared. Setting 0 has no effect. */
    vuint32_t _unused_1:1;             /* Reserved. */
    vuint32_t _unused_2:3;             /* Reserved. */
    vuint32_t _unused_5:3;             /* Reserved. */
    vuint32_t DSPW:1;                  /* Descriptor Posted Write When this bit is set to 0, the descriptor writes are always non-posted. When this bit is set to 1, the descriptor writes are non-posted only when IOC (Interrupt on completion) is set in last descriptor, otherwise the descriptor writes are always posted. */
    vuint32_t _unused_9:1;             /* Reserved. */
    vuint32_t _unused_10:1;            /* Reserved. */
    vuint32_t _unused_11:1;            /* Reserved. */
    vuint32_t _unused_12:3;            /* Reserved. */
    vuint32_t _unused_15:1;            /* Reserved. */
    vuint32_t INTM:2;                  /* Interrupt Mode This field defines the interrupt mode of DWC_ether_qos. The behavior of the following outputs changes depending on the following settings: - sbd_perch_tx_intr_o[] (Transmit Per Channel Interrupt) - sbd_perch_rx_intr_o[] (Receive Per Channel Interrupt) - sbd_intr_o (Common Interrupt) It also changes the behavior of the RI/TI bits in the DMA_CH0_Status. - 00: sbd_perch_* are pulse signals for each TX/RX packet transfer completion events (irrespective of whether corresponding interrupts are enabled) for which IOC bits are enabled in descriptor. sbd_intr_o is also asserted when corresponding interrupts are enabled and cleared only when software clears the corresponding RI/TI status bits. - 01: sbd_perch_* are level signals asserted on TX/RX packet transfer completion event when corresponding interrupts are enabled and de-asserted when the software clears the corresponding RI/TI status bits. The sbd_intr_o is not asserted for these TX/RX packet transfer completion events. - 10: sbd_perch_* are level signals asserted on TX/RX packet transfer completion event when corresponding interrupts are enabled and de-asserted when the software clears the corresponding RI/TI status bits. However, the signal is asserted again if the same event occurred again before it was cleared. The sbd_intr_o is not asserted for these TX/RX packet transfer completion events. - 11: Reserved For more details please refer Table "DWC_ether_qos Transfer Complete Interrupt Behavior". */
    vuint32_t _unused_18:14;           /* Reserved. */
  } B;
} GMAC_DMA_MODE_tag;

typedef union GMAC_DMA_SYSBUS_MODE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t FB:1;                    /* Fixed Burst Length When this bit is set to 1, the EQOS-AXI master initiates burst transfers of specified lengths as given below. - Burst transfers of fixed burst lengths as indicated by the BLEN256, BLEN128, BLEN64, BLEN32, BLEN16, BLEN8, or BLEN4 field - Burst transfers of length 1 When this bit is set to 0, the EQOS-AXI master initiates burst transfers that are equal to or less than the maximum allowed burst length programmed in Bits[7:1]. */
    vuint32_t BLEN4:1;                 /* AXI Burst Length 4 When this bit is set to 1 or the FB bit is set to 0, the EQOS-AXI master can select a burst length of 4 on the AXI interface. When the FB bit is set to 0, setting this bit has no effect. */
    vuint32_t BLEN8:1;                 /* AXI Burst Length 8 When this bit is set to 1 or the FB bit is set to 0, the EQOS-AXI master can select a burst length of 8 on the AXI interface. When the FB bit is set to 0, setting this bit has no effect. */
    vuint32_t BLEN16:1;                /* AXI Burst Length 16 When this bit is set to 1 or the FB bit is set to 0, the EQOS-AXI master can select a burst length of 16 on the AXI interface. When the FB bit is set to 0, setting this bit has no effect. */
    vuint32_t BLEN32:1;                /* AXI Burst Length 32 When this bit is set to 1, the EQOS-AXI master can select a burst length of 32 on the AXI interface. */
    vuint32_t BLEN64:1;                /* AXI Burst Length 64 When this bit is set to 1, the EQOS-AXI master can select a burst length of 64 on the AXI interface. */
    vuint32_t BLEN128:1;               /* AXI Burst Length 128 When this bit is set to 1, the EQOS-AXI master can select a burst length of 128 on the AXI interface. */
    vuint32_t BLEN256:1;               /* AXI Burst Length 256 When this bit is set to 1, the EQOS-AXI master can select a burst length of 256 on the AXI interface. */
    vuint32_t _unused_8:2;             /* Reserved. */
    vuint32_t AALE:1;                  /* Automatic AXI LPI enable When set to 1, enables the AXI master to enter into LPI state when there is no activity in the DWC_ether_qos for number of system clock cycles programmed in the LPIEI field of AXI_LPI_Entry_Interval register. */
    vuint32_t _unused_11:1;            /* Reserved. */
    vuint32_t AAL:1;                   /* Address-Aligned Beats When this bit is set to 1, the EQOS-AXI or EQOS-AHB master performs address-aligned burst transfers on Read and Write channels. */
    vuint32_t ONEKBBE:1;               /* 1 KB Boundary Crossing Enable for the EQOS-AXI Master When set, the burst transfers performed by the EQOS-AXI master do not cross 1 KB boundary. When reset, the burst transfers performed by the EQOS-AXI master do not cross 4 KB boundary. */
    vuint32_t _unused_14:1;            /* Reserved. */
    vuint32_t _unused_15:1;            /* Reserved. */
    vuint32_t RD_OSR_LMT:4;            /* AXI Maximum Read Outstanding Request Limit This value limits the maximum outstanding request on the AXI read interface. Maximum outstanding requests = RD_OSR_LMT + 1 Note: - Bit 18 is reserved if parameter DWC_ETHER_QOS_AXI_MAX_RD_REQ = 4 - Bit 19 is reserved if parameter DWC_ETHER_QOS_AXI_MAX_RD_REQ!= 16 */
    vuint32_t _unused_20:4;            /* Reserved. */
    vuint32_t WR_OSR_LMT:4;            /* AXI Maximum Write Outstanding Request Limit This value limits the maximum outstanding request on the AXI write interface. Maximum outstanding requests = WR_OSR_LMT + 1 Note: - Bit 26 is reserved if DWC_ETHER_QOS_AXI_MAX_WR_REQ = 4 - Bit 27 is reserved if DWC_ETHER_QOS_AXI_MAX_WR_REQ!= 16 */
    vuint32_t _unused_28:2;            /* Reserved. */
    vuint32_t LPI_XIT_PKT:1;           /* Unlock on Magic Packet or Remote Wake-Up Packet When set to 1, this bit enables the AXI master to come out of the LPI mode only when the magic packet or remote wake-up packet is received. When set to 0, this bit enables the AXI master to come out of the LPI mode when any packet is received. */
    vuint32_t EN_LPI:1;                /* Enable Low Power Interface (LPI) When set to 1, this bit enables the LPI mode supported by the EQOS-AXI configuration and accepts the LPI request from the AXI System Clock controller. When set to 0, this bit disables the LPI mode and always denies the LPI request from the AXI System Clock controller. */
  } B;
} GMAC_DMA_SYSBUS_MODE_tag;

typedef union GMAC_DMA_INTERRUPT_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t DC0IS:1;                 /* DMA Channel 0 Interrupt Status This bit indicates an interrupt event in DMA Channel 0. To reset this bit to 1'b0, the software must read the corresponding register in DMA Channel 0 to get the exact cause of the interrupt and clear its source. */
    vuint32_t DC1IS:1;                 /* DMA Channel 1 Interrupt Status This bit indicates an interrupt event in DMA Channel 1. To reset this bit to 1'b0, the software must read the corresponding register in DMA Channel 1 to get the exact cause of the interrupt and clear its source. */
    vuint32_t DC2IS:1;                 /* DMA Channel 2 Interrupt Status This bit indicates an interrupt event in DMA Channel 2. To reset this bit to 1'b0, the software must read the corresponding register in DMA Channel 2 to get the exact cause of the interrupt and clear its source. */
    vuint32_t DC3IS:1;                 /* DMA Channel 3 Interrupt Status This bit indicates an interrupt event in DMA Channel 3. To reset this bit to 1'b0, the software must read the corresponding register in DMA Channel 3 to get the exact cause of the interrupt and clear its source. */
    vuint32_t DC4IS:1;                 /* DMA Channel 4 Interrupt Status This bit indicates an interrupt event in DMA Channel 4. To reset this bit to 1'b0, the software must read the corresponding register in DMA Channel 4 to get the exact cause of the interrupt and clear its source. */
    vuint32_t _unused_5:1;             /* Reserved. */
    vuint32_t _unused_6:1;             /* Reserved. */
    vuint32_t _unused_7:1;             /* Reserved. */
    vuint32_t _unused_8:8;             /* Reserved. */
    vuint32_t MTLIS:1;                 /* MTL Interrupt Status This bit indicates an interrupt event in the MTL. To reset this bit to 1'b0, the software must read the corresponding register in the MTL to get the exact cause of the interrupt and clear its source. */
    vuint32_t MACIS:1;                 /* MAC Interrupt Status This bit indicates an interrupt event in the MAC. To reset this bit to 1'b0, the software must read the corresponding register in the MAC to get the exact cause of the interrupt and clear its source. */
    vuint32_t _unused_18:14;           /* Reserved. */
  } B;
} GMAC_DMA_INTERRUPT_STATUS_tag;

typedef union GMAC_DMA_DEBUG_STATUS0_union_tag {
  vuint32_t R;
  struct {
    vuint32_t AXWHSTS:1;               /* AXI Master Write Channel When high, this bit indicates that the write channel of the AXI master is active, and it is transferring data. */
    vuint32_t AXRHSTS:1;               /* AXI Master Read Channel Status When high, this bit indicates that the read channel of the AXI master is active, and it is transferring the data. */
    vuint32_t _unused_2:6;             /* Reserved. */
    vuint32_t RPS0:4;                  /* DMA Channel 0 Receive Process State This field indicates the Rx DMA FSM state for Channel 0. The MSB of this field always returns 0. This field does not generate an interrupt. */
    vuint32_t TPS0:4;                  /* DMA Channel 0 Transmit Process State This field indicates the Tx DMA FSM state for Channel 0. The MSB of this field always returns 0. This field does not generate an interrupt. */
    vuint32_t RPS1:4;                  /* DMA Channel 1 Receive Process State This field indicates the Rx DMA FSM state for Channel 1. The MSB of this field always returns 0. This field does not generate an interrupt. */
    vuint32_t TPS1:4;                  /* DMA Channel 1 Transmit Process State This field indicates the Tx DMA FSM state for Channel 1. The MSB of this field always returns 0. This field does not generate an interrupt. */
    vuint32_t RPS2:4;                  /* DMA Channel 2 Receive Process State This field indicates the Rx DMA FSM state for Channel 2. The MSB of this field always returns 0. This field does not generate an interrupt. */
    vuint32_t TPS2:4;                  /* DMA Channel 2 Transmit Process State This field indicates the Tx DMA FSM state for Channel 2. The MSB of this field always returns 0. This field does not generate an interrupt. */
  } B;
} GMAC_DMA_DEBUG_STATUS0_tag;

typedef union GMAC_DMA_DEBUG_STATUS1_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RPS3:4;                  /* DMA Channel 3 Receive Process State This field indicates the Rx DMA FSM state for Channel 3. The MSB of this field always returns 0. This field does not generate an interrupt. */
    vuint32_t TPS3:4;                  /* DMA Channel 3 Transmit Process State This field indicates the Tx DMA FSM state for Channel 3. The MSB of this field always returns 0. This field does not generate an interrupt. */
    vuint32_t RPS4:4;                  /* DMA Channel 4 Receive Process State This field indicates the Rx DMA FSM state for Channel 4. The MSB of this field always returns 0. This field does not generate an interrupt. */
    vuint32_t TPS4:4;                  /* DMA Channel 4 Transmit Process State This field indicates the Tx DMA FSM state for Channel 4. The MSB of this field always returns 0. This field does not generate an interrupt. */
    vuint32_t _unused_16:4;            /* Reserved. */
    vuint32_t _unused_20:4;            /* Reserved. */
    vuint32_t _unused_24:4;            /* Reserved. */
    vuint32_t _unused_28:4;            /* Reserved. */
  } B;
} GMAC_DMA_DEBUG_STATUS1_tag;

typedef union GMAC_AXI4_TX_AR_ACE_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TDRC:4;                  /* Transmit DMA Read Descriptor Cache Control This field is used to drive arcache_o[3:0] signal when Transmit DMA engines access the Descriptor. */
    vuint32_t TDRD:2;                  /* Transmit DMA Read Descriptor Domain Control This field is used to drive ardomain_o[1:0] signal when Transmit DMA engines access the Descriptor. */
    vuint32_t _unused_6:2;             /* Reserved. */
    vuint32_t TEC:4;                   /* Transmit DMA Extended Packet Buffer This field is used to drive arcache_o[3:0] signal when Transmit DMA is accessing the extended buffers (when packet is distributed across multiple buffers). */
    vuint32_t TED:2;                   /* Transmit DMA Extended Packet Buffer This field is used to drive ardomain_o[1:0] signal when Transmit DMA is accessing the extended buffers (when packet is distributed across multiple buffers). */
    vuint32_t _unused_14:2;            /* Reserved. */
    vuint32_t THC:4;                   /* Transmit DMA First Packet Buffer This field is used to drive arcache_o[3:0] signal when Transmit DMA is accessing First Buffer of the Packet (First valid buffer with FD being set in the TDES3 of the Descriptor).. */
    vuint32_t THD:2;                   /* Transmit DMA First Packet Buffer This field is used to drive ardomain_o[1:0] signal when Transmit DMA is accessing First Buffer of the Packet (First valid buffer with FD being set in the TDES3 of the Descriptor). */
    vuint32_t _unused_22:10;           /* Reserved. */
  } B;
} GMAC_AXI4_TX_AR_ACE_CONTROL_tag;

typedef union GMAC_AXI4_RX_AW_ACE_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RDWC:4;                  /* Receive DMA Write Descriptor Cache Control This field is used to drive awcache_o[3:0] signal when Receive DMA accesses the Descriptor. */
    vuint32_t RDWD:2;                  /* Receive DMA Write Descriptor Domain Control This field is used to drive awdomain_o[1:0] signal when Receive DMA accesses the Descriptor. */
    vuint32_t _unused_6:2;             /* Reserved. */
    vuint32_t RPC:4;                   /* Receive DMA Payload Cache Control This field is used to drive awcache_o[3:0] signal when Receive DMA is accessing the Payload Buffer when Header and payload are separated. */
    vuint32_t RPD:2;                   /* Receive DMA Payload Domain Control This field is used to drive awdomain_o[1:0] signal when Receive DMA is accessing the Payload Buffer when Header and payload are separated. */
    vuint32_t _unused_14:2;            /* Reserved. */
    vuint32_t RHC:4;                   /* Receive DMA Header Cache Control This field is used to drive awcache_o[3:0] and signal when Receive DMA is accessing the header Buffer when Header and payload are separated. */
    vuint32_t RHD:2;                   /* Receive DMA Header Domain Control This field is used to drive awdomain_o[1:0] and signal when Receive DMA is accessing the header Buffer when Header and payload are separated. */
    vuint32_t _unused_22:2;            /* Reserved. */
    vuint32_t RDC:4;                   /* Receive DMA Buffer Cache Control This field is used to drive awcache_o[3:0] signal when Receive DMA is accessing the Buffer when Header and payload are NOT separated. */
    vuint32_t RDD:2;                   /* Receive DMA Buffer Domain Control This field is used to drive the awdomain_o[1:0] signal when Receive DMA is accessing the Buffer when Header and payload are NOT separated. */
    vuint32_t _unused_30:2;            /* Reserved. */
  } B;
} GMAC_AXI4_RX_AW_ACE_CONTROL_tag;

typedef union GMAC_AXI4_TXRX_AWAR_ACE_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TDWC:4;                  /* Transmit DMA Write Descriptor Cache control This field is used to drive awcache_o[3:0] signal when Transmit DMA writes to the Descriptor. */
    vuint32_t TDWD:2;                  /* Transmit DMA Write Descriptor Domain control This field is used to drive awdomain_o[1:0] signal when Transmit DMA write to the Descriptor. */
    vuint32_t _unused_6:2;             /* Reserved. */
    vuint32_t RDRC:4;                  /* Receive DMA Read Descriptor Cache control This field is used to drive arcache_o[3:0] signal when Receive DMA engines read the Descriptor. */
    vuint32_t RDRD:2;                  /* Receive DMA Read Descriptor Domain control This field is used to drive ardomain_o[1:0] signal when Receive DMA engines read the Descriptor. */
    vuint32_t _unused_14:2;            /* Reserved. */
    vuint32_t RDP:3;                   /* DMA Read Protection control This field is used to drive arprot_m_o[2:0] signal during all read requests. */
    vuint32_t _unused_19:1;            /* Reserved. */
    vuint32_t WRP:3;                   /* DMA Write Protection control This field is used to drive awprot_m_o[2:0] signal on the AXI Write Channel. */
    vuint32_t _unused_23:9;            /* Reserved. */
  } B;
} GMAC_AXI4_TXRX_AWAR_ACE_CONTROL_tag;

typedef union GMAC_AXI_LPI_ENTRY_INTERVAL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t LPIEI:4;                 /* LPI Entry Interval Contains the number of system clock cycles, multiplied by 64, to wait for an activity in the DWC_ether_qos to enter into the AXI low power state 0 indicates 64 clock cycles */
    vuint32_t _unused_4:28;            /* Reserved. */
  } B;
} GMAC_AXI_LPI_ENTRY_INTERVAL_tag;

typedef union GMAC_DMA_TBS_CTRL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t FTOV:1;                  /* Fetch Time Offset Valid When set indicates the FTOS field is valid. When not set, indicates the Fetch Offset is not valid and the DMA engine can fetch the frames from host memory without any time restrictions. */
    vuint32_t _unused_1:3;             /* Reserved. */
    vuint32_t FGOS:3;                  /* Fetch GSN Offset The number GSN slots that must be deducted from the Launch GSN to compute the Fetch GSN. Value valid only when FTOV is set. */
    vuint32_t _unused_7:1;             /* Reserved. */
    vuint32_t FTOS:24;                 /* Fetch Time Offset The value in units of 256 nanoseconds, that has to be deducted from the Launch time to compute the Fetch Time. Max value: 999,999,999 ns, additionally should be smaller than CTR-1 value when ESTM mode is set since this value is a modulo CTR value. */
  } B;
} GMAC_DMA_TBS_CTRL_tag;

typedef union GMAC_DMA_SAFETY_INTERRUPT_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t DECIS:1;                 /* DMA ECC Correctable error Interrupt Status This bit indicates an interrupt event in the DMA ECC safety feature. To get the exact cause of the interrupt the application should read the DMA_ECC_Interrupt_Status register. */
    vuint32_t DEUIS:1;                 /* DMA ECC Uncorrectable error Interrupt Status This bit indicates an interrupt event in the DMA ECC safety feature. To get the exact cause of the interrupt the application should read the DMA_ECC_Interrupt_Status register. */
    vuint32_t _unused_2:26;            /* Reserved. */
    vuint32_t MSCIS:1;                 /* MTL Safety Correctable error Interrupt Status This bit indicates a correctable error interrupt event in MTL. To get exact cause of the interrupt the software should read the MTL_Safety_Interrupt_Status register. */
    vuint32_t MSUIS:1;                 /* MTL Safety Uncorrectable error Interrupt Status This bit indicates an uncorrectable error interrupt event in MTL. To get exact cause of the interrupt the software should read the MTL_Safety_Interrupt_Status register. */
    vuint32_t _unused_30:1;            /* Reserved. */
    vuint32_t MCSIS:1;                 /* MAC Safety Uncorrectable Interrupt Status Indicates a uncorrectable Safety related Interrupt is set in the MAC module. MAC_DPP_FSM_Interrupt_Status register should be read when this bit is set, to get the cause of the Safety Interrupt in MAC. */
  } B;
} GMAC_DMA_SAFETY_INTERRUPT_STATUS_tag;

typedef union GMAC_DMA_CH0_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:14;            /* Reserved. */
    vuint32_t _unused_14:2;            /* Reserved. */
    vuint32_t PBLX8:1;                 /* 8xPBL mode When this bit is set, the PBL value programmed in Bits[21:16] in DMA_CH0_Tx_Control and Bits[21:16] in DMA_CH0_Rx_Control is multiplied by eight times. Therefore, the DMA transfers the data in 8, 16, 32, 64, 128, and 256 beats depending on the PBL value. */
    vuint32_t _unused_17:1;            /* Reserved. */
    vuint32_t DSL:3;                   /* Descriptor Skip Length This bit specifies the Word, Dword, or Lword number (depending on the 32-bit, 64-bit, or 128-bit bus) to skip between two unchained descriptors. The address skipping starts from the end of the current descriptor to the start of the next descriptor. When the DSL value is equal to zero, the DMA takes the descriptor table as contiguous. */
    vuint32_t _unused_21:3;            /* Reserved. */
    vuint32_t SPH:1;                   /* Split Headers When this bit is set, the DMA splits the header and payload in the Receive path. The DMA writes the header to the Buffer Address1 of RDES0. The DMA writes the payload to the buffer to which the Buffer Address2 is pointing. The software must ensure that the header fits into the Receive buffers. If the header length exceeds the receive buffer size, the DMA does not split the header and payload. This bit is available only if Enable Split Header Structure option is selected. */
    vuint32_t _unused_25:7;            /* Reserved. */
  } B;
} GMAC_DMA_CH0_CONTROL_tag;

typedef union GMAC_DMA_CH0_TX_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ST:1;                    /* Start or Stop Transmission Command When this bit is set, transmission is placed in the Running state. The DMA checks the Transmit list at the current position for a packet to be transmitted. The DMA tries to acquire descriptor from either of the following positions: - The current position in the list This is the base address of the Transmit list set by the DMA_CH0_TxDesc_List_Address register. - The position at which the transmission was previously stopped If the DMA does not own the current descriptor, the transmission enters the Suspended state and the TBU bit of the DMA_CH0_Status register is set. The Start Transmission command is effective only when the transmission is stopped. If the command is issued before setting the DMA_CH0_TxDesc_List_Address register, the DMA behavior is unpredictable. When this bit is reset, the transmission process is placed in the Stopped state after completing the transmission of the current packet. The Next Descriptor position in the Transmit list is saved, and it becomes the current position when the transmission is restarted. To change the list address, you need to program DMA_CH0_TxDesc_List_Address register with a new value when this bit is reset. The new value is considered when this bit is set again. The stop transmission command is effective only when the transmission of the current packet is complete or the transmission is in the Suspended state. */
    vuint32_t _unused_1:3;             /* Reserved. */
    vuint32_t OSF:1;                   /* Operate on Second Packet When this bit is set, it instructs the DMA to process the second packet of the Transmit data even before the status for the first packet is obtained. */
    vuint32_t _unused_5:7;             /* Reserved. */
    vuint32_t _unused_12:1;            /* Reserved. */
    vuint32_t _unused_13:2;            /* Reserved. */
    vuint32_t IPBL:1;                  /* Ignore PBL Requirement When this bit is set, the DMA does not check for PBL number of locations in the MTL before initiating a transfer. If space is not available, the MTL may use handshaking to slow the DMA. Note: This bit/mode must not be used when multiple Transmit DMA Channels are enabled as it may block other Transmit and Receive DMA Channels from accessing the Read Data Channel of AXI bus until space is available in Transmit Queue for current transfer. */
    vuint32_t TXPBL:6;                 /* Transmit Programmable Burst Length These bits indicate the maximum number of beats to be transferred in one DMA block data transfer. The DMA always attempts max burst as specified in PBL each time it starts a burst transfer on the application bus. You can program PBL with any of the following values: 1, 2, 4, 8, 16, or 32. Any other value results in undefined behavior. To transfer more than 32 beats, perform the following steps: 1. Set the 8xPBL mode in DMA_CH0_Control register. 2. Set the TxPBL. Note: The maximum value of TxPBL must be less than or equal to half the Tx Queue size (TQS field of MTL_TxQ[n]_Operation_Mode register) in terms of beats. This is required so that the Tx Queue has space to store at least another Tx PBL worth of data while the MTL Tx Queue Controller is transferring data to MAC. For example, in 64-bit data width configurations the total locations in Tx Queue of size 512 bytes is 64, TxPBL and 8xPBL needs to be programmed to less than or equal to 32. */
    vuint32_t _unused_22:1;            /* Reserved. */
    vuint32_t _unused_23:1;            /* Reserved. */
    vuint32_t TQOS:4;                  /* Transmit QOS. This field is used to drive arqos_m_o[3:0] or awqos_m_o[3:0] output signals for all transactions of DMA Tx Channel0. */
    vuint32_t EDSE:1;                  /* Enhanced Descriptor Enable When this bit is set, the corresponding channel uses Enhanced Descriptors that are 32 Bytes for both Normal and Context Descriptors. When reset, the corresponding channel uses the descriptors that are 16 Bytes. */
    vuint32_t _unused_29:3;            /* Reserved. */
  } B;
} GMAC_DMA_CH0_TX_CONTROL_tag;

typedef union GMAC_DMA_CH0_RX_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t SR:1;                    /* Start or Stop Receive When this bit is set, the DMA tries to acquire the descriptor from the Receive list and processes the incoming packets. The DMA tries to acquire descriptor from either of the following positions: - The current position in the list This is the address set by the DMA_CH0_RxDesc_List_Address register. - The position at which the Rx process was previously stopped If the DMA does not own the current descriptor, the reception is suspended and the RBU bit of the DMA_CH0_Status register is set. The Start Receive command is effective only when the reception is stopped. If the command is issued before setting the DMA_CH0_RxDesc_List_Address register, the DMA behavior is unpredictable. When this bit is reset, the Rx DMA operation is stopped after the transfer of the current packet. The next descriptor position in the Receive list is saved, and it becomes the current position after the Rx process is restarted. The Stop Receive command is effective only when the Rx process is in the Running (waiting for Rx packet) or Suspended state. */
    vuint32_t RBSZ_X_0:3;              /* Receive Buffer size Low RBSZ[13:0] is split into two fields RBSZ_13_y and RBSZ_x_0. The RBSZ_x_0 is the lower field whose width is based on data bus width of the configuration. This field is of width 2, 3, or 4 bits for 32-bit, 64-bit, or 128-bit data bus width respectively. This field is read-only (RO). */
    vuint32_t RBSZ_13_Y:11;            /* Receive Buffer size High RBSZ[13:0] is split into two fields higher RBSZ_13_y and lower RBSZ_x_0. The RBSZ[13:0] field indicates the size of the Rx buffers specified in bytes. The maximum buffer size is limited to 16K bytes. The buffer size is applicable to payload buffers when split headers are enabled. Note: The buffer size must be a multiple of 4, 8, or 16 depending on the data bus widths (32-bit, 64-bit, or 128-bit respectively). This is required even if the value of buffer address pointer is not aligned to data bus width. Hence the lower RBSZ_x_0 bits are read-only and the value is considered as all-zero. Thus the RBSZ_13_y indicates the buffer size in terms of locations (with the width same as bus-width). */
    vuint32_t _unused_15:1;            /* Reserved. */
    vuint32_t RXPBL:6;                 /* Receive Programmable Burst Length These bits indicate the maximum number of beats to be transferred in one DMA block data transfer. The DMA always attempts max burst as specified in PBL each time it starts a burst transfer on the application bus. You can program PBL with any of the following values: 1, 2, 4, 8, 16, or 32. Any other value results in undefined behavior. To transfer more than 32 beats, perform the following steps: 1. Set the 8xPBL mode in the DMA_CH0_Control register. 2. Set the RxPBL. Note: The maximum value of RxPBL must be less than or equal to half the Rx Queue size (RQS field of MTL_RxQ[n]_Operation_Mode register) in terms of beats. This is required so that the Rx Queue has space to store at least another Rx PBL worth of data while the Rx DMA is transferring a block of data. For example, in 64-bit data width configurations the total locations in Rx Queue of size 512 bytes is 64, so RxPBL and 8xPBL needs to be programmed to less than or equal to 32. */
    vuint32_t _unused_22:1;            /* Reserved. */
    vuint32_t _unused_23:1;            /* Reserved. */
    vuint32_t RQOS:4;                  /* Rx AXI4 QOS. This field is used to drive arqos_m_o[3:0] or awqos_m_o[3:0] output signals for all transactions of DMA Rx Channel0. */
    vuint32_t _unused_28:3;            /* Reserved. */
    vuint32_t RPF:1;                   /* Rx Packet Flush. When this bit is set to 1, then DWC_ether_qos automatically flushes the packet from the Rx Queues destined to this DMA Rx Channel, when it is stopped. When this bit remains set and the DMA is re-started by the software driver, the packets residing in the Rx Queues that were received when this RxDMA was stopped, get flushed out. The packets that are received by the MAC after the RxDMA is re-started are routed to the RxDMA. The flushing happens on the Read side of the Rx Queue. When this bit is set to 0, the DWC_ether_qos not flush the packet in the Rx Queue destined to this RxDMA Channel when it is STOP state. This may in turn cause head-of-line blocking in the corresponding RxQueue. */
  } B;
} GMAC_DMA_CH0_RX_CONTROL_tag;

typedef union GMAC_DMA_CH0_TXDESC_LIST_ADDRESS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;
    vuint32_t TDESLA:29;               /* Start of Transmit List This field contains the base address of the first descriptor in the Transmit descriptor list. The DMA ignores the LSB bits (1:0, 2:0, or 3:0) for 32-bit, 64-bit, or 128-bit bus width and internally takes these bits as all-zero. Therefore, these LSB bits are read-only (RO). The width of this field depends on the configuration: - 31:2 for 32-bit configuration - 31:3 for 64-bit configuration - 31:4 for 128-bit configuration */
  } B;
} GMAC_DMA_CH0_TXDESC_LIST_ADDRESS_tag;

typedef union GMAC_DMA_CH0_RXDESC_LIST_ADDRESS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;
    vuint32_t RDESLA:29;               /* Start of Receive List This field contains the base address of the first descriptor in the Rx Descriptor list. The DMA ignores the LSB bits (1:0, 2:0, or 3:0) for 32-bit, 64-bit, or 128-bit bus width and internally takes these bits as all-zero. Therefore, these LSB bits are read-only (RO). The width of this field depends on the configuration: - 31:2 for 32-bit configuration - 31:3 for 64-bit configuration - 31:4 for 128-bit configuration */
  } B;
} GMAC_DMA_CH0_RXDESC_LIST_ADDRESS_tag;

typedef union GMAC_DMA_CH0_TXDESC_TAIL_POINTER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;
    vuint32_t TDTP:29;                 /* Transmit Descriptor Tail Pointer This field contains the tail pointer for the Tx descriptor ring. The software writes the tail pointer to add more descriptors to the Tx channel. The hardware tries to transmit all packets referenced by the descriptors between the head and the tail pointer registers. The width of this field depends on the configuration: - 31:2 for 32-bit configuration - 31:3 for 64-bit configuration - 31:4 for 128-bit configuration */
  } B;
} GMAC_DMA_CH0_TXDESC_TAIL_POINTER_tag;

typedef union GMAC_DMA_CH0_RXDESC_TAIL_POINTER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;
    vuint32_t RDTP:29;                 /* Receive Descriptor Tail Pointer This field contains the tail pointer for the Rx descriptor ring. The software writes the tail pointer to add more descriptors to the Rx channel. The hardware tries to write all received packets to the descriptors referenced between the head and the tail pointer registers. The width of this field depends on the configuration: - 31:2 for 32-bit configuration - 31:3 for 64-bit configuration - 31:4 for 128-bit configuration */
  } B;
} GMAC_DMA_CH0_RXDESC_TAIL_POINTER_tag;

typedef union GMAC_DMA_CH0_TXDESC_RING_LENGTH_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TDRL:10;                 /* Transmit Descriptor Ring Length This field sets the maximum number of Tx descriptors in the circular descriptor ring. The maximum number of descriptors is limited to 1K descriptors. NXP recommends a minimum ring descriptor length of 4. For example, You can program any value up to 0x3FF in this field. This field is 10 bits wide, if you program 0x3FF, you can have 1024 descriptors. If you want to have 10 descriptors, program it to a value of 0x9. */
    vuint32_t _unused_10:22;           /* Reserved. */
  } B;
} GMAC_DMA_CH0_TXDESC_RING_LENGTH_tag;

typedef union GMAC_DMA_CH0_RXDESC_RING_LENGTH_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RDRL:10;                 /* Receive Descriptor Ring Length This register sets the maximum number of Rx descriptors in the circular descriptor ring. The maximum number of descriptors is limited to 1K descriptors. For example, You can program any value up to 0x3FF in this field. This field is 10 bits wide, if you program 0x3FF, you can have 1024 descriptors. If you want to have 10 descriptors, program it to a value of 0x9. */
    vuint32_t _unused_10:22;           /* Reserved. */
  } B;
} GMAC_DMA_CH0_RXDESC_RING_LENGTH_tag;

typedef union GMAC_DMA_CH0_INTERRUPT_ENABLE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TIE:1;                   /* Transmit Interrupt Enable When this bit is set along with the NIE bit, the Transmit Interrupt is enabled. When this bit is reset, the Transmit Interrupt is disabled. */
    vuint32_t TXSE:1;                  /* Transmit Stopped Enable When this bit is set along with the AIE bit, the Transmission Stopped interrupt is enabled. When this bit is reset, the Transmission Stopped interrupt is disabled. */
    vuint32_t TBUE:1;                  /* Transmit Buffer Unavailable Enable When this bit is set along with the NIE bit, the Transmit Buffer Unavailable interrupt is enabled. When this bit is reset, the Transmit Buffer Unavailable interrupt is disabled. */
    vuint32_t _unused_3:3;             /* Reserved. */
    vuint32_t RIE:1;                   /* Receive Interrupt Enable When this bit is set along with the NIE bit, the Receive Interrupt is enabled. When this bit is reset, the Receive Interrupt is disabled. */
    vuint32_t RBUE:1;                  /* Receive Buffer Unavailable Enable When this bit is set along with the AIE bit, the Receive Buffer Unavailable interrupt is enabled. When this bit is reset, the Receive Buffer Unavailable interrupt is disabled. */
    vuint32_t RSE:1;                   /* Receive Stopped Enable When this bit is set along with the AIE bit, the Receive Stopped Interrupt is enabled. When this bit is reset, the Receive Stopped interrupt is disabled. */
    vuint32_t RWTE:1;                  /* Receive Watchdog Timeout Enable When this bit is set along with the AIE bit, the Receive Watchdog Timeout interrupt is enabled. When this bit is reset, the Receive Watchdog Timeout interrupt is disabled. */
    vuint32_t ETIE:1;                  /* Early Transmit Interrupt Enable When this bit is set along with the AIE bit, the Early Transmit interrupt is enabled. When this bit is reset, the Early Transmit interrupt is disabled. */
    vuint32_t ERIE:1;                  /* Early Receive Interrupt Enable When this bit is set along with the NIE bit, the Early Receive interrupt is enabled. When this bit is reset, the Early Receive interrupt is disabled. */
    vuint32_t FBEE:1;                  /* Fatal Bus Error Enable When this bit is set along with the AIE bit, the Fatal Bus error interrupt is enabled. When this bit is reset, the Fatal Bus Error error interrupt is disabled. */
    vuint32_t CDEE:1;                  /* Context Descriptor Error Enable When this bit is set along with the AIE bit, the Descriptor error interrupt is enabled. When this bit is reset, the Descriptor error interrupt is disabled. */
    vuint32_t AIE:1;                   /* Abnormal Interrupt Summary Enable When this bit is set, the abnormal interrupt summary is enabled. This bit enables the following interrupts in the DMA_CH0_Status register: - Bit 1: Transmit Process Stopped - Bit 7: Rx Buffer Unavailable - Bit 8: Receive Process Stopped - Bit 9: Receive Watchdog Timeout - Bit 10: Early Transmit Interrupt - Bit 12: Fatal Bus Error - Bit 13: Context Descriptor Error When this bit is reset, the abnormal interrupt summary is disabled. */
    vuint32_t NIE:1;                   /* Normal Interrupt Summary Enable When this bit is set, the normal interrupt summary is enabled. This bit enables the following interrupts in the DMA_CH0_Status register: - Bit 0: Transmit Interrupt - Bit 2: Transmit Buffer Unavailable - Bit 6: Receive Interrupt - Bit 11: Early Receive Interrupt When this bit is reset, the normal interrupt summary is disabled. */
    vuint32_t _unused_16:16;           /* Reserved. */
  } B;
} GMAC_DMA_CH0_INTERRUPT_ENABLE_tag;

typedef union GMAC_DMA_CH0_RX_INTERRUPT_WATCHDOG_TIMER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RWT:8;                   /* Receive Interrupt Watchdog Timer Count This field indicates the number of system clock cycles, multiplied by factor indicated in RWTU field, for which the watchdog timer is set. The watchdog timer is triggered with the programmed value after the Rx DMA completes the transfer of a packet for which the RI bit is not set in the DMA_CH(#i)_Status register, because of the setting of Interrupt Enable bit in the corresponding descriptor RDES3[30]. When the watchdog timer runs out, the RI bit is set and the timer is stopped. The watchdog timer is reset when the RI bit is set high because of automatic setting of RI as per the Interrupt Enable bit RDES3[30] of any received packet. */
    vuint32_t _unused_8:8;             /* Reserved. */
    vuint32_t RWTU:2;                  /* Receive Interrupt Watchdog Timer Count Units This fields indicates the number of system clock cycles corresponding to one unit in RWT field. - 2'b00: 256 - 2'b01: 512 - 2'b10: 1024 - 2'b11: 2048 For example, when RWT=2 and RWTU=1, the watchdog timer is set for 2*512=1024 system clock cycles. */
    vuint32_t _unused_18:14;           /* Reserved. */
  } B;
} GMAC_DMA_CH0_RX_INTERRUPT_WATCHDOG_TIMER_tag;

typedef union GMAC_DMA_CH0_SLOT_FUNCTION_CONTROL_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ESC:1;                   /* Enable Slot Comparison When set, this bit enables the checking of the slot numbers programmed in the Tx descriptor with the current reference given in the RSN field. The DMA fetches the data from the corresponding buffer only when the slot number is - equal to the reference slot number or - ahead of the reference slot number by one slot When reset, this bit disables the checking of the slot numbers. The DMA fetches the data immediately after the descriptor is processed. Note: The UFO (UDP Fragmentation over IPv4)/TSO/USO should not be enabled along with TBS/AVB Slot number check. The UFO/TSO/USO involves multiple packets/segments/fragments transmission for single packet received from application and the slot number check are applicable for fetching of only first segment/fragment. As a result it might be difficult for software to specify slot number for subsequent packets. */
    vuint32_t ASC:1;                   /* Advance Slot Check When set, this bit enables the DMA to fetch the data from the buffer when the slot number (SLOTNUM) programmed in the Tx descriptor is - equal to the reference slot number given in the RSN field or - ahead of the reference slot number by up to two slots This bit is applicable only when the ESC bit is set. */
    vuint32_t _unused_2:2;             /* Reserved. */
    vuint32_t SIV:12;                  /* Slot Interval Value This field controls the period of the slot interval in which the TxDMA fetches the scheduled packets. A value of 0 specifies the slot interval of 1 us while the maximum value 4095 specifies the slot interval of 4096us. The default/reset value is 0x07C which corresponds to slot interval of 125us */
    vuint32_t RSN:4;                   /* Reference Slot Number This field gives the current value of the reference slot number in the DMA. It is used for slot comparison. */
    vuint32_t _unused_20:12;           /* Reserved. */
  } B;
} GMAC_DMA_CH0_SLOT_FUNCTION_CONTROL_STATUS_tag;

typedef union GMAC_DMA_CH0_CURRENT_APP_TXDESC_union_tag {
  vuint32_t R;
  struct {
    vuint32_t CURTDESAPTR:32;          /* Application Transmit Descriptor Address Pointer The DMA updates this pointer during Tx operation. This pointer is cleared on reset. */
  } B;
} GMAC_DMA_CH0_CURRENT_APP_TXDESC_tag;

typedef union GMAC_DMA_CH0_CURRENT_APP_RXDESC_union_tag {
  vuint32_t R;
  struct {
    vuint32_t CURRDESAPTR:32;          /* Application Receive Descriptor Address Pointer The DMA updates this pointer during Rx operation. This pointer is cleared on reset. */
  } B;
} GMAC_DMA_CH0_CURRENT_APP_RXDESC_tag;

typedef union GMAC_DMA_CH0_CURRENT_APP_TXBUFFER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t CURTBUFAPTR:32;          /* Application Transmit Buffer Address Pointer The DMA updates this pointer during Tx operation. This pointer is cleared on reset. */
  } B;
} GMAC_DMA_CH0_CURRENT_APP_TXBUFFER_tag;

typedef union GMAC_DMA_CH0_CURRENT_APP_RXBUFFER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t CURRBUFAPTR:32;          /* Application Receive Buffer Address Pointer The DMA updates this pointer during Rx operation. This pointer is cleared on reset. */
  } B;
} GMAC_DMA_CH0_CURRENT_APP_RXBUFFER_tag;

typedef union GMAC_DMA_CH0_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TI:1;                    /* Transmit Interrupt This bit indicates that the packet transmission is complete. When transmission is complete, Bit 31 of TDES3 is reset in the last descriptor, and the specific packet status information is updated in the descriptor. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t TPS:1;                   /* Transmit Process Stopped This bit is set when the transmission is stopped. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t TBU:1;                   /* Transmit Buffer Unavailable This bit indicates that the application owns the next descriptor in the Transmit list, and the DMA cannot acquire it. Transmission is suspended. The TPS0 field of the DMA_Debug_Status0 register explains the Transmit Process state transitions. To resume processing the Transmit descriptors, the application should do the following: 1. Change the ownership of the descriptor by setting Bit 31 of TDES3. 2. Issue a Transmit Poll Demand command. For ring mode, the application should advance the Transmit Descriptor Tail Pointer register of a channel. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t _unused_3:3;             /* Reserved. */
    vuint32_t RI:1;                    /* Receive Interrupt This bit indicates that the packet reception is complete. When packet reception is complete, Bit 31 of RDES3 is reset in the last descriptor, and the specific packet status information is updated in the descriptor. The reception remains in the Running state. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t RBU:1;                   /* Receive Buffer Unavailable This bit indicates that the application owns the next descriptor in the Receive list, and the DMA cannot acquire it. The Rx process is suspended. To resume processing Rx descriptors, the application should change the ownership of the descriptor and issue a Receive Poll Demand command. If this command is not issued, the Rx process resumes when the next recognized incoming packet is received. In ring mode, the application should advance the Receive Descriptor Tail Pointer register of a channel. This bit is set only when the DMA owns the previous Rx descriptor. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t RPS:1;                   /* Receive Process Stopped This bit is asserted when the Rx process enters the Stopped state. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t RWT:1;                   /* Receive Watchdog Timeout This bit is asserted when a packet with length greater than 2,048 bytes is received. */
    vuint32_t ETI:1;                   /* Early Transmit Interrupt This bit when set indicates that the TxDMA has completed the transfer of packet data to the MTL TXFIFO memory. In configs supporting ERIC: When ETIC=0, this bit is set only after the Tx DMA has transferred a complete packet to MTL. When ETIC=1, this bit is set after completion of (partial) packet data transfer from buffers in the Transmit descriptor in which IOC=1. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t ERI:1;                   /* Early Receive Interrupt This bit when set indicates that the RxDMA has completed the transfer of packet data to the memory. In configs supporting ERIC, When ERIC=0, this bit is set only after the Rx DMA has filled up a complete receive buffer with packet data. When ERIC=1, this bit is set after every burst transfer of data from the Rx DMA to the buffer. The setting of RI bit automatically clears this bit. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t FBE:1;                   /* Fatal Bus Error This bit indicates that a bus error occurred (as described in the EB field). When this bit is set, the corresponding DMA channel engine disables all bus accesses. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t CDE:1;                   /* Context Descriptor Error This bit indicates that the DMA Tx/Rx engine received a descriptor error, which indicates invalid context in the middle of packet flow ( intermediate descriptor) or all one's descriptor in Tx case and on Rx side it indicates DMA has read a descriptor with either of the buffer address as ones which is considered to be invalid. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t AIS:1;                   /* Abnormal Interrupt Summary Abnormal Interrupt Summary bit value is the logical OR of the following when the corresponding interrupt bits are enabled in the DMA_CH0_Interrupt_Enable register: - Bit 1: Transmit Process Stopped - Bit 7: Receive Buffer Unavailable - Bit 8: Receive Process Stopped - Bit 10: Early Transmit Interrupt - Bit 12: Fatal Bus Error - Bit 13: Context Descriptor Error Only unmasked bits affect the Abnormal Interrupt Summary bit. This is a sticky bit. You must clear this bit (by writing 1 to this bit) each time a corresponding bit, which causes AIS to be set, is cleared. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t NIS:1;                   /* Normal Interrupt Summary Normal Interrupt Summary bit value is the logical OR of the following bits when the corresponding interrupt bits are enabled in the DMA_CH0_Interrupt_Enable register: - Bit 0: Transmit Interrupt - Bit 2: Transmit Buffer Unavailable - Bit 6: Receive Interrupt - Bit 11: Early Receive Interrupt Only unmasked bits (interrupts for which interrupt enable is set in DMA_CH0_Interrupt_Enable register) affect the Normal Interrupt Summary bit. This is a sticky bit. You must clear this bit (by writing 1 to this bit) each time a corresponding bit which causes NIS to be set is cleared. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t TEB:3;                   /* Tx DMA Error Bits This field indicates the type of error that caused a Bus Error. For example, error response on the AHB or AXI interface. - Bit 18 -- 1'b1: Error during data transfer by Tx DMA -- 1'b0: No Error during data transfer by Tx DMA - Bit 17 -- 1'b1: Error during descriptor access -- 1'b0: Error during data buffer access - Bit 16 -- 1'b1: Error during read transfer -- 1'b0: Error during write transfer This field is valid only when the FBE bit is set. This field does not generate an interrupt. */
    vuint32_t REB:3;                   /* Rx DMA Error Bits This field indicates the type of error that caused a Bus Error. For example, error response on the AHB or AXI interface. - Bit 21 -- 1'b1: Error during data transfer by Rx DMA -- 1'b0: No Error during data transfer by Rx DMA - Bit 20 -- 1'b1: Error during descriptor access -- 1'b0: Error during data buffer access - Bit 19 -- 1'b1: Error during read transfer -- 1'b0: Error during write transfer This field is valid only when the FBE bit is set. This field does not generate an interrupt. */
    vuint32_t _unused_22:10;           /* Reserved. */
  } B;
} GMAC_DMA_CH0_STATUS_tag;

typedef union GMAC_DMA_CH0_MISS_FRAME_CNT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t MFC:11;                  /* Dropped Packet Counters This counter indicates the number of packet counters that are dropped by the DMA either because of bus error or because of programing RPF field in DMA_CH${i}_Rx_Control register. The counter gets cleared when this register is read. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t _unused_11:4;            /* Reserved. */
    vuint32_t MFCO:1;                  /* Overflow status of the MFC Counter When this bit is set then the MFC counter does not get incremented further. The bit gets cleared when this register is read. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t _unused_16:16;           /* Reserved. */
  } B;
} GMAC_DMA_CH0_MISS_FRAME_CNT_tag;

typedef union GMAC_DMA_CH0_RXP_ACCEPT_CNT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXPAC:31;                /* Rx Parser Accept Counter This 31-bit counter is implemented whenever a Rx Parser Accept a packet due to AF =1. The counter is cleared when the register is read. */
    vuint32_t RXPACOF:1;               /* Rx Parser Accept Counter Overflow Bit When set, this bit indicates that the RXPAC Counter field crossed the maximum limit. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
  } B;
} GMAC_DMA_CH0_RXP_ACCEPT_CNT_tag;

typedef union GMAC_DMA_CH0_RX_ERI_CNT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ECNT:12;                 /* ERI Counter When ERIC bit of DMA_CH(#i)_RX_Control register is set, this counter increments for burst transfer completed by the Rx DMA from the start of packet transfer. This counter will get reset at the start of new packet. */
    vuint32_t _unused_12:20;
  } B;
} GMAC_DMA_CH0_RX_ERI_CNT_tag;

typedef union GMAC_DMA_CH1_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:14;            /* Reserved. */
    vuint32_t _unused_14:2;            /* Reserved. */
    vuint32_t PBLX8:1;                 /* 8xPBL mode When this bit is set, the PBL value programmed in Bits[21:16] in DMA_CH0_Tx_Control and Bits[21:16] in DMA_CH0_Rx_Control is multiplied by eight times. Therefore, the DMA transfers the data in 8, 16, 32, 64, 128, and 256 beats depending on the PBL value. */
    vuint32_t _unused_17:1;            /* Reserved. */
    vuint32_t DSL:3;                   /* Descriptor Skip Length This bit specifies the Word, Dword, or Lword number (depending on the 32-bit, 64-bit, or 128-bit bus) to skip between two unchained descriptors. The address skipping starts from the end of the current descriptor to the start of the next descriptor. When the DSL value is equal to zero, the DMA takes the descriptor table as contiguous. */
    vuint32_t _unused_21:3;            /* Reserved. */
    vuint32_t SPH:1;                   /* Split Headers When this bit is set, the DMA splits the header and payload in the Receive path. The DMA writes the header to the Buffer Address1 of RDES0. The DMA writes the payload to the buffer to which the Buffer Address2 is pointing. The software must ensure that the header fits into the Receive buffers. If the header length exceeds the receive buffer size, the DMA does not split the header and payload. This bit is available only if Enable Split Header Structure option is selected. */
    vuint32_t _unused_25:7;            /* Reserved. */
  } B;
} GMAC_DMA_CH1_CONTROL_tag;

typedef union GMAC_DMA_CH1_TX_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ST:1;                    /* Start or Stop Transmission Command When this bit is set, transmission is placed in the Running state. The DMA checks the Transmit list at the current position for a packet to be transmitted. The DMA tries to acquire descriptor from either of the following positions: - The current position in the list This is the base address of the Transmit list set by the DMA_CH0_TxDesc_List_Address register. - The position at which the transmission was previously stopped If the DMA does not own the current descriptor, the transmission enters the Suspended state and the TBU bit of the DMA_CH0_Status register is set. The Start Transmission command is effective only when the transmission is stopped. If the command is issued before setting the DMA_CH0_TxDesc_List_Address register, the DMA behavior is unpredictable. When this bit is reset, the transmission process is placed in the Stopped state after completing the transmission of the current packet. The Next Descriptor position in the Transmit list is saved, and it becomes the current position when the transmission is restarted. To change the list address, you need to program DMA_CH0_TxDesc_List_Address register with a new value when this bit is reset. The new value is considered when this bit is set again. The stop transmission command is effective only when the transmission of the current packet is complete or the transmission is in the Suspended state. */
    vuint32_t _unused_1:3;             /* Reserved. */
    vuint32_t OSF:1;                   /* Operate on Second Packet When this bit is set, it instructs the DMA to process the second packet of the Transmit data even before the status for the first packet is obtained. */
    vuint32_t _unused_5:7;             /* Reserved. */
    vuint32_t _unused_12:1;            /* Reserved. */
    vuint32_t _unused_13:2;            /* Reserved. */
    vuint32_t IPBL:1;                  /* Ignore PBL Requirement When this bit is set, the DMA does not check for PBL number of locations in the MTL before initiating a transfer. If space is not available, the MTL may use handshaking to slow the DMA. Note: This bit/mode must not be used when multiple Transmit DMA Channels are enabled as it may block other Transmit and Receive DMA Channels from accessing the Read Data Channel of AXI bus until space is available in Transmit Queue for current transfer. */
    vuint32_t TXPBL:6;                 /* Transmit Programmable Burst Length These bits indicate the maximum number of beats to be transferred in one DMA block data transfer. The DMA always attempts max burst as specified in PBL each time it starts a burst transfer on the application bus. You can program PBL with any of the following values: 1, 2, 4, 8, 16, or 32. Any other value results in undefined behavior. To transfer more than 32 beats, perform the following steps: 1. Set the 8xPBL mode in DMA_CH0_Control register. 2. Set the TxPBL. Note: The maximum value of TxPBL must be less than or equal to half the Tx Queue size (TQS field of MTL_TxQ[n]_Operation_Mode register) in terms of beats. This is required so that the Tx Queue has space to store at least another Tx PBL worth of data while the MTL Tx Queue Controller is transferring data to MAC. For example, in 64-bit data width configurations the total locations in Tx Queue of size 512 bytes is 64, TxPBL and 8xPBL needs to be programmed to less than or equal to 32. */
    vuint32_t _unused_22:1;            /* Reserved. */
    vuint32_t _unused_23:1;            /* Reserved. */
    vuint32_t TQOS:4;                  /* Transmit QOS. This field is used to drive arqos_m_o[3:0] or awqos_m_o[3:0] output signals for all transactions of DMA Tx Channel0. */
    vuint32_t EDSE:1;                  /* Enhanced Descriptor Enable When this bit is set, the corresponding channel uses Enhanced Descriptors that are 32 Bytes for both Normal and Context Descriptors. When reset, the corresponding channel uses the descriptors that are 16 Bytes. */
    vuint32_t _unused_29:3;            /* Reserved. */
  } B;
} GMAC_DMA_CH1_TX_CONTROL_tag;

typedef union GMAC_DMA_CH1_RX_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t SR:1;                    /* Start or Stop Receive When this bit is set, the DMA tries to acquire the descriptor from the Receive list and processes the incoming packets. The DMA tries to acquire descriptor from either of the following positions: - The current position in the list This is the address set by the DMA_CH0_RxDesc_List_Address register. - The position at which the Rx process was previously stopped If the DMA does not own the current descriptor, the reception is suspended and the RBU bit of the DMA_CH0_Status register is set. The Start Receive command is effective only when the reception is stopped. If the command is issued before setting the DMA_CH0_RxDesc_List_Address register, the DMA behavior is unpredictable. When this bit is reset, the Rx DMA operation is stopped after the transfer of the current packet. The next descriptor position in the Receive list is saved, and it becomes the current position after the Rx process is restarted. The Stop Receive command is effective only when the Rx process is in the Running (waiting for Rx packet) or Suspended state. */
    vuint32_t RBSZ_X_0:3;              /* Receive Buffer size Low RBSZ[13:0] is split into two fields RBSZ_13_y and RBSZ_x_0. The RBSZ_x_0 is the lower field whose width is based on data bus width of the configuration. This field is of width 2, 3, or 4 bits for 32-bit, 64-bit, or 128-bit data bus width respectively. This field is read-only (RO). */
    vuint32_t RBSZ_13_Y:11;            /* Receive Buffer size High RBSZ[13:0] is split into two fields higher RBSZ_13_y and lower RBSZ_x_0. The RBSZ[13:0] field indicates the size of the Rx buffers specified in bytes. The maximum buffer size is limited to 16K bytes. The buffer size is applicable to payload buffers when split headers are enabled. Note: The buffer size must be a multiple of 4, 8, or 16 depending on the data bus widths (32-bit, 64-bit, or 128-bit respectively). This is required even if the value of buffer address pointer is not aligned to data bus width. Hence the lower RBSZ_x_0 bits are read-only and the value is considered as all-zero. Thus the RBSZ_13_y indicates the buffer size in terms of locations (with the width same as bus-width). */
    vuint32_t _unused_15:1;            /* Reserved. */
    vuint32_t RXPBL:6;                 /* Receive Programmable Burst Length These bits indicate the maximum number of beats to be transferred in one DMA block data transfer. The DMA always attempts max burst as specified in PBL each time it starts a burst transfer on the application bus. You can program PBL with any of the following values: 1, 2, 4, 8, 16, or 32. Any other value results in undefined behavior. To transfer more than 32 beats, perform the following steps: 1. Set the 8xPBL mode in the DMA_CH0_Control register. 2. Set the RxPBL. Note: The maximum value of RxPBL must be less than or equal to half the Rx Queue size (RQS field of MTL_RxQ[n]_Operation_Mode register) in terms of beats. This is required so that the Rx Queue has space to store at least another Rx PBL worth of data while the Rx DMA is transferring a block of data. For example, in 64-bit data width configurations the total locations in Rx Queue of size 512 bytes is 64, so RxPBL and 8xPBL needs to be programmed to less than or equal to 32. */
    vuint32_t _unused_22:1;            /* Reserved. */
    vuint32_t _unused_23:1;            /* Reserved. */
    vuint32_t RQOS:4;                  /* Rx AXI4 QOS. This field is used to drive arqos_m_o[3:0] or awqos_m_o[3:0] output signals for all transactions of DMA Rx Channel0. */
    vuint32_t _unused_28:3;            /* Reserved. */
    vuint32_t RPF:1;                   /* Rx Packet Flush. When this bit is set to 1, then DWC_ether_qos automatically flushes the packet from the Rx Queues destined to this DMA Rx Channel, when it is stopped. When this bit remains set and the DMA is re-started by the software driver, the packets residing in the Rx Queues that were received when this RxDMA was stopped, get flushed out. The packets that are received by the MAC after the RxDMA is re-started are routed to the RxDMA. The flushing happens on the Read side of the Rx Queue. When this bit is set to 0, the DWC_ether_qos not flush the packet in the Rx Queue destined to this RxDMA Channel when it is STOP state. This may in turn cause head-of-line blocking in the corresponding RxQueue. */
  } B;
} GMAC_DMA_CH1_RX_CONTROL_tag;

typedef union GMAC_DMA_CH1_TXDESC_LIST_ADDRESS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;
    vuint32_t TDESLA:29;               /* Start of Transmit List This field contains the base address of the first descriptor in the Transmit descriptor list. The DMA ignores the LSB bits (1:0, 2:0, or 3:0) for 32-bit, 64-bit, or 128-bit bus width and internally takes these bits as all-zero. Therefore, these LSB bits are read-only (RO). The width of this field depends on the configuration: - 31:2 for 32-bit configuration - 31:3 for 64-bit configuration - 31:4 for 128-bit configuration */
  } B;
} GMAC_DMA_CH1_TXDESC_LIST_ADDRESS_tag;

typedef union GMAC_DMA_CH1_RXDESC_LIST_ADDRESS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;
    vuint32_t RDESLA:29;               /* Start of Receive List This field contains the base address of the first descriptor in the Rx Descriptor list. The DMA ignores the LSB bits (1:0, 2:0, or 3:0) for 32-bit, 64-bit, or 128-bit bus width and internally takes these bits as all-zero. Therefore, these LSB bits are read-only (RO). The width of this field depends on the configuration: - 31:2 for 32-bit configuration - 31:3 for 64-bit configuration - 31:4 for 128-bit configuration */
  } B;
} GMAC_DMA_CH1_RXDESC_LIST_ADDRESS_tag;

typedef union GMAC_DMA_CH1_TXDESC_TAIL_POINTER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;
    vuint32_t TDTP:29;                 /* Transmit Descriptor Tail Pointer This field contains the tail pointer for the Tx descriptor ring. The software writes the tail pointer to add more descriptors to the Tx channel. The hardware tries to transmit all packets referenced by the descriptors between the head and the tail pointer registers. The width of this field depends on the configuration: - 31:2 for 32-bit configuration - 31:3 for 64-bit configuration - 31:4 for 128-bit configuration */
  } B;
} GMAC_DMA_CH1_TXDESC_TAIL_POINTER_tag;

typedef union GMAC_DMA_CH1_RXDESC_TAIL_POINTER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;
    vuint32_t RDTP:29;                 /* Receive Descriptor Tail Pointer This field contains the tail pointer for the Rx descriptor ring. The software writes the tail pointer to add more descriptors to the Rx channel. The hardware tries to write all received packets to the descriptors referenced between the head and the tail pointer registers. The width of this field depends on the configuration: - 31:2 for 32-bit configuration - 31:3 for 64-bit configuration - 31:4 for 128-bit configuration */
  } B;
} GMAC_DMA_CH1_RXDESC_TAIL_POINTER_tag;

typedef union GMAC_DMA_CH1_TXDESC_RING_LENGTH_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TDRL:10;                 /* Transmit Descriptor Ring Length This field sets the maximum number of Tx descriptors in the circular descriptor ring. The maximum number of descriptors is limited to 1K descriptors. NXP recommends a minimum ring descriptor length of 4. For example, You can program any value up to 0x3FF in this field. This field is 10 bits wide, if you program 0x3FF, you can have 1024 descriptors. If you want to have 10 descriptors, program it to a value of 0x9. */
    vuint32_t _unused_10:22;           /* Reserved. */
  } B;
} GMAC_DMA_CH1_TXDESC_RING_LENGTH_tag;

typedef union GMAC_DMA_CH1_RXDESC_RING_LENGTH_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RDRL:10;                 /* Receive Descriptor Ring Length This register sets the maximum number of Rx descriptors in the circular descriptor ring. The maximum number of descriptors is limited to 1K descriptors. For example, You can program any value up to 0x3FF in this field. This field is 10 bits wide, if you program 0x3FF, you can have 1024 descriptors. If you want to have 10 descriptors, program it to a value of 0x9. */
    vuint32_t _unused_10:22;           /* Reserved. */
  } B;
} GMAC_DMA_CH1_RXDESC_RING_LENGTH_tag;

typedef union GMAC_DMA_CH1_INTERRUPT_ENABLE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TIE:1;                   /* Transmit Interrupt Enable When this bit is set along with the NIE bit, the Transmit Interrupt is enabled. When this bit is reset, the Transmit Interrupt is disabled. */
    vuint32_t TXSE:1;                  /* Transmit Stopped Enable When this bit is set along with the AIE bit, the Transmission Stopped interrupt is enabled. When this bit is reset, the Transmission Stopped interrupt is disabled. */
    vuint32_t TBUE:1;                  /* Transmit Buffer Unavailable Enable When this bit is set along with the NIE bit, the Transmit Buffer Unavailable interrupt is enabled. When this bit is reset, the Transmit Buffer Unavailable interrupt is disabled. */
    vuint32_t _unused_3:3;             /* Reserved. */
    vuint32_t RIE:1;                   /* Receive Interrupt Enable When this bit is set along with the NIE bit, the Receive Interrupt is enabled. When this bit is reset, the Receive Interrupt is disabled. */
    vuint32_t RBUE:1;                  /* Receive Buffer Unavailable Enable When this bit is set along with the AIE bit, the Receive Buffer Unavailable interrupt is enabled. When this bit is reset, the Receive Buffer Unavailable interrupt is disabled. */
    vuint32_t RSE:1;                   /* Receive Stopped Enable When this bit is set along with the AIE bit, the Receive Stopped Interrupt is enabled. When this bit is reset, the Receive Stopped interrupt is disabled. */
    vuint32_t RWTE:1;                  /* Receive Watchdog Timeout Enable When this bit is set along with the AIE bit, the Receive Watchdog Timeout interrupt is enabled. When this bit is reset, the Receive Watchdog Timeout interrupt is disabled. */
    vuint32_t ETIE:1;                  /* Early Transmit Interrupt Enable When this bit is set along with the AIE bit, the Early Transmit interrupt is enabled. When this bit is reset, the Early Transmit interrupt is disabled. */
    vuint32_t ERIE:1;                  /* Early Receive Interrupt Enable When this bit is set along with the NIE bit, the Early Receive interrupt is enabled. When this bit is reset, the Early Receive interrupt is disabled. */
    vuint32_t FBEE:1;                  /* Fatal Bus Error Enable When this bit is set along with the AIE bit, the Fatal Bus error interrupt is enabled. When this bit is reset, the Fatal Bus Error error interrupt is disabled. */
    vuint32_t CDEE:1;                  /* Context Descriptor Error Enable When this bit is set along with the AIE bit, the Descriptor error interrupt is enabled. When this bit is reset, the Descriptor error interrupt is disabled. */
    vuint32_t AIE:1;                   /* Abnormal Interrupt Summary Enable When this bit is set, the abnormal interrupt summary is enabled. This bit enables the following interrupts in the DMA_CH0_Status register: - Bit 1: Transmit Process Stopped - Bit 7: Rx Buffer Unavailable - Bit 8: Receive Process Stopped - Bit 9: Receive Watchdog Timeout - Bit 10: Early Transmit Interrupt - Bit 12: Fatal Bus Error - Bit 13: Context Descriptor Error When this bit is reset, the abnormal interrupt summary is disabled. */
    vuint32_t NIE:1;                   /* Normal Interrupt Summary Enable When this bit is set, the normal interrupt summary is enabled. This bit enables the following interrupts in the DMA_CH0_Status register: - Bit 0: Transmit Interrupt - Bit 2: Transmit Buffer Unavailable - Bit 6: Receive Interrupt - Bit 11: Early Receive Interrupt When this bit is reset, the normal interrupt summary is disabled. */
    vuint32_t _unused_16:16;           /* Reserved. */
  } B;
} GMAC_DMA_CH1_INTERRUPT_ENABLE_tag;

typedef union GMAC_DMA_CH1_RX_INTERRUPT_WATCHDOG_TIMER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RWT:8;                   /* Receive Interrupt Watchdog Timer Count This field indicates the number of system clock cycles, multiplied by factor indicated in RWTU field, for which the watchdog timer is set. The watchdog timer is triggered with the programmed value after the Rx DMA completes the transfer of a packet for which the RI bit is not set in the DMA_CH(#i)_Status register, because of the setting of Interrupt Enable bit in the corresponding descriptor RDES3[30]. When the watchdog timer runs out, the RI bit is set and the timer is stopped. The watchdog timer is reset when the RI bit is set high because of automatic setting of RI as per the Interrupt Enable bit RDES3[30] of any received packet. */
    vuint32_t _unused_8:8;             /* Reserved. */
    vuint32_t RWTU:2;                  /* Receive Interrupt Watchdog Timer Count Units This fields indicates the number of system clock cycles corresponding to one unit in RWT field. - 2'b00: 256 - 2'b01: 512 - 2'b10: 1024 - 2'b11: 2048 For example, when RWT=2 and RWTU=1, the watchdog timer is set for 2*512=1024 system clock cycles. */
    vuint32_t _unused_18:14;           /* Reserved. */
  } B;
} GMAC_DMA_CH1_RX_INTERRUPT_WATCHDOG_TIMER_tag;

typedef union GMAC_DMA_CH1_SLOT_FUNCTION_CONTROL_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ESC:1;                   /* Enable Slot Comparison When set, this bit enables the checking of the slot numbers programmed in the Tx descriptor with the current reference given in the RSN field. The DMA fetches the data from the corresponding buffer only when the slot number is - equal to the reference slot number or - ahead of the reference slot number by one slot When reset, this bit disables the checking of the slot numbers. The DMA fetches the data immediately after the descriptor is processed. Note: The UFO (UDP Fragmentation over IPv4)/TSO/USO should not be enabled along with TBS/AVB Slot number check. The UFO/TSO/USO involves multiple packets/segments/fragments transmission for single packet received from application and the slot number check are applicable for fetching of only first segment/fragment. As a result it might be difficult for software to specify slot number for subsequent packets. */
    vuint32_t ASC:1;                   /* Advance Slot Check When set, this bit enables the DMA to fetch the data from the buffer when the slot number (SLOTNUM) programmed in the Tx descriptor is - equal to the reference slot number given in the RSN field or - ahead of the reference slot number by up to two slots This bit is applicable only when the ESC bit is set. */
    vuint32_t _unused_2:2;             /* Reserved. */
    vuint32_t SIV:12;                  /* Slot Interval Value This field controls the period of the slot interval in which the TxDMA fetches the scheduled packets. A value of 0 specifies the slot interval of 1 us while the maximum value 4095 specifies the slot interval of 4096us. The default/reset value is 0x07C which corresponds to slot interval of 125us */
    vuint32_t RSN:4;                   /* Reference Slot Number This field gives the current value of the reference slot number in the DMA. It is used for slot comparison. */
    vuint32_t _unused_20:12;           /* Reserved. */
  } B;
} GMAC_DMA_CH1_SLOT_FUNCTION_CONTROL_STATUS_tag;

typedef union GMAC_DMA_CH1_CURRENT_APP_TXDESC_union_tag {
  vuint32_t R;
  struct {
    vuint32_t CURTDESAPTR:32;          /* Application Transmit Descriptor Address Pointer The DMA updates this pointer during Tx operation. This pointer is cleared on reset. */
  } B;
} GMAC_DMA_CH1_CURRENT_APP_TXDESC_tag;

typedef union GMAC_DMA_CH1_CURRENT_APP_RXDESC_union_tag {
  vuint32_t R;
  struct {
    vuint32_t CURRDESAPTR:32;          /* Application Receive Descriptor Address Pointer The DMA updates this pointer during Rx operation. This pointer is cleared on reset. */
  } B;
} GMAC_DMA_CH1_CURRENT_APP_RXDESC_tag;

typedef union GMAC_DMA_CH1_CURRENT_APP_TXBUFFER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t CURTBUFAPTR:32;          /* Application Transmit Buffer Address Pointer The DMA updates this pointer during Tx operation. This pointer is cleared on reset. */
  } B;
} GMAC_DMA_CH1_CURRENT_APP_TXBUFFER_tag;

typedef union GMAC_DMA_CH1_CURRENT_APP_RXBUFFER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t CURRBUFAPTR:32;          /* Application Receive Buffer Address Pointer The DMA updates this pointer during Rx operation. This pointer is cleared on reset. */
  } B;
} GMAC_DMA_CH1_CURRENT_APP_RXBUFFER_tag;

typedef union GMAC_DMA_CH1_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TI:1;                    /* Transmit Interrupt This bit indicates that the packet transmission is complete. When transmission is complete, Bit 31 of TDES3 is reset in the last descriptor, and the specific packet status information is updated in the descriptor. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t TPS:1;                   /* Transmit Process Stopped This bit is set when the transmission is stopped. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t TBU:1;                   /* Transmit Buffer Unavailable This bit indicates that the application owns the next descriptor in the Transmit list, and the DMA cannot acquire it. Transmission is suspended. The TPS0 field of the DMA_Debug_Status0 register explains the Transmit Process state transitions. To resume processing the Transmit descriptors, the application should do the following: 1. Change the ownership of the descriptor by setting Bit 31 of TDES3. 2. Issue a Transmit Poll Demand command. For ring mode, the application should advance the Transmit Descriptor Tail Pointer register of a channel. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t _unused_3:3;             /* Reserved. */
    vuint32_t RI:1;                    /* Receive Interrupt This bit indicates that the packet reception is complete. When packet reception is complete, Bit 31 of RDES3 is reset in the last descriptor, and the specific packet status information is updated in the descriptor. The reception remains in the Running state. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t RBU:1;                   /* Receive Buffer Unavailable This bit indicates that the application owns the next descriptor in the Receive list, and the DMA cannot acquire it. The Rx process is suspended. To resume processing Rx descriptors, the application should change the ownership of the descriptor and issue a Receive Poll Demand command. If this command is not issued, the Rx process resumes when the next recognized incoming packet is received. In ring mode, the application should advance the Receive Descriptor Tail Pointer register of a channel. This bit is set only when the DMA owns the previous Rx descriptor. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t RPS:1;                   /* Receive Process Stopped This bit is asserted when the Rx process enters the Stopped state. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t RWT:1;                   /* Receive Watchdog Timeout This bit is asserted when a packet with length greater than 2,048 bytes is received. */
    vuint32_t ETI:1;                   /* Early Transmit Interrupt This bit when set indicates that the TxDMA has completed the transfer of packet data to the MTL TXFIFO memory. In configs supporting ERIC: When ETIC=0, this bit is set only after the Tx DMA has transferred a complete packet to MTL. When ETIC=1, this bit is set after completion of (partial) packet data transfer from buffers in the Transmit descriptor in which IOC=1. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t ERI:1;                   /* Early Receive Interrupt This bit when set indicates that the RxDMA has completed the transfer of packet data to the memory. In configs supporting ERIC, When ERIC=0, this bit is set only after the Rx DMA has filled up a complete receive buffer with packet data. When ERIC=1, this bit is set after every burst transfer of data from the Rx DMA to the buffer. The setting of RI bit automatically clears this bit. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t FBE:1;                   /* Fatal Bus Error This bit indicates that a bus error occurred (as described in the EB field). When this bit is set, the corresponding DMA channel engine disables all bus accesses. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t CDE:1;                   /* Context Descriptor Error This bit indicates that the DMA Tx/Rx engine received a descriptor error, which indicates invalid context in the middle of packet flow ( intermediate descriptor) or all one's descriptor in Tx case and on Rx side it indicates DMA has read a descriptor with either of the buffer address as ones which is considered to be invalid. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t AIS:1;                   /* Abnormal Interrupt Summary Abnormal Interrupt Summary bit value is the logical OR of the following when the corresponding interrupt bits are enabled in the DMA_CH0_Interrupt_Enable register: - Bit 1: Transmit Process Stopped - Bit 7: Receive Buffer Unavailable - Bit 8: Receive Process Stopped - Bit 10: Early Transmit Interrupt - Bit 12: Fatal Bus Error - Bit 13: Context Descriptor Error Only unmasked bits affect the Abnormal Interrupt Summary bit. This is a sticky bit. You must clear this bit (by writing 1 to this bit) each time a corresponding bit, which causes AIS to be set, is cleared. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t NIS:1;                   /* Normal Interrupt Summary Normal Interrupt Summary bit value is the logical OR of the following bits when the corresponding interrupt bits are enabled in the DMA_CH0_Interrupt_Enable register: - Bit 0: Transmit Interrupt - Bit 2: Transmit Buffer Unavailable - Bit 6: Receive Interrupt - Bit 11: Early Receive Interrupt Only unmasked bits (interrupts for which interrupt enable is set in DMA_CH0_Interrupt_Enable register) affect the Normal Interrupt Summary bit. This is a sticky bit. You must clear this bit (by writing 1 to this bit) each time a corresponding bit which causes NIS to be set is cleared. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t TEB:3;                   /* Tx DMA Error Bits This field indicates the type of error that caused a Bus Error. For example, error response on the AHB or AXI interface. - Bit 18 -- 1'b1: Error during data transfer by Tx DMA -- 1'b0: No Error during data transfer by Tx DMA - Bit 17 -- 1'b1: Error during descriptor access -- 1'b0: Error during data buffer access - Bit 16 -- 1'b1: Error during read transfer -- 1'b0: Error during write transfer This field is valid only when the FBE bit is set. This field does not generate an interrupt. */
    vuint32_t REB:3;                   /* Rx DMA Error Bits This field indicates the type of error that caused a Bus Error. For example, error response on the AHB or AXI interface. - Bit 21 -- 1'b1: Error during data transfer by Rx DMA -- 1'b0: No Error during data transfer by Rx DMA - Bit 20 -- 1'b1: Error during descriptor access -- 1'b0: Error during data buffer access - Bit 19 -- 1'b1: Error during read transfer -- 1'b0: Error during write transfer This field is valid only when the FBE bit is set. This field does not generate an interrupt. */
    vuint32_t _unused_22:10;           /* Reserved. */
  } B;
} GMAC_DMA_CH1_STATUS_tag;

typedef union GMAC_DMA_CH1_MISS_FRAME_CNT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t MFC:11;                  /* Dropped Packet Counters This counter indicates the number of packet counters that are dropped by the DMA either because of bus error or because of programing RPF field in DMA_CH${i}_Rx_Control register. The counter gets cleared when this register is read. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t _unused_11:4;            /* Reserved. */
    vuint32_t MFCO:1;                  /* Overflow status of the MFC Counter When this bit is set then the MFC counter does not get incremented further. The bit gets cleared when this register is read. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t _unused_16:16;           /* Reserved. */
  } B;
} GMAC_DMA_CH1_MISS_FRAME_CNT_tag;

typedef union GMAC_DMA_CH1_RXP_ACCEPT_CNT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXPAC:31;                /* Rx Parser Accept Counter This 31-bit counter is implemented whenever a Rx Parser Accept a packet due to AF =1. The counter is cleared when the register is read. */
    vuint32_t RXPACOF:1;               /* Rx Parser Accept Counter Overflow Bit When set, this bit indicates that the RXPAC Counter field crossed the maximum limit. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
  } B;
} GMAC_DMA_CH1_RXP_ACCEPT_CNT_tag;

typedef union GMAC_DMA_CH1_RX_ERI_CNT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ECNT:12;                 /* ERI Counter When ERIC bit of DMA_CH(#i)_RX_Control register is set, this counter increments for burst transfer completed by the Rx DMA from the start of packet transfer. This counter will get reset at the start of new packet. */
    vuint32_t _unused_12:20;
  } B;
} GMAC_DMA_CH1_RX_ERI_CNT_tag;

typedef union GMAC_DMA_CH2_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:14;            /* Reserved. */
    vuint32_t _unused_14:2;            /* Reserved. */
    vuint32_t PBLX8:1;                 /* 8xPBL mode When this bit is set, the PBL value programmed in Bits[21:16] in DMA_CH0_Tx_Control and Bits[21:16] in DMA_CH0_Rx_Control is multiplied by eight times. Therefore, the DMA transfers the data in 8, 16, 32, 64, 128, and 256 beats depending on the PBL value. */
    vuint32_t _unused_17:1;            /* Reserved. */
    vuint32_t DSL:3;                   /* Descriptor Skip Length This bit specifies the Word, Dword, or Lword number (depending on the 32-bit, 64-bit, or 128-bit bus) to skip between two unchained descriptors. The address skipping starts from the end of the current descriptor to the start of the next descriptor. When the DSL value is equal to zero, the DMA takes the descriptor table as contiguous. */
    vuint32_t _unused_21:3;            /* Reserved. */
    vuint32_t SPH:1;                   /* Split Headers When this bit is set, the DMA splits the header and payload in the Receive path. The DMA writes the header to the Buffer Address1 of RDES0. The DMA writes the payload to the buffer to which the Buffer Address2 is pointing. The software must ensure that the header fits into the Receive buffers. If the header length exceeds the receive buffer size, the DMA does not split the header and payload. This bit is available only if Enable Split Header Structure option is selected. */
    vuint32_t _unused_25:7;            /* Reserved. */
  } B;
} GMAC_DMA_CH2_CONTROL_tag;

typedef union GMAC_DMA_CH2_TX_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ST:1;                    /* Start or Stop Transmission Command When this bit is set, transmission is placed in the Running state. The DMA checks the Transmit list at the current position for a packet to be transmitted. The DMA tries to acquire descriptor from either of the following positions: - The current position in the list This is the base address of the Transmit list set by the DMA_CH0_TxDesc_List_Address register. - The position at which the transmission was previously stopped If the DMA does not own the current descriptor, the transmission enters the Suspended state and the TBU bit of the DMA_CH0_Status register is set. The Start Transmission command is effective only when the transmission is stopped. If the command is issued before setting the DMA_CH0_TxDesc_List_Address register, the DMA behavior is unpredictable. When this bit is reset, the transmission process is placed in the Stopped state after completing the transmission of the current packet. The Next Descriptor position in the Transmit list is saved, and it becomes the current position when the transmission is restarted. To change the list address, you need to program DMA_CH0_TxDesc_List_Address register with a new value when this bit is reset. The new value is considered when this bit is set again. The stop transmission command is effective only when the transmission of the current packet is complete or the transmission is in the Suspended state. */
    vuint32_t _unused_1:3;             /* Reserved. */
    vuint32_t OSF:1;                   /* Operate on Second Packet When this bit is set, it instructs the DMA to process the second packet of the Transmit data even before the status for the first packet is obtained. */
    vuint32_t _unused_5:7;             /* Reserved. */
    vuint32_t _unused_12:1;            /* Reserved. */
    vuint32_t _unused_13:2;            /* Reserved. */
    vuint32_t IPBL:1;                  /* Ignore PBL Requirement When this bit is set, the DMA does not check for PBL number of locations in the MTL before initiating a transfer. If space is not available, the MTL may use handshaking to slow the DMA. Note: This bit/mode must not be used when multiple Transmit DMA Channels are enabled as it may block other Transmit and Receive DMA Channels from accessing the Read Data Channel of AXI bus until space is available in Transmit Queue for current transfer. */
    vuint32_t TXPBL:6;                 /* Transmit Programmable Burst Length These bits indicate the maximum number of beats to be transferred in one DMA block data transfer. The DMA always attempts max burst as specified in PBL each time it starts a burst transfer on the application bus. You can program PBL with any of the following values: 1, 2, 4, 8, 16, or 32. Any other value results in undefined behavior. To transfer more than 32 beats, perform the following steps: 1. Set the 8xPBL mode in DMA_CH0_Control register. 2. Set the TxPBL. Note: The maximum value of TxPBL must be less than or equal to half the Tx Queue size (TQS field of MTL_TxQ[n]_Operation_Mode register) in terms of beats. This is required so that the Tx Queue has space to store at least another Tx PBL worth of data while the MTL Tx Queue Controller is transferring data to MAC. For example, in 64-bit data width configurations the total locations in Tx Queue of size 512 bytes is 64, TxPBL and 8xPBL needs to be programmed to less than or equal to 32. */
    vuint32_t _unused_22:1;            /* Reserved. */
    vuint32_t _unused_23:1;            /* Reserved. */
    vuint32_t TQOS:4;                  /* Transmit QOS. This field is used to drive arqos_m_o[3:0] or awqos_m_o[3:0] output signals for all transactions of DMA Tx Channel0. */
    vuint32_t EDSE:1;                  /* Enhanced Descriptor Enable When this bit is set, the corresponding channel uses Enhanced Descriptors that are 32 Bytes for both Normal and Context Descriptors. When reset, the corresponding channel uses the descriptors that are 16 Bytes. */
    vuint32_t _unused_29:3;            /* Reserved. */
  } B;
} GMAC_DMA_CH2_TX_CONTROL_tag;

typedef union GMAC_DMA_CH2_RX_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t SR:1;                    /* Start or Stop Receive When this bit is set, the DMA tries to acquire the descriptor from the Receive list and processes the incoming packets. The DMA tries to acquire descriptor from either of the following positions: - The current position in the list This is the address set by the DMA_CH0_RxDesc_List_Address register. - The position at which the Rx process was previously stopped If the DMA does not own the current descriptor, the reception is suspended and the RBU bit of the DMA_CH0_Status register is set. The Start Receive command is effective only when the reception is stopped. If the command is issued before setting the DMA_CH0_RxDesc_List_Address register, the DMA behavior is unpredictable. When this bit is reset, the Rx DMA operation is stopped after the transfer of the current packet. The next descriptor position in the Receive list is saved, and it becomes the current position after the Rx process is restarted. The Stop Receive command is effective only when the Rx process is in the Running (waiting for Rx packet) or Suspended state. */
    vuint32_t RBSZ_X_0:3;              /* Receive Buffer size Low RBSZ[13:0] is split into two fields RBSZ_13_y and RBSZ_x_0. The RBSZ_x_0 is the lower field whose width is based on data bus width of the configuration. This field is of width 2, 3, or 4 bits for 32-bit, 64-bit, or 128-bit data bus width respectively. This field is read-only (RO). */
    vuint32_t RBSZ_13_Y:11;            /* Receive Buffer size High RBSZ[13:0] is split into two fields higher RBSZ_13_y and lower RBSZ_x_0. The RBSZ[13:0] field indicates the size of the Rx buffers specified in bytes. The maximum buffer size is limited to 16K bytes. The buffer size is applicable to payload buffers when split headers are enabled. Note: The buffer size must be a multiple of 4, 8, or 16 depending on the data bus widths (32-bit, 64-bit, or 128-bit respectively). This is required even if the value of buffer address pointer is not aligned to data bus width. Hence the lower RBSZ_x_0 bits are read-only and the value is considered as all-zero. Thus the RBSZ_13_y indicates the buffer size in terms of locations (with the width same as bus-width). */
    vuint32_t _unused_15:1;            /* Reserved. */
    vuint32_t RXPBL:6;                 /* Receive Programmable Burst Length These bits indicate the maximum number of beats to be transferred in one DMA block data transfer. The DMA always attempts max burst as specified in PBL each time it starts a burst transfer on the application bus. You can program PBL with any of the following values: 1, 2, 4, 8, 16, or 32. Any other value results in undefined behavior. To transfer more than 32 beats, perform the following steps: 1. Set the 8xPBL mode in the DMA_CH0_Control register. 2. Set the RxPBL. Note: The maximum value of RxPBL must be less than or equal to half the Rx Queue size (RQS field of MTL_RxQ[n]_Operation_Mode register) in terms of beats. This is required so that the Rx Queue has space to store at least another Rx PBL worth of data while the Rx DMA is transferring a block of data. For example, in 64-bit data width configurations the total locations in Rx Queue of size 512 bytes is 64, so RxPBL and 8xPBL needs to be programmed to less than or equal to 32. */
    vuint32_t _unused_22:1;            /* Reserved. */
    vuint32_t _unused_23:1;            /* Reserved. */
    vuint32_t RQOS:4;                  /* Rx AXI4 QOS. This field is used to drive arqos_m_o[3:0] or awqos_m_o[3:0] output signals for all transactions of DMA Rx Channel0. */
    vuint32_t _unused_28:3;            /* Reserved. */
    vuint32_t RPF:1;                   /* Rx Packet Flush. When this bit is set to 1, then DWC_ether_qos automatically flushes the packet from the Rx Queues destined to this DMA Rx Channel, when it is stopped. When this bit remains set and the DMA is re-started by the software driver, the packets residing in the Rx Queues that were received when this RxDMA was stopped, get flushed out. The packets that are received by the MAC after the RxDMA is re-started are routed to the RxDMA. The flushing happens on the Read side of the Rx Queue. When this bit is set to 0, the DWC_ether_qos not flush the packet in the Rx Queue destined to this RxDMA Channel when it is STOP state. This may in turn cause head-of-line blocking in the corresponding RxQueue. */
  } B;
} GMAC_DMA_CH2_RX_CONTROL_tag;

typedef union GMAC_DMA_CH2_TXDESC_LIST_ADDRESS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;
    vuint32_t TDESLA:29;               /* Start of Transmit List This field contains the base address of the first descriptor in the Transmit descriptor list. The DMA ignores the LSB bits (1:0, 2:0, or 3:0) for 32-bit, 64-bit, or 128-bit bus width and internally takes these bits as all-zero. Therefore, these LSB bits are read-only (RO). The width of this field depends on the configuration: - 31:2 for 32-bit configuration - 31:3 for 64-bit configuration - 31:4 for 128-bit configuration */
  } B;
} GMAC_DMA_CH2_TXDESC_LIST_ADDRESS_tag;

typedef union GMAC_DMA_CH2_RXDESC_LIST_ADDRESS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;
    vuint32_t RDESLA:29;               /* Start of Receive List This field contains the base address of the first descriptor in the Rx Descriptor list. The DMA ignores the LSB bits (1:0, 2:0, or 3:0) for 32-bit, 64-bit, or 128-bit bus width and internally takes these bits as all-zero. Therefore, these LSB bits are read-only (RO). The width of this field depends on the configuration: - 31:2 for 32-bit configuration - 31:3 for 64-bit configuration - 31:4 for 128-bit configuration */
  } B;
} GMAC_DMA_CH2_RXDESC_LIST_ADDRESS_tag;

typedef union GMAC_DMA_CH2_TXDESC_TAIL_POINTER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;
    vuint32_t TDTP:29;                 /* Transmit Descriptor Tail Pointer This field contains the tail pointer for the Tx descriptor ring. The software writes the tail pointer to add more descriptors to the Tx channel. The hardware tries to transmit all packets referenced by the descriptors between the head and the tail pointer registers. The width of this field depends on the configuration: - 31:2 for 32-bit configuration - 31:3 for 64-bit configuration - 31:4 for 128-bit configuration */
  } B;
} GMAC_DMA_CH2_TXDESC_TAIL_POINTER_tag;

typedef union GMAC_DMA_CH2_RXDESC_TAIL_POINTER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;
    vuint32_t RDTP:29;                 /* Receive Descriptor Tail Pointer This field contains the tail pointer for the Rx descriptor ring. The software writes the tail pointer to add more descriptors to the Rx channel. The hardware tries to write all received packets to the descriptors referenced between the head and the tail pointer registers. The width of this field depends on the configuration: - 31:2 for 32-bit configuration - 31:3 for 64-bit configuration - 31:4 for 128-bit configuration */
  } B;
} GMAC_DMA_CH2_RXDESC_TAIL_POINTER_tag;

typedef union GMAC_DMA_CH2_TXDESC_RING_LENGTH_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TDRL:10;                 /* Transmit Descriptor Ring Length This field sets the maximum number of Tx descriptors in the circular descriptor ring. The maximum number of descriptors is limited to 1K descriptors. NXP recommends a minimum ring descriptor length of 4. For example, You can program any value up to 0x3FF in this field. This field is 10 bits wide, if you program 0x3FF, you can have 1024 descriptors. If you want to have 10 descriptors, program it to a value of 0x9. */
    vuint32_t _unused_10:22;           /* Reserved. */
  } B;
} GMAC_DMA_CH2_TXDESC_RING_LENGTH_tag;

typedef union GMAC_DMA_CH2_RXDESC_RING_LENGTH_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RDRL:10;                 /* Receive Descriptor Ring Length This register sets the maximum number of Rx descriptors in the circular descriptor ring. The maximum number of descriptors is limited to 1K descriptors. For example, You can program any value up to 0x3FF in this field. This field is 10 bits wide, if you program 0x3FF, you can have 1024 descriptors. If you want to have 10 descriptors, program it to a value of 0x9. */
    vuint32_t _unused_10:22;           /* Reserved. */
  } B;
} GMAC_DMA_CH2_RXDESC_RING_LENGTH_tag;

typedef union GMAC_DMA_CH2_INTERRUPT_ENABLE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TIE:1;                   /* Transmit Interrupt Enable When this bit is set along with the NIE bit, the Transmit Interrupt is enabled. When this bit is reset, the Transmit Interrupt is disabled. */
    vuint32_t TXSE:1;                  /* Transmit Stopped Enable When this bit is set along with the AIE bit, the Transmission Stopped interrupt is enabled. When this bit is reset, the Transmission Stopped interrupt is disabled. */
    vuint32_t TBUE:1;                  /* Transmit Buffer Unavailable Enable When this bit is set along with the NIE bit, the Transmit Buffer Unavailable interrupt is enabled. When this bit is reset, the Transmit Buffer Unavailable interrupt is disabled. */
    vuint32_t _unused_3:3;             /* Reserved. */
    vuint32_t RIE:1;                   /* Receive Interrupt Enable When this bit is set along with the NIE bit, the Receive Interrupt is enabled. When this bit is reset, the Receive Interrupt is disabled. */
    vuint32_t RBUE:1;                  /* Receive Buffer Unavailable Enable When this bit is set along with the AIE bit, the Receive Buffer Unavailable interrupt is enabled. When this bit is reset, the Receive Buffer Unavailable interrupt is disabled. */
    vuint32_t RSE:1;                   /* Receive Stopped Enable When this bit is set along with the AIE bit, the Receive Stopped Interrupt is enabled. When this bit is reset, the Receive Stopped interrupt is disabled. */
    vuint32_t RWTE:1;                  /* Receive Watchdog Timeout Enable When this bit is set along with the AIE bit, the Receive Watchdog Timeout interrupt is enabled. When this bit is reset, the Receive Watchdog Timeout interrupt is disabled. */
    vuint32_t ETIE:1;                  /* Early Transmit Interrupt Enable When this bit is set along with the AIE bit, the Early Transmit interrupt is enabled. When this bit is reset, the Early Transmit interrupt is disabled. */
    vuint32_t ERIE:1;                  /* Early Receive Interrupt Enable When this bit is set along with the NIE bit, the Early Receive interrupt is enabled. When this bit is reset, the Early Receive interrupt is disabled. */
    vuint32_t FBEE:1;                  /* Fatal Bus Error Enable When this bit is set along with the AIE bit, the Fatal Bus error interrupt is enabled. When this bit is reset, the Fatal Bus Error error interrupt is disabled. */
    vuint32_t CDEE:1;                  /* Context Descriptor Error Enable When this bit is set along with the AIE bit, the Descriptor error interrupt is enabled. When this bit is reset, the Descriptor error interrupt is disabled. */
    vuint32_t AIE:1;                   /* Abnormal Interrupt Summary Enable When this bit is set, the abnormal interrupt summary is enabled. This bit enables the following interrupts in the DMA_CH0_Status register: - Bit 1: Transmit Process Stopped - Bit 7: Rx Buffer Unavailable - Bit 8: Receive Process Stopped - Bit 9: Receive Watchdog Timeout - Bit 10: Early Transmit Interrupt - Bit 12: Fatal Bus Error - Bit 13: Context Descriptor Error When this bit is reset, the abnormal interrupt summary is disabled. */
    vuint32_t NIE:1;                   /* Normal Interrupt Summary Enable When this bit is set, the normal interrupt summary is enabled. This bit enables the following interrupts in the DMA_CH0_Status register: - Bit 0: Transmit Interrupt - Bit 2: Transmit Buffer Unavailable - Bit 6: Receive Interrupt - Bit 11: Early Receive Interrupt When this bit is reset, the normal interrupt summary is disabled. */
    vuint32_t _unused_16:16;           /* Reserved. */
  } B;
} GMAC_DMA_CH2_INTERRUPT_ENABLE_tag;

typedef union GMAC_DMA_CH2_RX_INTERRUPT_WATCHDOG_TIMER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RWT:8;                   /* Receive Interrupt Watchdog Timer Count This field indicates the number of system clock cycles, multiplied by factor indicated in RWTU field, for which the watchdog timer is set. The watchdog timer is triggered with the programmed value after the Rx DMA completes the transfer of a packet for which the RI bit is not set in the DMA_CH(#i)_Status register, because of the setting of Interrupt Enable bit in the corresponding descriptor RDES3[30]. When the watchdog timer runs out, the RI bit is set and the timer is stopped. The watchdog timer is reset when the RI bit is set high because of automatic setting of RI as per the Interrupt Enable bit RDES3[30] of any received packet. */
    vuint32_t _unused_8:8;             /* Reserved. */
    vuint32_t RWTU:2;                  /* Receive Interrupt Watchdog Timer Count Units This fields indicates the number of system clock cycles corresponding to one unit in RWT field. - 2'b00: 256 - 2'b01: 512 - 2'b10: 1024 - 2'b11: 2048 For example, when RWT=2 and RWTU=1, the watchdog timer is set for 2*512=1024 system clock cycles. */
    vuint32_t _unused_18:14;           /* Reserved. */
  } B;
} GMAC_DMA_CH2_RX_INTERRUPT_WATCHDOG_TIMER_tag;

typedef union GMAC_DMA_CH2_SLOT_FUNCTION_CONTROL_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ESC:1;                   /* Enable Slot Comparison When set, this bit enables the checking of the slot numbers programmed in the Tx descriptor with the current reference given in the RSN field. The DMA fetches the data from the corresponding buffer only when the slot number is - equal to the reference slot number or - ahead of the reference slot number by one slot When reset, this bit disables the checking of the slot numbers. The DMA fetches the data immediately after the descriptor is processed. Note: The UFO (UDP Fragmentation over IPv4)/TSO/USO should not be enabled along with TBS/AVB Slot number check. The UFO/TSO/USO involves multiple packets/segments/fragments transmission for single packet received from application and the slot number check are applicable for fetching of only first segment/fragment. As a result it might be difficult for software to specify slot number for subsequent packets. */
    vuint32_t ASC:1;                   /* Advance Slot Check When set, this bit enables the DMA to fetch the data from the buffer when the slot number (SLOTNUM) programmed in the Tx descriptor is - equal to the reference slot number given in the RSN field or - ahead of the reference slot number by up to two slots This bit is applicable only when the ESC bit is set. */
    vuint32_t _unused_2:2;             /* Reserved. */
    vuint32_t SIV:12;                  /* Slot Interval Value This field controls the period of the slot interval in which the TxDMA fetches the scheduled packets. A value of 0 specifies the slot interval of 1 us while the maximum value 4095 specifies the slot interval of 4096us. The default/reset value is 0x07C which corresponds to slot interval of 125us */
    vuint32_t RSN:4;                   /* Reference Slot Number This field gives the current value of the reference slot number in the DMA. It is used for slot comparison. */
    vuint32_t _unused_20:12;           /* Reserved. */
  } B;
} GMAC_DMA_CH2_SLOT_FUNCTION_CONTROL_STATUS_tag;

typedef union GMAC_DMA_CH2_CURRENT_APP_TXDESC_union_tag {
  vuint32_t R;
  struct {
    vuint32_t CURTDESAPTR:32;          /* Application Transmit Descriptor Address Pointer The DMA updates this pointer during Tx operation. This pointer is cleared on reset. */
  } B;
} GMAC_DMA_CH2_CURRENT_APP_TXDESC_tag;

typedef union GMAC_DMA_CH2_CURRENT_APP_RXDESC_union_tag {
  vuint32_t R;
  struct {
    vuint32_t CURRDESAPTR:32;          /* Application Receive Descriptor Address Pointer The DMA updates this pointer during Rx operation. This pointer is cleared on reset. */
  } B;
} GMAC_DMA_CH2_CURRENT_APP_RXDESC_tag;

typedef union GMAC_DMA_CH2_CURRENT_APP_TXBUFFER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t CURTBUFAPTR:32;          /* Application Transmit Buffer Address Pointer The DMA updates this pointer during Tx operation. This pointer is cleared on reset. */
  } B;
} GMAC_DMA_CH2_CURRENT_APP_TXBUFFER_tag;

typedef union GMAC_DMA_CH2_CURRENT_APP_RXBUFFER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t CURRBUFAPTR:32;          /* Application Receive Buffer Address Pointer The DMA updates this pointer during Rx operation. This pointer is cleared on reset. */
  } B;
} GMAC_DMA_CH2_CURRENT_APP_RXBUFFER_tag;

typedef union GMAC_DMA_CH2_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TI:1;                    /* Transmit Interrupt This bit indicates that the packet transmission is complete. When transmission is complete, Bit 31 of TDES3 is reset in the last descriptor, and the specific packet status information is updated in the descriptor. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t TPS:1;                   /* Transmit Process Stopped This bit is set when the transmission is stopped. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t TBU:1;                   /* Transmit Buffer Unavailable This bit indicates that the application owns the next descriptor in the Transmit list, and the DMA cannot acquire it. Transmission is suspended. The TPS0 field of the DMA_Debug_Status0 register explains the Transmit Process state transitions. To resume processing the Transmit descriptors, the application should do the following: 1. Change the ownership of the descriptor by setting Bit 31 of TDES3. 2. Issue a Transmit Poll Demand command. For ring mode, the application should advance the Transmit Descriptor Tail Pointer register of a channel. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t _unused_3:3;             /* Reserved. */
    vuint32_t RI:1;                    /* Receive Interrupt This bit indicates that the packet reception is complete. When packet reception is complete, Bit 31 of RDES3 is reset in the last descriptor, and the specific packet status information is updated in the descriptor. The reception remains in the Running state. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t RBU:1;                   /* Receive Buffer Unavailable This bit indicates that the application owns the next descriptor in the Receive list, and the DMA cannot acquire it. The Rx process is suspended. To resume processing Rx descriptors, the application should change the ownership of the descriptor and issue a Receive Poll Demand command. If this command is not issued, the Rx process resumes when the next recognized incoming packet is received. In ring mode, the application should advance the Receive Descriptor Tail Pointer register of a channel. This bit is set only when the DMA owns the previous Rx descriptor. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t RPS:1;                   /* Receive Process Stopped This bit is asserted when the Rx process enters the Stopped state. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t RWT:1;                   /* Receive Watchdog Timeout This bit is asserted when a packet with length greater than 2,048 bytes is received. */
    vuint32_t ETI:1;                   /* Early Transmit Interrupt This bit when set indicates that the TxDMA has completed the transfer of packet data to the MTL TXFIFO memory. In configs supporting ERIC: When ETIC=0, this bit is set only after the Tx DMA has transferred a complete packet to MTL. When ETIC=1, this bit is set after completion of (partial) packet data transfer from buffers in the Transmit descriptor in which IOC=1. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t ERI:1;                   /* Early Receive Interrupt This bit when set indicates that the RxDMA has completed the transfer of packet data to the memory. In configs supporting ERIC, When ERIC=0, this bit is set only after the Rx DMA has filled up a complete receive buffer with packet data. When ERIC=1, this bit is set after every burst transfer of data from the Rx DMA to the buffer. The setting of RI bit automatically clears this bit. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t FBE:1;                   /* Fatal Bus Error This bit indicates that a bus error occurred (as described in the EB field). When this bit is set, the corresponding DMA channel engine disables all bus accesses. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t CDE:1;                   /* Context Descriptor Error This bit indicates that the DMA Tx/Rx engine received a descriptor error, which indicates invalid context in the middle of packet flow ( intermediate descriptor) or all one's descriptor in Tx case and on Rx side it indicates DMA has read a descriptor with either of the buffer address as ones which is considered to be invalid. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t AIS:1;                   /* Abnormal Interrupt Summary Abnormal Interrupt Summary bit value is the logical OR of the following when the corresponding interrupt bits are enabled in the DMA_CH0_Interrupt_Enable register: - Bit 1: Transmit Process Stopped - Bit 7: Receive Buffer Unavailable - Bit 8: Receive Process Stopped - Bit 10: Early Transmit Interrupt - Bit 12: Fatal Bus Error - Bit 13: Context Descriptor Error Only unmasked bits affect the Abnormal Interrupt Summary bit. This is a sticky bit. You must clear this bit (by writing 1 to this bit) each time a corresponding bit, which causes AIS to be set, is cleared. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t NIS:1;                   /* Normal Interrupt Summary Normal Interrupt Summary bit value is the logical OR of the following bits when the corresponding interrupt bits are enabled in the DMA_CH0_Interrupt_Enable register: - Bit 0: Transmit Interrupt - Bit 2: Transmit Buffer Unavailable - Bit 6: Receive Interrupt - Bit 11: Early Receive Interrupt Only unmasked bits (interrupts for which interrupt enable is set in DMA_CH0_Interrupt_Enable register) affect the Normal Interrupt Summary bit. This is a sticky bit. You must clear this bit (by writing 1 to this bit) each time a corresponding bit which causes NIS to be set is cleared. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t TEB:3;                   /* Tx DMA Error Bits This field indicates the type of error that caused a Bus Error. For example, error response on the AHB or AXI interface. - Bit 18 -- 1'b1: Error during data transfer by Tx DMA -- 1'b0: No Error during data transfer by Tx DMA - Bit 17 -- 1'b1: Error during descriptor access -- 1'b0: Error during data buffer access - Bit 16 -- 1'b1: Error during read transfer -- 1'b0: Error during write transfer This field is valid only when the FBE bit is set. This field does not generate an interrupt. */
    vuint32_t REB:3;                   /* Rx DMA Error Bits This field indicates the type of error that caused a Bus Error. For example, error response on the AHB or AXI interface. - Bit 21 -- 1'b1: Error during data transfer by Rx DMA -- 1'b0: No Error during data transfer by Rx DMA - Bit 20 -- 1'b1: Error during descriptor access -- 1'b0: Error during data buffer access - Bit 19 -- 1'b1: Error during read transfer -- 1'b0: Error during write transfer This field is valid only when the FBE bit is set. This field does not generate an interrupt. */
    vuint32_t _unused_22:10;           /* Reserved. */
  } B;
} GMAC_DMA_CH2_STATUS_tag;

typedef union GMAC_DMA_CH2_MISS_FRAME_CNT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t MFC:11;                  /* Dropped Packet Counters This counter indicates the number of packet counters that are dropped by the DMA either because of bus error or because of programing RPF field in DMA_CH${i}_Rx_Control register. The counter gets cleared when this register is read. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t _unused_11:4;            /* Reserved. */
    vuint32_t MFCO:1;                  /* Overflow status of the MFC Counter When this bit is set then the MFC counter does not get incremented further. The bit gets cleared when this register is read. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t _unused_16:16;           /* Reserved. */
  } B;
} GMAC_DMA_CH2_MISS_FRAME_CNT_tag;

typedef union GMAC_DMA_CH2_RXP_ACCEPT_CNT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXPAC:31;                /* Rx Parser Accept Counter This 31-bit counter is implemented whenever a Rx Parser Accept a packet due to AF =1. The counter is cleared when the register is read. */
    vuint32_t RXPACOF:1;               /* Rx Parser Accept Counter Overflow Bit When set, this bit indicates that the RXPAC Counter field crossed the maximum limit. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
  } B;
} GMAC_DMA_CH2_RXP_ACCEPT_CNT_tag;

typedef union GMAC_DMA_CH2_RX_ERI_CNT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ECNT:12;                 /* ERI Counter When ERIC bit of DMA_CH(#i)_RX_Control register is set, this counter increments for burst transfer completed by the Rx DMA from the start of packet transfer. This counter will get reset at the start of new packet. */
    vuint32_t _unused_12:20;
  } B;
} GMAC_DMA_CH2_RX_ERI_CNT_tag;

typedef union GMAC_DMA_CH3_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:14;            /* Reserved. */
    vuint32_t _unused_14:2;            /* Reserved. */
    vuint32_t PBLX8:1;                 /* 8xPBL mode When this bit is set, the PBL value programmed in Bits[21:16] in DMA_CH0_Tx_Control and Bits[21:16] in DMA_CH0_Rx_Control is multiplied by eight times. Therefore, the DMA transfers the data in 8, 16, 32, 64, 128, and 256 beats depending on the PBL value. */
    vuint32_t _unused_17:1;            /* Reserved. */
    vuint32_t DSL:3;                   /* Descriptor Skip Length This bit specifies the Word, Dword, or Lword number (depending on the 32-bit, 64-bit, or 128-bit bus) to skip between two unchained descriptors. The address skipping starts from the end of the current descriptor to the start of the next descriptor. When the DSL value is equal to zero, the DMA takes the descriptor table as contiguous. */
    vuint32_t _unused_21:3;            /* Reserved. */
    vuint32_t SPH:1;                   /* Split Headers When this bit is set, the DMA splits the header and payload in the Receive path. The DMA writes the header to the Buffer Address1 of RDES0. The DMA writes the payload to the buffer to which the Buffer Address2 is pointing. The software must ensure that the header fits into the Receive buffers. If the header length exceeds the receive buffer size, the DMA does not split the header and payload. This bit is available only if Enable Split Header Structure option is selected. */
    vuint32_t _unused_25:7;            /* Reserved. */
  } B;
} GMAC_DMA_CH3_CONTROL_tag;

typedef union GMAC_DMA_CH3_TX_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ST:1;                    /* Start or Stop Transmission Command When this bit is set, transmission is placed in the Running state. The DMA checks the Transmit list at the current position for a packet to be transmitted. The DMA tries to acquire descriptor from either of the following positions: - The current position in the list This is the base address of the Transmit list set by the DMA_CH0_TxDesc_List_Address register. - The position at which the transmission was previously stopped If the DMA does not own the current descriptor, the transmission enters the Suspended state and the TBU bit of the DMA_CH0_Status register is set. The Start Transmission command is effective only when the transmission is stopped. If the command is issued before setting the DMA_CH0_TxDesc_List_Address register, the DMA behavior is unpredictable. When this bit is reset, the transmission process is placed in the Stopped state after completing the transmission of the current packet. The Next Descriptor position in the Transmit list is saved, and it becomes the current position when the transmission is restarted. To change the list address, you need to program DMA_CH0_TxDesc_List_Address register with a new value when this bit is reset. The new value is considered when this bit is set again. The stop transmission command is effective only when the transmission of the current packet is complete or the transmission is in the Suspended state. */
    vuint32_t _unused_1:3;             /* Reserved. */
    vuint32_t OSF:1;                   /* Operate on Second Packet When this bit is set, it instructs the DMA to process the second packet of the Transmit data even before the status for the first packet is obtained. */
    vuint32_t _unused_5:7;             /* Reserved. */
    vuint32_t _unused_12:1;            /* Reserved. */
    vuint32_t _unused_13:2;            /* Reserved. */
    vuint32_t IPBL:1;                  /* Ignore PBL Requirement When this bit is set, the DMA does not check for PBL number of locations in the MTL before initiating a transfer. If space is not available, the MTL may use handshaking to slow the DMA. Note: This bit/mode must not be used when multiple Transmit DMA Channels are enabled as it may block other Transmit and Receive DMA Channels from accessing the Read Data Channel of AXI bus until space is available in Transmit Queue for current transfer. */
    vuint32_t TXPBL:6;                 /* Transmit Programmable Burst Length These bits indicate the maximum number of beats to be transferred in one DMA block data transfer. The DMA always attempts max burst as specified in PBL each time it starts a burst transfer on the application bus. You can program PBL with any of the following values: 1, 2, 4, 8, 16, or 32. Any other value results in undefined behavior. To transfer more than 32 beats, perform the following steps: 1. Set the 8xPBL mode in DMA_CH0_Control register. 2. Set the TxPBL. Note: The maximum value of TxPBL must be less than or equal to half the Tx Queue size (TQS field of MTL_TxQ[n]_Operation_Mode register) in terms of beats. This is required so that the Tx Queue has space to store at least another Tx PBL worth of data while the MTL Tx Queue Controller is transferring data to MAC. For example, in 64-bit data width configurations the total locations in Tx Queue of size 512 bytes is 64, TxPBL and 8xPBL needs to be programmed to less than or equal to 32. */
    vuint32_t _unused_22:1;            /* Reserved. */
    vuint32_t _unused_23:1;            /* Reserved. */
    vuint32_t TQOS:4;                  /* Transmit QOS. This field is used to drive arqos_m_o[3:0] or awqos_m_o[3:0] output signals for all transactions of DMA Tx Channel0. */
    vuint32_t EDSE:1;                  /* Enhanced Descriptor Enable When this bit is set, the corresponding channel uses Enhanced Descriptors that are 32 Bytes for both Normal and Context Descriptors. When reset, the corresponding channel uses the descriptors that are 16 Bytes. */
    vuint32_t _unused_29:3;            /* Reserved. */
  } B;
} GMAC_DMA_CH3_TX_CONTROL_tag;

typedef union GMAC_DMA_CH3_RX_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t SR:1;                    /* Start or Stop Receive When this bit is set, the DMA tries to acquire the descriptor from the Receive list and processes the incoming packets. The DMA tries to acquire descriptor from either of the following positions: - The current position in the list This is the address set by the DMA_CH0_RxDesc_List_Address register. - The position at which the Rx process was previously stopped If the DMA does not own the current descriptor, the reception is suspended and the RBU bit of the DMA_CH0_Status register is set. The Start Receive command is effective only when the reception is stopped. If the command is issued before setting the DMA_CH0_RxDesc_List_Address register, the DMA behavior is unpredictable. When this bit is reset, the Rx DMA operation is stopped after the transfer of the current packet. The next descriptor position in the Receive list is saved, and it becomes the current position after the Rx process is restarted. The Stop Receive command is effective only when the Rx process is in the Running (waiting for Rx packet) or Suspended state. */
    vuint32_t RBSZ_X_0:3;              /* Receive Buffer size Low RBSZ[13:0] is split into two fields RBSZ_13_y and RBSZ_x_0. The RBSZ_x_0 is the lower field whose width is based on data bus width of the configuration. This field is of width 2, 3, or 4 bits for 32-bit, 64-bit, or 128-bit data bus width respectively. This field is read-only (RO). */
    vuint32_t RBSZ_13_Y:11;            /* Receive Buffer size High RBSZ[13:0] is split into two fields higher RBSZ_13_y and lower RBSZ_x_0. The RBSZ[13:0] field indicates the size of the Rx buffers specified in bytes. The maximum buffer size is limited to 16K bytes. The buffer size is applicable to payload buffers when split headers are enabled. Note: The buffer size must be a multiple of 4, 8, or 16 depending on the data bus widths (32-bit, 64-bit, or 128-bit respectively). This is required even if the value of buffer address pointer is not aligned to data bus width. Hence the lower RBSZ_x_0 bits are read-only and the value is considered as all-zero. Thus the RBSZ_13_y indicates the buffer size in terms of locations (with the width same as bus-width). */
    vuint32_t _unused_15:1;            /* Reserved. */
    vuint32_t RXPBL:6;                 /* Receive Programmable Burst Length These bits indicate the maximum number of beats to be transferred in one DMA block data transfer. The DMA always attempts max burst as specified in PBL each time it starts a burst transfer on the application bus. You can program PBL with any of the following values: 1, 2, 4, 8, 16, or 32. Any other value results in undefined behavior. To transfer more than 32 beats, perform the following steps: 1. Set the 8xPBL mode in the DMA_CH0_Control register. 2. Set the RxPBL. Note: The maximum value of RxPBL must be less than or equal to half the Rx Queue size (RQS field of MTL_RxQ[n]_Operation_Mode register) in terms of beats. This is required so that the Rx Queue has space to store at least another Rx PBL worth of data while the Rx DMA is transferring a block of data. For example, in 64-bit data width configurations the total locations in Rx Queue of size 512 bytes is 64, so RxPBL and 8xPBL needs to be programmed to less than or equal to 32. */
    vuint32_t _unused_22:1;            /* Reserved. */
    vuint32_t _unused_23:1;            /* Reserved. */
    vuint32_t RQOS:4;                  /* Rx AXI4 QOS. This field is used to drive arqos_m_o[3:0] or awqos_m_o[3:0] output signals for all transactions of DMA Rx Channel0. */
    vuint32_t _unused_28:3;            /* Reserved. */
    vuint32_t RPF:1;                   /* Rx Packet Flush. When this bit is set to 1, then DWC_ether_qos automatically flushes the packet from the Rx Queues destined to this DMA Rx Channel, when it is stopped. When this bit remains set and the DMA is re-started by the software driver, the packets residing in the Rx Queues that were received when this RxDMA was stopped, get flushed out. The packets that are received by the MAC after the RxDMA is re-started are routed to the RxDMA. The flushing happens on the Read side of the Rx Queue. When this bit is set to 0, the DWC_ether_qos not flush the packet in the Rx Queue destined to this RxDMA Channel when it is STOP state. This may in turn cause head-of-line blocking in the corresponding RxQueue. */
  } B;
} GMAC_DMA_CH3_RX_CONTROL_tag;

typedef union GMAC_DMA_CH3_TXDESC_LIST_ADDRESS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;
    vuint32_t TDESLA:29;               /* Start of Transmit List This field contains the base address of the first descriptor in the Transmit descriptor list. The DMA ignores the LSB bits (1:0, 2:0, or 3:0) for 32-bit, 64-bit, or 128-bit bus width and internally takes these bits as all-zero. Therefore, these LSB bits are read-only (RO). The width of this field depends on the configuration: - 31:2 for 32-bit configuration - 31:3 for 64-bit configuration - 31:4 for 128-bit configuration */
  } B;
} GMAC_DMA_CH3_TXDESC_LIST_ADDRESS_tag;

typedef union GMAC_DMA_CH3_RXDESC_LIST_ADDRESS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;
    vuint32_t RDESLA:29;               /* Start of Receive List This field contains the base address of the first descriptor in the Rx Descriptor list. The DMA ignores the LSB bits (1:0, 2:0, or 3:0) for 32-bit, 64-bit, or 128-bit bus width and internally takes these bits as all-zero. Therefore, these LSB bits are read-only (RO). The width of this field depends on the configuration: - 31:2 for 32-bit configuration - 31:3 for 64-bit configuration - 31:4 for 128-bit configuration */
  } B;
} GMAC_DMA_CH3_RXDESC_LIST_ADDRESS_tag;

typedef union GMAC_DMA_CH3_TXDESC_TAIL_POINTER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;
    vuint32_t TDTP:29;                 /* Transmit Descriptor Tail Pointer This field contains the tail pointer for the Tx descriptor ring. The software writes the tail pointer to add more descriptors to the Tx channel. The hardware tries to transmit all packets referenced by the descriptors between the head and the tail pointer registers. The width of this field depends on the configuration: - 31:2 for 32-bit configuration - 31:3 for 64-bit configuration - 31:4 for 128-bit configuration */
  } B;
} GMAC_DMA_CH3_TXDESC_TAIL_POINTER_tag;

typedef union GMAC_DMA_CH3_RXDESC_TAIL_POINTER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;
    vuint32_t RDTP:29;                 /* Receive Descriptor Tail Pointer This field contains the tail pointer for the Rx descriptor ring. The software writes the tail pointer to add more descriptors to the Rx channel. The hardware tries to write all received packets to the descriptors referenced between the head and the tail pointer registers. The width of this field depends on the configuration: - 31:2 for 32-bit configuration - 31:3 for 64-bit configuration - 31:4 for 128-bit configuration */
  } B;
} GMAC_DMA_CH3_RXDESC_TAIL_POINTER_tag;

typedef union GMAC_DMA_CH3_TXDESC_RING_LENGTH_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TDRL:10;                 /* Transmit Descriptor Ring Length This field sets the maximum number of Tx descriptors in the circular descriptor ring. The maximum number of descriptors is limited to 1K descriptors. NXP recommends a minimum ring descriptor length of 4. For example, You can program any value up to 0x3FF in this field. This field is 10 bits wide, if you program 0x3FF, you can have 1024 descriptors. If you want to have 10 descriptors, program it to a value of 0x9. */
    vuint32_t _unused_10:22;           /* Reserved. */
  } B;
} GMAC_DMA_CH3_TXDESC_RING_LENGTH_tag;

typedef union GMAC_DMA_CH3_RXDESC_RING_LENGTH_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RDRL:10;                 /* Receive Descriptor Ring Length This register sets the maximum number of Rx descriptors in the circular descriptor ring. The maximum number of descriptors is limited to 1K descriptors. For example, You can program any value up to 0x3FF in this field. This field is 10 bits wide, if you program 0x3FF, you can have 1024 descriptors. If you want to have 10 descriptors, program it to a value of 0x9. */
    vuint32_t _unused_10:22;           /* Reserved. */
  } B;
} GMAC_DMA_CH3_RXDESC_RING_LENGTH_tag;

typedef union GMAC_DMA_CH3_INTERRUPT_ENABLE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TIE:1;                   /* Transmit Interrupt Enable When this bit is set along with the NIE bit, the Transmit Interrupt is enabled. When this bit is reset, the Transmit Interrupt is disabled. */
    vuint32_t TXSE:1;                  /* Transmit Stopped Enable When this bit is set along with the AIE bit, the Transmission Stopped interrupt is enabled. When this bit is reset, the Transmission Stopped interrupt is disabled. */
    vuint32_t TBUE:1;                  /* Transmit Buffer Unavailable Enable When this bit is set along with the NIE bit, the Transmit Buffer Unavailable interrupt is enabled. When this bit is reset, the Transmit Buffer Unavailable interrupt is disabled. */
    vuint32_t _unused_3:3;             /* Reserved. */
    vuint32_t RIE:1;                   /* Receive Interrupt Enable When this bit is set along with the NIE bit, the Receive Interrupt is enabled. When this bit is reset, the Receive Interrupt is disabled. */
    vuint32_t RBUE:1;                  /* Receive Buffer Unavailable Enable When this bit is set along with the AIE bit, the Receive Buffer Unavailable interrupt is enabled. When this bit is reset, the Receive Buffer Unavailable interrupt is disabled. */
    vuint32_t RSE:1;                   /* Receive Stopped Enable When this bit is set along with the AIE bit, the Receive Stopped Interrupt is enabled. When this bit is reset, the Receive Stopped interrupt is disabled. */
    vuint32_t RWTE:1;                  /* Receive Watchdog Timeout Enable When this bit is set along with the AIE bit, the Receive Watchdog Timeout interrupt is enabled. When this bit is reset, the Receive Watchdog Timeout interrupt is disabled. */
    vuint32_t ETIE:1;                  /* Early Transmit Interrupt Enable When this bit is set along with the AIE bit, the Early Transmit interrupt is enabled. When this bit is reset, the Early Transmit interrupt is disabled. */
    vuint32_t ERIE:1;                  /* Early Receive Interrupt Enable When this bit is set along with the NIE bit, the Early Receive interrupt is enabled. When this bit is reset, the Early Receive interrupt is disabled. */
    vuint32_t FBEE:1;                  /* Fatal Bus Error Enable When this bit is set along with the AIE bit, the Fatal Bus error interrupt is enabled. When this bit is reset, the Fatal Bus Error error interrupt is disabled. */
    vuint32_t CDEE:1;                  /* Context Descriptor Error Enable When this bit is set along with the AIE bit, the Descriptor error interrupt is enabled. When this bit is reset, the Descriptor error interrupt is disabled. */
    vuint32_t AIE:1;                   /* Abnormal Interrupt Summary Enable When this bit is set, the abnormal interrupt summary is enabled. This bit enables the following interrupts in the DMA_CH0_Status register: - Bit 1: Transmit Process Stopped - Bit 7: Rx Buffer Unavailable - Bit 8: Receive Process Stopped - Bit 9: Receive Watchdog Timeout - Bit 10: Early Transmit Interrupt - Bit 12: Fatal Bus Error - Bit 13: Context Descriptor Error When this bit is reset, the abnormal interrupt summary is disabled. */
    vuint32_t NIE:1;                   /* Normal Interrupt Summary Enable When this bit is set, the normal interrupt summary is enabled. This bit enables the following interrupts in the DMA_CH0_Status register: - Bit 0: Transmit Interrupt - Bit 2: Transmit Buffer Unavailable - Bit 6: Receive Interrupt - Bit 11: Early Receive Interrupt When this bit is reset, the normal interrupt summary is disabled. */
    vuint32_t _unused_16:16;           /* Reserved. */
  } B;
} GMAC_DMA_CH3_INTERRUPT_ENABLE_tag;

typedef union GMAC_DMA_CH3_RX_INTERRUPT_WATCHDOG_TIMER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RWT:8;                   /* Receive Interrupt Watchdog Timer Count This field indicates the number of system clock cycles, multiplied by factor indicated in RWTU field, for which the watchdog timer is set. The watchdog timer is triggered with the programmed value after the Rx DMA completes the transfer of a packet for which the RI bit is not set in the DMA_CH(#i)_Status register, because of the setting of Interrupt Enable bit in the corresponding descriptor RDES3[30]. When the watchdog timer runs out, the RI bit is set and the timer is stopped. The watchdog timer is reset when the RI bit is set high because of automatic setting of RI as per the Interrupt Enable bit RDES3[30] of any received packet. */
    vuint32_t _unused_8:8;             /* Reserved. */
    vuint32_t RWTU:2;                  /* Receive Interrupt Watchdog Timer Count Units This fields indicates the number of system clock cycles corresponding to one unit in RWT field. - 2'b00: 256 - 2'b01: 512 - 2'b10: 1024 - 2'b11: 2048 For example, when RWT=2 and RWTU=1, the watchdog timer is set for 2*512=1024 system clock cycles. */
    vuint32_t _unused_18:14;           /* Reserved. */
  } B;
} GMAC_DMA_CH3_RX_INTERRUPT_WATCHDOG_TIMER_tag;

typedef union GMAC_DMA_CH3_SLOT_FUNCTION_CONTROL_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ESC:1;                   /* Enable Slot Comparison When set, this bit enables the checking of the slot numbers programmed in the Tx descriptor with the current reference given in the RSN field. The DMA fetches the data from the corresponding buffer only when the slot number is - equal to the reference slot number or - ahead of the reference slot number by one slot When reset, this bit disables the checking of the slot numbers. The DMA fetches the data immediately after the descriptor is processed. Note: The UFO (UDP Fragmentation over IPv4)/TSO/USO should not be enabled along with TBS/AVB Slot number check. The UFO/TSO/USO involves multiple packets/segments/fragments transmission for single packet received from application and the slot number check are applicable for fetching of only first segment/fragment. As a result it might be difficult for software to specify slot number for subsequent packets. */
    vuint32_t ASC:1;                   /* Advance Slot Check When set, this bit enables the DMA to fetch the data from the buffer when the slot number (SLOTNUM) programmed in the Tx descriptor is - equal to the reference slot number given in the RSN field or - ahead of the reference slot number by up to two slots This bit is applicable only when the ESC bit is set. */
    vuint32_t _unused_2:2;             /* Reserved. */
    vuint32_t SIV:12;                  /* Slot Interval Value This field controls the period of the slot interval in which the TxDMA fetches the scheduled packets. A value of 0 specifies the slot interval of 1 us while the maximum value 4095 specifies the slot interval of 4096us. The default/reset value is 0x07C which corresponds to slot interval of 125us */
    vuint32_t RSN:4;                   /* Reference Slot Number This field gives the current value of the reference slot number in the DMA. It is used for slot comparison. */
    vuint32_t _unused_20:12;           /* Reserved. */
  } B;
} GMAC_DMA_CH3_SLOT_FUNCTION_CONTROL_STATUS_tag;

typedef union GMAC_DMA_CH3_CURRENT_APP_TXDESC_union_tag {
  vuint32_t R;
  struct {
    vuint32_t CURTDESAPTR:32;          /* Application Transmit Descriptor Address Pointer The DMA updates this pointer during Tx operation. This pointer is cleared on reset. */
  } B;
} GMAC_DMA_CH3_CURRENT_APP_TXDESC_tag;

typedef union GMAC_DMA_CH3_CURRENT_APP_RXDESC_union_tag {
  vuint32_t R;
  struct {
    vuint32_t CURRDESAPTR:32;          /* Application Receive Descriptor Address Pointer The DMA updates this pointer during Rx operation. This pointer is cleared on reset. */
  } B;
} GMAC_DMA_CH3_CURRENT_APP_RXDESC_tag;

typedef union GMAC_DMA_CH3_CURRENT_APP_TXBUFFER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t CURTBUFAPTR:32;          /* Application Transmit Buffer Address Pointer The DMA updates this pointer during Tx operation. This pointer is cleared on reset. */
  } B;
} GMAC_DMA_CH3_CURRENT_APP_TXBUFFER_tag;

typedef union GMAC_DMA_CH3_CURRENT_APP_RXBUFFER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t CURRBUFAPTR:32;          /* Application Receive Buffer Address Pointer The DMA updates this pointer during Rx operation. This pointer is cleared on reset. */
  } B;
} GMAC_DMA_CH3_CURRENT_APP_RXBUFFER_tag;

typedef union GMAC_DMA_CH3_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TI:1;                    /* Transmit Interrupt This bit indicates that the packet transmission is complete. When transmission is complete, Bit 31 of TDES3 is reset in the last descriptor, and the specific packet status information is updated in the descriptor. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t TPS:1;                   /* Transmit Process Stopped This bit is set when the transmission is stopped. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t TBU:1;                   /* Transmit Buffer Unavailable This bit indicates that the application owns the next descriptor in the Transmit list, and the DMA cannot acquire it. Transmission is suspended. The TPS0 field of the DMA_Debug_Status0 register explains the Transmit Process state transitions. To resume processing the Transmit descriptors, the application should do the following: 1. Change the ownership of the descriptor by setting Bit 31 of TDES3. 2. Issue a Transmit Poll Demand command. For ring mode, the application should advance the Transmit Descriptor Tail Pointer register of a channel. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t _unused_3:3;             /* Reserved. */
    vuint32_t RI:1;                    /* Receive Interrupt This bit indicates that the packet reception is complete. When packet reception is complete, Bit 31 of RDES3 is reset in the last descriptor, and the specific packet status information is updated in the descriptor. The reception remains in the Running state. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t RBU:1;                   /* Receive Buffer Unavailable This bit indicates that the application owns the next descriptor in the Receive list, and the DMA cannot acquire it. The Rx process is suspended. To resume processing Rx descriptors, the application should change the ownership of the descriptor and issue a Receive Poll Demand command. If this command is not issued, the Rx process resumes when the next recognized incoming packet is received. In ring mode, the application should advance the Receive Descriptor Tail Pointer register of a channel. This bit is set only when the DMA owns the previous Rx descriptor. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t RPS:1;                   /* Receive Process Stopped This bit is asserted when the Rx process enters the Stopped state. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t RWT:1;                   /* Receive Watchdog Timeout This bit is asserted when a packet with length greater than 2,048 bytes received. */
    vuint32_t ETI:1;                   /* Early Transmit Interrupt This bit when set indicates that the TxDMA has completed the transfer of packet data to the MTL TXFIFO memory. In configs supporting ERIC: When ETIC=0, this bit is set only after the Tx DMA has transferred a complete packet to MTL. When ETIC=1, this bit is set after completion of (partial) packet data transfer from buffers in the Transmit descriptor in which IOC=1. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t ERI:1;                   /* Early Receive Interrupt This bit when set indicates that the RxDMA has completed the transfer of packet data to the memory. In configs supporting ERIC, When ERIC=0, this bit is set only after the Rx DMA has filled up a complete receive buffer with packet data. When ERIC=1, this bit is set after every burst transfer of data from the Rx DMA to the buffer. The setting of RI bit automatically clears this bit. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t FBE:1;                   /* Fatal Bus Error This bit indicates that a bus error occurred (as described in the EB field). When this bit is set, the corresponding DMA channel engine disables all bus accesses. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t CDE:1;                   /* Context Descriptor Error This bit indicates that the DMA Tx/Rx engine received a descriptor error, which indicates invalid context in the middle of packet flow ( intermediate descriptor) or all one's descriptor in Tx case and on Rx side it indicates DMA has read a descriptor with either of the buffer address as ones which is considered to be invalid. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t AIS:1;                   /* Abnormal Interrupt Summary Abnormal Interrupt Summary bit value is the logical OR of the following when the corresponding interrupt bits are enabled in the DMA_CH0_Interrupt_Enable register: - Bit 1: Transmit Process Stopped - Bit 7: Receive Buffer Unavailable - Bit 8: Receive Process Stopped - Bit 10: Early Transmit Interrupt - Bit 12: Fatal Bus Error - Bit 13: Context Descriptor Error Only unmasked bits affect the Abnormal Interrupt Summary bit. This is a sticky bit. You must clear this bit (by writing 1 to this bit) each time a corresponding bit, which causes AIS to be set, is cleared. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t NIS:1;                   /* Normal Interrupt Summary Normal Interrupt Summary bit value is the logical OR of the following bits when the corresponding interrupt bits are enabled in the DMA_CH0_Interrupt_Enable register: - Bit 0: Transmit Interrupt - Bit 2: Transmit Buffer Unavailable - Bit 6: Receive Interrupt - Bit 11: Early Receive Interrupt Only unmasked bits (interrupts for which interrupt enable is set in DMA_CH0_Interrupt_Enable register) affect the Normal Interrupt Summary bit. This is a sticky bit. You must clear this bit (by writing 1 to this bit) each time a corresponding bit which causes NIS to be set is cleared. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t TEB:3;                   /* Tx DMA Error Bits This field indicates the type of error that caused a Bus Error. For example, error response on the AHB or AXI interface. - Bit 18 -- 1'b1: Error during data transfer by Tx DMA -- 1'b0: No Error during data transfer by Tx DMA - Bit 17 -- 1'b1: Error during descriptor access -- 1'b0: Error during data buffer access - Bit 16 -- 1'b1: Error during read transfer -- 1'b0: Error during write transfer This field is valid only when the FBE bit is set. This field does not generate an interrupt. */
    vuint32_t REB:3;                   /* Rx DMA Error Bits This field indicates the type of error that caused a Bus Error. For example, error response on the AHB or AXI interface. - Bit 21 -- 1'b1: Error during data transfer by Rx DMA -- 1'b0: No Error during data transfer by Rx DMA - Bit 20 -- 1'b1: Error during descriptor access -- 1'b0: Error during data buffer access - Bit 19 -- 1'b1: Error during read transfer -- 1'b0: Error during write transfer This field is valid only when the FBE bit is set. This field does not generate an interrupt. */
    vuint32_t _unused_22:10;           /* Reserved. */
  } B;
} GMAC_DMA_CH3_STATUS_tag;

typedef union GMAC_DMA_CH3_MISS_FRAME_CNT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t MFC:11;                  /* Dropped Packet Counters This counter indicates the number of packet counters that are dropped by the DMA either because of bus error or because of programing RPF field in DMA_CH${i}_Rx_Control register. The counter gets cleared when this register is read. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t _unused_11:4;            /* Reserved. */
    vuint32_t MFCO:1;                  /* Overflow status of the MFC Counter When this bit is set then the MFC counter does not get incremented further. The bit gets cleared when this register is read. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t _unused_16:16;           /* Reserved. */
  } B;
} GMAC_DMA_CH3_MISS_FRAME_CNT_tag;

typedef union GMAC_DMA_CH3_RXP_ACCEPT_CNT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXPAC:31;                /* Rx Parser Accept Counter This 31-bit counter is implemented whenever a Rx Parser Accept a packet due to AF =1. The counter is cleared when the register is read. */
    vuint32_t RXPACOF:1;               /* Rx Parser Accept Counter Overflow Bit When set, this bit indicates that the RXPAC Counter field crossed the maximum limit. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
  } B;
} GMAC_DMA_CH3_RXP_ACCEPT_CNT_tag;

typedef union GMAC_DMA_CH3_RX_ERI_CNT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ECNT:12;                 /* ERI Counter When ERIC bit of DMA_CH(#i)_RX_Control register is set, this counter increments for burst transfer completed by the Rx DMA from the start of packet transfer. This counter will get reset at the start of new packet. */
    vuint32_t _unused_12:20;
  } B;
} GMAC_DMA_CH3_RX_ERI_CNT_tag;

typedef union GMAC_DMA_CH4_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:14;            /* Reserved. */
    vuint32_t _unused_14:2;            /* Reserved. */
    vuint32_t PBLX8:1;                 /* 8xPBL mode When this bit is set, the PBL value programmed in Bits[21:16] in DMA_CH0_Tx_Control and Bits[21:16] in DMA_CH0_Rx_Control is multiplied by eight times. Therefore, the DMA transfers the data in 8, 16, 32, 64, 128, and 256 beats depending on the PBL value. */
    vuint32_t _unused_17:1;            /* Reserved. */
    vuint32_t DSL:3;                   /* Descriptor Skip Length This bit specifies the Word, Dword, or Lword number (depending on the 32-bit, 64-bit, or 128-bit bus) to skip between two unchained descriptors. The address skipping starts from the end of the current descriptor to the start of the next descriptor. When the DSL value is equal to zero, the DMA takes the descriptor table as contiguous. */
    vuint32_t _unused_21:3;            /* Reserved. */
    vuint32_t SPH:1;                   /* Split Headers When this bit is set, the DMA splits the header and payload in the Receive path. The DMA writes the header to the Buffer Address1 of RDES0. The DMA writes the payload to the buffer to which the Buffer Address2 is pointing. The software must ensure that the header fits into the Receive buffers. If the header length exceeds the receive buffer size, the DMA does not split the header and payload. This bit is available only if Enable Split Header Structure option is selected. */
    vuint32_t _unused_25:7;            /* Reserved. */
  } B;
} GMAC_DMA_CH4_CONTROL_tag;

typedef union GMAC_DMA_CH4_TX_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ST:1;                    /* Start or Stop Transmission Command When this bit is set, transmission is placed in the Running state. The DMA checks the Transmit list at the current position for a packet to be transmitted. The DMA tries to acquire descriptor from either of the following positions: - The current position in the list This is the base address of the Transmit list set by the DMA_CH0_TxDesc_List_Address register. - The position at which the transmission was previously stopped If the DMA does not own the current descriptor, the transmission enters the Suspended state and the TBU bit of the DMA_CH0_Status register is set. The Start Transmission command is effective only when the transmission is stopped. If the command is issued before setting the DMA_CH0_TxDesc_List_Address register, the DMA behavior is unpredictable. When this bit is reset, the transmission process is placed in the Stopped state after completing the transmission of the current packet. The Next Descriptor position in the Transmit list is saved, and it becomes the current position when the transmission is restarted. To change the list address, you need to program DMA_CH0_TxDesc_List_Address register with a new value when this bit is reset. The new value is considered when this bit is set again. The stop transmission command is effective only when the transmission of the current packet is complete or the transmission is in the Suspended state. */
    vuint32_t _unused_1:3;             /* Reserved. */
    vuint32_t OSF:1;                   /* Operate on Second Packet When this bit is set, it instructs the DMA to process the second packet of the Transmit data even before the status for the first packet is obtained. */
    vuint32_t _unused_5:7;             /* Reserved. */
    vuint32_t _unused_12:1;            /* Reserved. */
    vuint32_t _unused_13:2;            /* Reserved. */
    vuint32_t IPBL:1;                  /* Ignore PBL Requirement When this bit is set, the DMA does not check for PBL number of locations in the MTL before initiating a transfer. If space is not available, the MTL may use handshaking to slow the DMA. Note: This bit/mode must not be used when multiple Transmit DMA Channels are enabled as it may block other Transmit and Receive DMA Channels from accessing the Read Data Channel of AXI bus until space is available in Transmit Queue for current transfer. */
    vuint32_t TXPBL:6;                 /* Transmit Programmable Burst Length These bits indicate the maximum number of beats to be transferred in one DMA block data transfer. The DMA always attempts max burst as specified in PBL each time it starts a burst transfer on the application bus. You can program PBL with any of the following values: 1, 2, 4, 8, 16, or 32. Any other value results in undefined behavior. To transfer more than 32 beats, perform the following steps: 1. Set the 8xPBL mode in DMA_CH0_Control register. 2. Set the TxPBL. Note: The maximum value of TxPBL must be less than or equal to half the Tx Queue size (TQS field of MTL_TxQ[n]_Operation_Mode register) in terms of beats. This is required so that the Tx Queue has space to store at least another Tx PBL worth of data while the MTL Tx Queue Controller is transferring data to MAC. For example, in 64-bit data width configurations the total locations in Tx Queue of size 512 bytes is 64, TxPBL and 8xPBL needs to be programmed to less than or equal to 32. */
    vuint32_t _unused_22:1;            /* Reserved. */
    vuint32_t _unused_23:1;            /* Reserved. */
    vuint32_t TQOS:4;                  /* Transmit QOS. This field is used to drive arqos_m_o[3:0] or awqos_m_o[3:0] output signals for all transactions of DMA Tx Channel0. */
    vuint32_t EDSE:1;                  /* Enhanced Descriptor Enable When this bit is set, the corresponding channel uses Enhanced Descriptors that are 32 Bytes for both Normal and Context Descriptors. When reset, the corresponding channel uses the descriptors that are 16 Bytes. */
    vuint32_t _unused_29:3;            /* Reserved. */
  } B;
} GMAC_DMA_CH4_TX_CONTROL_tag;

typedef union GMAC_DMA_CH4_RX_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t SR:1;                    /* Start or Stop Receive When this bit is set, the DMA tries to acquire the descriptor from the Receive list and processes the incoming packets. The DMA tries to acquire descriptor from either of the following positions: - The current position in the list This is the address set by the DMA_CH0_RxDesc_List_Address register. - The position at which the Rx process was previously stopped If the DMA does not own the current descriptor, the reception is suspended and the RBU bit of the DMA_CH0_Status register is set. The Start Receive command is effective only when the reception is stopped. If the command is issued before setting the DMA_CH0_RxDesc_List_Address register, the DMA behavior is unpredictable. When this bit is reset, the Rx DMA operation is stopped after the transfer of the current packet. The next descriptor position in the Receive list is saved, and it becomes the current position after the Rx process is restarted. The Stop Receive command is effective only when the Rx process is in the Running (waiting for Rx packet) or Suspended state. */
    vuint32_t RBSZ_X_0:3;              /* Receive Buffer size Low RBSZ[13:0] is split into two fields RBSZ_13_y and RBSZ_x_0. The RBSZ_x_0 is the lower field whose width is based on data bus width of the configuration. This field is of width 2, 3, or 4 bits for 32-bit, 64-bit, or 128-bit data bus width respectively. This field is read-only (RO). */
    vuint32_t RBSZ_13_Y:11;            /* Receive Buffer size High RBSZ[13:0] is split into two fields higher RBSZ_13_y and lower RBSZ_x_0. The RBSZ[13:0] field indicates the size of the Rx buffers specified in bytes. The maximum buffer size is limited to 16K bytes. The buffer size is applicable to payload buffers when split headers are enabled. Note: The buffer size must be a multiple of 4, 8, or 16 depending on the data bus widths (32-bit, 64-bit, or 128-bit respectively). This is required even if the value of buffer address pointer is not aligned to data bus width. Hence the lower RBSZ_x_0 bits are read-only and the value is considered as all-zero. Thus the RBSZ_13_y indicates the buffer size in terms of locations (with the width same as bus-width). */
    vuint32_t _unused_15:1;            /* Reserved. */
    vuint32_t RXPBL:6;                 /* Receive Programmable Burst Length These bits indicate the maximum number of beats to be transferred in one DMA block data transfer. The DMA always attempts max burst as specified in PBL each time it starts a burst transfer on the application bus. You can program PBL with any of the following values: 1, 2, 4, 8, 16, or 32. Any other value results in undefined behavior. To transfer more than 32 beats, perform the following steps: 1. Set the 8xPBL mode in the DMA_CH0_Control register. 2. Set the RxPBL. Note: The maximum value of RxPBL must be less than or equal to half the Rx Queue size (RQS field of MTL_RxQ[n]_Operation_Mode register) in terms of beats. This is required so that the Rx Queue has space to store at least another Rx PBL worth of data while the Rx DMA is transferring a block of data. For example, in 64-bit data width configurations the total locations in Rx Queue of size 512 bytes is 64, so RxPBL and 8xPBL needs to be programmed to less than or equal to 32. */
    vuint32_t _unused_22:1;            /* Reserved. */
    vuint32_t _unused_23:1;            /* Reserved. */
    vuint32_t RQOS:4;                  /* Rx AXI4 QOS. This field is used to drive arqos_m_o[3:0] or awqos_m_o[3:0] output signals for all transactions of DMA Rx Channel0. */
    vuint32_t _unused_28:3;            /* Reserved. */
    vuint32_t RPF:1;                   /* Rx Packet Flush. When this bit is set to 1, then DWC_ether_qos automatically flushes the packet from the Rx Queues destined to this DMA Rx Channel, when it is stopped. When this bit remains set and the DMA is re-started by the software driver, the packets residing in the Rx Queues that were received when this RxDMA was stopped, get flushed out. The packets that are received by the MAC after the RxDMA is re-started are routed to the RxDMA. The flushing happens on the Read side of the Rx Queue. When this bit is set to 0, the DWC_ether_qos not flush the packet in the Rx Queue destined to this RxDMA Channel when it is STOP state. This may in turn cause head-of-line blocking in the corresponding RxQueue. */
  } B;
} GMAC_DMA_CH4_RX_CONTROL_tag;

typedef union GMAC_DMA_CH4_TXDESC_LIST_ADDRESS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;
    vuint32_t TDESLA:29;               /* Start of Transmit List This field contains the base address of the first descriptor in the Transmit descriptor list. The DMA ignores the LSB bits (1:0, 2:0, or 3:0) for 32-bit, 64-bit, or 128-bit bus width and internally takes these bits as all-zero. Therefore, these LSB bits are read-only (RO). The width of this field depends on the configuration: - 31:2 for 32-bit configuration - 31:3 for 64-bit configuration - 31:4 for 128-bit configuration */
  } B;
} GMAC_DMA_CH4_TXDESC_LIST_ADDRESS_tag;

typedef union GMAC_DMA_CH4_RXDESC_LIST_ADDRESS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;
    vuint32_t RDESLA:29;               /* Start of Receive List This field contains the base address of the first descriptor in the Rx Descriptor list. The DMA ignores the LSB bits (1:0, 2:0, or 3:0) for 32-bit, 64-bit, or 128-bit bus width and internally takes these bits as all-zero. Therefore, these LSB bits are read-only (RO). The width of this field depends on the configuration: - 31:2 for 32-bit configuration - 31:3 for 64-bit configuration - 31:4 for 128-bit configuration */
  } B;
} GMAC_DMA_CH4_RXDESC_LIST_ADDRESS_tag;

typedef union GMAC_DMA_CH4_TXDESC_TAIL_POINTER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;
    vuint32_t TDTP:29;                 /* Transmit Descriptor Tail Pointer This field contains the tail pointer for the Tx descriptor ring. The software writes the tail pointer to add more descriptors to the Tx channel. The hardware tries to transmit all packets referenced by the descriptors between the head and the tail pointer registers. The width of this field depends on the configuration: - 31:2 for 32-bit configuration - 31:3 for 64-bit configuration - 31:4 for 128-bit configuration */
  } B;
} GMAC_DMA_CH4_TXDESC_TAIL_POINTER_tag;

typedef union GMAC_DMA_CH4_RXDESC_TAIL_POINTER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;
    vuint32_t RDTP:29;                 /* Receive Descriptor Tail Pointer This field contains the tail pointer for the Rx descriptor ring. The software writes the tail pointer to add more descriptors to the Rx channel. The hardware tries to write all received packets to the descriptors referenced between the head and the tail pointer registers. The width of this field depends on the configuration: - 31:2 for 32-bit configuration - 31:3 for 64-bit configuration - 31:4 for 128-bit configuration */
  } B;
} GMAC_DMA_CH4_RXDESC_TAIL_POINTER_tag;

typedef union GMAC_DMA_CH4_TXDESC_RING_LENGTH_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TDRL:10;                 /* Transmit Descriptor Ring Length This field sets the maximum number of Tx descriptors in the circular descriptor ring. The maximum number of descriptors is limited to 1K descriptors. NXP recommends a minimum ring descriptor length of 4. For example, You can program any value up to 0x3FF in this field. This field is 10 bits wide, if you program 0x3FF, you can have 1024 descriptors. If you want to have 10 descriptors, program it to a value of 0x9. */
    vuint32_t _unused_10:22;           /* Reserved. */
  } B;
} GMAC_DMA_CH4_TXDESC_RING_LENGTH_tag;

typedef union GMAC_DMA_CH4_RXDESC_RING_LENGTH_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RDRL:10;                 /* Receive Descriptor Ring Length This register sets the maximum number of Rx descriptors in the circular descriptor ring. The maximum number of descriptors is limited to 1K descriptors. For example, You can program any value up to 0x3FF in this field. This field is 10 bits wide, if you program 0x3FF, you can have 1024 descriptors. If you want to have 10 descriptors, program it to a value of 0x9. */
    vuint32_t _unused_10:22;           /* Reserved. */
  } B;
} GMAC_DMA_CH4_RXDESC_RING_LENGTH_tag;

typedef union GMAC_DMA_CH4_INTERRUPT_ENABLE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TIE:1;                   /* Transmit Interrupt Enable When this bit is set along with the NIE bit, the Transmit Interrupt is enabled. When this bit is reset, the Transmit Interrupt is disabled. */
    vuint32_t TXSE:1;                  /* Transmit Stopped Enable When this bit is set along with the AIE bit, the Transmission Stopped interrupt is enabled. When this bit is reset, the Transmission Stopped interrupt is disabled. */
    vuint32_t TBUE:1;                  /* Transmit Buffer Unavailable Enable When this bit is set along with the NIE bit, the Transmit Buffer Unavailable interrupt is enabled. When this bit is reset, the Transmit Buffer Unavailable interrupt is disabled. */
    vuint32_t _unused_3:3;             /* Reserved. */
    vuint32_t RIE:1;                   /* Receive Interrupt Enable When this bit is set along with the NIE bit, the Receive Interrupt is enabled. When this bit is reset, the Receive Interrupt is disabled. */
    vuint32_t RBUE:1;                  /* Receive Buffer Unavailable Enable When this bit is set along with the AIE bit, the Receive Buffer Unavailable interrupt is enabled. When this bit is reset, the Receive Buffer Unavailable interrupt is disabled. */
    vuint32_t RSE:1;                   /* Receive Stopped Enable When this bit is set along with the AIE bit, the Receive Stopped Interrupt is enabled. When this bit is reset, the Receive Stopped interrupt is disabled. */
    vuint32_t RWTE:1;                  /* Receive Watchdog Timeout Enable When this bit is set along with the AIE bit, the Receive Watchdog Timeout interrupt is enabled. When this bit is reset, the Receive Watchdog Timeout interrupt is disabled. */
    vuint32_t ETIE:1;                  /* Early Transmit Interrupt Enable When this bit is set along with the AIE bit, the Early Transmit interrupt is enabled. When this bit is reset, the Early Transmit interrupt is disabled. */
    vuint32_t ERIE:1;                  /* Early Receive Interrupt Enable When this bit is set along with the NIE bit, the Early Receive interrupt is enabled. When this bit is reset, the Early Receive interrupt is disabled. */
    vuint32_t FBEE:1;                  /* Fatal Bus Error Enable When this bit is set along with the AIE bit, the Fatal Bus error interrupt is enabled. When this bit is reset, the Fatal Bus Error error interrupt is disabled. */
    vuint32_t CDEE:1;                  /* Context Descriptor Error Enable When this bit is set along with the AIE bit, the Descriptor error interrupt is enabled. When this bit is reset, the Descriptor error interrupt is disabled. */
    vuint32_t AIE:1;                   /* Abnormal Interrupt Summary Enable When this bit is set, the abnormal interrupt summary is enabled. This bit enables the following interrupts in the DMA_CH0_Status register: - Bit 1: Transmit Process Stopped - Bit 7: Rx Buffer Unavailable - Bit 8: Receive Process Stopped - Bit 9: Receive Watchdog Timeout - Bit 10: Early Transmit Interrupt - Bit 12: Fatal Bus Error - Bit 13: Context Descriptor Error When this bit is reset, the abnormal interrupt summary is disabled. */
    vuint32_t NIE:1;                   /* Normal Interrupt Summary Enable When this bit is set, the normal interrupt summary is enabled. This bit enables the following interrupts in the DMA_CH0_Status register: - Bit 0: Transmit Interrupt - Bit 2: Transmit Buffer Unavailable - Bit 6: Receive Interrupt - Bit 11: Early Receive Interrupt When this bit is reset, the normal interrupt summary is disabled. */
    vuint32_t _unused_16:16;           /* Reserved. */
  } B;
} GMAC_DMA_CH4_INTERRUPT_ENABLE_tag;

typedef union GMAC_DMA_CH4_RX_INTERRUPT_WATCHDOG_TIMER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RWT:8;                   /* Receive Interrupt Watchdog Timer Count This field indicates the number of system clock cycles, multiplied by factor indicated in RWTU field, for which the watchdog timer is set. The watchdog timer is triggered with the programmed value after the Rx DMA completes the transfer of a packet for which the RI bit is not set in the DMA_CH(#i)_Status register, because of the setting of Interrupt Enable bit in the corresponding descriptor RDES3[30]. When the watchdog timer runs out, the RI bit is set and the timer is stopped. The watchdog timer is reset when the RI bit is set high because of automatic setting of RI as per the Interrupt Enable bit RDES3[30] of any received packet. */
    vuint32_t _unused_8:8;             /* Reserved. */
    vuint32_t RWTU:2;                  /* Receive Interrupt Watchdog Timer Count Units This fields indicates the number of system clock cycles corresponding to one unit in RWT field. - 2'b00: 256 - 2'b01: 512 - 2'b10: 1024 - 2'b11: 2048 For example, when RWT=2 and RWTU=1, the watchdog timer is set for 2*512=1024 system clock cycles. */
    vuint32_t _unused_18:14;           /* Reserved. */
  } B;
} GMAC_DMA_CH4_RX_INTERRUPT_WATCHDOG_TIMER_tag;

typedef union GMAC_DMA_CH4_SLOT_FUNCTION_CONTROL_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ESC:1;                   /* Enable Slot Comparison When set, this bit enables the checking of the slot numbers programmed in the Tx descriptor with the current reference given in the RSN field. The DMA fetches the data from the corresponding buffer only when the slot number is - equal to the reference slot number or - ahead of the reference slot number by one slot When reset, this bit disables the checking of the slot numbers. The DMA fetches the data immediately after the descriptor is processed. Note: The UFO (UDP Fragmentation over IPv4)/TSO/USO should not be enabled along with TBS/AVB Slot number check. The UFO/TSO/USO involves multiple packets/segments/fragments transmission for single packet received from application and the slot number check are applicable for fetching of only first segment/fragment. As a result it might be difficult for software to specify slot number for subsequent packets. */
    vuint32_t ASC:1;                   /* Advance Slot Check When set, this bit enables the DMA to fetch the data from the buffer when the slot number (SLOTNUM) programmed in the Tx descriptor is - equal to the reference slot number given in the RSN field or - ahead of the reference slot number by up to two slots This bit is applicable only when the ESC bit is set. */
    vuint32_t _unused_2:2;             /* Reserved. */
    vuint32_t SIV:12;                  /* Slot Interval Value This field controls the period of the slot interval in which the TxDMA fetches the scheduled packets. A value of 0 specifies the slot interval of 1 us while the maximum value 4095 specifies the slot interval of 4096us. The default/reset value is 0x07C which corresponds to slot interval of 125us */
    vuint32_t RSN:4;                   /* Reference Slot Number This field gives the current value of the reference slot number in the DMA. It is used for slot comparison. */
    vuint32_t _unused_20:12;           /* Reserved. */
  } B;
} GMAC_DMA_CH4_SLOT_FUNCTION_CONTROL_STATUS_tag;

typedef union GMAC_DMA_CH4_CURRENT_APP_TXDESC_union_tag {
  vuint32_t R;
  struct {
    vuint32_t CURTDESAPTR:32;          /* Application Transmit Descriptor Address Pointer The DMA updates this pointer during Tx operation. This pointer is cleared on reset. */
  } B;
} GMAC_DMA_CH4_CURRENT_APP_TXDESC_tag;

typedef union GMAC_DMA_CH4_CURRENT_APP_RXDESC_union_tag {
  vuint32_t R;
  struct {
    vuint32_t CURRDESAPTR:32;          /* Application Receive Descriptor Address Pointer The DMA updates this pointer during Rx operation. This pointer is cleared on reset. */
  } B;
} GMAC_DMA_CH4_CURRENT_APP_RXDESC_tag;

typedef union GMAC_DMA_CH4_CURRENT_APP_TXBUFFER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t CURTBUFAPTR:32;          /* Application Transmit Buffer Address Pointer The DMA updates this pointer during Tx operation. This pointer is cleared on reset. */
  } B;
} GMAC_DMA_CH4_CURRENT_APP_TXBUFFER_tag;

typedef union GMAC_DMA_CH4_CURRENT_APP_RXBUFFER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t CURRBUFAPTR:32;          /* Application Receive Buffer Address Pointer The DMA updates this pointer during Rx operation. This pointer is cleared on reset. */
  } B;
} GMAC_DMA_CH4_CURRENT_APP_RXBUFFER_tag;

typedef union GMAC_DMA_CH4_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TI:1;                    /* Transmit Interrupt This bit indicates that the packet transmission is complete. When transmission is complete, Bit 31 of TDES3 is reset in the last descriptor, and the specific packet status information is updated in the descriptor. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t TPS:1;                   /* Transmit Process Stopped This bit is set when the transmission is stopped. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t TBU:1;                   /* Transmit Buffer Unavailable This bit indicates that the application owns the next descriptor in the Transmit list, and the DMA cannot acquire it. Transmission is suspended. The TPS0 field of the DMA_Debug_Status0 register explains the Transmit Process state transitions. To resume processing the Transmit descriptors, the application should do the following: 1. Change the ownership of the descriptor by setting Bit 31 of TDES3. 2. Issue a Transmit Poll Demand command. For ring mode, the application should advance the Transmit Descriptor Tail Pointer register of a channel. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t _unused_3:3;             /* Reserved. */
    vuint32_t RI:1;                    /* Receive Interrupt This bit indicates that the packet reception is complete. When packet reception is complete, Bit 31 of RDES3 is reset in the last descriptor, and the specific packet status information is updated in the descriptor. The reception remains in the Running state. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t RBU:1;                   /* Receive Buffer Unavailable This bit indicates that the application owns the next descriptor in the Receive list, and the DMA cannot acquire it. The Rx process is suspended. To resume processing Rx descriptors, the application should change the ownership of the descriptor and issue a Receive Poll Demand command. If this command is not issued, the Rx process resumes when the next recognized incoming packet is received. In ring mode, the application should advance the Receive Descriptor Tail Pointer register of a channel. This bit is set only when the DMA owns the previous Rx descriptor. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t RPS:1;                   /* Receive Process Stopped This bit is asserted when the Rx process enters the Stopped state. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t RWT:1;                   /* Receive Watchdog Timeout This bit is asserted when a packet with length greater than 2,048 bytes is received. */
    vuint32_t ETI:1;                   /* Early Transmit Interrupt This bit when set indicates that the TxDMA has completed the transfer of packet data to the MTL TXFIFO memory. In configs supporting ERIC: When ETIC=0, this bit is set only after the Tx DMA has transferred a complete packet to MTL. When ETIC=1, this bit is set after completion of (partial) packet data transfer from buffers in the Transmit descriptor in which IOC=1. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t ERI:1;                   /* Early Receive Interrupt This bit when set indicates that the RxDMA has completed the transfer of packet data to the memory. In configs supporting ERIC, When ERIC=0, this bit is set only after the Rx DMA has filled up a complete receive buffer with packet data. When ERIC=1, this bit is set after every burst transfer of data from the Rx DMA to the buffer. The setting of RI bit automatically clears this bit. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t FBE:1;                   /* Fatal Bus Error This bit indicates that a bus error occurred (as described in the EB field). When this bit is set, the corresponding DMA channel engine disables all bus accesses. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t CDE:1;                   /* Context Descriptor Error This bit indicates that the DMA Tx/Rx engine received a descriptor error, which indicates invalid context in the middle of packet flow ( intermediate descriptor) or all one's descriptor in Tx case and on Rx side it indicates DMA has read a descriptor with either of the buffer address as ones which is considered to be invalid. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t AIS:1;                   /* Abnormal Interrupt Summary Abnormal Interrupt Summary bit value is the logical OR of the following when the corresponding interrupt bits are enabled in the DMA_CH0_Interrupt_Enable register: - Bit 1: Transmit Process Stopped - Bit 7: Receive Buffer Unavailable - Bit 8: Receive Process Stopped - Bit 10: Early Transmit Interrupt - Bit 12: Fatal Bus Error - Bit 13: Context Descriptor Error Only unmasked bits affect the Abnormal Interrupt Summary bit. This is a sticky bit. You must clear this bit (by writing 1 to this bit) each time a corresponding bit, which causes AIS to be set, is cleared. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t NIS:1;                   /* Normal Interrupt Summary Normal Interrupt Summary bit value is the logical OR of the following bits when the corresponding interrupt bits are enabled in the DMA_CH0_Interrupt_Enable register: - Bit 0: Transmit Interrupt - Bit 2: Transmit Buffer Unavailable - Bit 6: Receive Interrupt - Bit 11: Early Receive Interrupt Only unmasked bits (interrupts for which interrupt enable is set in DMA_CH0_Interrupt_Enable register) affect the Normal Interrupt Summary bit. This is a sticky bit. You must clear this bit (by writing 1 to this bit) each time a corresponding bit which causes NIS to be set is cleared. Access restriction applies. Self-set to 1 on internal event. Setting 1 clears. Setting 0 has no effect. */
    vuint32_t TEB:3;                   /* Tx DMA Error Bits This field indicates the type of error that caused a Bus Error. For example, error response on the AHB or AXI interface. - Bit 18 -- 1'b1: Error during data transfer by Tx DMA -- 1'b0: No Error during data transfer by Tx DMA - Bit 17 -- 1'b1: Error during descriptor access -- 1'b0: Error during data buffer access - Bit 16 -- 1'b1: Error during read transfer -- 1'b0: Error during write transfer This field is valid only when the FBE bit is set. This field does not generate an interrupt. */
    vuint32_t REB:3;                   /* Rx DMA Error Bits This field indicates the type of error that caused a Bus Error. For example, error response on the AHB or AXI interface. - Bit 21 -- 1'b1: Error during data transfer by Rx DMA -- 1'b0: No Error during data transfer by Rx DMA - Bit 20 -- 1'b1: Error during descriptor access -- 1'b0: Error during data buffer access - Bit 19 -- 1'b1: Error during read transfer -- 1'b0: Error during write transfer This field is valid only when the FBE bit is set. This field does not generate an interrupt. */
    vuint32_t _unused_22:10;           /* Reserved. */
  } B;
} GMAC_DMA_CH4_STATUS_tag;

typedef union GMAC_DMA_CH4_MISS_FRAME_CNT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t MFC:11;                  /* Dropped Packet Counters This counter indicates the number of packet counters that are dropped by the DMA either because of bus error or because of programing RPF field in DMA_CH${i}_Rx_Control register. The counter gets cleared when this register is read. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t _unused_11:4;            /* Reserved. */
    vuint32_t MFCO:1;                  /* Overflow status of the MFC Counter When this bit is set then the MFC counter does not get incremented further. The bit gets cleared when this register is read. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
    vuint32_t _unused_16:16;           /* Reserved. */
  } B;
} GMAC_DMA_CH4_MISS_FRAME_CNT_tag;

typedef union GMAC_DMA_CH4_RXP_ACCEPT_CNT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXPAC:31;                /* Rx Parser Accept Counter This 31-bit counter is implemented whenever a Rx Parser Accept a packet due to AF =1. The counter is cleared when the register is read. */
    vuint32_t RXPACOF:1;               /* Rx Parser Accept Counter Overflow Bit When set, this bit indicates that the RXPAC Counter field crossed the maximum limit. Access restriction applies. Clears on read. Self-set to 1 on internal event. */
  } B;
} GMAC_DMA_CH4_RXP_ACCEPT_CNT_tag;

typedef union GMAC_DMA_CH4_RX_ERI_CNT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ECNT:12;                 /* ERI Counter When ERIC bit of DMA_CH(#i)_RX_Control register is set, this counter increments for burst transfer completed by the Rx DMA from the start of packet transfer. This counter will get reset at the start of new packet. */
    vuint32_t _unused_12:20;
  } B;
} GMAC_DMA_CH4_RX_ERI_CNT_tag;

struct GMAC_tag {
  GMAC_MAC_CONFIGURATION_tag MAC_CONFIGURATION;
  GMAC_MAC_EXT_CONFIGURATION_tag MAC_EXT_CONFIGURATION;
  GMAC_MAC_PACKET_FILTER_tag MAC_PACKET_FILTER;
  GMAC_MAC_WATCHDOG_TIMEOUT_tag MAC_WATCHDOG_TIMEOUT;
  GMAC_MAC_HASH_TABLE_REG0_tag MAC_HASH_TABLE_REG0;
  GMAC_MAC_HASH_TABLE_REG1_tag MAC_HASH_TABLE_REG1;
  GMAC_MAC_HASH_TABLE_REG2_tag MAC_HASH_TABLE_REG2;
  GMAC_MAC_HASH_TABLE_REG3_tag MAC_HASH_TABLE_REG3;
  GMAC_MAC_HASH_TABLE_REG4_tag MAC_HASH_TABLE_REG4;
  GMAC_MAC_HASH_TABLE_REG5_tag MAC_HASH_TABLE_REG5;
  GMAC_MAC_HASH_TABLE_REG6_tag MAC_HASH_TABLE_REG6;
  GMAC_MAC_HASH_TABLE_REG7_tag MAC_HASH_TABLE_REG7;
  uint8_t GMAC_reserved0[32];
  GMAC_MAC_VLAN_TAG_CTRL_tag MAC_VLAN_TAG_CTRL;
  GMAC_MAC_VLAN_TAG_DATA_tag MAC_VLAN_TAG_DATA;
  GMAC_MAC_VLAN_HASH_TABLE_tag MAC_VLAN_HASH_TABLE;
  uint8_t GMAC_reserved1[4];
  GMAC_MAC_VLAN_INCL_tag MAC_VLAN_INCL;
  GMAC_MAC_INNER_VLAN_INCL_tag MAC_INNER_VLAN_INCL;
  uint8_t GMAC_reserved2[8];
  GMAC_MAC_Q0_TX_FLOW_CTRL_tag MAC_Q0_TX_FLOW_CTRL;
  GMAC_MAC_Q1_TX_FLOW_CTRL_tag MAC_Q1_TX_FLOW_CTRL;
  GMAC_MAC_Q2_TX_FLOW_CTRL_tag MAC_Q2_TX_FLOW_CTRL;
  GMAC_MAC_Q3_TX_FLOW_CTRL_tag MAC_Q3_TX_FLOW_CTRL;
  GMAC_MAC_Q4_TX_FLOW_CTRL_tag MAC_Q4_TX_FLOW_CTRL;
  uint8_t GMAC_reserved3[12];
  GMAC_MAC_RX_FLOW_CTRL_tag MAC_RX_FLOW_CTRL;
  GMAC_MAC_RXQ_CTRL4_tag MAC_RXQ_CTRL4;
  GMAC_MAC_TXQ_PRTY_MAP0_tag MAC_TXQ_PRTY_MAP0;
  GMAC_MAC_TXQ_PRTY_MAP1_tag MAC_TXQ_PRTY_MAP1;
  GMAC_MAC_RXQ_CTRL0_tag MAC_RXQ_CTRL0;
  GMAC_MAC_RXQ_CTRL1_tag MAC_RXQ_CTRL1;
  GMAC_MAC_RXQ_CTRL2_tag MAC_RXQ_CTRL2;
  GMAC_MAC_RXQ_CTRL3_tag MAC_RXQ_CTRL3;
  GMAC_MAC_INTERRUPT_STATUS_tag MAC_INTERRUPT_STATUS;
  GMAC_MAC_INTERRUPT_ENABLE_tag MAC_INTERRUPT_ENABLE;
  GMAC_MAC_RX_TX_STATUS_tag MAC_RX_TX_STATUS;
  uint8_t GMAC_reserved4[4];
  GMAC_MAC_PMT_CONTROL_STATUS_tag MAC_PMT_CONTROL_STATUS;
  GMAC_MAC_RWK_PACKET_FILTER_tag MAC_RWK_PACKET_FILTER;
  uint8_t GMAC_reserved5[48];
  GMAC_MAC_PHYIF_CONTROL_STATUS_tag MAC_PHYIF_CONTROL_STATUS;
  uint8_t GMAC_reserved6[20];
  GMAC_MAC_VERSION_tag MAC_VERSION;
  GMAC_MAC_DEBUG_tag MAC_DEBUG;
  uint8_t GMAC_reserved7[4];
  GMAC_MAC_HW_FEATURE0_tag MAC_HW_FEATURE0;
  GMAC_MAC_HW_FEATURE1_tag MAC_HW_FEATURE1;
  GMAC_MAC_HW_FEATURE2_tag MAC_HW_FEATURE2;
  GMAC_MAC_HW_FEATURE3_tag MAC_HW_FEATURE3;
  uint8_t GMAC_reserved8[20];
  GMAC_MAC_DPP_FSM_INTERRUPT_STATUS_tag MAC_DPP_FSM_INTERRUPT_STATUS;
  uint8_t GMAC_reserved9[4];
  GMAC_MAC_FSM_CONTROL_tag MAC_FSM_CONTROL;
  GMAC_MAC_FSM_ACT_TIMER_tag MAC_FSM_ACT_TIMER;
  GMAC_SCS_REG1_tag SCS_REG1;
  uint8_t GMAC_reserved10[172];
  GMAC_MAC_MDIO_ADDRESS_tag MAC_MDIO_ADDRESS;
  GMAC_MAC_MDIO_DATA_tag MAC_MDIO_DATA;
  uint8_t GMAC_reserved11[8];
  GMAC_MAC_ARP_ADDRESS_tag MAC_ARP_ADDRESS;
  uint8_t GMAC_reserved12[28];
  GMAC_MAC_CSR_SW_CTRL_tag MAC_CSR_SW_CTRL;
  GMAC_MAC_FPE_CTRL_STS_tag MAC_FPE_CTRL_STS;
  GMAC_MAC_EXT_CFG1_tag MAC_EXT_CFG1;
  uint8_t GMAC_reserved13[4];
  GMAC_MAC_PRESN_TIME_NS_tag MAC_PRESN_TIME_NS;
  GMAC_MAC_PRESN_TIME_UPDT_tag MAC_PRESN_TIME_UPDT;
  uint8_t GMAC_reserved14[184];
  GMAC_MAC_ADDRESS0_HIGH_tag MAC_ADDRESS0_HIGH;
  GMAC_MAC_ADDRESS0_LOW_tag MAC_ADDRESS0_LOW;
  GMAC_MAC_ADDRESS1_HIGH_tag MAC_ADDRESS1_HIGH;
  GMAC_MAC_ADDRESS1_LOW_tag MAC_ADDRESS1_LOW;
  uint8_t GMAC_reserved15[1008];
  GMAC_MMC_CONTROL_tag MMC_CONTROL;
  GMAC_MMC_RX_INTERRUPT_tag MMC_RX_INTERRUPT;
  GMAC_MMC_TX_INTERRUPT_tag MMC_TX_INTERRUPT;
  GMAC_MMC_RX_INTERRUPT_MASK_tag MMC_RX_INTERRUPT_MASK;
  GMAC_MMC_TX_INTERRUPT_MASK_tag MMC_TX_INTERRUPT_MASK;
  GMAC_TX_OCTET_COUNT_GOOD_BAD_tag TX_OCTET_COUNT_GOOD_BAD;
  GMAC_TX_PACKET_COUNT_GOOD_BAD_tag TX_PACKET_COUNT_GOOD_BAD;
  GMAC_TX_BROADCAST_PACKETS_GOOD_tag TX_BROADCAST_PACKETS_GOOD;
  GMAC_TX_MULTICAST_PACKETS_GOOD_tag TX_MULTICAST_PACKETS_GOOD;
  GMAC_TX_64OCTETS_PACKETS_GOOD_BAD_tag TX_64OCTETS_PACKETS_GOOD_BAD;
  GMAC_TX_65TO127OCTETS_PACKETS_GOOD_BAD_tag TX_65TO127OCTETS_PACKETS_GOOD_BAD;
  GMAC_TX_128TO255OCTETS_PACKETS_GOOD_BAD_tag TX_128TO255OCTETS_PACKETS_GOOD_BAD;
  GMAC_TX_256TO511OCTETS_PACKETS_GOOD_BAD_tag TX_256TO511OCTETS_PACKETS_GOOD_BAD;
  GMAC_TX_512TO1023OCTETS_PACKETS_GOOD_BAD_tag TX_512TO1023OCTETS_PACKETS_GOOD_BAD;
  GMAC_TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_tag TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD;
  GMAC_TX_UNICAST_PACKETS_GOOD_BAD_tag TX_UNICAST_PACKETS_GOOD_BAD;
  GMAC_TX_MULTICAST_PACKETS_GOOD_BAD_tag TX_MULTICAST_PACKETS_GOOD_BAD;
  GMAC_TX_BROADCAST_PACKETS_GOOD_BAD_tag TX_BROADCAST_PACKETS_GOOD_BAD;
  GMAC_TX_UNDERFLOW_ERROR_PACKETS_tag TX_UNDERFLOW_ERROR_PACKETS;
  GMAC_TX_SINGLE_COLLISION_GOOD_PACKETS_tag TX_SINGLE_COLLISION_GOOD_PACKETS;
  GMAC_TX_MULTIPLE_COLLISION_GOOD_PACKETS_tag TX_MULTIPLE_COLLISION_GOOD_PACKETS;
  GMAC_TX_DEFERRED_PACKETS_tag TX_DEFERRED_PACKETS;
  GMAC_TX_LATE_COLLISION_PACKETS_tag TX_LATE_COLLISION_PACKETS;
  GMAC_TX_EXCESSIVE_COLLISION_PACKETS_tag TX_EXCESSIVE_COLLISION_PACKETS;
  GMAC_TX_CARRIER_ERROR_PACKETS_tag TX_CARRIER_ERROR_PACKETS;
  GMAC_TX_OCTET_COUNT_GOOD_tag TX_OCTET_COUNT_GOOD;
  GMAC_TX_PACKET_COUNT_GOOD_tag TX_PACKET_COUNT_GOOD;
  GMAC_TX_EXCESSIVE_DEFERRAL_ERROR_tag TX_EXCESSIVE_DEFERRAL_ERROR;
  GMAC_TX_PAUSE_PACKETS_tag TX_PAUSE_PACKETS;
  GMAC_TX_VLAN_PACKETS_GOOD_tag TX_VLAN_PACKETS_GOOD;
  GMAC_TX_OSIZE_PACKETS_GOOD_tag TX_OSIZE_PACKETS_GOOD;
  uint8_t GMAC_reserved16[4];
  GMAC_RX_PACKETS_COUNT_GOOD_BAD_tag RX_PACKETS_COUNT_GOOD_BAD;
  GMAC_RX_OCTET_COUNT_GOOD_BAD_tag RX_OCTET_COUNT_GOOD_BAD;
  GMAC_RX_OCTET_COUNT_GOOD_tag RX_OCTET_COUNT_GOOD;
  GMAC_RX_BROADCAST_PACKETS_GOOD_tag RX_BROADCAST_PACKETS_GOOD;
  GMAC_RX_MULTICAST_PACKETS_GOOD_tag RX_MULTICAST_PACKETS_GOOD;
  GMAC_RX_CRC_ERROR_PACKETS_tag RX_CRC_ERROR_PACKETS;
  GMAC_RX_ALIGNMENT_ERROR_PACKETS_tag RX_ALIGNMENT_ERROR_PACKETS;
  GMAC_RX_RUNT_ERROR_PACKETS_tag RX_RUNT_ERROR_PACKETS;
  GMAC_RX_JABBER_ERROR_PACKETS_tag RX_JABBER_ERROR_PACKETS;
  GMAC_RX_UNDERSIZE_PACKETS_GOOD_tag RX_UNDERSIZE_PACKETS_GOOD;
  GMAC_RX_OVERSIZE_PACKETS_GOOD_tag RX_OVERSIZE_PACKETS_GOOD;
  GMAC_RX_64OCTETS_PACKETS_GOOD_BAD_tag RX_64OCTETS_PACKETS_GOOD_BAD;
  GMAC_RX_65TO127OCTETS_PACKETS_GOOD_BAD_tag RX_65TO127OCTETS_PACKETS_GOOD_BAD;
  GMAC_RX_128TO255OCTETS_PACKETS_GOOD_BAD_tag RX_128TO255OCTETS_PACKETS_GOOD_BAD;
  GMAC_RX_256TO511OCTETS_PACKETS_GOOD_BAD_tag RX_256TO511OCTETS_PACKETS_GOOD_BAD;
  GMAC_RX_512TO1023OCTETS_PACKETS_GOOD_BAD_tag RX_512TO1023OCTETS_PACKETS_GOOD_BAD;
  GMAC_RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_tag RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD;
  GMAC_RX_UNICAST_PACKETS_GOOD_tag RX_UNICAST_PACKETS_GOOD;
  GMAC_RX_LENGTH_ERROR_PACKETS_tag RX_LENGTH_ERROR_PACKETS;
  GMAC_RX_OUT_OF_RANGE_TYPE_PACKETS_tag RX_OUT_OF_RANGE_TYPE_PACKETS;
  GMAC_RX_PAUSE_PACKETS_tag RX_PAUSE_PACKETS;
  GMAC_RX_FIFO_OVERFLOW_PACKETS_tag RX_FIFO_OVERFLOW_PACKETS;
  GMAC_RX_VLAN_PACKETS_GOOD_BAD_tag RX_VLAN_PACKETS_GOOD_BAD;
  GMAC_RX_WATCHDOG_ERROR_PACKETS_tag RX_WATCHDOG_ERROR_PACKETS;
  GMAC_RX_RECEIVE_ERROR_PACKETS_tag RX_RECEIVE_ERROR_PACKETS;
  GMAC_RX_CONTROL_PACKETS_GOOD_tag RX_CONTROL_PACKETS_GOOD;
  uint8_t GMAC_reserved17[184];
  GMAC_MMC_FPE_TX_INTERRUPT_tag MMC_FPE_TX_INTERRUPT;
  GMAC_MMC_FPE_TX_INTERRUPT_MASK_tag MMC_FPE_TX_INTERRUPT_MASK;
  GMAC_MMC_TX_FPE_FRAGMENT_CNTR_tag MMC_TX_FPE_FRAGMENT_CNTR;
  GMAC_MMC_TX_HOLD_REQ_CNTR_tag MMC_TX_HOLD_REQ_CNTR;
  uint8_t GMAC_reserved18[16];
  GMAC_MMC_FPE_RX_INTERRUPT_tag MMC_FPE_RX_INTERRUPT;
  GMAC_MMC_FPE_RX_INTERRUPT_MASK_tag MMC_FPE_RX_INTERRUPT_MASK;
  GMAC_MMC_RX_PACKET_ASSEMBLY_ERR_CNTR_tag MMC_RX_PACKET_ASSEMBLY_ERR_CNTR;
  GMAC_MMC_RX_PACKET_SMD_ERR_CNTR_tag MMC_RX_PACKET_SMD_ERR_CNTR;
  GMAC_MMC_RX_PACKET_ASSEMBLY_OK_CNTR_tag MMC_RX_PACKET_ASSEMBLY_OK_CNTR;
  GMAC_MMC_RX_FPE_FRAGMENT_CNTR_tag MMC_RX_FPE_FRAGMENT_CNTR;
  uint8_t GMAC_reserved19[40];
  GMAC_MAC_L3_L4_CONTROL0_tag MAC_L3_L4_CONTROL0;
  GMAC_MAC_LAYER4_ADDRESS0_tag MAC_LAYER4_ADDRESS0;
  uint8_t GMAC_reserved20[8];
  GMAC_MAC_LAYER3_ADDR0_REG0_tag MAC_LAYER3_ADDR0_REG0;
  GMAC_MAC_LAYER3_ADDR1_REG0_tag MAC_LAYER3_ADDR1_REG0;
  GMAC_MAC_LAYER3_ADDR2_REG0_tag MAC_LAYER3_ADDR2_REG0;
  GMAC_MAC_LAYER3_ADDR3_REG0_tag MAC_LAYER3_ADDR3_REG0;
  uint8_t GMAC_reserved21[16];
  GMAC_MAC_L3_L4_CONTROL1_tag MAC_L3_L4_CONTROL1;
  GMAC_MAC_LAYER4_ADDRESS1_tag MAC_LAYER4_ADDRESS1;
  uint8_t GMAC_reserved22[8];
  GMAC_MAC_LAYER3_ADDR0_REG1_tag MAC_LAYER3_ADDR0_REG1;
  GMAC_MAC_LAYER3_ADDR1_REG1_tag MAC_LAYER3_ADDR1_REG1;
  GMAC_MAC_LAYER3_ADDR2_REG1_tag MAC_LAYER3_ADDR2_REG1;
  GMAC_MAC_LAYER3_ADDR3_REG1_tag MAC_LAYER3_ADDR3_REG1;
  uint8_t GMAC_reserved23[16];
  GMAC_MAC_L3_L4_CONTROL2_tag MAC_L3_L4_CONTROL2;
  GMAC_MAC_LAYER4_ADDRESS2_tag MAC_LAYER4_ADDRESS2;
  uint8_t GMAC_reserved24[8];
  GMAC_MAC_LAYER3_ADDR0_REG2_tag MAC_LAYER3_ADDR0_REG2;
  GMAC_MAC_LAYER3_ADDR1_REG2_tag MAC_LAYER3_ADDR1_REG2;
  GMAC_MAC_LAYER3_ADDR2_REG2_tag MAC_LAYER3_ADDR2_REG2;
  GMAC_MAC_LAYER3_ADDR3_REG2_tag MAC_LAYER3_ADDR3_REG2;
  uint8_t GMAC_reserved25[16];
  GMAC_MAC_L3_L4_CONTROL3_tag MAC_L3_L4_CONTROL3;
  GMAC_MAC_LAYER4_ADDRESS3_tag MAC_LAYER4_ADDRESS3;
  uint8_t GMAC_reserved26[8];
  GMAC_MAC_LAYER3_ADDR0_REG3_tag MAC_LAYER3_ADDR0_REG3;
  GMAC_MAC_LAYER3_ADDR1_REG3_tag MAC_LAYER3_ADDR1_REG3;
  GMAC_MAC_LAYER3_ADDR2_REG3_tag MAC_LAYER3_ADDR2_REG3;
  GMAC_MAC_LAYER3_ADDR3_REG3_tag MAC_LAYER3_ADDR3_REG3;
  uint8_t GMAC_reserved27[16];
  GMAC_MAC_L3_L4_CONTROL4_tag MAC_L3_L4_CONTROL4;
  GMAC_MAC_LAYER4_ADDRESS4_tag MAC_LAYER4_ADDRESS4;
  uint8_t GMAC_reserved28[8];
  GMAC_MAC_LAYER3_ADDR0_REG4_tag MAC_LAYER3_ADDR0_REG4;
  GMAC_MAC_LAYER3_ADDR1_REG4_tag MAC_LAYER3_ADDR1_REG4;
  GMAC_MAC_LAYER3_ADDR2_REG4_tag MAC_LAYER3_ADDR2_REG4;
  GMAC_MAC_LAYER3_ADDR3_REG4_tag MAC_LAYER3_ADDR3_REG4;
  uint8_t GMAC_reserved29[16];
  GMAC_MAC_L3_L4_CONTROL5_tag MAC_L3_L4_CONTROL5;
  GMAC_MAC_LAYER4_ADDRESS5_tag MAC_LAYER4_ADDRESS5;
  uint8_t GMAC_reserved30[8];
  GMAC_MAC_LAYER3_ADDR0_REG5_tag MAC_LAYER3_ADDR0_REG5;
  GMAC_MAC_LAYER3_ADDR1_REG5_tag MAC_LAYER3_ADDR1_REG5;
  GMAC_MAC_LAYER3_ADDR2_REG5_tag MAC_LAYER3_ADDR2_REG5;
  GMAC_MAC_LAYER3_ADDR3_REG5_tag MAC_LAYER3_ADDR3_REG5;
  uint8_t GMAC_reserved31[16];
  GMAC_MAC_L3_L4_CONTROL6_tag MAC_L3_L4_CONTROL6;
  GMAC_MAC_LAYER4_ADDRESS6_tag MAC_LAYER4_ADDRESS6;
  uint8_t GMAC_reserved32[8];
  GMAC_MAC_LAYER3_ADDR0_REG6_tag MAC_LAYER3_ADDR0_REG6;
  GMAC_MAC_LAYER3_ADDR1_REG6_tag MAC_LAYER3_ADDR1_REG6;
  GMAC_MAC_LAYER3_ADDR2_REG6_tag MAC_LAYER3_ADDR2_REG6;
  GMAC_MAC_LAYER3_ADDR3_REG6_tag MAC_LAYER3_ADDR3_REG6;
  uint8_t GMAC_reserved33[16];
  GMAC_MAC_L3_L4_CONTROL7_tag MAC_L3_L4_CONTROL7;
  GMAC_MAC_LAYER4_ADDRESS7_tag MAC_LAYER4_ADDRESS7;
  uint8_t GMAC_reserved34[8];
  GMAC_MAC_LAYER3_ADDR0_REG7_tag MAC_LAYER3_ADDR0_REG7;
  GMAC_MAC_LAYER3_ADDR1_REG7_tag MAC_LAYER3_ADDR1_REG7;
  GMAC_MAC_LAYER3_ADDR2_REG7_tag MAC_LAYER3_ADDR2_REG7;
  GMAC_MAC_LAYER3_ADDR3_REG7_tag MAC_LAYER3_ADDR3_REG7;
  uint8_t GMAC_reserved35[144];
  GMAC_MAC_TIMESTAMP_CONTROL_tag MAC_TIMESTAMP_CONTROL;
  GMAC_MAC_SUB_SECOND_INCREMENT_tag MAC_SUB_SECOND_INCREMENT;
  GMAC_MAC_SYSTEM_TIME_SECONDS_tag MAC_SYSTEM_TIME_SECONDS;
  GMAC_MAC_SYSTEM_TIME_NANOSECONDS_tag MAC_SYSTEM_TIME_NANOSECONDS;
  GMAC_MAC_SYSTEM_TIME_SECONDS_UPDATE_tag MAC_SYSTEM_TIME_SECONDS_UPDATE;
  GMAC_MAC_SYSTEM_TIME_NANOSECONDS_UPDATE_tag MAC_SYSTEM_TIME_NANOSECONDS_UPDATE;
  GMAC_MAC_TIMESTAMP_ADDEND_tag MAC_TIMESTAMP_ADDEND;
  GMAC_MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS_tag MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS;
  GMAC_MAC_TIMESTAMP_STATUS_tag MAC_TIMESTAMP_STATUS;
  uint8_t GMAC_reserved36[12];
  GMAC_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS_tag MAC_TX_TIMESTAMP_STATUS_NANOSECONDS;
  GMAC_MAC_TX_TIMESTAMP_STATUS_SECONDS_tag MAC_TX_TIMESTAMP_STATUS_SECONDS;
  uint8_t GMAC_reserved37[8];
  GMAC_MAC_AUXILIARY_CONTROL_tag MAC_AUXILIARY_CONTROL;
  uint8_t GMAC_reserved38[4];
  GMAC_MAC_AUXILIARY_TIMESTAMP_NANOSECONDS_tag MAC_AUXILIARY_TIMESTAMP_NANOSECONDS;
  GMAC_MAC_AUXILIARY_TIMESTAMP_SECONDS_tag MAC_AUXILIARY_TIMESTAMP_SECONDS;
  GMAC_MAC_TIMESTAMP_INGRESS_ASYM_CORR_tag MAC_TIMESTAMP_INGRESS_ASYM_CORR;
  GMAC_MAC_TIMESTAMP_EGRESS_ASYM_CORR_tag MAC_TIMESTAMP_EGRESS_ASYM_CORR;
  GMAC_MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND_tag MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND;
  GMAC_MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND_tag MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND;
  GMAC_MAC_TIMESTAMP_INGRESS_CORR_SUBNANOSEC_tag MAC_TIMESTAMP_INGRESS_CORR_SUBNANOSEC;
  GMAC_MAC_TIMESTAMP_EGRESS_CORR_SUBNANOSEC_tag MAC_TIMESTAMP_EGRESS_CORR_SUBNANOSEC;
  GMAC_MAC_TIMESTAMP_INGRESS_LATENCY_tag MAC_TIMESTAMP_INGRESS_LATENCY;
  GMAC_MAC_TIMESTAMP_EGRESS_LATENCY_tag MAC_TIMESTAMP_EGRESS_LATENCY;
  GMAC_MAC_PPS_CONTROL_tag MAC_PPS_CONTROL;
  uint8_t GMAC_reserved39[12];
  GMAC_MAC_PPS0_TARGET_TIME_SECONDS_tag MAC_PPS0_TARGET_TIME_SECONDS;
  GMAC_MAC_PPS0_TARGET_TIME_NANOSECONDS_tag MAC_PPS0_TARGET_TIME_NANOSECONDS;
  GMAC_MAC_PPS0_INTERVAL_tag MAC_PPS0_INTERVAL;
  GMAC_MAC_PPS0_WIDTH_tag MAC_PPS0_WIDTH;
  GMAC_MAC_PPS1_TARGET_TIME_SECONDS_tag MAC_PPS1_TARGET_TIME_SECONDS;
  GMAC_MAC_PPS1_TARGET_TIME_NANOSECONDS_tag MAC_PPS1_TARGET_TIME_NANOSECONDS;
  GMAC_MAC_PPS1_INTERVAL_tag MAC_PPS1_INTERVAL;
  GMAC_MAC_PPS1_WIDTH_tag MAC_PPS1_WIDTH;
  GMAC_MAC_PPS2_TARGET_TIME_SECONDS_tag MAC_PPS2_TARGET_TIME_SECONDS;
  GMAC_MAC_PPS2_TARGET_TIME_NANOSECONDS_tag MAC_PPS2_TARGET_TIME_NANOSECONDS;
  GMAC_MAC_PPS2_INTERVAL_tag MAC_PPS2_INTERVAL;
  GMAC_MAC_PPS2_WIDTH_tag MAC_PPS2_WIDTH;
  GMAC_MAC_PPS3_TARGET_TIME_SECONDS_tag MAC_PPS3_TARGET_TIME_SECONDS;
  GMAC_MAC_PPS3_TARGET_TIME_NANOSECONDS_tag MAC_PPS3_TARGET_TIME_NANOSECONDS;
  GMAC_MAC_PPS3_INTERVAL_tag MAC_PPS3_INTERVAL;
  GMAC_MAC_PPS3_WIDTH_tag MAC_PPS3_WIDTH;
  GMAC_MAC_PTO_CONTROL_tag MAC_PTO_CONTROL;
  GMAC_MAC_SOURCE_PORT_IDENTITY0_tag MAC_SOURCE_PORT_IDENTITY0;
  GMAC_MAC_SOURCE_PORT_IDENTITY1_tag MAC_SOURCE_PORT_IDENTITY1;
  GMAC_MAC_SOURCE_PORT_IDENTITY2_tag MAC_SOURCE_PORT_IDENTITY2;
  GMAC_MAC_LOG_MESSAGE_INTERVAL_tag MAC_LOG_MESSAGE_INTERVAL;
  uint8_t GMAC_reserved40[44];
  GMAC_MTL_OPERATION_MODE_tag MTL_OPERATION_MODE;
  uint8_t GMAC_reserved41[4];
  GMAC_MTL_DBG_CTL_tag MTL_DBG_CTL;
  GMAC_MTL_DBG_STS_tag MTL_DBG_STS;
  GMAC_MTL_FIFO_DEBUG_DATA_tag MTL_FIFO_DEBUG_DATA;
  uint8_t GMAC_reserved42[12];
  GMAC_MTL_INTERRUPT_STATUS_tag MTL_INTERRUPT_STATUS;
  uint8_t GMAC_reserved43[12];
  GMAC_MTL_RXQ_DMA_MAP0_tag MTL_RXQ_DMA_MAP0;
  GMAC_MTL_RXQ_DMA_MAP1_tag MTL_RXQ_DMA_MAP1;
  uint8_t GMAC_reserved44[8];
  GMAC_MTL_TBS_CTRL_tag MTL_TBS_CTRL;
  uint8_t GMAC_reserved45[12];
  GMAC_MTL_EST_CONTROL_tag MTL_EST_CONTROL;
  uint8_t GMAC_reserved46[4];
  GMAC_MTL_EST_STATUS_tag MTL_EST_STATUS;
  uint8_t GMAC_reserved47[4];
  GMAC_MTL_EST_SCH_ERROR_tag MTL_EST_SCH_ERROR;
  GMAC_MTL_EST_FRM_SIZE_ERROR_tag MTL_EST_FRM_SIZE_ERROR;
  GMAC_MTL_EST_FRM_SIZE_CAPTURE_tag MTL_EST_FRM_SIZE_CAPTURE;
  uint8_t GMAC_reserved48[4];
  GMAC_MTL_EST_INTR_ENABLE_tag MTL_EST_INTR_ENABLE;
  uint8_t GMAC_reserved49[12];
  GMAC_MTL_EST_GCL_CONTROL_tag MTL_EST_GCL_CONTROL;
  GMAC_MTL_EST_GCL_DATA_tag MTL_EST_GCL_DATA;
  uint8_t GMAC_reserved50[8];
  GMAC_MTL_FPE_CTRL_STS_tag MTL_FPE_CTRL_STS;
  GMAC_MTL_FPE_ADVANCE_tag MTL_FPE_ADVANCE;
  uint8_t GMAC_reserved51[8];
  GMAC_MTL_RXP_CONTROL_STATUS_tag MTL_RXP_CONTROL_STATUS;
  GMAC_MTL_RXP_INTERRUPT_CONTROL_STATUS_tag MTL_RXP_INTERRUPT_CONTROL_STATUS;
  GMAC_MTL_RXP_DROP_CNT_tag MTL_RXP_DROP_CNT;
  GMAC_MTL_RXP_ERROR_CNT_tag MTL_RXP_ERROR_CNT;
  GMAC_MTL_RXP_INDIRECT_ACC_CONTROL_STATUS_tag MTL_RXP_INDIRECT_ACC_CONTROL_STATUS;
  GMAC_MTL_RXP_INDIRECT_ACC_DATA_tag MTL_RXP_INDIRECT_ACC_DATA;
  uint8_t GMAC_reserved52[8];
  GMAC_MTL_ECC_CONTROL_tag MTL_ECC_CONTROL;
  GMAC_MTL_SAFETY_INTERRUPT_STATUS_tag MTL_SAFETY_INTERRUPT_STATUS;
  GMAC_MTL_ECC_INTERRUPT_ENABLE_tag MTL_ECC_INTERRUPT_ENABLE;
  GMAC_MTL_ECC_INTERRUPT_STATUS_tag MTL_ECC_INTERRUPT_STATUS;
  GMAC_MTL_ECC_ERR_STS_RCTL_tag MTL_ECC_ERR_STS_RCTL;
  GMAC_MTL_ECC_ERR_ADDR_STATUS_tag MTL_ECC_ERR_ADDR_STATUS;
  GMAC_MTL_ECC_ERR_CNTR_STATUS_tag MTL_ECC_ERR_CNTR_STATUS;
  uint8_t GMAC_reserved53[4];
  GMAC_MTL_DPP_CONTROL_tag MTL_DPP_CONTROL;
  uint8_t GMAC_reserved54[28];
  GMAC_MTL_TXQ0_OPERATION_MODE_tag MTL_TXQ0_OPERATION_MODE;
  GMAC_MTL_TXQ0_UNDERFLOW_tag MTL_TXQ0_UNDERFLOW;
  GMAC_MTL_TXQ0_DEBUG_tag MTL_TXQ0_DEBUG;
  uint8_t GMAC_reserved55[8];
  GMAC_MTL_TXQ0_ETS_STATUS_tag MTL_TXQ0_ETS_STATUS;
  GMAC_MTL_TXQ0_QUANTUM_WEIGHT_tag MTL_TXQ0_QUANTUM_WEIGHT;
  uint8_t GMAC_reserved56[16];
  GMAC_MTL_Q0_INTERRUPT_CONTROL_STATUS_tag MTL_Q0_INTERRUPT_CONTROL_STATUS;
  GMAC_MTL_RXQ0_OPERATION_MODE_tag MTL_RXQ0_OPERATION_MODE;
  GMAC_MTL_RXQ0_MISSED_PACKET_OVERFLOW_CNT_tag MTL_RXQ0_MISSED_PACKET_OVERFLOW_CNT;
  GMAC_MTL_RXQ0_DEBUG_tag MTL_RXQ0_DEBUG;
  GMAC_MTL_RXQ0_CONTROL_tag MTL_RXQ0_CONTROL;
  GMAC_MTL_TXQ1_OPERATION_MODE_tag MTL_TXQ1_OPERATION_MODE;
  GMAC_MTL_TXQ1_UNDERFLOW_tag MTL_TXQ1_UNDERFLOW;
  GMAC_MTL_TXQ1_DEBUG_tag MTL_TXQ1_DEBUG;
  uint8_t GMAC_reserved57[4];
  GMAC_MTL_TXQ1_ETS_CONTROL_tag MTL_TXQ1_ETS_CONTROL;
  GMAC_MTL_TXQ1_ETS_STATUS_tag MTL_TXQ1_ETS_STATUS;
  GMAC_MTL_TXQ1_QUANTUM_WEIGHT_tag MTL_TXQ1_QUANTUM_WEIGHT;
  GMAC_MTL_TXQ1_SENDSLOPECREDIT_tag MTL_TXQ1_SENDSLOPECREDIT;
  GMAC_MTL_TXQ1_HICREDIT_tag MTL_TXQ1_HICREDIT;
  GMAC_MTL_TXQ1_LOCREDIT_tag MTL_TXQ1_LOCREDIT;
  uint8_t GMAC_reserved58[4];
  GMAC_MTL_Q1_INTERRUPT_CONTROL_STATUS_tag MTL_Q1_INTERRUPT_CONTROL_STATUS;
  GMAC_MTL_RXQ1_OPERATION_MODE_tag MTL_RXQ1_OPERATION_MODE;
  GMAC_MTL_RXQ1_MISSED_PACKET_OVERFLOW_CNT_tag MTL_RXQ1_MISSED_PACKET_OVERFLOW_CNT;
  GMAC_MTL_RXQ1_DEBUG_tag MTL_RXQ1_DEBUG;
  GMAC_MTL_RXQ1_CONTROL_tag MTL_RXQ1_CONTROL;
  GMAC_MTL_TXQ2_OPERATION_MODE_tag MTL_TXQ2_OPERATION_MODE;
  GMAC_MTL_TXQ2_UNDERFLOW_tag MTL_TXQ2_UNDERFLOW;
  GMAC_MTL_TXQ2_DEBUG_tag MTL_TXQ2_DEBUG;
  uint8_t GMAC_reserved59[4];
  GMAC_MTL_TXQ2_ETS_CONTROL_tag MTL_TXQ2_ETS_CONTROL;
  GMAC_MTL_TXQ2_ETS_STATUS_tag MTL_TXQ2_ETS_STATUS;
  GMAC_MTL_TXQ2_QUANTUM_WEIGHT_tag MTL_TXQ2_QUANTUM_WEIGHT;
  GMAC_MTL_TXQ2_SENDSLOPECREDIT_tag MTL_TXQ2_SENDSLOPECREDIT;
  GMAC_MTL_TXQ2_HICREDIT_tag MTL_TXQ2_HICREDIT;
  GMAC_MTL_TXQ2_LOCREDIT_tag MTL_TXQ2_LOCREDIT;
  uint8_t GMAC_reserved60[4];
  GMAC_MTL_Q2_INTERRUPT_CONTROL_STATUS_tag MTL_Q2_INTERRUPT_CONTROL_STATUS;
  GMAC_MTL_RXQ2_OPERATION_MODE_tag MTL_RXQ2_OPERATION_MODE;
  GMAC_MTL_RXQ2_MISSED_PACKET_OVERFLOW_CNT_tag MTL_RXQ2_MISSED_PACKET_OVERFLOW_CNT;
  GMAC_MTL_RXQ2_DEBUG_tag MTL_RXQ2_DEBUG;
  GMAC_MTL_RXQ2_CONTROL_tag MTL_RXQ2_CONTROL;
  GMAC_MTL_TXQ3_OPERATION_MODE_tag MTL_TXQ3_OPERATION_MODE;
  GMAC_MTL_TXQ3_UNDERFLOW_tag MTL_TXQ3_UNDERFLOW;
  GMAC_MTL_TXQ3_DEBUG_tag MTL_TXQ3_DEBUG;
  uint8_t GMAC_reserved61[4];
  GMAC_MTL_TXQ3_ETS_CONTROL_tag MTL_TXQ3_ETS_CONTROL;
  GMAC_MTL_TXQ3_ETS_STATUS_tag MTL_TXQ3_ETS_STATUS;
  GMAC_MTL_TXQ3_QUANTUM_WEIGHT_tag MTL_TXQ3_QUANTUM_WEIGHT;
  GMAC_MTL_TXQ3_SENDSLOPECREDIT_tag MTL_TXQ3_SENDSLOPECREDIT;
  GMAC_MTL_TXQ3_HICREDIT_tag MTL_TXQ3_HICREDIT;
  GMAC_MTL_TXQ3_LOCREDIT_tag MTL_TXQ3_LOCREDIT;
  uint8_t GMAC_reserved62[4];
  GMAC_MTL_Q3_INTERRUPT_CONTROL_STATUS_tag MTL_Q3_INTERRUPT_CONTROL_STATUS;
  GMAC_MTL_RXQ3_OPERATION_MODE_tag MTL_RXQ3_OPERATION_MODE;
  GMAC_MTL_RXQ3_MISSED_PACKET_OVERFLOW_CNT_tag MTL_RXQ3_MISSED_PACKET_OVERFLOW_CNT;
  GMAC_MTL_RXQ3_DEBUG_tag MTL_RXQ3_DEBUG;
  GMAC_MTL_RXQ3_CONTROL_tag MTL_RXQ3_CONTROL;
  GMAC_MTL_TXQ4_OPERATION_MODE_tag MTL_TXQ4_OPERATION_MODE;
  GMAC_MTL_TXQ4_UNDERFLOW_tag MTL_TXQ4_UNDERFLOW;
  GMAC_MTL_TXQ4_DEBUG_tag MTL_TXQ4_DEBUG;
  uint8_t GMAC_reserved63[4];
  GMAC_MTL_TXQ4_ETS_CONTROL_tag MTL_TXQ4_ETS_CONTROL;
  GMAC_MTL_TXQ4_ETS_STATUS_tag MTL_TXQ4_ETS_STATUS;
  GMAC_MTL_TXQ4_QUANTUM_WEIGHT_tag MTL_TXQ4_QUANTUM_WEIGHT;
  GMAC_MTL_TXQ4_SENDSLOPECREDIT_tag MTL_TXQ4_SENDSLOPECREDIT;
  GMAC_MTL_TXQ4_HICREDIT_tag MTL_TXQ4_HICREDIT;
  GMAC_MTL_TXQ4_LOCREDIT_tag MTL_TXQ4_LOCREDIT;
  uint8_t GMAC_reserved64[4];
  GMAC_MTL_Q4_INTERRUPT_CONTROL_STATUS_tag MTL_Q4_INTERRUPT_CONTROL_STATUS;
  GMAC_MTL_RXQ4_OPERATION_MODE_tag MTL_RXQ4_OPERATION_MODE;
  GMAC_MTL_RXQ4_MISSED_PACKET_OVERFLOW_CNT_tag MTL_RXQ4_MISSED_PACKET_OVERFLOW_CNT;
  GMAC_MTL_RXQ4_DEBUG_tag MTL_RXQ4_DEBUG;
  GMAC_MTL_RXQ4_CONTROL_tag MTL_RXQ4_CONTROL;
  uint8_t GMAC_reserved65[448];
  GMAC_DMA_MODE_tag DMA_MODE;
  GMAC_DMA_SYSBUS_MODE_tag DMA_SYSBUS_MODE;
  GMAC_DMA_INTERRUPT_STATUS_tag DMA_INTERRUPT_STATUS;
  GMAC_DMA_DEBUG_STATUS0_tag DMA_DEBUG_STATUS0;
  GMAC_DMA_DEBUG_STATUS1_tag DMA_DEBUG_STATUS1;
  uint8_t GMAC_reserved66[12];
  GMAC_AXI4_TX_AR_ACE_CONTROL_tag AXI4_TX_AR_ACE_CONTROL;
  GMAC_AXI4_RX_AW_ACE_CONTROL_tag AXI4_RX_AW_ACE_CONTROL;
  GMAC_AXI4_TXRX_AWAR_ACE_CONTROL_tag AXI4_TXRX_AWAR_ACE_CONTROL;
  uint8_t GMAC_reserved67[20];
  GMAC_AXI_LPI_ENTRY_INTERVAL_tag AXI_LPI_ENTRY_INTERVAL;
  uint8_t GMAC_reserved68[12];
  GMAC_DMA_TBS_CTRL_tag DMA_TBS_CTRL;
  uint8_t GMAC_reserved69[44];
  GMAC_DMA_SAFETY_INTERRUPT_STATUS_tag DMA_SAFETY_INTERRUPT_STATUS;
  uint8_t GMAC_reserved70[124];
  GMAC_DMA_CH0_CONTROL_tag DMA_CH0_CONTROL;
  GMAC_DMA_CH0_TX_CONTROL_tag DMA_CH0_TX_CONTROL;
  GMAC_DMA_CH0_RX_CONTROL_tag DMA_CH0_RX_CONTROL;
  uint8_t GMAC_reserved71[8];
  GMAC_DMA_CH0_TXDESC_LIST_ADDRESS_tag DMA_CH0_TXDESC_LIST_ADDRESS;
  uint8_t GMAC_reserved72[4];
  GMAC_DMA_CH0_RXDESC_LIST_ADDRESS_tag DMA_CH0_RXDESC_LIST_ADDRESS;
  GMAC_DMA_CH0_TXDESC_TAIL_POINTER_tag DMA_CH0_TXDESC_TAIL_POINTER;
  uint8_t GMAC_reserved73[4];
  GMAC_DMA_CH0_RXDESC_TAIL_POINTER_tag DMA_CH0_RXDESC_TAIL_POINTER;
  GMAC_DMA_CH0_TXDESC_RING_LENGTH_tag DMA_CH0_TXDESC_RING_LENGTH;
  GMAC_DMA_CH0_RXDESC_RING_LENGTH_tag DMA_CH0_RXDESC_RING_LENGTH;
  GMAC_DMA_CH0_INTERRUPT_ENABLE_tag DMA_CH0_INTERRUPT_ENABLE;
  GMAC_DMA_CH0_RX_INTERRUPT_WATCHDOG_TIMER_tag DMA_CH0_RX_INTERRUPT_WATCHDOG_TIMER;
  GMAC_DMA_CH0_SLOT_FUNCTION_CONTROL_STATUS_tag DMA_CH0_SLOT_FUNCTION_CONTROL_STATUS;
  uint8_t GMAC_reserved74[4];
  GMAC_DMA_CH0_CURRENT_APP_TXDESC_tag DMA_CH0_CURRENT_APP_TXDESC;
  uint8_t GMAC_reserved75[4];
  GMAC_DMA_CH0_CURRENT_APP_RXDESC_tag DMA_CH0_CURRENT_APP_RXDESC;
  uint8_t GMAC_reserved76[4];
  GMAC_DMA_CH0_CURRENT_APP_TXBUFFER_tag DMA_CH0_CURRENT_APP_TXBUFFER;
  uint8_t GMAC_reserved77[4];
  GMAC_DMA_CH0_CURRENT_APP_RXBUFFER_tag DMA_CH0_CURRENT_APP_RXBUFFER;
  GMAC_DMA_CH0_STATUS_tag DMA_CH0_STATUS;
  GMAC_DMA_CH0_MISS_FRAME_CNT_tag DMA_CH0_MISS_FRAME_CNT;
  GMAC_DMA_CH0_RXP_ACCEPT_CNT_tag DMA_CH0_RXP_ACCEPT_CNT;
  GMAC_DMA_CH0_RX_ERI_CNT_tag DMA_CH0_RX_ERI_CNT;
  uint8_t GMAC_reserved78[16];
  GMAC_DMA_CH1_CONTROL_tag DMA_CH1_CONTROL;
  GMAC_DMA_CH1_TX_CONTROL_tag DMA_CH1_TX_CONTROL;
  GMAC_DMA_CH1_RX_CONTROL_tag DMA_CH1_RX_CONTROL;
  uint8_t GMAC_reserved79[8];
  GMAC_DMA_CH1_TXDESC_LIST_ADDRESS_tag DMA_CH1_TXDESC_LIST_ADDRESS;
  uint8_t GMAC_reserved80[4];
  GMAC_DMA_CH1_RXDESC_LIST_ADDRESS_tag DMA_CH1_RXDESC_LIST_ADDRESS;
  GMAC_DMA_CH1_TXDESC_TAIL_POINTER_tag DMA_CH1_TXDESC_TAIL_POINTER;
  uint8_t GMAC_reserved81[4];
  GMAC_DMA_CH1_RXDESC_TAIL_POINTER_tag DMA_CH1_RXDESC_TAIL_POINTER;
  GMAC_DMA_CH1_TXDESC_RING_LENGTH_tag DMA_CH1_TXDESC_RING_LENGTH;
  GMAC_DMA_CH1_RXDESC_RING_LENGTH_tag DMA_CH1_RXDESC_RING_LENGTH;
  GMAC_DMA_CH1_INTERRUPT_ENABLE_tag DMA_CH1_INTERRUPT_ENABLE;
  GMAC_DMA_CH1_RX_INTERRUPT_WATCHDOG_TIMER_tag DMA_CH1_RX_INTERRUPT_WATCHDOG_TIMER;
  GMAC_DMA_CH1_SLOT_FUNCTION_CONTROL_STATUS_tag DMA_CH1_SLOT_FUNCTION_CONTROL_STATUS;
  uint8_t GMAC_reserved82[4];
  GMAC_DMA_CH1_CURRENT_APP_TXDESC_tag DMA_CH1_CURRENT_APP_TXDESC;
  uint8_t GMAC_reserved83[4];
  GMAC_DMA_CH1_CURRENT_APP_RXDESC_tag DMA_CH1_CURRENT_APP_RXDESC;
  uint8_t GMAC_reserved84[4];
  GMAC_DMA_CH1_CURRENT_APP_TXBUFFER_tag DMA_CH1_CURRENT_APP_TXBUFFER;
  uint8_t GMAC_reserved85[4];
  GMAC_DMA_CH1_CURRENT_APP_RXBUFFER_tag DMA_CH1_CURRENT_APP_RXBUFFER;
  GMAC_DMA_CH1_STATUS_tag DMA_CH1_STATUS;
  GMAC_DMA_CH1_MISS_FRAME_CNT_tag DMA_CH1_MISS_FRAME_CNT;
  GMAC_DMA_CH1_RXP_ACCEPT_CNT_tag DMA_CH1_RXP_ACCEPT_CNT;
  GMAC_DMA_CH1_RX_ERI_CNT_tag DMA_CH1_RX_ERI_CNT;
  uint8_t GMAC_reserved86[16];
  GMAC_DMA_CH2_CONTROL_tag DMA_CH2_CONTROL;
  GMAC_DMA_CH2_TX_CONTROL_tag DMA_CH2_TX_CONTROL;
  GMAC_DMA_CH2_RX_CONTROL_tag DMA_CH2_RX_CONTROL;
  uint8_t GMAC_reserved87[8];
  GMAC_DMA_CH2_TXDESC_LIST_ADDRESS_tag DMA_CH2_TXDESC_LIST_ADDRESS;
  uint8_t GMAC_reserved88[4];
  GMAC_DMA_CH2_RXDESC_LIST_ADDRESS_tag DMA_CH2_RXDESC_LIST_ADDRESS;
  GMAC_DMA_CH2_TXDESC_TAIL_POINTER_tag DMA_CH2_TXDESC_TAIL_POINTER;
  uint8_t GMAC_reserved89[4];
  GMAC_DMA_CH2_RXDESC_TAIL_POINTER_tag DMA_CH2_RXDESC_TAIL_POINTER;
  GMAC_DMA_CH2_TXDESC_RING_LENGTH_tag DMA_CH2_TXDESC_RING_LENGTH;
  GMAC_DMA_CH2_RXDESC_RING_LENGTH_tag DMA_CH2_RXDESC_RING_LENGTH;
  GMAC_DMA_CH2_INTERRUPT_ENABLE_tag DMA_CH2_INTERRUPT_ENABLE;
  GMAC_DMA_CH2_RX_INTERRUPT_WATCHDOG_TIMER_tag DMA_CH2_RX_INTERRUPT_WATCHDOG_TIMER;
  GMAC_DMA_CH2_SLOT_FUNCTION_CONTROL_STATUS_tag DMA_CH2_SLOT_FUNCTION_CONTROL_STATUS;
  uint8_t GMAC_reserved90[4];
  GMAC_DMA_CH2_CURRENT_APP_TXDESC_tag DMA_CH2_CURRENT_APP_TXDESC;
  uint8_t GMAC_reserved91[4];
  GMAC_DMA_CH2_CURRENT_APP_RXDESC_tag DMA_CH2_CURRENT_APP_RXDESC;
  uint8_t GMAC_reserved92[4];
  GMAC_DMA_CH2_CURRENT_APP_TXBUFFER_tag DMA_CH2_CURRENT_APP_TXBUFFER;
  uint8_t GMAC_reserved93[4];
  GMAC_DMA_CH2_CURRENT_APP_RXBUFFER_tag DMA_CH2_CURRENT_APP_RXBUFFER;
  GMAC_DMA_CH2_STATUS_tag DMA_CH2_STATUS;
  GMAC_DMA_CH2_MISS_FRAME_CNT_tag DMA_CH2_MISS_FRAME_CNT;
  GMAC_DMA_CH2_RXP_ACCEPT_CNT_tag DMA_CH2_RXP_ACCEPT_CNT;
  GMAC_DMA_CH2_RX_ERI_CNT_tag DMA_CH2_RX_ERI_CNT;
  uint8_t GMAC_reserved94[16];
  GMAC_DMA_CH3_CONTROL_tag DMA_CH3_CONTROL;
  GMAC_DMA_CH3_TX_CONTROL_tag DMA_CH3_TX_CONTROL;
  GMAC_DMA_CH3_RX_CONTROL_tag DMA_CH3_RX_CONTROL;
  uint8_t GMAC_reserved95[8];
  GMAC_DMA_CH3_TXDESC_LIST_ADDRESS_tag DMA_CH3_TXDESC_LIST_ADDRESS;
  uint8_t GMAC_reserved96[4];
  GMAC_DMA_CH3_RXDESC_LIST_ADDRESS_tag DMA_CH3_RXDESC_LIST_ADDRESS;
  GMAC_DMA_CH3_TXDESC_TAIL_POINTER_tag DMA_CH3_TXDESC_TAIL_POINTER;
  uint8_t GMAC_reserved97[4];
  GMAC_DMA_CH3_RXDESC_TAIL_POINTER_tag DMA_CH3_RXDESC_TAIL_POINTER;
  GMAC_DMA_CH3_TXDESC_RING_LENGTH_tag DMA_CH3_TXDESC_RING_LENGTH;
  GMAC_DMA_CH3_RXDESC_RING_LENGTH_tag DMA_CH3_RXDESC_RING_LENGTH;
  GMAC_DMA_CH3_INTERRUPT_ENABLE_tag DMA_CH3_INTERRUPT_ENABLE;
  GMAC_DMA_CH3_RX_INTERRUPT_WATCHDOG_TIMER_tag DMA_CH3_RX_INTERRUPT_WATCHDOG_TIMER;
  GMAC_DMA_CH3_SLOT_FUNCTION_CONTROL_STATUS_tag DMA_CH3_SLOT_FUNCTION_CONTROL_STATUS;
  uint8_t GMAC_reserved98[4];
  GMAC_DMA_CH3_CURRENT_APP_TXDESC_tag DMA_CH3_CURRENT_APP_TXDESC;
  uint8_t GMAC_reserved99[4];
  GMAC_DMA_CH3_CURRENT_APP_RXDESC_tag DMA_CH3_CURRENT_APP_RXDESC;
  uint8_t GMAC_reserved100[4];
  GMAC_DMA_CH3_CURRENT_APP_TXBUFFER_tag DMA_CH3_CURRENT_APP_TXBUFFER;
  uint8_t GMAC_reserved101[4];
  GMAC_DMA_CH3_CURRENT_APP_RXBUFFER_tag DMA_CH3_CURRENT_APP_RXBUFFER;
  GMAC_DMA_CH3_STATUS_tag DMA_CH3_STATUS;
  GMAC_DMA_CH3_MISS_FRAME_CNT_tag DMA_CH3_MISS_FRAME_CNT;
  GMAC_DMA_CH3_RXP_ACCEPT_CNT_tag DMA_CH3_RXP_ACCEPT_CNT;
  GMAC_DMA_CH3_RX_ERI_CNT_tag DMA_CH3_RX_ERI_CNT;
  uint8_t GMAC_reserved102[16];
  GMAC_DMA_CH4_CONTROL_tag DMA_CH4_CONTROL;
  GMAC_DMA_CH4_TX_CONTROL_tag DMA_CH4_TX_CONTROL;
  GMAC_DMA_CH4_RX_CONTROL_tag DMA_CH4_RX_CONTROL;
  uint8_t GMAC_reserved103[8];
  GMAC_DMA_CH4_TXDESC_LIST_ADDRESS_tag DMA_CH4_TXDESC_LIST_ADDRESS;
  uint8_t GMAC_reserved104[4];
  GMAC_DMA_CH4_RXDESC_LIST_ADDRESS_tag DMA_CH4_RXDESC_LIST_ADDRESS;
  GMAC_DMA_CH4_TXDESC_TAIL_POINTER_tag DMA_CH4_TXDESC_TAIL_POINTER;
  uint8_t GMAC_reserved105[4];
  GMAC_DMA_CH4_RXDESC_TAIL_POINTER_tag DMA_CH4_RXDESC_TAIL_POINTER;
  GMAC_DMA_CH4_TXDESC_RING_LENGTH_tag DMA_CH4_TXDESC_RING_LENGTH;
  GMAC_DMA_CH4_RXDESC_RING_LENGTH_tag DMA_CH4_RXDESC_RING_LENGTH;
  GMAC_DMA_CH4_INTERRUPT_ENABLE_tag DMA_CH4_INTERRUPT_ENABLE;
  GMAC_DMA_CH4_RX_INTERRUPT_WATCHDOG_TIMER_tag DMA_CH4_RX_INTERRUPT_WATCHDOG_TIMER;
  GMAC_DMA_CH4_SLOT_FUNCTION_CONTROL_STATUS_tag DMA_CH4_SLOT_FUNCTION_CONTROL_STATUS;
  uint8_t GMAC_reserved106[4];
  GMAC_DMA_CH4_CURRENT_APP_TXDESC_tag DMA_CH4_CURRENT_APP_TXDESC;
  uint8_t GMAC_reserved107[4];
  GMAC_DMA_CH4_CURRENT_APP_RXDESC_tag DMA_CH4_CURRENT_APP_RXDESC;
  uint8_t GMAC_reserved108[4];
  GMAC_DMA_CH4_CURRENT_APP_TXBUFFER_tag DMA_CH4_CURRENT_APP_TXBUFFER;
  uint8_t GMAC_reserved109[4];
  GMAC_DMA_CH4_CURRENT_APP_RXBUFFER_tag DMA_CH4_CURRENT_APP_RXBUFFER;
  GMAC_DMA_CH4_STATUS_tag DMA_CH4_STATUS;
  GMAC_DMA_CH4_MISS_FRAME_CNT_tag DMA_CH4_MISS_FRAME_CNT;
  GMAC_DMA_CH4_RXP_ACCEPT_CNT_tag DMA_CH4_RXP_ACCEPT_CNT;
  GMAC_DMA_CH4_RX_ERI_CNT_tag DMA_CH4_RX_ERI_CNT;
};


/* ============================================================================
   =============================== Module: I2C ================================
   ============================================================================ */

typedef union I2C_IBAD_union_tag {     /* I2C Bus Address Register */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:1;              /* Reserved */
    vuint8_t ADR:7;                    /* Slave address */
  } B;
} I2C_IBAD_tag;

typedef union I2C_IBFD_union_tag {     /* I2C Bus Frequency Divider Register */
  vuint8_t R;
  struct {
    vuint8_t IBC:8;                    /* IBC */
  } B;
} I2C_IBFD_tag;

typedef union I2C_IBCR_union_tag {     /* I2C Bus Control Register */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:1;              /* Reserved */
    vuint8_t DMAEN:1;                  /* DMA enable */
    vuint8_t RSTA:1;                   /* Repeat START */
    vuint8_t NOACK:1;                  /* Data acknowledge disable */
    vuint8_t TXRX:1;                   /* Transmit/receive mode select */
    vuint8_t MSSL:1;                   /* Master/slave mode select */
    vuint8_t IBIE:1;                   /* I2C bus interrupt enable */
    vuint8_t MDIS:1;                   /* Module disable */
  } B;
} I2C_IBCR_tag;

typedef union I2C_IBSR_union_tag {     /* I2C Bus Status Register */
  vuint8_t R;
  struct {
    vuint8_t RXAK:1;                   /* Received acknowledge */
    vuint8_t IBIF:1;                   /* I2C bus interrupt flag */
    vuint8_t SRW:1;                    /* Slave Read/Write */
    vuint8_t _unused_3:1;              /* Reserved */
    vuint8_t IBAL:1;                   /* Arbitration Lost */
    vuint8_t IBB:1;                    /* Bus busy */
    vuint8_t IAAS:1;                   /* Addressed as a slave */
    vuint8_t TCF:1;                    /* Transfer complete */
  } B;
} I2C_IBSR_tag;

typedef union I2C_IBDR_union_tag {     /* I2C Bus Data I/O Register */
  vuint8_t R;
  struct {
    vuint8_t DATA:8;                   /* DATA */
  } B;
} I2C_IBDR_tag;

typedef union I2C_IBIC_union_tag {     /* I2C Bus Interrupt Config Register */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:6;              /* Reserved */
    vuint8_t BYTERXIE:1;               /* Byte receive interrupt enable */
    vuint8_t BIIE:1;                   /* Bus idle interrupt enable */
  } B;
} I2C_IBIC_tag;

typedef union I2C_IBDBG_union_tag {    /* I2C Bus Debug Register */
  vuint8_t R;
  struct {
    vuint8_t IPG_DEBUG_EN:1;           /* Debug enable */
    vuint8_t IPG_DEBUG_HALTED:1;       /* Debug halted */
    vuint8_t BYTE_RX:1;                /* The I2C module programs BYTE_RX=1 when an I2C master/slave receives a new byte. The module generates an interrupt if IBIC[BYTERXIE]=1. */
    vuint8_t GLFLT_EN:1;               /* Glitch filter enable */
    vuint8_t _unused_4:4;              /* Reserved */
  } B;
} I2C_IBDBG_tag;

struct I2C_tag {
  I2C_IBAD_tag IBAD;                   /* I2C Bus Address Register */
  I2C_IBFD_tag IBFD;                   /* I2C Bus Frequency Divider Register */
  I2C_IBCR_tag IBCR;                   /* I2C Bus Control Register */
  I2C_IBSR_tag IBSR;                   /* I2C Bus Status Register */
  I2C_IBDR_tag IBDR;                   /* I2C Bus Data I/O Register */
  I2C_IBIC_tag IBIC;                   /* I2C Bus Interrupt Config Register */
  I2C_IBDBG_tag IBDBG;                 /* I2C Bus Debug Register */
};


/* ============================================================================
   =============================== Module: JDC ================================
   ============================================================================ */

typedef union JDC_MCR_union_tag {      /* Module Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t JOUT_IEN:1;              /* JOUT Interrupt Enable. */
    vuint32_t _unused_1:15;            /* Reserved */
    vuint32_t JIN_IEN:1;               /* JIN Interrupt Enable. */
    vuint32_t _unused_17:15;           /* Reserved */
  } B;
} JDC_MCR_tag;

typedef union JDC_MSR_union_tag {      /* Module Status Register */
  vuint32_t R;
  struct {
    vuint32_t JOUT_INT:1;              /* JOUT Interrupt. */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t JOUT_RDY:1;              /* JOUT Ready (read only). */
    vuint32_t _unused_3:13;            /* Reserved */
    vuint32_t JIN_INT:1;               /* JIN Interrupt. */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t JIN_RDY:1;               /* JIN Ready (read only). */
    vuint32_t _unused_19:13;           /* Reserved */
  } B;
} JDC_MSR_tag;

typedef union JDC_JOUT_IPS_union_tag { /* JTAG Output Data Register */
  vuint32_t R;
  struct {
    vuint32_t DATA:32;                 /* JOUT_IPS data. */
  } B;
} JDC_JOUT_IPS_tag;

typedef union JDC_JIN_IPS_union_tag {  /* JTAG Input Data Register */
  vuint32_t R;
  struct {
    vuint32_t DATA:32;                 /* JIN_IPS data. */
  } B;
} JDC_JIN_IPS_tag;

struct JDC_tag {
  JDC_MCR_tag MCR;                     /* Module Configuration Register */
  JDC_MSR_tag MSR;                     /* Module Status Register */
  JDC_JOUT_IPS_tag JOUT_IPS;           /* JTAG Output Data Register */
  JDC_JIN_IPS_tag JIN_IPS;             /* JTAG Input Data Register */
};


/* ============================================================================
   =============================== Module: LINFLEXD ===========================
   ============================================================================ */

typedef union LINFLEXD_LINCR1_union_tag { /* LIN Control Register 1 */
  vuint32_t R;
  struct {
    vuint32_t INIT:1;
    vuint32_t SLEEP:1;
    vuint32_t RBLM:1;
    vuint32_t SSBL:1;
    vuint32_t MME:1;
    vuint32_t LBKM:1;
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t MBL:4;
    vuint32_t AUTOWU:1;
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t CFD:1;
    vuint32_t CCD:1;
    vuint32_t NLSE:1;
    vuint32_t _unused_17:15;           /* Reserved */
  } B;
} LINFLEXD_LINCR1_tag;

typedef union LINFLEXD_LINIER_union_tag { /* LIN Interrupt Enable Register */
  vuint32_t R;
  struct {
    vuint32_t HRIE:1;
    vuint32_t DTIE:1;
    vuint32_t DRIE:1;
    vuint32_t TOIE:1;
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t WUIE:1;
    vuint32_t LSIE:1;
    vuint32_t BOIE:1;
    vuint32_t FEIE:1;
    vuint32_t _unused_9:2;             /* Reserved */
    vuint32_t HEIE:1;
    vuint32_t CEIE:1;
    vuint32_t BEIE:1;
    vuint32_t OCIE:1;
    vuint32_t SZIE:1;
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} LINFLEXD_LINIER_tag;

typedef union LINFLEXD_LINSR_union_tag { /* LIN Status Register */
  vuint32_t R;
  struct {
    vuint32_t HRF:1;
    vuint32_t DTF:1;
    vuint32_t DRF:1;
    vuint32_t _unused_3:2;             /* Reserved */
    vuint32_t WUF:1;
    vuint32_t RDI:1;
    vuint32_t RXBUSY:1;
    vuint32_t DRBNE:1;
    vuint32_t RMB:1;
    vuint32_t _unused_10:2;            /* Reserved */
    vuint32_t LINS:4;                  /* LIN state */
    vuint32_t RDC:3;
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} LINFLEXD_LINSR_tag;

typedef union LINFLEXD_LINESR_union_tag { /* LIN Error Status Register */
  vuint32_t R;
  struct {
    vuint32_t NF:1;
    vuint32_t _unused_1:6;             /* Reserved */
    vuint32_t BOF:1;
    vuint32_t FEF:1;
    vuint32_t IDPEF:1;
    vuint32_t SDEF:1;
    vuint32_t SFEF:1;
    vuint32_t CEF:1;
    vuint32_t BEF:1;
    vuint32_t OCF:1;
    vuint32_t SZF:1;
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} LINFLEXD_LINESR_tag;

typedef union LINFLEXD_UARTCR_union_tag { /* UART Mode Control Register */
  vuint32_t R;
  struct {
    vuint32_t UART:1;
    vuint32_t WL0:1;
    vuint32_t PCE:1;
    vuint32_t PC0:1;
    vuint32_t TXEN:1;
    vuint32_t RXEN:1;
    vuint32_t PC1:1;
    vuint32_t WL1:1;
    vuint32_t TFBM:1;
    vuint32_t RFBM:1;
    vuint32_t RDFL_RFC:3;
    vuint32_t TDFL_TFC:3;
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t SBUR:2;
    vuint32_t DTU_PCETX:1;             /* Disable Timeout in UART mode */
    vuint32_t NEF:3;
    vuint32_t ROSE:1;
    vuint32_t OSR:4;
    vuint32_t CSP:3;
    vuint32_t MIS:1;
  } B;
} LINFLEXD_UARTCR_tag;

typedef union LINFLEXD_UARTSR_union_tag { /* UART Mode Status Register */
  vuint32_t R;
  struct {
    vuint32_t NF:1;
    vuint32_t DTFTFF:1;
    vuint32_t DRFRFE:1;
    vuint32_t TO:1;
    vuint32_t RFNE:1;
    vuint32_t WUF:1;
    vuint32_t RDI:1;
    vuint32_t BOF:1;
    vuint32_t FEF:1;
    vuint32_t RMB:1;
    vuint32_t PE:4;
    vuint32_t OCF:1;
    vuint32_t SZF:1;
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} LINFLEXD_UARTSR_tag;

typedef union LINFLEXD_LINTCSR_union_tag { /* LIN Time-Out Control Status Register */
  vuint32_t R;
  struct {
    vuint32_t CNT:8;
    vuint32_t TOCE:1;
    vuint32_t IOT:1;
    vuint32_t MODE:1;
    vuint32_t _unused_11:21;           /* Reserved */
  } B;
} LINFLEXD_LINTCSR_tag;

typedef union LINFLEXD_LINOCR_union_tag { /* LIN Output Compare Register */
  vuint32_t R;
  struct {
    vuint32_t OC1:8;
    vuint32_t OC2:8;
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} LINFLEXD_LINOCR_tag;

typedef union LINFLEXD_LINTOCR_union_tag { /* LIN Time-Out Control Register */
  vuint32_t R;
  struct {
    vuint32_t HTO:7;
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t RTO:4;
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} LINFLEXD_LINTOCR_tag;

typedef union LINFLEXD_LINFBRR_union_tag { /* LIN Fractional Baud Rate Register */
  vuint32_t R;
  struct {
    vuint32_t FBR:4;
    vuint32_t _unused_4:28;            /* Reserved */
  } B;
} LINFLEXD_LINFBRR_tag;

typedef union LINFLEXD_LINIBRR_union_tag { /* LIN Integer Baud Rate Register */
  vuint32_t R;
  struct {
    vuint32_t IBR:20;
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} LINFLEXD_LINIBRR_tag;

typedef union LINFLEXD_LINCFR_union_tag { /* LIN Checksum Field Register */
  vuint32_t R;
  struct {
    vuint32_t CF:8;
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} LINFLEXD_LINCFR_tag;

typedef union LINFLEXD_LINCR2_union_tag { /* LIN Control Register 2 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;             /* Reserved */
    vuint32_t HTRQ:1;
    vuint32_t ABRQ:1;
    vuint32_t DTRQ:1;
    vuint32_t DDRQ:1;
    vuint32_t WURQ:1;
    vuint32_t IOPE:1;
    vuint32_t IOBE:1;
    vuint32_t TBDE:1;
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} LINFLEXD_LINCR2_tag;

typedef union LINFLEXD_BIDR_union_tag { /* Buffer Identifier Register */
  vuint32_t R;
  struct {
    vuint32_t ID:6;
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t CCS:1;
    vuint32_t DIR:1;
    vuint32_t DFL:3;
    vuint32_t _unused_13:3;            /* Reserved */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} LINFLEXD_BIDR_tag;

typedef union LINFLEXD_BDRL_union_tag { /* Buffer Data Register Least Significant */
  vuint32_t R;
  struct {
    vuint32_t DATA0:8;
    vuint32_t DATA1:8;
    vuint32_t DATA2:8;
    vuint32_t DATA3:8;
  } B;
} LINFLEXD_BDRL_tag;

typedef union LINFLEXD_BDRM_union_tag { /* Buffer Data Register Most Significant */
  vuint32_t R;
  struct {
    vuint32_t DATA4:8;
    vuint32_t DATA5:8;
    vuint32_t DATA6:8;
    vuint32_t DATA7:8;
  } B;
} LINFLEXD_BDRM_tag;

typedef union LINFLEXD_GCR_union_tag { /* Global Control Register */
  vuint32_t R;
  struct {
    vuint32_t SR:1;
    vuint32_t STOP:1;
    vuint32_t RDLIS:1;
    vuint32_t TDLIS:1;
    vuint32_t RDFBM:1;
    vuint32_t TDFBM:1;
    vuint32_t _unused_6:26;            /* Reserved */
  } B;
} LINFLEXD_GCR_tag;

typedef union LINFLEXD_UARTPTO_union_tag { /* UART Preset Timeout Register */
  vuint32_t R;
  struct {
    vuint32_t PTO:12;
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} LINFLEXD_UARTPTO_tag;

typedef union LINFLEXD_UARTCTO_union_tag { /* UART Current Timeout Register */
  vuint32_t R;
  struct {
    vuint32_t CTO:12;
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} LINFLEXD_UARTCTO_tag;

typedef union LINFLEXD_DMATXE_union_tag { /* DMA Tx Enable Register */
  vuint32_t R;
  struct {
    vuint32_t DTE0:1;                  /* DMA Tx channel enable */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} LINFLEXD_DMATXE_tag;

typedef union LINFLEXD_DMARXE_union_tag { /* DMA Rx Enable Register */
  vuint32_t R;
  struct {
    vuint32_t DRE0:1;
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} LINFLEXD_DMARXE_tag;

struct LINFLEXD_tag {
  LINFLEXD_LINCR1_tag LINCR1;          /* LIN Control Register 1 */
  LINFLEXD_LINIER_tag LINIER;          /* LIN Interrupt Enable Register */
  LINFLEXD_LINSR_tag LINSR;            /* LIN Status Register */
  LINFLEXD_LINESR_tag LINESR;          /* LIN Error Status Register */
  LINFLEXD_UARTCR_tag UARTCR;          /* UART Mode Control Register */
  LINFLEXD_UARTSR_tag UARTSR;          /* UART Mode Status Register */
  LINFLEXD_LINTCSR_tag LINTCSR;        /* LIN Time-Out Control Status Register */
  LINFLEXD_LINOCR_tag LINOCR;          /* LIN Output Compare Register */
  LINFLEXD_LINTOCR_tag LINTOCR;        /* LIN Time-Out Control Register */
  LINFLEXD_LINFBRR_tag LINFBRR;        /* LIN Fractional Baud Rate Register */
  LINFLEXD_LINIBRR_tag LINIBRR;        /* LIN Integer Baud Rate Register */
  LINFLEXD_LINCFR_tag LINCFR;          /* LIN Checksum Field Register */
  LINFLEXD_LINCR2_tag LINCR2;          /* LIN Control Register 2 */
  LINFLEXD_BIDR_tag BIDR;              /* Buffer Identifier Register */
  LINFLEXD_BDRL_tag BDRL;              /* Buffer Data Register Least Significant */
  LINFLEXD_BDRM_tag BDRM;              /* Buffer Data Register Most Significant */
  uint8_t LINFLEXD_reserved0[12];
  LINFLEXD_GCR_tag GCR;                /* Global Control Register */
  LINFLEXD_UARTPTO_tag UARTPTO;        /* UART Preset Timeout Register */
  LINFLEXD_UARTCTO_tag UARTCTO;        /* UART Current Timeout Register */
  LINFLEXD_DMATXE_tag DMATXE;          /* DMA Tx Enable Register */
  LINFLEXD_DMARXE_tag DMARXE;          /* DMA Rx Enable Register */
};


/* ============================================================================
   =============================== Module: MCM ================================
   ============================================================================ */

typedef union MCM_PLREV_union_tag {    /* SoC-defined platform revision */
  vuint16_t R;
  struct {
    vuint16_t PLREV:16;                /* The PLREV[15:0] field is specified by an platform input signal to define a software-visible revision number. */
  } B;
} MCM_PLREV_tag;

typedef union MCM_PCT_union_tag {      /* Processor core type */
  vuint16_t R;
  struct {
    vuint16_t PCT:16;                  /* This MCM design supports the Arm Cortex M7 core. The following value identifies this core complex. */
  } B;
} MCM_PCT_tag;

typedef union MCM_CPCR_union_tag {     /* Core Platform Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:9;
    vuint32_t _unused_9:1;
    vuint32_t _unused_10:1;
    vuint32_t _unused_11:16;
    vuint32_t CM7_AHBSPRI:1;           /* AHB Slave Priority */
    vuint32_t _unused_28:4;
  } B;
} MCM_CPCR_tag;

typedef union MCM_ISCR_union_tag {     /* Interrupt Status and Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:5;
    vuint32_t WABS:1;                  /* Write Abort on Slave */
    vuint32_t WABSO:1;                 /* Write Abort on Slave Overrun */
    vuint32_t _unused_7:1;
    vuint32_t FIOC:1;                  /* FPU Invalid Operation interrupt Status */
    vuint32_t FDZC:1;                  /* FPU Divide-by-Zero Interrupt Status */
    vuint32_t FOFC:1;                  /* FPU Overflow interrupt status */
    vuint32_t FUFC:1;                  /* FPU Underflow Interrupt Status */
    vuint32_t FIXC:1;                  /* FPU Inexact Interrupt Status */
    vuint32_t _unused_13:2;
    vuint32_t FIDC:1;                  /* FPU Input Denormal Interrupt Status */
    vuint32_t _unused_16:5;
    vuint32_t WABE:1;                  /* TCM Write Abort interrupt enable */
    vuint32_t _unused_22:2;
    vuint32_t FIOCE:1;                 /* FPU Invalid Operation Interrupt Enable */
    vuint32_t FDZCE:1;                 /* FPU Divide-by-Zero Interrupt Enable */
    vuint32_t FOFCE:1;                 /* FPU Overflow Interrupt Enable */
    vuint32_t FUFCE:1;                 /* FPU Underflow Interrupt Enable */
    vuint32_t FIXCE:1;                 /* FPU Inexact Interrupt Enable */
    vuint32_t _unused_29:2;
    vuint32_t FIDCE:1;                 /* FPU Input Denormal Interrupt Enable */
  } B;
} MCM_ISCR_tag;

typedef union MCM_LMEM_DESC_union_tag { /* Local Memory Descriptor Register0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t _unused_2:2;
    vuint32_t _unused_4:9;
    vuint32_t MT:3;                    /* Memory Type */
    vuint32_t _unused_16:1;
    vuint32_t DPW:3;                   /* Data Path Width */
    vuint32_t WY:4;                    /* Level 1 Cache Ways */
    vuint32_t LMSZ:4;                  /* Local Memory Size */
    vuint32_t LMSZH:1;                 /* LMEM Size "Hole" */
    vuint32_t _unused_29:2;
    vuint32_t V:1;                     /* Local memory Valid bit. */
  } B;
} MCM_LMEM_DESC_tag;

struct MCM_tag {
  MCM_PLREV_tag PLREV;                 /* SoC-defined platform revision */
  MCM_PCT_tag PCT;                     /* Processor core type */
  uint8_t MCM_reserved0[8];
  MCM_CPCR_tag CPCR;                   /* Core Platform Control Register */
  MCM_ISCR_tag ISCR;                   /* Interrupt Status and Control Register */
  uint8_t MCM_reserved1[1004];
  MCM_LMEM_DESC_tag LMEM_DESC[5];      /* Local Memory Descriptor Register0 */
};


/* ============================================================================
   =============================== Module: MCT ================================
   ============================================================================ */

typedef union MCT_ALGOSEL_union_tag {  /* Algorithm Select register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;             /* Reserved */
    vuint32_t MARCH_C_PLUS_SINGLE_SELECT:1; /* March C+ single */
    vuint32_t _unused_4:9;             /* Reserved */
    vuint32_t BASICCHK_SELECT:1;       /* Algorithm selected */
    vuint32_t _unused_14:18;           /* Reserved */
  } B;
} MCT_ALGOSEL_tag;

typedef union MCT_UDPR_union_tag {     /* User Diagnostic Port Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:15;            /* Reserved */
    vuint32_t UDPR:1;                  /* User-diagnostic port */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} MCT_UDPR_tag;

typedef union MCT_BSTART_union_tag {   /* BIST Start Register */
  vuint32_t R;
  struct {
    vuint32_t BSTART:3;                /* Bist start */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t BSR:1;                   /* BIST status reset */
    vuint32_t _unused_5:2;             /* Reserved */
    vuint32_t CREP:1;                  /* Calculate repair */
    vuint32_t CENS:1;                  /* Continuous enable set */
    vuint32_t CENAC:1;                 /* Continuous enable auto clear */
    vuint32_t STOP:1;                  /* Stop */
    vuint32_t READ_HOLD:1;             /* Read hold */
    vuint32_t _unused_12:3;            /* Reserved */
    vuint32_t BRST:1;                  /* BIST reset */
    vuint32_t _unused_16:7;            /* Reserved */
    vuint32_t KSTATUS:1;               /* Keep status */
    vuint32_t _unused_24:6;            /* Reserved */
    vuint32_t COF:1;                   /* Continue on fail */
    vuint32_t CLKEN:1;                 /* Clock enable */
  } B;
} MCT_BSTART_tag;

typedef union MCT_BISTALL_union_tag {  /* BIST All Register */
  vuint32_t R;
  struct {
    vuint32_t STAT_ALL:2;              /* Top status */
    vuint32_t BF:1;                    /* Bist fail status */
    vuint32_t _unused_3:29;            /* Reserved */
  } B;
} MCT_BISTALL_tag;

typedef union MCT_BISTSEL_union_tag {  /* BIST Select Register */
  vuint32_t R;
  struct {
    vuint32_t BIST_SEL:32;             /* BIST select */
  } B;
} MCT_BISTSEL_tag;

typedef union MCT_BISTSTAT_union_tag { /* BIST Status Register */
  vuint32_t R;
  struct {
    vuint32_t BIST0STAT:4;             /* Status of BIST0 */
    vuint32_t BIST1STAT:4;             /* Status of BIST1 */
    vuint32_t BIST2STAT:4;             /* Status of BIST2 */
    vuint32_t BIST3STAT:4;             /* Status of BIST3 */
    vuint32_t BIST4STAT:4;             /* Status of BIST4 */
    vuint32_t BIST5STAT:4;             /* Status of BIST5 */
    vuint32_t BIST6STAT:4;             /* Status of BIST6 */
    vuint32_t BIST7STAT:4;             /* Status of BIST7 */
  } B;
} MCT_BISTSTAT_tag;

struct MCT_tag {
  uint8_t MCT_reserved0[8];
  MCT_ALGOSEL_tag ALGOSEL;             /* Algorithm Select register */
  uint8_t MCT_reserved1[4];
  MCT_UDPR_tag UDPR;                   /* User Diagnostic Port Register */
  uint8_t MCT_reserved2[72];
  MCT_BSTART_tag BSTART;               /* BIST Start Register */
  uint8_t MCT_reserved3[4];
  MCT_BISTALL_tag BISTALL;             /* BIST All Register */
  uint8_t MCT_reserved4[8];
  MCT_BISTSEL_tag BISTSEL;             /* BIST Select Register */
  uint8_t MCT_reserved5[12];
  MCT_BISTSTAT_tag BISTSTAT;           /* BIST Status Register */
};


/* ============================================================================
   =============================== Module: MC_CGM =============================
   ============================================================================ */

typedef union MC_CGM_PCFS_SDUR_union_tag { /* PCFS Step Duration */
  vuint32_t R;
  struct {
    vuint32_t SDUR:16;                 /* Step duration */
    vuint32_t _unused_16:16;
  } B;
} MC_CGM_PCFS_SDUR_tag;

typedef union MC_CGM_PCFS_DIVC12_union_tag { /* PCFS Divider Change 12 Register */
  vuint32_t R;
  struct {
    vuint32_t RATE:8;                  /* Divider change rate */
    vuint32_t _unused_8:8;
    vuint32_t INIT:16;                 /* Divider change initial value */
  } B;
} MC_CGM_PCFS_DIVC12_tag;

typedef union MC_CGM_PCFS_DIVE12_union_tag { /* PCFS Divider End 12 Register */
  vuint32_t R;
  struct {
    vuint32_t DIVE:20;                 /* Divider end value */
    vuint32_t _unused_20:12;
  } B;
} MC_CGM_PCFS_DIVE12_tag;

typedef union MC_CGM_PCFS_DIVS12_union_tag { /* PCFS Divider Start 12 Register */
  vuint32_t R;
  struct {
    vuint32_t DIVS:20;                 /* Divider start value */
    vuint32_t _unused_20:12;
  } B;
} MC_CGM_PCFS_DIVS12_tag;

typedef union MC_CGM_MUX_0_CSC_union_tag { /* Clock Mux 0 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t RAMPUP:1;                /* PCFS ramp-up */
    vuint32_t RAMPDOWN:1;              /* PCFS ramp-down */
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:6;                /* Clock source selection control, merged from more bitFields with different positions or sizes */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_MUX_0_CSC_tag;

typedef union MC_CGM_MUX_0_CSS_union_tag { /* Clock Mux 0 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t RAMPUP:1;                /* PCFS ramp-up */
    vuint32_t RAMPDOWN:1;              /* PCFS ramp-down */
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:6;               /* Clock source selection status, merged from more bitFields with different positions or sizes */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_MUX_0_CSS_tag;

typedef union MC_CGM_MUX_0_DC_0_union_tag { /* Clock Mux 0 Divider 0 Control Register */
  vuint32_t R;
  struct {
    vuint32_t PHASE:8;                 /* Phase */
    vuint32_t _unused_8:8;
    vuint32_t DIV:8;                   /* Division value */
    vuint32_t _unused_24:7;
    vuint32_t DE:1;
  } B;
} MC_CGM_MUX_0_DC_0_tag;

typedef union MC_CGM_MUX_0_DC_1_union_tag { /* Clock Mux 0 Divider 1 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:8;                   /* Division value */
    vuint32_t _unused_24:7;
    vuint32_t DE:1;
  } B;
} MC_CGM_MUX_0_DC_1_tag;

typedef union MC_CGM_MUX_0_DIV_UPD_STAT_union_tag { /* CGM Mux 0 Divider Update Status Register */
  vuint32_t R;
  struct {
    vuint32_t DIV_STAT:1;
    vuint32_t _unused_1:31;
  } B;
} MC_CGM_MUX_0_DIV_UPD_STAT_tag;

typedef union MC_CGM_MUX_1_CSC_union_tag { /* Clock Mux 1 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CG:1;                    /* Clock gate */
    vuint32_t FCG:1;                   /* Force clock gate */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:6;                /* Clock source selection control */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_MUX_1_CSC_tag;

typedef union MC_CGM_MUX_1_CSS_union_tag { /* Clock Mux 1 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t GRIP:1;                  /* Gating request is in progress. */
    vuint32_t CS:1;                    /* Clock status */
    vuint32_t _unused_18:2;
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:6;               /* Clock source selection status */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_MUX_1_CSS_tag;

typedef union MC_CGM_MUX_1_DC_0_union_tag { /* Clock Mux 1 Divider 0 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:8;                   /* Division value */
    vuint32_t _unused_24:7;
    vuint32_t DE:1;
  } B;
} MC_CGM_MUX_1_DC_0_tag;

typedef union MC_CGM_MUX_1_DIV_UPD_STAT_union_tag { /* CGM Mux 1 Divider Update Status Register */
  vuint32_t R;
  struct {
    vuint32_t DIV_STAT:1;
    vuint32_t _unused_1:31;
  } B;
} MC_CGM_MUX_1_DIV_UPD_STAT_tag;

typedef union MC_CGM_MUX_2_CSC_union_tag { /* Clock Mux 2 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CG:1;                    /* Clock gate */
    vuint32_t FCG:1;                   /* Force clock gate */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:6;                /* Clock source selection control */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_MUX_2_CSC_tag;

typedef union MC_CGM_MUX_2_CSS_union_tag { /* Clock Mux 2 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t GRIP:1;                  /* Gating request is in progress. */
    vuint32_t CS:1;                    /* Clock status */
    vuint32_t _unused_18:2;
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:6;               /* Clock source selection status */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_MUX_2_CSS_tag;

typedef union MC_CGM_MUX_2_DC_0_union_tag { /* Clock Mux 2 Divider 0 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:8;                   /* Division value */
    vuint32_t _unused_24:7;
    vuint32_t DE:1;
  } B;
} MC_CGM_MUX_2_DC_0_tag;

typedef union MC_CGM_MUX_2_DIV_UPD_STAT_union_tag { /* CGM Mux 2 Divider Update Status Register */
  vuint32_t R;
  struct {
    vuint32_t DIV_STAT:1;
    vuint32_t _unused_1:31;
  } B;
} MC_CGM_MUX_2_DIV_UPD_STAT_tag;

typedef union MC_CGM_MUX_3_CSC_union_tag { /* Clock Mux 3 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:5;                /* Clock source selection control */
    vuint32_t _unused_29:3;
  } B;
} MC_CGM_MUX_3_CSC_tag;

typedef union MC_CGM_MUX_3_CSS_union_tag { /* Clock Mux 3 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:5;               /* Clock source selection status */
    vuint32_t _unused_29:3;
  } B;
} MC_CGM_MUX_3_CSS_tag;

typedef union MC_CGM_MUX_3_DC_0_union_tag { /* Clock Mux 3 Divider 0 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:8;                   /* Division value */
    vuint32_t _unused_24:7;
    vuint32_t DE:1;
  } B;
} MC_CGM_MUX_3_DC_0_tag;

typedef union MC_CGM_MUX_3_DIV_UPD_STAT_union_tag { /* CGM Mux 3 Divider Update Status Register */
  vuint32_t R;
  struct {
    vuint32_t DIV_STAT:1;
    vuint32_t _unused_1:31;
  } B;
} MC_CGM_MUX_3_DIV_UPD_STAT_tag;

typedef union MC_CGM_MUX_4_CSC_union_tag { /* Clock Mux 4 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:6;                /* Clock source selection control */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_MUX_4_CSC_tag;

typedef union MC_CGM_MUX_4_CSS_union_tag { /* Clock Mux 4 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:6;               /* Clock source selection status */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_MUX_4_CSS_tag;

typedef union MC_CGM_MUX_4_DC_0_union_tag { /* Clock Mux 4 Divider 0 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:8;                   /* Division value */
    vuint32_t _unused_24:7;
    vuint32_t DE:1;
  } B;
} MC_CGM_MUX_4_DC_0_tag;

typedef union MC_CGM_MUX_4_DIV_UPD_STAT_union_tag { /* CGM Mux 4 Divider Update Status Register */
  vuint32_t R;
  struct {
    vuint32_t DIV_STAT:1;
    vuint32_t _unused_1:31;
  } B;
} MC_CGM_MUX_4_DIV_UPD_STAT_tag;

typedef union MC_CGM_MUX_5_CSC_union_tag { /* Clock Mux 5 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:6;                /* Clock source selection control */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_MUX_5_CSC_tag;

typedef union MC_CGM_MUX_5_CSS_union_tag { /* Clock Mux 5 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:6;               /* Clock source selection status */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_MUX_5_CSS_tag;

typedef union MC_CGM_MUX_5_DC_0_union_tag { /* Clock Mux 5 Divider 0 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:8;                   /* Division value */
    vuint32_t _unused_24:7;
    vuint32_t DE:1;
  } B;
} MC_CGM_MUX_5_DC_0_tag;

typedef union MC_CGM_MUX_5_DIV_UPD_STAT_union_tag { /* CGM Mux 5 Divider Update Status Register */
  vuint32_t R;
  struct {
    vuint32_t DIV_STAT:1;
    vuint32_t _unused_1:31;
  } B;
} MC_CGM_MUX_5_DIV_UPD_STAT_tag;

typedef union MC_CGM_MUX_6_CSC_union_tag { /* Clock Mux 6 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:5;                /* Clock source selection control */
    vuint32_t _unused_29:3;
  } B;
} MC_CGM_MUX_6_CSC_tag;

typedef union MC_CGM_MUX_6_CSS_union_tag { /* Clock Mux 6 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:5;               /* Clock source selection status */
    vuint32_t _unused_29:3;
  } B;
} MC_CGM_MUX_6_CSS_tag;

typedef union MC_CGM_MUX_6_DC_0_union_tag { /* Clock Mux 6 Divider 0 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:8;                   /* Division value */
    vuint32_t _unused_24:7;
    vuint32_t DE:1;
  } B;
} MC_CGM_MUX_6_DC_0_tag;

typedef union MC_CGM_MUX_6_DIV_UPD_STAT_union_tag { /* CGM Mux 6 Divider Update Status Register */
  vuint32_t R;
  struct {
    vuint32_t DIV_STAT:1;
    vuint32_t _unused_1:31;
  } B;
} MC_CGM_MUX_6_DIV_UPD_STAT_tag;

typedef union MC_CGM_MUX_7_CSC_union_tag { /* Clock Mux 7 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:5;                /* Clock source selection control */
    vuint32_t _unused_29:3;
  } B;
} MC_CGM_MUX_7_CSC_tag;

typedef union MC_CGM_MUX_7_CSS_union_tag { /* Clock Mux 7 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:5;               /* Clock source selection status */
    vuint32_t _unused_29:3;
  } B;
} MC_CGM_MUX_7_CSS_tag;

typedef union MC_CGM_MUX_8_CSC_union_tag { /* Clock Mux 8 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:5;                /* Clock source selection control */
    vuint32_t _unused_29:3;
  } B;
} MC_CGM_MUX_8_CSC_tag;

typedef union MC_CGM_MUX_8_CSS_union_tag { /* Clock Mux 8 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:5;               /* Clock source selection status */
    vuint32_t _unused_29:3;
  } B;
} MC_CGM_MUX_8_CSS_tag;

typedef union MC_CGM_MUX_9_CSC_union_tag { /* Clock Mux 9 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:6;                /* Clock source selection control */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_MUX_9_CSC_tag;

typedef union MC_CGM_MUX_9_CSS_union_tag { /* Clock Mux 9 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:6;               /* Clock source selection status */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_MUX_9_CSS_tag;

typedef union MC_CGM_MUX_9_DC_0_union_tag { /* Clock Mux 9 Divider 0 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:8;                   /* Division value */
    vuint32_t _unused_24:7;
    vuint32_t DE:1;
  } B;
} MC_CGM_MUX_9_DC_0_tag;

typedef union MC_CGM_MUX_9_DIV_UPD_STAT_union_tag { /* CGM Mux 9 Divider Update Status Register */
  vuint32_t R;
  struct {
    vuint32_t DIV_STAT:1;
    vuint32_t _unused_1:31;
  } B;
} MC_CGM_MUX_9_DIV_UPD_STAT_tag;

typedef union MC_CGM_MUX_10_CSC_union_tag { /* Clock Mux 10 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:6;                /* Clock source selection control */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_MUX_10_CSC_tag;

typedef union MC_CGM_MUX_10_CSS_union_tag { /* Clock Mux 10 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:6;               /* Clock source selection status */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_MUX_10_CSS_tag;

typedef union MC_CGM_MUX_10_DC_0_union_tag { /* Clock Mux 10 Divider 0 Control Register */
  vuint32_t R;
  struct {
    vuint32_t PHASE:8;                 /* Phase */
    vuint32_t _unused_8:8;
    vuint32_t DIV:8;                   /* Division value */
    vuint32_t _unused_24:7;
    vuint32_t DE:1;
  } B;
} MC_CGM_MUX_10_DC_0_tag;

typedef union MC_CGM_MUX_10_DIV_UPD_STAT_union_tag { /* CGM Mux 10 Divider Update Status Register */
  vuint32_t R;
  struct {
    vuint32_t DIV_STAT:1;
    vuint32_t _unused_1:31;
  } B;
} MC_CGM_MUX_10_DIV_UPD_STAT_tag;

typedef union MC_CGM_MUX_11_CSC_union_tag { /* Clock Mux 11 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:6;                /* Clock source selection control */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_MUX_11_CSC_tag;

typedef union MC_CGM_MUX_11_CSS_union_tag { /* Clock Mux 11 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:6;               /* Clock source selection status */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_MUX_11_CSS_tag;

typedef union MC_CGM_MUX_12_CSC_union_tag { /* Clock Mux 12 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:5;                /* Clock source selection control */
    vuint32_t _unused_29:3;
  } B;
} MC_CGM_MUX_12_CSC_tag;

typedef union MC_CGM_MUX_12_CSS_union_tag { /* Clock Mux 12 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:5;               /* Clock source selection status */
    vuint32_t _unused_29:3;
  } B;
} MC_CGM_MUX_12_CSS_tag;

typedef union MC_CGM_MUX_12_DC_0_union_tag { /* Clock Mux 12 Divider 0 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:8;                   /* Division value */
    vuint32_t _unused_24:7;
    vuint32_t DE:1;
  } B;
} MC_CGM_MUX_12_DC_0_tag;

typedef union MC_CGM_MUX_12_DIV_UPD_STAT_union_tag { /* CGM Mux 12 Divider Update Status Register */
  vuint32_t R;
  struct {
    vuint32_t DIV_STAT:1;
    vuint32_t _unused_1:31;
  } B;
} MC_CGM_MUX_12_DIV_UPD_STAT_tag;

typedef union MC_CGM_MUX_13_CSC_union_tag { /* Clock Mux 13 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:5;                /* Clock source selection control */
    vuint32_t _unused_29:3;
  } B;
} MC_CGM_MUX_13_CSC_tag;

typedef union MC_CGM_MUX_13_CSS_union_tag { /* Clock Mux 13 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:5;               /* Clock source selection status */
    vuint32_t _unused_29:3;
  } B;
} MC_CGM_MUX_13_CSS_tag;

typedef union MC_CGM_MUX_14_CSC_union_tag { /* Clock Mux 14 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:5;                /* Clock source selection control */
    vuint32_t _unused_29:3;
  } B;
} MC_CGM_MUX_14_CSC_tag;

typedef union MC_CGM_MUX_14_CSS_union_tag { /* Clock Mux 14 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:5;               /* Clock source selection status */
    vuint32_t _unused_29:3;
  } B;
} MC_CGM_MUX_14_CSS_tag;

typedef union MC_CGM_MUX_14_DC_0_union_tag { /* Clock Mux 14 Divider 0 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:8;                   /* Division value */
    vuint32_t _unused_24:7;
    vuint32_t DE:1;
  } B;
} MC_CGM_MUX_14_DC_0_tag;

typedef union MC_CGM_MUX_14_DIV_UPD_STAT_union_tag { /* CGM Mux 14 Divider Update Status Register */
  vuint32_t R;
  struct {
    vuint32_t DIV_STAT:1;
    vuint32_t _unused_1:31;
  } B;
} MC_CGM_MUX_14_DIV_UPD_STAT_tag;

typedef union MC_CGM_MUX_15_CSC_union_tag { /* Clock Mux 15 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:6;                /* Clock source selection control */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_MUX_15_CSC_tag;

typedef union MC_CGM_MUX_15_CSS_union_tag { /* Clock Mux 15 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:6;               /* Clock source selection status */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_MUX_15_CSS_tag;

typedef union MC_CGM_MUX_15_DC_0_union_tag { /* Clock Mux 15 Divider 0 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:8;                   /* Division value */
    vuint32_t _unused_24:7;
    vuint32_t DE:1;
  } B;
} MC_CGM_MUX_15_DC_0_tag;

typedef union MC_CGM_MUX_15_DIV_UPD_STAT_union_tag { /* CGM Mux 15 Divider Update Status Register */
  vuint32_t R;
  struct {
    vuint32_t DIV_STAT:1;
    vuint32_t _unused_1:31;
  } B;
} MC_CGM_MUX_15_DIV_UPD_STAT_tag;

typedef union MC_CGM_MUX_16_CSC_union_tag { /* Clock Mux 16 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:5;                /* Clock source selection control */
    vuint32_t _unused_29:3;
  } B;
} MC_CGM_MUX_16_CSC_tag;

typedef union MC_CGM_MUX_16_CSS_union_tag { /* Clock Mux 16 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:5;               /* Clock source selection status */
    vuint32_t _unused_29:3;
  } B;
} MC_CGM_MUX_16_CSS_tag;

struct MC_CGM_tag {
  MC_CGM_PCFS_SDUR_tag PCFS_SDUR;      /* PCFS Step Duration */
  uint8_t MC_CGM_reserved0[132];
  MC_CGM_PCFS_DIVC12_tag PCFS_DIVC12;  /* PCFS Divider Change 12 Register */
  MC_CGM_PCFS_DIVE12_tag PCFS_DIVE12;  /* PCFS Divider End 12 Register */
  MC_CGM_PCFS_DIVS12_tag PCFS_DIVS12;  /* PCFS Divider Start 12 Register */
  uint8_t MC_CGM_reserved1[620];
  MC_CGM_MUX_0_CSC_tag MUX_0_CSC;      /* Clock Mux 0 Select Control Register */
  MC_CGM_MUX_0_CSS_tag MUX_0_CSS;      /* Clock Mux 0 Select Status Register */
  MC_CGM_MUX_0_DC_0_tag MUX_0_DC_0;    /* Clock Mux 0 Divider 0 Control Register */
  MC_CGM_MUX_0_DC_1_tag MUX_0_DC_1;    /* Clock Mux 0 Divider 1 Control Register */
  uint8_t MC_CGM_reserved2[44];
  MC_CGM_MUX_0_DIV_UPD_STAT_tag MUX_0_DIV_UPD_STAT; /* CGM Mux 0 Divider Update Status Register */
  MC_CGM_MUX_1_CSC_tag MUX_1_CSC;      /* Clock Mux 1 Select Control Register */
  MC_CGM_MUX_1_CSS_tag MUX_1_CSS;      /* Clock Mux 1 Select Status Register */
  MC_CGM_MUX_1_DC_0_tag MUX_1_DC_0;    /* Clock Mux 1 Divider 0 Control Register */
  uint8_t MC_CGM_reserved3[48];
  MC_CGM_MUX_1_DIV_UPD_STAT_tag MUX_1_DIV_UPD_STAT; /* CGM Mux 1 Divider Update Status Register */
  MC_CGM_MUX_2_CSC_tag MUX_2_CSC;      /* Clock Mux 2 Select Control Register */
  MC_CGM_MUX_2_CSS_tag MUX_2_CSS;      /* Clock Mux 2 Select Status Register */
  MC_CGM_MUX_2_DC_0_tag MUX_2_DC_0;    /* Clock Mux 2 Divider 0 Control Register */
  uint8_t MC_CGM_reserved4[48];
  MC_CGM_MUX_2_DIV_UPD_STAT_tag MUX_2_DIV_UPD_STAT; /* CGM Mux 2 Divider Update Status Register */
  MC_CGM_MUX_3_CSC_tag MUX_3_CSC;      /* Clock Mux 3 Select Control Register */
  MC_CGM_MUX_3_CSS_tag MUX_3_CSS;      /* Clock Mux 3 Select Status Register */
  MC_CGM_MUX_3_DC_0_tag MUX_3_DC_0;    /* Clock Mux 3 Divider 0 Control Register */
  uint8_t MC_CGM_reserved5[48];
  MC_CGM_MUX_3_DIV_UPD_STAT_tag MUX_3_DIV_UPD_STAT; /* CGM Mux 3 Divider Update Status Register */
  MC_CGM_MUX_4_CSC_tag MUX_4_CSC;      /* Clock Mux 4 Select Control Register */
  MC_CGM_MUX_4_CSS_tag MUX_4_CSS;      /* Clock Mux 4 Select Status Register */
  MC_CGM_MUX_4_DC_0_tag MUX_4_DC_0;    /* Clock Mux 4 Divider 0 Control Register */
  uint8_t MC_CGM_reserved6[48];
  MC_CGM_MUX_4_DIV_UPD_STAT_tag MUX_4_DIV_UPD_STAT; /* CGM Mux 4 Divider Update Status Register */
  MC_CGM_MUX_5_CSC_tag MUX_5_CSC;      /* Clock Mux 5 Select Control Register */
  MC_CGM_MUX_5_CSS_tag MUX_5_CSS;      /* Clock Mux 5 Select Status Register */
  MC_CGM_MUX_5_DC_0_tag MUX_5_DC_0;    /* Clock Mux 5 Divider 0 Control Register */
  uint8_t MC_CGM_reserved7[48];
  MC_CGM_MUX_5_DIV_UPD_STAT_tag MUX_5_DIV_UPD_STAT; /* CGM Mux 5 Divider Update Status Register */
  MC_CGM_MUX_6_CSC_tag MUX_6_CSC;      /* Clock Mux 6 Select Control Register */
  MC_CGM_MUX_6_CSS_tag MUX_6_CSS;      /* Clock Mux 6 Select Status Register */
  MC_CGM_MUX_6_DC_0_tag MUX_6_DC_0;    /* Clock Mux 6 Divider 0 Control Register */
  uint8_t MC_CGM_reserved8[48];
  MC_CGM_MUX_6_DIV_UPD_STAT_tag MUX_6_DIV_UPD_STAT; /* CGM Mux 6 Divider Update Status Register */
  MC_CGM_MUX_7_CSC_tag MUX_7_CSC;      /* Clock Mux 7 Select Control Register */
  MC_CGM_MUX_7_CSS_tag MUX_7_CSS;      /* Clock Mux 7 Select Status Register */
  uint8_t MC_CGM_reserved9[56];
  MC_CGM_MUX_8_CSC_tag MUX_8_CSC;      /* Clock Mux 8 Select Control Register */
  MC_CGM_MUX_8_CSS_tag MUX_8_CSS;      /* Clock Mux 8 Select Status Register */
  uint8_t MC_CGM_reserved10[56];
  MC_CGM_MUX_9_CSC_tag MUX_9_CSC;      /* Clock Mux 9 Select Control Register */
  MC_CGM_MUX_9_CSS_tag MUX_9_CSS;      /* Clock Mux 9 Select Status Register */
  MC_CGM_MUX_9_DC_0_tag MUX_9_DC_0;    /* Clock Mux 9 Divider 0 Control Register */
  uint8_t MC_CGM_reserved11[48];
  MC_CGM_MUX_9_DIV_UPD_STAT_tag MUX_9_DIV_UPD_STAT; /* CGM Mux 9 Divider Update Status Register */
  MC_CGM_MUX_10_CSC_tag MUX_10_CSC;    /* Clock Mux 10 Select Control Register */
  MC_CGM_MUX_10_CSS_tag MUX_10_CSS;    /* Clock Mux 10 Select Status Register */
  MC_CGM_MUX_10_DC_0_tag MUX_10_DC_0;  /* Clock Mux 10 Divider 0 Control Register */
  uint8_t MC_CGM_reserved12[48];
  MC_CGM_MUX_10_DIV_UPD_STAT_tag MUX_10_DIV_UPD_STAT; /* CGM Mux 10 Divider Update Status Register */
  MC_CGM_MUX_11_CSC_tag MUX_11_CSC;    /* Clock Mux 11 Select Control Register */
  MC_CGM_MUX_11_CSS_tag MUX_11_CSS;    /* Clock Mux 11 Select Status Register */
  uint8_t MC_CGM_reserved13[56];
  MC_CGM_MUX_12_CSC_tag MUX_12_CSC;    /* Clock Mux 12 Select Control Register */
  MC_CGM_MUX_12_CSS_tag MUX_12_CSS;    /* Clock Mux 12 Select Status Register */
  MC_CGM_MUX_12_DC_0_tag MUX_12_DC_0;  /* Clock Mux 12 Divider 0 Control Register */
  uint8_t MC_CGM_reserved14[48];
  MC_CGM_MUX_12_DIV_UPD_STAT_tag MUX_12_DIV_UPD_STAT; /* CGM Mux 12 Divider Update Status Register */
  MC_CGM_MUX_13_CSC_tag MUX_13_CSC;    /* Clock Mux 13 Select Control Register */
  MC_CGM_MUX_13_CSS_tag MUX_13_CSS;    /* Clock Mux 13 Select Status Register */
  uint8_t MC_CGM_reserved15[56];
  MC_CGM_MUX_14_CSC_tag MUX_14_CSC;    /* Clock Mux 14 Select Control Register */
  MC_CGM_MUX_14_CSS_tag MUX_14_CSS;    /* Clock Mux 14 Select Status Register */
  MC_CGM_MUX_14_DC_0_tag MUX_14_DC_0;  /* Clock Mux 14 Divider 0 Control Register */
  uint8_t MC_CGM_reserved16[48];
  MC_CGM_MUX_14_DIV_UPD_STAT_tag MUX_14_DIV_UPD_STAT; /* CGM Mux 14 Divider Update Status Register */
  MC_CGM_MUX_15_CSC_tag MUX_15_CSC;    /* Clock Mux 15 Select Control Register */
  MC_CGM_MUX_15_CSS_tag MUX_15_CSS;    /* Clock Mux 15 Select Status Register */
  MC_CGM_MUX_15_DC_0_tag MUX_15_DC_0;  /* Clock Mux 15 Divider 0 Control Register */
  uint8_t MC_CGM_reserved17[48];
  MC_CGM_MUX_15_DIV_UPD_STAT_tag MUX_15_DIV_UPD_STAT; /* CGM Mux 15 Divider Update Status Register */
  MC_CGM_MUX_16_CSC_tag MUX_16_CSC;    /* Clock Mux 16 Select Control Register */
  MC_CGM_MUX_16_CSS_tag MUX_16_CSS;    /* Clock Mux 16 Select Status Register */
};


/* ============================================================================
   =============================== Module: MC_CGM_1 ===========================
   ============================================================================ */

typedef union MC_CGM_1_PCFS_SDUR_union_tag { /* PCFS Step Duration */
  vuint32_t R;
  struct {
    vuint32_t SDUR:16;                 /* Step duration */
    vuint32_t _unused_16:16;
  } B;
} MC_CGM_1_PCFS_SDUR_tag;

typedef union MC_CGM_1_PCFS_DIVC4_union_tag { /* PCFS Divider Change 4 Register */
  vuint32_t R;
  struct {
    vuint32_t RATE:8;                  /* Divider change rate */
    vuint32_t _unused_8:8;
    vuint32_t INIT:16;                 /* Divider change initial value */
  } B;
} MC_CGM_1_PCFS_DIVC4_tag;

typedef union MC_CGM_1_PCFS_DIVE4_union_tag { /* PCFS Divider End 4 Register */
  vuint32_t R;
  struct {
    vuint32_t DIVE:20;                 /* Divider end value */
    vuint32_t _unused_20:12;
  } B;
} MC_CGM_1_PCFS_DIVE4_tag;

typedef union MC_CGM_1_PCFS_DIVS4_union_tag { /* PCFS Divider Start 4 Register */
  vuint32_t R;
  struct {
    vuint32_t DIVS:20;                 /* Divider start value */
    vuint32_t _unused_20:12;
  } B;
} MC_CGM_1_PCFS_DIVS4_tag;

typedef union MC_CGM_1_MUX_0_CSC_union_tag { /* Clock Mux 0 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t RAMPUP:1;                /* PCFS ramp-up */
    vuint32_t RAMPDOWN:1;              /* PCFS ramp-down */
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:4;                /* Clock source selection control */
    vuint32_t _unused_28:4;
  } B;
} MC_CGM_1_MUX_0_CSC_tag;

typedef union MC_CGM_1_MUX_0_CSS_union_tag { /* Clock Mux 0 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t RAMPUP:1;                /* PCFS ramp-up */
    vuint32_t RAMPDOWN:1;              /* PCFS ramp-down */
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:4;               /* Clock source selection status */
    vuint32_t _unused_28:4;
  } B;
} MC_CGM_1_MUX_0_CSS_tag;

struct MC_CGM_1_tag {
  MC_CGM_1_PCFS_SDUR_tag PCFS_SDUR;    /* PCFS Step Duration */
  uint8_t MC_CGM_1_reserved0[36];
  MC_CGM_1_PCFS_DIVC4_tag PCFS_DIVC4;  /* PCFS Divider Change 4 Register */
  MC_CGM_1_PCFS_DIVE4_tag PCFS_DIVE4;  /* PCFS Divider End 4 Register */
  MC_CGM_1_PCFS_DIVS4_tag PCFS_DIVS4;  /* PCFS Divider Start 4 Register */
  uint8_t MC_CGM_1_reserved1[716];
  MC_CGM_1_MUX_0_CSC_tag MUX_0_CSC;    /* Clock Mux 0 Select Control Register */
  MC_CGM_1_MUX_0_CSS_tag MUX_0_CSS;    /* Clock Mux 0 Select Status Register */
};


/* ============================================================================
   =============================== Module: MC_CGM_2 ===========================
   ============================================================================ */

typedef union MC_CGM_2_PCFS_SDUR_union_tag { /* PCFS Step Duration */
  vuint32_t R;
  struct {
    vuint32_t SDUR:16;                 /* Step duration */
    vuint32_t _unused_16:16;
  } B;
} MC_CGM_2_PCFS_SDUR_tag;

typedef union MC_CGM_2_PCFS_DIVC33_union_tag { /* PCFS Divider Change 33 Register */
  vuint32_t R;
  struct {
    vuint32_t RATE:8;                  /* Divider change rate */
    vuint32_t _unused_8:8;
    vuint32_t INIT:16;                 /* Divider change initial value */
  } B;
} MC_CGM_2_PCFS_DIVC33_tag;

typedef union MC_CGM_2_PCFS_DIVE33_union_tag { /* PCFS Divider End 33 Register */
  vuint32_t R;
  struct {
    vuint32_t DIVE:20;                 /* Divider end value */
    vuint32_t _unused_20:12;
  } B;
} MC_CGM_2_PCFS_DIVE33_tag;

typedef union MC_CGM_2_PCFS_DIVS33_union_tag { /* PCFS Divider Start 33 Register */
  vuint32_t R;
  struct {
    vuint32_t DIVS:20;                 /* Divider start value */
    vuint32_t _unused_20:12;
  } B;
} MC_CGM_2_PCFS_DIVS33_tag;

typedef union MC_CGM_2_MUX_0_CSC_union_tag { /* Clock Mux 0 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t RAMPUP:1;                /* PCFS ramp-up */
    vuint32_t RAMPDOWN:1;              /* PCFS ramp-down */
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:6;                /* Clock source selection control */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_2_MUX_0_CSC_tag;

typedef union MC_CGM_2_MUX_0_CSS_union_tag { /* Clock Mux 0 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t RAMPUP:1;                /* PCFS ramp-up */
    vuint32_t RAMPDOWN:1;              /* PCFS ramp-down */
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:6;               /* Clock source selection status */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_2_MUX_0_CSS_tag;

typedef union MC_CGM_2_MUX_0_DC_0_union_tag { /* Clock Mux 0 Divider 0 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:4;                   /* Division value */
    vuint32_t _unused_20:11;
    vuint32_t DE:1;
  } B;
} MC_CGM_2_MUX_0_DC_0_tag;

typedef union MC_CGM_2_MUX_0_DIV_TRIG_CTRL_union_tag { /* CGM Mux 0 Divider Trigger Control Register */
  vuint32_t R;
  struct {
    vuint32_t TCTL:1;                  /* Trigger control */
    vuint32_t _unused_1:30;
    vuint32_t HHEN:1;                  /* Halt handshake enable */
  } B;
} MC_CGM_2_MUX_0_DIV_TRIG_CTRL_tag;

typedef union MC_CGM_2_MUX_0_DIV_TRIG_union_tag { /* CGM Mux 0 Divider Trigger Register */
  vuint32_t R;
  struct {
    vuint32_t TRIGGER:32;
  } B;
} MC_CGM_2_MUX_0_DIV_TRIG_tag;

typedef union MC_CGM_2_MUX_0_DIV_UPD_STAT_union_tag { /* CGM Mux 0 Divider Update Status Register */
  vuint32_t R;
  struct {
    vuint32_t DIV_STAT:1;
    vuint32_t _unused_1:31;
  } B;
} MC_CGM_2_MUX_0_DIV_UPD_STAT_tag;

typedef union MC_CGM_2_MUX_1_CSC_union_tag { /* Clock Mux 1 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:6;                /* Clock source selection control */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_2_MUX_1_CSC_tag;

typedef union MC_CGM_2_MUX_1_CSS_union_tag { /* Clock Mux 1 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:6;               /* Clock source selection status */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_2_MUX_1_CSS_tag;

typedef union MC_CGM_2_MUX_1_DC_0_union_tag { /* Clock Mux 1 Divider 0 Control Register */
  vuint32_t R;
  struct {
    vuint32_t PHASE:8;                 /* Phase */
    vuint32_t _unused_8:8;
    vuint32_t DIV:8;                   /* Division value */
    vuint32_t _unused_24:7;
    vuint32_t DE:1;
  } B;
} MC_CGM_2_MUX_1_DC_0_tag;

typedef union MC_CGM_2_MUX_1_DC_1_union_tag { /* Clock Mux 1 Divider 1 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:2;                   /* Division value */
    vuint32_t _unused_18:13;
    vuint32_t DE:1;
  } B;
} MC_CGM_2_MUX_1_DC_1_tag;

typedef union MC_CGM_2_MUX_1_DIV_TRIG_CTRL_union_tag { /* CGM Mux 1 Divider Trigger Control Register */
  vuint32_t R;
  struct {
    vuint32_t TCTL:1;                  /* Trigger control */
    vuint32_t _unused_1:30;
    vuint32_t HHEN:1;                  /* Halt handshake enable */
  } B;
} MC_CGM_2_MUX_1_DIV_TRIG_CTRL_tag;

typedef union MC_CGM_2_MUX_1_DIV_TRIG_union_tag { /* CGM Mux 1 Divider Trigger Register */
  vuint32_t R;
  struct {
    vuint32_t TRIGGER:32;
  } B;
} MC_CGM_2_MUX_1_DIV_TRIG_tag;

typedef union MC_CGM_2_MUX_1_DIV_UPD_STAT_union_tag { /* CGM Mux 1 Divider Update Status Register */
  vuint32_t R;
  struct {
    vuint32_t DIV_STAT:1;
    vuint32_t _unused_1:31;
  } B;
} MC_CGM_2_MUX_1_DIV_UPD_STAT_tag;

typedef union MC_CGM_2_MUX_2_CSC_union_tag { /* Clock Mux 2 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:6;                /* Clock source selection control */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_2_MUX_2_CSC_tag;

typedef union MC_CGM_2_MUX_2_CSS_union_tag { /* Clock Mux 2 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:6;               /* Clock source selection status */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_2_MUX_2_CSS_tag;

typedef union MC_CGM_2_MUX_2_DC_0_union_tag { /* Clock Mux 2 Divider 0 Control Register */
  vuint32_t R;
  struct {
    vuint32_t PHASE:8;                 /* Phase */
    vuint32_t _unused_8:8;
    vuint32_t DIV:8;                   /* Division value */
    vuint32_t _unused_24:7;
    vuint32_t DE:1;
  } B;
} MC_CGM_2_MUX_2_DC_0_tag;

typedef union MC_CGM_2_MUX_2_DC_1_union_tag { /* Clock Mux 2 Divider 1 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:2;                   /* Division value */
    vuint32_t _unused_18:13;
    vuint32_t DE:1;
  } B;
} MC_CGM_2_MUX_2_DC_1_tag;

typedef union MC_CGM_2_MUX_2_DIV_TRIG_CTRL_union_tag { /* CGM Mux 2 Divider Trigger Control Register */
  vuint32_t R;
  struct {
    vuint32_t TCTL:1;                  /* Trigger control */
    vuint32_t _unused_1:30;
    vuint32_t HHEN:1;                  /* Halt handshake enable */
  } B;
} MC_CGM_2_MUX_2_DIV_TRIG_CTRL_tag;

typedef union MC_CGM_2_MUX_2_DIV_TRIG_union_tag { /* CGM Mux 2 Divider Trigger Register */
  vuint32_t R;
  struct {
    vuint32_t TRIGGER:32;
  } B;
} MC_CGM_2_MUX_2_DIV_TRIG_tag;

typedef union MC_CGM_2_MUX_2_DIV_UPD_STAT_union_tag { /* CGM Mux 2 Divider Update Status Register */
  vuint32_t R;
  struct {
    vuint32_t DIV_STAT:1;
    vuint32_t _unused_1:31;
  } B;
} MC_CGM_2_MUX_2_DIV_UPD_STAT_tag;

typedef union MC_CGM_2_MUX_3_CSC_union_tag { /* Clock Mux 3 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:6;                /* Clock source selection control */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_2_MUX_3_CSC_tag;

typedef union MC_CGM_2_MUX_3_CSS_union_tag { /* Clock Mux 3 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:6;               /* Clock source selection status */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_2_MUX_3_CSS_tag;

typedef union MC_CGM_2_MUX_3_DC_0_union_tag { /* Clock Mux 3 Divider 0 Control Register */
  vuint32_t R;
  struct {
    vuint32_t PHASE:8;                 /* Phase */
    vuint32_t _unused_8:8;
    vuint32_t DIV:8;                   /* Division value */
    vuint32_t _unused_24:7;
    vuint32_t DE:1;
  } B;
} MC_CGM_2_MUX_3_DC_0_tag;

typedef union MC_CGM_2_MUX_3_DC_1_union_tag { /* Clock Mux 3 Divider 1 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:2;                   /* Division value */
    vuint32_t _unused_18:13;
    vuint32_t DE:1;
  } B;
} MC_CGM_2_MUX_3_DC_1_tag;

typedef union MC_CGM_2_MUX_3_DIV_TRIG_CTRL_union_tag { /* CGM Mux 3 Divider Trigger Control Register */
  vuint32_t R;
  struct {
    vuint32_t TCTL:1;                  /* Trigger control */
    vuint32_t _unused_1:30;
    vuint32_t HHEN:1;                  /* Halt handshake enable */
  } B;
} MC_CGM_2_MUX_3_DIV_TRIG_CTRL_tag;

typedef union MC_CGM_2_MUX_3_DIV_TRIG_union_tag { /* CGM Mux 3 Divider Trigger Register */
  vuint32_t R;
  struct {
    vuint32_t TRIGGER:32;
  } B;
} MC_CGM_2_MUX_3_DIV_TRIG_tag;

typedef union MC_CGM_2_MUX_3_DIV_UPD_STAT_union_tag { /* CGM Mux 3 Divider Update Status Register */
  vuint32_t R;
  struct {
    vuint32_t DIV_STAT:1;
    vuint32_t _unused_1:31;
  } B;
} MC_CGM_2_MUX_3_DIV_UPD_STAT_tag;

typedef union MC_CGM_2_MUX_4_CSC_union_tag { /* Clock Mux 4 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:6;                /* Clock source selection control */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_2_MUX_4_CSC_tag;

typedef union MC_CGM_2_MUX_4_CSS_union_tag { /* Clock Mux 4 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:6;               /* Clock source selection status */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_2_MUX_4_CSS_tag;

typedef union MC_CGM_2_MUX_5_CSC_union_tag { /* Clock Mux 5 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:6;                /* Clock source selection control */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_2_MUX_5_CSC_tag;

typedef union MC_CGM_2_MUX_5_CSS_union_tag { /* Clock Mux 5 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:6;               /* Clock source selection status */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_2_MUX_5_CSS_tag;

typedef union MC_CGM_2_MUX_6_CSC_union_tag { /* Clock Mux 6 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:6;                /* Clock source selection control */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_2_MUX_6_CSC_tag;

typedef union MC_CGM_2_MUX_6_CSS_union_tag { /* Clock Mux 6 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:6;               /* Clock source selection status */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_2_MUX_6_CSS_tag;

typedef union MC_CGM_2_MUX_7_CSC_union_tag { /* Clock Mux 7 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:6;                /* Clock source selection control */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_2_MUX_7_CSC_tag;

typedef union MC_CGM_2_MUX_7_CSS_union_tag { /* Clock Mux 7 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:6;               /* Clock source selection status */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_2_MUX_7_CSS_tag;

typedef union MC_CGM_2_MUX_7_DC_0_union_tag { /* Clock Mux 7 Divider 0 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:6;                   /* Division value */
    vuint32_t _unused_22:9;
    vuint32_t DE:1;
  } B;
} MC_CGM_2_MUX_7_DC_0_tag;

typedef union MC_CGM_2_MUX_7_DIV_TRIG_CTRL_union_tag { /* CGM Mux 7 Divider Trigger Control Register */
  vuint32_t R;
  struct {
    vuint32_t TCTL:1;                  /* Trigger control */
    vuint32_t _unused_1:30;
    vuint32_t HHEN:1;                  /* Halt handshake enable */
  } B;
} MC_CGM_2_MUX_7_DIV_TRIG_CTRL_tag;

typedef union MC_CGM_2_MUX_7_DIV_TRIG_union_tag { /* CGM Mux 7 Divider Trigger Register */
  vuint32_t R;
  struct {
    vuint32_t TRIGGER:32;
  } B;
} MC_CGM_2_MUX_7_DIV_TRIG_tag;

typedef union MC_CGM_2_MUX_7_DIV_UPD_STAT_union_tag { /* CGM Mux 7 Divider Update Status Register */
  vuint32_t R;
  struct {
    vuint32_t DIV_STAT:1;
    vuint32_t _unused_1:31;
  } B;
} MC_CGM_2_MUX_7_DIV_UPD_STAT_tag;

typedef union MC_CGM_2_MUX_8_CSC_union_tag { /* Clock Mux 8 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:6;                /* Clock source selection control */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_2_MUX_8_CSC_tag;

typedef union MC_CGM_2_MUX_8_CSS_union_tag { /* Clock Mux 8 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:6;               /* Clock source selection status */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_2_MUX_8_CSS_tag;

typedef union MC_CGM_2_MUX_8_DC_0_union_tag { /* Clock Mux 8 Divider 0 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:6;                   /* Division value */
    vuint32_t _unused_22:9;
    vuint32_t DE:1;
  } B;
} MC_CGM_2_MUX_8_DC_0_tag;

typedef union MC_CGM_2_MUX_8_DIV_TRIG_CTRL_union_tag { /* CGM Mux 8 Divider Trigger Control Register */
  vuint32_t R;
  struct {
    vuint32_t TCTL:1;                  /* Trigger control */
    vuint32_t _unused_1:30;
    vuint32_t HHEN:1;                  /* Halt handshake enable */
  } B;
} MC_CGM_2_MUX_8_DIV_TRIG_CTRL_tag;

typedef union MC_CGM_2_MUX_8_DIV_TRIG_union_tag { /* CGM Mux 8 Divider Trigger Register */
  vuint32_t R;
  struct {
    vuint32_t TRIGGER:32;
  } B;
} MC_CGM_2_MUX_8_DIV_TRIG_tag;

typedef union MC_CGM_2_MUX_8_DIV_UPD_STAT_union_tag { /* CGM Mux 8 Divider Update Status Register */
  vuint32_t R;
  struct {
    vuint32_t DIV_STAT:1;
    vuint32_t _unused_1:31;
  } B;
} MC_CGM_2_MUX_8_DIV_UPD_STAT_tag;

typedef union MC_CGM_2_MUX_9_CSC_union_tag { /* Clock Mux 9 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:6;                /* Clock source selection control */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_2_MUX_9_CSC_tag;

typedef union MC_CGM_2_MUX_9_CSS_union_tag { /* Clock Mux 9 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:6;               /* Clock source selection status */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_2_MUX_9_CSS_tag;

typedef union MC_CGM_2_MUX_9_DC_0_union_tag { /* Clock Mux 9 Divider 0 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:6;                   /* Division value */
    vuint32_t _unused_22:9;
    vuint32_t DE:1;
  } B;
} MC_CGM_2_MUX_9_DC_0_tag;

typedef union MC_CGM_2_MUX_9_DIV_TRIG_CTRL_union_tag { /* CGM Mux 9 Divider Trigger Control Register */
  vuint32_t R;
  struct {
    vuint32_t TCTL:1;                  /* Trigger control */
    vuint32_t _unused_1:30;
    vuint32_t HHEN:1;                  /* Halt handshake enable */
  } B;
} MC_CGM_2_MUX_9_DIV_TRIG_CTRL_tag;

typedef union MC_CGM_2_MUX_9_DIV_TRIG_union_tag { /* CGM Mux 9 Divider Trigger Register */
  vuint32_t R;
  struct {
    vuint32_t TRIGGER:32;
  } B;
} MC_CGM_2_MUX_9_DIV_TRIG_tag;

typedef union MC_CGM_2_MUX_9_DIV_UPD_STAT_union_tag { /* CGM Mux 9 Divider Update Status Register */
  vuint32_t R;
  struct {
    vuint32_t DIV_STAT:1;
    vuint32_t _unused_1:31;
  } B;
} MC_CGM_2_MUX_9_DIV_UPD_STAT_tag;

struct MC_CGM_2_tag {
  MC_CGM_2_PCFS_SDUR_tag PCFS_SDUR;    /* PCFS Step Duration */
  uint8_t MC_CGM_2_reserved0[384];
  MC_CGM_2_PCFS_DIVC33_tag PCFS_DIVC33; /* PCFS Divider Change 33 Register */
  MC_CGM_2_PCFS_DIVE33_tag PCFS_DIVE33; /* PCFS Divider End 33 Register */
  MC_CGM_2_PCFS_DIVS33_tag PCFS_DIVS33; /* PCFS Divider Start 33 Register */
  uint8_t MC_CGM_2_reserved1[368];
  MC_CGM_2_MUX_0_CSC_tag MUX_0_CSC;    /* Clock Mux 0 Select Control Register */
  MC_CGM_2_MUX_0_CSS_tag MUX_0_CSS;    /* Clock Mux 0 Select Status Register */
  MC_CGM_2_MUX_0_DC_0_tag MUX_0_DC_0;  /* Clock Mux 0 Divider 0 Control Register */
  uint8_t MC_CGM_2_reserved2[40];
  MC_CGM_2_MUX_0_DIV_TRIG_CTRL_tag MUX_0_DIV_TRIG_CTRL; /* CGM Mux 0 Divider Trigger Control Register */
  MC_CGM_2_MUX_0_DIV_TRIG_tag MUX_0_DIV_TRIG; /* CGM Mux 0 Divider Trigger Register */
  MC_CGM_2_MUX_0_DIV_UPD_STAT_tag MUX_0_DIV_UPD_STAT; /* CGM Mux 0 Divider Update Status Register */
  MC_CGM_2_MUX_1_CSC_tag MUX_1_CSC;    /* Clock Mux 1 Select Control Register */
  MC_CGM_2_MUX_1_CSS_tag MUX_1_CSS;    /* Clock Mux 1 Select Status Register */
  MC_CGM_2_MUX_1_DC_0_tag MUX_1_DC_0;  /* Clock Mux 1 Divider 0 Control Register */
  MC_CGM_2_MUX_1_DC_1_tag MUX_1_DC_1;  /* Clock Mux 1 Divider 1 Control Register */
  uint8_t MC_CGM_2_reserved3[36];
  MC_CGM_2_MUX_1_DIV_TRIG_CTRL_tag MUX_1_DIV_TRIG_CTRL; /* CGM Mux 1 Divider Trigger Control Register */
  MC_CGM_2_MUX_1_DIV_TRIG_tag MUX_1_DIV_TRIG; /* CGM Mux 1 Divider Trigger Register */
  MC_CGM_2_MUX_1_DIV_UPD_STAT_tag MUX_1_DIV_UPD_STAT; /* CGM Mux 1 Divider Update Status Register */
  MC_CGM_2_MUX_2_CSC_tag MUX_2_CSC;    /* Clock Mux 2 Select Control Register */
  MC_CGM_2_MUX_2_CSS_tag MUX_2_CSS;    /* Clock Mux 2 Select Status Register */
  MC_CGM_2_MUX_2_DC_0_tag MUX_2_DC_0;  /* Clock Mux 2 Divider 0 Control Register */
  MC_CGM_2_MUX_2_DC_1_tag MUX_2_DC_1;  /* Clock Mux 2 Divider 1 Control Register */
  uint8_t MC_CGM_2_reserved4[36];
  MC_CGM_2_MUX_2_DIV_TRIG_CTRL_tag MUX_2_DIV_TRIG_CTRL; /* CGM Mux 2 Divider Trigger Control Register */
  MC_CGM_2_MUX_2_DIV_TRIG_tag MUX_2_DIV_TRIG; /* CGM Mux 2 Divider Trigger Register */
  MC_CGM_2_MUX_2_DIV_UPD_STAT_tag MUX_2_DIV_UPD_STAT; /* CGM Mux 2 Divider Update Status Register */
  MC_CGM_2_MUX_3_CSC_tag MUX_3_CSC;    /* Clock Mux 3 Select Control Register */
  MC_CGM_2_MUX_3_CSS_tag MUX_3_CSS;    /* Clock Mux 3 Select Status Register */
  MC_CGM_2_MUX_3_DC_0_tag MUX_3_DC_0;  /* Clock Mux 3 Divider 0 Control Register */
  MC_CGM_2_MUX_3_DC_1_tag MUX_3_DC_1;  /* Clock Mux 3 Divider 1 Control Register */
  uint8_t MC_CGM_2_reserved5[36];
  MC_CGM_2_MUX_3_DIV_TRIG_CTRL_tag MUX_3_DIV_TRIG_CTRL; /* CGM Mux 3 Divider Trigger Control Register */
  MC_CGM_2_MUX_3_DIV_TRIG_tag MUX_3_DIV_TRIG; /* CGM Mux 3 Divider Trigger Register */
  MC_CGM_2_MUX_3_DIV_UPD_STAT_tag MUX_3_DIV_UPD_STAT; /* CGM Mux 3 Divider Update Status Register */
  MC_CGM_2_MUX_4_CSC_tag MUX_4_CSC;    /* Clock Mux 4 Select Control Register */
  MC_CGM_2_MUX_4_CSS_tag MUX_4_CSS;    /* Clock Mux 4 Select Status Register */
  uint8_t MC_CGM_2_reserved6[56];
  MC_CGM_2_MUX_5_CSC_tag MUX_5_CSC;    /* Clock Mux 5 Select Control Register */
  MC_CGM_2_MUX_5_CSS_tag MUX_5_CSS;    /* Clock Mux 5 Select Status Register */
  uint8_t MC_CGM_2_reserved7[56];
  MC_CGM_2_MUX_6_CSC_tag MUX_6_CSC;    /* Clock Mux 6 Select Control Register */
  MC_CGM_2_MUX_6_CSS_tag MUX_6_CSS;    /* Clock Mux 6 Select Status Register */
  uint8_t MC_CGM_2_reserved8[56];
  MC_CGM_2_MUX_7_CSC_tag MUX_7_CSC;    /* Clock Mux 7 Select Control Register */
  MC_CGM_2_MUX_7_CSS_tag MUX_7_CSS;    /* Clock Mux 7 Select Status Register */
  MC_CGM_2_MUX_7_DC_0_tag MUX_7_DC_0;  /* Clock Mux 7 Divider 0 Control Register */
  uint8_t MC_CGM_2_reserved9[40];
  MC_CGM_2_MUX_7_DIV_TRIG_CTRL_tag MUX_7_DIV_TRIG_CTRL; /* CGM Mux 7 Divider Trigger Control Register */
  MC_CGM_2_MUX_7_DIV_TRIG_tag MUX_7_DIV_TRIG; /* CGM Mux 7 Divider Trigger Register */
  MC_CGM_2_MUX_7_DIV_UPD_STAT_tag MUX_7_DIV_UPD_STAT; /* CGM Mux 7 Divider Update Status Register */
  MC_CGM_2_MUX_8_CSC_tag MUX_8_CSC;    /* Clock Mux 8 Select Control Register */
  MC_CGM_2_MUX_8_CSS_tag MUX_8_CSS;    /* Clock Mux 8 Select Status Register */
  MC_CGM_2_MUX_8_DC_0_tag MUX_8_DC_0;  /* Clock Mux 8 Divider 0 Control Register */
  uint8_t MC_CGM_2_reserved10[40];
  MC_CGM_2_MUX_8_DIV_TRIG_CTRL_tag MUX_8_DIV_TRIG_CTRL; /* CGM Mux 8 Divider Trigger Control Register */
  MC_CGM_2_MUX_8_DIV_TRIG_tag MUX_8_DIV_TRIG; /* CGM Mux 8 Divider Trigger Register */
  MC_CGM_2_MUX_8_DIV_UPD_STAT_tag MUX_8_DIV_UPD_STAT; /* CGM Mux 8 Divider Update Status Register */
  MC_CGM_2_MUX_9_CSC_tag MUX_9_CSC;    /* Clock Mux 9 Select Control Register */
  MC_CGM_2_MUX_9_CSS_tag MUX_9_CSS;    /* Clock Mux 9 Select Status Register */
  MC_CGM_2_MUX_9_DC_0_tag MUX_9_DC_0;  /* Clock Mux 9 Divider 0 Control Register */
  uint8_t MC_CGM_2_reserved11[40];
  MC_CGM_2_MUX_9_DIV_TRIG_CTRL_tag MUX_9_DIV_TRIG_CTRL; /* CGM Mux 9 Divider Trigger Control Register */
  MC_CGM_2_MUX_9_DIV_TRIG_tag MUX_9_DIV_TRIG; /* CGM Mux 9 Divider Trigger Register */
  MC_CGM_2_MUX_9_DIV_UPD_STAT_tag MUX_9_DIV_UPD_STAT; /* CGM Mux 9 Divider Update Status Register */
};


/* ============================================================================
   =============================== Module: MC_ME ==============================
   ============================================================================ */

typedef union MC_ME_CTL_KEY_union_tag { /* Control Key Register */
  vuint32_t R;
  struct {
    vuint32_t KEY:16;                  /* Control key */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} MC_ME_CTL_KEY_tag;

typedef union MC_ME_MODE_CONF_union_tag { /* Mode Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t DEST_RST:1;              /* Destructive reset request */
    vuint32_t FUNC_RST:1;              /* Functional reset request */
    vuint32_t _unused_2:13;            /* Reserved */
    vuint32_t STANDBY:1;               /* Standby request */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} MC_ME_MODE_CONF_tag;

typedef union MC_ME_MODE_UPD_union_tag { /* Mode Update Register */
  vuint32_t R;
  struct {
    vuint32_t MODE_UPD:1;              /* Mode update */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MC_ME_MODE_UPD_tag;

typedef union MC_ME_MODE_STAT_union_tag { /* Mode Status Register */
  vuint32_t R;
  struct {
    vuint32_t PREV_MODE:1;             /* Previous mode */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MC_ME_MODE_STAT_tag;

typedef union MC_ME_MAIN_COREID_union_tag { /* Main Core ID Register */
  vuint32_t R;
  struct {
    vuint32_t CIDX:3;                  /* Core index */
    vuint32_t _unused_3:5;             /* Reserved */
    vuint32_t PIDX:5;                  /* Partition index */
    vuint32_t _unused_13:19;           /* Reserved */
  } B;
} MC_ME_MAIN_COREID_tag;

typedef union MC_ME_PRTN0_PCONF_union_tag { /* Partition 0 Process Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t PCE:1;                   /* Partition clock enable */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:25;            /* Reserved */
  } B;
} MC_ME_PRTN0_PCONF_tag;

typedef union MC_ME_PRTN0_PUPD_union_tag { /* Partition 0 Process Update Register */
  vuint32_t R;
  struct {
    vuint32_t PCUD:1;                  /* Partition clock update */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:25;            /* Reserved */
  } B;
} MC_ME_PRTN0_PUPD_tag;

typedef union MC_ME_PRTN0_STAT_union_tag { /* Partition 0 Status Register */
  vuint32_t R;
  struct {
    vuint32_t PCS:1;                   /* Partition clock status */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:25;            /* Reserved */
  } B;
} MC_ME_PRTN0_STAT_tag;

typedef union MC_ME_PRTN0_COFB0_STAT_union_tag { /* Partition 0 COFB Set 0 Clock Status Register */
  vuint32_t R;
  struct {
    vuint32_t BLOCK0:1;                /* IP block status */
    vuint32_t BLOCK1:1;                /* IP block status */
    vuint32_t BLOCK2:1;                /* IP block status */
    vuint32_t BLOCK3:1;                /* IP block status */
    vuint32_t BLOCK4:1;                /* IP block status */
    vuint32_t BLOCK5:1;                /* IP block status */
    vuint32_t BLOCK6:1;                /* IP block status */
    vuint32_t BLOCK7:1;                /* IP block status */
    vuint32_t BLOCK8:1;                /* IP block status */
    vuint32_t BLOCK9:1;                /* IP block status */
    vuint32_t BLOCK10:1;               /* IP block status */
    vuint32_t BLOCK11:1;               /* IP block status */
    vuint32_t BLOCK12:1;               /* IP block status */
    vuint32_t BLOCK13:1;               /* IP block status */
    vuint32_t BLOCK14:1;               /* IP block status */
    vuint32_t BLOCK15:1;               /* IP block status */
    vuint32_t BLOCK16:1;               /* IP block status */
    vuint32_t BLOCK17:1;               /* IP block status */
    vuint32_t BLOCK18:1;               /* IP block status */
    vuint32_t BLOCK19:1;               /* IP block status */
    vuint32_t BLOCK20:1;               /* IP block status */
    vuint32_t BLOCK21:1;               /* IP block status */
    vuint32_t BLOCK22:1;               /* IP block status */
    vuint32_t BLOCK23:1;               /* IP block status */
    vuint32_t BLOCK24:1;               /* IP block status */
    vuint32_t BLOCK25:1;               /* IP block status */
    vuint32_t BLOCK26:1;               /* IP block status */
    vuint32_t BLOCK27:1;               /* IP block status */
    vuint32_t BLOCK28:1;               /* IP block status */
    vuint32_t BLOCK29:1;               /* IP block status */
    vuint32_t BLOCK30:1;               /* IP block status */
    vuint32_t BLOCK31:1;               /* IP block status */
  } B;
} MC_ME_PRTN0_COFB0_STAT_tag;

typedef union MC_ME_PRTN0_COFB0_CLKEN_union_tag { /* Partition 0 COFB Set 0 Clock Enable Register */
  vuint32_t R;
  struct {
    vuint32_t REQ0:1;                  /* Clock enable */
    vuint32_t REQ1:1;                  /* Clock enable */
    vuint32_t REQ2:1;                  /* Clock enable */
    vuint32_t REQ3:1;                  /* Clock enable */
    vuint32_t REQ4:1;                  /* Clock enable */
    vuint32_t REQ5:1;                  /* Clock enable */
    vuint32_t REQ6:1;                  /* Clock enable */
    vuint32_t REQ7:1;                  /* Clock enable */
    vuint32_t REQ8:1;                  /* Clock enable */
    vuint32_t REQ9:1;                  /* Clock enable */
    vuint32_t REQ10:1;                 /* Clock enable */
    vuint32_t REQ11:1;                 /* Clock enable */
    vuint32_t REQ12:1;                 /* Clock enable */
    vuint32_t REQ13:1;                 /* Clock enable */
    vuint32_t REQ14:1;                 /* Clock enable */
    vuint32_t REQ15:1;                 /* Clock enable */
    vuint32_t REQ16:1;                 /* Clock enable */
    vuint32_t REQ17:1;                 /* Clock enable */
    vuint32_t REQ18:1;                 /* Clock enable */
    vuint32_t REQ19:1;                 /* Clock enable */
    vuint32_t REQ20:1;                 /* Clock enable */
    vuint32_t REQ21:1;                 /* Clock enable */
    vuint32_t REQ22:1;                 /* Clock enable */
    vuint32_t REQ23:1;                 /* Clock enable */
    vuint32_t REQ24:1;                 /* Clock enable */
    vuint32_t REQ25:1;                 /* Clock enable */
    vuint32_t REQ26:1;                 /* Clock enable */
    vuint32_t REQ27:1;                 /* Clock enable */
    vuint32_t REQ28:1;                 /* Clock enable */
    vuint32_t REQ29:1;                 /* Clock enable */
    vuint32_t REQ30:1;                 /* Clock enable */
    vuint32_t REQ31:1;                 /* Clock enable */
  } B;
} MC_ME_PRTN0_COFB0_CLKEN_tag;

typedef union MC_ME_PRTN0_CORE0_PCONF_union_tag { /* Partition 0 Core 0 Process Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t CCE:1;                   /* Core 0 clock enable */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MC_ME_PRTN0_CORE0_PCONF_tag;

typedef union MC_ME_PRTN0_CORE0_PUPD_union_tag { /* Partition 0 Core 0 Process Update Register */
  vuint32_t R;
  struct {
    vuint32_t CCUPD:1;                 /* Core 0 clock update */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MC_ME_PRTN0_CORE0_PUPD_tag;

typedef union MC_ME_PRTN0_CORE0_STAT_union_tag { /* Partition 0 Core 0 Status Register */
  vuint32_t R;
  struct {
    vuint32_t CCS:1;                   /* Core 0 clock process status */
    vuint32_t _unused_1:30;            /* Reserved */
    vuint32_t WFI:1;                   /* Wait for interrupt status */
  } B;
} MC_ME_PRTN0_CORE0_STAT_tag;

typedef union MC_ME_PRTN0_CORE0_ADDR_union_tag { /* Partition 0 Core 0 Address Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t ADDR:30;                 /* Address */
  } B;
} MC_ME_PRTN0_CORE0_ADDR_tag;

typedef union MC_ME_PRTN0_CORE1_PCONF_union_tag { /* Partition 0 Core 1 Process Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t CCE:1;                   /* Core 1 clock enable */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MC_ME_PRTN0_CORE1_PCONF_tag;

typedef union MC_ME_PRTN0_CORE1_PUPD_union_tag { /* Partition 0 Core 1 Process Update Register */
  vuint32_t R;
  struct {
    vuint32_t CCUPD:1;                 /* Core 1 clock update */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MC_ME_PRTN0_CORE1_PUPD_tag;

typedef union MC_ME_PRTN0_CORE1_STAT_union_tag { /* Partition 0 Core 1 Status Register */
  vuint32_t R;
  struct {
    vuint32_t CCS:1;                   /* Core 1 clock process status */
    vuint32_t _unused_1:30;            /* Reserved */
    vuint32_t WFI:1;                   /* Wait for interrupt status */
  } B;
} MC_ME_PRTN0_CORE1_STAT_tag;

typedef union MC_ME_PRTN0_CORE1_ADDR_union_tag { /* Partition 0 Core 1 Address Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t ADDR:30;                 /* Address */
  } B;
} MC_ME_PRTN0_CORE1_ADDR_tag;

typedef union MC_ME_PRTN0_CORE2_PCONF_union_tag { /* Partition 0 Core 2 Process Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t CCE:1;                   /* Core 2 clock enable */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MC_ME_PRTN0_CORE2_PCONF_tag;

typedef union MC_ME_PRTN0_CORE2_PUPD_union_tag { /* Partition 0 Core 2 Process Update Register */
  vuint32_t R;
  struct {
    vuint32_t CCUPD:1;                 /* Core 2 clock update */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MC_ME_PRTN0_CORE2_PUPD_tag;

typedef union MC_ME_PRTN0_CORE2_STAT_union_tag { /* Partition 0 Core 2 Status Register */
  vuint32_t R;
  struct {
    vuint32_t CCS:1;                   /* Core 2 clock process status */
    vuint32_t _unused_1:30;            /* Reserved */
    vuint32_t WFI:1;                   /* Wait for interrupt status */
  } B;
} MC_ME_PRTN0_CORE2_STAT_tag;

typedef union MC_ME_PRTN0_CORE2_ADDR_union_tag { /* Partition 0 Core 2 Address Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t ADDR:30;                 /* Address */
  } B;
} MC_ME_PRTN0_CORE2_ADDR_tag;

typedef union MC_ME_PRTN0_CORE3_PCONF_union_tag { /* Partition 0 Core 3 Process Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t CCE:1;                   /* Core 3 clock enable */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MC_ME_PRTN0_CORE3_PCONF_tag;

typedef union MC_ME_PRTN0_CORE3_PUPD_union_tag { /* Partition 0 Core 3 Process Update Register */
  vuint32_t R;
  struct {
    vuint32_t CCUPD:1;                 /* Core 3 clock update */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MC_ME_PRTN0_CORE3_PUPD_tag;

typedef union MC_ME_PRTN0_CORE3_STAT_union_tag { /* Partition 0 Core 3 Status Register */
  vuint32_t R;
  struct {
    vuint32_t CCS:1;                   /* Core 3 clock process status */
    vuint32_t _unused_1:30;            /* Reserved */
    vuint32_t WFI:1;                   /* Wait for interrupt status */
  } B;
} MC_ME_PRTN0_CORE3_STAT_tag;

typedef union MC_ME_PRTN0_CORE3_ADDR_union_tag { /* Partition 0 Core 3 Address Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t ADDR:30;                 /* Address */
  } B;
} MC_ME_PRTN0_CORE3_ADDR_tag;

typedef union MC_ME_PRTN1_PCONF_union_tag { /* Partition 1 Process Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t PCE:1;                   /* Partition clock enable */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t OSSE:1;                  /* Output safe stating enable */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:25;            /* Reserved */
  } B;
} MC_ME_PRTN1_PCONF_tag;

typedef union MC_ME_PRTN1_PUPD_union_tag { /* Partition 1 Process Update Register */
  vuint32_t R;
  struct {
    vuint32_t PCUD:1;                  /* Partition clock update */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t OSSUD:1;                 /* Output safe stating update */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:25;            /* Reserved */
  } B;
} MC_ME_PRTN1_PUPD_tag;

typedef union MC_ME_PRTN1_STAT_union_tag { /* Partition 1 Status Register */
  vuint32_t R;
  struct {
    vuint32_t PCS:1;                   /* Partition clock status */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t OSSS:1;                  /* Output safe stating status */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:25;            /* Reserved */
  } B;
} MC_ME_PRTN1_STAT_tag;

typedef union MC_ME_PRTN1_CORE0_PCONF_union_tag { /* Partition 1 Core 0 Process Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t CCE:1;                   /* Core 0 clock enable */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MC_ME_PRTN1_CORE0_PCONF_tag;

typedef union MC_ME_PRTN1_CORE0_PUPD_union_tag { /* Partition 1 Core 0 Process Update Register */
  vuint32_t R;
  struct {
    vuint32_t CCUPD:1;                 /* Core 0 clock update */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MC_ME_PRTN1_CORE0_PUPD_tag;

typedef union MC_ME_PRTN1_CORE0_STAT_union_tag { /* Partition 1 Core 0 Status Register */
  vuint32_t R;
  struct {
    vuint32_t CCS:1;                   /* Core 0 clock process status */
    vuint32_t _unused_1:30;            /* Reserved */
    vuint32_t WFI:1;                   /* Wait for interrupt status */
  } B;
} MC_ME_PRTN1_CORE0_STAT_tag;

typedef union MC_ME_PRTN1_CORE0_ADDR_union_tag { /* Partition 1 Core 0 Address Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t ADDR:30;                 /* Address */
  } B;
} MC_ME_PRTN1_CORE0_ADDR_tag;

typedef union MC_ME_PRTN1_CORE1_PCONF_union_tag { /* Partition 1 Core 1 Process Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t CCE:1;                   /* Core 1 clock enable */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MC_ME_PRTN1_CORE1_PCONF_tag;

typedef union MC_ME_PRTN1_CORE1_PUPD_union_tag { /* Partition 1 Core 1 Process Update Register */
  vuint32_t R;
  struct {
    vuint32_t CCUPD:1;                 /* Core 1 clock update */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MC_ME_PRTN1_CORE1_PUPD_tag;

typedef union MC_ME_PRTN1_CORE1_STAT_union_tag { /* Partition 1 Core 1 Status Register */
  vuint32_t R;
  struct {
    vuint32_t CCS:1;                   /* Core 1 clock process status */
    vuint32_t _unused_1:30;            /* Reserved */
    vuint32_t WFI:1;                   /* Wait for interrupt status */
  } B;
} MC_ME_PRTN1_CORE1_STAT_tag;

typedef union MC_ME_PRTN1_CORE1_ADDR_union_tag { /* Partition 1 Core 1 Address Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t ADDR:30;                 /* Address */
  } B;
} MC_ME_PRTN1_CORE1_ADDR_tag;

typedef union MC_ME_PRTN1_CORE2_PCONF_union_tag { /* Partition 1 Core 2 Process Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t CCE:1;                   /* Core 2 clock enable */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MC_ME_PRTN1_CORE2_PCONF_tag;

typedef union MC_ME_PRTN1_CORE2_PUPD_union_tag { /* Partition 1 Core 2 Process Update Register */
  vuint32_t R;
  struct {
    vuint32_t CCUPD:1;                 /* Core 2 clock update */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MC_ME_PRTN1_CORE2_PUPD_tag;

typedef union MC_ME_PRTN1_CORE2_STAT_union_tag { /* Partition 1 Core 2 Status Register */
  vuint32_t R;
  struct {
    vuint32_t CCS:1;                   /* Core 2 clock process status */
    vuint32_t _unused_1:30;            /* Reserved */
    vuint32_t WFI:1;                   /* Wait for interrupt status */
  } B;
} MC_ME_PRTN1_CORE2_STAT_tag;

typedef union MC_ME_PRTN1_CORE2_ADDR_union_tag { /* Partition 1 Core 2 Address Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t ADDR:30;                 /* Address */
  } B;
} MC_ME_PRTN1_CORE2_ADDR_tag;

typedef union MC_ME_PRTN1_CORE3_PCONF_union_tag { /* Partition 1 Core 3 Process Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t CCE:1;                   /* Core 3 clock enable */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MC_ME_PRTN1_CORE3_PCONF_tag;

typedef union MC_ME_PRTN1_CORE3_PUPD_union_tag { /* Partition 1 Core 3 Process Update Register */
  vuint32_t R;
  struct {
    vuint32_t CCUPD:1;                 /* Core 3 clock update */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MC_ME_PRTN1_CORE3_PUPD_tag;

typedef union MC_ME_PRTN1_CORE3_STAT_union_tag { /* Partition 1 Core 3 Status Register */
  vuint32_t R;
  struct {
    vuint32_t CCS:1;                   /* Core 3 clock process status */
    vuint32_t _unused_1:30;            /* Reserved */
    vuint32_t WFI:1;                   /* Wait for interrupt status */
  } B;
} MC_ME_PRTN1_CORE3_STAT_tag;

typedef union MC_ME_PRTN1_CORE3_ADDR_union_tag { /* Partition 1 Core 3 Address Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t ADDR:30;                 /* Address */
  } B;
} MC_ME_PRTN1_CORE3_ADDR_tag;

typedef union MC_ME_PRTN2_PCONF_union_tag { /* Partition 2 Process Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t PCE:1;                   /* Partition clock enable */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t OSSE:1;                  /* Output safe stating enable */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:25;            /* Reserved */
  } B;
} MC_ME_PRTN2_PCONF_tag;

typedef union MC_ME_PRTN2_PUPD_union_tag { /* Partition 2 Process Update Register */
  vuint32_t R;
  struct {
    vuint32_t PCUD:1;                  /* Partition clock update */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t OSSUD:1;                 /* Output safe stating update */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:25;            /* Reserved */
  } B;
} MC_ME_PRTN2_PUPD_tag;

typedef union MC_ME_PRTN2_STAT_union_tag { /* Partition 2 Status Register */
  vuint32_t R;
  struct {
    vuint32_t PCS:1;                   /* Partition clock status */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t OSSS:1;                  /* Output safe stating status */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:25;            /* Reserved */
  } B;
} MC_ME_PRTN2_STAT_tag;

typedef union MC_ME_PRTN2_COFB0_STAT_union_tag { /* Partition 2 COFB Set 0 Clock Status Register */
  vuint32_t R;
  struct {
    vuint32_t BLOCK0:1;                /* IP block status */
    vuint32_t BLOCK1:1;                /* IP block status */
    vuint32_t BLOCK2:1;                /* IP block status */
    vuint32_t BLOCK3:1;                /* IP block status */
    vuint32_t BLOCK4:1;                /* IP block status */
    vuint32_t BLOCK5:1;                /* IP block status */
    vuint32_t BLOCK6:1;                /* IP block status */
    vuint32_t BLOCK7:1;                /* IP block status */
    vuint32_t BLOCK8:1;                /* IP block status */
    vuint32_t BLOCK9:1;                /* IP block status */
    vuint32_t BLOCK10:1;               /* IP block status */
    vuint32_t BLOCK11:1;               /* IP block status */
    vuint32_t BLOCK12:1;               /* IP block status */
    vuint32_t BLOCK13:1;               /* IP block status */
    vuint32_t BLOCK14:1;               /* IP block status */
    vuint32_t BLOCK15:1;               /* IP block status */
    vuint32_t BLOCK16:1;               /* IP block status */
    vuint32_t BLOCK17:1;               /* IP block status */
    vuint32_t BLOCK18:1;               /* IP block status */
    vuint32_t BLOCK19:1;               /* IP block status */
    vuint32_t BLOCK20:1;               /* IP block status */
    vuint32_t BLOCK21:1;               /* IP block status */
    vuint32_t BLOCK22:1;               /* IP block status */
    vuint32_t BLOCK23:1;               /* IP block status */
    vuint32_t BLOCK24:1;               /* IP block status */
    vuint32_t BLOCK25:1;               /* IP block status */
    vuint32_t BLOCK26:1;               /* IP block status */
    vuint32_t BLOCK27:1;               /* IP block status */
    vuint32_t BLOCK28:1;               /* IP block status */
    vuint32_t BLOCK29:1;               /* IP block status */
    vuint32_t BLOCK30:1;               /* IP block status */
    vuint32_t BLOCK31:1;               /* IP block status */
  } B;
} MC_ME_PRTN2_COFB0_STAT_tag;

typedef union MC_ME_PRTN2_COFB0_CLKEN_union_tag { /* Partition 2 COFB Set 0 Clock Enable Register */
  vuint32_t R;
  struct {
    vuint32_t REQ0:1;                  /* Clock enable */
    vuint32_t REQ1:1;                  /* Clock enable */
    vuint32_t REQ2:1;                  /* Clock enable */
    vuint32_t REQ3:1;                  /* Clock enable */
    vuint32_t REQ4:1;                  /* Clock enable */
    vuint32_t REQ5:1;                  /* Clock enable */
    vuint32_t REQ6:1;                  /* Clock enable */
    vuint32_t REQ7:1;                  /* Clock enable */
    vuint32_t REQ8:1;                  /* Clock enable */
    vuint32_t REQ9:1;                  /* Clock enable */
    vuint32_t REQ10:1;                 /* Clock enable */
    vuint32_t REQ11:1;                 /* Clock enable */
    vuint32_t REQ12:1;                 /* Clock enable */
    vuint32_t REQ13:1;                 /* Clock enable */
    vuint32_t REQ14:1;                 /* Clock enable */
    vuint32_t REQ15:1;                 /* Clock enable */
    vuint32_t REQ16:1;                 /* Clock enable */
    vuint32_t REQ17:1;                 /* Clock enable */
    vuint32_t REQ18:1;                 /* Clock enable */
    vuint32_t REQ19:1;                 /* Clock enable */
    vuint32_t REQ20:1;                 /* Clock enable */
    vuint32_t REQ21:1;                 /* Clock enable */
    vuint32_t REQ22:1;                 /* Clock enable */
    vuint32_t REQ23:1;                 /* Clock enable */
    vuint32_t REQ24:1;                 /* Clock enable */
    vuint32_t REQ25:1;                 /* Clock enable */
    vuint32_t REQ26:1;                 /* Clock enable */
    vuint32_t REQ27:1;                 /* Clock enable */
    vuint32_t REQ28:1;                 /* Clock enable */
    vuint32_t REQ29:1;                 /* Clock enable */
    vuint32_t REQ30:1;                 /* Clock enable */
    vuint32_t REQ31:1;                 /* Clock enable */
  } B;
} MC_ME_PRTN2_COFB0_CLKEN_tag;

typedef union MC_ME_PRTN3_PCONF_union_tag { /* Partition 3 Process Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t PCE:1;                   /* Partition clock enable */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t OSSE:1;                  /* Output safe stating enable */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:25;            /* Reserved */
  } B;
} MC_ME_PRTN3_PCONF_tag;

typedef union MC_ME_PRTN3_PUPD_union_tag { /* Partition 3 Process Update Register */
  vuint32_t R;
  struct {
    vuint32_t PCUD:1;                  /* Partition clock update */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t OSSUD:1;                 /* Output safe stating update */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:25;            /* Reserved */
  } B;
} MC_ME_PRTN3_PUPD_tag;

typedef union MC_ME_PRTN3_STAT_union_tag { /* Partition 3 Status Register */
  vuint32_t R;
  struct {
    vuint32_t PCS:1;                   /* Partition clock status */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t OSSS:1;                  /* Output safe stating status */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:25;            /* Reserved */
  } B;
} MC_ME_PRTN3_STAT_tag;

typedef union MC_ME_PRTN3_COFB0_STAT_union_tag { /* Partition 3 COFB Set 0 Clock Status Register */
  vuint32_t R;
  struct {
    vuint32_t BLOCK0:1;                /* IP block status */
    vuint32_t BLOCK1:1;                /* IP block status */
    vuint32_t BLOCK2:1;                /* IP block status */
    vuint32_t BLOCK3:1;                /* IP block status */
    vuint32_t BLOCK4:1;                /* IP block status */
    vuint32_t BLOCK5:1;                /* IP block status */
    vuint32_t BLOCK6:1;                /* IP block status */
    vuint32_t BLOCK7:1;                /* IP block status */
    vuint32_t BLOCK8:1;                /* IP block status */
    vuint32_t BLOCK9:1;                /* IP block status */
    vuint32_t BLOCK10:1;               /* IP block status */
    vuint32_t BLOCK11:1;               /* IP block status */
    vuint32_t BLOCK12:1;               /* IP block status */
    vuint32_t BLOCK13:1;               /* IP block status */
    vuint32_t BLOCK14:1;               /* IP block status */
    vuint32_t BLOCK15:1;               /* IP block status */
    vuint32_t BLOCK16:1;               /* IP block status */
    vuint32_t BLOCK17:1;               /* IP block status */
    vuint32_t BLOCK18:1;               /* IP block status */
    vuint32_t BLOCK19:1;               /* IP block status */
    vuint32_t BLOCK20:1;               /* IP block status */
    vuint32_t BLOCK21:1;               /* IP block status */
    vuint32_t BLOCK22:1;               /* IP block status */
    vuint32_t BLOCK23:1;               /* IP block status */
    vuint32_t BLOCK24:1;               /* IP block status */
    vuint32_t BLOCK25:1;               /* IP block status */
    vuint32_t BLOCK26:1;               /* IP block status */
    vuint32_t BLOCK27:1;               /* IP block status */
    vuint32_t BLOCK28:1;               /* IP block status */
    vuint32_t BLOCK29:1;               /* IP block status */
    vuint32_t BLOCK30:1;               /* IP block status */
    vuint32_t BLOCK31:1;               /* IP block status */
  } B;
} MC_ME_PRTN3_COFB0_STAT_tag;

typedef union MC_ME_PRTN3_COFB0_CLKEN_union_tag { /* Partition 3 COFB Set 0 Clock Enable Register */
  vuint32_t R;
  struct {
    vuint32_t REQ0:1;                  /* Clock enable */
    vuint32_t REQ1:1;                  /* Clock enable */
    vuint32_t REQ2:1;                  /* Clock enable */
    vuint32_t REQ3:1;                  /* Clock enable */
    vuint32_t REQ4:1;                  /* Clock enable */
    vuint32_t REQ5:1;                  /* Clock enable */
    vuint32_t REQ6:1;                  /* Clock enable */
    vuint32_t REQ7:1;                  /* Clock enable */
    vuint32_t REQ8:1;                  /* Clock enable */
    vuint32_t REQ9:1;                  /* Clock enable */
    vuint32_t REQ10:1;                 /* Clock enable */
    vuint32_t REQ11:1;                 /* Clock enable */
    vuint32_t REQ12:1;                 /* Clock enable */
    vuint32_t REQ13:1;                 /* Clock enable */
    vuint32_t REQ14:1;                 /* Clock enable */
    vuint32_t REQ15:1;                 /* Clock enable */
    vuint32_t REQ16:1;                 /* Clock enable */
    vuint32_t REQ17:1;                 /* Clock enable */
    vuint32_t REQ18:1;                 /* Clock enable */
    vuint32_t REQ19:1;                 /* Clock enable */
    vuint32_t REQ20:1;                 /* Clock enable */
    vuint32_t REQ21:1;                 /* Clock enable */
    vuint32_t REQ22:1;                 /* Clock enable */
    vuint32_t REQ23:1;                 /* Clock enable */
    vuint32_t REQ24:1;                 /* Clock enable */
    vuint32_t REQ25:1;                 /* Clock enable */
    vuint32_t REQ26:1;                 /* Clock enable */
    vuint32_t REQ27:1;                 /* Clock enable */
    vuint32_t REQ28:1;                 /* Clock enable */
    vuint32_t REQ29:1;                 /* Clock enable */
    vuint32_t REQ30:1;                 /* Clock enable */
    vuint32_t REQ31:1;                 /* Clock enable */
  } B;
} MC_ME_PRTN3_COFB0_CLKEN_tag;

struct MC_ME_tag {
  MC_ME_CTL_KEY_tag CTL_KEY;           /* Control Key Register */
  MC_ME_MODE_CONF_tag MODE_CONF;       /* Mode Configuration Register */
  MC_ME_MODE_UPD_tag MODE_UPD;         /* Mode Update Register */
  MC_ME_MODE_STAT_tag MODE_STAT;       /* Mode Status Register */
  MC_ME_MAIN_COREID_tag MAIN_COREID;   /* Main Core ID Register */
  uint8_t MC_ME_reserved0[236];
  MC_ME_PRTN0_PCONF_tag PRTN0_PCONF;   /* Partition 0 Process Configuration Register */
  MC_ME_PRTN0_PUPD_tag PRTN0_PUPD;     /* Partition 0 Process Update Register */
  MC_ME_PRTN0_STAT_tag PRTN0_STAT;     /* Partition 0 Status Register */
  uint8_t MC_ME_reserved1[4];
  MC_ME_PRTN0_COFB0_STAT_tag PRTN0_COFB0_STAT; /* Partition 0 COFB Set 0 Clock Status Register */
  uint8_t MC_ME_reserved2[28];
  MC_ME_PRTN0_COFB0_CLKEN_tag PRTN0_COFB0_CLKEN; /* Partition 0 COFB Set 0 Clock Enable Register */
  uint8_t MC_ME_reserved3[12];
  MC_ME_PRTN0_CORE0_PCONF_tag PRTN0_CORE0_PCONF; /* Partition 0 Core 0 Process Configuration Register */
  MC_ME_PRTN0_CORE0_PUPD_tag PRTN0_CORE0_PUPD; /* Partition 0 Core 0 Process Update Register */
  MC_ME_PRTN0_CORE0_STAT_tag PRTN0_CORE0_STAT; /* Partition 0 Core 0 Status Register */
  MC_ME_PRTN0_CORE0_ADDR_tag PRTN0_CORE0_ADDR; /* Partition 0 Core 0 Address Register */
  uint8_t MC_ME_reserved4[16];
  MC_ME_PRTN0_CORE1_PCONF_tag PRTN0_CORE1_PCONF; /* Partition 0 Core 1 Process Configuration Register */
  MC_ME_PRTN0_CORE1_PUPD_tag PRTN0_CORE1_PUPD; /* Partition 0 Core 1 Process Update Register */
  MC_ME_PRTN0_CORE1_STAT_tag PRTN0_CORE1_STAT; /* Partition 0 Core 1 Status Register */
  MC_ME_PRTN0_CORE1_ADDR_tag PRTN0_CORE1_ADDR; /* Partition 0 Core 1 Address Register */
  uint8_t MC_ME_reserved5[16];
  MC_ME_PRTN0_CORE2_PCONF_tag PRTN0_CORE2_PCONF; /* Partition 0 Core 2 Process Configuration Register */
  MC_ME_PRTN0_CORE2_PUPD_tag PRTN0_CORE2_PUPD; /* Partition 0 Core 2 Process Update Register */
  MC_ME_PRTN0_CORE2_STAT_tag PRTN0_CORE2_STAT; /* Partition 0 Core 2 Status Register */
  MC_ME_PRTN0_CORE2_ADDR_tag PRTN0_CORE2_ADDR; /* Partition 0 Core 2 Address Register */
  uint8_t MC_ME_reserved6[16];
  MC_ME_PRTN0_CORE3_PCONF_tag PRTN0_CORE3_PCONF; /* Partition 0 Core 3 Process Configuration Register */
  MC_ME_PRTN0_CORE3_PUPD_tag PRTN0_CORE3_PUPD; /* Partition 0 Core 3 Process Update Register */
  MC_ME_PRTN0_CORE3_STAT_tag PRTN0_CORE3_STAT; /* Partition 0 Core 3 Status Register */
  MC_ME_PRTN0_CORE3_ADDR_tag PRTN0_CORE3_ADDR; /* Partition 0 Core 3 Address Register */
  uint8_t MC_ME_reserved7[336];
  MC_ME_PRTN1_PCONF_tag PRTN1_PCONF;   /* Partition 1 Process Configuration Register */
  MC_ME_PRTN1_PUPD_tag PRTN1_PUPD;     /* Partition 1 Process Update Register */
  MC_ME_PRTN1_STAT_tag PRTN1_STAT;     /* Partition 1 Status Register */
  uint8_t MC_ME_reserved8[52];
  MC_ME_PRTN1_CORE0_PCONF_tag PRTN1_CORE0_PCONF; /* Partition 1 Core 0 Process Configuration Register */
  MC_ME_PRTN1_CORE0_PUPD_tag PRTN1_CORE0_PUPD; /* Partition 1 Core 0 Process Update Register */
  MC_ME_PRTN1_CORE0_STAT_tag PRTN1_CORE0_STAT; /* Partition 1 Core 0 Status Register */
  MC_ME_PRTN1_CORE0_ADDR_tag PRTN1_CORE0_ADDR; /* Partition 1 Core 0 Address Register */
  uint8_t MC_ME_reserved9[16];
  MC_ME_PRTN1_CORE1_PCONF_tag PRTN1_CORE1_PCONF; /* Partition 1 Core 1 Process Configuration Register */
  MC_ME_PRTN1_CORE1_PUPD_tag PRTN1_CORE1_PUPD; /* Partition 1 Core 1 Process Update Register */
  MC_ME_PRTN1_CORE1_STAT_tag PRTN1_CORE1_STAT; /* Partition 1 Core 1 Status Register */
  MC_ME_PRTN1_CORE1_ADDR_tag PRTN1_CORE1_ADDR; /* Partition 1 Core 1 Address Register */
  uint8_t MC_ME_reserved10[16];
  MC_ME_PRTN1_CORE2_PCONF_tag PRTN1_CORE2_PCONF; /* Partition 1 Core 2 Process Configuration Register */
  MC_ME_PRTN1_CORE2_PUPD_tag PRTN1_CORE2_PUPD; /* Partition 1 Core 2 Process Update Register */
  MC_ME_PRTN1_CORE2_STAT_tag PRTN1_CORE2_STAT; /* Partition 1 Core 2 Status Register */
  MC_ME_PRTN1_CORE2_ADDR_tag PRTN1_CORE2_ADDR; /* Partition 1 Core 2 Address Register */
  uint8_t MC_ME_reserved11[16];
  MC_ME_PRTN1_CORE3_PCONF_tag PRTN1_CORE3_PCONF; /* Partition 1 Core 3 Process Configuration Register */
  MC_ME_PRTN1_CORE3_PUPD_tag PRTN1_CORE3_PUPD; /* Partition 1 Core 3 Process Update Register */
  MC_ME_PRTN1_CORE3_STAT_tag PRTN1_CORE3_STAT; /* Partition 1 Core 3 Status Register */
  MC_ME_PRTN1_CORE3_ADDR_tag PRTN1_CORE3_ADDR; /* Partition 1 Core 3 Address Register */
  uint8_t MC_ME_reserved12[336];
  MC_ME_PRTN2_PCONF_tag PRTN2_PCONF;   /* Partition 2 Process Configuration Register */
  MC_ME_PRTN2_PUPD_tag PRTN2_PUPD;     /* Partition 2 Process Update Register */
  MC_ME_PRTN2_STAT_tag PRTN2_STAT;     /* Partition 2 Status Register */
  uint8_t MC_ME_reserved13[4];
  MC_ME_PRTN2_COFB0_STAT_tag PRTN2_COFB0_STAT; /* Partition 2 COFB Set 0 Clock Status Register */
  uint8_t MC_ME_reserved14[28];
  MC_ME_PRTN2_COFB0_CLKEN_tag PRTN2_COFB0_CLKEN; /* Partition 2 COFB Set 0 Clock Enable Register */
  uint8_t MC_ME_reserved15[460];
  MC_ME_PRTN3_PCONF_tag PRTN3_PCONF;   /* Partition 3 Process Configuration Register */
  MC_ME_PRTN3_PUPD_tag PRTN3_PUPD;     /* Partition 3 Process Update Register */
  MC_ME_PRTN3_STAT_tag PRTN3_STAT;     /* Partition 3 Status Register */
  uint8_t MC_ME_reserved16[4];
  MC_ME_PRTN3_COFB0_STAT_tag PRTN3_COFB0_STAT; /* Partition 3 COFB Set 0 Clock Status Register */
  uint8_t MC_ME_reserved17[28];
  MC_ME_PRTN3_COFB0_CLKEN_tag PRTN3_COFB0_CLKEN; /* Partition 3 COFB Set 0 Clock Enable Register */
};


/* ============================================================================
   =============================== Module: MC_RGM =============================
   ============================================================================ */

typedef union MC_RGM_DES_union_tag {   /* Destructive Event Status Register */
  vuint32_t R;
  struct {
    vuint32_t F_POR:1;                 /* Flag for power-on reset */
    vuint32_t F_DR_1:1;                /* Flag for 'Destructive' Reset F_DR_1 */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t F_DR_3:1;                /* Flag for 'Destructive' Reset F_DR_3 */
    vuint32_t F_DR_4:1;                /* Flag for 'Destructive' Reset F_DR_4 */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t F_DR_6:1;                /* Flag for 'Destructive' Reset F_DR_6 */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t F_DR_8:1;                /* Flag for 'Destructive' Reset F_DR_8 */
    vuint32_t F_DR_9:1;                /* Flag for 'Destructive' Reset F_DR_9 */
    vuint32_t F_DR_10:1;               /* Flag for 'Destructive' Reset F_DR_10 */
    vuint32_t F_DR_11:1;               /* Flag for 'Destructive' Reset F_DR_11 */
    vuint32_t F_DR_12:1;               /* Flag for 'Destructive' Reset F_DR_12 */
    vuint32_t F_DR_13:1;               /* Flag for 'Destructive' Reset F_DR_13 */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t F_DR_16:1;               /* Flag for 'Destructive' Reset F_DR_16 */
    vuint32_t F_DR_17:1;               /* Flag for 'Destructive' Reset F_DR_17 */
    vuint32_t F_DR_18:1;               /* Flag for 'Destructive' Reset F_DR_18 */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t F_DR_30:1;               /* Flag for 'Destructive' Reset F_DR_30 */
    vuint32_t F_DR_31:1;               /* Flag for 'Destructive' Reset F_DR_31 */
  } B;
} MC_RGM_DES_tag;

typedef union MC_RGM_FES_union_tag {   /* Functional /External Reset Status Register */
  vuint32_t R;
  struct {
    vuint32_t F_EXR:1;                 /* Flag for External Reset */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t F_FR_3:1;                /* Flag for 'Functional' Reset F_FR_3 */
    vuint32_t F_FR_4:1;                /* Flag for 'Functional' Reset F_FR_4 */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t F_FR_6:1;                /* Flag for 'Functional' Reset F_FR_6 */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t F_FR_18:1;               /* Flag for 'Functional' Reset F_FR_18 */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t F_FR_20:1;               /* Flag for 'Functional' Reset F_FR_20 */
    vuint32_t F_FR_21:1;               /* Flag for 'Functional' Reset F_FR_21 */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t F_FR_30:1;               /* Flag for 'Functional' Reset F_FR_30 */
    vuint32_t F_FR_31:1;               /* Flag for 'Functional' Reset F_FR_31 */
  } B;
} MC_RGM_FES_tag;

typedef union MC_RGM_FREC_union_tag {  /* Functional Reset Escalation Counter Register */
  vuint32_t R;
  struct {
    vuint32_t FREC:4;                  /* Functional' Reset Escalation Counter */
    vuint32_t _unused_4:28;            /* Reserved */
  } B;
} MC_RGM_FREC_tag;

typedef union MC_RGM_FRET_union_tag {  /* Functional Reset Escalation Threshold Register */
  vuint32_t R;
  struct {
    vuint32_t FRET:4;                  /* 'Functional' Reset Escalation Threshold */
    vuint32_t _unused_4:28;            /* Reserved */
  } B;
} MC_RGM_FRET_tag;

typedef union MC_RGM_DRET_union_tag {  /* Destructive Reset Escalation Threshold Register */
  vuint32_t R;
  struct {
    vuint32_t DRET:4;                  /* 'Destructive' Reset Escalation Threshold */
    vuint32_t _unused_4:28;            /* Reserved */
  } B;
} MC_RGM_DRET_tag;

typedef union MC_RGM_ERCTRL_union_tag { /* External Reset Control Register */
  vuint32_t R;
  struct {
    vuint32_t ERASSERT:1;              /* ERASSERT */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MC_RGM_ERCTRL_tag;

typedef union MC_RGM_RDSS_union_tag {  /* Reset During Standby Status Register */
  vuint32_t R;
  struct {
    vuint32_t DES_RES:1;               /* DES_RES */
    vuint32_t FES_RES:1;               /* FES_RES */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} MC_RGM_RDSS_tag;

typedef union MC_RGM_PRST_0_PRST_0_union_tag { /* Peripheral Reset */
  vuint32_t R;
  struct {
    vuint32_t PERIPH_0_RST:1;          /* Reset Control value for peripheral PERIPH_0_RST */
    vuint32_t PERIPH_1_RST:1;          /* Reset Control value for peripheral PERIPH_1_RST */
    vuint32_t PERIPH_2_RST:1;          /* Reset Control value for peripheral PERIPH_2_RST */
    vuint32_t PERIPH_3_RST:1;          /* Reset Control value for peripheral PERIPH_3_RST */
    vuint32_t PERIPH_4_RST:1;          /* Reset Control value for peripheral PERIPH_4_RST */
    vuint32_t PERIPH_5_RST:1;          /* Reset Control value for peripheral PERIPH_5_RST */
    vuint32_t PERIPH_6_RST:1;          /* Reset Control value for peripheral PERIPH_6_RST */
    vuint32_t PERIPH_7_RST:1;          /* Reset Control value for peripheral PERIPH_7_RST */
    vuint32_t PERIPH_8_RST:1;          /* Reset Control value for peripheral PERIPH_8_RST */
    vuint32_t PERIPH_9_RST:1;          /* Reset Control value for peripheral PERIPH_9_RST */
    vuint32_t PERIPH_10_RST:1;         /* Reset Control value for peripheral PERIPH_10_RST */
    vuint32_t PERIPH_11_RST:1;         /* Reset Control value for peripheral PERIPH_11_RST */
    vuint32_t PERIPH_12_RST:1;         /* Reset Control value for peripheral PERIPH_12_RST */
    vuint32_t PERIPH_13_RST:1;         /* Reset Control value for peripheral PERIPH_13_RST */
    vuint32_t PERIPH_14_RST:1;         /* Reset Control value for peripheral PERIPH_14_RST */
    vuint32_t PERIPH_15_RST:1;         /* Reset Control value for peripheral PERIPH_15_RST */
    vuint32_t PERIPH_16_RST:1;         /* Reset Control value for peripheral PERIPH_16_RST */
    vuint32_t PERIPH_17_RST:1;         /* Reset Control value for peripheral PERIPH_17_RST */
    vuint32_t PERIPH_18_RST:1;         /* Reset Control value for peripheral PERIPH_18_RST */
    vuint32_t PERIPH_19_RST:1;         /* Reset Control value for peripheral PERIPH_19_RST */
    vuint32_t PERIPH_20_RST:1;         /* Reset Control value for peripheral PERIPH_20_RST */
    vuint32_t PERIPH_21_RST:1;         /* Reset Control value for peripheral PERIPH_21_RST */
    vuint32_t PERIPH_22_RST:1;         /* Reset Control value for peripheral PERIPH_22_RST */
    vuint32_t PERIPH_23_RST:1;         /* Reset Control value for peripheral PERIPH_23_RST */
    vuint32_t PERIPH_24_RST:1;         /* Reset Control value for peripheral PERIPH_24_RST */
    vuint32_t PERIPH_25_RST:1;         /* Reset Control value for peripheral PERIPH_25_RST */
    vuint32_t PERIPH_26_RST:1;         /* Reset Control value for peripheral PERIPH_26_RST */
    vuint32_t PERIPH_27_RST:1;         /* Reset Control value for peripheral PERIPH_27_RST */
    vuint32_t PERIPH_28_RST:1;         /* Reset Control value for peripheral PERIPH_28_RST */
    vuint32_t PERIPH_29_RST:1;         /* Reset Control value for peripheral PERIPH_29_RST */
    vuint32_t PERIPH_30_RST:1;         /* Reset Control value for peripheral PERIPH_30_RST */
    vuint32_t PERIPH_31_RST:1;         /* Reset Control value for peripheral PERIPH_31_RST */
  } B;
} MC_RGM_PRST_0_PRST_0_tag;

typedef struct MC_RGM_PRST_0_struct_tag {
  MC_RGM_PRST_0_PRST_0_tag PRST_0;     /* Peripheral Reset */
  uint8_t PRST_0_reserved0[4];
} MC_RGM_PRST_0_tag;

typedef union MC_RGM_PSTAT_0_PSTAT_0_union_tag { /* Peripheral Reset Status Register */
  vuint32_t R;
  struct {
    vuint32_t PERIPH_0_STAT:1;         /* Reset Status for peripheral PERIPH_0_STAT */
    vuint32_t PERIPH_1_STAT:1;         /* Reset Status for peripheral PERIPH_1_STAT */
    vuint32_t PERIPH_2_STAT:1;         /* Reset Status for peripheral PERIPH_2_STAT */
    vuint32_t PERIPH_3_STAT:1;         /* Reset Status for peripheral PERIPH_3_STAT */
    vuint32_t PERIPH_4_STAT:1;         /* Reset Status for peripheral PERIPH_4_STAT */
    vuint32_t PERIPH_5_STAT:1;         /* Reset Status for peripheral PERIPH_5_STAT */
    vuint32_t PERIPH_6_STAT:1;         /* Reset Status for peripheral PERIPH_6_STAT */
    vuint32_t PERIPH_7_STAT:1;         /* Reset Status for peripheral PERIPH_7_STAT */
    vuint32_t PERIPH_8_STAT:1;         /* Reset Status for peripheral PERIPH_8_STAT */
    vuint32_t PERIPH_9_STAT:1;         /* Reset Status for peripheral PERIPH_9_STAT */
    vuint32_t PERIPH_10_STAT:1;        /* Reset Status for peripheral PERIPH_10_STAT */
    vuint32_t PERIPH_11_STAT:1;        /* Reset Status for peripheral PERIPH_11_STAT */
    vuint32_t PERIPH_12_STAT:1;        /* Reset Status for peripheral PERIPH_12_STAT */
    vuint32_t PERIPH_13_STAT:1;        /* Reset Status for peripheral PERIPH_13_STAT */
    vuint32_t PERIPH_14_STAT:1;        /* Reset Status for peripheral PERIPH_14_STAT */
    vuint32_t PERIPH_15_STAT:1;        /* Reset Status for peripheral PERIPH_15_STAT */
    vuint32_t PERIPH_16_STAT:1;        /* Reset Status for peripheral PERIPH_16_STAT */
    vuint32_t PERIPH_17_STAT:1;        /* Reset Status for peripheral PERIPH_17_STAT */
    vuint32_t PERIPH_18_STAT:1;        /* Reset Status for peripheral PERIPH_18_STAT */
    vuint32_t PERIPH_19_STAT:1;        /* Reset Status for peripheral PERIPH_19_STAT */
    vuint32_t PERIPH_20_STAT:1;        /* Reset Status for peripheral PERIPH_20_STAT */
    vuint32_t PERIPH_21_STAT:1;        /* Reset Status for peripheral PERIPH_21_STAT */
    vuint32_t PERIPH_22_STAT:1;        /* Reset Status for peripheral PERIPH_22_STAT */
    vuint32_t PERIPH_23_STAT:1;        /* Reset Status for peripheral PERIPH_23_STAT */
    vuint32_t PERIPH_24_STAT:1;        /* Reset Status for peripheral PERIPH_24_STAT */
    vuint32_t PERIPH_25_STAT:1;        /* Reset Status for peripheral PERIPH_25_STAT */
    vuint32_t PERIPH_26_STAT:1;        /* Reset Status for peripheral PERIPH_26_STAT */
    vuint32_t PERIPH_27_STAT:1;        /* Reset Status for peripheral PERIPH_27_STAT */
    vuint32_t PERIPH_28_STAT:1;        /* Reset Status for peripheral PERIPH_28_STAT */
    vuint32_t PERIPH_29_STAT:1;        /* Reset Status for peripheral PERIPH_29_STAT */
    vuint32_t PERIPH_30_STAT:1;        /* Reset Status for peripheral PERIPH_30_STAT */
    vuint32_t PERIPH_31_STAT:1;        /* Reset Status for peripheral PERIPH_31_STAT */
  } B;
} MC_RGM_PSTAT_0_PSTAT_0_tag;

typedef struct MC_RGM_PSTAT_0_struct_tag {
  MC_RGM_PSTAT_0_PSTAT_0_tag PSTAT_0;  /* Peripheral Reset Status Register */
  uint8_t PSTAT_0_reserved0[4];
} MC_RGM_PSTAT_0_tag;

struct MC_RGM_tag {
  MC_RGM_DES_tag DES;                  /* Destructive Event Status Register */
  uint8_t MC_RGM_reserved0[4];
  MC_RGM_FES_tag FES;                  /* Functional /External Reset Status Register */
  uint8_t MC_RGM_reserved1[8];
  MC_RGM_FREC_tag FREC;                /* Functional Reset Escalation Counter Register */
  MC_RGM_FRET_tag FRET;                /* Functional Reset Escalation Threshold Register */
  MC_RGM_DRET_tag DRET;                /* Destructive Reset Escalation Threshold Register */
  MC_RGM_ERCTRL_tag ERCTRL;            /* External Reset Control Register */
  MC_RGM_RDSS_tag RDSS;                /* Reset During Standby Status Register */
  uint8_t MC_RGM_reserved2[24];
  MC_RGM_PRST_0_tag PRST_0[8];
  uint8_t MC_RGM_reserved3[192];
  MC_RGM_PSTAT_0_tag PSTAT_0[8];
};


/* ============================================================================
   =============================== Module: MDM_AP =============================
   ============================================================================ */

typedef union MDM_AP_STATUS_union_tag { /* MDM_AP status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t SYSTEM_RESET:1;
    vuint32_t _unused_3:2;             /* Reserved */
    vuint32_t READY_FOR_DBG:1;
    vuint32_t CSYSPWRUPREQ:1;          /* Status of CSYSPWRUPREQ from SWJ-DP */
    vuint32_t CDBGPWRUPREQ:1;          /* Status of CDBGPWRUPREQ from SWJ-DP */
    vuint32_t JTAG_ACTIVE:1;
    vuint32_t _unused_9:3;             /* Reserved */
    vuint32_t CM7_0_HALTED:1;
    vuint32_t CM7_1_HALTED:1;
    vuint32_t CM7_2_HALTED:1;
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t CM7_0_SLEEPDEEP:1;
    vuint32_t CM7_1_SLEEPDEEP:1;
    vuint32_t CM7_2_SLEEPDEEP:1;
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t CM7_0_SLEEPING:1;
    vuint32_t CM7_1_SLEEPING:1;
    vuint32_t CM7_2_SLEEPING:1;
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:4;            /* Reserved */
    vuint32_t M7_0_DBGRSTRTD:1;
    vuint32_t M7_1_DBGRSTRTD:1;
    vuint32_t M7_2_DBGRSTRTD:1;
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} MDM_AP_STATUS_tag;

typedef union MDM_AP_CONTROL_union_tag { /* MDM_AP control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;             /* Reserved */
    vuint32_t DBG_SETUP_DONE:1;
    vuint32_t SYSRESETREQ:1;           /* System destructive reset */
    vuint32_t SYSFUNCRST:1;            /* System functional reset */
    vuint32_t ETR_HANDSHAKE_0:1;
    vuint32_t ETR_HANDSHAKE_1:1;
    vuint32_t CM7_0_EDBGREQ:1;
    vuint32_t CM7_1_EDBGREQ:1;
    vuint32_t CM7_2_EDBGREQ:1;
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t MSK_LOCKSTEP_ALARM_CM70:1;
    vuint32_t MSK_LOCKSTEP_ALARM_CM71:1;
    vuint32_t MSK_LOCKSTEP_ALARM_CM72:1;
    vuint32_t DIS_POR_WDOG_MSK:1;
    vuint32_t CA53_A0_EDBGREQ:1;
    vuint32_t CA53_A1_EDBGREQ:1;
    vuint32_t CA53_B0_EDBGREQ:1;
    vuint32_t CA53_B1_EDBGREQ:1;
    vuint32_t TPIU_OVERRIDE:1;
    vuint32_t ETR_OVERRIDE:1;
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t MSK_DBG_FAULT:1;
    vuint32_t MSK_FCCU_RST_TRIGGER:1;
    vuint32_t _unused_25:3;            /* Reserved */
    vuint32_t M7_0_DBGRSTRT:1;         /* CM7 debug restart input to CM7_0 core */
    vuint32_t M7_1_DBGRSTRT:1;         /* CM7 debug restart input to CM7_1 core */
    vuint32_t M7_2_DBGRSTRT:1;         /* CM7 debug restart input to CM7_2 core */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} MDM_AP_CONTROL_tag;

typedef union MDM_AP_WIR_EN_union_tag { /* WIR enable */
  vuint32_t R;
  struct {
    vuint32_t STANDBY_EN:1;
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MDM_AP_WIR_EN_tag;

typedef union MDM_AP_WIR_REL_union_tag { /* WIR release */
  vuint32_t R;
  struct {
    vuint32_t RESET_REL:1;             /* Reset release */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MDM_AP_WIR_REL_tag;

typedef union MDM_AP_STATUS2_union_tag { /* MDM_AP status 2 */
  vuint32_t R;
  struct {
    vuint32_t CA53_A0_DBGMODE:1;
    vuint32_t CA53_A1_DBGMODE:1;
    vuint32_t CA53_B0_DBGMODE:1;
    vuint32_t CA53_B1_DBGMODE:1;
    vuint32_t CA53_A0_WFI:1;
    vuint32_t CA53_A1_WFI:1;
    vuint32_t CA53_B0_WFI:1;
    vuint32_t CA53_B1_WFI:1;
    vuint32_t CA53_A0_WFE:1;
    vuint32_t CA53_A1_WFE:1;
    vuint32_t CA53_B0_WFE:1;
    vuint32_t CA53_B1_WFE:1;
    vuint32_t _unused_12:4;            /* Reserved */
    vuint32_t _unused_16:4;            /* Reserved */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} MDM_AP_STATUS2_tag;

typedef union MDM_AP_CORTEX_A53_A0_IP_DBG_union_tag { /* Cortex-A53 A0 debug */
  vuint32_t R;
  struct {
    vuint32_t CA53_A0_IP_DBGDIS:1;
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MDM_AP_CORTEX_A53_A0_IP_DBG_tag;

typedef union MDM_AP_CONTROL2_union_tag { /* MDM_AP control 2 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;             /* Reserved */
    vuint32_t LLCE_C0_EDBGRQ:1;        /* LLCE C0 EDBGRQ */
    vuint32_t LLCE_C1_EDBGRQ:1;        /* LLCE C1 EDBGRQ */
    vuint32_t LLCE_C2_EDBGRQ:1;        /* LLCE C2 EDBGRQ */
    vuint32_t LLCE_C3_EDBGRQ:1;        /* LLCE C3 EDBGRQ */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MDM_AP_CONTROL2_tag;

typedef union MDM_AP_CA53_A1_IP_DBG_union_tag { /* Cortex-A53 A1 debug */
  vuint32_t R;
  struct {
    vuint32_t CA53_A1_IP_DBGDIS:1;
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MDM_AP_CA53_A1_IP_DBG_tag;

typedef union MDM_AP_CORTEX_A53_B0_IP_DBG_union_tag { /* Cortex-A53 B0 debug */
  vuint32_t R;
  struct {
    vuint32_t CA53_B0_IP_DBGDIS:1;
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MDM_AP_CORTEX_A53_B0_IP_DBG_tag;

typedef union MDM_AP_CORTEX_A53_B1_IP_DBG_union_tag { /* Cortex-A53 B1 debug */
  vuint32_t R;
  struct {
    vuint32_t CA53_B1_IP_DBGDIS:1;
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MDM_AP_CORTEX_A53_B1_IP_DBG_tag;

typedef union MDM_AP_CORTEX_M7_0_IP_DBG_union_tag { /* Cortex M7_0 debug */
  vuint32_t R;
  struct {
    vuint32_t CM7_0_IP_DBGDIS:1;
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MDM_AP_CORTEX_M7_0_IP_DBG_tag;

typedef union MDM_AP_CORTEX_M7_1_IP_DBG_union_tag { /* Cortex M7_1 debug */
  vuint32_t R;
  struct {
    vuint32_t CM7_1_IP_DBGDIS:1;
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MDM_AP_CORTEX_M7_1_IP_DBG_tag;

typedef union MDM_AP_CORTEX_M7_2_IP_DBG_union_tag { /* Cortex M7_2 debug */
  vuint32_t R;
  struct {
    vuint32_t CM7_2_IP_DBGDIS:1;
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MDM_AP_CORTEX_M7_2_IP_DBG_tag;

typedef union MDM_AP_DAP_EN_CTRL_union_tag { /* DAP enable control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;             /* Reserved */
    vuint32_t GDBGEN:1;
    vuint32_t GNIDEN:1;
    vuint32_t GSPIDEN:1;
    vuint32_t GSPNIDEN:1;
    vuint32_t _unused_8:20;            /* Reserved */
    vuint32_t CDBGEN:1;
    vuint32_t CNIDEN:1;
    vuint32_t CSPIDEN:1;
    vuint32_t CSPNIDEN:1;
  } B;
} MDM_AP_DAP_EN_CTRL_tag;

struct MDM_AP_tag {
  MDM_AP_STATUS_tag STATUS;            /* MDM_AP status */
  MDM_AP_CONTROL_tag CONTROL;          /* MDM_AP control */
  uint8_t MDM_AP_reserved0[40];
  MDM_AP_WIR_EN_tag WIR_EN;            /* WIR enable */
  uint8_t MDM_AP_reserved1[4];
  MDM_AP_WIR_REL_tag WIR_REL;          /* WIR release */
  uint8_t MDM_AP_reserved2[4];
  MDM_AP_STATUS2_tag STATUS2;          /* MDM_AP status 2 */
  uint8_t MDM_AP_reserved3[44];
  MDM_AP_CORTEX_A53_A0_IP_DBG_tag CORTEX_A53_A0_IP_DBG; /* Cortex-A53 A0 debug */
  MDM_AP_CONTROL2_tag CONTROL2;        /* MDM_AP control 2 */
  MDM_AP_CA53_A1_IP_DBG_tag CA53_A1_IP_DBG; /* Cortex-A53 A1 debug */
  uint8_t MDM_AP_reserved4[4];
  MDM_AP_CORTEX_A53_B0_IP_DBG_tag CORTEX_A53_B0_IP_DBG; /* Cortex-A53 B0 debug */
  uint8_t MDM_AP_reserved5[4];
  MDM_AP_CORTEX_A53_B1_IP_DBG_tag CORTEX_A53_B1_IP_DBG; /* Cortex-A53 B1 debug */
  uint8_t MDM_AP_reserved6[4];
  MDM_AP_CORTEX_M7_0_IP_DBG_tag CORTEX_M7_0_IP_DBG; /* Cortex M7_0 debug */
  uint8_t MDM_AP_reserved7[4];
  MDM_AP_CORTEX_M7_1_IP_DBG_tag CORTEX_M7_1_IP_DBG; /* Cortex M7_1 debug */
  uint8_t MDM_AP_reserved8[4];
  MDM_AP_CORTEX_M7_2_IP_DBG_tag CORTEX_M7_2_IP_DBG; /* Cortex M7_2 debug */
  uint8_t MDM_AP_reserved9[28];
  MDM_AP_DAP_EN_CTRL_tag DAP_EN_CTRL;  /* DAP enable control */
};


/* ============================================================================
   =============================== Module: MSCM ===============================
   ============================================================================ */

typedef union MSCM_CPXTYPE_union_tag { /* Processor x Type Register */
  vuint32_t R;
  struct {
    vuint32_t PERSONALITY:32;          /* PERSONALITY */
  } B;
} MSCM_CPXTYPE_tag;

typedef union MSCM_CPXNUM_union_tag {  /* Processor x Number Register */
  vuint32_t R;
  struct {
    vuint32_t CPN:8;                   /* Processor Number */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MSCM_CPXNUM_tag;

typedef union MSCM_CPXREV_union_tag {  /* Processor x Revision */
  vuint32_t R;
  struct {
    vuint32_t RYPZ:8;                  /* Processor Revision */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MSCM_CPXREV_tag;

typedef union MSCM_CPXCFG0_union_tag { /* Processor x Configuration 0 Register */
  vuint32_t R;
  struct {
    vuint32_t DCWY:8;                  /* Level 1 Data Cache Ways */
    vuint32_t DCSZ:8;                  /* Level 1 Data Cache Size */
    vuint32_t ICWY:8;                  /* Level 1 Instruction Cache Ways */
    vuint32_t ICSZ:8;                  /* Level 1 Instruction Cache Size */
  } B;
} MSCM_CPXCFG0_tag;

typedef union MSCM_CPXCFG1_union_tag { /* Processor x Configuration 1 Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t L2WY:8;                  /* Level 2 Cache Ways */
    vuint32_t L2SZ:8;                  /* Level 2 Cache Size */
  } B;
} MSCM_CPXCFG1_tag;

typedef union MSCM_CPXCFG2_union_tag { /* Processor x Configuration 2 Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t _unused_1:7;             /* Reserved */
    vuint32_t ITCMSZ:8;                /* Instruction Tightly-coupled Memory Size */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:7;            /* Reserved */
    vuint32_t DTCMSZ:8;                /* Tightly-coupled Data Memory Size */
  } B;
} MSCM_CPXCFG2_tag;

typedef union MSCM_CPXCFG3_union_tag { /* Processor x Configuration 3 Register */
  vuint32_t R;
  struct {
    vuint32_t HW_FPU:1;                /* Floating Point Unit */
    vuint32_t SIMD:1;                  /* SIMD/NEON Instruction Support */
    vuint32_t MMU:1;                   /* Memory Management Unit */
    vuint32_t CMP:1;                   /* Core Memory Protection Unit */
    vuint32_t CPY:1;                   /* Cryptography */
    vuint32_t _unused_5:27;            /* Reserved */
  } B;
} MSCM_CPXCFG3_tag;

typedef union MSCM_CP0TYPE_union_tag { /* Processor 0 Type Register */
  vuint32_t R;
  struct {
    vuint32_t PERSONALITY:32;          /* PERSONALITY */
  } B;
} MSCM_CP0TYPE_tag;

typedef union MSCM_CP0NUM_union_tag {  /* Processor 0 Number Register */
  vuint32_t R;
  struct {
    vuint32_t CPN:8;                   /* Processor Number */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MSCM_CP0NUM_tag;

typedef union MSCM_CP0REV_union_tag {  /* Processor 0 Count Register */
  vuint32_t R;
  struct {
    vuint32_t RYPZ:8;                  /* Processor Revision */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MSCM_CP0REV_tag;

typedef union MSCM_CP0CFG0_union_tag { /* Processor 0 Configuration 0 Register */
  vuint32_t R;
  struct {
    vuint32_t DCWY:8;                  /* Level 1 Data Cache Ways */
    vuint32_t DCSZ:8;                  /* Level 1 Data Cache Size */
    vuint32_t ICWY:8;                  /* Level 1 Instruction Cache Ways */
    vuint32_t ICSZ:8;                  /* Level 1 Instruction Cache Size */
  } B;
} MSCM_CP0CFG0_tag;

typedef union MSCM_CP0CFG1_union_tag { /* Processor 0 Configuration 1 Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t L2WY:8;                  /* Level 2 Cache Ways */
    vuint32_t L2SZ:8;                  /* Level 2 Cache Size */
  } B;
} MSCM_CP0CFG1_tag;

typedef union MSCM_CP0CFG2_union_tag { /* Processor 0 Configuration 2 Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t _unused_1:7;             /* Reserved */
    vuint32_t TMUSZ:8;                 /* Tightly-coupled Memory Upper Size */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:7;            /* Reserved */
    vuint32_t TMLSZ:8;                 /* Tightly-coupled Memory Lower Size */
  } B;
} MSCM_CP0CFG2_tag;

typedef union MSCM_CP0CFG3_union_tag { /* Processor 0 Configuration 3 Register */
  vuint32_t R;
  struct {
    vuint32_t HW_FPU:1;                /* Floating Point Unit */
    vuint32_t SIMD:1;                  /* SIMD/NEON instruction support */
    vuint32_t MMU:1;                   /* Memory Management Unit */
    vuint32_t CMP:1;                   /* Core Memory Protection Unit */
    vuint32_t CPY:1;                   /* Cryptography */
    vuint32_t _unused_5:27;            /* Reserved */
  } B;
} MSCM_CP0CFG3_tag;

typedef union MSCM_CP1TYPE_union_tag { /* Processor 1 Type Register */
  vuint32_t R;
  struct {
    vuint32_t PERSONALITY:32;          /* PERSONALITY */
  } B;
} MSCM_CP1TYPE_tag;

typedef union MSCM_CP1NUM_union_tag {  /* Processor 1 Number Register */
  vuint32_t R;
  struct {
    vuint32_t CPN:8;                   /* Processor Number */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MSCM_CP1NUM_tag;

typedef union MSCM_CP1REV_union_tag {  /* Processor 1 Count Register */
  vuint32_t R;
  struct {
    vuint32_t RYPZ:8;                  /* Processor Revision */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MSCM_CP1REV_tag;

typedef union MSCM_CP1CFG0_union_tag { /* Processor 1 Configuration 0 Register */
  vuint32_t R;
  struct {
    vuint32_t DCWY:8;                  /* Level 1 Data Cache Ways */
    vuint32_t DCSZ:8;                  /* Level 1 Data Cache Size */
    vuint32_t ICWY:8;                  /* Level 1 Instruction Cache Ways */
    vuint32_t ICSZ:8;                  /* Level 1 Instruction Cache Size */
  } B;
} MSCM_CP1CFG0_tag;

typedef union MSCM_CP1CFG1_union_tag { /* Processor 1 Configuration 1 Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t L2WY:8;                  /* Level 2 Cache Ways */
    vuint32_t L2SZ:8;                  /* Level 2 Cache Size */
  } B;
} MSCM_CP1CFG1_tag;

typedef union MSCM_CP1CFG2_union_tag { /* Processor 1 Configuration 2 Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t _unused_1:7;             /* Reserved */
    vuint32_t TMUSZ:8;                 /* Tightly-coupled Memory Upper Size */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:7;            /* Reserved */
    vuint32_t TMLSZ:8;                 /* Tightly-coupled Memory Lower Size */
  } B;
} MSCM_CP1CFG2_tag;

typedef union MSCM_CP1CFG3_union_tag { /* Processor 1 Configuration 3 Register */
  vuint32_t R;
  struct {
    vuint32_t HW_FPU:1;                /* Floating Point Unit */
    vuint32_t SIMD:1;                  /* SIMD/NEON instruction support */
    vuint32_t MMU:1;                   /* Memory Management Unit */
    vuint32_t CMP:1;                   /* Core Memory Protection Unit */
    vuint32_t CPY:1;                   /* Cryptography */
    vuint32_t _unused_5:27;            /* Reserved */
  } B;
} MSCM_CP1CFG3_tag;

typedef union MSCM_CP2TYPE_union_tag { /* Processor 2 Type Register */
  vuint32_t R;
  struct {
    vuint32_t PERSONALITY:32;          /* PERSONALITY */
  } B;
} MSCM_CP2TYPE_tag;

typedef union MSCM_CP2NUM_union_tag {  /* Processor 2 Number Register */
  vuint32_t R;
  struct {
    vuint32_t CPN:8;                   /* Processor Number */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MSCM_CP2NUM_tag;

typedef union MSCM_CP2REV_union_tag {  /* Processor 1 Count Register */
  vuint32_t R;
  struct {
    vuint32_t RYPZ:8;                  /* Processor Revision */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MSCM_CP2REV_tag;

typedef union MSCM_CP2CFG0_union_tag { /* Processor 2 Configuration 0 Register */
  vuint32_t R;
  struct {
    vuint32_t DCWY:8;                  /* Level 1 Data Cache Ways */
    vuint32_t DCSZ:8;                  /* Level 1 Data Cache Size */
    vuint32_t ICWY:8;                  /* Level 1 Instruction Cache Ways */
    vuint32_t ICSZ:8;                  /* Level 1 Instruction Cache Size */
  } B;
} MSCM_CP2CFG0_tag;

typedef union MSCM_CP2CFG1_union_tag { /* Processor 2 Configuration 1 Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t L2WY:8;                  /* Level 2 Cache Ways */
    vuint32_t L2SZ:8;                  /* Level 2 Cache Size */
  } B;
} MSCM_CP2CFG1_tag;

typedef union MSCM_CP2CFG2_union_tag { /* Processor 2 Configuration 2 Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t _unused_1:7;             /* Reserved */
    vuint32_t TMUSZ:8;                 /* Tightly-coupled Memory Upper Size */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:7;            /* Reserved */
    vuint32_t TMLSZ:8;                 /* Tightly-coupled Memory Lower Size */
  } B;
} MSCM_CP2CFG2_tag;

typedef union MSCM_CP2CFG3_union_tag { /* Processor 2 Configuration 3 Register */
  vuint32_t R;
  struct {
    vuint32_t HW_FPU:1;                /* Floating Point Unit */
    vuint32_t SIMD:1;                  /* SIMD/NEON instruction support */
    vuint32_t MMU:1;                   /* Memory Management Unit */
    vuint32_t CMP:1;                   /* Core Memory Protection Unit */
    vuint32_t CPY:1;                   /* Cryptography */
    vuint32_t _unused_5:27;            /* Reserved */
  } B;
} MSCM_CP2CFG3_tag;

typedef union MSCM_CP3TYPE_union_tag { /* Processor 3 Type Register */
  vuint32_t R;
  struct {
    vuint32_t PERSONALITY:32;          /* PERSONALITY */
  } B;
} MSCM_CP3TYPE_tag;

typedef union MSCM_CP3NUM_union_tag {  /* Processor 3 Number Register */
  vuint32_t R;
  struct {
    vuint32_t CPN:8;                   /* Processor Number */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MSCM_CP3NUM_tag;

typedef union MSCM_CP3REV_union_tag {  /* Processor 1 Count Register */
  vuint32_t R;
  struct {
    vuint32_t RYPZ:8;                  /* Processor Revision */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MSCM_CP3REV_tag;

typedef union MSCM_CP3CFG0_union_tag { /* Processor 3 Configuration 0 Register */
  vuint32_t R;
  struct {
    vuint32_t DCWY:8;                  /* Level 1 Data Cache Ways */
    vuint32_t DCSZ:8;                  /* Level 1 Data Cache Size */
    vuint32_t ICWY:8;                  /* Level 1 Instruction Cache Ways */
    vuint32_t ICSZ:8;                  /* Level 1 Instruction Cache Size */
  } B;
} MSCM_CP3CFG0_tag;

typedef union MSCM_CP3CFG1_union_tag { /* Processor 3 Configuration 1 Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t L2WY:8;                  /* Level 2 Cache Ways */
    vuint32_t L2SZ:8;                  /* Level 2 Cache Size */
  } B;
} MSCM_CP3CFG1_tag;

typedef union MSCM_CP3CFG2_union_tag { /* Processor 3 Configuration 2 Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t _unused_1:7;             /* Reserved */
    vuint32_t TMUSZ:8;                 /* Tightly-coupled Memory Upper Size */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:7;            /* Reserved */
    vuint32_t TMLSZ:8;                 /* Tightly-coupled Memory Lower Size */
  } B;
} MSCM_CP3CFG2_tag;

typedef union MSCM_CP3CFG3_union_tag { /* Processor 3 Configuration 3 Register */
  vuint32_t R;
  struct {
    vuint32_t HW_FPU:1;                /* Floating Point Unit */
    vuint32_t SIMD:1;                  /* SIMD/NEON instruction support */
    vuint32_t MMU:1;                   /* Memory Management Unit */
    vuint32_t CMP:1;                   /* Core Memory Protection Unit */
    vuint32_t CPY:1;                   /* Cryptography */
    vuint32_t _unused_5:27;            /* Reserved */
  } B;
} MSCM_CP3CFG3_tag;

typedef union MSCM_CP4TYPE_union_tag { /* Processor 4 Type Register */
  vuint32_t R;
  struct {
    vuint32_t PERSONALITY:32;          /* PERSONALITY */
  } B;
} MSCM_CP4TYPE_tag;

typedef union MSCM_CP4NUM_union_tag {  /* Processor 4 Number Register */
  vuint32_t R;
  struct {
    vuint32_t CPN:8;                   /* Processor Number */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MSCM_CP4NUM_tag;

typedef union MSCM_CP4REV_union_tag {  /* Processor 4 Count Register */
  vuint32_t R;
  struct {
    vuint32_t RYPZ:8;                  /* Processor Revision */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MSCM_CP4REV_tag;

typedef union MSCM_CP4CFG0_union_tag { /* Processor 3 Configuration 0 Register */
  vuint32_t R;
  struct {
    vuint32_t DCWY:8;                  /* Level 1 Data Cache Ways */
    vuint32_t DCSZ:8;                  /* Level 1 Data Cache Size */
    vuint32_t ICWY:8;                  /* Level 1 Instruction Cache Ways */
    vuint32_t ICSZ:8;                  /* ICSZ */
  } B;
} MSCM_CP4CFG0_tag;

typedef union MSCM_CP4CFG1_union_tag { /* Processor 4 Configuration 1 Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t L2WY:8;                  /* Level 2 Cache Ways */
    vuint32_t L2SZ:8;                  /* Level 2 Cache Size */
  } B;
} MSCM_CP4CFG1_tag;

typedef union MSCM_CP4CFG2_union_tag { /* Processor 3 Configuration 2 Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t _unused_1:7;             /* Reserved */
    vuint32_t TMUSZ:8;                 /* Tightly-coupled Memory Upper Size */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:7;            /* Reserved */
    vuint32_t TMLSZ:8;                 /* Tightly-coupled Memory Lower Size */
  } B;
} MSCM_CP4CFG2_tag;

typedef union MSCM_CP4CFG3_union_tag { /* Processor 3 Configuration 3 Register */
  vuint32_t R;
  struct {
    vuint32_t HW_FPU:1;                /* Floating Point Unit */
    vuint32_t SIMD:1;                  /* SIMD/NEON instruction support */
    vuint32_t MMU:1;                   /* Memory Management Unit */
    vuint32_t CMP:1;                   /* Core Memory Protection Unit */
    vuint32_t CPY:1;                   /* Cryptography */
    vuint32_t _unused_5:27;            /* Reserved */
  } B;
} MSCM_CP4CFG3_tag;

typedef union MSCM_CP5TYPE_union_tag { /* Processor 4 Type Register */
  vuint32_t R;
  struct {
    vuint32_t PERSONALITY:32;          /* PERSONALITY */
  } B;
} MSCM_CP5TYPE_tag;

typedef union MSCM_CP5NUM_union_tag {  /* Processor 5 Number Register */
  vuint32_t R;
  struct {
    vuint32_t CPN:8;                   /* Processor Number */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MSCM_CP5NUM_tag;

typedef union MSCM_CP5REV_union_tag {  /* Processor 5 Count Register */
  vuint32_t R;
  struct {
    vuint32_t RYPZ:8;                  /* Processor Revision */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MSCM_CP5REV_tag;

typedef union MSCM_CP5CFG0_union_tag { /* Processor 5 Configuration 0 Register */
  vuint32_t R;
  struct {
    vuint32_t DCWY:8;                  /* Level 1 Data Cache Ways */
    vuint32_t DCSZ:8;                  /* Level 1 Data Cache Size */
    vuint32_t ICWY:8;                  /* Level 1 Instruction Cache Ways */
    vuint32_t ICSZ:8;                  /* Level 1 Instruction Cache Size */
  } B;
} MSCM_CP5CFG0_tag;

typedef union MSCM_CP5CFG1_union_tag { /* Processor 5 Configuration 1 Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t L2WY:8;                  /* Level 2 Cache Ways */
    vuint32_t L2SZ:8;                  /* Level 2 Cache Size */
  } B;
} MSCM_CP5CFG1_tag;

typedef union MSCM_CP5CFG2_union_tag { /* Processor 5 Configuration 2 Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t _unused_1:7;             /* Reserved */
    vuint32_t TMUSZ:8;                 /* Tightly-coupled Memory Upper Size */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:7;            /* Reserved */
    vuint32_t TMLSZ:8;                 /* Tightly-coupled Memory Lower Size */
  } B;
} MSCM_CP5CFG2_tag;

typedef union MSCM_CP5CFG3_union_tag { /* Processor 5 Configuration 3 Register */
  vuint32_t R;
  struct {
    vuint32_t HW_FPU:1;                /* Floating Point Unit */
    vuint32_t SIMD:1;                  /* SIMD/NEON instruction support */
    vuint32_t MMU:1;                   /* Memory Management Unit */
    vuint32_t CMP:1;                   /* Core Memory Protection Unit */
    vuint32_t CPY:1;                   /* Cryptography */
    vuint32_t _unused_5:27;            /* Reserved */
  } B;
} MSCM_CP5CFG3_tag;

typedef union MSCM_CP6TYPE_union_tag { /* Processor 6 Type Register */
  vuint32_t R;
  struct {
    vuint32_t PERSONALITY:32;          /* PERSONALITY */
  } B;
} MSCM_CP6TYPE_tag;

typedef union MSCM_CP6NUM_union_tag {  /* Processor 6 Number Register */
  vuint32_t R;
  struct {
    vuint32_t CPN:8;                   /* Processor Number */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MSCM_CP6NUM_tag;

typedef union MSCM_CP6REV_union_tag {  /* Processor 6 Count Register */
  vuint32_t R;
  struct {
    vuint32_t RYPZ:8;                  /* Processor Revision */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MSCM_CP6REV_tag;

typedef union MSCM_CP6CFG0_union_tag { /* Processor 6 Configuration 0 Register */
  vuint32_t R;
  struct {
    vuint32_t DCWY:8;                  /* Level 1 Data Cache Ways */
    vuint32_t DCSZ:8;                  /* Level 1 Data Cache Size */
    vuint32_t ICWY:8;                  /* Level 1 Instruction Cache Ways */
    vuint32_t ICSZ:8;                  /* Level 1 Instruction Cache Size. */
  } B;
} MSCM_CP6CFG0_tag;

typedef union MSCM_CP6CFG1_union_tag { /* Processor 6 Configuration 1 Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t L2WY:8;                  /* Level 2 Cache Ways */
    vuint32_t L2SZ:8;                  /* Level 2 Cache Size */
  } B;
} MSCM_CP6CFG1_tag;

typedef union MSCM_CP6CFG2_union_tag { /* Processor 6 Configuration 2 Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t _unused_1:7;             /* Reserved */
    vuint32_t TMUSZ:8;                 /* Tightly-coupled Memory Upper Size */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:7;            /* Reserved */
    vuint32_t TMLSZ:8;                 /* Tightly-coupled Memory Lower Size */
  } B;
} MSCM_CP6CFG2_tag;

typedef union MSCM_CP6CFG3_union_tag { /* Processor 6 Configuration 3 Register */
  vuint32_t R;
  struct {
    vuint32_t HW_FPU:1;                /* Floating Point Unit */
    vuint32_t SIMD:1;                  /* SIMD/NEON instruction support */
    vuint32_t MMU:1;                   /* Memory Management Unit */
    vuint32_t CMP:1;                   /* Core Memory Protection Unit */
    vuint32_t CPY:1;                   /* Cryptography */
    vuint32_t _unused_5:27;            /* Reserved */
  } B;
} MSCM_CP6CFG3_tag;

typedef union MSCM_IRCP0ISR0_union_tag { /* Interrupt Router CP0 Interrupt0 Status Register */
  vuint32_t R;
  struct {
    vuint32_t CP0_INT:1;               /* CP0-to-CPn Interrupt */
    vuint32_t CP1_INT:1;               /* CP1-to-CPn Interrupt */
    vuint32_t CP2_INT:1;               /* CP2-to-CPn Interrupt */
    vuint32_t CP3_INT:1;               /* CP3-to-CPn Interrupt */
    vuint32_t CP4_INT:1;               /* CP4-to-CPn Interrupt */
    vuint32_t CP5_INT:1;               /* CP5-to-CPn Interrupt */
    vuint32_t CP6_INT:1;               /* CP6-to-CPn Interrupt */
    vuint32_t _unused_7:25;
  } B;
} MSCM_IRCP0ISR0_tag;

typedef union MSCM_IRCP0IGR0_union_tag { /* Interrupt Router CP0 Interrupt0 Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT_EN:1;                /* Interrupt Enable */
    vuint32_t _unused_1:31;
  } B;
} MSCM_IRCP0IGR0_tag;

typedef union MSCM_IRCP0ISR1_union_tag { /* Interrupt Router CP0 Interrupt1 Status Register */
  vuint32_t R;
  struct {
    vuint32_t CP0_INT:1;               /* CP0-to-CPn Interrupt */
    vuint32_t CP1_INT:1;               /* CP1-to-CPn Interrupt */
    vuint32_t CP2_INT:1;               /* CP2-to-CPn Interrupt */
    vuint32_t CP3_INT:1;               /* CP3-to-CPn Interrupt */
    vuint32_t CP4_INT:1;               /* CP4-to-CPn Interrupt */
    vuint32_t CP5_INT:1;               /* CP5-to-CPn Interrupt */
    vuint32_t CP6_INT:1;               /* CP6-to-CPn Interrupt */
    vuint32_t _unused_7:25;
  } B;
} MSCM_IRCP0ISR1_tag;

typedef union MSCM_IRCP0IGR1_union_tag { /* Interrupt Router CP0 Interrupt1 Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT_EN:1;                /* Interrupt Enable */
    vuint32_t _unused_1:31;
  } B;
} MSCM_IRCP0IGR1_tag;

typedef union MSCM_IRCP0ISR2_union_tag { /* Interrupt Router CP0 Interrupt2 Status Register */
  vuint32_t R;
  struct {
    vuint32_t CP0_INT:1;               /* CP0-to-CPn Interrupt */
    vuint32_t CP1_INT:1;               /* CP1-to-CPn Interrupt */
    vuint32_t CP2_INT:1;               /* CP2-to-CPn Interrupt */
    vuint32_t CP3_INT:1;               /* CP3-to-CPn Interrupt */
    vuint32_t CP4_INT:1;               /* CP4-to-CPn Interrupt */
    vuint32_t CP5_INT:1;               /* CP5-to-CPn Interrupt */
    vuint32_t CP6_INT:1;               /* CP6-to-CPn Interrupt */
    vuint32_t _unused_7:25;
  } B;
} MSCM_IRCP0ISR2_tag;

typedef union MSCM_IRCP0IGR2_union_tag { /* Interrupt Router CP0 Interrupt2 Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT_EN:1;                /* Interrupt Enable */
    vuint32_t _unused_1:31;
  } B;
} MSCM_IRCP0IGR2_tag;

typedef union MSCM_IRCP0ISR3_union_tag { /* Interrupt Router CPn Interruptx Status Register */
  vuint32_t R;
  struct {
    vuint32_t PCIE_INT0:1;             /* PCIe-to-CPn Interrupt0 */
    vuint32_t PCIE_INT1:1;             /* PCIe-to-CPn Interrupt1 */
    vuint32_t PCIE_INT2:1;             /* PCIe-to-CPn Interrupt2 */
    vuint32_t PCIE_INT3:1;             /* PCIe-to-CPn Interrupt3 */
    vuint32_t PCIE_INT4:1;             /* PCIe-to-CPn Interrupt4 */
    vuint32_t PCIE_INT5:1;             /* PCIe-to-CPn Interrupt5 */
    vuint32_t PCIE_INT6:1;             /* PCIe-to-CPn Interrupt6 */
    vuint32_t PCIE_INT7:1;             /* PCIe-to-CPn Interrupt7 */
    vuint32_t PCIE_INT8:1;             /* PCIe-to-CPn Interrupt8 */
    vuint32_t PCIE_INT9:1;             /* PCIe-to-CPn Interrupt9 */
    vuint32_t PCIE_INT10:1;            /* PCIe-to-CPn Interrupt10 */
    vuint32_t PCIE_INT11:1;            /* PCIe-to-CPn Interrupt11 */
    vuint32_t PCIE_INT12:1;            /* PCIe-to-CPn Interrupt12 */
    vuint32_t PCIE_INT13:1;            /* PCIe-to-CPn Interrupt13 */
    vuint32_t PCIE_INT14:1;            /* PCIe-to-CPn Interrupt14 */
    vuint32_t PCIE_INT15:1;            /* PCIe-to-CPn Interrupt15 */
    vuint32_t _unused_16:16;
  } B;
} MSCM_IRCP0ISR3_tag;

typedef union MSCM_IRCP0IGR3_union_tag { /* Interrupt Router CPn Interruptx Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT0_EN:1;               /* Interrupt0 Enable */
    vuint32_t INT1_EN:1;               /* Interrupt1 Enable */
    vuint32_t INT2_EN:1;               /* Interrupt2 Enable */
    vuint32_t INT3_EN:1;               /* Interrupt3 Enable */
    vuint32_t INT4_EN:1;               /* Interrupt4 Enable */
    vuint32_t INT5_EN:1;               /* Interrupt5 Enable */
    vuint32_t INT6_EN:1;               /* Interrupt6 Enable */
    vuint32_t INT7_EN:1;               /* Interrupt7 Enable */
    vuint32_t INT8_EN:1;               /* Interrupt8 Enable */
    vuint32_t INT9_EN:1;               /* Interrupt9 Enable */
    vuint32_t INT10_EN:1;              /* Interrupt10 Enable */
    vuint32_t INT11_EN:1;              /* Interrupt11 Enable */
    vuint32_t INT12_EN:1;              /* Interrupt12 Enable */
    vuint32_t INT13_EN:1;              /* Interrupt13 Enable */
    vuint32_t INT14_EN:1;              /* Interrupt14 Enable */
    vuint32_t INT15_EN:1;              /* Interrupt15 Enable */
    vuint32_t _unused_16:16;
  } B;
} MSCM_IRCP0IGR3_tag;

typedef union MSCM_IRCP1ISR0_union_tag { /* Interrupt Router CP1 Interrupt0 Status Register */
  vuint32_t R;
  struct {
    vuint32_t CP0_INT:1;               /* CP0-to-CPn Interrupt */
    vuint32_t CP1_INT:1;               /* CP1-to-CPn Interrupt */
    vuint32_t CP2_INT:1;               /* CP2-to-CPn Interrupt */
    vuint32_t CP3_INT:1;               /* CP3-to-CPn Interrupt */
    vuint32_t CP4_INT:1;               /* CP4-to-CPn Interrupt */
    vuint32_t CP5_INT:1;               /* CP5-to-CPn Interrupt */
    vuint32_t CP6_INT:1;               /* CP6-to-CPn Interrupt */
    vuint32_t _unused_7:25;
  } B;
} MSCM_IRCP1ISR0_tag;

typedef union MSCM_IRCP1IGR0_union_tag { /* Interrupt Router CP1 Interrupt0 Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT_EN:1;                /* Interrupt Enable */
    vuint32_t _unused_1:31;
  } B;
} MSCM_IRCP1IGR0_tag;

typedef union MSCM_IRCP1ISR1_union_tag { /* Interrupt Router CP1 Interrupt1 Status Register */
  vuint32_t R;
  struct {
    vuint32_t CP0_INT:1;               /* CP0-to-CPn Interrupt */
    vuint32_t CP1_INT:1;               /* CP1-to-CPn Interrupt */
    vuint32_t CP2_INT:1;               /* CP2-to-CPn Interrupt */
    vuint32_t CP3_INT:1;               /* CP3-to-CPn Interrupt */
    vuint32_t CP4_INT:1;               /* CP4-to-CPn Interrupt */
    vuint32_t CP5_INT:1;               /* CP5-to-CPn Interrupt */
    vuint32_t CP6_INT:1;               /* CP6-to-CPn Interrupt */
    vuint32_t _unused_7:25;
  } B;
} MSCM_IRCP1ISR1_tag;

typedef union MSCM_IRCP1IGR1_union_tag { /* Interrupt Router CP1 Interrupt1 Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT_EN:1;                /* Interrupt Enable */
    vuint32_t _unused_1:31;
  } B;
} MSCM_IRCP1IGR1_tag;

typedef union MSCM_IRCP1ISR2_union_tag { /* Interrupt Router CP1 Interrupt2 Status Register */
  vuint32_t R;
  struct {
    vuint32_t CP0_INT:1;               /* CP0-to-CPn Interrupt */
    vuint32_t CP1_INT:1;               /* CP1-to-CPn Interrupt */
    vuint32_t CP2_INT:1;               /* CP2-to-CPn Interrupt */
    vuint32_t CP3_INT:1;               /* CP3-to-CPn Interrupt */
    vuint32_t CP4_INT:1;               /* CP4-to-CPn Interrupt */
    vuint32_t CP5_INT:1;               /* CP5-to-CPn Interrupt */
    vuint32_t CP6_INT:1;               /* CP6-to-CPn Interrupt */
    vuint32_t _unused_7:25;
  } B;
} MSCM_IRCP1ISR2_tag;

typedef union MSCM_IRCP1IGR2_union_tag { /* Interrupt Router CP1 Interrupt2 Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT_EN:1;                /* Interrupt Enable */
    vuint32_t _unused_1:31;
  } B;
} MSCM_IRCP1IGR2_tag;

typedef union MSCM_IRCP1ISR3_union_tag { /* Interrupt Router CPn Interruptx Status Register */
  vuint32_t R;
  struct {
    vuint32_t PCIE_INT0:1;             /* PCIe-to-CPn Interrupt0 */
    vuint32_t PCIE_INT1:1;             /* PCIe-to-CPn Interrupt1 */
    vuint32_t PCIE_INT2:1;             /* PCIe-to-CPn Interrupt2 */
    vuint32_t PCIE_INT3:1;             /* PCIe-to-CPn Interrupt3 */
    vuint32_t PCIE_INT4:1;             /* PCIe-to-CPn Interrupt4 */
    vuint32_t PCIE_INT5:1;             /* PCIe-to-CPn Interrupt5 */
    vuint32_t PCIE_INT6:1;             /* PCIe-to-CPn Interrupt6 */
    vuint32_t PCIE_INT7:1;             /* PCIe-to-CPn Interrupt7 */
    vuint32_t PCIE_INT8:1;             /* PCIe-to-CPn Interrupt8 */
    vuint32_t PCIE_INT9:1;             /* PCIe-to-CPn Interrupt9 */
    vuint32_t PCIE_INT10:1;            /* PCIe-to-CPn Interrupt10 */
    vuint32_t PCIE_INT11:1;            /* PCIe-to-CPn Interrupt11 */
    vuint32_t PCIE_INT12:1;            /* PCIe-to-CPn Interrupt12 */
    vuint32_t PCIE_INT13:1;            /* PCIe-to-CPn Interrupt13 */
    vuint32_t PCIE_INT14:1;            /* PCIe-to-CPn Interrupt14 */
    vuint32_t PCIE_INT15:1;            /* PCIe-to-CPn Interrupt15 */
    vuint32_t _unused_16:16;
  } B;
} MSCM_IRCP1ISR3_tag;

typedef union MSCM_IRCP1IGR3_union_tag { /* Interrupt Router CPn Interruptx Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT0_EN:1;               /* Interrupt0 Enable */
    vuint32_t INT1_EN:1;               /* Interrupt1 Enable */
    vuint32_t INT2_EN:1;               /* Interrupt2 Enable */
    vuint32_t INT3_EN:1;               /* Interrupt3 Enable */
    vuint32_t INT4_EN:1;               /* Interrupt4 Enable */
    vuint32_t INT5_EN:1;               /* Interrupt5 Enable */
    vuint32_t INT6_EN:1;               /* Interrupt6 Enable */
    vuint32_t INT7_EN:1;               /* Interrupt7 Enable */
    vuint32_t INT8_EN:1;               /* Interrupt8 Enable */
    vuint32_t INT9_EN:1;               /* Interrupt9 Enable */
    vuint32_t INT10_EN:1;              /* Interrupt10 Enable */
    vuint32_t INT11_EN:1;              /* Interrupt11 Enable */
    vuint32_t INT12_EN:1;              /* Interrupt12 Enable */
    vuint32_t INT13_EN:1;              /* Interrupt13 Enable */
    vuint32_t INT14_EN:1;              /* Interrupt14 Enable */
    vuint32_t INT15_EN:1;              /* Interrupt15 Enable */
    vuint32_t _unused_16:16;
  } B;
} MSCM_IRCP1IGR3_tag;

typedef union MSCM_IRCP2ISR0_union_tag { /* Interrupt Router CP2 Interrupt0 Status Register */
  vuint32_t R;
  struct {
    vuint32_t CP0_INT:1;               /* CP0-to-CPn Interrupt */
    vuint32_t CP1_INT:1;               /* CP1-to-CPn Interrupt */
    vuint32_t CP2_INT:1;               /* CP2-to-CPn Interrupt */
    vuint32_t CP3_INT:1;               /* CP3-to-CPn Interrupt */
    vuint32_t CP4_INT:1;               /* CP4-to-CPn Interrupt */
    vuint32_t CP5_INT:1;               /* CP5-to-CPn Interrupt */
    vuint32_t CP6_INT:1;               /* CP6-to-CPn Interrupt */
    vuint32_t _unused_7:25;
  } B;
} MSCM_IRCP2ISR0_tag;

typedef union MSCM_IRCP2IGR0_union_tag { /* Interrupt Router CP2 Interrupt0 Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT_EN:1;                /* Interrupt Enable */
    vuint32_t _unused_1:31;
  } B;
} MSCM_IRCP2IGR0_tag;

typedef union MSCM_IRCP2ISR1_union_tag { /* Interrupt Router CP2 Interrupt1 Status Register */
  vuint32_t R;
  struct {
    vuint32_t CP0_INT:1;               /* CP0-to-CPn Interrupt */
    vuint32_t CP1_INT:1;               /* CP1-to-CPn Interrupt */
    vuint32_t CP2_INT:1;               /* CP2-to-CPn Interrupt */
    vuint32_t CP3_INT:1;               /* CP3-to-CPn Interrupt */
    vuint32_t CP4_INT:1;               /* CP4-to-CPn Interrupt */
    vuint32_t CP5_INT:1;               /* CP5-to-CPn Interrupt */
    vuint32_t CP6_INT:1;               /* CP6-to-CPn Interrupt */
    vuint32_t _unused_7:25;
  } B;
} MSCM_IRCP2ISR1_tag;

typedef union MSCM_IRCP2IGR1_union_tag { /* Interrupt Router CP2 Interrupt1 Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT_EN:1;                /* Interrupt Enable */
    vuint32_t _unused_1:31;
  } B;
} MSCM_IRCP2IGR1_tag;

typedef union MSCM_IRCP2ISR2_union_tag { /* Interrupt Router CP2 Interrupt2 Status Register */
  vuint32_t R;
  struct {
    vuint32_t CP0_INT:1;               /* CP0-to-CPn Interrupt */
    vuint32_t CP1_INT:1;               /* CP1-to-CPn Interrupt */
    vuint32_t CP2_INT:1;               /* CP2-to-CPn Interrupt */
    vuint32_t CP3_INT:1;               /* CP3-to-CPn Interrupt */
    vuint32_t CP4_INT:1;               /* CP4-to-CPn Interrupt */
    vuint32_t CP5_INT:1;               /* CP5-to-CPn Interrupt */
    vuint32_t CP6_INT:1;               /* CP6-to-CPn Interrupt */
    vuint32_t _unused_7:25;
  } B;
} MSCM_IRCP2ISR2_tag;

typedef union MSCM_IRCP2IGR2_union_tag { /* Interrupt Router CP2 Interrupt2 Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT_EN:1;                /* Interrupt Enable */
    vuint32_t _unused_1:31;
  } B;
} MSCM_IRCP2IGR2_tag;

typedef union MSCM_IRCP2ISR3_union_tag { /* Interrupt Router CPn Interruptx Status Register */
  vuint32_t R;
  struct {
    vuint32_t PCIE_INT0:1;             /* PCIe-to-CPn Interrupt0 */
    vuint32_t PCIE_INT1:1;             /* PCIe-to-CPn Interrupt1 */
    vuint32_t PCIE_INT2:1;             /* PCIe-to-CPn Interrupt2 */
    vuint32_t PCIE_INT3:1;             /* PCIe-to-CPn Interrupt3 */
    vuint32_t PCIE_INT4:1;             /* PCIe-to-CPn Interrupt4 */
    vuint32_t PCIE_INT5:1;             /* PCIe-to-CPn Interrupt5 */
    vuint32_t PCIE_INT6:1;             /* PCIe-to-CPn Interrupt6 */
    vuint32_t PCIE_INT7:1;             /* PCIe-to-CPn Interrupt7 */
    vuint32_t PCIE_INT8:1;             /* PCIe-to-CPn Interrupt8 */
    vuint32_t PCIE_INT9:1;             /* PCIe-to-CPn Interrupt9 */
    vuint32_t PCIE_INT10:1;            /* PCIe-to-CPn Interrupt10 */
    vuint32_t PCIE_INT11:1;            /* PCIe-to-CPn Interrupt11 */
    vuint32_t PCIE_INT12:1;            /* PCIe-to-CPn Interrupt12 */
    vuint32_t PCIE_INT13:1;            /* PCIe-to-CPn Interrupt13 */
    vuint32_t PCIE_INT14:1;            /* PCIe-to-CPn Interrupt14 */
    vuint32_t PCIE_INT15:1;            /* PCIe-to-CPn Interrupt15 */
    vuint32_t _unused_16:16;
  } B;
} MSCM_IRCP2ISR3_tag;

typedef union MSCM_IRCP2IGR3_union_tag { /* Interrupt Router CPn Interruptx Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT0_EN:1;               /* Interrupt0 Enable */
    vuint32_t INT1_EN:1;               /* Interrupt1 Enable */
    vuint32_t INT2_EN:1;               /* Interrupt2 Enable */
    vuint32_t INT3_EN:1;               /* Interrupt3 Enable */
    vuint32_t INT4_EN:1;               /* Interrupt4 Enable */
    vuint32_t INT5_EN:1;               /* Interrupt5 Enable */
    vuint32_t INT6_EN:1;               /* Interrupt6 Enable */
    vuint32_t INT7_EN:1;               /* Interrupt7 Enable */
    vuint32_t INT8_EN:1;               /* Interrupt8 Enable */
    vuint32_t INT9_EN:1;               /* Interrupt9 Enable */
    vuint32_t INT10_EN:1;              /* Interrupt10 Enable */
    vuint32_t INT11_EN:1;              /* Interrupt11 Enable */
    vuint32_t INT12_EN:1;              /* Interrupt12 Enable */
    vuint32_t INT13_EN:1;              /* Interrupt13 Enable */
    vuint32_t INT14_EN:1;              /* Interrupt14 Enable */
    vuint32_t INT15_EN:1;              /* Interrupt15 Enable */
    vuint32_t _unused_16:16;
  } B;
} MSCM_IRCP2IGR3_tag;

typedef union MSCM_IRCP3ISR0_union_tag { /* Interrupt Router CP3 Interrupt0 Status Register */
  vuint32_t R;
  struct {
    vuint32_t CP0_INT:1;               /* CP0-to-CPn Interrupt */
    vuint32_t CP1_INT:1;               /* CP1-to-CPn Interrupt */
    vuint32_t CP2_INT:1;               /* CP2-to-CPn Interrupt */
    vuint32_t CP3_INT:1;               /* CP3-to-CPn Interrupt */
    vuint32_t CP4_INT:1;               /* CP4-to-CPn Interrupt */
    vuint32_t CP5_INT:1;               /* CP5-to-CPn Interrupt */
    vuint32_t CP6_INT:1;               /* CP6-to-CPn Interrupt */
    vuint32_t _unused_7:25;
  } B;
} MSCM_IRCP3ISR0_tag;

typedef union MSCM_IRCP3IGR0_union_tag { /* Interrupt Router CP3 Interrupt0 Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT_EN:1;                /* Interrupt Enable */
    vuint32_t _unused_1:31;
  } B;
} MSCM_IRCP3IGR0_tag;

typedef union MSCM_IRCP3ISR1_union_tag { /* Interrupt Router CP3 Interrupt1 Status Register */
  vuint32_t R;
  struct {
    vuint32_t CP0_INT:1;               /* CP0-to-CPn Interrupt */
    vuint32_t CP1_INT:1;               /* CP1-to-CPn Interrupt */
    vuint32_t CP2_INT:1;               /* CP2-to-CPn Interrupt */
    vuint32_t CP3_INT:1;               /* CP3-to-CPn Interrupt */
    vuint32_t CP4_INT:1;               /* CP4-to-CPn Interrupt */
    vuint32_t CP5_INT:1;               /* CP5-to-CPn Interrupt */
    vuint32_t CP6_INT:1;               /* CP6-to-CPn Interrupt */
    vuint32_t _unused_7:25;
  } B;
} MSCM_IRCP3ISR1_tag;

typedef union MSCM_IRCP3IGR1_union_tag { /* Interrupt Router CP3 Interrupt1 Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT_EN:1;                /* Interrupt Enable */
    vuint32_t _unused_1:31;
  } B;
} MSCM_IRCP3IGR1_tag;

typedef union MSCM_IRCP3ISR2_union_tag { /* Interrupt Router CP3 Interrupt2 Status Register */
  vuint32_t R;
  struct {
    vuint32_t CP0_INT:1;               /* CP0-to-CPn Interrupt */
    vuint32_t CP1_INT:1;               /* CP1-to-CPn Interrupt */
    vuint32_t CP2_INT:1;               /* CP2-to-CPn Interrupt */
    vuint32_t CP3_INT:1;               /* CP3-to-CPn Interrupt */
    vuint32_t CP4_INT:1;               /* CP4-to-CPn Interrupt */
    vuint32_t CP5_INT:1;               /* CP5-to-CPn Interrupt */
    vuint32_t CP6_INT:1;               /* CP6-to-CPn Interrupt */
    vuint32_t _unused_7:25;
  } B;
} MSCM_IRCP3ISR2_tag;

typedef union MSCM_IRCP3IGR2_union_tag { /* Interrupt Router CP3 Interrupt2 Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT_EN:1;                /* Interrupt Enable */
    vuint32_t _unused_1:31;
  } B;
} MSCM_IRCP3IGR2_tag;

typedef union MSCM_IRCP3ISR3_union_tag { /* Interrupt Router CPn Interruptx Status Register */
  vuint32_t R;
  struct {
    vuint32_t PCIE_INT0:1;             /* PCIe-to-CPn Interrupt0 */
    vuint32_t PCIE_INT1:1;             /* PCIe-to-CPn Interrupt1 */
    vuint32_t PCIE_INT2:1;             /* PCIe-to-CPn Interrupt2 */
    vuint32_t PCIE_INT3:1;             /* PCIe-to-CPn Interrupt3 */
    vuint32_t PCIE_INT4:1;             /* PCIe-to-CPn Interrupt4 */
    vuint32_t PCIE_INT5:1;             /* PCIe-to-CPn Interrupt5 */
    vuint32_t PCIE_INT6:1;             /* PCIe-to-CPn Interrupt6 */
    vuint32_t PCIE_INT7:1;             /* PCIe-to-CPn Interrupt7 */
    vuint32_t PCIE_INT8:1;             /* PCIe-to-CPn Interrupt8 */
    vuint32_t PCIE_INT9:1;             /* PCIe-to-CPn Interrupt9 */
    vuint32_t PCIE_INT10:1;            /* PCIe-to-CPn Interrupt10 */
    vuint32_t PCIE_INT11:1;            /* PCIe-to-CPn Interrupt11 */
    vuint32_t PCIE_INT12:1;            /* PCIe-to-CPn Interrupt12 */
    vuint32_t PCIE_INT13:1;            /* PCIe-to-CPn Interrupt13 */
    vuint32_t PCIE_INT14:1;            /* PCIe-to-CPn Interrupt14 */
    vuint32_t PCIE_INT15:1;            /* PCIe-to-CPn Interrupt15 */
    vuint32_t _unused_16:16;
  } B;
} MSCM_IRCP3ISR3_tag;

typedef union MSCM_IRCP3IGR3_union_tag { /* Interrupt Router CPn Interruptx Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT0_EN:1;               /* Interrupt0 Enable */
    vuint32_t INT1_EN:1;               /* Interrupt1 Enable */
    vuint32_t INT2_EN:1;               /* Interrupt2 Enable */
    vuint32_t INT3_EN:1;               /* Interrupt3 Enable */
    vuint32_t INT4_EN:1;               /* Interrupt4 Enable */
    vuint32_t INT5_EN:1;               /* Interrupt5 Enable */
    vuint32_t INT6_EN:1;               /* Interrupt6 Enable */
    vuint32_t INT7_EN:1;               /* Interrupt7 Enable */
    vuint32_t INT8_EN:1;               /* Interrupt8 Enable */
    vuint32_t INT9_EN:1;               /* Interrupt9 Enable */
    vuint32_t INT10_EN:1;              /* Interrupt10 Enable */
    vuint32_t INT11_EN:1;              /* Interrupt11 Enable */
    vuint32_t INT12_EN:1;              /* Interrupt12 Enable */
    vuint32_t INT13_EN:1;              /* Interrupt13 Enable */
    vuint32_t INT14_EN:1;              /* Interrupt14 Enable */
    vuint32_t INT15_EN:1;              /* Interrupt15 Enable */
    vuint32_t _unused_16:16;
  } B;
} MSCM_IRCP3IGR3_tag;

typedef union MSCM_IRCP4ISR0_union_tag { /* Interrupt Router CP4 Interrupt0 Status Register */
  vuint32_t R;
  struct {
    vuint32_t CP0_INT:1;               /* CP0-to-CPn Interrupt */
    vuint32_t CP1_INT:1;               /* CP1-to-CPn Interrupt */
    vuint32_t CP2_INT:1;               /* CP2-to-CPn Interrupt */
    vuint32_t CP3_INT:1;               /* CP3-to-CPn Interrupt */
    vuint32_t CP4_INT:1;               /* CP4-to-CPn Interrupt */
    vuint32_t CP5_INT:1;               /* CP5-to-CPn Interrupt */
    vuint32_t CP6_INT:1;               /* CP6-to-CPn Interrupt */
    vuint32_t _unused_7:25;
  } B;
} MSCM_IRCP4ISR0_tag;

typedef union MSCM_IRCP4IGR0_union_tag { /* Interrupt Router CP4 Interrupt0 Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT_EN:1;                /* Interrupt Enable */
    vuint32_t _unused_1:31;
  } B;
} MSCM_IRCP4IGR0_tag;

typedef union MSCM_IRCP4ISR1_union_tag { /* Interrupt Router CP4 Interrupt1 Status Register */
  vuint32_t R;
  struct {
    vuint32_t CP0_INT:1;               /* CP0-to-CPn Interrupt */
    vuint32_t CP1_INT:1;               /* CP1-to-CPn Interrupt */
    vuint32_t CP2_INT:1;               /* CP2-to-CPn Interrupt */
    vuint32_t CP3_INT:1;               /* CP3-to-CPn Interrupt */
    vuint32_t CP4_INT:1;               /* CP4-to-CPn Interrupt */
    vuint32_t CP5_INT:1;               /* CP5-to-CPn Interrupt */
    vuint32_t CP6_INT:1;               /* CP6-to-CPn Interrupt */
    vuint32_t _unused_7:25;
  } B;
} MSCM_IRCP4ISR1_tag;

typedef union MSCM_IRCP4IGR1_union_tag { /* Interrupt Router CP4 Interrupt1 Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT_EN:1;                /* Interrupt Enable */
    vuint32_t _unused_1:31;
  } B;
} MSCM_IRCP4IGR1_tag;

typedef union MSCM_IRCP4ISR2_union_tag { /* Interrupt Router CP4 Interrupt2 Status Register */
  vuint32_t R;
  struct {
    vuint32_t CP0_INT:1;               /* CP0-to-CPn Interrupt */
    vuint32_t CP1_INT:1;               /* CP1-to-CPn Interrupt */
    vuint32_t CP2_INT:1;               /* CP2-to-CPn Interrupt */
    vuint32_t CP3_INT:1;               /* CP3-to-CPn Interrupt */
    vuint32_t CP4_INT:1;               /* CP4-to-CPn Interrupt */
    vuint32_t CP5_INT:1;               /* CP5-to-CPn Interrupt */
    vuint32_t CP6_INT:1;               /* CP6-to-CPn Interrupt */
    vuint32_t _unused_7:25;
  } B;
} MSCM_IRCP4ISR2_tag;

typedef union MSCM_IRCP4IGR2_union_tag { /* Interrupt Router CP4 Interrupt2 Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT_EN:1;                /* Interrupt Enable */
    vuint32_t _unused_1:31;
  } B;
} MSCM_IRCP4IGR2_tag;

typedef union MSCM_IRCP4ISR3_union_tag { /* Interrupt Router CPn Interruptx Status Register */
  vuint32_t R;
  struct {
    vuint32_t PCIE_INT0:1;             /* PCIe-to-CPn Interrupt0 */
    vuint32_t PCIE_INT1:1;             /* PCIe-to-CPn Interrupt1 */
    vuint32_t PCIE_INT2:1;             /* PCIe-to-CPn Interrupt2 */
    vuint32_t PCIE_INT3:1;             /* PCIe-to-CPn Interrupt3 */
    vuint32_t PCIE_INT4:1;             /* PCIe-to-CPn Interrupt4 */
    vuint32_t PCIE_INT5:1;             /* PCIe-to-CPn Interrupt5 */
    vuint32_t PCIE_INT6:1;             /* PCIe-to-CPn Interrupt6 */
    vuint32_t PCIE_INT7:1;             /* PCIe-to-CPn Interrupt7 */
    vuint32_t PCIE_INT8:1;             /* PCIe-to-CPn Interrupt8 */
    vuint32_t PCIE_INT9:1;             /* PCIe-to-CPn Interrupt9 */
    vuint32_t PCIE_INT10:1;            /* PCIe-to-CPn Interrupt10 */
    vuint32_t PCIE_INT11:1;            /* PCIe-to-CPn Interrupt11 */
    vuint32_t PCIE_INT12:1;            /* PCIe-to-CPn Interrupt12 */
    vuint32_t PCIE_INT13:1;            /* PCIe-to-CPn Interrupt13 */
    vuint32_t PCIE_INT14:1;            /* PCIe-to-CPn Interrupt14 */
    vuint32_t PCIE_INT15:1;            /* PCIe-to-CPn Interrupt15 */
    vuint32_t _unused_16:16;
  } B;
} MSCM_IRCP4ISR3_tag;

typedef union MSCM_IRCP4IGR3_union_tag { /* Interrupt Router CPn Interruptx Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT0_EN:1;               /* Interrupt0 Enable */
    vuint32_t INT1_EN:1;               /* Interrupt1 Enable */
    vuint32_t INT2_EN:1;               /* Interrupt2 Enable */
    vuint32_t INT3_EN:1;               /* Interrupt3 Enable */
    vuint32_t INT4_EN:1;               /* Interrupt4 Enable */
    vuint32_t INT5_EN:1;               /* Interrupt5 Enable */
    vuint32_t INT6_EN:1;               /* Interrupt6 Enable */
    vuint32_t INT7_EN:1;               /* Interrupt7 Enable */
    vuint32_t INT8_EN:1;               /* Interrupt8 Enable */
    vuint32_t INT9_EN:1;               /* Interrupt9 Enable */
    vuint32_t INT10_EN:1;              /* Interrupt10 Enable */
    vuint32_t INT11_EN:1;              /* Interrupt11 Enable */
    vuint32_t INT12_EN:1;              /* Interrupt12 Enable */
    vuint32_t INT13_EN:1;              /* Interrupt13 Enable */
    vuint32_t INT14_EN:1;              /* Interrupt14 Enable */
    vuint32_t INT15_EN:1;              /* Interrupt15 Enable */
    vuint32_t _unused_16:16;
  } B;
} MSCM_IRCP4IGR3_tag;

typedef union MSCM_IRCP5ISR0_union_tag { /* Interrupt Router CP5 Interrupt0 Status Register */
  vuint32_t R;
  struct {
    vuint32_t CP0_INT:1;               /* CP0-to-CPn Interrupt */
    vuint32_t CP1_INT:1;               /* CP1-to-CPn Interrupt */
    vuint32_t CP2_INT:1;               /* CP2-to-CPn Interrupt */
    vuint32_t CP3_INT:1;               /* CP3-to-CPn Interrupt */
    vuint32_t CP4_INT:1;               /* CP4-to-CPn Interrupt */
    vuint32_t CP5_INT:1;               /* CP5-to-CPn Interrupt */
    vuint32_t CP6_INT:1;               /* CP6-to-CPn Interrupt */
    vuint32_t _unused_7:25;
  } B;
} MSCM_IRCP5ISR0_tag;

typedef union MSCM_IRCP5IGR0_union_tag { /* Interrupt Router CP5 Interrupt0 Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT_EN:1;                /* Interrupt Enable */
    vuint32_t _unused_1:31;
  } B;
} MSCM_IRCP5IGR0_tag;

typedef union MSCM_IRCP5ISR1_union_tag { /* Interrupt Router CP5 Interrupt1 Status Register */
  vuint32_t R;
  struct {
    vuint32_t CP0_INT:1;               /* CP0-to-CPn Interrupt */
    vuint32_t CP1_INT:1;               /* CP1-to-CPn Interrupt */
    vuint32_t CP2_INT:1;               /* CP2-to-CPn Interrupt */
    vuint32_t CP3_INT:1;               /* CP3-to-CPn Interrupt */
    vuint32_t CP4_INT:1;               /* CP4-to-CPn Interrupt */
    vuint32_t CP5_INT:1;               /* CP5-to-CPn Interrupt */
    vuint32_t CP6_INT:1;               /* CP6-to-CPn Interrupt */
    vuint32_t _unused_7:25;
  } B;
} MSCM_IRCP5ISR1_tag;

typedef union MSCM_IRCP5IGR1_union_tag { /* Interrupt Router CP5 Interrupt1 Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT_EN:1;                /* Interrupt Enable */
    vuint32_t _unused_1:31;
  } B;
} MSCM_IRCP5IGR1_tag;

typedef union MSCM_IRCP5ISR2_union_tag { /* Interrupt Router CP5 Interrupt2 Status Register */
  vuint32_t R;
  struct {
    vuint32_t CP0_INT:1;               /* CP0-to-CPn Interrupt */
    vuint32_t CP1_INT:1;               /* CP1-to-CPn Interrupt */
    vuint32_t CP2_INT:1;               /* CP2-to-CPn Interrupt */
    vuint32_t CP3_INT:1;               /* CP3-to-CPn Interrupt */
    vuint32_t CP4_INT:1;               /* CP4-to-CPn Interrupt */
    vuint32_t CP5_INT:1;               /* CP5-to-CPn Interrupt */
    vuint32_t CP6_INT:1;               /* CP6-to-CPn Interrupt */
    vuint32_t _unused_7:25;
  } B;
} MSCM_IRCP5ISR2_tag;

typedef union MSCM_IRCP5IGR2_union_tag { /* Interrupt Router CP5 Interrupt2 Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT_EN:1;                /* Interrupt Enable */
    vuint32_t _unused_1:31;
  } B;
} MSCM_IRCP5IGR2_tag;

typedef union MSCM_IRCP5ISR3_union_tag { /* Interrupt Router CPn Interruptx Status Register */
  vuint32_t R;
  struct {
    vuint32_t PCIE_INT0:1;             /* PCIe-to-CPn Interrupt0 */
    vuint32_t PCIE_INT1:1;             /* PCIe-to-CPn Interrupt1 */
    vuint32_t PCIE_INT2:1;             /* PCIe-to-CPn Interrupt2 */
    vuint32_t PCIE_INT3:1;             /* PCIe-to-CPn Interrupt3 */
    vuint32_t PCIE_INT4:1;             /* PCIe-to-CPn Interrupt4 */
    vuint32_t PCIE_INT5:1;             /* PCIe-to-CPn Interrupt5 */
    vuint32_t PCIE_INT6:1;             /* PCIe-to-CPn Interrupt6 */
    vuint32_t PCIE_INT7:1;             /* PCIe-to-CPn Interrupt7 */
    vuint32_t PCIE_INT8:1;             /* PCIe-to-CPn Interrupt8 */
    vuint32_t PCIE_INT9:1;             /* PCIe-to-CPn Interrupt9 */
    vuint32_t PCIE_INT10:1;            /* PCIe-to-CPn Interrupt10 */
    vuint32_t PCIE_INT11:1;            /* PCIe-to-CPn Interrupt11 */
    vuint32_t PCIE_INT12:1;            /* PCIe-to-CPn Interrupt12 */
    vuint32_t PCIE_INT13:1;            /* PCIe-to-CPn Interrupt13 */
    vuint32_t PCIE_INT14:1;            /* PCIe-to-CPn Interrupt14 */
    vuint32_t PCIE_INT15:1;            /* PCIe-to-CPn Interrupt15 */
    vuint32_t _unused_16:16;
  } B;
} MSCM_IRCP5ISR3_tag;

typedef union MSCM_IRCP5IGR3_union_tag { /* Interrupt Router CPn Interruptx Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT0_EN:1;               /* Interrupt0 Enable */
    vuint32_t INT1_EN:1;               /* Interrupt1 Enable */
    vuint32_t INT2_EN:1;               /* Interrupt2 Enable */
    vuint32_t INT3_EN:1;               /* Interrupt3 Enable */
    vuint32_t INT4_EN:1;               /* Interrupt4 Enable */
    vuint32_t INT5_EN:1;               /* Interrupt5 Enable */
    vuint32_t INT6_EN:1;               /* Interrupt6 Enable */
    vuint32_t INT7_EN:1;               /* Interrupt7 Enable */
    vuint32_t INT8_EN:1;               /* Interrupt8 Enable */
    vuint32_t INT9_EN:1;               /* Interrupt9 Enable */
    vuint32_t INT10_EN:1;              /* Interrupt10 Enable */
    vuint32_t INT11_EN:1;              /* Interrupt11 Enable */
    vuint32_t INT12_EN:1;              /* Interrupt12 Enable */
    vuint32_t INT13_EN:1;              /* Interrupt13 Enable */
    vuint32_t INT14_EN:1;              /* Interrupt14 Enable */
    vuint32_t INT15_EN:1;              /* Interrupt15 Enable */
    vuint32_t _unused_16:16;
  } B;
} MSCM_IRCP5IGR3_tag;

typedef union MSCM_IRCP6ISR0_union_tag { /* Interrupt Router CP6 Interrupt0 Status Register */
  vuint32_t R;
  struct {
    vuint32_t CP0_INT:1;               /* CP0-to-CPn Interrupt */
    vuint32_t CP1_INT:1;               /* CP1-to-CPn Interrupt */
    vuint32_t CP2_INT:1;               /* CP2-to-CPn Interrupt */
    vuint32_t CP3_INT:1;               /* CP3-to-CPn Interrupt */
    vuint32_t CP4_INT:1;               /* CP4-to-CPn Interrupt */
    vuint32_t CP5_INT:1;               /* CP5-to-CPn Interrupt */
    vuint32_t CP6_INT:1;               /* CP6-to-CPn Interrupt */
    vuint32_t _unused_7:25;
  } B;
} MSCM_IRCP6ISR0_tag;

typedef union MSCM_IRCP6IGR0_union_tag { /* Interrupt Router CP6 Interrupt0 Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT_EN:1;                /* Interrupt Enable */
    vuint32_t _unused_1:31;
  } B;
} MSCM_IRCP6IGR0_tag;

typedef union MSCM_IRCP6ISR1_union_tag { /* Interrupt Router CP6 Interrupt1 Status Register */
  vuint32_t R;
  struct {
    vuint32_t CP0_INT:1;               /* CP0-to-CPn Interrupt */
    vuint32_t CP1_INT:1;               /* CP1-to-CPn Interrupt */
    vuint32_t CP2_INT:1;               /* CP2-to-CPn Interrupt */
    vuint32_t CP3_INT:1;               /* CP3-to-CPn Interrupt */
    vuint32_t CP4_INT:1;               /* CP4-to-CPn Interrupt */
    vuint32_t CP5_INT:1;               /* CP5-to-CPn Interrupt */
    vuint32_t CP6_INT:1;               /* CP6-to-CPn Interrupt */
    vuint32_t _unused_7:25;
  } B;
} MSCM_IRCP6ISR1_tag;

typedef union MSCM_IRCP6IGR1_union_tag { /* Interrupt Router CP6 Interrupt1 Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT_EN:1;                /* Interrupt Enable */
    vuint32_t _unused_1:31;
  } B;
} MSCM_IRCP6IGR1_tag;

typedef union MSCM_IRCP6ISR2_union_tag { /* Interrupt Router CP6 Interrupt2 Status Register */
  vuint32_t R;
  struct {
    vuint32_t CP0_INT:1;               /* CP0-to-CPn Interrupt */
    vuint32_t CP1_INT:1;               /* CP1-to-CPn Interrupt */
    vuint32_t CP2_INT:1;               /* CP2-to-CPn Interrupt */
    vuint32_t CP3_INT:1;               /* CP3-to-CPn Interrupt */
    vuint32_t CP4_INT:1;               /* CP4-to-CPn Interrupt */
    vuint32_t CP5_INT:1;               /* CP5-to-CPn Interrupt */
    vuint32_t CP6_INT:1;               /* CP6-to-CPn Interrupt */
    vuint32_t _unused_7:25;
  } B;
} MSCM_IRCP6ISR2_tag;

typedef union MSCM_IRCP6IGR2_union_tag { /* Interrupt Router CP6 Interrupt2 Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT_EN:1;                /* Interrupt Enable */
    vuint32_t _unused_1:31;
  } B;
} MSCM_IRCP6IGR2_tag;

typedef union MSCM_IRCP6ISR3_union_tag { /* Interrupt Router CPn Interruptx Status Register */
  vuint32_t R;
  struct {
    vuint32_t PCIE_INT0:1;             /* PCIe-to-CPn Interrupt0 */
    vuint32_t PCIE_INT1:1;             /* PCIe-to-CPn Interrupt1 */
    vuint32_t PCIE_INT2:1;             /* PCIe-to-CPn Interrupt2 */
    vuint32_t PCIE_INT3:1;             /* PCIe-to-CPn Interrupt3 */
    vuint32_t PCIE_INT4:1;             /* PCIe-to-CPn Interrupt4 */
    vuint32_t PCIE_INT5:1;             /* PCIe-to-CPn Interrupt5 */
    vuint32_t PCIE_INT6:1;             /* PCIe-to-CPn Interrupt6 */
    vuint32_t PCIE_INT7:1;             /* PCIe-to-CPn Interrupt7 */
    vuint32_t PCIE_INT8:1;             /* PCIe-to-CPn Interrupt8 */
    vuint32_t PCIE_INT9:1;             /* PCIe-to-CPn Interrupt9 */
    vuint32_t PCIE_INT10:1;            /* PCIe-to-CPn Interrupt10 */
    vuint32_t PCIE_INT11:1;            /* PCIe-to-CPn Interrupt11 */
    vuint32_t PCIE_INT12:1;            /* PCIe-to-CPn Interrupt12 */
    vuint32_t PCIE_INT13:1;            /* PCIe-to-CPn Interrupt13 */
    vuint32_t PCIE_INT14:1;            /* PCIe-to-CPn Interrupt14 */
    vuint32_t PCIE_INT15:1;            /* PCIe-to-CPn Interrupt15 */
    vuint32_t _unused_16:16;
  } B;
} MSCM_IRCP6ISR3_tag;

typedef union MSCM_IRCP6IGR3_union_tag { /* Interrupt Router CPn Interruptx Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT0_EN:1;               /* Interrupt0 Enable */
    vuint32_t INT1_EN:1;               /* Interrupt1 Enable */
    vuint32_t INT2_EN:1;               /* Interrupt2 Enable */
    vuint32_t INT3_EN:1;               /* Interrupt3 Enable */
    vuint32_t INT4_EN:1;               /* Interrupt4 Enable */
    vuint32_t INT5_EN:1;               /* Interrupt5 Enable */
    vuint32_t INT6_EN:1;               /* Interrupt6 Enable */
    vuint32_t INT7_EN:1;               /* Interrupt7 Enable */
    vuint32_t INT8_EN:1;               /* Interrupt8 Enable */
    vuint32_t INT9_EN:1;               /* Interrupt9 Enable */
    vuint32_t INT10_EN:1;              /* Interrupt10 Enable */
    vuint32_t INT11_EN:1;              /* Interrupt11 Enable */
    vuint32_t INT12_EN:1;              /* Interrupt12 Enable */
    vuint32_t INT13_EN:1;              /* Interrupt13 Enable */
    vuint32_t INT14_EN:1;              /* Interrupt14 Enable */
    vuint32_t INT15_EN:1;              /* Interrupt15 Enable */
    vuint32_t _unused_16:16;
  } B;
} MSCM_IRCP6IGR3_tag;

typedef union MSCM_IRCP0ISR4_union_tag { /* Interrupt Router CPn Interruptx Status Register */
  vuint32_t R;
  struct {
    vuint32_t PCIE_INT0:1;             /* PCIe-to-CPn Interrupt0 */
    vuint32_t PCIE_INT1:1;             /* PCIe-to-CPn Interrupt1 */
    vuint32_t PCIE_INT2:1;             /* PCIe-to-CPn Interrupt2 */
    vuint32_t PCIE_INT3:1;             /* PCIe-to-CPn Interrupt3 */
    vuint32_t PCIE_INT4:1;             /* PCIe-to-CPn Interrupt4 */
    vuint32_t PCIE_INT5:1;             /* PCIe-to-CPn Interrupt5 */
    vuint32_t PCIE_INT6:1;             /* PCIe-to-CPn Interrupt6 */
    vuint32_t PCIE_INT7:1;             /* PCIe-to-CPn Interrupt7 */
    vuint32_t PCIE_INT8:1;             /* PCIe-to-CPn Interrupt8 */
    vuint32_t PCIE_INT9:1;             /* PCIe-to-CPn Interrupt9 */
    vuint32_t PCIE_INT10:1;            /* PCIe-to-CPn Interrupt10 */
    vuint32_t PCIE_INT11:1;            /* PCIe-to-CPn Interrupt11 */
    vuint32_t PCIE_INT12:1;            /* PCIe-to-CPn Interrupt12 */
    vuint32_t PCIE_INT13:1;            /* PCIe-to-CPn Interrupt13 */
    vuint32_t PCIE_INT14:1;            /* PCIe-to-CPn Interrupt14 */
    vuint32_t PCIE_INT15:1;            /* PCIe-to-CPn Interrupt15 */
    vuint32_t _unused_16:16;
  } B;
} MSCM_IRCP0ISR4_tag;

typedef union MSCM_IRCP0IGR4_union_tag { /* Interrupt Router CPn Interruptx Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT0_EN:1;               /* Interrupt0 Enable */
    vuint32_t INT1_EN:1;               /* Interrupt1 Enable */
    vuint32_t INT2_EN:1;               /* Interrupt2 Enable */
    vuint32_t INT3_EN:1;               /* Interrupt3 Enable */
    vuint32_t INT4_EN:1;               /* Interrupt4 Enable */
    vuint32_t INT5_EN:1;               /* Interrupt5 Enable */
    vuint32_t INT6_EN:1;               /* Interrupt6 Enable */
    vuint32_t INT7_EN:1;               /* Interrupt7 Enable */
    vuint32_t INT8_EN:1;               /* Interrupt8 Enable */
    vuint32_t INT9_EN:1;               /* Interrupt9 Enable */
    vuint32_t INT10_EN:1;              /* Interrupt10 Enable */
    vuint32_t INT11_EN:1;              /* Interrupt11 Enable */
    vuint32_t INT12_EN:1;              /* Interrupt12 Enable */
    vuint32_t INT13_EN:1;              /* Interrupt13 Enable */
    vuint32_t INT14_EN:1;              /* Interrupt14 Enable */
    vuint32_t INT15_EN:1;              /* Interrupt15 Enable */
    vuint32_t _unused_16:16;
  } B;
} MSCM_IRCP0IGR4_tag;

typedef union MSCM_IRCP1ISR4_union_tag { /* Interrupt Router CPn Interruptx Status Register */
  vuint32_t R;
  struct {
    vuint32_t PCIE_INT0:1;             /* PCIe-to-CPn Interrupt0 */
    vuint32_t PCIE_INT1:1;             /* PCIe-to-CPn Interrupt1 */
    vuint32_t PCIE_INT2:1;             /* PCIe-to-CPn Interrupt2 */
    vuint32_t PCIE_INT3:1;             /* PCIe-to-CPn Interrupt3 */
    vuint32_t PCIE_INT4:1;             /* PCIe-to-CPn Interrupt4 */
    vuint32_t PCIE_INT5:1;             /* PCIe-to-CPn Interrupt5 */
    vuint32_t PCIE_INT6:1;             /* PCIe-to-CPn Interrupt6 */
    vuint32_t PCIE_INT7:1;             /* PCIe-to-CPn Interrupt7 */
    vuint32_t PCIE_INT8:1;             /* PCIe-to-CPn Interrupt8 */
    vuint32_t PCIE_INT9:1;             /* PCIe-to-CPn Interrupt9 */
    vuint32_t PCIE_INT10:1;            /* PCIe-to-CPn Interrupt10 */
    vuint32_t PCIE_INT11:1;            /* PCIe-to-CPn Interrupt11 */
    vuint32_t PCIE_INT12:1;            /* PCIe-to-CPn Interrupt12 */
    vuint32_t PCIE_INT13:1;            /* PCIe-to-CPn Interrupt13 */
    vuint32_t PCIE_INT14:1;            /* PCIe-to-CPn Interrupt14 */
    vuint32_t PCIE_INT15:1;            /* PCIe-to-CPn Interrupt15 */
    vuint32_t _unused_16:16;
  } B;
} MSCM_IRCP1ISR4_tag;

typedef union MSCM_IRCP1IGR4_union_tag { /* Interrupt Router CPn Interruptx Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT0_EN:1;               /* Interrupt0 Enable */
    vuint32_t INT1_EN:1;               /* Interrupt1 Enable */
    vuint32_t INT2_EN:1;               /* Interrupt2 Enable */
    vuint32_t INT3_EN:1;               /* Interrupt3 Enable */
    vuint32_t INT4_EN:1;               /* Interrupt4 Enable */
    vuint32_t INT5_EN:1;               /* Interrupt5 Enable */
    vuint32_t INT6_EN:1;               /* Interrupt6 Enable */
    vuint32_t INT7_EN:1;               /* Interrupt7 Enable */
    vuint32_t INT8_EN:1;               /* Interrupt8 Enable */
    vuint32_t INT9_EN:1;               /* Interrupt9 Enable */
    vuint32_t INT10_EN:1;              /* Interrupt10 Enable */
    vuint32_t INT11_EN:1;              /* Interrupt11 Enable */
    vuint32_t INT12_EN:1;              /* Interrupt12 Enable */
    vuint32_t INT13_EN:1;              /* Interrupt13 Enable */
    vuint32_t INT14_EN:1;              /* Interrupt14 Enable */
    vuint32_t INT15_EN:1;              /* Interrupt15 Enable */
    vuint32_t _unused_16:16;
  } B;
} MSCM_IRCP1IGR4_tag;

typedef union MSCM_IRCP2ISR4_union_tag { /* Interrupt Router CPn Interruptx Status Register */
  vuint32_t R;
  struct {
    vuint32_t PCIE_INT0:1;             /* PCIe-to-CPn Interrupt0 */
    vuint32_t PCIE_INT1:1;             /* PCIe-to-CPn Interrupt1 */
    vuint32_t PCIE_INT2:1;             /* PCIe-to-CPn Interrupt2 */
    vuint32_t PCIE_INT3:1;             /* PCIe-to-CPn Interrupt3 */
    vuint32_t PCIE_INT4:1;             /* PCIe-to-CPn Interrupt4 */
    vuint32_t PCIE_INT5:1;             /* PCIe-to-CPn Interrupt5 */
    vuint32_t PCIE_INT6:1;             /* PCIe-to-CPn Interrupt6 */
    vuint32_t PCIE_INT7:1;             /* PCIe-to-CPn Interrupt7 */
    vuint32_t PCIE_INT8:1;             /* PCIe-to-CPn Interrupt8 */
    vuint32_t PCIE_INT9:1;             /* PCIe-to-CPn Interrupt9 */
    vuint32_t PCIE_INT10:1;            /* PCIe-to-CPn Interrupt10 */
    vuint32_t PCIE_INT11:1;            /* PCIe-to-CPn Interrupt11 */
    vuint32_t PCIE_INT12:1;            /* PCIe-to-CPn Interrupt12 */
    vuint32_t PCIE_INT13:1;            /* PCIe-to-CPn Interrupt13 */
    vuint32_t PCIE_INT14:1;            /* PCIe-to-CPn Interrupt14 */
    vuint32_t PCIE_INT15:1;            /* PCIe-to-CPn Interrupt15 */
    vuint32_t _unused_16:16;
  } B;
} MSCM_IRCP2ISR4_tag;

typedef union MSCM_IRCP2IGR4_union_tag { /* Interrupt Router CPn Interruptx Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT0_EN:1;               /* Interrupt0 Enable */
    vuint32_t INT1_EN:1;               /* Interrupt1 Enable */
    vuint32_t INT2_EN:1;               /* Interrupt2 Enable */
    vuint32_t INT3_EN:1;               /* Interrupt3 Enable */
    vuint32_t INT4_EN:1;               /* Interrupt4 Enable */
    vuint32_t INT5_EN:1;               /* Interrupt5 Enable */
    vuint32_t INT6_EN:1;               /* Interrupt6 Enable */
    vuint32_t INT7_EN:1;               /* Interrupt7 Enable */
    vuint32_t INT8_EN:1;               /* Interrupt8 Enable */
    vuint32_t INT9_EN:1;               /* Interrupt9 Enable */
    vuint32_t INT10_EN:1;              /* Interrupt10 Enable */
    vuint32_t INT11_EN:1;              /* Interrupt11 Enable */
    vuint32_t INT12_EN:1;              /* Interrupt12 Enable */
    vuint32_t INT13_EN:1;              /* Interrupt13 Enable */
    vuint32_t INT14_EN:1;              /* Interrupt14 Enable */
    vuint32_t INT15_EN:1;              /* Interrupt15 Enable */
    vuint32_t _unused_16:16;
  } B;
} MSCM_IRCP2IGR4_tag;

typedef union MSCM_IRCP3ISR4_union_tag { /* Interrupt Router CPn Interruptx Status Register */
  vuint32_t R;
  struct {
    vuint32_t PCIE_INT0:1;             /* PCIe-to-CPn Interrupt0 */
    vuint32_t PCIE_INT1:1;             /* PCIe-to-CPn Interrupt1 */
    vuint32_t PCIE_INT2:1;             /* PCIe-to-CPn Interrupt2 */
    vuint32_t PCIE_INT3:1;             /* PCIe-to-CPn Interrupt3 */
    vuint32_t PCIE_INT4:1;             /* PCIe-to-CPn Interrupt4 */
    vuint32_t PCIE_INT5:1;             /* PCIe-to-CPn Interrupt5 */
    vuint32_t PCIE_INT6:1;             /* PCIe-to-CPn Interrupt6 */
    vuint32_t PCIE_INT7:1;             /* PCIe-to-CPn Interrupt7 */
    vuint32_t PCIE_INT8:1;             /* PCIe-to-CPn Interrupt8 */
    vuint32_t PCIE_INT9:1;             /* PCIe-to-CPn Interrupt9 */
    vuint32_t PCIE_INT10:1;            /* PCIe-to-CPn Interrupt10 */
    vuint32_t PCIE_INT11:1;            /* PCIe-to-CPn Interrupt11 */
    vuint32_t PCIE_INT12:1;            /* PCIe-to-CPn Interrupt12 */
    vuint32_t PCIE_INT13:1;            /* PCIe-to-CPn Interrupt13 */
    vuint32_t PCIE_INT14:1;            /* PCIe-to-CPn Interrupt14 */
    vuint32_t PCIE_INT15:1;            /* PCIe-to-CPn Interrupt15 */
    vuint32_t _unused_16:16;
  } B;
} MSCM_IRCP3ISR4_tag;

typedef union MSCM_IRCP3IGR4_union_tag { /* Interrupt Router CPn Interruptx Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT0_EN:1;               /* Interrupt0 Enable */
    vuint32_t INT1_EN:1;               /* Interrupt1 Enable */
    vuint32_t INT2_EN:1;               /* Interrupt2 Enable */
    vuint32_t INT3_EN:1;               /* Interrupt3 Enable */
    vuint32_t INT4_EN:1;               /* Interrupt4 Enable */
    vuint32_t INT5_EN:1;               /* Interrupt5 Enable */
    vuint32_t INT6_EN:1;               /* Interrupt6 Enable */
    vuint32_t INT7_EN:1;               /* Interrupt7 Enable */
    vuint32_t INT8_EN:1;               /* Interrupt8 Enable */
    vuint32_t INT9_EN:1;               /* Interrupt9 Enable */
    vuint32_t INT10_EN:1;              /* Interrupt10 Enable */
    vuint32_t INT11_EN:1;              /* Interrupt11 Enable */
    vuint32_t INT12_EN:1;              /* Interrupt12 Enable */
    vuint32_t INT13_EN:1;              /* Interrupt13 Enable */
    vuint32_t INT14_EN:1;              /* Interrupt14 Enable */
    vuint32_t INT15_EN:1;              /* Interrupt15 Enable */
    vuint32_t _unused_16:16;
  } B;
} MSCM_IRCP3IGR4_tag;

typedef union MSCM_IRCP4ISR4_union_tag { /* Interrupt Router CPn Interruptx Status Register */
  vuint32_t R;
  struct {
    vuint32_t PCIE_INT0:1;             /* PCIe-to-CPn Interrupt0 */
    vuint32_t PCIE_INT1:1;             /* PCIe-to-CPn Interrupt1 */
    vuint32_t PCIE_INT2:1;             /* PCIe-to-CPn Interrupt2 */
    vuint32_t PCIE_INT3:1;             /* PCIe-to-CPn Interrupt3 */
    vuint32_t PCIE_INT4:1;             /* PCIe-to-CPn Interrupt4 */
    vuint32_t PCIE_INT5:1;             /* PCIe-to-CPn Interrupt5 */
    vuint32_t PCIE_INT6:1;             /* PCIe-to-CPn Interrupt6 */
    vuint32_t PCIE_INT7:1;             /* PCIe-to-CPn Interrupt7 */
    vuint32_t PCIE_INT8:1;             /* PCIe-to-CPn Interrupt8 */
    vuint32_t PCIE_INT9:1;             /* PCIe-to-CPn Interrupt9 */
    vuint32_t PCIE_INT10:1;            /* PCIe-to-CPn Interrupt10 */
    vuint32_t PCIE_INT11:1;            /* PCIe-to-CPn Interrupt11 */
    vuint32_t PCIE_INT12:1;            /* PCIe-to-CPn Interrupt12 */
    vuint32_t PCIE_INT13:1;            /* PCIe-to-CPn Interrupt13 */
    vuint32_t PCIE_INT14:1;            /* PCIe-to-CPn Interrupt14 */
    vuint32_t PCIE_INT15:1;            /* PCIe-to-CPn Interrupt15 */
    vuint32_t _unused_16:16;
  } B;
} MSCM_IRCP4ISR4_tag;

typedef union MSCM_IRCP4IGR4_union_tag { /* Interrupt Router CPn Interruptx Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT0_EN:1;               /* Interrupt0 Enable */
    vuint32_t INT1_EN:1;               /* Interrupt1 Enable */
    vuint32_t INT2_EN:1;               /* Interrupt2 Enable */
    vuint32_t INT3_EN:1;               /* Interrupt3 Enable */
    vuint32_t INT4_EN:1;               /* Interrupt4 Enable */
    vuint32_t INT5_EN:1;               /* Interrupt5 Enable */
    vuint32_t INT6_EN:1;               /* Interrupt6 Enable */
    vuint32_t INT7_EN:1;               /* Interrupt7 Enable */
    vuint32_t INT8_EN:1;               /* Interrupt8 Enable */
    vuint32_t INT9_EN:1;               /* Interrupt9 Enable */
    vuint32_t INT10_EN:1;              /* Interrupt10 Enable */
    vuint32_t INT11_EN:1;              /* Interrupt11 Enable */
    vuint32_t INT12_EN:1;              /* Interrupt12 Enable */
    vuint32_t INT13_EN:1;              /* Interrupt13 Enable */
    vuint32_t INT14_EN:1;              /* Interrupt14 Enable */
    vuint32_t INT15_EN:1;              /* Interrupt15 Enable */
    vuint32_t _unused_16:16;
  } B;
} MSCM_IRCP4IGR4_tag;

typedef union MSCM_IRCP5ISR4_union_tag { /* Interrupt Router CPn Interruptx Status Register */
  vuint32_t R;
  struct {
    vuint32_t PCIE_INT0:1;             /* PCIe-to-CPn Interrupt0 */
    vuint32_t PCIE_INT1:1;             /* PCIe-to-CPn Interrupt1 */
    vuint32_t PCIE_INT2:1;             /* PCIe-to-CPn Interrupt2 */
    vuint32_t PCIE_INT3:1;             /* PCIe-to-CPn Interrupt3 */
    vuint32_t PCIE_INT4:1;             /* PCIe-to-CPn Interrupt4 */
    vuint32_t PCIE_INT5:1;             /* PCIe-to-CPn Interrupt5 */
    vuint32_t PCIE_INT6:1;             /* PCIe-to-CPn Interrupt6 */
    vuint32_t PCIE_INT7:1;             /* PCIe-to-CPn Interrupt7 */
    vuint32_t PCIE_INT8:1;             /* PCIe-to-CPn Interrupt8 */
    vuint32_t PCIE_INT9:1;             /* PCIe-to-CPn Interrupt9 */
    vuint32_t PCIE_INT10:1;            /* PCIe-to-CPn Interrupt10 */
    vuint32_t PCIE_INT11:1;            /* PCIe-to-CPn Interrupt11 */
    vuint32_t PCIE_INT12:1;            /* PCIe-to-CPn Interrupt12 */
    vuint32_t PCIE_INT13:1;            /* PCIe-to-CPn Interrupt13 */
    vuint32_t PCIE_INT14:1;            /* PCIe-to-CPn Interrupt14 */
    vuint32_t PCIE_INT15:1;            /* PCIe-to-CPn Interrupt15 */
    vuint32_t _unused_16:16;
  } B;
} MSCM_IRCP5ISR4_tag;

typedef union MSCM_IRCP5IGR4_union_tag { /* Interrupt Router CPn Interruptx Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT0_EN:1;               /* Interrupt0 Enable */
    vuint32_t INT1_EN:1;               /* Interrupt1 Enable */
    vuint32_t INT2_EN:1;               /* Interrupt2 Enable */
    vuint32_t INT3_EN:1;               /* Interrupt3 Enable */
    vuint32_t INT4_EN:1;               /* Interrupt4 Enable */
    vuint32_t INT5_EN:1;               /* Interrupt5 Enable */
    vuint32_t INT6_EN:1;               /* Interrupt6 Enable */
    vuint32_t INT7_EN:1;               /* Interrupt7 Enable */
    vuint32_t INT8_EN:1;               /* Interrupt8 Enable */
    vuint32_t INT9_EN:1;               /* Interrupt9 Enable */
    vuint32_t INT10_EN:1;              /* Interrupt10 Enable */
    vuint32_t INT11_EN:1;              /* Interrupt11 Enable */
    vuint32_t INT12_EN:1;              /* Interrupt12 Enable */
    vuint32_t INT13_EN:1;              /* Interrupt13 Enable */
    vuint32_t INT14_EN:1;              /* Interrupt14 Enable */
    vuint32_t INT15_EN:1;              /* Interrupt15 Enable */
    vuint32_t _unused_16:16;
  } B;
} MSCM_IRCP5IGR4_tag;

typedef union MSCM_IRCP6ISR4_union_tag { /* Interrupt Router CPn Interruptx Status Register */
  vuint32_t R;
  struct {
    vuint32_t PCIE_INT0:1;             /* PCIe-to-CPn Interrupt0 */
    vuint32_t PCIE_INT1:1;             /* PCIe-to-CPn Interrupt1 */
    vuint32_t PCIE_INT2:1;             /* PCIe-to-CPn Interrupt2 */
    vuint32_t PCIE_INT3:1;             /* PCIe-to-CPn Interrupt3 */
    vuint32_t PCIE_INT4:1;             /* PCIe-to-CPn Interrupt4 */
    vuint32_t PCIE_INT5:1;             /* PCIe-to-CPn Interrupt5 */
    vuint32_t PCIE_INT6:1;             /* PCIe-to-CPn Interrupt6 */
    vuint32_t PCIE_INT7:1;             /* PCIe-to-CPn Interrupt7 */
    vuint32_t PCIE_INT8:1;             /* PCIe-to-CPn Interrupt8 */
    vuint32_t PCIE_INT9:1;             /* PCIe-to-CPn Interrupt9 */
    vuint32_t PCIE_INT10:1;            /* PCIe-to-CPn Interrupt10 */
    vuint32_t PCIE_INT11:1;            /* PCIe-to-CPn Interrupt11 */
    vuint32_t PCIE_INT12:1;            /* PCIe-to-CPn Interrupt12 */
    vuint32_t PCIE_INT13:1;            /* PCIe-to-CPn Interrupt13 */
    vuint32_t PCIE_INT14:1;            /* PCIe-to-CPn Interrupt14 */
    vuint32_t PCIE_INT15:1;            /* PCIe-to-CPn Interrupt15 */
    vuint32_t _unused_16:16;
  } B;
} MSCM_IRCP6ISR4_tag;

typedef union MSCM_IRCP6IGR4_union_tag { /* Interrupt Router CPn Interruptx Generation Register */
  vuint32_t R;
  struct {
    vuint32_t INT0_EN:1;               /* Interrupt0 Enable */
    vuint32_t INT1_EN:1;               /* Interrupt1 Enable */
    vuint32_t INT2_EN:1;               /* Interrupt2 Enable */
    vuint32_t INT3_EN:1;               /* Interrupt3 Enable */
    vuint32_t INT4_EN:1;               /* Interrupt4 Enable */
    vuint32_t INT5_EN:1;               /* Interrupt5 Enable */
    vuint32_t INT6_EN:1;               /* Interrupt6 Enable */
    vuint32_t INT7_EN:1;               /* Interrupt7 Enable */
    vuint32_t INT8_EN:1;               /* Interrupt8 Enable */
    vuint32_t INT9_EN:1;               /* Interrupt9 Enable */
    vuint32_t INT10_EN:1;              /* Interrupt10 Enable */
    vuint32_t INT11_EN:1;              /* Interrupt11 Enable */
    vuint32_t INT12_EN:1;              /* Interrupt12 Enable */
    vuint32_t INT13_EN:1;              /* Interrupt13 Enable */
    vuint32_t INT14_EN:1;              /* Interrupt14 Enable */
    vuint32_t INT15_EN:1;              /* Interrupt15 Enable */
    vuint32_t _unused_16:16;
  } B;
} MSCM_IRCP6IGR4_tag;

typedef union MSCM_IRCPCFG_union_tag { /* Interrupt Router Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t CP0_TR:1;
    vuint32_t CP1_TR:1;
    vuint32_t CP2_TR:1;
    vuint32_t CP3_TR:1;
    vuint32_t CP4_TR:1;
    vuint32_t CP5_TR:1;
    vuint32_t CP6_TR:1;
    vuint32_t _unused_7:24;
    vuint32_t LOCK:1;                  /* LOCK */
  } B;
} MSCM_IRCPCFG_tag;

typedef union MSCM_IRNMIC_union_tag {  /* Interrupt Router Non-Maskable Interrupt Control Register */
  vuint32_t R;
  struct {
    vuint32_t CP0_NMI_EN:1;
    vuint32_t CP1_NMI_EN:1;
    vuint32_t CP2_NMI_EN:1;
    vuint32_t CP3_NMI_EN:1;
    vuint32_t CP4_NMI_EN:1;
    vuint32_t CP5_NMI_EN:1;
    vuint32_t CP6_NMI_EN:1;
    vuint32_t _unused_7:25;
  } B;
} MSCM_IRNMIC_tag;

typedef union MSCM_IRSPRC_union_tag {  /* Interrupt Router Shared Peripheral Routing Control Register */
  vuint16_t R;
  struct {
    vuint16_t GIC500:1;                /* Enable GIC500 Interrupt Steering */
    vuint16_t M7_0:1;                  /* Enable CM7_0 Interrupt Steering */
    vuint16_t M7_1:1;                  /* Enable CM7_1 Interrupt Steering */
    vuint16_t M7_2:1;                  /* Enable CM7_2 Interrupt Steering */
    vuint16_t _unused_4:11;
    vuint16_t LOCK:1;                  /* LOCK */
  } B;
} MSCM_IRSPRC_tag;

struct MSCM_tag {
  MSCM_CPXTYPE_tag CPXTYPE;            /* Processor x Type Register */
  MSCM_CPXNUM_tag CPXNUM;              /* Processor x Number Register */
  MSCM_CPXREV_tag CPXREV;              /* Processor x Revision */
  MSCM_CPXCFG0_tag CPXCFG0;            /* Processor x Configuration 0 Register */
  MSCM_CPXCFG1_tag CPXCFG1;            /* Processor x Configuration 1 Register */
  MSCM_CPXCFG2_tag CPXCFG2;            /* Processor x Configuration 2 Register */
  MSCM_CPXCFG3_tag CPXCFG3;            /* Processor x Configuration 3 Register */
  uint8_t MSCM_reserved0[4];
  MSCM_CP0TYPE_tag CP0TYPE;            /* Processor 0 Type Register */
  MSCM_CP0NUM_tag CP0NUM;              /* Processor 0 Number Register */
  MSCM_CP0REV_tag CP0REV;              /* Processor 0 Count Register */
  MSCM_CP0CFG0_tag CP0CFG0;            /* Processor 0 Configuration 0 Register */
  MSCM_CP0CFG1_tag CP0CFG1;            /* Processor 0 Configuration 1 Register */
  MSCM_CP0CFG2_tag CP0CFG2;            /* Processor 0 Configuration 2 Register */
  MSCM_CP0CFG3_tag CP0CFG3;            /* Processor 0 Configuration 3 Register */
  uint8_t MSCM_reserved1[4];
  MSCM_CP1TYPE_tag CP1TYPE;            /* Processor 1 Type Register */
  MSCM_CP1NUM_tag CP1NUM;              /* Processor 1 Number Register */
  MSCM_CP1REV_tag CP1REV;              /* Processor 1 Count Register */
  MSCM_CP1CFG0_tag CP1CFG0;            /* Processor 1 Configuration 0 Register */
  MSCM_CP1CFG1_tag CP1CFG1;            /* Processor 1 Configuration 1 Register */
  MSCM_CP1CFG2_tag CP1CFG2;            /* Processor 1 Configuration 2 Register */
  MSCM_CP1CFG3_tag CP1CFG3;            /* Processor 1 Configuration 3 Register */
  uint8_t MSCM_reserved2[4];
  MSCM_CP2TYPE_tag CP2TYPE;            /* Processor 2 Type Register */
  MSCM_CP2NUM_tag CP2NUM;              /* Processor 2 Number Register */
  MSCM_CP2REV_tag CP2REV;              /* Processor 1 Count Register */
  MSCM_CP2CFG0_tag CP2CFG0;            /* Processor 2 Configuration 0 Register */
  MSCM_CP2CFG1_tag CP2CFG1;            /* Processor 2 Configuration 1 Register */
  MSCM_CP2CFG2_tag CP2CFG2;            /* Processor 2 Configuration 2 Register */
  MSCM_CP2CFG3_tag CP2CFG3;            /* Processor 2 Configuration 3 Register */
  uint8_t MSCM_reserved3[4];
  MSCM_CP3TYPE_tag CP3TYPE;            /* Processor 3 Type Register */
  MSCM_CP3NUM_tag CP3NUM;              /* Processor 3 Number Register */
  MSCM_CP3REV_tag CP3REV;              /* Processor 1 Count Register */
  MSCM_CP3CFG0_tag CP3CFG0;            /* Processor 3 Configuration 0 Register */
  MSCM_CP3CFG1_tag CP3CFG1;            /* Processor 3 Configuration 1 Register */
  MSCM_CP3CFG2_tag CP3CFG2;            /* Processor 3 Configuration 2 Register */
  MSCM_CP3CFG3_tag CP3CFG3;            /* Processor 3 Configuration 3 Register */
  uint8_t MSCM_reserved4[4];
  MSCM_CP4TYPE_tag CP4TYPE;            /* Processor 4 Type Register */
  MSCM_CP4NUM_tag CP4NUM;              /* Processor 4 Number Register */
  MSCM_CP4REV_tag CP4REV;              /* Processor 4 Count Register */
  MSCM_CP4CFG0_tag CP4CFG0;            /* Processor 3 Configuration 0 Register */
  MSCM_CP4CFG1_tag CP4CFG1;            /* Processor 4 Configuration 1 Register */
  MSCM_CP4CFG2_tag CP4CFG2;            /* Processor 3 Configuration 2 Register */
  MSCM_CP4CFG3_tag CP4CFG3;            /* Processor 3 Configuration 3 Register */
  uint8_t MSCM_reserved5[4];
  MSCM_CP5TYPE_tag CP5TYPE;            /* Processor 4 Type Register */
  MSCM_CP5NUM_tag CP5NUM;              /* Processor 5 Number Register */
  MSCM_CP5REV_tag CP5REV;              /* Processor 5 Count Register */
  MSCM_CP5CFG0_tag CP5CFG0;            /* Processor 5 Configuration 0 Register */
  MSCM_CP5CFG1_tag CP5CFG1;            /* Processor 5 Configuration 1 Register */
  MSCM_CP5CFG2_tag CP5CFG2;            /* Processor 5 Configuration 2 Register */
  MSCM_CP5CFG3_tag CP5CFG3;            /* Processor 5 Configuration 3 Register */
  uint8_t MSCM_reserved6[4];
  MSCM_CP6TYPE_tag CP6TYPE;            /* Processor 6 Type Register */
  MSCM_CP6NUM_tag CP6NUM;              /* Processor 6 Number Register */
  MSCM_CP6REV_tag CP6REV;              /* Processor 6 Count Register */
  MSCM_CP6CFG0_tag CP6CFG0;            /* Processor 6 Configuration 0 Register */
  MSCM_CP6CFG1_tag CP6CFG1;            /* Processor 6 Configuration 1 Register */
  MSCM_CP6CFG2_tag CP6CFG2;            /* Processor 6 Configuration 2 Register */
  MSCM_CP6CFG3_tag CP6CFG3;            /* Processor 6 Configuration 3 Register */
  uint8_t MSCM_reserved7[260];
  MSCM_IRCP0ISR0_tag IRCP0ISR0;        /* Interrupt Router CP0 Interrupt0 Status Register */
  MSCM_IRCP0IGR0_tag IRCP0IGR0;        /* Interrupt Router CP0 Interrupt0 Generation Register */
  MSCM_IRCP0ISR1_tag IRCP0ISR1;        /* Interrupt Router CP0 Interrupt1 Status Register */
  MSCM_IRCP0IGR1_tag IRCP0IGR1;        /* Interrupt Router CP0 Interrupt1 Generation Register */
  MSCM_IRCP0ISR2_tag IRCP0ISR2;        /* Interrupt Router CP0 Interrupt2 Status Register */
  MSCM_IRCP0IGR2_tag IRCP0IGR2;        /* Interrupt Router CP0 Interrupt2 Generation Register */
  MSCM_IRCP0ISR3_tag IRCP0ISR3;        /* Interrupt Router CPn Interruptx Status Register */
  MSCM_IRCP0IGR3_tag IRCP0IGR3;        /* Interrupt Router CPn Interruptx Generation Register */
  MSCM_IRCP1ISR0_tag IRCP1ISR0;        /* Interrupt Router CP1 Interrupt0 Status Register */
  MSCM_IRCP1IGR0_tag IRCP1IGR0;        /* Interrupt Router CP1 Interrupt0 Generation Register */
  MSCM_IRCP1ISR1_tag IRCP1ISR1;        /* Interrupt Router CP1 Interrupt1 Status Register */
  MSCM_IRCP1IGR1_tag IRCP1IGR1;        /* Interrupt Router CP1 Interrupt1 Generation Register */
  MSCM_IRCP1ISR2_tag IRCP1ISR2;        /* Interrupt Router CP1 Interrupt2 Status Register */
  MSCM_IRCP1IGR2_tag IRCP1IGR2;        /* Interrupt Router CP1 Interrupt2 Generation Register */
  MSCM_IRCP1ISR3_tag IRCP1ISR3;        /* Interrupt Router CPn Interruptx Status Register */
  MSCM_IRCP1IGR3_tag IRCP1IGR3;        /* Interrupt Router CPn Interruptx Generation Register */
  MSCM_IRCP2ISR0_tag IRCP2ISR0;        /* Interrupt Router CP2 Interrupt0 Status Register */
  MSCM_IRCP2IGR0_tag IRCP2IGR0;        /* Interrupt Router CP2 Interrupt0 Generation Register */
  MSCM_IRCP2ISR1_tag IRCP2ISR1;        /* Interrupt Router CP2 Interrupt1 Status Register */
  MSCM_IRCP2IGR1_tag IRCP2IGR1;        /* Interrupt Router CP2 Interrupt1 Generation Register */
  MSCM_IRCP2ISR2_tag IRCP2ISR2;        /* Interrupt Router CP2 Interrupt2 Status Register */
  MSCM_IRCP2IGR2_tag IRCP2IGR2;        /* Interrupt Router CP2 Interrupt2 Generation Register */
  MSCM_IRCP2ISR3_tag IRCP2ISR3;        /* Interrupt Router CPn Interruptx Status Register */
  MSCM_IRCP2IGR3_tag IRCP2IGR3;        /* Interrupt Router CPn Interruptx Generation Register */
  MSCM_IRCP3ISR0_tag IRCP3ISR0;        /* Interrupt Router CP3 Interrupt0 Status Register */
  MSCM_IRCP3IGR0_tag IRCP3IGR0;        /* Interrupt Router CP3 Interrupt0 Generation Register */
  MSCM_IRCP3ISR1_tag IRCP3ISR1;        /* Interrupt Router CP3 Interrupt1 Status Register */
  MSCM_IRCP3IGR1_tag IRCP3IGR1;        /* Interrupt Router CP3 Interrupt1 Generation Register */
  MSCM_IRCP3ISR2_tag IRCP3ISR2;        /* Interrupt Router CP3 Interrupt2 Status Register */
  MSCM_IRCP3IGR2_tag IRCP3IGR2;        /* Interrupt Router CP3 Interrupt2 Generation Register */
  MSCM_IRCP3ISR3_tag IRCP3ISR3;        /* Interrupt Router CPn Interruptx Status Register */
  MSCM_IRCP3IGR3_tag IRCP3IGR3;        /* Interrupt Router CPn Interruptx Generation Register */
  MSCM_IRCP4ISR0_tag IRCP4ISR0;        /* Interrupt Router CP4 Interrupt0 Status Register */
  MSCM_IRCP4IGR0_tag IRCP4IGR0;        /* Interrupt Router CP4 Interrupt0 Generation Register */
  MSCM_IRCP4ISR1_tag IRCP4ISR1;        /* Interrupt Router CP4 Interrupt1 Status Register */
  MSCM_IRCP4IGR1_tag IRCP4IGR1;        /* Interrupt Router CP4 Interrupt1 Generation Register */
  MSCM_IRCP4ISR2_tag IRCP4ISR2;        /* Interrupt Router CP4 Interrupt2 Status Register */
  MSCM_IRCP4IGR2_tag IRCP4IGR2;        /* Interrupt Router CP4 Interrupt2 Generation Register */
  MSCM_IRCP4ISR3_tag IRCP4ISR3;        /* Interrupt Router CPn Interruptx Status Register */
  MSCM_IRCP4IGR3_tag IRCP4IGR3;        /* Interrupt Router CPn Interruptx Generation Register */
  MSCM_IRCP5ISR0_tag IRCP5ISR0;        /* Interrupt Router CP5 Interrupt0 Status Register */
  MSCM_IRCP5IGR0_tag IRCP5IGR0;        /* Interrupt Router CP5 Interrupt0 Generation Register */
  MSCM_IRCP5ISR1_tag IRCP5ISR1;        /* Interrupt Router CP5 Interrupt1 Status Register */
  MSCM_IRCP5IGR1_tag IRCP5IGR1;        /* Interrupt Router CP5 Interrupt1 Generation Register */
  MSCM_IRCP5ISR2_tag IRCP5ISR2;        /* Interrupt Router CP5 Interrupt2 Status Register */
  MSCM_IRCP5IGR2_tag IRCP5IGR2;        /* Interrupt Router CP5 Interrupt2 Generation Register */
  MSCM_IRCP5ISR3_tag IRCP5ISR3;        /* Interrupt Router CPn Interruptx Status Register */
  MSCM_IRCP5IGR3_tag IRCP5IGR3;        /* Interrupt Router CPn Interruptx Generation Register */
  MSCM_IRCP6ISR0_tag IRCP6ISR0;        /* Interrupt Router CP6 Interrupt0 Status Register */
  MSCM_IRCP6IGR0_tag IRCP6IGR0;        /* Interrupt Router CP6 Interrupt0 Generation Register */
  MSCM_IRCP6ISR1_tag IRCP6ISR1;        /* Interrupt Router CP6 Interrupt1 Status Register */
  MSCM_IRCP6IGR1_tag IRCP6IGR1;        /* Interrupt Router CP6 Interrupt1 Generation Register */
  MSCM_IRCP6ISR2_tag IRCP6ISR2;        /* Interrupt Router CP6 Interrupt2 Status Register */
  MSCM_IRCP6IGR2_tag IRCP6IGR2;        /* Interrupt Router CP6 Interrupt2 Generation Register */
  MSCM_IRCP6ISR3_tag IRCP6ISR3;        /* Interrupt Router CPn Interruptx Status Register */
  MSCM_IRCP6IGR3_tag IRCP6IGR3;        /* Interrupt Router CPn Interruptx Generation Register */
  uint8_t MSCM_reserved8[56];
  MSCM_IRCP0ISR4_tag IRCP0ISR4;        /* Interrupt Router CPn Interruptx Status Register */
  MSCM_IRCP0IGR4_tag IRCP0IGR4;        /* Interrupt Router CPn Interruptx Generation Register */
  uint8_t MSCM_reserved9[24];
  MSCM_IRCP1ISR4_tag IRCP1ISR4;        /* Interrupt Router CPn Interruptx Status Register */
  MSCM_IRCP1IGR4_tag IRCP1IGR4;        /* Interrupt Router CPn Interruptx Generation Register */
  uint8_t MSCM_reserved10[24];
  MSCM_IRCP2ISR4_tag IRCP2ISR4;        /* Interrupt Router CPn Interruptx Status Register */
  MSCM_IRCP2IGR4_tag IRCP2IGR4;        /* Interrupt Router CPn Interruptx Generation Register */
  uint8_t MSCM_reserved11[24];
  MSCM_IRCP3ISR4_tag IRCP3ISR4;        /* Interrupt Router CPn Interruptx Status Register */
  MSCM_IRCP3IGR4_tag IRCP3IGR4;        /* Interrupt Router CPn Interruptx Generation Register */
  uint8_t MSCM_reserved12[24];
  MSCM_IRCP4ISR4_tag IRCP4ISR4;        /* Interrupt Router CPn Interruptx Status Register */
  MSCM_IRCP4IGR4_tag IRCP4IGR4;        /* Interrupt Router CPn Interruptx Generation Register */
  uint8_t MSCM_reserved13[24];
  MSCM_IRCP5ISR4_tag IRCP5ISR4;        /* Interrupt Router CPn Interruptx Status Register */
  MSCM_IRCP5IGR4_tag IRCP5IGR4;        /* Interrupt Router CPn Interruptx Generation Register */
  uint8_t MSCM_reserved14[24];
  MSCM_IRCP6ISR4_tag IRCP6ISR4;        /* Interrupt Router CPn Interruptx Status Register */
  MSCM_IRCP6IGR4_tag IRCP6IGR4;        /* Interrupt Router CPn Interruptx Generation Register */
  uint8_t MSCM_reserved15[32];
  MSCM_IRCPCFG_tag IRCPCFG;            /* Interrupt Router Configuration Register */
  uint8_t MSCM_reserved16[1020];
  MSCM_IRNMIC_tag IRNMIC;              /* Interrupt Router Non-Maskable Interrupt Control Register */
  uint8_t MSCM_reserved17[124];
  MSCM_IRSPRC_tag IRSPRC[240];         /* Interrupt Router Shared Peripheral Routing Control Register */
};


/* ============================================================================
   =============================== Module: MTR ================================
   ============================================================================ */

typedef union MTR_EFD_union_tag {      /* ECC Fail Detection Register */
  vuint32_t R;
  struct {
    vuint32_t EFD0:1;                  /* ECC fail detection */
    vuint32_t EFD1:1;
    vuint32_t EFD2:1;
    vuint32_t EFD3:1;
    vuint32_t EFD4:1;
    vuint32_t EFD5:1;
    vuint32_t EFD6:1;
    vuint32_t EFD7:1;
    vuint32_t EFD8:1;
    vuint32_t EFD9:1;
    vuint32_t EFD10:1;
    vuint32_t EFD11:1;
    vuint32_t EFD12:1;
    vuint32_t EFD13:1;
    vuint32_t EFD14:1;
    vuint32_t EFD15:1;
    vuint32_t EFD16:1;
    vuint32_t EFD17:1;
    vuint32_t EFD18:1;
    vuint32_t EFD19:1;
    vuint32_t EFD20:1;
    vuint32_t EFD21:1;
    vuint32_t EFD22:1;
    vuint32_t EFD23:1;
    vuint32_t EFD24:1;
    vuint32_t EFD25:1;
    vuint32_t EFD26:1;
    vuint32_t EFD27:1;
    vuint32_t EFD28:1;
    vuint32_t EFD29:1;
    vuint32_t EFD30:1;
    vuint32_t EFD31:1;
  } B;
} MTR_EFD_tag;

typedef union MTR_BSTAT_union_tag {    /* BIST Status Register */
  vuint32_t R;
  struct {
    vuint32_t BSTAT:4;
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t HOLD_ERR:1;
    vuint32_t _unused_6:26;            /* Reserved */
  } B;
} MTR_BSTAT_tag;

struct MTR_tag {
  uint8_t MTR_reserved0[120];
  MTR_EFD_tag EFD;                     /* ECC Fail Detection Register */
  uint8_t MTR_reserved1[60];
  MTR_BSTAT_tag BSTAT;                 /* BIST Status Register */
};


/* ============================================================================
   =============================== Module: MU =================================
   ============================================================================ */

typedef union MU_VER_union_tag {       /* Version ID Register */
  vuint32_t R;
  struct {
    vuint32_t FEATURE:16;              /* Feature Set Number */
    vuint32_t MINOR:8;                 /* Minor Version Number */
    vuint32_t MAJOR:8;                 /* Major Version Number */
  } B;
} MU_VER_tag;

typedef union MU_PAR_union_tag {       /* Parameter Register */
  vuint32_t R;
  struct {
    vuint32_t TR_NUM:8;                /* Transmit Register Number */
    vuint32_t RR_NUM:8;                /* RR Number */
    vuint32_t GIR_NUM:8;               /* General Interrupt Request Number */
    vuint32_t FLAG_WIDTH:8;            /* Flag Width */
  } B;
} MU_PAR_tag;

typedef union MU_CR_union_tag {        /* Control Register */
  vuint32_t R;
  struct {
    vuint32_t MUR:1;                   /* MU Reset */
    vuint32_t MURIE:1;                 /* MUA Reset Interrupt Enable */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} MU_CR_tag;

typedef union MU_SR_union_tag {        /* Status Register */
  vuint32_t R;
  struct {
    vuint32_t MURS:1;                  /* MUA and MUB Reset State */
    vuint32_t MURIP:1;                 /* MU Reset Interrupt Pending */
    vuint32_t EP:1;                    /* MUA Side Event Pending */
    vuint32_t FUP:1;                   /* MUA Flags Update Pending */
    vuint32_t GIRP:1;                  /* MUA General Interrupt Pending */
    vuint32_t TEP:1;                   /* MUA Transmit Empty Pending */
    vuint32_t RFP:1;                   /* MUA Receive Full Pending Flag */
    vuint32_t _unused_7:25;            /* Reserved */
  } B;
} MU_SR_tag;

typedef union MU_CCR0_union_tag {      /* Core Control Register 0 */
  vuint32_t R;
  struct {
    vuint32_t NMI:1;                   /* MUB Non-maskable Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MU_CCR0_tag;

typedef union MU_CSSR0_union_tag {     /* Core Sticky Status Register 0 */
  vuint32_t R;
  struct {
    vuint32_t NMIC:1;                  /* Processor A Non-Maskable-Interrupt Clear */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MU_CSSR0_tag;

typedef union MU_FCR_union_tag {       /* Flag Control Register */
  vuint32_t R;
  struct {
    vuint32_t F0:1;                    /* MUA to MUB Flag n */
    vuint32_t F1:1;                    /* MUA to MUB Flag n */
    vuint32_t F2:1;                    /* MUA to MUB Flag n */
    vuint32_t F3:1;                    /* MUA to MUB Flag n */
    vuint32_t F4:1;                    /* MUA to MUB Flag n */
    vuint32_t F5:1;                    /* MUA to MUB Flag n */
    vuint32_t F6:1;                    /* MUA to MUB Flag n */
    vuint32_t F7:1;                    /* MUA to MUB Flag n */
    vuint32_t F8:1;                    /* MUA to MUB Flag n */
    vuint32_t F9:1;                    /* MUA to MUB Flag n */
    vuint32_t F10:1;                   /* MUA to MUB Flag n */
    vuint32_t F11:1;                   /* MUA to MUB Flag n */
    vuint32_t F12:1;                   /* MUA to MUB Flag n */
    vuint32_t F13:1;                   /* MUA to MUB Flag n */
    vuint32_t F14:1;                   /* MUA to MUB Flag n */
    vuint32_t F15:1;                   /* MUA to MUB Flag n */
    vuint32_t F16:1;                   /* MUA to MUB Flag n */
    vuint32_t F17:1;                   /* MUA to MUB Flag n */
    vuint32_t F18:1;                   /* MUA to MUB Flag n */
    vuint32_t F19:1;                   /* MUA to MUB Flag n */
    vuint32_t F20:1;                   /* MUA to MUB Flag n */
    vuint32_t F21:1;                   /* MUA to MUB Flag n */
    vuint32_t F22:1;                   /* MUA to MUB Flag n */
    vuint32_t F23:1;                   /* MUA to MUB Flag n */
    vuint32_t F24:1;                   /* MUA to MUB Flag n */
    vuint32_t F25:1;                   /* MUA to MUB Flag n */
    vuint32_t F26:1;                   /* MUA to MUB Flag n */
    vuint32_t F27:1;                   /* MUA to MUB Flag n */
    vuint32_t F28:1;                   /* MUA to MUB Flag n */
    vuint32_t F29:1;                   /* MUA to MUB Flag n */
    vuint32_t F30:1;                   /* MUA to MUB Flag n */
    vuint32_t F31:1;                   /* MUA to MUB Flag n */
  } B;
} MU_FCR_tag;

typedef union MU_FSR_union_tag {       /* Flag Status Register */
  vuint32_t R;
  struct {
    vuint32_t F0:1;                    /* MUB to MUA Side Flag n */
    vuint32_t F1:1;                    /* MUB to MUA Side Flag n */
    vuint32_t F2:1;                    /* MUB to MUA Side Flag n */
    vuint32_t F3:1;                    /* MUB to MUA Side Flag n */
    vuint32_t F4:1;                    /* MUB to MUA Side Flag n */
    vuint32_t F5:1;                    /* MUB to MUA Side Flag n */
    vuint32_t F6:1;                    /* MUB to MUA Side Flag n */
    vuint32_t F7:1;                    /* MUB to MUA Side Flag n */
    vuint32_t F8:1;                    /* MUB to MUA Side Flag n */
    vuint32_t F9:1;                    /* MUB to MUA Side Flag n */
    vuint32_t F10:1;                   /* MUB to MUA Side Flag n */
    vuint32_t F11:1;                   /* MUB to MUA Side Flag n */
    vuint32_t F12:1;                   /* MUB to MUA Side Flag n */
    vuint32_t F13:1;                   /* MUB to MUA Side Flag n */
    vuint32_t F14:1;                   /* MUB to MUA Side Flag n */
    vuint32_t F15:1;                   /* MUB to MUA Side Flag n */
    vuint32_t F16:1;                   /* MUB to MUA Side Flag n */
    vuint32_t F17:1;                   /* MUB to MUA Side Flag n */
    vuint32_t F18:1;                   /* MUB to MUA Side Flag n */
    vuint32_t F19:1;                   /* MUB to MUA Side Flag n */
    vuint32_t F20:1;                   /* MUB to MUA Side Flag n */
    vuint32_t F21:1;                   /* MUB to MUA Side Flag n */
    vuint32_t F22:1;                   /* MUB to MUA Side Flag n */
    vuint32_t F23:1;                   /* MUB to MUA Side Flag n */
    vuint32_t F24:1;                   /* MUB to MUA Side Flag n */
    vuint32_t F25:1;                   /* MUB to MUA Side Flag n */
    vuint32_t F26:1;                   /* MUB to MUA Side Flag n */
    vuint32_t F27:1;                   /* MUB to MUA Side Flag n */
    vuint32_t F28:1;                   /* MUB to MUA Side Flag n */
    vuint32_t F29:1;                   /* MUB to MUA Side Flag n */
    vuint32_t F30:1;                   /* MUB to MUA Side Flag n */
    vuint32_t F31:1;                   /* MUB to MUA Side Flag n */
  } B;
} MU_FSR_tag;

typedef union MU_GIER_union_tag {      /* General Interrupt Enable Register */
  vuint32_t R;
  struct {
    vuint32_t GIE0:1;                  /* MUA General Purpose Interrupt Enable n */
    vuint32_t GIE1:1;                  /* MUA General Purpose Interrupt Enable n */
    vuint32_t GIE2:1;                  /* MUA General Purpose Interrupt Enable n */
    vuint32_t GIE3:1;                  /* MUA General Purpose Interrupt Enable n */
    vuint32_t GIE4:1;                  /* MUA General Purpose Interrupt Enable n */
    vuint32_t GIE5:1;                  /* MUA General Purpose Interrupt Enable n */
    vuint32_t GIE6:1;                  /* MUA General Purpose Interrupt Enable n */
    vuint32_t GIE7:1;                  /* MUA General Purpose Interrupt Enable n */
    vuint32_t GIE8:1;                  /* MUA General Purpose Interrupt Enable n */
    vuint32_t GIE9:1;                  /* MUA General Purpose Interrupt Enable n */
    vuint32_t GIE10:1;                 /* MUA General Purpose Interrupt Enable n */
    vuint32_t GIE11:1;                 /* MUA General Purpose Interrupt Enable n */
    vuint32_t GIE12:1;                 /* MUA General Purpose Interrupt Enable n */
    vuint32_t GIE13:1;                 /* MUA General Purpose Interrupt Enable n */
    vuint32_t GIE14:1;                 /* MUA General Purpose Interrupt Enable n */
    vuint32_t GIE15:1;                 /* MUA General Purpose Interrupt Enable n */
    vuint32_t GIE16:1;                 /* MUA General Purpose Interrupt Enable n */
    vuint32_t GIE17:1;                 /* MUA General Purpose Interrupt Enable n */
    vuint32_t GIE18:1;                 /* MUA General Purpose Interrupt Enable n */
    vuint32_t GIE19:1;                 /* MUA General Purpose Interrupt Enable n */
    vuint32_t GIE20:1;                 /* MUA General Purpose Interrupt Enable n */
    vuint32_t GIE21:1;                 /* MUA General Purpose Interrupt Enable n */
    vuint32_t GIE22:1;                 /* MUA General Purpose Interrupt Enable n */
    vuint32_t GIE23:1;                 /* MUA General Purpose Interrupt Enable n */
    vuint32_t GIE24:1;                 /* MUA General Purpose Interrupt Enable n */
    vuint32_t GIE25:1;                 /* MUA General Purpose Interrupt Enable n */
    vuint32_t GIE26:1;                 /* MUA General Purpose Interrupt Enable n */
    vuint32_t GIE27:1;                 /* MUA General Purpose Interrupt Enable n */
    vuint32_t GIE28:1;                 /* MUA General Purpose Interrupt Enable n */
    vuint32_t GIE29:1;                 /* MUA General Purpose Interrupt Enable n */
    vuint32_t GIE30:1;                 /* MUA General Purpose Interrupt Enable n */
    vuint32_t GIE31:1;                 /* MUA General Purpose Interrupt Enable n */
  } B;
} MU_GIER_tag;

typedef union MU_GCR_union_tag {       /* General Control Register */
  vuint32_t R;
  struct {
    vuint32_t GIR0:1;                  /* MUA General Purpose Interrupt Request n */
    vuint32_t GIR1:1;                  /* MUA General Purpose Interrupt Request n */
    vuint32_t GIR2:1;                  /* MUA General Purpose Interrupt Request n */
    vuint32_t GIR3:1;                  /* MUA General Purpose Interrupt Request n */
    vuint32_t GIR4:1;                  /* MUA General Purpose Interrupt Request n */
    vuint32_t GIR5:1;                  /* MUA General Purpose Interrupt Request n */
    vuint32_t GIR6:1;                  /* MUA General Purpose Interrupt Request n */
    vuint32_t GIR7:1;                  /* MUA General Purpose Interrupt Request n */
    vuint32_t GIR8:1;                  /* MUA General Purpose Interrupt Request n */
    vuint32_t GIR9:1;                  /* MUA General Purpose Interrupt Request n */
    vuint32_t GIR10:1;                 /* MUA General Purpose Interrupt Request n */
    vuint32_t GIR11:1;                 /* MUA General Purpose Interrupt Request n */
    vuint32_t GIR12:1;                 /* MUA General Purpose Interrupt Request n */
    vuint32_t GIR13:1;                 /* MUA General Purpose Interrupt Request n */
    vuint32_t GIR14:1;                 /* MUA General Purpose Interrupt Request n */
    vuint32_t GIR15:1;                 /* MUA General Purpose Interrupt Request n */
    vuint32_t GIR16:1;                 /* MUA General Purpose Interrupt Request n */
    vuint32_t GIR17:1;                 /* MUA General Purpose Interrupt Request n */
    vuint32_t GIR18:1;                 /* MUA General Purpose Interrupt Request n */
    vuint32_t GIR19:1;                 /* MUA General Purpose Interrupt Request n */
    vuint32_t GIR20:1;                 /* MUA General Purpose Interrupt Request n */
    vuint32_t GIR21:1;                 /* MUA General Purpose Interrupt Request n */
    vuint32_t GIR22:1;                 /* MUA General Purpose Interrupt Request n */
    vuint32_t GIR23:1;                 /* MUA General Purpose Interrupt Request n */
    vuint32_t GIR24:1;                 /* MUA General Purpose Interrupt Request n */
    vuint32_t GIR25:1;                 /* MUA General Purpose Interrupt Request n */
    vuint32_t GIR26:1;                 /* MUA General Purpose Interrupt Request n */
    vuint32_t GIR27:1;                 /* MUA General Purpose Interrupt Request n */
    vuint32_t GIR28:1;                 /* MUA General Purpose Interrupt Request n */
    vuint32_t GIR29:1;                 /* MUA General Purpose Interrupt Request n */
    vuint32_t GIR30:1;                 /* MUA General Purpose Interrupt Request n */
    vuint32_t GIR31:1;                 /* MUA General Purpose Interrupt Request n */
  } B;
} MU_GCR_tag;

typedef union MU_GSR_union_tag {       /* General Status Register */
  vuint32_t R;
  struct {
    vuint32_t GIP0:1;                  /* MUA General Interrupt Request Pending n */
    vuint32_t GIP1:1;                  /* MUA General Interrupt Request Pending n */
    vuint32_t GIP2:1;                  /* MUA General Interrupt Request Pending n */
    vuint32_t GIP3:1;                  /* MUA General Interrupt Request Pending n */
    vuint32_t GIP4:1;                  /* MUA General Interrupt Request Pending n */
    vuint32_t GIP5:1;                  /* MUA General Interrupt Request Pending n */
    vuint32_t GIP6:1;                  /* MUA General Interrupt Request Pending n */
    vuint32_t GIP7:1;                  /* MUA General Interrupt Request Pending n */
    vuint32_t GIP8:1;                  /* MUA General Interrupt Request Pending n */
    vuint32_t GIP9:1;                  /* MUA General Interrupt Request Pending n */
    vuint32_t GIP10:1;                 /* MUA General Interrupt Request Pending n */
    vuint32_t GIP11:1;                 /* MUA General Interrupt Request Pending n */
    vuint32_t GIP12:1;                 /* MUA General Interrupt Request Pending n */
    vuint32_t GIP13:1;                 /* MUA General Interrupt Request Pending n */
    vuint32_t GIP14:1;                 /* MUA General Interrupt Request Pending n */
    vuint32_t GIP15:1;                 /* MUA General Interrupt Request Pending n */
    vuint32_t GIP16:1;                 /* MUA General Interrupt Request Pending n */
    vuint32_t GIP17:1;                 /* MUA General Interrupt Request Pending n */
    vuint32_t GIP18:1;                 /* MUA General Interrupt Request Pending n */
    vuint32_t GIP19:1;                 /* MUA General Interrupt Request Pending n */
    vuint32_t GIP20:1;                 /* MUA General Interrupt Request Pending n */
    vuint32_t GIP21:1;                 /* MUA General Interrupt Request Pending n */
    vuint32_t GIP22:1;                 /* MUA General Interrupt Request Pending n */
    vuint32_t GIP23:1;                 /* MUA General Interrupt Request Pending n */
    vuint32_t GIP24:1;                 /* MUA General Interrupt Request Pending n */
    vuint32_t GIP25:1;                 /* MUA General Interrupt Request Pending n */
    vuint32_t GIP26:1;                 /* MUA General Interrupt Request Pending n */
    vuint32_t GIP27:1;                 /* MUA General Interrupt Request Pending n */
    vuint32_t GIP28:1;                 /* MUA General Interrupt Request Pending n */
    vuint32_t GIP29:1;                 /* MUA General Interrupt Request Pending n */
    vuint32_t GIP30:1;                 /* MUA General Interrupt Request Pending n */
    vuint32_t GIP31:1;                 /* MUA General Interrupt Request Pending n */
  } B;
} MU_GSR_tag;

typedef union MU_TCR_union_tag {       /* Transmit Control Register */
  vuint32_t R;
  struct {
    vuint32_t TIE0:1;                  /* MUA Transmit Interrupt Enable n */
    vuint32_t TIE1:1;                  /* MUA Transmit Interrupt Enable n */
    vuint32_t TIE2:1;                  /* MUA Transmit Interrupt Enable n */
    vuint32_t TIE3:1;                  /* MUA Transmit Interrupt Enable n */
    vuint32_t TIE4:1;                  /* MUA Transmit Interrupt Enable n */
    vuint32_t TIE5:1;                  /* MUA Transmit Interrupt Enable n */
    vuint32_t TIE6:1;                  /* MUA Transmit Interrupt Enable n */
    vuint32_t TIE7:1;                  /* MUA Transmit Interrupt Enable n */
    vuint32_t TIE8:1;                  /* MUA Transmit Interrupt Enable n */
    vuint32_t TIE9:1;                  /* MUA Transmit Interrupt Enable n */
    vuint32_t TIE10:1;                 /* MUA Transmit Interrupt Enable n */
    vuint32_t TIE11:1;                 /* MUA Transmit Interrupt Enable n */
    vuint32_t TIE12:1;                 /* MUA Transmit Interrupt Enable n */
    vuint32_t TIE13:1;                 /* MUA Transmit Interrupt Enable n */
    vuint32_t TIE14:1;                 /* MUA Transmit Interrupt Enable n */
    vuint32_t TIE15:1;                 /* MUA Transmit Interrupt Enable n */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} MU_TCR_tag;

typedef union MU_TSR_union_tag {       /* Transmit Status Register */
  vuint32_t R;
  struct {
    vuint32_t TE0:1;                   /* MUA Transmit Register n Empty */
    vuint32_t TE1:1;                   /* MUA Transmit Register n Empty */
    vuint32_t TE2:1;                   /* MUA Transmit Register n Empty */
    vuint32_t TE3:1;                   /* MUA Transmit Register n Empty */
    vuint32_t TE4:1;                   /* MUA Transmit Register n Empty */
    vuint32_t TE5:1;                   /* MUA Transmit Register n Empty */
    vuint32_t TE6:1;                   /* MUA Transmit Register n Empty */
    vuint32_t TE7:1;                   /* MUA Transmit Register n Empty */
    vuint32_t TE8:1;                   /* MUA Transmit Register n Empty */
    vuint32_t TE9:1;                   /* MUA Transmit Register n Empty */
    vuint32_t TE10:1;                  /* MUA Transmit Register n Empty */
    vuint32_t TE11:1;                  /* MUA Transmit Register n Empty */
    vuint32_t TE12:1;                  /* MUA Transmit Register n Empty */
    vuint32_t TE13:1;                  /* MUA Transmit Register n Empty */
    vuint32_t TE14:1;                  /* MUA Transmit Register n Empty */
    vuint32_t TE15:1;                  /* MUA Transmit Register n Empty */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} MU_TSR_tag;

typedef union MU_RCR_union_tag {       /* Receive Control Register */
  vuint32_t R;
  struct {
    vuint32_t RIE0:1;                  /* MUA Receive Interrupt Enable n */
    vuint32_t RIE1:1;                  /* MUA Receive Interrupt Enable n */
    vuint32_t RIE2:1;                  /* MUA Receive Interrupt Enable n */
    vuint32_t RIE3:1;                  /* MUA Receive Interrupt Enable n */
    vuint32_t RIE4:1;                  /* MUA Receive Interrupt Enable n */
    vuint32_t RIE5:1;                  /* MUA Receive Interrupt Enable n */
    vuint32_t RIE6:1;                  /* MUA Receive Interrupt Enable n */
    vuint32_t RIE7:1;                  /* MUA Receive Interrupt Enable n */
    vuint32_t RIE8:1;                  /* MUA Receive Interrupt Enable n */
    vuint32_t RIE9:1;                  /* MUA Receive Interrupt Enable n */
    vuint32_t RIE10:1;                 /* MUA Receive Interrupt Enable n */
    vuint32_t RIE11:1;                 /* MUA Receive Interrupt Enable n */
    vuint32_t RIE12:1;                 /* MUA Receive Interrupt Enable n */
    vuint32_t RIE13:1;                 /* MUA Receive Interrupt Enable n */
    vuint32_t RIE14:1;                 /* MUA Receive Interrupt Enable n */
    vuint32_t RIE15:1;                 /* MUA Receive Interrupt Enable n */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} MU_RCR_tag;

typedef union MU_RSR_union_tag {       /* Receive Status Register */
  vuint32_t R;
  struct {
    vuint32_t RF0:1;                   /* MUA Receive Register n Full */
    vuint32_t RF1:1;                   /* MUA Receive Register n Full */
    vuint32_t RF2:1;                   /* MUA Receive Register n Full */
    vuint32_t RF3:1;                   /* MUA Receive Register n Full */
    vuint32_t RF4:1;                   /* MUA Receive Register n Full */
    vuint32_t RF5:1;                   /* MUA Receive Register n Full */
    vuint32_t RF6:1;                   /* MUA Receive Register n Full */
    vuint32_t RF7:1;                   /* MUA Receive Register n Full */
    vuint32_t RF8:1;                   /* MUA Receive Register n Full */
    vuint32_t RF9:1;                   /* MUA Receive Register n Full */
    vuint32_t RF10:1;                  /* MUA Receive Register n Full */
    vuint32_t RF11:1;                  /* MUA Receive Register n Full */
    vuint32_t RF12:1;                  /* MUA Receive Register n Full */
    vuint32_t RF13:1;                  /* MUA Receive Register n Full */
    vuint32_t RF14:1;                  /* MUA Receive Register n Full */
    vuint32_t RF15:1;                  /* MUA Receive Register n Full */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} MU_RSR_tag;

typedef union MU_TR_union_tag {        /* Transmit Register */
  vuint32_t R;
  struct {
    vuint32_t TR_DATA:32;              /* MUA Transmit Data */
  } B;
} MU_TR_tag;

typedef union MU_RR_union_tag {        /* Receive Register */
  vuint32_t R;
  struct {
    vuint32_t RR_DATA:32;              /* MUA Receive Data */
  } B;
} MU_RR_tag;

struct MU_tag {
  MU_VER_tag VER;                      /* Version ID Register */
  MU_PAR_tag PAR;                      /* Parameter Register */
  MU_CR_tag CR;                        /* Control Register */
  MU_SR_tag SR;                        /* Status Register */
  MU_CCR0_tag CCR0;                    /* Core Control Register 0 */
  uint8_t MU_reserved0[4];
  MU_CSSR0_tag CSSR0;                  /* Core Sticky Status Register 0 */
  uint8_t MU_reserved1[228];
  MU_FCR_tag FCR;                      /* Flag Control Register */
  MU_FSR_tag FSR;                      /* Flag Status Register */
  uint8_t MU_reserved2[8];
  MU_GIER_tag GIER;                    /* General Interrupt Enable Register */
  MU_GCR_tag GCR;                      /* General Control Register */
  MU_GSR_tag GSR;                      /* General Status Register */
  uint8_t MU_reserved3[4];
  MU_TCR_tag TCR;                      /* Transmit Control Register */
  MU_TSR_tag TSR;                      /* Transmit Status Register */
  MU_RCR_tag RCR;                      /* Receive Control Register */
  MU_RSR_tag RSR;                      /* Receive Status Register */
  uint8_t MU_reserved4[208];
  MU_TR_tag TR[16];                    /* Transmit Register */
  uint8_t MU_reserved5[64];
  MU_RR_tag RR[16];                    /* Receive Register */
};


/* ============================================================================
   =============================== Module: NCBUID_reset_value =================
   ============================================================================ */

typedef union NCBUID_reset_value_NCBUTC_union_tag { /* NCBU Transaction Control */
  vuint32_t R;
  struct {
    vuint32_t TRANSEN:1;               /* Agent Transaction Enable */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} NCBUID_reset_value_NCBUTC_tag;

typedef union NCBUID_reset_value_NCBUTA_union_tag { /* NCBU Transaction Activity */
  vuint32_t R;
  struct {
    vuint32_t TRANSACTV:1;             /* Transaction Active */
    vuint32_t SNPACTV:1;               /* Snoop Transaction Active */
    vuint32_t COHACTV:1;               /* Coherent Transaction Active */
    vuint32_t _unused_3:29;            /* Reserved */
  } B;
} NCBUID_reset_value_NCBUTA_tag;

typedef union NCBUID_reset_value_NCBUCEC_union_tag { /* NCBU Correctable Error Control */
  vuint32_t R;
  struct {
    vuint32_t ERRDETEN:1;              /* Correctable Error Detection Enable */
    vuint32_t ERRINTEN:1;              /* Correctable Error Interrupt Enable */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t ERRTHRESHOLD:8;          /* Correctable Error Threshold */
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} NCBUID_reset_value_NCBUCEC_tag;

typedef union NCBUID_reset_value_NCBUCES_union_tag { /* NCBU Correctable Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERRVLD:1;                /* Error Valid */
    vuint32_t ERROVF:1;                /* Error Overflow */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t ERRCOUNT:8;              /* Error Count */
    vuint32_t ERRTYPE:4;               /* Error Type */
    vuint32_t ERRINFO:8;               /* Error Info */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} NCBUID_reset_value_NCBUCES_tag;

typedef union NCBUID_reset_value_NCBUCELR0_union_tag { /* NCBU Correctable Error Location Register 0 */
  vuint32_t R;
  struct {
    vuint32_t ERRENTRY:20;             /* Error Entry (or Set) */
    vuint32_t ERRWAY:6;                /* Error Way */
    vuint32_t ERRWORD:6;               /* Error Word */
  } B;
} NCBUID_reset_value_NCBUCELR0_tag;

typedef union NCBUID_reset_value_NCBUCELR1_union_tag { /* NCBU Correctable Error Location Register 1 */
  vuint32_t R;
  struct {
    vuint32_t ERRADDR:12;              /* Error Address */
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} NCBUID_reset_value_NCBUCELR1_tag;

typedef union NCBUID_reset_value_NCBUCESA_union_tag { /* NCBU Correctable Error Status Alias */
  vuint32_t R;
  struct {
    vuint32_t ERRVLD:1;                /* Error Valid */
    vuint32_t ERROVF:1;                /* Error Overflow */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t ERRCOUNT:8;              /* Error Count */
    vuint32_t ERRTYPE:4;               /* Error Type */
    vuint32_t ERRINFO:8;               /* Error Info */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} NCBUID_reset_value_NCBUCESA_tag;

typedef union NCBUID_reset_value_NCBUUEC_union_tag { /* NCBU Uncorrectable Error Control */
  vuint32_t R;
  struct {
    vuint32_t ERRDETEN:1;              /* Uncorrectable Error Detection Enable */
    vuint32_t ERRINTEN:1;              /* Uncorrectable Error Interrupt Enable */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t ERRTHRESHOLD:8;          /* Uncorrectable Error Threshold */
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} NCBUID_reset_value_NCBUUEC_tag;

typedef union NCBUID_reset_value_NCBUUES_union_tag { /* NCBU Uncorrectable Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERRVLD:1;                /* Error Valid */
    vuint32_t ERROVF:1;                /* Error Overflow */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t ERRCOUNT:8;              /* Error Count */
    vuint32_t ERRTYPE:4;               /* Error Type */
    vuint32_t ERRINFO:8;               /* Error Info */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} NCBUID_reset_value_NCBUUES_tag;

typedef union NCBUID_reset_value_NCBUUELR0_union_tag { /* NCBU Uncorrectable Error Location Register 0 */
  vuint32_t R;
  struct {
    vuint32_t ERRENTRY:20;             /* Error Entry (or Set) */
    vuint32_t ERRWAY:6;                /* Error Way */
    vuint32_t ERRWORD:6;               /* Error Word */
  } B;
} NCBUID_reset_value_NCBUUELR0_tag;

typedef union NCBUID_reset_value_NCBUUELR1_union_tag { /* NCBU Uncorrectable Error Location Register 1 */
  vuint32_t R;
  struct {
    vuint32_t ERRADDR:12;              /* Error Address */
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} NCBUID_reset_value_NCBUUELR1_tag;

typedef union NCBUID_reset_value_NCBUUESA_union_tag { /* NCBU Uncorrectable Error Status Alias */
  vuint32_t R;
  struct {
    vuint32_t ERRVLD:1;                /* Error Valid */
    vuint32_t ERROVF:1;                /* Error Overflow */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t ERRCOUNT:8;              /* Error Count */
    vuint32_t ERRTYPE:4;               /* Error Type */
    vuint32_t ERRINFO:8;               /* Error Info */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} NCBUID_reset_value_NCBUUESA_tag;

typedef union NCBUID_reset_value_NCBUID_union_tag { /* NCBU Identification Register */
  vuint32_t R;
  struct {
    vuint32_t IMPLVER:8;               /* Implementation Version */
    vuint32_t NCBID:7;                 /* Non-coherent Bridge Identifier */
    vuint32_t CA:1;                    /* Caching Agent */
    vuint32_t TYPE:4;                  /* Type */
    vuint32_t SFID:5;                  /* Snoop Filter Identifier */
    vuint32_t _unused_25:6;            /* Reserved */
    vuint32_t _unused_31:1;
  } B;
} NCBUID_reset_value_NCBUID_tag;

struct NCBUID_reset_value_tag {
  NCBUID_reset_value_NCBUTC_tag NCBUTC; /* NCBU Transaction Control */
  NCBUID_reset_value_NCBUTA_tag NCBUTA; /* NCBU Transaction Activity */
  uint8_t NCBUID_reset_value_reserved0[248];
  NCBUID_reset_value_NCBUCEC_tag NCBUCEC; /* NCBU Correctable Error Control */
  NCBUID_reset_value_NCBUCES_tag NCBUCES; /* NCBU Correctable Error Status */
  NCBUID_reset_value_NCBUCELR0_tag NCBUCELR0; /* NCBU Correctable Error Location Register 0 */
  NCBUID_reset_value_NCBUCELR1_tag NCBUCELR1; /* NCBU Correctable Error Location Register 1 */
  uint8_t NCBUID_reset_value_reserved1[20];
  NCBUID_reset_value_NCBUCESA_tag NCBUCESA; /* NCBU Correctable Error Status Alias */
  uint8_t NCBUID_reset_value_reserved2[24];
  NCBUID_reset_value_NCBUUEC_tag NCBUUEC; /* NCBU Uncorrectable Error Control */
  NCBUID_reset_value_NCBUUES_tag NCBUUES; /* NCBU Uncorrectable Error Status */
  NCBUID_reset_value_NCBUUELR0_tag NCBUUELR0; /* NCBU Uncorrectable Error Location Register 0 */
  NCBUID_reset_value_NCBUUELR1_tag NCBUUELR1; /* NCBU Uncorrectable Error Location Register 1 */
  uint8_t NCBUID_reset_value_reserved3[20];
  NCBUID_reset_value_NCBUUESA_tag NCBUUESA; /* NCBU Uncorrectable Error Status Alias */
  uint8_t NCBUID_reset_value_reserved4[3732];
  NCBUID_reset_value_NCBUID_tag NCBUID; /* NCBU Identification Register */
};


/* ============================================================================
   =============================== Module: OCOTP ==============================
   ============================================================================ */

typedef union OCOTP_CTRL_SYS_union_tag { /* System master's control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;
    vuint32_t CRC_TEST:1;              /* CRC test for system master */
    vuint32_t RD_WR:4;                 /* eFuse read and write control for the system master */
    vuint32_t _unused_6:1;
    vuint32_t _unused_7:9;
    vuint32_t AUTH_KEY:16;             /* Key to unlock read and write operation */
  } B;
} OCOTP_CTRL_SYS_tag;

typedef union OCOTP_ADDR_SYS_union_tag { /* System master's eFuse address for read or write operation */
  vuint32_t R;
  struct {
    vuint32_t ADDR:16;                 /* eFuse read or write address */
    vuint32_t _unused_16:16;
  } B;
} OCOTP_ADDR_SYS_tag;

typedef union OCOTP_WRDATA_SYS_union_tag { /* System master's eFuse write data */
  vuint32_t R;
  struct {
    vuint32_t DATA:32;                 /* eFuse data for eFuse write operation */
  } B;
} OCOTP_WRDATA_SYS_tag;

typedef union OCOTP_RDATA_SYS_union_tag { /* System master's eFuse read data */
  vuint32_t R;
  struct {
    vuint32_t DATA:32;                 /* Read data */
  } B;
} OCOTP_RDATA_SYS_tag;

typedef union OCOTP_CTRL_FBX_union_tag { /* FBXC control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;
    vuint32_t _unused_1:7;
    vuint32_t SEC_MODE:1;              /* Indicates that the FBXC is in Secure mode. */
    vuint32_t _unused_9:7;
    vuint32_t FBX_PD:1;                /* Fusebox Power Down */
    vuint32_t IPG_STOP:1;              /* Low Power entry */
    vuint32_t IPG_STOP_ACK:1;          /* Low-power mode acknowledgment */
    vuint32_t _unused_19:13;
  } B;
} OCOTP_CTRL_FBX_tag;

typedef union OCOTP_CRC_RGN_SYS_union_tag { /* eFuse region for CRC validation */
  vuint32_t R;
  struct {
    vuint32_t START_ADDR:16;           /* Start eFuse address for CRC calculation */
    vuint32_t END_ADDR:16;             /* End eFuse address for CRC calculation */
  } B;
} OCOTP_CRC_RGN_SYS_tag;

typedef union OCOTP_CRC_ADDR_SYS_union_tag { /* Pre-calculated CRC eFuse address for comparision */
  vuint32_t R;
  struct {
    vuint32_t ADDR:16;                 /* CRC eFuse Address used for comparison in CRC test */
    vuint32_t _unused_16:16;
  } B;
} OCOTP_CRC_ADDR_SYS_tag;

typedef union OCOTP_CRC_VALUE_SYS_union_tag { /* CRC calculated from the eFuses */
  vuint32_t R;
  struct {
    vuint32_t CRC:32;                  /* CRC value */
  } B;
} OCOTP_CRC_VALUE_SYS_tag;

typedef union OCOTP_GPR_union_tag {    /* General purpose */
  vuint32_t R;
  struct {
    vuint32_t GPR:32;                  /* General-purpose field that you can use to store information for your application */
  } B;
} OCOTP_GPR_tag;

typedef union OCOTP_STATUS_SYS_union_tag { /* System master's access status */
  vuint32_t R;
  struct {
    vuint32_t BUSY:1;                  /* OCOTP busy indication */
    vuint32_t CRC_FAIL:1;              /* CRC compare status */
    vuint32_t ERROR:1;                 /* Error status flag */
    vuint32_t _unused_3:29;
  } B;
} OCOTP_STATUS_SYS_tag;

typedef union OCOTP_VERSION_union_tag { /* OCOTP design version */
  vuint32_t R;
  struct {
    vuint32_t STEP:16;                 /* The step part of the RTL version */
    vuint32_t MINOR:8;                 /* The minor part of the RTL version */
    vuint32_t MAJOR:8;                 /* The major part of the RTL version */
  } B;
} OCOTP_VERSION_tag;

typedef union OCOTP_SEC_union_tag {    /* ECC status for single-bit ECC error */
  vuint32_t R;
  struct {
    vuint32_t SEC1:1;                  /* SEC error status */
    vuint32_t SEC2:1;                  /* SEC error status */
    vuint32_t SEC3:1;                  /* SEC error status */
    vuint32_t SEC4:1;                  /* SEC error status */
    vuint32_t SEC5:1;                  /* SEC error status */
    vuint32_t SEC6:1;                  /* SEC error status */
    vuint32_t SEC7:1;                  /* SEC error status */
    vuint32_t SEC8:1;                  /* SEC error status */
    vuint32_t SEC9:1;                  /* SEC error status */
    vuint32_t SEC10:1;                 /* SEC error status */
    vuint32_t SEC11:1;                 /* SEC error status */
    vuint32_t SEC12:1;                 /* SEC error status */
    vuint32_t SEC13:1;                 /* SEC error status */
    vuint32_t SEC14:1;                 /* SEC error status */
    vuint32_t SEC15:1;                 /* SEC error status */
    vuint32_t SEC16:1;                 /* SEC error status */
    vuint32_t SEC17:1;                 /* SEC error status */
    vuint32_t SEC18:1;                 /* SEC error status */
    vuint32_t SEC19:1;                 /* SEC error status */
    vuint32_t SEC20:1;                 /* SEC error status */
    vuint32_t SEC21:1;                 /* SEC error status */
    vuint32_t SEC22:1;                 /* SEC error status */
    vuint32_t SEC23:1;                 /* SEC error status */
    vuint32_t SEC24:1;                 /* SEC error status */
    vuint32_t SEC25:1;                 /* SEC error status */
    vuint32_t SEC26:1;                 /* SEC error status */
    vuint32_t SEC27:1;                 /* SEC error status */
    vuint32_t SEC28:1;                 /* SEC error status */
    vuint32_t SEC29:1;                 /* SEC error status */
    vuint32_t SEC30:1;                 /* SEC error status */
    vuint32_t SEC31:1;                 /* SEC error status */
    vuint32_t SEC32:1;                 /* SEC error status */
  } B;
} OCOTP_SEC_tag;

typedef union OCOTP_DED_union_tag {    /* ECC status for double-bit ECC error */
  vuint32_t R;
  struct {
    vuint32_t DED1:1;                  /* DED error status */
    vuint32_t DED2:1;                  /* DED error status */
    vuint32_t DED3:1;                  /* DED error status */
    vuint32_t DED4:1;                  /* DED error status */
    vuint32_t DED5:1;                  /* DED error status */
    vuint32_t DED6:1;                  /* DED error status */
    vuint32_t DED7:1;                  /* DED error status */
    vuint32_t DED8:1;                  /* DED error status */
    vuint32_t DED9:1;                  /* DED error status */
    vuint32_t DED10:1;                 /* DED error status */
    vuint32_t DED11:1;                 /* DED error status */
    vuint32_t DED12:1;                 /* DED error status */
    vuint32_t DED13:1;                 /* DED error status */
    vuint32_t DED14:1;                 /* DED error status */
    vuint32_t DED15:1;                 /* DED error status */
    vuint32_t DED16:1;                 /* DED error status */
    vuint32_t DED17:1;                 /* DED error status */
    vuint32_t DED18:1;                 /* DED error status */
    vuint32_t DED19:1;                 /* DED error status */
    vuint32_t DED20:1;                 /* DED error status */
    vuint32_t DED21:1;                 /* DED error status */
    vuint32_t DED22:1;                 /* DED error status */
    vuint32_t DED23:1;                 /* DED error status */
    vuint32_t DED24:1;                 /* DED error status */
    vuint32_t DED25:1;                 /* DED error status */
    vuint32_t DED26:1;                 /* DED error status */
    vuint32_t DED27:1;                 /* DED error status */
    vuint32_t DED28:1;                 /* DED error status */
    vuint32_t DED29:1;                 /* DED error status */
    vuint32_t DED30:1;                 /* DED error status */
    vuint32_t DED31:1;                 /* DED error status */
    vuint32_t DED32:1;                 /* DED error status */
  } B;
} OCOTP_DED_tag;

typedef union OCOTP_ERR_INJCTR_union_tag { /* ECC error injector */
  vuint32_t R;
  struct {
    vuint32_t ADDR:16;                 /* The address of the bit in the shadow register where you want to inject the single-bit ECC error. The OCOTP inverts that bit. */
    vuint32_t _unused_16:16;
  } B;
} OCOTP_ERR_INJCTR_tag;

typedef union OCOTP_SHADOWS_union_tag { /* Shadow */
  vuint32_t R;
  struct {
    vuint32_t EFUSES:32;               /* OTP data */
  } B;
} OCOTP_SHADOWS_tag;

struct OCOTP_tag {
  OCOTP_CTRL_SYS_tag CTRL_SYS;         /* System master's control */
  OCOTP_ADDR_SYS_tag ADDR_SYS;         /* System master's eFuse address for read or write operation */
  OCOTP_WRDATA_SYS_tag WRDATA_SYS;     /* System master's eFuse write data */
  OCOTP_RDATA_SYS_tag RDATA_SYS;       /* System master's eFuse read data */
  uint8_t OCOTP_reserved0[32];
  OCOTP_CTRL_FBX_tag CTRL_FBX;         /* FBXC control */
  OCOTP_CRC_RGN_SYS_tag CRC_RGN_SYS;   /* eFuse region for CRC validation */
  OCOTP_CRC_ADDR_SYS_tag CRC_ADDR_SYS; /* Pre-calculated CRC eFuse address for comparision */
  OCOTP_CRC_VALUE_SYS_tag CRC_VALUE_SYS; /* CRC calculated from the eFuses */
  OCOTP_GPR_tag GPR[2];                /* General purpose */
  uint8_t OCOTP_reserved1[8];
  OCOTP_STATUS_SYS_tag STATUS_SYS;     /* System master's access status */
  uint8_t OCOTP_reserved2[8];
  OCOTP_VERSION_tag VERSION;           /* OCOTP design version */
  uint8_t OCOTP_reserved3[16];
  OCOTP_SEC_tag SEC[4];                /* ECC status for single-bit ECC error */
  uint8_t OCOTP_reserved4[48];
  OCOTP_DED_tag DED[4];                /* ECC status for double-bit ECC error */
  uint8_t OCOTP_reserved5[48];
  OCOTP_ERR_INJCTR_tag ERR_INJCTR;     /* ECC error injector */
  uint8_t OCOTP_reserved6[268];
  OCOTP_SHADOWS_tag SHADOWS[128];      /* Shadow */
};


/* ============================================================================
   =============================== Module: PERIPH_PLL =========================
   ============================================================================ */

typedef union PERIPH_PLL_PLLCR_union_tag { /* PLL Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t PLLPD:1;                 /* PLL power down */
  } B;
} PERIPH_PLL_PLLCR_tag;

typedef union PERIPH_PLL_PLLSR_union_tag { /* PLL status register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t LOCK:1;                  /* Lock status */
    vuint32_t LOL:1;                   /* Loss-Of-Lock flag */
    vuint32_t _unused_4:4;
    vuint32_t _unused_8:3;
    vuint32_t _unused_11:21;
  } B;
} PERIPH_PLL_PLLSR_tag;

typedef union PERIPH_PLL_PLLDV_union_tag { /* PLL Divider */
  vuint32_t R;
  struct {
    vuint32_t MFI:8;                   /* Integer portion of loop divider. */
    vuint32_t _unused_8:4;
    vuint32_t RDIV:3;                  /* Input clock predivider */
    vuint32_t _unused_15:1;
    vuint32_t _unused_16:6;
    vuint32_t _unused_22:3;
    vuint32_t _unused_25:6;
    vuint32_t _unused_31:1;
  } B;
} PERIPH_PLL_PLLDV_tag;

typedef union PERIPH_PLL_PLLFD_union_tag { /* PLL Fractional Divider */
  vuint32_t R;
  struct {
    vuint32_t MFN:15;                  /* Numerator of fractional loop division factor */
    vuint32_t _unused_15:1;
    vuint32_t _unused_16:1;
    vuint32_t _unused_17:1;
    vuint32_t _unused_18:4;
    vuint32_t _unused_22:6;
    vuint32_t _unused_28:1;
    vuint32_t _unused_29:1;
    vuint32_t SDMEN:1;                 /* Sigma-delta modulation enable */
    vuint32_t _unused_31:1;
  } B;
} PERIPH_PLL_PLLFD_tag;

typedef union PERIPH_PLL_PLLCLKMUX_union_tag { /* PLL Clock Multiplexer */
  vuint32_t R;
  struct {
    vuint32_t REFCLKSEL:1;             /* Reference clock select */
    vuint32_t _unused_1:31;
  } B;
} PERIPH_PLL_PLLCLKMUX_tag;

typedef union PERIPH_PLL_PLLODIV_union_tag { /* PLL Output Divider */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved (for internal use only) */
    vuint32_t _unused_2:14;
    vuint32_t DIV:8;                   /* Division value */
    vuint32_t _unused_24:7;
    vuint32_t DE:1;                    /* Divider enable */
  } B;
} PERIPH_PLL_PLLODIV_tag;

struct PERIPH_PLL_tag {
  PERIPH_PLL_PLLCR_tag PLLCR;          /* PLL Control Register */
  PERIPH_PLL_PLLSR_tag PLLSR;          /* PLL status register */
  PERIPH_PLL_PLLDV_tag PLLDV;          /* PLL Divider */
  uint8_t PERIPH_PLL_reserved0[4];
  PERIPH_PLL_PLLFD_tag PLLFD;          /* PLL Fractional Divider */
  uint8_t PERIPH_PLL_reserved1[12];
  PERIPH_PLL_PLLCLKMUX_tag PLLCLKMUX;  /* PLL Clock Multiplexer */
  uint8_t PERIPH_PLL_reserved2[92];
  PERIPH_PLL_PLLODIV_tag PLLODIV[8];   /* PLL Output Divider */
};


/* ============================================================================
   =============================== Module: PIT ================================
   ============================================================================ */

typedef union PIT_MCR_union_tag {      /* PIT Module Control Register */
  vuint32_t R;
  struct {
    vuint32_t FRZ:1;                   /* Freeze */
    vuint32_t MDIS:1;                  /* Module Disable for PIT */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:29;            /* Reserved */
  } B;
} PIT_MCR_tag;

typedef union PIT_LTMR64H_union_tag {  /* PIT Upper Lifetime Timer Register */
  vuint32_t R;
  struct {
    vuint32_t LTH:32;                  /* Life Timer value */
  } B;
} PIT_LTMR64H_tag;

typedef union PIT_LTMR64L_union_tag {  /* PIT Lower Lifetime Timer Register */
  vuint32_t R;
  struct {
    vuint32_t LTL:32;                  /* Life Timer value */
  } B;
} PIT_LTMR64L_tag;

typedef union PIT_TIMER_LDVAL_union_tag { /* Timer Load Value Register */
  vuint32_t R;
  struct {
    vuint32_t TSV:32;                  /* Timer Start Value */
  } B;
} PIT_TIMER_LDVAL_tag;

typedef union PIT_TIMER_CVAL_union_tag { /* Current Timer Value Register */
  vuint32_t R;
  struct {
    vuint32_t TVL:32;                  /* Current Timer Value */
  } B;
} PIT_TIMER_CVAL_tag;

typedef union PIT_TIMER_TCTRL_union_tag { /* Timer Control Register */
  vuint32_t R;
  struct {
    vuint32_t TEN:1;                   /* Timer Enable */
    vuint32_t TIE:1;                   /* Timer Interrupt Enable */
    vuint32_t CHN:1;                   /* Chain Mode */
    vuint32_t _unused_3:29;            /* Reserved */
  } B;
} PIT_TIMER_TCTRL_tag;

typedef union PIT_TIMER_TFLG_union_tag { /* Timer Flag Register */
  vuint32_t R;
  struct {
    vuint32_t TIF:1;                   /* Timer Interrupt Flag */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} PIT_TIMER_TFLG_tag;

typedef struct PIT_TIMER_struct_tag {
  PIT_TIMER_LDVAL_tag LDVAL;           /* Timer Load Value Register */
  PIT_TIMER_CVAL_tag CVAL;             /* Current Timer Value Register */
  PIT_TIMER_TCTRL_tag TCTRL;           /* Timer Control Register */
  PIT_TIMER_TFLG_tag TFLG;             /* Timer Flag Register */
} PIT_TIMER_tag;

struct PIT_tag {
  PIT_MCR_tag MCR;                     /* PIT Module Control Register */
  uint8_t PIT_reserved0[220];
  PIT_LTMR64H_tag LTMR64H;             /* PIT Upper Lifetime Timer Register */
  PIT_LTMR64L_tag LTMR64L;             /* PIT Lower Lifetime Timer Register */
  uint8_t PIT_reserved1[24];
  PIT_TIMER_tag TIMER[7];
};


/* ============================================================================
   =============================== Module: PMC ================================
   ============================================================================ */

typedef union PMC_SSR_union_tag {      /* Source of System Reset */
  vuint32_t R;
  struct {
    vuint32_t POR_SUP:1;               /* POR on supply net event flag */
    vuint32_t CSPD_EVENT:1;            /* Critical supply presence detector event flag */
    vuint32_t POR_WDOG_EVENT:1;        /* POR watchdog event flag */
    vuint32_t _unused_3:29;            /* Reserved */
  } B;
} PMC_SSR_tag;

typedef union PMC_NCSPD_CTL_union_tag { /* Non-Critical Supply Presence Detector Control */
  vuint32_t R;
  struct {
    vuint32_t NCSPD_CTL0:1;            /* Non-critical supply presence detector control 0 */
    vuint32_t NCSPD_CTL1:1;            /* Non-critical supply presence detector control 1 */
    vuint32_t NCSPD_CTL2:1;            /* Non-critical supply presence detector control 2 */
    vuint32_t NCSPD_CTL3:1;            /* Non-critical supply presence detector control 3 */
    vuint32_t NCSPD_CTL4:1;            /* Non-critical supply presence detector control 4 */
    vuint32_t NCSPD_CTL5:1;            /* Non-critical supply presence detector control 5 */
    vuint32_t NCSPD_CTL6:1;            /* Non-critical supply presence detector control 6 */
    vuint32_t NCSPD_CTL7:1;            /* Non-critical supply presence detector control 7 */
    vuint32_t NCSPD_CTL8:1;            /* Non-critical supply presence detector control 8 */
    vuint32_t NCSPD_CTL9:1;            /* Non-critical supply presence detector control 9 */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} PMC_NCSPD_CTL_tag;

typedef union PMC_NCSPD_STAT_union_tag { /* Non-Critical Supply Presence Detector Status Flag */
  vuint32_t R;
  struct {
    vuint32_t NCSPD_STAT0:1;           /* Non-critical supply presence detector control 0 */
    vuint32_t NCSPD_STAT1:1;           /* Non-critical supply presence detector control 1 */
    vuint32_t NCSPD_STAT2:1;           /* Non-critical supply presence detector control 2 */
    vuint32_t NCSPD_STAT3:1;           /* Non-critical supply presence detector control 3 */
    vuint32_t NCSPD_STAT4:1;           /* Non-critical supply presence detector control 4 */
    vuint32_t NCSPD_STAT5:1;           /* Non-critical supply presence detector control 5 */
    vuint32_t NCSPD_STAT6:1;           /* Non-critical supply presence detector control 6 */
    vuint32_t NCSPD_STAT7:1;           /* Non-critical supply presence detector control 7 */
    vuint32_t NCSPD_STAT8:1;           /* Non-critical supply presence detector control 8 */
    vuint32_t NCSPD_STAT9:1;           /* Non-critical supply presence detector control 9 */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} PMC_NCSPD_STAT_tag;

typedef union PMC_CSPD_EVENT_CAPTURE_union_tag { /* Critical Supply Presence Detector Event Flag (CSPDEF) */
  vuint32_t R;
  struct {
    vuint32_t HVCPOREF:1;              /* coarse por_b 1.8 V event flag */
    vuint32_t CSPD_EVENT_CAPTURE0:1;   /* Critical supply presence detector input event flag 0 */
    vuint32_t CSPD_EVENT_CAPTURE1:1;   /* Critical supply presence detector input event flag 1 */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} PMC_CSPD_EVENT_CAPTURE_tag;

typedef union PMC_NCSPD_EVENT_CAPTURE_union_tag { /* Non-Critical Supply Presence Detector Event Flag (NCSPDEF) */
  vuint32_t R;
  struct {
    vuint32_t NCSPD_EVENT_CAPTURE0:1;  /* Non-critical supply presence detector event flag 0 */
    vuint32_t NCSPD_EVENT_CAPTURE1:1;  /* Non-critical supply presence detector event flag 1 */
    vuint32_t NCSPD_EVENT_CAPTURE2:1;  /* Non-critical supply presence detector event flag 2 */
    vuint32_t NCSPD_EVENT_CAPTURE3:1;  /* Non-critical supply presence detector event flag 3 */
    vuint32_t NCSPD_EVENT_CAPTURE4:1;  /* Non-critical supply presence detector event flag 4 */
    vuint32_t NCSPD_EVENT_CAPTURE5:1;  /* Non-critical supply presence detector event flag 5 */
    vuint32_t NCSPD_EVENT_CAPTURE6:1;  /* Non-critical supply presence detector event flag 6 */
    vuint32_t NCSPD_EVENT_CAPTURE7:1;  /* Non-critical supply presence detector event flag 7 */
    vuint32_t NCSPD_EVENT_CAPTURE8:1;  /* Non-critical supply presence detector event flag 8 */
    vuint32_t NCSPD_EVENT_CAPTURE9:1;  /* Non-critical supply presence detector event flag 9 */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} PMC_NCSPD_EVENT_CAPTURE_tag;

typedef union PMC_POR_WDOG_EVENT_CAPTURE_union_tag { /* Device Status Flag (DSF0) */
  vuint32_t R;
  struct {
    vuint32_t DSFBIT0:32;
  } B;
} PMC_POR_WDOG_EVENT_CAPTURE_tag;

struct PMC_tag {
  PMC_SSR_tag SSR;                     /* Source of System Reset */
  PMC_NCSPD_CTL_tag NCSPD_CTL;         /* Non-Critical Supply Presence Detector Control */
  uint8_t PMC_reserved0[4];
  PMC_NCSPD_STAT_tag NCSPD_STAT;       /* Non-Critical Supply Presence Detector Status Flag */
  PMC_CSPD_EVENT_CAPTURE_tag CSPD_EVENT_CAPTURE; /* Critical Supply Presence Detector Event Flag (CSPDEF) */
  PMC_NCSPD_EVENT_CAPTURE_tag NCSPD_EVENT_CAPTURE; /* Non-Critical Supply Presence Detector Event Flag (NCSPDEF) */
  uint8_t PMC_reserved1[4];
  PMC_POR_WDOG_EVENT_CAPTURE_tag POR_WDOG_EVENT_CAPTURE[3]; /* Device Status Flag (DSF0) */
};


/* ============================================================================
   =============================== Module: PMUEVENTOBSERVER ===================
   ============================================================================ */

typedef union PMUEVENTOBSERVER_CTL_union_tag { /* PMUEVENT Observer Control Register */
  vuint32_t R;
  struct {
    vuint32_t REVTINPSEL:2;            /* Rise event input select to counter */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t CTRSTRTSEL:2;            /* Input to select the counter start trigger */
    vuint32_t CTRSTPSEL:2;             /* Input to select the counter stop trigger */
    vuint32_t CPYCOUNT:1;              /* This bit is used to copy the counter value to the status register for software to read. */
    vuint32_t CLRCNTR:1;               /* This bit is used to clear the counter value. */
    vuint32_t _unused_10:13;           /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} PMUEVENTOBSERVER_CTL_tag;

typedef union PMUEVENTOBSERVER_STAT_union_tag { /* PMUEVENT Observer Status Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT_VAL:32;            /* Number of events counted by the counter corresponding to PMUEVENT[a] */
  } B;
} PMUEVENTOBSERVER_STAT_tag;

struct PMUEVENTOBSERVER_tag {
  PMUEVENTOBSERVER_CTL_tag CTL[30];    /* PMUEVENT Observer Control Register */
  uint8_t PMUEVENTOBSERVER_reserved0[8];
  PMUEVENTOBSERVER_STAT_tag STAT[30];  /* PMUEVENT Observer Status Register */
};


/* ============================================================================
   =============================== Module: Perf_Registers =====================
   ============================================================================ */

typedef union Perf_Registers_COUNTER_0_CTRL_REG_ADDR_union_tag { /* Counter control 0 */
  vuint32_t R;
  struct {
    vuint32_t CNTR_OFL:1;              /* Counter overflow */
    vuint32_t CNTR_CLR:1;              /* Counter clear */
    vuint32_t CNTR_EN:1;               /* Counter enable */
    vuint32_t _unused_3:13;
    vuint32_t _unused_16:8;
    vuint32_t _unused_24:8;
  } B;
} Perf_Registers_COUNTER_0_CTRL_REG_ADDR_tag;

typedef union Perf_Registers_COUNTER_1_CTRL_REG_ADDR_union_tag { /* Counter control 1 */
  vuint32_t R;
  struct {
    vuint32_t CNTR_OFL:1;              /* Counter overflow */
    vuint32_t CNTR_CLR:1;              /* Counter clear */
    vuint32_t CNTR_EN:1;               /* Counter Enable */
    vuint32_t _unused_3:13;
    vuint32_t COUNT_PR:8;              /* Count_parameter[7:0] */
    vuint32_t CSV:8;                   /* Count_value_select[7:0] */
  } B;
} Perf_Registers_COUNTER_1_CTRL_REG_ADDR_tag;

typedef union Perf_Registers_COUNTER_2_CTRL_REG_ADDR_union_tag { /* Counter control 2 */
  vuint32_t R;
  struct {
    vuint32_t CNTR_OFL:1;              /* Counter overflow */
    vuint32_t CNTR_CLR:1;              /* Counter clear */
    vuint32_t CNTR_EN:1;               /* Counter Enable */
    vuint32_t _unused_3:13;
    vuint32_t COUNT_PR:8;              /* Count_parameter[7:0] */
    vuint32_t CSV:8;                   /* CSV[7:0] */
  } B;
} Perf_Registers_COUNTER_2_CTRL_REG_ADDR_tag;

typedef union Perf_Registers_COUNTER_3_CTRL_REG_ADDR_union_tag { /* Counter control 3 */
  vuint32_t R;
  struct {
    vuint32_t CNTR_OFL:1;              /* Counter overflow */
    vuint32_t CNTR_CLR:1;              /* Counter clear */
    vuint32_t CNTR_EN:1;               /* Counter Enable */
    vuint32_t _unused_3:13;
    vuint32_t COUNT_PR:8;              /* Count_parameter[7:0] */
    vuint32_t CSV:8;                   /* CSV[7:0] */
  } B;
} Perf_Registers_COUNTER_3_CTRL_REG_ADDR_tag;

typedef union Perf_Registers_COUNTER_DATA_REG_ADDR_union_tag { /* Counter Data */
  vuint32_t R;
  struct {
    vuint32_t COUNT_VL:32;             /* Count Value */
  } B;
} Perf_Registers_COUNTER_DATA_REG_ADDR_tag;

typedef union Perf_Registers_MRR_0_DATA_REG_ADDR_union_tag { /* Mode Register Read 0 Data */
  vuint32_t R;
  struct {
    vuint32_t MRR_DDR_SEL_REG:1;       /* MRR_DDR_SEL_REG */
    vuint32_t MPR_MODE_SEL_REG:1;      /* MPR_MODE_SEL_REG */
    vuint32_t MPR_VALID_CLR_REG:1;     /* MPR_VALID_CLR_REG */
    vuint32_t VALID_OUT:1;             /* Valid out */
    vuint32_t _unused_4:28;            /* Always read zero */
  } B;
} Perf_Registers_MRR_0_DATA_REG_ADDR_tag;

typedef union Perf_Registers_MRR_1_DATA_REG_ADDR_union_tag { /* Mode Register Read 1 Data */
  vuint32_t R;
  struct {
    vuint32_t MRR_VL:32;               /* MRR value */
  } B;
} Perf_Registers_MRR_1_DATA_REG_ADDR_tag;

struct Perf_Registers_tag {
  Perf_Registers_COUNTER_0_CTRL_REG_ADDR_tag COUNTER_0_CTRL_REG_ADDR; /* Counter control 0 */
  Perf_Registers_COUNTER_1_CTRL_REG_ADDR_tag COUNTER_1_CTRL_REG_ADDR; /* Counter control 1 */
  Perf_Registers_COUNTER_2_CTRL_REG_ADDR_tag COUNTER_2_CTRL_REG_ADDR; /* Counter control 2 */
  Perf_Registers_COUNTER_3_CTRL_REG_ADDR_tag COUNTER_3_CTRL_REG_ADDR; /* Counter control 3 */
  uint8_t Perf_Registers_reserved0[16];
  Perf_Registers_COUNTER_DATA_REG_ADDR_tag COUNTER_DATA_REG_ADDR[4]; /* Counter Data */
  uint8_t Perf_Registers_reserved1[16];
  Perf_Registers_MRR_0_DATA_REG_ADDR_tag MRR_0_DATA_REG_ADDR; /* Mode Register Read 0 Data */
  Perf_Registers_MRR_1_DATA_REG_ADDR_tag MRR_1_DATA_REG_ADDR; /* Mode Register Read 1 Data */
};


/* ============================================================================
   =============================== Module: QuadSPI ============================
   ============================================================================ */

typedef union QuadSPI_MCR_union_tag {  /* Module Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t SWRSTSD:1;               /* Software reset for serial flash memory domain */
    vuint32_t SWRSTHD:1;               /* Software reset for AHB domain */
    vuint32_t END_CFG:2;               /* Defines the endianness of the QuadSPI module */
    vuint32_t DQS_OUT_EN:1;            /* DQS as an output */
    vuint32_t DQS_LAT_EN:1;            /* DQS latency enable */
    vuint32_t DQS_EN:1;                /* DQS enable */
    vuint32_t DDR_EN:1;                /* DDR mode enable */
    vuint32_t VAR_LAT_EN:1;            /* Variable latency */
    vuint32_t _unused_9:1;
    vuint32_t CLR_RXF:1;               /* Clear RX FIFO */
    vuint32_t CLR_TXF:1;               /* Clear TX FIFO/buffer */
    vuint32_t DLPEN:1;                 /* Data learning pattern enable */
    vuint32_t _unused_13:1;
    vuint32_t MDIS:1;                  /* Module disable */
    vuint32_t _unused_15:1;
    vuint32_t ISD2FA:1;                /* Idle signal drive IOFA[2] flash memory A */
    vuint32_t ISD3FA:1;                /* Idle signal drive IOFA[3] flash memory A */
    vuint32_t ISD2FB:1;                /* Idle signal drive IOFB[2] flash memory B */
    vuint32_t ISD3FB:1;                /* Idle signal drive IOFB[3] flash memory B */
    vuint32_t _unused_20:3;
    vuint32_t DIAG:1;                  /* Diagnostic to route interrupt */
    vuint32_t DQS_FA_SEL:2;            /* DQS clock for sampling read data at flash memory A */
    vuint32_t CKN_FA_EN:1;             /* CKN pad for flash memory A */
    vuint32_t CK2_DCARS_FA:1;          /* CK2 DDR center-aligned read strobe for flash memory A */
    vuint32_t DQS_FB_SEL:2;            /* DQS clock for sampling read data at flash memory B */
    vuint32_t CKN_FB_EN:1;             /* Enable clock on differential CKN pad of flash memory B */
    vuint32_t CK2_DCARS_FB:1;          /* CK2 DDR center-aligned read strobe for flash memory B */
  } B;
} QuadSPI_MCR_tag;

typedef union QuadSPI_IPCR_union_tag { /* IP Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t IDATSZ:16;               /* IP data transfer size */
    vuint32_t PAR_EN:1;
    vuint32_t _unused_17:7;
    vuint32_t SEQID:4;                 /* Points to a sequence in the LUT */
    vuint32_t _unused_28:4;
  } B;
} QuadSPI_IPCR_tag;

typedef union QuadSPI_FLSHCR_union_tag { /* Flash Memory Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t TCSS:4;                  /* Serial flash memory CS setup time */
    vuint32_t _unused_4:4;
    vuint32_t TCSH:4;                  /* Serial flash memory CS hold time */
    vuint32_t _unused_12:4;
    vuint32_t TDH:2;                   /* Serial flash memory data in hold time */
    vuint32_t _unused_18:14;
  } B;
} QuadSPI_FLSHCR_tag;

typedef union QuadSPI_BUF0CR_union_tag { /* Buffer 0 Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t MSTRID:6;                /* Master ID */
    vuint32_t _unused_6:2;
    vuint32_t ADATSZ:8;                /* AHB data transfer size */
    vuint32_t _unused_16:15;
    vuint32_t _unused_31:1;
  } B;
} QuadSPI_BUF0CR_tag;

typedef union QuadSPI_BUF1CR_union_tag { /* Buffer 1 Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t MSTRID:6;                /* Master ID */
    vuint32_t _unused_6:2;
    vuint32_t ADATSZ:8;                /* AHB data transfer size */
    vuint32_t _unused_16:16;
  } B;
} QuadSPI_BUF1CR_tag;

typedef union QuadSPI_BUF2CR_union_tag { /* Buffer 2 Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t MSTRID:6;                /* Master ID */
    vuint32_t _unused_6:2;
    vuint32_t ADATSZ:8;                /* AHB data transfer size */
    vuint32_t _unused_16:16;
  } B;
} QuadSPI_BUF2CR_tag;

typedef union QuadSPI_BUF3CR_union_tag { /* Buffer 3 Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t MSTRID:6;                /* Master ID */
    vuint32_t _unused_6:2;
    vuint32_t ADATSZ:8;                /* AHB data transfer size */
    vuint32_t _unused_16:15;
    vuint32_t ALLMST:1;                /* All master enable */
  } B;
} QuadSPI_BUF3CR_tag;

typedef union QuadSPI_BFGENCR_union_tag { /* Buffer Generic Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;
    vuint32_t SEQID:4;                 /* Points to a sequence in the LUT */
    vuint32_t PAR_EN:1;                /* Parallel mode enable */
    vuint32_t _unused_17:15;
  } B;
} QuadSPI_BFGENCR_tag;

typedef union QuadSPI_BUF0IND_union_tag { /* Buffer 0 Top Index Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;
    vuint32_t TPINDX0:8;               /* Top index of buffer 0 */
    vuint32_t _unused_11:21;
  } B;
} QuadSPI_BUF0IND_tag;

typedef union QuadSPI_BUF1IND_union_tag { /* Buffer 1 Top Index Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;
    vuint32_t TPINDX1:8;               /* Top index of buffer 1 */
    vuint32_t _unused_11:21;
  } B;
} QuadSPI_BUF1IND_tag;

typedef union QuadSPI_BUF2IND_union_tag { /* Buffer 2 Top Index Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;
    vuint32_t TPINDX2:8;               /* Top index of buffer 2 */
    vuint32_t _unused_11:21;
  } B;
} QuadSPI_BUF2IND_tag;

typedef union QuadSPI_AWRCR_union_tag { /* AHB Write Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t AWTRGLVL:4;              /* AHB write trigger level */
    vuint32_t _unused_4:10;
    vuint32_t PPW_RD_DIS:1;            /* Page program wait read disabled */
    vuint32_t PPW_WR_DIS:1;            /* Page program wait write disabled */
    vuint32_t _unused_16:16;
  } B;
} QuadSPI_AWRCR_tag;

typedef union QuadSPI_DLLCRA_union_tag { /* DLL Flash Memory A Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t SLV_UPD:1;               /* Slave update */
    vuint32_t SLV_DLL_BYPASS:1;        /* Slave DLL bypass */
    vuint32_t SLV_EN:1;                /* Slave enable */
    vuint32_t SLAVE_AUTO_UPDT:1;       /* Slave chain update */
    vuint32_t _unused_4:1;
    vuint32_t SLV_DLY_FINE:3;          /* Fine adjustment delay elements */
    vuint32_t SLV_DLY_COARSE:4;        /* Delay elements in each delay tap */
    vuint32_t SLV_DLY_OFFSET:3;        /* T/16 offset delay elements in incoming DQS */
    vuint32_t _unused_15:1;
    vuint32_t SLV_FINE_OFFSET:4;       /* Fine offset delay elements in incoming DQS */
    vuint32_t DLLRES:4;                /* DLL resolution */
    vuint32_t DLL_REFCNTR:4;           /* DLL reference counter */
    vuint32_t _unused_28:2;
    vuint32_t FREQEN:1;                /* Frequency enable */
    vuint32_t DLLEN:1;                 /* DLL enable */
  } B;
} QuadSPI_DLLCRA_tag;

typedef union QuadSPI_DLLCRB_union_tag { /* DLL Flash Memory B Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t SLV_UPD:1;               /* Slave update */
    vuint32_t SLV_DLL_BYPASS:1;        /* Slave DLL Bypass */
    vuint32_t SLV_EN:1;                /* Slave enable */
    vuint32_t SLAVE_AUTO_UPDT:1;       /* Update slave chain */
    vuint32_t _unused_4:1;
    vuint32_t SLV_DLY_FINE:3;          /* Fine adjustment delay elements in total slave delay chain */
    vuint32_t SLV_DLY_COARSE:4;        /* Number of delay elements in each delay tap */
    vuint32_t SLV_DLY_OFFSET:3;        /* Number of delay elements in each delay tap */
    vuint32_t _unused_15:1;
    vuint32_t SLV_FINE_OFFSET:4;       /* Number of delay elements in each delay tap */
    vuint32_t DLLRES:4;                /* DLL resolution */
    vuint32_t DLL_REFCNTR:4;           /* DLL reference counter */
    vuint32_t _unused_28:2;
    vuint32_t FREQEN:1;                /* Frequency enable */
    vuint32_t DLLEN:1;                 /* DLL enable */
  } B;
} QuadSPI_DLLCRB_tag;

typedef union QuadSPI_PARITYCR_union_tag { /* Parity Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:5;
    vuint32_t CRCBIN_FA:1;             /* Adds CRC bar parity to flash memory A input from QuadSPI controller */
    vuint32_t CRCBEN_FA:1;             /* Adds CRC bar parity from flash memory A output to QuadSPI controller */
    vuint32_t CRCEN_FA:1;              /* CRC parity checker logic */
    vuint32_t BYTE_SIZE_FA:1;          /* Byte size for flash memory A */
    vuint32_t CHUNKSIZE_FA:6;          /* Chunk size for flash memory A */
    vuint32_t CRC_WNDW_FA:1;           /* CRC address window configuration */
    vuint32_t _unused_16:5;
    vuint32_t CRCBIN_FB:1;             /* Adds CRC bar parity to flash memory B */
    vuint32_t CRCBEN_FB:1;             /* Adds CRC bar parity from flash memory B output to QuadSPI controller. */
    vuint32_t CRCEN_FB:1;              /* CRC parity checker logic */
    vuint32_t BYTE_SIZE_FB:1;          /* Byte size for flash memory B */
    vuint32_t CHUNKSIZE_FB:6;          /* Chunk size for flash memory B */
    vuint32_t CRC_WNDW_FB:1;           /* CRC address window configuration */
  } B;
} QuadSPI_PARITYCR_tag;

typedef union QuadSPI_SFAR_union_tag { /* Serial Flash Memory Address Register */
  vuint32_t R;
  struct {
    vuint32_t SFADR:32;                /* Serial flash memory address */
  } B;
} QuadSPI_SFAR_tag;

typedef union QuadSPI_SFACR_union_tag { /* Serial Flash Memory Address Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t CAS:4;                   /* Column address space */
    vuint32_t _unused_4:4;
    vuint32_t PPWB:5;                  /* Page program boundary */
    vuint32_t _unused_13:1;
    vuint32_t _unused_14:2;
    vuint32_t WA:1;                    /* Word addressable */
    vuint32_t BYTE_SWAP:1;             /* Byte swapping */
    vuint32_t _unused_18:14;
  } B;
} QuadSPI_SFACR_tag;

typedef union QuadSPI_SMPR_union_tag { /* Sampling Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;
    vuint32_t _unused_3:2;
    vuint32_t FSPHS:1;                 /* Full-speed phase selection for SDR instructions */
    vuint32_t FSDLY:1;                 /* Full-speed delay selection for internal/pad loop back DQS sampling */
    vuint32_t _unused_7:9;
    vuint32_t _unused_16:3;
    vuint32_t _unused_19:5;            /* Reserved */
    vuint32_t DLLFSMPFA:3;             /* Selects the nth tap provided by Fa slave delay chain */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t DLLFSMPFB:3;             /* Selects the Nth tap provided by Fb slave delay-chain */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} QuadSPI_SMPR_tag;

typedef union QuadSPI_RBSR_union_tag { /* RX Buffer Status Register */
  vuint32_t R;
  struct {
    vuint32_t RDBFL:8;                 /* RX buffer fill level */
    vuint32_t _unused_8:8;
    vuint32_t RDCTR:16;                /* Read counter */
  } B;
} QuadSPI_RBSR_tag;

typedef union QuadSPI_RBCT_union_tag { /* RX Buffer Control Register */
  vuint32_t R;
  struct {
    vuint32_t WMRK:7;                  /* RX buffer watermark */
    vuint32_t _unused_7:1;
    vuint32_t RXBRD:1;                 /* RX buffer readout */
    vuint32_t _unused_9:23;
  } B;
} QuadSPI_RBCT_tag;

typedef union QuadSPI_AWRSR_union_tag { /* AHB Write Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;
    vuint32_t _unused_1:1;
    vuint32_t SEQAUJOIN:1;             /* Sequence auto join */
    vuint32_t _unused_3:29;
  } B;
} QuadSPI_AWRSR_tag;

typedef union QuadSPI_DLLSR_union_tag { /* DLL Status Register */
  vuint32_t R;
  struct {
    vuint32_t DLLA_SLV_COARSE_VAL:4;   /* Coarse delay cells in slave delay chain */
    vuint32_t DLLA_SLV_FINE_VAL:4;     /* Fine delay cells in slave delay chain */
    vuint32_t _unused_8:4;
    vuint32_t DLLA_FINE_UNDERFLOW:1;   /* Fine delay chain underflow */
    vuint32_t DLLA_RANGE_ERR:1;        /* DLL master delay chain */
    vuint32_t SLVA_LOCK:1;             /* Slave high lock status */
    vuint32_t DLLA_LOCK:1;             /* DLL A lock status */
    vuint32_t DLLB_SLV_COARSE_VAL:4;   /* Coarse delay cells */
    vuint32_t DLLB_SLV_FINE_VAL:4;     /* Fine delay cells in slave delay chain */
    vuint32_t _unused_24:4;
    vuint32_t DLLB_FINE_UNDERFLOW:1;   /* Fine delay chain underflow */
    vuint32_t DLLB_RANGE_ERR:1;        /* DLL master delay chain */
    vuint32_t SLVB_LOCK:1;             /* High frequency slave delay chain locked */
    vuint32_t DLLB_LOCK:1;
  } B;
} QuadSPI_DLLSR_tag;

typedef union QuadSPI_DLCR_union_tag { /* Data Learning Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;
    vuint32_t _unused_8:6;
    vuint32_t DLP_SEL_FA:2;            /* Selects pattern matching IO pads */
    vuint32_t _unused_16:8;
    vuint32_t DL_NONDLP_FLSH:1;        /* Data learning enabled for non-DLP flash memory */
    vuint32_t _unused_25:1;
    vuint32_t _unused_26:4;
    vuint32_t DLP_SEL_FB:2;            /* Selects a pattern matching IO pads */
  } B;
} QuadSPI_DLCR_tag;

typedef union QuadSPI_DLSR_FA_union_tag { /* Data Learning Status Flash Memory A Register */
  vuint32_t R;
  struct {
    vuint32_t NEG_EDGE:8;
    vuint32_t POS_EDGE:8;
    vuint32_t _unused_16:15;
    vuint32_t DLPFFA:1;                /* Data learning pattern fail */
  } B;
} QuadSPI_DLSR_FA_tag;

typedef union QuadSPI_DLSR_FB_union_tag { /* Data Learning Status Flash Memory B Register */
  vuint32_t R;
  struct {
    vuint32_t NEG_EDGE:8;
    vuint32_t POS_EDGE:8;
    vuint32_t _unused_16:15;
    vuint32_t DLPFFB:1;                /* Data learning pattern fail */
  } B;
} QuadSPI_DLSR_FB_tag;

typedef union QuadSPI_TBSR_union_tag { /* TX Buffer Status Register */
  vuint32_t R;
  struct {
    vuint32_t TRBFL:8;                 /* TX buffer fill level */
    vuint32_t _unused_8:8;
    vuint32_t TRCTR:16;                /* Transmit counter */
  } B;
} QuadSPI_TBSR_tag;

typedef union QuadSPI_TBDR_union_tag { /* TX Buffer Data Register */
  vuint32_t R;
  struct {
    vuint32_t TXDATA:32;               /* TX data */
  } B;
} QuadSPI_TBDR_tag;

typedef union QuadSPI_TBCT_union_tag { /* TX Buffer Control Register */
  vuint32_t R;
  struct {
    vuint32_t WMRK:8;                  /* Watermark for TX buffer */
    vuint32_t _unused_8:24;
  } B;
} QuadSPI_TBCT_tag;

typedef union QuadSPI_SR_union_tag {   /* Status Register */
  vuint32_t R;
  struct {
    vuint32_t BUSY:1;                  /* Module busy */
    vuint32_t IP_ACC:1;                /* IP access */
    vuint32_t AHB_ACC:1;               /* AHB read access */
    vuint32_t _unused_3:1;
    vuint32_t AWRACC:1;                /* AHB write access */
    vuint32_t _unused_5:1;
    vuint32_t AHBTRN:1;                /* AHB access transaction pending */
    vuint32_t AHB0NE:1;                /* AHB 0 buffer not empty */
    vuint32_t AHB1NE:1;                /* AHB 1 buffer not empty */
    vuint32_t AHB2NE:1;                /* AHB 2 buffer not empty */
    vuint32_t AHB3NE:1;                /* AHB 3 buffer not empty */
    vuint32_t AHB0FUL:1;               /* AHB 0 buffer full */
    vuint32_t AHB1FUL:1;               /* AHB 1 buffer full */
    vuint32_t AHB2FUL:1;               /* AHB 2 buffer full */
    vuint32_t AHB3FUL:1;               /* AHB 3 buffer full */
    vuint32_t _unused_15:1;
    vuint32_t RXWE:1;                  /* RX buffer watermark exceeded */
    vuint32_t _unused_17:2;
    vuint32_t RXFULL:1;                /* RX buffer full */
    vuint32_t _unused_20:3;
    vuint32_t RXDMA:1;                 /* RX buffer DMA */
    vuint32_t TXNE:1;                  /* TX buffer not empty */
    vuint32_t TXWA:1;                  /* TX buffer watermark available */
    vuint32_t TXDMA:1;                 /* TX DMA */
    vuint32_t TXFULL:1;                /* TX buffer full */
    vuint32_t _unused_28:1;
    vuint32_t _unused_29:3;
  } B;
} QuadSPI_SR_tag;

typedef union QuadSPI_FR_union_tag {   /* Flag Register */
  vuint32_t R;
  struct {
    vuint32_t TFF:1;                   /* IP command transaction finished flag */
    vuint32_t _unused_1:3;
    vuint32_t _unused_4:1;
    vuint32_t _unused_5:1;
    vuint32_t IPIEF:1;                 /* IP command trigger could not be executed error flag */
    vuint32_t IPAEF:1;                 /* IP command trigger during AHB access error flag */
    vuint32_t PPWF:1;                  /* Page-program wait flag after flash memory write flag */
    vuint32_t CRCBEF:1;                /* Sets when there is CRC or ECC error for flash memory B */
    vuint32_t CRCAEF:1;                /* Sets when there is CRC or ECC error for flash memory A */
    vuint32_t IUEF:1;                  /* IP command usage error flag */
    vuint32_t ABOF:1;                  /* AHB buffer overflow flag */
    vuint32_t _unused_13:1;
    vuint32_t AITEF:1;                 /* AHB illegal transaction error flag */
    vuint32_t AAEF:1;                  /* AHB abort error flag */
    vuint32_t RBDF:1;                  /* RX buffer drain flag */
    vuint32_t RBOF:1;                  /* RX buffer overflow flag */
    vuint32_t _unused_18:2;
    vuint32_t _unused_20:1;
    vuint32_t _unused_21:2;
    vuint32_t ILLINE:1;                /* Illegal instruction error flag */
    vuint32_t DLLUNLCK:1;              /* DLL unlock */
    vuint32_t _unused_25:1;
    vuint32_t TBUF:1;                  /* TX buffer underrun flag */
    vuint32_t TBFF:1;                  /* TX buffer fill flag */
    vuint32_t DLLABRT:1;               /* DLL abort */
    vuint32_t _unused_29:2;
    vuint32_t DLPFF:1;                 /* Data learning pattern failure flag */
  } B;
} QuadSPI_FR_tag;

typedef union QuadSPI_RSER_union_tag { /* Interrupt and DMA Request Select and Enable Register */
  vuint32_t R;
  struct {
    vuint32_t TFIE:1;                  /* Transaction finished interrupt enable flag */
    vuint32_t _unused_1:3;
    vuint32_t _unused_4:1;
    vuint32_t _unused_5:1;
    vuint32_t IPIEIE:1;                /* IP command trigger during IP access error interrupt enable flag */
    vuint32_t IPAEIE:1;                /* IP command trigger during AHB read access error interrupt enable flag */
    vuint32_t PPWIE:1;                 /* Page-program wait interrupt flag */
    vuint32_t CRCBIE:1;                /* Sets when there is CRC or ECC error for flash memory B */
    vuint32_t CRCAIE:1;                /* CRC and ECS interrupt enable for flash memory A */
    vuint32_t IUEIE:1;                 /* IP command usage error interrupt enable flag */
    vuint32_t ABOIE:1;                 /* AHB buffer overflow interrupt enable flag */
    vuint32_t AIBSIE:1;                /* AHB illegal burst size interrupt enable flag */
    vuint32_t AITIE:1;                 /* AHB illegal transaction interrupt enable flag */
    vuint32_t AAIE:1;                  /* AHB abort error interrupt enable */
    vuint32_t RBDIE:1;                 /* RX buffer drain interrupt enable */
    vuint32_t RBOIE:1;                 /* RX buffer overflow interrupt enable */
    vuint32_t _unused_18:2;
    vuint32_t _unused_20:1;
    vuint32_t RBDDE:1;                 /* RX buffer drain DMA enable */
    vuint32_t _unused_22:1;
    vuint32_t ILLINIE:1;               /* Illegal instruction error interrupt enable */
    vuint32_t DLLULIE:1;               /* DLL unlock interrupt enable */
    vuint32_t TBFDE:1;                 /* TX buffer fill DMA enable */
    vuint32_t TBUIE:1;                 /* TX buffer underrun interrupt enable flag */
    vuint32_t TBFIE:1;                 /* TX buffer fill interrupt enable flag */
    vuint32_t _unused_28:1;
    vuint32_t _unused_29:2;
    vuint32_t DLPFIE:1;                /* Data learning pattern failure interrupt enable */
  } B;
} QuadSPI_RSER_tag;

typedef union QuadSPI_SPTRCLR_union_tag { /* Sequence Pointer Clear Register */
  vuint32_t R;
  struct {
    vuint32_t BFPTRC:1;                /* Buffer pointer clear */
    vuint32_t _unused_1:7;
    vuint32_t IPPTRC:1;                /* IP pointer clear */
    vuint32_t _unused_9:7;
    vuint32_t ABRT_CLR:1;              /* Flash memory Abort/AHB buffer clear */
    vuint32_t PREFETCH_DIS:1;          /* Prefetch disable */
    vuint32_t _unused_18:14;
  } B;
} QuadSPI_SPTRCLR_tag;

typedef union QuadSPI_SFA1AD_union_tag { /* Serial Flash Memory A1 Top Address Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:10;
    vuint32_t TPADA1:22;               /* Top address for serial flash memory A1 */
  } B;
} QuadSPI_SFA1AD_tag;

typedef union QuadSPI_SFA2AD_union_tag { /* Serial Flash Memory A2 Top Address Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:10;
    vuint32_t TPADA2:22;               /* Top address for serial flash memory A2 */
  } B;
} QuadSPI_SFA2AD_tag;

typedef union QuadSPI_SFB1AD_union_tag { /* Serial Flash Memory B1 Top Address Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:10;
    vuint32_t TPADB1:22;               /* Top address for serial flash memory B1. */
  } B;
} QuadSPI_SFB1AD_tag;

typedef union QuadSPI_SFB2AD_union_tag { /* Serial Flash Memory B2 Top Address Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:10;
    vuint32_t TPADB2:22;               /* Top address for serial flash memory B2. */
  } B;
} QuadSPI_SFB2AD_tag;

typedef union QuadSPI_DLPR_union_tag { /* Data Learn Pattern Register */
  vuint32_t R;
  struct {
    vuint32_t DLPV:32;                 /* Data learning pattern value */
  } B;
} QuadSPI_DLPR_tag;

typedef union QuadSPI_RBDR_union_tag { /* RX Buffer Data Register */
  vuint32_t R;
  struct {
    vuint32_t RXDATA:32;               /* RX data */
  } B;
} QuadSPI_RBDR_tag;

typedef union QuadSPI_LUTKEY_union_tag { /* LUT Key Register */
  vuint32_t R;
  struct {
    vuint32_t KEY:32;                  /* Key to lock or unlock the LUT */
  } B;
} QuadSPI_LUTKEY_tag;

typedef union QuadSPI_LCKCR_union_tag { /* LUT Lock Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t LOCK:1;                  /* Lock LUT */
    vuint32_t UNLOCK:1;                /* Unlock LUT */
    vuint32_t _unused_2:30;
  } B;
} QuadSPI_LCKCR_tag;

typedef union QuadSPI_LUT_union_tag {  /* LUT Register */
  vuint32_t R;
  struct {
    vuint32_t OPRND0:8;                /* Operand for INSTR0 */
    vuint32_t PAD0:2;                  /* Pad information for INSTR0 */
    vuint32_t INSTR0:6;                /* Instruction 0 */
    vuint32_t OPRND1:8;                /* Operand for INSTR1 */
    vuint32_t PAD1:2;                  /* Pad information for INSTR1 */
    vuint32_t INSTR1:6;                /* Instruction 1 */
  } B;
} QuadSPI_LUT_tag;

struct QuadSPI_tag {
  QuadSPI_MCR_tag MCR;                 /* Module Configuration Register */
  uint8_t QuadSPI_reserved0[4];
  QuadSPI_IPCR_tag IPCR;               /* IP Configuration Register */
  QuadSPI_FLSHCR_tag FLSHCR;           /* Flash Memory Configuration Register */
  QuadSPI_BUF0CR_tag BUF0CR;           /* Buffer 0 Configuration Register */
  QuadSPI_BUF1CR_tag BUF1CR;           /* Buffer 1 Configuration Register */
  QuadSPI_BUF2CR_tag BUF2CR;           /* Buffer 2 Configuration Register */
  QuadSPI_BUF3CR_tag BUF3CR;           /* Buffer 3 Configuration Register */
  QuadSPI_BFGENCR_tag BFGENCR;         /* Buffer Generic Configuration Register */
  uint8_t QuadSPI_reserved1[12];
  QuadSPI_BUF0IND_tag BUF0IND;         /* Buffer 0 Top Index Register */
  QuadSPI_BUF1IND_tag BUF1IND;         /* Buffer 1 Top Index Register */
  QuadSPI_BUF2IND_tag BUF2IND;         /* Buffer 2 Top Index Register */
  uint8_t QuadSPI_reserved2[20];
  QuadSPI_AWRCR_tag AWRCR;             /* AHB Write Configuration Register */
  uint8_t QuadSPI_reserved3[12];
  QuadSPI_DLLCRA_tag DLLCRA;           /* DLL Flash Memory A Configuration Register */
  QuadSPI_DLLCRB_tag DLLCRB;           /* DLL Flash Memory B Configuration Register */
  uint8_t QuadSPI_reserved4[4];
  QuadSPI_PARITYCR_tag PARITYCR;       /* Parity Configuration Register */
  uint8_t QuadSPI_reserved5[144];
  QuadSPI_SFAR_tag SFAR;               /* Serial Flash Memory Address Register */
  QuadSPI_SFACR_tag SFACR;             /* Serial Flash Memory Address Configuration Register */
  QuadSPI_SMPR_tag SMPR;               /* Sampling Register */
  QuadSPI_RBSR_tag RBSR;               /* RX Buffer Status Register */
  QuadSPI_RBCT_tag RBCT;               /* RX Buffer Control Register */
  uint8_t QuadSPI_reserved6[12];
  QuadSPI_AWRSR_tag AWRSR;             /* AHB Write Status Register */
  uint8_t QuadSPI_reserved7[8];
  QuadSPI_DLLSR_tag DLLSR;             /* DLL Status Register */
  QuadSPI_DLCR_tag DLCR;               /* Data Learning Configuration Register */
  QuadSPI_DLSR_FA_tag DLSR_FA;         /* Data Learning Status Flash Memory A Register */
  QuadSPI_DLSR_FB_tag DLSR_FB;         /* Data Learning Status Flash Memory B Register */
  uint8_t QuadSPI_reserved8[20];
  QuadSPI_TBSR_tag TBSR;               /* TX Buffer Status Register */
  QuadSPI_TBDR_tag TBDR;               /* TX Buffer Data Register */
  QuadSPI_TBCT_tag TBCT;               /* TX Buffer Control Register */
  QuadSPI_SR_tag SR;                   /* Status Register */
  QuadSPI_FR_tag FR;                   /* Flag Register */
  QuadSPI_RSER_tag RSER;               /* Interrupt and DMA Request Select and Enable Register */
  uint8_t QuadSPI_reserved9[4];
  QuadSPI_SPTRCLR_tag SPTRCLR;         /* Sequence Pointer Clear Register */
  uint8_t QuadSPI_reserved10[16];
  QuadSPI_SFA1AD_tag SFA1AD;           /* Serial Flash Memory A1 Top Address Register */
  QuadSPI_SFA2AD_tag SFA2AD;           /* Serial Flash Memory A2 Top Address Register */
  QuadSPI_SFB1AD_tag SFB1AD;           /* Serial Flash Memory B1 Top Address Register */
  QuadSPI_SFB2AD_tag SFB2AD;           /* Serial Flash Memory B2 Top Address Register */
  QuadSPI_DLPR_tag DLPR;               /* Data Learn Pattern Register */
  uint8_t QuadSPI_reserved11[108];
  QuadSPI_RBDR_tag RBDR[64];           /* RX Buffer Data Register */
  QuadSPI_LUTKEY_tag LUTKEY;           /* LUT Key Register */
  QuadSPI_LCKCR_tag LCKCR;             /* LUT Lock Configuration Register */
  uint8_t QuadSPI_reserved12[8];
  QuadSPI_LUT_tag LUT[80];             /* LUT Register */
};


/* ============================================================================
   =============================== Module: QuadSPI_ARDB =======================
   ============================================================================ */

typedef union QuadSPI_ARDB_ARDB_union_tag { /* AHB RX Data Buffer Register */
  vuint32_t R;
  struct {
    vuint32_t ARXD:32;                 /* ARDB provided RX buffer data */
  } B;
} QuadSPI_ARDB_ARDB_tag;

struct QuadSPI_ARDB_tag {
  QuadSPI_ARDB_ARDB_tag ARDB[128];     /* AHB RX Data Buffer Register */
};


/* ============================================================================
   =============================== Module: REGISTER_PROTECTION ================
   ============================================================================ */

typedef union REGISTER_PROTECTION_SLBRN_union_tag { /* Soft Lock Bit Register */
  vuint8_t R;
  struct {
    vuint8_t SLB3:1;                   /* Soft lock fields for one MRn register */
    vuint8_t SLB2:1;                   /* Soft lock fields for one MRn register */
    vuint8_t SLB1:1;                   /* Soft lock bits for one MRn register */
    vuint8_t SLB0:1;                   /* Soft lock fields for one MRn register */
    vuint8_t WE3:1;                    /* Write enable bits for SLB */
    vuint8_t WE2:1;                    /* Write enable fields for SLB */
    vuint8_t WE1:1;                    /* Write enable fields for SLB */
    vuint8_t WE0:1;                    /* Write enable fields for SLB */
  } B;
} REGISTER_PROTECTION_SLBRN_tag;

typedef union REGISTER_PROTECTION_GCR_union_tag { /* Global Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:23;            /* Reserved */
    vuint32_t UAA:1;                   /* User Access Allowed */
    vuint32_t _unused_24:7;            /* Reserved */
    vuint32_t HLB:1;                   /* Hard Lock Bit */
  } B;
} REGISTER_PROTECTION_GCR_tag;

struct REGISTER_PROTECTION_tag {
  REGISTER_PROTECTION_SLBRN_tag SLBRN; /* Soft Lock Bit Register */
  uint8_t REGISTER_PROTECTION_reserved0[2303];
  REGISTER_PROTECTION_GCR_tag GCR;     /* Global Configuration Register */
};


/* ============================================================================
   =============================== Module: RESET ==============================
   ============================================================================ */

typedef union RESET_RD1_CTRL_REG_union_tag { /* Software Reset Domain 1 control register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;             /* Reserved */
    vuint32_t RD1_INTERCONNECT_INTERFACE_DISABLE:1; /* Interconnect interface Disable of Software Reset Domain 1 */
    vuint32_t _unused_4:27;            /* Reserved */
    vuint32_t RD1_CTRL_UNLOCK:1;       /* Reset Domain 1 control register unlock */
  } B;
} RESET_RD1_CTRL_REG_tag;

typedef union RESET_RD2_CTRL_REG_union_tag { /* Software Reset Domain 2 control register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;             /* Reserved */
    vuint32_t RD2_INTERCONNECT_INTERFACE_DISABLE:1; /* Interconnect interface Disable of Software Reset Domain 2 */
    vuint32_t _unused_4:27;            /* Reserved */
    vuint32_t RD2_CTRL_UNLOCK:1;       /* Reset Domain 2 control register unlock */
  } B;
} RESET_RD2_CTRL_REG_tag;

typedef union RESET_RD3_CTRL_REG_union_tag { /* Software Reset Domain 3 control register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;             /* Reserved */
    vuint32_t RD3_INTERCONNECT_INTERFACE_DISABLE:1; /* Interconnect interface Disable of Software Reset Domain 3 */
    vuint32_t _unused_4:27;            /* Reserved */
    vuint32_t RD3_CTRL_UNLOCK:1;       /* Reset Domain 3 control register unlock */
  } B;
} RESET_RD3_CTRL_REG_tag;

typedef union RESET_RD1_STAT_REG_union_tag { /* Software Reset Domain 1 status register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;             /* Reserved */
    vuint32_t RD1_INTERCONNECT_INTERFACE_DISABLE_REQ_ACK_STAT:1; /* Interconnect interface disable request acknowledgement status of Software Reset Domain 1 */
    vuint32_t RD1_INTERCONNECT_INTERFACE_DISABLE_STAT:1; /* Interconnect interface disable acknowledgement status of Software Reset Domain 1 */
    vuint32_t _unused_5:27;            /* Reserved */
  } B;
} RESET_RD1_STAT_REG_tag;

typedef union RESET_RD2_STAT_REG_union_tag { /* Software Reset Domain 2 status register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;             /* Reserved */
    vuint32_t RD2_INTERCONNECT_INTERFACE_DISABLE_REQ_ACK_STAT:1; /* Interconnect interface disable request acknowledgement status of Software Reset Domain 2 */
    vuint32_t RD2_INTERCONNECT_INTERFACE_DISABLE_STAT:1; /* Interconnect interface disable acknowledgement status of Software Reset Domain 2 */
    vuint32_t _unused_5:27;            /* Reserved */
  } B;
} RESET_RD2_STAT_REG_tag;

typedef union RESET_RD3_STAT_REG_union_tag { /* Software Reset Domain 3 status register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;             /* Reserved */
    vuint32_t RD3_INTERCONNECT_INTERFACE_DISABLE_REQ_ACK_STAT:1; /* Interconnect interface disable request acknowledgement status of Software Reset Domain 3 */
    vuint32_t RD3_INTERCONNECT_INTERFACE_DISABLE_STAT:1; /* Interconnect interface disable acknowledgement status of Software Reset Domain 3 */
    vuint32_t _unused_5:27;            /* Reserved */
  } B;
} RESET_RD3_STAT_REG_tag;

struct RESET_tag {
  uint8_t RESET_reserved0[4];
  RESET_RD1_CTRL_REG_tag RD1_CTRL_REG; /* Software Reset Domain 1 control register */
  RESET_RD2_CTRL_REG_tag RD2_CTRL_REG; /* Software Reset Domain 2 control register */
  RESET_RD3_CTRL_REG_tag RD3_CTRL_REG; /* Software Reset Domain 3 control register */
  uint8_t RESET_reserved1[116];
  RESET_RD1_STAT_REG_tag RD1_STAT_REG; /* Software Reset Domain 1 status register */
  RESET_RD2_STAT_REG_tag RD2_STAT_REG; /* Software Reset Domain 2 status register */
  RESET_RD3_STAT_REG_tag RD3_STAT_REG; /* Software Reset Domain 3 status register */
};


/* ============================================================================
   =============================== Module: RTC ================================
   ============================================================================ */

typedef union RTC_RTCSUPV_union_tag {  /* RTC Supervisor Control register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t SUPV:1;                  /* RTC Supervisor Bit. */
  } B;
} RTC_RTCSUPV_tag;

typedef union RTC_RTCC_union_tag {     /* RTC Control register */
  vuint32_t R;
  struct {
    vuint32_t TRIG_EN:1;               /* Trigger enable for Analog Comparator */
    vuint32_t _unused_1:9;             /* Reserved. */
    vuint32_t DIV32EN:1;               /* Divide by 32 enable. */
    vuint32_t DIV512EN:1;              /* Divide by 512 enable */
    vuint32_t CLKSEL:2;                /* Clock select */
    vuint32_t APIIE:1;                 /* API Interrupt Enable. */
    vuint32_t APIEN:1;                 /* Autonomous Periodic Interrupt Enable. */
    vuint32_t _unused_16:12;           /* Reserved. */
    vuint32_t ROVREN:1;                /* Counter Roll Over Interrupt Enable. */
    vuint32_t FRZEN:1;                 /* Freeze Enable Bit */
    vuint32_t RTCIE:1;                 /* RTC Interrupt Enable. */
    vuint32_t CNTEN:1;                 /* Counter Enable */
  } B;
} RTC_RTCC_tag;

typedef union RTC_RTCS_union_tag {     /* RTC Status register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:10;            /* Reserved */
    vuint32_t ROVRF:1;                 /* Counter Roll Over Interrupt Flag. */
    vuint32_t _unused_11:2;            /* Reserved */
    vuint32_t APIF:1;                  /* API Interrupt Flag. */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t INV_API:1;               /* Invalid APIVAL write */
    vuint32_t INV_RTC:1;               /* Invalid rtc write */
    vuint32_t _unused_19:10;           /* Reserved */
    vuint32_t RTCF:1;                  /* RTC Interrupt Flag */
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} RTC_RTCS_tag;

typedef union RTC_RTCCNT_union_tag {   /* RTC Counter register */
  vuint32_t R;
  struct {
    vuint32_t RTCCNT:32;               /* RTC Counter Value */
  } B;
} RTC_RTCCNT_tag;

typedef union RTC_APIVAL_union_tag {   /* API Compare Value register */
  vuint32_t R;
  struct {
    vuint32_t APIVAL:32;               /* API Compare Value. */
  } B;
} RTC_APIVAL_tag;

typedef union RTC_RTCVAL_union_tag {   /* RTC Compare Value register */
  vuint32_t R;
  struct {
    vuint32_t RTCVAL:32;               /* RTC Compare Value. */
  } B;
} RTC_RTCVAL_tag;

struct RTC_tag {
  RTC_RTCSUPV_tag RTCSUPV;             /* RTC Supervisor Control register */
  RTC_RTCC_tag RTCC;                   /* RTC Control register */
  RTC_RTCS_tag RTCS;                   /* RTC Status register */
  RTC_RTCCNT_tag RTCCNT;               /* RTC Counter register */
  RTC_APIVAL_tag APIVAL;               /* API Compare Value register */
  RTC_RTCVAL_tag RTCVAL;               /* RTC Compare Value register */
};


/* ============================================================================
   =============================== Module: S32G_GPR ===========================
   ============================================================================ */

typedef union S32G_GPR_PFE_COH_EN_union_tag { /* PFE Port Coherency Enable */
  vuint32_t R;
  struct {
    vuint32_t DDR:1;                   /* PFE DDR Coherency Enable */
    vuint32_t HIF0:1;                  /* PFE HIF0 Coherency Enable */
    vuint32_t HIF1:1;                  /* PFE HIF1 Coherency Enable */
    vuint32_t HIF2:1;                  /* PFE HIF2 Coherency Enable */
    vuint32_t HIF3:1;                  /* PFE HIF3 Coherency Enable */
    vuint32_t UTIL:1;                  /* PFE UTIL Coherency Enable */
    vuint32_t _unused_6:26;
  } B;
} S32G_GPR_PFE_COH_EN_tag;

typedef union S32G_GPR_PFE_EMACX_INTF_SEL_union_tag { /* PFE EMAC Interface Mode */
  vuint32_t R;
  struct {
    vuint32_t EMAC0:4;                 /* EMAC0 Interface Select */
    vuint32_t EMAC1:4;                 /* EMAC1 Interface Select */
    vuint32_t EMAC2:4;                 /* EMAC2 Interface Select */
    vuint32_t _unused_12:20;
  } B;
} S32G_GPR_PFE_EMACX_INTF_SEL_tag;

typedef union S32G_GPR_PFE_SYS_GEN0_union_tag { /* PFE Generic System Status 0 */
  vuint32_t R;
  struct {
    vuint32_t STAT:32;                 /* Status */
  } B;
} S32G_GPR_PFE_SYS_GEN0_tag;

typedef union S32G_GPR_PFE_SYS_GEN1_union_tag { /* PFE Generic System Status 1 */
  vuint32_t R;
  struct {
    vuint32_t STAT:32;                 /* Status */
  } B;
} S32G_GPR_PFE_SYS_GEN1_tag;

typedef union S32G_GPR_PFE_SYS_GEN2_union_tag { /* PFE Generic System Status 2 */
  vuint32_t R;
  struct {
    vuint32_t STAT:32;                 /* Status */
  } B;
} S32G_GPR_PFE_SYS_GEN2_tag;

typedef union S32G_GPR_PFE_SYS_GEN3_union_tag { /* PFE Generic System Status 3 */
  vuint32_t R;
  struct {
    vuint32_t STAT:32;                 /* Status */
  } B;
} S32G_GPR_PFE_SYS_GEN3_tag;

typedef union S32G_GPR_PFE_PWR_CTRL_union_tag { /* PFE EMACX Power Control */
  vuint32_t R;
  struct {
    vuint32_t PWRCLAMP:3;              /* PFE Power Clamp */
    vuint32_t PWRDWN:3;                /* Power Down */
    vuint32_t PWRISO:3;                /* Power Isolate */
    vuint32_t PWRACK:3;                /* Power Down Acknoledge */
    vuint32_t _unused_12:20;
  } B;
} S32G_GPR_PFE_PWR_CTRL_tag;

typedef union S32G_GPR_LLCE_STAT_union_tag { /* LLCE Subsystem Status */
  vuint32_t R;
  struct {
    vuint32_t SLEEPING:4;              /* Sleeping */
    vuint32_t SYSRESETREQ:4;           /* System Reset Request */
    vuint32_t LLCE_LSPI_TRIG_RX:4;     /* LLCE LSPI Trigger Receive */
    vuint32_t LLCE_LSPI_TRIG_FM:4;     /* LLCE LSPI Trigger Frame */
    vuint32_t MISC:16;                 /* Reserved */
  } B;
} S32G_GPR_LLCE_STAT_tag;

typedef union S32G_GPR_LLCE_CTRL_union_tag { /* LLCE Power Control */
  vuint32_t R;
  struct {
    vuint32_t EXEVENT:4;               /* External Event */
    vuint32_t LINDIVSEL:1;             /* LINFlexD Divide Select */
    vuint32_t LLCE_LSPI_TRIG_IN:4;     /* LLCE LSPI Trig */
    vuint32_t LLCE_HTM0_TRC_DIS:1;     /* LLCE HTM0 Trace Disable */
    vuint32_t LLCE_HTM1_TRC_DIS:1;     /* LLCE HTM1 Trace Disable */
    vuint32_t PFE_2_LLCE_INT_HS_BP:1;  /* PFE 2 LLCE Interrupt Bypass */
    vuint32_t MISC:20;                 /* Reserved */
  } B;
} S32G_GPR_LLCE_CTRL_tag;

typedef union S32G_GPR_DDR_URGENT_CTRL_union_tag { /* DDR Urgent Control */
  vuint32_t R;
  struct {
    vuint32_t ARURGENTB:3;             /* arurentb Control */
    vuint32_t ARURGENTR:3;             /* arurgentr Control */
    vuint32_t AWURGENT:3;              /* awurgent Control */
    vuint32_t _unused_9:23;
  } B;
} S32G_GPR_DDR_URGENT_CTRL_tag;

typedef union S32G_GPR_FLXTIM_CTRL_union_tag { /* FlexTimer Global Load Control */
  vuint32_t R;
  struct {
    vuint32_t GLOBAL_LDOK_IN0:1;       /* Global LDOK Input 0 */
    vuint32_t GLOBAL_LDOK_IN1:1;       /* Global LDOK Input 1 */
    vuint32_t _unused_2:30;
  } B;
} S32G_GPR_FLXTIM_CTRL_tag;

typedef union S32G_GPR_FLXTIM_STAT_union_tag { /* FlexTimer LDOK Status */
  vuint32_t R;
  struct {
    vuint32_t GLB_LDOK_OUT0:1;         /* Global Load OK Out 0 */
    vuint32_t GLB_LDOK_OUT1:1;         /* Global Load OK Out 1 */
    vuint32_t _unused_2:30;
  } B;
} S32G_GPR_FLXTIM_STAT_tag;

typedef union S32G_GPR_CMU_STAT_union_tag { /* Top CMU_FC Status */
  vuint32_t R;
  struct {
    vuint32_t FLL_FHH:14;              /* CMU FLL FHH Status */
    vuint32_t _unused_14:18;
  } B;
} S32G_GPR_CMU_STAT_tag;

typedef union S32G_GPR_NOC_NOPEND_TRANS_union_tag { /* Accelerator NoC NoPendingTrans Status */
  vuint32_t R;
  struct {
    vuint32_t STAT:32;                 /* Port Status */
  } B;
} S32G_GPR_NOC_NOPEND_TRANS_tag;

typedef union S32G_GPR_CLKOUT_PAD_CTRL_union_tag { /* CLKOUT PAD Control */
  vuint32_t R;
  struct {
    vuint32_t TERM_EN:1;
    vuint32_t TM_SEL0:1;
    vuint32_t TM_SEL1:1;
    vuint32_t AURORA_MODE:1;
    vuint32_t CREF_EN:1;
    vuint32_t CLKOUT_OBE:1;
    vuint32_t CLKOUT_TX_PREEMPH0:1;
    vuint32_t CLKOUT_TX_PREEMPH1:1;
    vuint32_t _unused_8:24;
  } B;
} S32G_GPR_CLKOUT_PAD_CTRL_tag;

typedef union S32G_GPR_PCIE_TOGGLE_union_tag { /* PCIe RD/WD Toggle Control */
  vuint32_t R;
  struct {
    vuint32_t PCIE1_WD_TOGG:4;
    vuint32_t PCIE1_RD_TOGG:4;
    vuint32_t PCIE0_WD_TOGG:4;
    vuint32_t PCIE0_RD_TOGG:4;
    vuint32_t _unused_16:16;
  } B;
} S32G_GPR_PCIE_TOGGLE_tag;

typedef union S32G_GPR_PCIE_TOGGLEDONE_STAT_union_tag { /* PCIe Toggle Done Status */
  vuint32_t R;
  struct {
    vuint32_t PCIE1_WD_TOGG_DONE_STAT:4;
    vuint32_t PCIE1_RD_TOGG_DONE_STAT:4;
    vuint32_t PCIE0_WD_TOGG_DONE_STAT:4;
    vuint32_t PCIE0_RD_TOGG_DONE_STAT:4;
    vuint32_t _unused_16:16;
  } B;
} S32G_GPR_PCIE_TOGGLEDONE_STAT_tag;

typedef union S32G_GPR_GENCTRL0_union_tag { /* Generic Control 0 */
  vuint32_t R;
  struct {
    vuint32_t USBPWRFLT:1;             /* USB Power Fault */
    vuint32_t ACCEL_FLXNC_REF_DIV:2;   /* Accelerator NoC Reference Divide */
    vuint32_t ACCEL_FLXNC_RD0_IDLEREQ:1; /* Accelerator NoC RD0 IdleReq */
    vuint32_t MISC:28;
  } B;
} S32G_GPR_GENCTRL0_tag;

typedef union S32G_GPR_GENCTRL1_union_tag { /* Generic Control 1 */
  vuint32_t R;
  struct {
    vuint32_t CTRL:32;
  } B;
} S32G_GPR_GENCTRL1_tag;

typedef union S32G_GPR_GENCTRL2_union_tag { /* Generic Control 2 */
  vuint32_t R;
  struct {
    vuint32_t CTRL:32;                 /* Reserved */
  } B;
} S32G_GPR_GENCTRL2_tag;

typedef union S32G_GPR_GENCTRL3_union_tag { /* Generic Control 3 */
  vuint32_t R;
  struct {
    vuint32_t CTRL:32;                 /* Reserved */
  } B;
} S32G_GPR_GENCTRL3_tag;

typedef union S32G_GPR_GENSTAT0_union_tag { /* Generic Status 0 */
  vuint32_t R;
  struct {
    vuint32_t STAT:32;                 /* Status */
  } B;
} S32G_GPR_GENSTAT0_tag;

typedef union S32G_GPR_GENSTAT1_union_tag { /* Generic Status 1 */
  vuint32_t R;
  struct {
    vuint32_t STAT:32;                 /* Reserved */
  } B;
} S32G_GPR_GENSTAT1_tag;

typedef union S32G_GPR_GENSTAT2_union_tag { /* Generic Status 2 */
  vuint32_t R;
  struct {
    vuint32_t STAT:32;                 /* Reserved */
  } B;
} S32G_GPR_GENSTAT2_tag;

typedef union S32G_GPR_GENSTAT3_union_tag { /* Generic Status 3 */
  vuint32_t R;
  struct {
    vuint32_t STAT:32;                 /* Reserved */
  } B;
} S32G_GPR_GENSTAT3_tag;

struct S32G_GPR_tag {
  S32G_GPR_PFE_COH_EN_tag PFE_COH_EN;  /* PFE Port Coherency Enable */
  S32G_GPR_PFE_EMACX_INTF_SEL_tag PFE_EMACX_INTF_SEL; /* PFE EMAC Interface Mode */
  S32G_GPR_PFE_SYS_GEN0_tag PFE_SYS_GEN0; /* PFE Generic System Status 0 */
  S32G_GPR_PFE_SYS_GEN1_tag PFE_SYS_GEN1; /* PFE Generic System Status 1 */
  S32G_GPR_PFE_SYS_GEN2_tag PFE_SYS_GEN2; /* PFE Generic System Status 2 */
  S32G_GPR_PFE_SYS_GEN3_tag PFE_SYS_GEN3; /* PFE Generic System Status 3 */
  uint8_t S32G_GPR_reserved0[8];
  S32G_GPR_PFE_PWR_CTRL_tag PFE_PWR_CTRL; /* PFE EMACX Power Control */
  uint8_t S32G_GPR_reserved1[28];
  S32G_GPR_LLCE_STAT_tag LLCE_STAT;    /* LLCE Subsystem Status */
  S32G_GPR_LLCE_CTRL_tag LLCE_CTRL;    /* LLCE Power Control */
  S32G_GPR_DDR_URGENT_CTRL_tag DDR_URGENT_CTRL; /* DDR Urgent Control */
  S32G_GPR_FLXTIM_CTRL_tag FLXTIM_CTRL; /* FlexTimer Global Load Control */
  S32G_GPR_FLXTIM_STAT_tag FLXTIM_STAT; /* FlexTimer LDOK Status */
  S32G_GPR_CMU_STAT_tag CMU_STAT;      /* Top CMU_FC Status */
  S32G_GPR_NOC_NOPEND_TRANS_tag NOC_NOPEND_TRANS; /* Accelerator NoC NoPendingTrans Status */
  S32G_GPR_CLKOUT_PAD_CTRL_tag CLKOUT_PAD_CTRL; /* CLKOUT PAD Control */
  uint8_t S32G_GPR_reserved2[48];
  S32G_GPR_PCIE_TOGGLE_tag PCIE_TOGGLE; /* PCIe RD/WD Toggle Control */
  S32G_GPR_PCIE_TOGGLEDONE_STAT_tag PCIE_TOGGLEDONE_STAT; /* PCIe Toggle Done Status */
  uint8_t S32G_GPR_reserved3[72];
  S32G_GPR_GENCTRL0_tag GENCTRL0;      /* Generic Control 0 */
  S32G_GPR_GENCTRL1_tag GENCTRL1;      /* Generic Control 1 */
  S32G_GPR_GENCTRL2_tag GENCTRL2;      /* Generic Control 2 */
  S32G_GPR_GENCTRL3_tag GENCTRL3;      /* Generic Control 3 */
  S32G_GPR_GENSTAT0_tag GENSTAT0;      /* Generic Status 0 */
  S32G_GPR_GENSTAT1_tag GENSTAT1;      /* Generic Status 1 */
  S32G_GPR_GENSTAT2_tag GENSTAT2;      /* Generic Status 2 */
  S32G_GPR_GENSTAT3_tag GENSTAT3;      /* Generic Status 3 */
};


/* ============================================================================
   =============================== Module: S32G_STDBY_GPR =====================
   ============================================================================ */

typedef union S32G_STDBY_GPR_WKUP_PUS_union_tag { /* WKUP Pad Pullup/Pulldown Select */
  vuint32_t R;
  struct {
    vuint32_t WKUP_PUS4:1;             /* WKUP Pad 4 Pullup Select */
    vuint32_t WKUP_PUS5:1;             /* WKUP Pad 5 Pullup Select */
    vuint32_t WKUP_PUS6:1;             /* WKUP Pad 6 Pullup Select */
    vuint32_t WKUP_PUS7:1;             /* WKUP Pad 7 Pullup Select */
    vuint32_t WKUP_PUS8:1;             /* WKUP Pad 8 Pullup Select */
    vuint32_t WKUP_PUS9:1;             /* WKUP Pad 9 Pullup Select */
    vuint32_t WKUP_PUS10:1;            /* WKUP Pad 10 Pullup Select */
    vuint32_t WKUP_PUS11:1;            /* WKUP Pad 11 Pullup Select */
    vuint32_t WKUP_PUS12:1;            /* WKUP Pad 12 Pullup Select */
    vuint32_t WKUP_PUS13:1;            /* WKUP Pad 13 Pullup Select */
    vuint32_t WKUP_PUS14:1;            /* WKUP Pad 14 Pullup Select */
    vuint32_t WKUP_PUS15:1;            /* WKUP Pad 15 Pullup Select */
    vuint32_t WKUP_PUS16:1;            /* WKUP Pad 16 Pullup Select */
    vuint32_t WKUP_PUS17:1;            /* WKUP Pad 17 Pullup Select */
    vuint32_t WKUP_PUS18:1;            /* WKUP Pad 18 Pullup Select */
    vuint32_t WKUP_PUS19:1;            /* WKUP Pad 19 Pullup Select */
    vuint32_t WKUP_PUS20:1;            /* WKUP Pad 20 Pullup Select */
    vuint32_t WKUP_PUS21:1;            /* WKUP Pad 21 Pullup Select */
    vuint32_t WKUP_PUS22:1;            /* WKUP Pad 22 Pullup Select */
    vuint32_t WKUP_PUS23:1;            /* WKUP Pad 23 Pullup Select */
    vuint32_t WKUP_PUS24:1;            /* WKUP Pad 24 Pullup Select */
    vuint32_t WKUP_PUS25:1;            /* WKUP Pad 25 Pullup Select */
    vuint32_t WKUP_PUS26:1;            /* WKUP Pad 26 Pullup Select */
    vuint32_t _unused_23:8;
    vuint32_t WKUP_PU_OVERRIDE:1;      /* WKUP Pullup Override */
  } B;
} S32G_STDBY_GPR_WKUP_PUS_tag;

struct S32G_STDBY_GPR_tag {
  uint8_t S32G_STDBY_GPR_reserved0[4];
  S32G_STDBY_GPR_WKUP_PUS_tag WKUP_PUS; /* WKUP Pad Pullup/Pulldown Select */
};


/* ============================================================================
   =============================== Module: SBSW ===============================
   ============================================================================ */

typedef union SBSW_TMC_CONFIG_UNLOCK_union_tag { /* TMC Configuration Unlock */
  vuint32_t R;
  struct {
    vuint32_t KEY:32;                  /* Key */
  } B;
} SBSW_TMC_CONFIG_UNLOCK_tag;

typedef union SBSW_TMWDP_CONFIG_UNLOCK_union_tag { /* TMWDP Configuration Unlock */
  vuint32_t R;
  struct {
    vuint32_t KEY:32;                  /* Key */
  } B;
} SBSW_TMWDP_CONFIG_UNLOCK_tag;

typedef union SBSW_TMC_CONFIG_STATUS_union_tag { /* TMC Configuration Status */
  vuint32_t R;
  struct {
    vuint32_t STATUS:1;                /* Status */
    vuint32_t _unused_1:31;
  } B;
} SBSW_TMC_CONFIG_STATUS_tag;

typedef union SBSW_TMWDP_CONFIG_STATUS_union_tag { /* TMWDP Configuration Status */
  vuint32_t R;
  struct {
    vuint32_t STATUS:1;                /* Status */
    vuint32_t _unused_1:31;
  } B;
} SBSW_TMWDP_CONFIG_STATUS_tag;

typedef union SBSW_DEBUG_MODE_union_tag { /* Debug Mode */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;
    vuint32_t MODE:1;                  /* Mode */
  } B;
} SBSW_DEBUG_MODE_tag;

typedef union SBSW_TMC_FAULT_STATUS_union_tag { /* TMC Fault Status */
  vuint32_t R;
  struct {
    vuint32_t STATUS0:1;               /* Status n */
    vuint32_t STATUS1:1;               /* Status n */
    vuint32_t STATUS2:1;               /* Status n */
    vuint32_t STATUS3:1;               /* Status n */
    vuint32_t STATUS4:1;               /* Status n */
    vuint32_t STATUS5:1;               /* Status n */
    vuint32_t STATUS6:1;               /* Status n */
    vuint32_t STATUS7:1;               /* Status n */
    vuint32_t STATUS8:1;               /* Status n */
    vuint32_t STATUS9:1;               /* Status n */
    vuint32_t STATUS10:1;              /* Status n */
    vuint32_t STATUS11:1;              /* Status n */
    vuint32_t STATUS12:1;              /* Status n */
    vuint32_t STATUS13:1;              /* Status n */
    vuint32_t STATUS14:1;              /* Status n */
    vuint32_t STATUS15:1;              /* Status n */
    vuint32_t STATUS16:1;              /* Status n */
    vuint32_t STATUS17:1;              /* Status n */
    vuint32_t STATUS18:1;              /* Status n */
    vuint32_t STATUS19:1;              /* Status n */
    vuint32_t STATUS20:1;              /* Status n */
    vuint32_t STATUS21:1;              /* Status n */
    vuint32_t STATUS22:1;              /* Status n */
    vuint32_t STATUS23:1;              /* Status n */
    vuint32_t STATUS24:1;              /* Status n */
    vuint32_t STATUS25:1;              /* Status n */
    vuint32_t STATUS26:1;              /* Status n */
    vuint32_t STATUS27:1;              /* Status n */
    vuint32_t STATUS28:1;              /* Status n */
    vuint32_t STATUS29:1;              /* Status n */
    vuint32_t STATUS30:1;              /* Status n */
    vuint32_t STATUS31:1;              /* Status n */
  } B;
} SBSW_TMC_FAULT_STATUS_tag;

typedef union SBSW_TMWDP_FAULT_STATUS_union_tag { /* TMWDP Fault Status */
  vuint32_t R;
  struct {
    vuint32_t STATUS0:1;               /* Status n */
    vuint32_t STATUS1:1;               /* Status n */
    vuint32_t STATUS2:1;               /* Status n */
    vuint32_t STATUS3:1;               /* Status n */
    vuint32_t STATUS4:1;               /* Status n */
    vuint32_t STATUS5:1;               /* Status n */
    vuint32_t STATUS6:1;               /* Status n */
    vuint32_t STATUS7:1;               /* Status n */
    vuint32_t STATUS8:1;               /* Status n */
    vuint32_t STATUS9:1;               /* Status n */
    vuint32_t STATUS10:1;              /* Status n */
    vuint32_t STATUS11:1;              /* Status n */
    vuint32_t STATUS12:1;              /* Status n */
    vuint32_t STATUS13:1;              /* Status n */
    vuint32_t STATUS14:1;              /* Status n */
    vuint32_t STATUS15:1;              /* Status n */
    vuint32_t STATUS16:1;              /* Status n */
    vuint32_t STATUS17:1;              /* Status n */
    vuint32_t STATUS18:1;              /* Status n */
    vuint32_t STATUS19:1;              /* Status n */
    vuint32_t STATUS20:1;              /* Status n */
    vuint32_t STATUS21:1;              /* Status n */
    vuint32_t STATUS22:1;              /* Status n */
    vuint32_t STATUS23:1;              /* Status n */
    vuint32_t STATUS24:1;              /* Status n */
    vuint32_t STATUS25:1;              /* Status n */
    vuint32_t STATUS26:1;              /* Status n */
    vuint32_t STATUS27:1;              /* Status n */
    vuint32_t STATUS28:1;              /* Status n */
    vuint32_t STATUS29:1;              /* Status n */
    vuint32_t STATUS30:1;              /* Status n */
    vuint32_t STATUS31:1;              /* Status n */
  } B;
} SBSW_TMWDP_FAULT_STATUS_tag;

typedef union SBSW_TMC_CONFIG_union_tag { /* TMC Configuration */
  vuint32_t R;
  struct {
    vuint32_t TIMING_MODE:1;           /* Timing mode */
    vuint32_t COMPARE_MODE:2;          /* Compare mode */
    vuint32_t _unused_3:29;
  } B;
} SBSW_TMC_CONFIG_tag;

typedef union SBSW_TMC_DISTANCE_union_tag { /* TMC Distance */
  vuint32_t R;
  struct {
    vuint32_t DISTANCE:32;             /* Distance value */
  } B;
} SBSW_TMC_DISTANCE_tag;

typedef union SBSW_TMC_TIMEOUT_union_tag { /* TMC Timeout */
  vuint32_t R;
  struct {
    vuint32_t TIMEOUT:32;              /* Timeout interval */
  } B;
} SBSW_TMC_TIMEOUT_tag;

typedef union SBSW_TMC_CONTROL_union_tag { /* TMC Control */
  vuint32_t R;
  struct {
    vuint32_t ENABLE:1;                /* Enable */
    vuint32_t _unused_1:31;
  } B;
} SBSW_TMC_CONTROL_tag;

typedef union SBSW_TMC_R0_union_tag {  /* TMC R0 Data */
  vuint32_t R;
  struct {
    vuint32_t R0:32;                   /* R0 data value */
  } B;
} SBSW_TMC_R0_tag;

typedef union SBSW_TMC_R1_union_tag {  /* TMC R1 Data */
  vuint32_t R;
  struct {
    vuint32_t R1:32;                   /* R1 data value */
  } B;
} SBSW_TMC_R1_tag;

typedef union SBSW_TMC_STATUS_union_tag { /* TMC Status */
  vuint32_t R;
  struct {
    vuint32_t R0_WRITTEN:1;            /* R0 written */
    vuint32_t R1_WRITTEN:1;            /* R1 written */
    vuint32_t FAULT:2;                 /* Fault indicator */
    vuint32_t OVERWRITTEN:1;           /* Overwritten */
    vuint32_t _unused_5:27;
  } B;
} SBSW_TMC_STATUS_tag;

typedef union SBSW_TMC_TIMER_union_tag { /* TMC Timer */
  vuint32_t R;
  struct {
    vuint32_t TIMER:32;                /* Timer value */
  } B;
} SBSW_TMC_TIMER_tag;

typedef struct SBSW_TMC_struct_tag {
  SBSW_TMC_CONFIG_tag CONFIG;          /* TMC Configuration */
  SBSW_TMC_DISTANCE_tag DISTANCE;      /* TMC Distance */
  SBSW_TMC_TIMEOUT_tag TIMEOUT;        /* TMC Timeout */
  SBSW_TMC_CONTROL_tag CONTROL;        /* TMC Control */
  SBSW_TMC_R0_tag R0;                  /* TMC R0 Data */
  SBSW_TMC_R1_tag R1;                  /* TMC R1 Data */
  SBSW_TMC_STATUS_tag STATUS;          /* TMC Status */
  SBSW_TMC_TIMER_tag TIMER;            /* TMC Timer */
} SBSW_TMC_tag;

typedef union SBSW_TMWDP_CONFIG_ADDR_union_tag { /* TMWDP Configuration Address */
  vuint32_t R;
  struct {
    vuint32_t ADDRESS:32;              /* Configuration address */
  } B;
} SBSW_TMWDP_CONFIG_ADDR_tag;

typedef union SBSW_TMWDP_CONTROL_union_tag { /* TMWDP Control */
  vuint32_t R;
  struct {
    vuint32_t ENABLE:1;                /* Enable */
    vuint32_t _unused_1:31;
  } B;
} SBSW_TMWDP_CONTROL_tag;

typedef union SBSW_TMWDP_STATUS_union_tag { /* TMWDP Status */
  vuint32_t R;
  struct {
    vuint32_t INTERNAL_ERROR:1;        /* TMWDP internal error */
    vuint32_t CONFIG_ERROR:1;          /* Configuration error */
    vuint32_t RUNNING:1;               /* TMWDP running */
    vuint32_t _unused_3:29;
  } B;
} SBSW_TMWDP_STATUS_tag;

typedef union SBSW_TMWDP_AUTOMATA_STATUS_union_tag { /* TMWDP Automata Status */
  vuint32_t R;
  struct {
    vuint32_t STATUS0:1;               /* Status n */
    vuint32_t STATUS1:1;               /* Status n */
    vuint32_t STATUS2:1;               /* Status n */
    vuint32_t STATUS3:1;               /* Status n */
    vuint32_t STATUS4:1;               /* Status n */
    vuint32_t STATUS5:1;               /* Status n */
    vuint32_t STATUS6:1;               /* Status n */
    vuint32_t STATUS7:1;               /* Status n */
    vuint32_t STATUS8:1;               /* Status n */
    vuint32_t STATUS9:1;               /* Status n */
    vuint32_t STATUS10:1;              /* Status n */
    vuint32_t STATUS11:1;              /* Status n */
    vuint32_t STATUS12:1;              /* Status n */
    vuint32_t STATUS13:1;              /* Status n */
    vuint32_t STATUS14:1;              /* Status n */
    vuint32_t STATUS15:1;              /* Status n */
    vuint32_t STATUS16:1;              /* Status n */
    vuint32_t STATUS17:1;              /* Status n */
    vuint32_t STATUS18:1;              /* Status n */
    vuint32_t STATUS19:1;              /* Status n */
    vuint32_t STATUS20:1;              /* Status n */
    vuint32_t STATUS21:1;              /* Status n */
    vuint32_t STATUS22:1;              /* Status n */
    vuint32_t STATUS23:1;              /* Status n */
    vuint32_t STATUS24:1;              /* Status n */
    vuint32_t STATUS25:1;              /* Status n */
    vuint32_t STATUS26:1;              /* Status n */
    vuint32_t STATUS27:1;              /* Status n */
    vuint32_t STATUS28:1;              /* Status n */
    vuint32_t STATUS29:1;              /* Status n */
    vuint32_t STATUS30:1;              /* Status n */
    vuint32_t STATUS31:1;              /* Status n */
  } B;
} SBSW_TMWDP_AUTOMATA_STATUS_tag;

typedef union SBSW_TMWDP_AUTOMATA_ILLGL_TRANS_union_tag { /* TMWDP Automata Illegal Transition */
  vuint32_t R;
  struct {
    vuint32_t STATUS0:1;               /* Status n */
    vuint32_t STATUS1:1;               /* Status n */
    vuint32_t STATUS2:1;               /* Status n */
    vuint32_t STATUS3:1;               /* Status n */
    vuint32_t STATUS4:1;               /* Status n */
    vuint32_t STATUS5:1;               /* Status n */
    vuint32_t STATUS6:1;               /* Status n */
    vuint32_t STATUS7:1;               /* Status n */
    vuint32_t STATUS8:1;               /* Status n */
    vuint32_t STATUS9:1;               /* Status n */
    vuint32_t STATUS10:1;              /* Status n */
    vuint32_t STATUS11:1;              /* Status n */
    vuint32_t STATUS12:1;              /* Status n */
    vuint32_t STATUS13:1;              /* Status n */
    vuint32_t STATUS14:1;              /* Status n */
    vuint32_t STATUS15:1;              /* Status n */
    vuint32_t STATUS16:1;              /* Status n */
    vuint32_t STATUS17:1;              /* Status n */
    vuint32_t STATUS18:1;              /* Status n */
    vuint32_t STATUS19:1;              /* Status n */
    vuint32_t STATUS20:1;              /* Status n */
    vuint32_t STATUS21:1;              /* Status n */
    vuint32_t STATUS22:1;              /* Status n */
    vuint32_t STATUS23:1;              /* Status n */
    vuint32_t STATUS24:1;              /* Status n */
    vuint32_t STATUS25:1;              /* Status n */
    vuint32_t STATUS26:1;              /* Status n */
    vuint32_t STATUS27:1;              /* Status n */
    vuint32_t STATUS28:1;              /* Status n */
    vuint32_t STATUS29:1;              /* Status n */
    vuint32_t STATUS30:1;              /* Status n */
    vuint32_t STATUS31:1;              /* Status n */
  } B;
} SBSW_TMWDP_AUTOMATA_ILLGL_TRANS_tag;

typedef union SBSW_TMWDP_AUTOMATA_TIME_VIOLATION_union_tag { /* TMWDP Automata Time Violation */
  vuint32_t R;
  struct {
    vuint32_t STATUS0:1;               /* Status n */
    vuint32_t STATUS1:1;               /* Status n */
    vuint32_t STATUS2:1;               /* Status n */
    vuint32_t STATUS3:1;               /* Status n */
    vuint32_t STATUS4:1;               /* Status n */
    vuint32_t STATUS5:1;               /* Status n */
    vuint32_t STATUS6:1;               /* Status n */
    vuint32_t STATUS7:1;               /* Status n */
    vuint32_t STATUS8:1;               /* Status n */
    vuint32_t STATUS9:1;               /* Status n */
    vuint32_t STATUS10:1;              /* Status n */
    vuint32_t STATUS11:1;              /* Status n */
    vuint32_t STATUS12:1;              /* Status n */
    vuint32_t STATUS13:1;              /* Status n */
    vuint32_t STATUS14:1;              /* Status n */
    vuint32_t STATUS15:1;              /* Status n */
    vuint32_t STATUS16:1;              /* Status n */
    vuint32_t STATUS17:1;              /* Status n */
    vuint32_t STATUS18:1;              /* Status n */
    vuint32_t STATUS19:1;              /* Status n */
    vuint32_t STATUS20:1;              /* Status n */
    vuint32_t STATUS21:1;              /* Status n */
    vuint32_t STATUS22:1;              /* Status n */
    vuint32_t STATUS23:1;              /* Status n */
    vuint32_t STATUS24:1;              /* Status n */
    vuint32_t STATUS25:1;              /* Status n */
    vuint32_t STATUS26:1;              /* Status n */
    vuint32_t STATUS27:1;              /* Status n */
    vuint32_t STATUS28:1;              /* Status n */
    vuint32_t STATUS29:1;              /* Status n */
    vuint32_t STATUS30:1;              /* Status n */
    vuint32_t STATUS31:1;              /* Status n */
  } B;
} SBSW_TMWDP_AUTOMATA_TIME_VIOLATION_tag;

typedef union SBSW_AUT_STATUS_union_tag { /* TMWDP Automaton Status */
  vuint32_t R;
  struct {
    vuint32_t CURRENT_STATE:16;        /* Automaton current state */
    vuint32_t STATUS:1;                /* Automaton status */
    vuint32_t ILLEGAL_TRANSITION:1;    /* Illegal transition */
    vuint32_t TIME_VIOLATION:1;        /* Time violation */
    vuint32_t _unused_19:13;
  } B;
} SBSW_AUT_STATUS_tag;

typedef union SBSW_AUT_PRGS_REQ_union_tag { /* TMWDP Automaton Progress Request */
  vuint32_t R;
  struct {
    vuint32_t PROGRESS_REQ:16;         /* Application progress request */
    vuint32_t WRITTEN:1;               /* Written */
    vuint32_t OVERWRITTEN:1;           /* Overwritten */
    vuint32_t _unused_18:14;
  } B;
} SBSW_AUT_PRGS_REQ_tag;

typedef struct SBSW_AUT_struct_tag {
  SBSW_AUT_STATUS_tag STATUS;          /* TMWDP Automaton Status */
  SBSW_AUT_PRGS_REQ_tag PRGS_REQ;      /* TMWDP Automaton Progress Request */
} SBSW_AUT_tag;

typedef union SBSW_TC_ID_union_tag {   /* TMWDP Core Domain ID */
  vuint32_t R;
  struct {
    vuint32_t ID:4;                    /* TC domain ID value */
    vuint32_t _unused_4:4;
    vuint32_t WRITTEN:1;               /* TC ID status */
    vuint32_t _unused_9:23;
  } B;
} SBSW_TC_ID_tag;

struct SBSW_tag {
  SBSW_TMC_CONFIG_UNLOCK_tag TMC_CONFIG_UNLOCK; /* TMC Configuration Unlock */
  SBSW_TMWDP_CONFIG_UNLOCK_tag TMWDP_CONFIG_UNLOCK; /* TMWDP Configuration Unlock */
  SBSW_TMC_CONFIG_STATUS_tag TMC_CONFIG_STATUS; /* TMC Configuration Status */
  SBSW_TMWDP_CONFIG_STATUS_tag TMWDP_CONFIG_STATUS; /* TMWDP Configuration Status */
  SBSW_DEBUG_MODE_tag DEBUG_MODE;      /* Debug Mode */
  SBSW_TMC_FAULT_STATUS_tag TMC_FAULT_STATUS; /* TMC Fault Status */
  SBSW_TMWDP_FAULT_STATUS_tag TMWDP_FAULT_STATUS; /* TMWDP Fault Status */
  uint8_t SBSW_reserved0[4];
  SBSW_TMC_tag TMC[32];
  SBSW_TMWDP_CONFIG_ADDR_tag TMWDP_CONFIG_ADDR; /* TMWDP Configuration Address */
  SBSW_TMWDP_CONTROL_tag TMWDP_CONTROL; /* TMWDP Control */
  SBSW_TMWDP_STATUS_tag TMWDP_STATUS;  /* TMWDP Status */
  SBSW_TMWDP_AUTOMATA_STATUS_tag TMWDP_AUTOMATA_STATUS; /* TMWDP Automata Status */
  SBSW_TMWDP_AUTOMATA_ILLGL_TRANS_tag TMWDP_AUTOMATA_ILLGL_TRANS; /* TMWDP Automata Illegal Transition */
  SBSW_TMWDP_AUTOMATA_TIME_VIOLATION_tag TMWDP_AUTOMATA_TIME_VIOLATION; /* TMWDP Automata Time Violation */
  uint8_t SBSW_reserved1[24];
  SBSW_AUT_tag AUT[32];
  uint8_t SBSW_reserved2[2732];
  SBSW_TC_ID_tag TC_ID;                /* TMWDP Core Domain ID */
};


/* ============================================================================
   =============================== Module: SECURITY ===========================
   ============================================================================ */

typedef union SECURITY_EXT_DBGSTAT_union_tag { /* External Debugger Status */
  vuint32_t R;
  struct {
    vuint32_t EDB:1;                   /* External debugger indication */
    vuint32_t _unused_1:31;
  } B;
} SECURITY_EXT_DBGSTAT_tag;

typedef union SECURITY_HSE_GPR0_union_tag { /* HSE GPR 0 */
  vuint32_t R;
  struct {
    vuint32_t DATA0:6;                 /* General purpose data */
    vuint32_t _unused_6:1;
    vuint32_t DATA1:25;                /* General purpose data */
  } B;
} SECURITY_HSE_GPR0_tag;

typedef union SECURITY_HSE_GPR1_union_tag { /* HSE GPR n */
  vuint32_t R;
  struct {
    vuint32_t DATA:32;                 /* General purpose data */
  } B;
} SECURITY_HSE_GPR1_tag;

typedef union SECURITY_HSE_GPR2_union_tag { /* HSE GPR n */
  vuint32_t R;
  struct {
    vuint32_t DATA:32;                 /* General purpose data */
  } B;
} SECURITY_HSE_GPR2_tag;

typedef union SECURITY_HSE_GPR_union_tag { /* HSE GPR n */
  vuint32_t R;
  struct {
    vuint32_t DATA:32;                 /* General purpose data */
  } B;
} SECURITY_HSE_GPR_tag;

struct SECURITY_tag {
  uint8_t SECURITY_reserved0[8];
  SECURITY_EXT_DBGSTAT_tag EXT_DBGSTAT; /* External Debugger Status */
  uint8_t SECURITY_reserved1[16];
  SECURITY_HSE_GPR0_tag HSE_GPR0;      /* HSE GPR 0 */
  SECURITY_HSE_GPR1_tag HSE_GPR1;      /* HSE GPR n */
  SECURITY_HSE_GPR2_tag HSE_GPR2;      /* HSE GPR n */
  SECURITY_HSE_GPR_tag HSE_GPR[9];     /* HSE GPR n */
};


/* ============================================================================
   =============================== Module: SELFTEST_GPR =======================
   ============================================================================ */

typedef union SELFTEST_GPR_LBIST_PROG_REG_union_tag { /* LBIST Program */
  vuint32_t R;
  struct {
    vuint32_t LBIST_SHIFT_COUNT:8;     /* LBIST Shift Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} SELFTEST_GPR_LBIST_PROG_REG_tag;

struct SELFTEST_GPR_tag {
  uint8_t SELFTEST_GPR_reserved0[20];
  SELFTEST_GPR_LBIST_PROG_REG_tag LBIST_PROG_REG; /* LBIST Program */
};


/* ============================================================================
   =============================== Module: SELFTEST_GPR_TOP ===================
   ============================================================================ */

typedef union SELFTEST_GPR_TOP_RESET_DOMAIN_SELFTEST_ENABLE_REGISTER_union_tag { /* Reset Domain Self-test Enable */
  vuint32_t R;
  struct {
    vuint32_t RESET_DOMAIN_0_SELFTEST_ENABLE:1; /* RESET_DOMAIN_0_SELFTEST_ENABLE */
    vuint32_t RESET_DOMAIN_1_SELFTEST_ENABLE:1; /* RESET_DOMAIN_1_SELFTEST_ENABLE */
    vuint32_t RESET_DOMAIN_2_SELFTEST_ENABLE:1; /* RESET_DOMAIN_2_SELFTEST_ENABLE */
    vuint32_t RESET_DOMAIN_3_SELFTEST_ENABLE:1; /* RESET_DOMAIN_3_SELFTEST_ENABLE */
    vuint32_t _unused_4:28;
  } B;
} SELFTEST_GPR_TOP_RESET_DOMAIN_SELFTEST_ENABLE_REGISTER_tag;

typedef union SELFTEST_GPR_TOP_RESET_DOMAIN_SELFTEST_ENABLE_STATUS_REGISTER_union_tag { /* Reset Domain Self-test Enable Status */
  vuint32_t R;
  struct {
    vuint32_t RESET_DOMAIN_0_SELFTEST_ENABLE_STATUS:1; /* RESET_DOMAIN_0_SELFTEST_ENABLE_STATUS */
    vuint32_t RESET_DOMAIN_1_SELFTEST_ENABLE_STATUS:1; /* RESET_DOMAIN_1_SELFTEST_ENABLE_STATUS */
    vuint32_t RESET_DOMAIN_2_SELFTEST_ENABLE_STATUS:1; /* RESET_DOMAIN_2_SELFTEST_ENABLE_STATUS */
    vuint32_t RESET_DOMAIN_3_SELFTEST_ENABLE_STATUS:1; /* RESET_DOMAIN_3_SELFTEST_ENABLE_STATUS */
    vuint32_t _unused_4:12;
    vuint32_t RESET_DOMAIN_0_SELFTEST_ENABLE_LAST_RUN_STATUS:1; /* RESET_DOMAIN_0_SELFTEST_ENABLE_LAST_RUN_STATUS */
    vuint32_t RESET_DOMAIN_1_SELFTEST_ENABLE_LAST_RUN_STATUS:1; /* RESET_DOMAIN_1_SELFTEST_ENABLE_LAST_RUN_STATUS */
    vuint32_t RESET_DOMAIN_2_SELFTEST_ENABLE_LAST_RUN_STATUS:1; /* RESET_DOMAIN_2_SELFTEST_ENABLE_LAST_RUN_STATUS */
    vuint32_t RESET_DOMAIN_3_SELFTEST_ENABLE_LAST_RUN_STATUS:1; /* RESET_DOMAIN_3_SELFTEST_ENABLE_LAST_RUN_STATUS */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} SELFTEST_GPR_TOP_RESET_DOMAIN_SELFTEST_ENABLE_STATUS_REGISTER_tag;

struct SELFTEST_GPR_TOP_tag {
  SELFTEST_GPR_TOP_RESET_DOMAIN_SELFTEST_ENABLE_REGISTER_tag RESET_DOMAIN_SELFTEST_ENABLE_REGISTER; /* Reset Domain Self-test Enable */
  SELFTEST_GPR_TOP_RESET_DOMAIN_SELFTEST_ENABLE_STATUS_REGISTER_tag RESET_DOMAIN_SELFTEST_ENABLE_STATUS_REGISTER; /* Reset Domain Self-test Enable Status */
};


/* ============================================================================
   =============================== Module: SEMA42 =============================
   ============================================================================ */

typedef union SEMA42_GATE_union_tag {  /* Gate Register */
  vuint8_t R;
  struct {
    vuint8_t GTFSM:4;                  /* Gate finite state machine */
    vuint8_t _unused_4:4;              /* Reserved */
  } B;
} SEMA42_GATE_tag;

typedef union SEMA42_RSTGT_R_union_tag { /* Reset Gate Read */
  vuint16_t R;
  struct {
    vuint16_t RSTGTN:8;                /* Reset gate number */
    vuint16_t RSTGMS:4;                /* Reset gate domain */
    vuint16_t RSTGSM:2;                /* Reset gate finite state machine */
    vuint16_t ROZ:2;                   /* ROZ */
  } B;
} SEMA42_RSTGT_R_tag;

typedef union SEMA42_RSTGT_W_union_tag { /* Reset Gate Write */
  vuint16_t R;
  struct {
    vuint16_t RSTGTN:8;                /* Reset gate number */
    vuint16_t RSTGDP:8;                /* Reset gate data pattern */
  } B;
} SEMA42_RSTGT_W_tag;

typedef union SEMA42_RSTGT_union_tag {
  SEMA42_RSTGT_R_tag R;                /* Reset Gate Read */
  SEMA42_RSTGT_W_tag W;                /* Reset Gate Write */
} SEMA42_RSTGT_tag;

struct SEMA42_tag {
  SEMA42_GATE_tag GATE[16];            /* Gate Register */
  uint8_t SEMA42_reserved0[50];
  SEMA42_RSTGT_tag RSTGT;
};


/* ============================================================================
   =============================== Module: SERDES_0_GPR =======================
   ============================================================================ */

typedef union SERDES_0_GPR_PCIE_CONFIG_0_union_tag { /* Config_0_Register */
  vuint32_t R;
  struct {
    vuint32_t PARITY_CHK_MSTR_ARADDRP_ERR:1; /* parity_chk_mstr_araddrp_err */
    vuint32_t PARITY_CHK_MSTR_AWADDRP_ERR:1; /* parity_chk_mstr_awaddrp_err */
    vuint32_t PARITY_CHK_MSTR_WDATAP_ERR:1; /* parity_chk_mstr_wdatap_err */
    vuint32_t PARITY_CHK_SLV_RDATAP_ERR:1; /* parity_chk_slv_rdatap_err */
    vuint32_t RESERVED:28;             /* Reserved */
  } B;
} SERDES_0_GPR_PCIE_CONFIG_0_tag;

struct SERDES_0_GPR_tag {
  SERDES_0_GPR_PCIE_CONFIG_0_tag PCIE_CONFIG_0; /* Config_0_Register */
};


/* ============================================================================
   =============================== Module: SIUL2_0 ============================
   ============================================================================ */

typedef union SIUL2_0_MIDR1_union_tag { /* SIUL2 MCU ID Register #1 */
  vuint32_t R;
  struct {
    vuint32_t MINOR_MASK:4;            /* Minor Mask Revision */
    vuint32_t MAJOR_MASK:4;            /* Major Mask Revision */
    vuint32_t CC_REVISION:8;           /* CC Revision */
    vuint32_t PART_NO:10;              /* MCU Part Number */
    vuint32_t PRODUCT_LINE_LETTER:6;   /* Product Line Letter */
  } B;
} SIUL2_0_MIDR1_tag;

typedef union SIUL2_0_MIDR2_union_tag { /* SIUL2 MCU ID Register #2 */
  vuint32_t R;
  struct {
    vuint32_t FLASH_SIZE_CODE:8;       /* Flash Size Code */
    vuint32_t FLASH_SIZE_DATA:4;       /* Flash Size Data */
    vuint32_t FLASH_DATA:2;            /* Flash Data */
    vuint32_t FLASH_CODE:2;            /* Flash Code */
    vuint32_t FREQUENCY:4;             /* Frequency */
    vuint32_t PACKAGE:6;               /* Package */
    vuint32_t TEMPERATURE:3;           /* Temperature */
    vuint32_t TECHNOLOGY:3;            /* Technology */
  } B;
} SIUL2_0_MIDR2_tag;

typedef union SIUL2_0_DISR0_union_tag { /* SIUL2 DMA/Interrupt Status Flag Register0 */
  vuint32_t R;
  struct {
    vuint32_t EIF0:1;                  /* External Interrupt Status Flag 0 */
    vuint32_t EIF1:1;                  /* External Interrupt Status Flag 1 */
    vuint32_t EIF2:1;                  /* External Interrupt Status Flag 2 */
    vuint32_t EIF3:1;                  /* External Interrupt Status Flag 3 */
    vuint32_t EIF4:1;                  /* External Interrupt Status Flag 4 */
    vuint32_t EIF5:1;                  /* External Interrupt Status Flag 5 */
    vuint32_t EIF6:1;                  /* External Interrupt Status Flag 6 */
    vuint32_t EIF7:1;                  /* External Interrupt Status Flag 7 */
    vuint32_t EIF8:1;                  /* External Interrupt Status Flag 8 */
    vuint32_t EIF9:1;                  /* External Interrupt Status Flag 9 */
    vuint32_t EIF10:1;                 /* External Interrupt Status Flag 10 */
    vuint32_t EIF11:1;                 /* External Interrupt Status Flag 11 */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} SIUL2_0_DISR0_tag;

typedef union SIUL2_0_DIRER0_union_tag { /* SIUL2 DMA/Interrupt Request Enable Register0 */
  vuint32_t R;
  struct {
    vuint32_t EIRE0:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE1:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE2:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE3:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE4:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE5:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE6:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE7:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE8:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE9:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE10:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE11:1;                /* External Interrupt Request Enable */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} SIUL2_0_DIRER0_tag;

typedef union SIUL2_0_DIRSR0_union_tag { /* SIUL2 DMA/Interrupt Request Select Register0 */
  vuint32_t R;
  struct {
    vuint32_t DIRSR0:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR1:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR2:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR3:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR4:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR5:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR6:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR7:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR8:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR9:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR10:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR11:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} SIUL2_0_DIRSR0_tag;

typedef union SIUL2_0_IREER0_union_tag { /* SIUL2 Interrupt Rising-Edge Event Enable Register 0 */
  vuint32_t R;
  struct {
    vuint32_t IREE0:1;                 /* Enable rising-edge events to cause the IREE0 bit to be set. */
    vuint32_t IREE1:1;                 /* Enable rising-edge events to cause the IREE1 bit to be set. */
    vuint32_t IREE2:1;                 /* Enable rising-edge events to cause the IREE2 bit to be set. */
    vuint32_t IREE3:1;                 /* Enable rising-edge events to cause the IREE3 bit to be set. */
    vuint32_t IREE4:1;                 /* Enable rising-edge events to cause the IREE4 bit to be set. */
    vuint32_t IREE5:1;                 /* Enable rising-edge events to cause the IREE5 bit to be set. */
    vuint32_t IREE6:1;                 /* Enable rising-edge events to cause the IREE6 bit to be set. */
    vuint32_t IREE7:1;                 /* Enable rising-edge events to cause the IREE7 bit to be set. */
    vuint32_t IREE8:1;                 /* Enable rising-edge events to cause the IREE8 bit to be set. */
    vuint32_t IREE9:1;                 /* Enable rising-edge events to cause the IREE9 bit to be set. */
    vuint32_t IREE10:1;                /* Enable rising-edge events to cause the IREE10 bit to be set. */
    vuint32_t IREE11:1;                /* Enable rising-edge events to cause the IREE11 bit to be set. */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} SIUL2_0_IREER0_tag;

typedef union SIUL2_0_IFEER0_union_tag { /* SIUL2 Interrupt Falling-Edge Event Enable Register 0 */
  vuint32_t R;
  struct {
    vuint32_t IFEE0:1;                 /* Enable falling-edge events to cause the IFEE0 bit to be set. */
    vuint32_t IFEE1:1;                 /* Enable falling-edge events to cause the IFEE1 bit to be set. */
    vuint32_t IFEE2:1;                 /* Enable falling-edge events to cause the IFEE2 bit to be set. */
    vuint32_t IFEE3:1;                 /* Enable falling-edge events to cause the IFEE3 bit to be set. */
    vuint32_t IFEE4:1;                 /* Enable falling-edge events to cause the IFEE4 bit to be set. */
    vuint32_t IFEE5:1;                 /* Enable falling-edge events to cause the IFEE5 bit to be set. */
    vuint32_t IFEE6:1;                 /* Enable falling-edge events to cause the IFEE6 bit to be set. */
    vuint32_t IFEE7:1;                 /* Enable falling-edge events to cause the IFEE7 bit to be set. */
    vuint32_t IFEE8:1;                 /* Enable falling-edge events to cause the IFEE8 bit to be set. */
    vuint32_t IFEE9:1;                 /* Enable falling-edge events to cause the IFEE9 bit to be set. */
    vuint32_t IFEE10:1;                /* Enable falling-edge events to cause the IFEE10 bit to be set. */
    vuint32_t IFEE11:1;                /* Enable falling-edge events to cause the IFEE11 bit to be set. */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} SIUL2_0_IFEER0_tag;

typedef union SIUL2_0_IFER0_union_tag { /* SIUL2 Interrupt Filter Enable Register 0 */
  vuint32_t R;
  struct {
    vuint32_t IFE0:1;                  /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE1:1;                  /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE2:1;                  /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE3:1;                  /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE4:1;                  /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE5:1;                  /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE6:1;                  /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE7:1;                  /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE8:1;                  /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE9:1;                  /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE10:1;                 /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE11:1;                 /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} SIUL2_0_IFER0_tag;

typedef union SIUL2_0_IFMCR_union_tag { /* SIUL2 Interrupt Filter Maximum Counter Register */
  vuint32_t R;
  struct {
    vuint32_t MAXCNT:4;                /* Maximum Interrupt Filter Counter setting */
    vuint32_t _unused_4:28;            /* Reserved */
  } B;
} SIUL2_0_IFMCR_tag;

typedef union SIUL2_0_IFCPR_union_tag { /* SIUL2 Interrupt Filter Clock Prescaler Register */
  vuint32_t R;
  struct {
    vuint32_t IFCP:4;                  /* Interrupt Filter Clock Prescaler setting */
    vuint32_t _unused_4:28;            /* Reserved */
  } B;
} SIUL2_0_IFCPR_tag;

typedef union SIUL2_0_MSCR_union_tag { /* SIUL2 Multiplexed Signal Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t SSS:3;                   /* Source Signal Select */
    vuint32_t _unused_3:2;             /* Reserved */
    vuint32_t SMC:1;                   /* Safe Mode Control */
    vuint32_t _unused_6:4;             /* Reserved */
    vuint32_t RCVR:1;                  /* Receiver Select */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t PUS:1;                   /* Pull Select */
    vuint32_t PUE:1;                   /* Pull Enable */
    vuint32_t SRE:3;                   /* Slew Rate Control */
    vuint32_t _unused_17:2;            /* Reserved */
    vuint32_t IBE:1;                   /* Input Buffer Enable */
    vuint32_t ODE:1;                   /* Open Drain Enable */
    vuint32_t OBE:1;                   /* GPIO Output Buffer Enable */
    vuint32_t _unused_22:10;           /* Reserved */
  } B;
} SIUL2_0_MSCR_tag;

typedef union SIUL2_0_IMCR_union_tag { /* SIUL2 Input Multiplexed Signal Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t SSS:3;                   /* Source Signal Select */
    vuint32_t _unused_3:29;            /* Reserved */
  } B;
} SIUL2_0_IMCR_tag;

typedef union SIUL2_0_GPDO3_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO3_tag;

typedef union SIUL2_0_GPDO2_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO2_tag;

typedef union SIUL2_0_GPDO1_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO1_tag;

typedef union SIUL2_0_GPDO0_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO0_tag;

typedef union SIUL2_0_GPDO7_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO7_tag;

typedef union SIUL2_0_GPDO6_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO6_tag;

typedef union SIUL2_0_GPDO5_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO5_tag;

typedef union SIUL2_0_GPDO4_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO4_tag;

typedef union SIUL2_0_GPDO11_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO11_tag;

typedef union SIUL2_0_GPDO10_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO10_tag;

typedef union SIUL2_0_GPDO9_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO9_tag;

typedef union SIUL2_0_GPDO8_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO8_tag;

typedef union SIUL2_0_GPDO15_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO15_tag;

typedef union SIUL2_0_GPDO14_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO14_tag;

typedef union SIUL2_0_GPDO13_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO13_tag;

typedef union SIUL2_0_GPDO12_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO12_tag;

typedef union SIUL2_0_GPDO19_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO19_tag;

typedef union SIUL2_0_GPDO18_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO18_tag;

typedef union SIUL2_0_GPDO17_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO17_tag;

typedef union SIUL2_0_GPDO16_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO16_tag;

typedef union SIUL2_0_GPDO23_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO23_tag;

typedef union SIUL2_0_GPDO22_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO22_tag;

typedef union SIUL2_0_GPDO21_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO21_tag;

typedef union SIUL2_0_GPDO20_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO20_tag;

typedef union SIUL2_0_GPDO27_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO27_tag;

typedef union SIUL2_0_GPDO26_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO26_tag;

typedef union SIUL2_0_GPDO25_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO25_tag;

typedef union SIUL2_0_GPDO24_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO24_tag;

typedef union SIUL2_0_GPDO31_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO31_tag;

typedef union SIUL2_0_GPDO30_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO30_tag;

typedef union SIUL2_0_GPDO29_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO29_tag;

typedef union SIUL2_0_GPDO28_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO28_tag;

typedef union SIUL2_0_GPDO35_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO35_tag;

typedef union SIUL2_0_GPDO34_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO34_tag;

typedef union SIUL2_0_GPDO33_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO33_tag;

typedef union SIUL2_0_GPDO32_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO32_tag;

typedef union SIUL2_0_GPDO39_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO39_tag;

typedef union SIUL2_0_GPDO38_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO38_tag;

typedef union SIUL2_0_GPDO37_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO37_tag;

typedef union SIUL2_0_GPDO36_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO36_tag;

typedef union SIUL2_0_GPDO43_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO43_tag;

typedef union SIUL2_0_GPDO42_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO42_tag;

typedef union SIUL2_0_GPDO41_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO41_tag;

typedef union SIUL2_0_GPDO40_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO40_tag;

typedef union SIUL2_0_GPDO47_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO47_tag;

typedef union SIUL2_0_GPDO46_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO46_tag;

typedef union SIUL2_0_GPDO45_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO45_tag;

typedef union SIUL2_0_GPDO44_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO44_tag;

typedef union SIUL2_0_GPDO51_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO51_tag;

typedef union SIUL2_0_GPDO50_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO50_tag;

typedef union SIUL2_0_GPDO49_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO49_tag;

typedef union SIUL2_0_GPDO48_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO48_tag;

typedef union SIUL2_0_GPDO55_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO55_tag;

typedef union SIUL2_0_GPDO54_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO54_tag;

typedef union SIUL2_0_GPDO53_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO53_tag;

typedef union SIUL2_0_GPDO52_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO52_tag;

typedef union SIUL2_0_GPDO59_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO59_tag;

typedef union SIUL2_0_GPDO58_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO58_tag;

typedef union SIUL2_0_GPDO57_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO57_tag;

typedef union SIUL2_0_GPDO56_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO56_tag;

typedef union SIUL2_0_GPDO63_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO63_tag;

typedef union SIUL2_0_GPDO62_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO62_tag;

typedef union SIUL2_0_GPDO61_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO61_tag;

typedef union SIUL2_0_GPDO60_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO60_tag;

typedef union SIUL2_0_GPDO67_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO67_tag;

typedef union SIUL2_0_GPDO66_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO66_tag;

typedef union SIUL2_0_GPDO65_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO65_tag;

typedef union SIUL2_0_GPDO64_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO64_tag;

typedef union SIUL2_0_GPDO71_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO71_tag;

typedef union SIUL2_0_GPDO70_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO70_tag;

typedef union SIUL2_0_GPDO69_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO69_tag;

typedef union SIUL2_0_GPDO68_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO68_tag;

typedef union SIUL2_0_GPDO75_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO75_tag;

typedef union SIUL2_0_GPDO74_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO74_tag;

typedef union SIUL2_0_GPDO73_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO73_tag;

typedef union SIUL2_0_GPDO72_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO72_tag;

typedef union SIUL2_0_GPDO79_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO79_tag;

typedef union SIUL2_0_GPDO78_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO78_tag;

typedef union SIUL2_0_GPDO77_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO77_tag;

typedef union SIUL2_0_GPDO76_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO76_tag;

typedef union SIUL2_0_GPDO83_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO83_tag;

typedef union SIUL2_0_GPDO82_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO82_tag;

typedef union SIUL2_0_GPDO81_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO81_tag;

typedef union SIUL2_0_GPDO80_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO80_tag;

typedef union SIUL2_0_GPDO87_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO87_tag;

typedef union SIUL2_0_GPDO86_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO86_tag;

typedef union SIUL2_0_GPDO85_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO85_tag;

typedef union SIUL2_0_GPDO84_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO84_tag;

typedef union SIUL2_0_GPDO91_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO91_tag;

typedef union SIUL2_0_GPDO90_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO90_tag;

typedef union SIUL2_0_GPDO89_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO89_tag;

typedef union SIUL2_0_GPDO88_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO88_tag;

typedef union SIUL2_0_GPDO95_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO95_tag;

typedef union SIUL2_0_GPDO94_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO94_tag;

typedef union SIUL2_0_GPDO93_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO93_tag;

typedef union SIUL2_0_GPDO92_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO92_tag;

typedef union SIUL2_0_GPDO99_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO99_tag;

typedef union SIUL2_0_GPDO98_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO98_tag;

typedef union SIUL2_0_GPDO97_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO97_tag;

typedef union SIUL2_0_GPDO96_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO96_tag;

typedef union SIUL2_0_GPDO101_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO101_tag;

typedef union SIUL2_0_GPDO100_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDO100_tag;

typedef union SIUL2_0_GPDI3_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI3_tag;

typedef union SIUL2_0_GPDI2_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI2_tag;

typedef union SIUL2_0_GPDI1_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI1_tag;

typedef union SIUL2_0_GPDI0_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI0_tag;

typedef union SIUL2_0_GPDI7_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI7_tag;

typedef union SIUL2_0_GPDI6_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI6_tag;

typedef union SIUL2_0_GPDI5_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI5_tag;

typedef union SIUL2_0_GPDI4_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI4_tag;

typedef union SIUL2_0_GPDI11_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI11_tag;

typedef union SIUL2_0_GPDI10_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI10_tag;

typedef union SIUL2_0_GPDI9_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI9_tag;

typedef union SIUL2_0_GPDI8_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI8_tag;

typedef union SIUL2_0_GPDI15_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI15_tag;

typedef union SIUL2_0_GPDI14_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI14_tag;

typedef union SIUL2_0_GPDI13_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI13_tag;

typedef union SIUL2_0_GPDI12_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI12_tag;

typedef union SIUL2_0_GPDI19_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI19_tag;

typedef union SIUL2_0_GPDI18_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI18_tag;

typedef union SIUL2_0_GPDI17_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI17_tag;

typedef union SIUL2_0_GPDI16_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI16_tag;

typedef union SIUL2_0_GPDI23_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI23_tag;

typedef union SIUL2_0_GPDI22_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI22_tag;

typedef union SIUL2_0_GPDI21_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI21_tag;

typedef union SIUL2_0_GPDI20_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI20_tag;

typedef union SIUL2_0_GPDI27_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI27_tag;

typedef union SIUL2_0_GPDI26_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI26_tag;

typedef union SIUL2_0_GPDI25_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI25_tag;

typedef union SIUL2_0_GPDI24_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI24_tag;

typedef union SIUL2_0_GPDI31_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI31_tag;

typedef union SIUL2_0_GPDI30_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI30_tag;

typedef union SIUL2_0_GPDI29_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI29_tag;

typedef union SIUL2_0_GPDI28_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI28_tag;

typedef union SIUL2_0_GPDI35_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI35_tag;

typedef union SIUL2_0_GPDI34_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI34_tag;

typedef union SIUL2_0_GPDI33_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI33_tag;

typedef union SIUL2_0_GPDI32_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI32_tag;

typedef union SIUL2_0_GPDI39_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI39_tag;

typedef union SIUL2_0_GPDI38_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI38_tag;

typedef union SIUL2_0_GPDI37_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI37_tag;

typedef union SIUL2_0_GPDI36_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI36_tag;

typedef union SIUL2_0_GPDI43_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI43_tag;

typedef union SIUL2_0_GPDI42_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI42_tag;

typedef union SIUL2_0_GPDI41_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI41_tag;

typedef union SIUL2_0_GPDI40_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI40_tag;

typedef union SIUL2_0_GPDI47_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI47_tag;

typedef union SIUL2_0_GPDI46_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI46_tag;

typedef union SIUL2_0_GPDI45_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI45_tag;

typedef union SIUL2_0_GPDI44_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI44_tag;

typedef union SIUL2_0_GPDI51_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI51_tag;

typedef union SIUL2_0_GPDI50_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI50_tag;

typedef union SIUL2_0_GPDI49_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI49_tag;

typedef union SIUL2_0_GPDI48_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI48_tag;

typedef union SIUL2_0_GPDI55_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI55_tag;

typedef union SIUL2_0_GPDI54_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI54_tag;

typedef union SIUL2_0_GPDI53_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI53_tag;

typedef union SIUL2_0_GPDI52_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI52_tag;

typedef union SIUL2_0_GPDI59_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI59_tag;

typedef union SIUL2_0_GPDI58_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI58_tag;

typedef union SIUL2_0_GPDI57_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI57_tag;

typedef union SIUL2_0_GPDI56_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI56_tag;

typedef union SIUL2_0_GPDI63_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI63_tag;

typedef union SIUL2_0_GPDI62_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI62_tag;

typedef union SIUL2_0_GPDI61_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI61_tag;

typedef union SIUL2_0_GPDI60_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI60_tag;

typedef union SIUL2_0_GPDI67_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI67_tag;

typedef union SIUL2_0_GPDI66_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI66_tag;

typedef union SIUL2_0_GPDI65_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI65_tag;

typedef union SIUL2_0_GPDI64_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI64_tag;

typedef union SIUL2_0_GPDI71_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI71_tag;

typedef union SIUL2_0_GPDI70_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI70_tag;

typedef union SIUL2_0_GPDI69_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI69_tag;

typedef union SIUL2_0_GPDI68_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI68_tag;

typedef union SIUL2_0_GPDI75_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI75_tag;

typedef union SIUL2_0_GPDI74_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI74_tag;

typedef union SIUL2_0_GPDI73_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI73_tag;

typedef union SIUL2_0_GPDI72_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI72_tag;

typedef union SIUL2_0_GPDI79_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI79_tag;

typedef union SIUL2_0_GPDI78_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI78_tag;

typedef union SIUL2_0_GPDI77_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI77_tag;

typedef union SIUL2_0_GPDI76_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI76_tag;

typedef union SIUL2_0_GPDI83_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI83_tag;

typedef union SIUL2_0_GPDI82_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI82_tag;

typedef union SIUL2_0_GPDI81_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI81_tag;

typedef union SIUL2_0_GPDI80_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI80_tag;

typedef union SIUL2_0_GPDI87_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI87_tag;

typedef union SIUL2_0_GPDI86_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI86_tag;

typedef union SIUL2_0_GPDI85_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI85_tag;

typedef union SIUL2_0_GPDI84_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI84_tag;

typedef union SIUL2_0_GPDI91_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI91_tag;

typedef union SIUL2_0_GPDI90_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI90_tag;

typedef union SIUL2_0_GPDI89_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI89_tag;

typedef union SIUL2_0_GPDI88_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI88_tag;

typedef union SIUL2_0_GPDI95_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI95_tag;

typedef union SIUL2_0_GPDI94_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI94_tag;

typedef union SIUL2_0_GPDI93_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI93_tag;

typedef union SIUL2_0_GPDI92_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI92_tag;

typedef union SIUL2_0_GPDI99_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI99_tag;

typedef union SIUL2_0_GPDI98_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI98_tag;

typedef union SIUL2_0_GPDI97_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI97_tag;

typedef union SIUL2_0_GPDI96_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI96_tag;

typedef union SIUL2_0_GPDI101_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI101_tag;

typedef union SIUL2_0_GPDI100_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_0_GPDI100_tag;

typedef union SIUL2_0_PGPDO1_union_tag { /* SIUL2 Parallel GPIO Pad Data Out Register */
  vuint16_t R;
  struct {
    vuint16_t PPDO0:1;                 /* Parallel Pad Data Out 0 */
    vuint16_t PPDO1:1;                 /* Parallel Pad Data Out 1 */
    vuint16_t PPDO2:1;                 /* Parallel Pad Data Out 2 */
    vuint16_t PPDO3:1;                 /* Parallel Pad Data Out 3 */
    vuint16_t PPDO4:1;                 /* Parallel Pad Data Out 4 */
    vuint16_t PPDO5:1;                 /* Parallel Pad Data Out 5 */
    vuint16_t PPDO6:1;                 /* Parallel Pad Data Out 6 */
    vuint16_t PPDO7:1;                 /* Parallel Pad Data Out 7 */
    vuint16_t PPDO8:1;                 /* Parallel Pad Data Out 8 */
    vuint16_t PPDO9:1;                 /* Parallel Pad Data Out 9 */
    vuint16_t PPDO10:1;                /* Parallel Pad Data Out 10 */
    vuint16_t PPDO11:1;                /* Parallel Pad Data Out 11 */
    vuint16_t PPDO12:1;                /* Parallel Pad Data Out 12 */
    vuint16_t PPDO13:1;                /* Parallel Pad Data Out 13 */
    vuint16_t PPDO14:1;                /* Parallel Pad Data Out 14 */
    vuint16_t PPDO15:1;                /* Parallel Pad Data Out 15 */
  } B;
} SIUL2_0_PGPDO1_tag;

typedef union SIUL2_0_PGPDO0_union_tag { /* SIUL2 Parallel GPIO Pad Data Out Register */
  vuint16_t R;
  struct {
    vuint16_t PPDO0:1;                 /* Parallel Pad Data Out 0 */
    vuint16_t PPDO1:1;                 /* Parallel Pad Data Out 1 */
    vuint16_t PPDO2:1;                 /* Parallel Pad Data Out 2 */
    vuint16_t PPDO3:1;                 /* Parallel Pad Data Out 3 */
    vuint16_t PPDO4:1;                 /* Parallel Pad Data Out 4 */
    vuint16_t PPDO5:1;                 /* Parallel Pad Data Out 5 */
    vuint16_t PPDO6:1;                 /* Parallel Pad Data Out 6 */
    vuint16_t PPDO7:1;                 /* Parallel Pad Data Out 7 */
    vuint16_t PPDO8:1;                 /* Parallel Pad Data Out 8 */
    vuint16_t PPDO9:1;                 /* Parallel Pad Data Out 9 */
    vuint16_t PPDO10:1;                /* Parallel Pad Data Out 10 */
    vuint16_t PPDO11:1;                /* Parallel Pad Data Out 11 */
    vuint16_t PPDO12:1;                /* Parallel Pad Data Out 12 */
    vuint16_t PPDO13:1;                /* Parallel Pad Data Out 13 */
    vuint16_t PPDO14:1;                /* Parallel Pad Data Out 14 */
    vuint16_t PPDO15:1;                /* Parallel Pad Data Out 15 */
  } B;
} SIUL2_0_PGPDO0_tag;

typedef union SIUL2_0_PGPDO3_union_tag { /* SIUL2 Parallel GPIO Pad Data Out Register */
  vuint16_t R;
  struct {
    vuint16_t PPDO0:1;                 /* Parallel Pad Data Out 0 */
    vuint16_t PPDO1:1;                 /* Parallel Pad Data Out 1 */
    vuint16_t PPDO2:1;                 /* Parallel Pad Data Out 2 */
    vuint16_t PPDO3:1;                 /* Parallel Pad Data Out 3 */
    vuint16_t PPDO4:1;                 /* Parallel Pad Data Out 4 */
    vuint16_t PPDO5:1;                 /* Parallel Pad Data Out 5 */
    vuint16_t PPDO6:1;                 /* Parallel Pad Data Out 6 */
    vuint16_t PPDO7:1;                 /* Parallel Pad Data Out 7 */
    vuint16_t PPDO8:1;                 /* Parallel Pad Data Out 8 */
    vuint16_t PPDO9:1;                 /* Parallel Pad Data Out 9 */
    vuint16_t PPDO10:1;                /* Parallel Pad Data Out 10 */
    vuint16_t PPDO11:1;                /* Parallel Pad Data Out 11 */
    vuint16_t PPDO12:1;                /* Parallel Pad Data Out 12 */
    vuint16_t PPDO13:1;                /* Parallel Pad Data Out 13 */
    vuint16_t PPDO14:1;                /* Parallel Pad Data Out 14 */
    vuint16_t PPDO15:1;                /* Parallel Pad Data Out 15 */
  } B;
} SIUL2_0_PGPDO3_tag;

typedef union SIUL2_0_PGPDO2_union_tag { /* SIUL2 Parallel GPIO Pad Data Out Register */
  vuint16_t R;
  struct {
    vuint16_t PPDO0:1;                 /* Parallel Pad Data Out 0 */
    vuint16_t PPDO1:1;                 /* Parallel Pad Data Out 1 */
    vuint16_t PPDO2:1;                 /* Parallel Pad Data Out 2 */
    vuint16_t PPDO3:1;                 /* Parallel Pad Data Out 3 */
    vuint16_t PPDO4:1;                 /* Parallel Pad Data Out 4 */
    vuint16_t PPDO5:1;                 /* Parallel Pad Data Out 5 */
    vuint16_t PPDO6:1;                 /* Parallel Pad Data Out 6 */
    vuint16_t PPDO7:1;                 /* Parallel Pad Data Out 7 */
    vuint16_t PPDO8:1;                 /* Parallel Pad Data Out 8 */
    vuint16_t PPDO9:1;                 /* Parallel Pad Data Out 9 */
    vuint16_t PPDO10:1;                /* Parallel Pad Data Out 10 */
    vuint16_t PPDO11:1;                /* Parallel Pad Data Out 11 */
    vuint16_t PPDO12:1;                /* Parallel Pad Data Out 12 */
    vuint16_t PPDO13:1;                /* Parallel Pad Data Out 13 */
    vuint16_t PPDO14:1;                /* Parallel Pad Data Out 14 */
    vuint16_t PPDO15:1;                /* Parallel Pad Data Out 15 */
  } B;
} SIUL2_0_PGPDO2_tag;

typedef union SIUL2_0_PGPDO5_union_tag { /* SIUL2 Parallel GPIO Pad Data Out Register */
  vuint16_t R;
  struct {
    vuint16_t PPDO0:1;                 /* Parallel Pad Data Out 0 */
    vuint16_t PPDO1:1;                 /* Parallel Pad Data Out 1 */
    vuint16_t PPDO2:1;                 /* Parallel Pad Data Out 2 */
    vuint16_t PPDO3:1;                 /* Parallel Pad Data Out 3 */
    vuint16_t PPDO4:1;                 /* Parallel Pad Data Out 4 */
    vuint16_t PPDO5:1;                 /* Parallel Pad Data Out 5 */
    vuint16_t PPDO6:1;                 /* Parallel Pad Data Out 6 */
    vuint16_t PPDO7:1;                 /* Parallel Pad Data Out 7 */
    vuint16_t PPDO8:1;                 /* Parallel Pad Data Out 8 */
    vuint16_t PPDO9:1;                 /* Parallel Pad Data Out 9 */
    vuint16_t PPDO10:1;                /* Parallel Pad Data Out 10 */
    vuint16_t PPDO11:1;                /* Parallel Pad Data Out 11 */
    vuint16_t PPDO12:1;                /* Parallel Pad Data Out 12 */
    vuint16_t PPDO13:1;                /* Parallel Pad Data Out 13 */
    vuint16_t PPDO14:1;                /* Parallel Pad Data Out 14 */
    vuint16_t PPDO15:1;                /* Parallel Pad Data Out 15 */
  } B;
} SIUL2_0_PGPDO5_tag;

typedef union SIUL2_0_PGPDO4_union_tag { /* SIUL2 Parallel GPIO Pad Data Out Register */
  vuint16_t R;
  struct {
    vuint16_t PPDO0:1;                 /* Parallel Pad Data Out 0 */
    vuint16_t PPDO1:1;                 /* Parallel Pad Data Out 1 */
    vuint16_t PPDO2:1;                 /* Parallel Pad Data Out 2 */
    vuint16_t PPDO3:1;                 /* Parallel Pad Data Out 3 */
    vuint16_t PPDO4:1;                 /* Parallel Pad Data Out 4 */
    vuint16_t PPDO5:1;                 /* Parallel Pad Data Out 5 */
    vuint16_t PPDO6:1;                 /* Parallel Pad Data Out 6 */
    vuint16_t PPDO7:1;                 /* Parallel Pad Data Out 7 */
    vuint16_t PPDO8:1;                 /* Parallel Pad Data Out 8 */
    vuint16_t PPDO9:1;                 /* Parallel Pad Data Out 9 */
    vuint16_t PPDO10:1;                /* Parallel Pad Data Out 10 */
    vuint16_t PPDO11:1;                /* Parallel Pad Data Out 11 */
    vuint16_t PPDO12:1;                /* Parallel Pad Data Out 12 */
    vuint16_t PPDO13:1;                /* Parallel Pad Data Out 13 */
    vuint16_t PPDO14:1;                /* Parallel Pad Data Out 14 */
    vuint16_t PPDO15:1;                /* Parallel Pad Data Out 15 */
  } B;
} SIUL2_0_PGPDO4_tag;

typedef union SIUL2_0_PGPDO6_union_tag { /* SIUL2 Parallel GPIO Pad Data Out Register */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:1;             /* Reserved */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t _unused_3:1;             /* Reserved */
    vuint16_t _unused_4:1;             /* Reserved */
    vuint16_t _unused_5:1;             /* Reserved */
    vuint16_t _unused_6:1;             /* Reserved */
    vuint16_t _unused_7:1;             /* Reserved */
    vuint16_t _unused_8:1;             /* Reserved */
    vuint16_t _unused_9:1;             /* Reserved */
    vuint16_t PPDO10:1;                /* Parallel Pad Data Out 10 */
    vuint16_t PPDO11:1;                /* Parallel Pad Data Out 11 */
    vuint16_t PPDO12:1;                /* Parallel Pad Data Out 12 */
    vuint16_t PPDO13:1;                /* Parallel Pad Data Out 13 */
    vuint16_t PPDO14:1;                /* Parallel Pad Data Out 14 */
    vuint16_t PPDO15:1;                /* Parallel Pad Data Out 15 */
  } B;
} SIUL2_0_PGPDO6_tag;

typedef union SIUL2_0_PGPDI1_union_tag { /* SIUL2 Parallel GPIO Pad Data In Register */
  vuint16_t R;
  struct {
    vuint16_t PPDI0:1;                 /* Parallel Pad Data In 0 */
    vuint16_t PPDI1:1;                 /* Parallel Pad Data In 1 */
    vuint16_t PPDI2:1;                 /* Parallel Pad Data In 2 */
    vuint16_t PPDI3:1;                 /* Parallel Pad Data In 3 */
    vuint16_t PPDI4:1;                 /* Parallel Pad Data In 4 */
    vuint16_t PPDI5:1;                 /* Parallel Pad Data In 5 */
    vuint16_t PPDI6:1;                 /* Parallel Pad Data In 6 */
    vuint16_t PPDI7:1;                 /* Parallel Pad Data In 7 */
    vuint16_t PPDI8:1;                 /* Parallel Pad Data In 8 */
    vuint16_t PPDI9:1;                 /* Parallel Pad Data In 9 */
    vuint16_t PPDI10:1;                /* Parallel Pad Data In 10 */
    vuint16_t PPDI11:1;                /* Parallel Pad Data In 11 */
    vuint16_t PPDI12:1;                /* Parallel Pad Data In 12 */
    vuint16_t PPDI13:1;                /* Parallel Pad Data In 13 */
    vuint16_t PPDI14:1;                /* Parallel Pad Data In 14 */
    vuint16_t PPDI15:1;                /* Parallel Pad Data In 15 */
  } B;
} SIUL2_0_PGPDI1_tag;

typedef union SIUL2_0_PGPDI0_union_tag { /* SIUL2 Parallel GPIO Pad Data In Register */
  vuint16_t R;
  struct {
    vuint16_t PPDI0:1;                 /* Parallel Pad Data In 0 */
    vuint16_t PPDI1:1;                 /* Parallel Pad Data In 1 */
    vuint16_t PPDI2:1;                 /* Parallel Pad Data In 2 */
    vuint16_t PPDI3:1;                 /* Parallel Pad Data In 3 */
    vuint16_t PPDI4:1;                 /* Parallel Pad Data In 4 */
    vuint16_t PPDI5:1;                 /* Parallel Pad Data In 5 */
    vuint16_t PPDI6:1;                 /* Parallel Pad Data In 6 */
    vuint16_t PPDI7:1;                 /* Parallel Pad Data In 7 */
    vuint16_t PPDI8:1;                 /* Parallel Pad Data In 8 */
    vuint16_t PPDI9:1;                 /* Parallel Pad Data In 9 */
    vuint16_t PPDI10:1;                /* Parallel Pad Data In 10 */
    vuint16_t PPDI11:1;                /* Parallel Pad Data In 11 */
    vuint16_t PPDI12:1;                /* Parallel Pad Data In 12 */
    vuint16_t PPDI13:1;                /* Parallel Pad Data In 13 */
    vuint16_t PPDI14:1;                /* Parallel Pad Data In 14 */
    vuint16_t PPDI15:1;                /* Parallel Pad Data In 15 */
  } B;
} SIUL2_0_PGPDI0_tag;

typedef union SIUL2_0_PGPDI3_union_tag { /* SIUL2 Parallel GPIO Pad Data In Register */
  vuint16_t R;
  struct {
    vuint16_t PPDI0:1;                 /* Parallel Pad Data In 0 */
    vuint16_t PPDI1:1;                 /* Parallel Pad Data In 1 */
    vuint16_t PPDI2:1;                 /* Parallel Pad Data In 2 */
    vuint16_t PPDI3:1;                 /* Parallel Pad Data In 3 */
    vuint16_t PPDI4:1;                 /* Parallel Pad Data In 4 */
    vuint16_t PPDI5:1;                 /* Parallel Pad Data In 5 */
    vuint16_t PPDI6:1;                 /* Parallel Pad Data In 6 */
    vuint16_t PPDI7:1;                 /* Parallel Pad Data In 7 */
    vuint16_t PPDI8:1;                 /* Parallel Pad Data In 8 */
    vuint16_t PPDI9:1;                 /* Parallel Pad Data In 9 */
    vuint16_t PPDI10:1;                /* Parallel Pad Data In 10 */
    vuint16_t PPDI11:1;                /* Parallel Pad Data In 11 */
    vuint16_t PPDI12:1;                /* Parallel Pad Data In 12 */
    vuint16_t PPDI13:1;                /* Parallel Pad Data In 13 */
    vuint16_t PPDI14:1;                /* Parallel Pad Data In 14 */
    vuint16_t PPDI15:1;                /* Parallel Pad Data In 15 */
  } B;
} SIUL2_0_PGPDI3_tag;

typedef union SIUL2_0_PGPDI2_union_tag { /* SIUL2 Parallel GPIO Pad Data In Register */
  vuint16_t R;
  struct {
    vuint16_t PPDI0:1;                 /* Parallel Pad Data In 0 */
    vuint16_t PPDI1:1;                 /* Parallel Pad Data In 1 */
    vuint16_t PPDI2:1;                 /* Parallel Pad Data In 2 */
    vuint16_t PPDI3:1;                 /* Parallel Pad Data In 3 */
    vuint16_t PPDI4:1;                 /* Parallel Pad Data In 4 */
    vuint16_t PPDI5:1;                 /* Parallel Pad Data In 5 */
    vuint16_t PPDI6:1;                 /* Parallel Pad Data In 6 */
    vuint16_t PPDI7:1;                 /* Parallel Pad Data In 7 */
    vuint16_t PPDI8:1;                 /* Parallel Pad Data In 8 */
    vuint16_t PPDI9:1;                 /* Parallel Pad Data In 9 */
    vuint16_t PPDI10:1;                /* Parallel Pad Data In 10 */
    vuint16_t PPDI11:1;                /* Parallel Pad Data In 11 */
    vuint16_t PPDI12:1;                /* Parallel Pad Data In 12 */
    vuint16_t PPDI13:1;                /* Parallel Pad Data In 13 */
    vuint16_t PPDI14:1;                /* Parallel Pad Data In 14 */
    vuint16_t PPDI15:1;                /* Parallel Pad Data In 15 */
  } B;
} SIUL2_0_PGPDI2_tag;

typedef union SIUL2_0_PGPDI5_union_tag { /* SIUL2 Parallel GPIO Pad Data In Register */
  vuint16_t R;
  struct {
    vuint16_t PPDI0:1;                 /* Parallel Pad Data In 0 */
    vuint16_t PPDI1:1;                 /* Parallel Pad Data In 1 */
    vuint16_t PPDI2:1;                 /* Parallel Pad Data In 2 */
    vuint16_t PPDI3:1;                 /* Parallel Pad Data In 3 */
    vuint16_t PPDI4:1;                 /* Parallel Pad Data In 4 */
    vuint16_t PPDI5:1;                 /* Parallel Pad Data In 5 */
    vuint16_t PPDI6:1;                 /* Parallel Pad Data In 6 */
    vuint16_t PPDI7:1;                 /* Parallel Pad Data In 7 */
    vuint16_t PPDI8:1;                 /* Parallel Pad Data In 8 */
    vuint16_t PPDI9:1;                 /* Parallel Pad Data In 9 */
    vuint16_t PPDI10:1;                /* Parallel Pad Data In 10 */
    vuint16_t PPDI11:1;                /* Parallel Pad Data In 11 */
    vuint16_t PPDI12:1;                /* Parallel Pad Data In 12 */
    vuint16_t PPDI13:1;                /* Parallel Pad Data In 13 */
    vuint16_t PPDI14:1;                /* Parallel Pad Data In 14 */
    vuint16_t PPDI15:1;                /* Parallel Pad Data In 15 */
  } B;
} SIUL2_0_PGPDI5_tag;

typedef union SIUL2_0_PGPDI4_union_tag { /* SIUL2 Parallel GPIO Pad Data In Register */
  vuint16_t R;
  struct {
    vuint16_t PPDI0:1;                 /* Parallel Pad Data In 0 */
    vuint16_t PPDI1:1;                 /* Parallel Pad Data In 1 */
    vuint16_t PPDI2:1;                 /* Parallel Pad Data In 2 */
    vuint16_t PPDI3:1;                 /* Parallel Pad Data In 3 */
    vuint16_t PPDI4:1;                 /* Parallel Pad Data In 4 */
    vuint16_t PPDI5:1;                 /* Parallel Pad Data In 5 */
    vuint16_t PPDI6:1;                 /* Parallel Pad Data In 6 */
    vuint16_t PPDI7:1;                 /* Parallel Pad Data In 7 */
    vuint16_t PPDI8:1;                 /* Parallel Pad Data In 8 */
    vuint16_t PPDI9:1;                 /* Parallel Pad Data In 9 */
    vuint16_t PPDI10:1;                /* Parallel Pad Data In 10 */
    vuint16_t PPDI11:1;                /* Parallel Pad Data In 11 */
    vuint16_t PPDI12:1;                /* Parallel Pad Data In 12 */
    vuint16_t PPDI13:1;                /* Parallel Pad Data In 13 */
    vuint16_t PPDI14:1;                /* Parallel Pad Data In 14 */
    vuint16_t PPDI15:1;                /* Parallel Pad Data In 15 */
  } B;
} SIUL2_0_PGPDI4_tag;

typedef union SIUL2_0_PGPDI6_union_tag { /* SIUL2 Parallel GPIO Pad Data In Register */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:1;             /* Reserved */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t _unused_3:1;             /* Reserved */
    vuint16_t _unused_4:1;             /* Reserved */
    vuint16_t _unused_5:1;             /* Reserved */
    vuint16_t _unused_6:1;             /* Reserved */
    vuint16_t _unused_7:1;             /* Reserved */
    vuint16_t _unused_8:1;             /* Reserved */
    vuint16_t _unused_9:1;             /* Reserved */
    vuint16_t PPDI10:1;                /* Parallel Pad Data In 10 */
    vuint16_t PPDI11:1;                /* Parallel Pad Data In 11 */
    vuint16_t PPDI12:1;                /* Parallel Pad Data In 12 */
    vuint16_t PPDI13:1;                /* Parallel Pad Data In 13 */
    vuint16_t PPDI14:1;                /* Parallel Pad Data In 14 */
    vuint16_t PPDI15:1;                /* Parallel Pad Data In 15 */
  } B;
} SIUL2_0_PGPDI6_tag;

typedef union SIUL2_0_MPGPDO_union_tag { /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
  vuint32_t R;
  struct {
    vuint32_t MASK0:1;                 /* Mask Field 0 */
    vuint32_t MASK1:1;                 /* Mask Field 1 */
    vuint32_t MASK2:1;                 /* Mask Field 2 */
    vuint32_t MASK3:1;                 /* Mask Field 3 */
    vuint32_t MASK4:1;                 /* Mask Field 4 */
    vuint32_t MASK5:1;                 /* Mask Field 5 */
    vuint32_t MASK6:1;                 /* Mask Field 6 */
    vuint32_t MASK7:1;                 /* Mask Field 7 */
    vuint32_t MASK8:1;                 /* Mask Field 8 */
    vuint32_t MASK9:1;                 /* Mask Field 9 */
    vuint32_t MASK10:1;                /* Mask Field 10 */
    vuint32_t MASK11:1;                /* Mask Field 11 */
    vuint32_t MASK12:1;                /* Mask Field 12 */
    vuint32_t MASK13:1;                /* Mask Field 13 */
    vuint32_t MASK14:1;                /* Mask Field 14 */
    vuint32_t MASK15:1;                /* Mask Field 15 */
    vuint32_t MPPDO0:1;                /* Masked Parallel Pad Data Out 0 */
    vuint32_t MPPDO1:1;                /* Masked Parallel Pad Data Out 1 */
    vuint32_t MPPDO2:1;                /* Masked Parallel Pad Data Out 2 */
    vuint32_t MPPDO3:1;                /* Masked Parallel Pad Data Out 3 */
    vuint32_t MPPDO4:1;                /* Masked Parallel Pad Data Out 4 */
    vuint32_t MPPDO5:1;                /* Masked Parallel Pad Data Out 5 */
    vuint32_t MPPDO6:1;                /* Masked Parallel Pad Data Out 6 */
    vuint32_t MPPDO7:1;                /* Masked Parallel Pad Data Out 7 */
    vuint32_t MPPDO8:1;                /* Masked Parallel Pad Data Out 8 */
    vuint32_t MPPDO9:1;                /* Masked Parallel Pad Data Out 9 */
    vuint32_t MPPDO10:1;               /* Masked Parallel Pad Data Out 10 */
    vuint32_t MPPDO11:1;               /* Masked Parallel Pad Data Out 11 */
    vuint32_t MPPDO12:1;               /* Masked Parallel Pad Data Out 12 */
    vuint32_t MPPDO13:1;               /* Masked Parallel Pad Data Out 13 */
    vuint32_t MPPDO14:1;               /* Masked Parallel Pad Data Out 14 */
    vuint32_t MPPDO15:1;               /* Masked Parallel Pad Data Out 15 */
  } B;
} SIUL2_0_MPGPDO_tag;

struct SIUL2_0_tag {
  uint8_t SIUL2_0_reserved0[4];
  SIUL2_0_MIDR1_tag MIDR1;             /* SIUL2 MCU ID Register #1 */
  SIUL2_0_MIDR2_tag MIDR2;             /* SIUL2 MCU ID Register #2 */
  uint8_t SIUL2_0_reserved1[4];
  SIUL2_0_DISR0_tag DISR0;             /* SIUL2 DMA/Interrupt Status Flag Register0 */
  uint8_t SIUL2_0_reserved2[4];
  SIUL2_0_DIRER0_tag DIRER0;           /* SIUL2 DMA/Interrupt Request Enable Register0 */
  uint8_t SIUL2_0_reserved3[4];
  SIUL2_0_DIRSR0_tag DIRSR0;           /* SIUL2 DMA/Interrupt Request Select Register0 */
  uint8_t SIUL2_0_reserved4[4];
  SIUL2_0_IREER0_tag IREER0;           /* SIUL2 Interrupt Rising-Edge Event Enable Register 0 */
  uint8_t SIUL2_0_reserved5[4];
  SIUL2_0_IFEER0_tag IFEER0;           /* SIUL2 Interrupt Falling-Edge Event Enable Register 0 */
  uint8_t SIUL2_0_reserved6[4];
  SIUL2_0_IFER0_tag IFER0;             /* SIUL2 Interrupt Filter Enable Register 0 */
  uint8_t SIUL2_0_reserved7[4];
  SIUL2_0_IFMCR_tag IFMCR[12];         /* SIUL2 Interrupt Filter Maximum Counter Register */
  uint8_t SIUL2_0_reserved8[80];
  SIUL2_0_IFCPR_tag IFCPR;             /* SIUL2 Interrupt Filter Clock Prescaler Register */
  uint8_t SIUL2_0_reserved9[380];
  SIUL2_0_MSCR_tag MSCR[102];          /* SIUL2 Multiplexed Signal Configuration Register */
  uint8_t SIUL2_0_reserved10[1640];
  SIUL2_0_IMCR_tag IMCR[84];           /* SIUL2 Input Multiplexed Signal Configuration Register; Valid array indices: 0-1, 3-61, 68-83 */
  uint8_t SIUL2_0_reserved11[1904];
  SIUL2_0_GPDO3_tag GPDO3;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO2_tag GPDO2;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO1_tag GPDO1;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO0_tag GPDO0;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO7_tag GPDO7;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO6_tag GPDO6;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO5_tag GPDO5;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO4_tag GPDO4;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO11_tag GPDO11;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO10_tag GPDO10;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO9_tag GPDO9;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO8_tag GPDO8;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO15_tag GPDO15;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO14_tag GPDO14;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO13_tag GPDO13;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO12_tag GPDO12;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO19_tag GPDO19;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO18_tag GPDO18;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO17_tag GPDO17;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO16_tag GPDO16;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO23_tag GPDO23;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO22_tag GPDO22;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO21_tag GPDO21;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO20_tag GPDO20;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO27_tag GPDO27;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO26_tag GPDO26;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO25_tag GPDO25;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO24_tag GPDO24;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO31_tag GPDO31;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO30_tag GPDO30;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO29_tag GPDO29;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO28_tag GPDO28;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO35_tag GPDO35;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO34_tag GPDO34;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO33_tag GPDO33;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO32_tag GPDO32;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO39_tag GPDO39;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO38_tag GPDO38;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO37_tag GPDO37;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO36_tag GPDO36;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO43_tag GPDO43;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO42_tag GPDO42;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO41_tag GPDO41;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO40_tag GPDO40;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO47_tag GPDO47;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO46_tag GPDO46;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO45_tag GPDO45;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO44_tag GPDO44;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO51_tag GPDO51;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO50_tag GPDO50;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO49_tag GPDO49;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO48_tag GPDO48;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO55_tag GPDO55;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO54_tag GPDO54;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO53_tag GPDO53;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO52_tag GPDO52;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO59_tag GPDO59;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO58_tag GPDO58;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO57_tag GPDO57;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO56_tag GPDO56;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO63_tag GPDO63;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO62_tag GPDO62;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO61_tag GPDO61;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO60_tag GPDO60;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO67_tag GPDO67;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO66_tag GPDO66;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO65_tag GPDO65;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO64_tag GPDO64;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO71_tag GPDO71;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO70_tag GPDO70;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO69_tag GPDO69;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO68_tag GPDO68;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO75_tag GPDO75;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO74_tag GPDO74;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO73_tag GPDO73;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO72_tag GPDO72;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO79_tag GPDO79;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO78_tag GPDO78;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO77_tag GPDO77;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO76_tag GPDO76;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO83_tag GPDO83;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO82_tag GPDO82;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO81_tag GPDO81;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO80_tag GPDO80;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO87_tag GPDO87;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO86_tag GPDO86;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO85_tag GPDO85;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO84_tag GPDO84;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO91_tag GPDO91;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO90_tag GPDO90;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO89_tag GPDO89;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO88_tag GPDO88;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO95_tag GPDO95;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO94_tag GPDO94;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO93_tag GPDO93;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO92_tag GPDO92;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO99_tag GPDO99;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO98_tag GPDO98;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO97_tag GPDO97;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO96_tag GPDO96;           /* SIUL2 GPIO Pad Data Output Register */
  uint8_t SIUL2_0_reserved12[2];
  SIUL2_0_GPDO101_tag GPDO101;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_0_GPDO100_tag GPDO100;         /* SIUL2 GPIO Pad Data Output Register */
  uint8_t SIUL2_0_reserved13[408];
  SIUL2_0_GPDI3_tag GPDI3;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI2_tag GPDI2;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI1_tag GPDI1;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI0_tag GPDI0;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI7_tag GPDI7;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI6_tag GPDI6;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI5_tag GPDI5;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI4_tag GPDI4;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI11_tag GPDI11;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI10_tag GPDI10;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI9_tag GPDI9;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI8_tag GPDI8;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI15_tag GPDI15;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI14_tag GPDI14;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI13_tag GPDI13;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI12_tag GPDI12;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI19_tag GPDI19;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI18_tag GPDI18;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI17_tag GPDI17;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI16_tag GPDI16;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI23_tag GPDI23;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI22_tag GPDI22;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI21_tag GPDI21;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI20_tag GPDI20;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI27_tag GPDI27;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI26_tag GPDI26;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI25_tag GPDI25;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI24_tag GPDI24;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI31_tag GPDI31;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI30_tag GPDI30;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI29_tag GPDI29;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI28_tag GPDI28;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI35_tag GPDI35;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI34_tag GPDI34;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI33_tag GPDI33;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI32_tag GPDI32;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI39_tag GPDI39;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI38_tag GPDI38;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI37_tag GPDI37;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI36_tag GPDI36;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI43_tag GPDI43;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI42_tag GPDI42;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI41_tag GPDI41;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI40_tag GPDI40;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI47_tag GPDI47;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI46_tag GPDI46;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI45_tag GPDI45;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI44_tag GPDI44;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI51_tag GPDI51;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI50_tag GPDI50;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI49_tag GPDI49;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI48_tag GPDI48;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI55_tag GPDI55;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI54_tag GPDI54;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI53_tag GPDI53;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI52_tag GPDI52;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI59_tag GPDI59;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI58_tag GPDI58;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI57_tag GPDI57;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI56_tag GPDI56;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI63_tag GPDI63;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI62_tag GPDI62;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI61_tag GPDI61;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI60_tag GPDI60;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI67_tag GPDI67;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI66_tag GPDI66;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI65_tag GPDI65;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI64_tag GPDI64;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI71_tag GPDI71;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI70_tag GPDI70;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI69_tag GPDI69;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI68_tag GPDI68;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI75_tag GPDI75;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI74_tag GPDI74;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI73_tag GPDI73;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI72_tag GPDI72;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI79_tag GPDI79;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI78_tag GPDI78;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI77_tag GPDI77;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI76_tag GPDI76;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI83_tag GPDI83;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI82_tag GPDI82;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI81_tag GPDI81;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI80_tag GPDI80;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI87_tag GPDI87;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI86_tag GPDI86;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI85_tag GPDI85;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI84_tag GPDI84;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI91_tag GPDI91;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI90_tag GPDI90;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI89_tag GPDI89;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI88_tag GPDI88;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI95_tag GPDI95;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI94_tag GPDI94;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI93_tag GPDI93;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI92_tag GPDI92;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI99_tag GPDI99;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI98_tag GPDI98;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI97_tag GPDI97;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI96_tag GPDI96;           /* SIUL2 GPIO Pad Data Input Register */
  uint8_t SIUL2_0_reserved14[2];
  SIUL2_0_GPDI101_tag GPDI101;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_0_GPDI100_tag GPDI100;         /* SIUL2 GPIO Pad Data Input Register */
  uint8_t SIUL2_0_reserved15[408];
  SIUL2_0_PGPDO1_tag PGPDO1;           /* SIUL2 Parallel GPIO Pad Data Out Register */
  SIUL2_0_PGPDO0_tag PGPDO0;           /* SIUL2 Parallel GPIO Pad Data Out Register */
  SIUL2_0_PGPDO3_tag PGPDO3;           /* SIUL2 Parallel GPIO Pad Data Out Register */
  SIUL2_0_PGPDO2_tag PGPDO2;           /* SIUL2 Parallel GPIO Pad Data Out Register */
  SIUL2_0_PGPDO5_tag PGPDO5;           /* SIUL2 Parallel GPIO Pad Data Out Register */
  SIUL2_0_PGPDO4_tag PGPDO4;           /* SIUL2 Parallel GPIO Pad Data Out Register */
  uint8_t SIUL2_0_reserved16[2];
  SIUL2_0_PGPDO6_tag PGPDO6;           /* SIUL2 Parallel GPIO Pad Data Out Register */
  uint8_t SIUL2_0_reserved17[48];
  SIUL2_0_PGPDI1_tag PGPDI1;           /* SIUL2 Parallel GPIO Pad Data In Register */
  SIUL2_0_PGPDI0_tag PGPDI0;           /* SIUL2 Parallel GPIO Pad Data In Register */
  SIUL2_0_PGPDI3_tag PGPDI3;           /* SIUL2 Parallel GPIO Pad Data In Register */
  SIUL2_0_PGPDI2_tag PGPDI2;           /* SIUL2 Parallel GPIO Pad Data In Register */
  SIUL2_0_PGPDI5_tag PGPDI5;           /* SIUL2 Parallel GPIO Pad Data In Register */
  SIUL2_0_PGPDI4_tag PGPDI4;           /* SIUL2 Parallel GPIO Pad Data In Register */
  uint8_t SIUL2_0_reserved18[2];
  SIUL2_0_PGPDI6_tag PGPDI6;           /* SIUL2 Parallel GPIO Pad Data In Register */
  uint8_t SIUL2_0_reserved19[48];
  SIUL2_0_MPGPDO_tag MPGPDO[7];        /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
};


/* ============================================================================
   =============================== Module: SIUL2_1 ============================
   ============================================================================ */

typedef union SIUL2_1_MIDR1_union_tag { /* SIUL2 MCU ID Register #1 */
  vuint32_t R;
  struct {
    vuint32_t SYSTEM_RAM_SIZE:6;       /* System RAM Size */
    vuint32_t _unused_6:4;             /* Reserved */
    vuint32_t PART_NO_LETTER:6;        /* Part Number Letter */
    vuint32_t PRODUCT_FAMILY_NO:10;    /* Product Family Number */
    vuint32_t PRODUCT_FAMILY_LETTER:6; /* Product Family Letter */
  } B;
} SIUL2_1_MIDR1_tag;

typedef union SIUL2_1_MIDR2_union_tag { /* SIUL2 MCU ID Register #2 */
  vuint32_t R;
  struct {
    vuint32_t AE0:1;                   /* Application Extension 0 */
    vuint32_t AE1:1;                   /* Application Extension 1 */
    vuint32_t _unused_2:10;            /* Reserved */
    vuint32_t LAX:1;                   /* Linear Algebraic Accelerator */
    vuint32_t HPBF:1;                  /* High Performance Buffered Flash */
    vuint32_t OTA:1;                   /* Over The Air */
    vuint32_t SERDES:1;                /* SerDes subsystem */
    vuint32_t COMPUTE_DIE_PART_NUMBER:10; /* Compute Die Part Number */
    vuint32_t _unused_26:2;            /* Reserved */
    vuint32_t FLASH_CONFIG:2;          /* Flash Configuration */
    vuint32_t FLASH_VENDOR:2;          /* Flash Vendor */
  } B;
} SIUL2_1_MIDR2_tag;

typedef union SIUL2_1_DISR0_union_tag { /* SIUL2 DMA/Interrupt Status Flag Register0 */
  vuint32_t R;
  struct {
    vuint32_t EIF0:1;                  /* External Interrupt Status Flag 0 */
    vuint32_t EIF1:1;                  /* External Interrupt Status Flag 1 */
    vuint32_t EIF2:1;                  /* External Interrupt Status Flag 2 */
    vuint32_t EIF3:1;                  /* External Interrupt Status Flag 3 */
    vuint32_t EIF4:1;                  /* External Interrupt Status Flag 4 */
    vuint32_t EIF5:1;                  /* External Interrupt Status Flag 5 */
    vuint32_t EIF6:1;                  /* External Interrupt Status Flag 6 */
    vuint32_t EIF7:1;                  /* External Interrupt Status Flag 7 */
    vuint32_t EIF8:1;                  /* External Interrupt Status Flag 8 */
    vuint32_t EIF9:1;                  /* External Interrupt Status Flag 9 */
    vuint32_t EIF10:1;                 /* External Interrupt Status Flag 10 */
    vuint32_t EIF11:1;                 /* External Interrupt Status Flag 11 */
    vuint32_t EIF12:1;                 /* External Interrupt Status Flag 12 */
    vuint32_t EIF13:1;                 /* External Interrupt Status Flag 13 */
    vuint32_t EIF14:1;                 /* External Interrupt Status Flag 14 */
    vuint32_t EIF15:1;                 /* External Interrupt Status Flag 15 */
    vuint32_t EIF16:1;                 /* External Interrupt Status Flag 16 */
    vuint32_t EIF17:1;                 /* External Interrupt Status Flag 17 */
    vuint32_t EIF18:1;                 /* External Interrupt Status Flag 18 */
    vuint32_t EIF19:1;                 /* External Interrupt Status Flag 19 */
    vuint32_t EIF20:1;                 /* External Interrupt Status Flag 20 */
    vuint32_t EIF21:1;                 /* External Interrupt Status Flag 21 */
    vuint32_t EIF22:1;                 /* External Interrupt Status Flag 22 */
    vuint32_t EIF23:1;                 /* External Interrupt Status Flag 23 */
    vuint32_t EIF24:1;                 /* External Interrupt Status Flag 24 */
    vuint32_t EIF25:1;                 /* External Interrupt Status Flag 25 */
    vuint32_t EIF26:1;                 /* External Interrupt Status Flag 26 */
    vuint32_t EIF27:1;                 /* External Interrupt Status Flag 27 */
    vuint32_t EIF28:1;                 /* External Interrupt Status Flag 28 */
    vuint32_t EIF29:1;                 /* External Interrupt Status Flag 29 */
    vuint32_t EIF30:1;                 /* External Interrupt Status Flag 30 */
    vuint32_t EIF31:1;                 /* External Interrupt Status Flag 31 */
  } B;
} SIUL2_1_DISR0_tag;

typedef union SIUL2_1_DIRER0_union_tag { /* SIUL2 DMA/Interrupt Request Enable Register0 */
  vuint32_t R;
  struct {
    vuint32_t EIRE0:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE1:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE2:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE3:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE4:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE5:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE6:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE7:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE8:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE9:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE10:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE11:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE12:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE13:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE14:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE15:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE16:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE17:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE18:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE19:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE20:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE21:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE22:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE23:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE24:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE25:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE26:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE27:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE28:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE29:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE30:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE31:1;                /* External Interrupt Request Enable */
  } B;
} SIUL2_1_DIRER0_tag;

typedef union SIUL2_1_DIRSR0_union_tag { /* SIUL2 DMA/Interrupt Request Select Register0 */
  vuint32_t R;
  struct {
    vuint32_t DIRSR0:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR1:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR2:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR3:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR4:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR5:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR6:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR7:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR8:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR9:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR10:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR11:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR12:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR13:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR14:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR15:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR16:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR17:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR18:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR19:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR20:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR21:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR22:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR23:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR24:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR25:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR26:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR27:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR28:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR29:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR30:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR31:1;               /* DMA/Interrupt Request Select Register */
  } B;
} SIUL2_1_DIRSR0_tag;

typedef union SIUL2_1_IREER0_union_tag { /* SIUL2 Interrupt Rising-Edge Event Enable Register 0 */
  vuint32_t R;
  struct {
    vuint32_t IREE0:1;                 /* Enable rising-edge events to cause the IREE0 bit to be set. */
    vuint32_t IREE1:1;                 /* Enable rising-edge events to cause the IREE1 bit to be set. */
    vuint32_t IREE2:1;                 /* Enable rising-edge events to cause the IREE2 bit to be set. */
    vuint32_t IREE3:1;                 /* Enable rising-edge events to cause the IREE3 bit to be set. */
    vuint32_t IREE4:1;                 /* Enable rising-edge events to cause the IREE4 bit to be set. */
    vuint32_t IREE5:1;                 /* Enable rising-edge events to cause the IREE5 bit to be set. */
    vuint32_t IREE6:1;                 /* Enable rising-edge events to cause the IREE6 bit to be set. */
    vuint32_t IREE7:1;                 /* Enable rising-edge events to cause the IREE7 bit to be set. */
    vuint32_t IREE8:1;                 /* Enable rising-edge events to cause the IREE8 bit to be set. */
    vuint32_t IREE9:1;                 /* Enable rising-edge events to cause the IREE9 bit to be set. */
    vuint32_t IREE10:1;                /* Enable rising-edge events to cause the IREE10 bit to be set. */
    vuint32_t IREE11:1;                /* Enable rising-edge events to cause the IREE11 bit to be set. */
    vuint32_t IREE12:1;                /* Enable rising-edge events to cause the IREE12 bit to be set. */
    vuint32_t IREE13:1;                /* Enable rising-edge events to cause the IREE13 bit to be set. */
    vuint32_t IREE14:1;                /* Enable rising-edge events to cause the IREE14 bit to be set. */
    vuint32_t IREE15:1;                /* Enable rising-edge events to cause the IREE15 bit to be set. */
    vuint32_t IREE16:1;                /* Enable rising-edge events to cause the IREE16 bit to be set. */
    vuint32_t IREE17:1;                /* Enable rising-edge events to cause the IREE17 bit to be set. */
    vuint32_t IREE18:1;                /* Enable rising-edge events to cause the IREE18 bit to be set. */
    vuint32_t IREE19:1;                /* Enable rising-edge events to cause the IREE19 bit to be set. */
    vuint32_t IREE20:1;                /* Enable rising-edge events to cause the IREE20 bit to be set. */
    vuint32_t IREE21:1;                /* Enable rising-edge events to cause the IREE21 bit to be set. */
    vuint32_t IREE22:1;                /* Enable rising-edge events to cause the IREE22 bit to be set. */
    vuint32_t IREE23:1;                /* Enable rising-edge events to cause the IREE23 bit to be set. */
    vuint32_t IREE24:1;                /* Enable rising-edge events to cause the IREE24 bit to be set. */
    vuint32_t IREE25:1;                /* Enable rising-edge events to cause the IREE25 bit to be set. */
    vuint32_t IREE26:1;                /* Enable rising-edge events to cause the IREE26 bit to be set. */
    vuint32_t IREE27:1;                /* Enable rising-edge events to cause the IREE27 bit to be set. */
    vuint32_t IREE28:1;                /* Enable rising-edge events to cause the IREE28 bit to be set. */
    vuint32_t IREE29:1;                /* Enable rising-edge events to cause the IREE29 bit to be set. */
    vuint32_t IREE30:1;                /* Enable rising-edge events to cause the IREE30 bit to be set. */
    vuint32_t IREE31:1;                /* Enable rising-edge events to cause the IREE31 bit to be set. */
  } B;
} SIUL2_1_IREER0_tag;

typedef union SIUL2_1_IFEER0_union_tag { /* SIUL2 Interrupt Falling-Edge Event Enable Register 0 */
  vuint32_t R;
  struct {
    vuint32_t IFEE0:1;                 /* Enable falling-edge events to cause the IFEE0 bit to be set. */
    vuint32_t IFEE1:1;                 /* Enable falling-edge events to cause the IFEE1 bit to be set. */
    vuint32_t IFEE2:1;                 /* Enable falling-edge events to cause the IFEE2 bit to be set. */
    vuint32_t IFEE3:1;                 /* Enable falling-edge events to cause the IFEE3 bit to be set. */
    vuint32_t IFEE4:1;                 /* Enable falling-edge events to cause the IFEE4 bit to be set. */
    vuint32_t IFEE5:1;                 /* Enable falling-edge events to cause the IFEE5 bit to be set. */
    vuint32_t IFEE6:1;                 /* Enable falling-edge events to cause the IFEE6 bit to be set. */
    vuint32_t IFEE7:1;                 /* Enable falling-edge events to cause the IFEE7 bit to be set. */
    vuint32_t IFEE8:1;                 /* Enable falling-edge events to cause the IFEE8 bit to be set. */
    vuint32_t IFEE9:1;                 /* Enable falling-edge events to cause the IFEE9 bit to be set. */
    vuint32_t IFEE10:1;                /* Enable falling-edge events to cause the IFEE10 bit to be set. */
    vuint32_t IFEE11:1;                /* Enable falling-edge events to cause the IFEE11 bit to be set. */
    vuint32_t IFEE12:1;                /* Enable falling-edge events to cause the IFEE12 bit to be set. */
    vuint32_t IFEE13:1;                /* Enable falling-edge events to cause the IFEE13 bit to be set. */
    vuint32_t IFEE14:1;                /* Enable falling-edge events to cause the IFEE14 bit to be set. */
    vuint32_t IFEE15:1;                /* Enable falling-edge events to cause the IFEE15 bit to be set. */
    vuint32_t IFEE16:1;                /* Enable falling-edge events to cause the IFEE16 bit to be set. */
    vuint32_t IFEE17:1;                /* Enable falling-edge events to cause the IFEE17 bit to be set. */
    vuint32_t IFEE18:1;                /* Enable falling-edge events to cause the IFEE18 bit to be set. */
    vuint32_t IFEE19:1;                /* Enable falling-edge events to cause the IFEE19 bit to be set. */
    vuint32_t IFEE20:1;                /* Enable falling-edge events to cause the IFEE20 bit to be set. */
    vuint32_t IFEE21:1;                /* Enable falling-edge events to cause the IFEE21 bit to be set. */
    vuint32_t IFEE22:1;                /* Enable falling-edge events to cause the IFEE22 bit to be set. */
    vuint32_t IFEE23:1;                /* Enable falling-edge events to cause the IFEE23 bit to be set. */
    vuint32_t IFEE24:1;                /* Enable falling-edge events to cause the IFEE24 bit to be set. */
    vuint32_t IFEE25:1;                /* Enable falling-edge events to cause the IFEE25 bit to be set. */
    vuint32_t IFEE26:1;                /* Enable falling-edge events to cause the IFEE26 bit to be set. */
    vuint32_t IFEE27:1;                /* Enable falling-edge events to cause the IFEE27 bit to be set. */
    vuint32_t IFEE28:1;                /* Enable falling-edge events to cause the IFEE28 bit to be set. */
    vuint32_t IFEE29:1;                /* Enable falling-edge events to cause the IFEE29 bit to be set. */
    vuint32_t IFEE30:1;                /* Enable falling-edge events to cause the IFEE30 bit to be set. */
    vuint32_t IFEE31:1;                /* Enable falling-edge events to cause the IFEE31 bit to be set. */
  } B;
} SIUL2_1_IFEER0_tag;

typedef union SIUL2_1_IFER0_union_tag { /* SIUL2 Interrupt Filter Enable Register 0 */
  vuint32_t R;
  struct {
    vuint32_t IFE0:1;                  /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE1:1;                  /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE2:1;                  /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE3:1;                  /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE4:1;                  /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE5:1;                  /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE6:1;                  /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE7:1;                  /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE8:1;                  /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE9:1;                  /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE10:1;                 /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE11:1;                 /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE12:1;                 /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE13:1;                 /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE14:1;                 /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE15:1;                 /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE16:1;                 /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE17:1;                 /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE18:1;                 /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE19:1;                 /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE20:1;                 /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE21:1;                 /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE22:1;                 /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE23:1;                 /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE24:1;                 /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE25:1;                 /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE26:1;                 /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE27:1;                 /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE28:1;                 /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE29:1;                 /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE30:1;                 /* Enable digital glitch filter on the interrupt pad input. */
    vuint32_t IFE31:1;                 /* Enable digital glitch filter on the interrupt pad input. */
  } B;
} SIUL2_1_IFER0_tag;

typedef union SIUL2_1_IFMCR_union_tag { /* SIUL2 Interrupt Filter Maximum Counter Register */
  vuint32_t R;
  struct {
    vuint32_t MAXCNT:4;                /* Maximum Interrupt Filter Counter setting */
    vuint32_t _unused_4:28;            /* Reserved */
  } B;
} SIUL2_1_IFMCR_tag;

typedef union SIUL2_1_IFCPR_union_tag { /* SIUL2 Interrupt Filter Clock Prescaler Register */
  vuint32_t R;
  struct {
    vuint32_t IFCP:4;                  /* Interrupt Filter Clock Prescaler setting */
    vuint32_t _unused_4:28;            /* Reserved */
  } B;
} SIUL2_1_IFCPR_tag;

typedef union SIUL2_1_MSCR_union_tag { /* SIUL2 Multiplexed Signal Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t SSS:3;                   /* Source Signal Select */
    vuint32_t _unused_3:2;             /* Reserved */
    vuint32_t SMC:1;                   /* Safe Mode Control */
    vuint32_t _unused_6:4;             /* Reserved */
    vuint32_t RCVR:1;                  /* Receiver Select */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t PUS:1;                   /* Pull Select */
    vuint32_t PUE:1;                   /* Pull Enable */
    vuint32_t SRE:3;                   /* Slew Rate Control */
    vuint32_t INV:1;                   /* Invert */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t IBE:1;                   /* Input Buffer Enable */
    vuint32_t ODE:1;                   /* Open Drain Enable */
    vuint32_t OBE:1;                   /* GPIO Output Buffer Enable */
    vuint32_t _unused_22:10;           /* Reserved */
  } B;
} SIUL2_1_MSCR_tag;

typedef union SIUL2_1_IMCR_union_tag { /* SIUL2 Input Multiplexed Signal Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t SSS:3;                   /* Source Signal Select */
    vuint32_t _unused_3:29;            /* Reserved */
  } B;
} SIUL2_1_IMCR_tag;

typedef union SIUL2_1_GPDO115_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO115_tag;

typedef union SIUL2_1_GPDO114_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO114_tag;

typedef union SIUL2_1_GPDO113_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO113_tag;

typedef union SIUL2_1_GPDO112_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO112_tag;

typedef union SIUL2_1_GPDO119_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO119_tag;

typedef union SIUL2_1_GPDO118_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO118_tag;

typedef union SIUL2_1_GPDO117_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO117_tag;

typedef union SIUL2_1_GPDO116_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO116_tag;

typedef union SIUL2_1_GPDO122_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO122_tag;

typedef union SIUL2_1_GPDO121_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO121_tag;

typedef union SIUL2_1_GPDO120_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO120_tag;

typedef union SIUL2_1_GPDO147_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO147_tag;

typedef union SIUL2_1_GPDO146_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO146_tag;

typedef union SIUL2_1_GPDO145_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO145_tag;

typedef union SIUL2_1_GPDO144_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO144_tag;

typedef union SIUL2_1_GPDO151_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO151_tag;

typedef union SIUL2_1_GPDO150_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO150_tag;

typedef union SIUL2_1_GPDO149_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO149_tag;

typedef union SIUL2_1_GPDO148_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO148_tag;

typedef union SIUL2_1_GPDO155_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO155_tag;

typedef union SIUL2_1_GPDO154_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO154_tag;

typedef union SIUL2_1_GPDO153_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO153_tag;

typedef union SIUL2_1_GPDO152_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO152_tag;

typedef union SIUL2_1_GPDO159_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO159_tag;

typedef union SIUL2_1_GPDO158_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO158_tag;

typedef union SIUL2_1_GPDO157_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO157_tag;

typedef union SIUL2_1_GPDO156_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO156_tag;

typedef union SIUL2_1_GPDO163_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO163_tag;

typedef union SIUL2_1_GPDO162_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO162_tag;

typedef union SIUL2_1_GPDO161_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO161_tag;

typedef union SIUL2_1_GPDO160_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO160_tag;

typedef union SIUL2_1_GPDO167_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO167_tag;

typedef union SIUL2_1_GPDO166_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO166_tag;

typedef union SIUL2_1_GPDO165_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO165_tag;

typedef union SIUL2_1_GPDO164_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO164_tag;

typedef union SIUL2_1_GPDO171_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO171_tag;

typedef union SIUL2_1_GPDO170_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO170_tag;

typedef union SIUL2_1_GPDO169_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO169_tag;

typedef union SIUL2_1_GPDO168_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO168_tag;

typedef union SIUL2_1_GPDO175_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO175_tag;

typedef union SIUL2_1_GPDO174_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO174_tag;

typedef union SIUL2_1_GPDO173_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO173_tag;

typedef union SIUL2_1_GPDO172_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO172_tag;

typedef union SIUL2_1_GPDO179_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO179_tag;

typedef union SIUL2_1_GPDO178_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO178_tag;

typedef union SIUL2_1_GPDO177_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO177_tag;

typedef union SIUL2_1_GPDO176_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO176_tag;

typedef union SIUL2_1_GPDO183_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO183_tag;

typedef union SIUL2_1_GPDO182_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO182_tag;

typedef union SIUL2_1_GPDO181_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO181_tag;

typedef union SIUL2_1_GPDO180_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO180_tag;

typedef union SIUL2_1_GPDO187_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO187_tag;

typedef union SIUL2_1_GPDO186_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO186_tag;

typedef union SIUL2_1_GPDO185_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO185_tag;

typedef union SIUL2_1_GPDO184_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO184_tag;

typedef union SIUL2_1_GPDO190_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO190_tag;

typedef union SIUL2_1_GPDO189_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO189_tag;

typedef union SIUL2_1_GPDO188_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDO188_tag;

typedef union SIUL2_1_GPDI115_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI115_tag;

typedef union SIUL2_1_GPDI114_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI114_tag;

typedef union SIUL2_1_GPDI113_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI113_tag;

typedef union SIUL2_1_GPDI112_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI112_tag;

typedef union SIUL2_1_GPDI119_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI119_tag;

typedef union SIUL2_1_GPDI118_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI118_tag;

typedef union SIUL2_1_GPDI117_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI117_tag;

typedef union SIUL2_1_GPDI116_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI116_tag;

typedef union SIUL2_1_GPDI122_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI122_tag;

typedef union SIUL2_1_GPDI121_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI121_tag;

typedef union SIUL2_1_GPDI120_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI120_tag;

typedef union SIUL2_1_GPDI147_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI147_tag;

typedef union SIUL2_1_GPDI146_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI146_tag;

typedef union SIUL2_1_GPDI145_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI145_tag;

typedef union SIUL2_1_GPDI144_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI144_tag;

typedef union SIUL2_1_GPDI151_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI151_tag;

typedef union SIUL2_1_GPDI150_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI150_tag;

typedef union SIUL2_1_GPDI149_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI149_tag;

typedef union SIUL2_1_GPDI148_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI148_tag;

typedef union SIUL2_1_GPDI155_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI155_tag;

typedef union SIUL2_1_GPDI154_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI154_tag;

typedef union SIUL2_1_GPDI153_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI153_tag;

typedef union SIUL2_1_GPDI152_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI152_tag;

typedef union SIUL2_1_GPDI159_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI159_tag;

typedef union SIUL2_1_GPDI158_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI158_tag;

typedef union SIUL2_1_GPDI157_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI157_tag;

typedef union SIUL2_1_GPDI156_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI156_tag;

typedef union SIUL2_1_GPDI163_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI163_tag;

typedef union SIUL2_1_GPDI162_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI162_tag;

typedef union SIUL2_1_GPDI161_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI161_tag;

typedef union SIUL2_1_GPDI160_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI160_tag;

typedef union SIUL2_1_GPDI167_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI167_tag;

typedef union SIUL2_1_GPDI166_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI166_tag;

typedef union SIUL2_1_GPDI165_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI165_tag;

typedef union SIUL2_1_GPDI164_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI164_tag;

typedef union SIUL2_1_GPDI171_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI171_tag;

typedef union SIUL2_1_GPDI170_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI170_tag;

typedef union SIUL2_1_GPDI169_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI169_tag;

typedef union SIUL2_1_GPDI168_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI168_tag;

typedef union SIUL2_1_GPDI175_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI175_tag;

typedef union SIUL2_1_GPDI174_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI174_tag;

typedef union SIUL2_1_GPDI173_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI173_tag;

typedef union SIUL2_1_GPDI172_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI172_tag;

typedef union SIUL2_1_GPDI179_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI179_tag;

typedef union SIUL2_1_GPDI178_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI178_tag;

typedef union SIUL2_1_GPDI177_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI177_tag;

typedef union SIUL2_1_GPDI176_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI176_tag;

typedef union SIUL2_1_GPDI183_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI183_tag;

typedef union SIUL2_1_GPDI182_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI182_tag;

typedef union SIUL2_1_GPDI181_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI181_tag;

typedef union SIUL2_1_GPDI180_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI180_tag;

typedef union SIUL2_1_GPDI187_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI187_tag;

typedef union SIUL2_1_GPDI186_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI186_tag;

typedef union SIUL2_1_GPDI185_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI185_tag;

typedef union SIUL2_1_GPDI184_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI184_tag;

typedef union SIUL2_1_GPDI190_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI190_tag;

typedef union SIUL2_1_GPDI189_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI189_tag;

typedef union SIUL2_1_GPDI188_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_1_GPDI188_tag;

typedef union SIUL2_1_PGPDO7_union_tag { /* SIUL2 Parallel GPIO Pad Data Out Register */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:1;             /* Reserved */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t _unused_3:1;             /* Reserved */
    vuint16_t _unused_4:1;             /* Reserved */
    vuint16_t PPDO5:1;                 /* Parallel Pad Data Out 5 */
    vuint16_t PPDO6:1;                 /* Parallel Pad Data Out 6 */
    vuint16_t PPDO7:1;                 /* Parallel Pad Data Out 7 */
    vuint16_t PPDO8:1;                 /* Parallel Pad Data Out 8 */
    vuint16_t PPDO9:1;                 /* Parallel Pad Data Out 9 */
    vuint16_t PPDO10:1;                /* Parallel Pad Data Out 10 */
    vuint16_t PPDO11:1;                /* Parallel Pad Data Out 11 */
    vuint16_t PPDO12:1;                /* Parallel Pad Data Out 12 */
    vuint16_t PPDO13:1;                /* Parallel Pad Data Out 13 */
    vuint16_t PPDO14:1;                /* Parallel Pad Data Out 14 */
    vuint16_t PPDO15:1;                /* Parallel Pad Data Out 15 */
  } B;
} SIUL2_1_PGPDO7_tag;

typedef union SIUL2_1_PGPDO9_union_tag { /* SIUL2 Parallel GPIO Pad Data Out Register */
  vuint16_t R;
  struct {
    vuint16_t PPDO0:1;                 /* Parallel Pad Data Out 0 */
    vuint16_t PPDO1:1;                 /* Parallel Pad Data Out 1 */
    vuint16_t PPDO2:1;                 /* Parallel Pad Data Out 2 */
    vuint16_t PPDO3:1;                 /* Parallel Pad Data Out 3 */
    vuint16_t PPDO4:1;                 /* Parallel Pad Data Out 4 */
    vuint16_t PPDO5:1;                 /* Parallel Pad Data Out 5 */
    vuint16_t PPDO6:1;                 /* Parallel Pad Data Out 6 */
    vuint16_t PPDO7:1;                 /* Parallel Pad Data Out 7 */
    vuint16_t PPDO8:1;                 /* Parallel Pad Data Out 8 */
    vuint16_t PPDO9:1;                 /* Parallel Pad Data Out 9 */
    vuint16_t PPDO10:1;                /* Parallel Pad Data Out 10 */
    vuint16_t PPDO11:1;                /* Parallel Pad Data Out 11 */
    vuint16_t PPDO12:1;                /* Parallel Pad Data Out 12 */
    vuint16_t PPDO13:1;                /* Parallel Pad Data Out 13 */
    vuint16_t PPDO14:1;                /* Parallel Pad Data Out 14 */
    vuint16_t PPDO15:1;                /* Parallel Pad Data Out 15 */
  } B;
} SIUL2_1_PGPDO9_tag;

typedef union SIUL2_1_PGPDO11_union_tag { /* SIUL2 Parallel GPIO Pad Data Out Register */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:1;             /* Reserved */
    vuint16_t PPDO1:1;                 /* Parallel Pad Data Out 1 */
    vuint16_t PPDO2:1;                 /* Parallel Pad Data Out 2 */
    vuint16_t PPDO3:1;                 /* Parallel Pad Data Out 3 */
    vuint16_t PPDO4:1;                 /* Parallel Pad Data Out 4 */
    vuint16_t PPDO5:1;                 /* Parallel Pad Data Out 5 */
    vuint16_t PPDO6:1;                 /* Parallel Pad Data Out 6 */
    vuint16_t PPDO7:1;                 /* Parallel Pad Data Out 7 */
    vuint16_t PPDO8:1;                 /* Parallel Pad Data Out 8 */
    vuint16_t PPDO9:1;                 /* Parallel Pad Data Out 9 */
    vuint16_t PPDO10:1;                /* Parallel Pad Data Out 10 */
    vuint16_t PPDO11:1;                /* Parallel Pad Data Out 11 */
    vuint16_t PPDO12:1;                /* Parallel Pad Data Out 12 */
    vuint16_t PPDO13:1;                /* Parallel Pad Data Out 13 */
    vuint16_t PPDO14:1;                /* Parallel Pad Data Out 14 */
    vuint16_t PPDO15:1;                /* Parallel Pad Data Out 15 */
  } B;
} SIUL2_1_PGPDO11_tag;

typedef union SIUL2_1_PGPDO10_union_tag { /* SIUL2 Parallel GPIO Pad Data Out Register */
  vuint16_t R;
  struct {
    vuint16_t PPDO0:1;                 /* Parallel Pad Data Out 0 */
    vuint16_t PPDO1:1;                 /* Parallel Pad Data Out 1 */
    vuint16_t PPDO2:1;                 /* Parallel Pad Data Out 2 */
    vuint16_t PPDO3:1;                 /* Parallel Pad Data Out 3 */
    vuint16_t PPDO4:1;                 /* Parallel Pad Data Out 4 */
    vuint16_t PPDO5:1;                 /* Parallel Pad Data Out 5 */
    vuint16_t PPDO6:1;                 /* Parallel Pad Data Out 6 */
    vuint16_t PPDO7:1;                 /* Parallel Pad Data Out 7 */
    vuint16_t PPDO8:1;                 /* Parallel Pad Data Out 8 */
    vuint16_t PPDO9:1;                 /* Parallel Pad Data Out 9 */
    vuint16_t PPDO10:1;                /* Parallel Pad Data Out 10 */
    vuint16_t PPDO11:1;                /* Parallel Pad Data Out 11 */
    vuint16_t PPDO12:1;                /* Parallel Pad Data Out 12 */
    vuint16_t PPDO13:1;                /* Parallel Pad Data Out 13 */
    vuint16_t PPDO14:1;                /* Parallel Pad Data Out 14 */
    vuint16_t PPDO15:1;                /* Parallel Pad Data Out 15 */
  } B;
} SIUL2_1_PGPDO10_tag;

typedef union SIUL2_1_PGPDI7_union_tag { /* SIUL2 Parallel GPIO Pad Data In Register */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:1;             /* Reserved */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t _unused_3:1;             /* Reserved */
    vuint16_t _unused_4:1;             /* Reserved */
    vuint16_t PPDI5:1;                 /* Parallel Pad Data In 5 */
    vuint16_t PPDI6:1;                 /* Parallel Pad Data In 6 */
    vuint16_t PPDI7:1;                 /* Parallel Pad Data In 7 */
    vuint16_t PPDI8:1;                 /* Parallel Pad Data In 8 */
    vuint16_t PPDI9:1;                 /* Parallel Pad Data In 9 */
    vuint16_t PPDI10:1;                /* Parallel Pad Data In 10 */
    vuint16_t PPDI11:1;                /* Parallel Pad Data In 11 */
    vuint16_t PPDI12:1;                /* Parallel Pad Data In 12 */
    vuint16_t PPDI13:1;                /* Parallel Pad Data In 13 */
    vuint16_t PPDI14:1;                /* Parallel Pad Data In 14 */
    vuint16_t PPDI15:1;                /* Parallel Pad Data In 15 */
  } B;
} SIUL2_1_PGPDI7_tag;

typedef union SIUL2_1_PGPDI9_union_tag { /* SIUL2 Parallel GPIO Pad Data In Register */
  vuint16_t R;
  struct {
    vuint16_t PPDI0:1;                 /* Parallel Pad Data In 0 */
    vuint16_t PPDI1:1;                 /* Parallel Pad Data In 1 */
    vuint16_t PPDI2:1;                 /* Parallel Pad Data In 2 */
    vuint16_t PPDI3:1;                 /* Parallel Pad Data In 3 */
    vuint16_t PPDI4:1;                 /* Parallel Pad Data In 4 */
    vuint16_t PPDI5:1;                 /* Parallel Pad Data In 5 */
    vuint16_t PPDI6:1;                 /* Parallel Pad Data In 6 */
    vuint16_t PPDI7:1;                 /* Parallel Pad Data In 7 */
    vuint16_t PPDI8:1;                 /* Parallel Pad Data In 8 */
    vuint16_t PPDI9:1;                 /* Parallel Pad Data In 9 */
    vuint16_t PPDI10:1;                /* Parallel Pad Data In 10 */
    vuint16_t PPDI11:1;                /* Parallel Pad Data In 11 */
    vuint16_t PPDI12:1;                /* Parallel Pad Data In 12 */
    vuint16_t PPDI13:1;                /* Parallel Pad Data In 13 */
    vuint16_t PPDI14:1;                /* Parallel Pad Data In 14 */
    vuint16_t PPDI15:1;                /* Parallel Pad Data In 15 */
  } B;
} SIUL2_1_PGPDI9_tag;

typedef union SIUL2_1_PGPDI11_union_tag { /* SIUL2 Parallel GPIO Pad Data In Register */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:1;             /* Reserved */
    vuint16_t PPDI1:1;                 /* Parallel Pad Data In 1 */
    vuint16_t PPDI2:1;                 /* Parallel Pad Data In 2 */
    vuint16_t PPDI3:1;                 /* Parallel Pad Data In 3 */
    vuint16_t PPDI4:1;                 /* Parallel Pad Data In 4 */
    vuint16_t PPDI5:1;                 /* Parallel Pad Data In 5 */
    vuint16_t PPDI6:1;                 /* Parallel Pad Data In 6 */
    vuint16_t PPDI7:1;                 /* Parallel Pad Data In 7 */
    vuint16_t PPDI8:1;                 /* Parallel Pad Data In 8 */
    vuint16_t PPDI9:1;                 /* Parallel Pad Data In 9 */
    vuint16_t PPDI10:1;                /* Parallel Pad Data In 10 */
    vuint16_t PPDI11:1;                /* Parallel Pad Data In 11 */
    vuint16_t PPDI12:1;                /* Parallel Pad Data In 12 */
    vuint16_t PPDI13:1;                /* Parallel Pad Data In 13 */
    vuint16_t PPDI14:1;                /* Parallel Pad Data In 14 */
    vuint16_t PPDI15:1;                /* Parallel Pad Data In 15 */
  } B;
} SIUL2_1_PGPDI11_tag;

typedef union SIUL2_1_PGPDI10_union_tag { /* SIUL2 Parallel GPIO Pad Data In Register */
  vuint16_t R;
  struct {
    vuint16_t PPDI0:1;                 /* Parallel Pad Data In 0 */
    vuint16_t PPDI1:1;                 /* Parallel Pad Data In 1 */
    vuint16_t PPDI2:1;                 /* Parallel Pad Data In 2 */
    vuint16_t PPDI3:1;                 /* Parallel Pad Data In 3 */
    vuint16_t PPDI4:1;                 /* Parallel Pad Data In 4 */
    vuint16_t PPDI5:1;                 /* Parallel Pad Data In 5 */
    vuint16_t PPDI6:1;                 /* Parallel Pad Data In 6 */
    vuint16_t PPDI7:1;                 /* Parallel Pad Data In 7 */
    vuint16_t PPDI8:1;                 /* Parallel Pad Data In 8 */
    vuint16_t PPDI9:1;                 /* Parallel Pad Data In 9 */
    vuint16_t PPDI10:1;                /* Parallel Pad Data In 10 */
    vuint16_t PPDI11:1;                /* Parallel Pad Data In 11 */
    vuint16_t PPDI12:1;                /* Parallel Pad Data In 12 */
    vuint16_t PPDI13:1;                /* Parallel Pad Data In 13 */
    vuint16_t PPDI14:1;                /* Parallel Pad Data In 14 */
    vuint16_t PPDI15:1;                /* Parallel Pad Data In 15 */
  } B;
} SIUL2_1_PGPDI10_tag;

typedef union SIUL2_1_MPGPDO_union_tag { /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t MASK5:1;                 /* Mask Field 5 */
    vuint32_t MASK6:1;                 /* Mask Field 6 */
    vuint32_t MASK7:1;                 /* Mask Field 7 */
    vuint32_t MASK8:1;                 /* Mask Field 8 */
    vuint32_t MASK9:1;                 /* Mask Field 9 */
    vuint32_t MASK10:1;                /* Mask Field 10 */
    vuint32_t MASK11:1;                /* Mask Field 11 */
    vuint32_t MASK12:1;                /* Mask Field 12 */
    vuint32_t MASK13:1;                /* Mask Field 13 */
    vuint32_t MASK14:1;                /* Mask Field 14 */
    vuint32_t MASK15:1;                /* Mask Field 15 */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t MPPDO5:1;                /* Masked Parallel Pad Data Out 5 */
    vuint32_t MPPDO6:1;                /* Masked Parallel Pad Data Out 6 */
    vuint32_t MPPDO7:1;                /* Masked Parallel Pad Data Out 7 */
    vuint32_t MPPDO8:1;                /* Masked Parallel Pad Data Out 8 */
    vuint32_t MPPDO9:1;                /* Masked Parallel Pad Data Out 9 */
    vuint32_t MPPDO10:1;               /* Masked Parallel Pad Data Out 10 */
    vuint32_t MPPDO11:1;               /* Masked Parallel Pad Data Out 11 */
    vuint32_t MPPDO12:1;               /* Masked Parallel Pad Data Out 12 */
    vuint32_t MPPDO13:1;               /* Masked Parallel Pad Data Out 13 */
    vuint32_t MPPDO14:1;               /* Masked Parallel Pad Data Out 14 */
    vuint32_t MPPDO15:1;               /* Masked Parallel Pad Data Out 15 */
  } B;
} SIUL2_1_MPGPDO_tag;

struct SIUL2_1_tag {
  uint8_t SIUL2_1_reserved0[4];
  SIUL2_1_MIDR1_tag MIDR1;             /* SIUL2 MCU ID Register #1 */
  SIUL2_1_MIDR2_tag MIDR2;             /* SIUL2 MCU ID Register #2 */
  uint8_t SIUL2_1_reserved1[4];
  SIUL2_1_DISR0_tag DISR0;             /* SIUL2 DMA/Interrupt Status Flag Register0 */
  uint8_t SIUL2_1_reserved2[4];
  SIUL2_1_DIRER0_tag DIRER0;           /* SIUL2 DMA/Interrupt Request Enable Register0 */
  uint8_t SIUL2_1_reserved3[4];
  SIUL2_1_DIRSR0_tag DIRSR0;           /* SIUL2 DMA/Interrupt Request Select Register0 */
  uint8_t SIUL2_1_reserved4[4];
  SIUL2_1_IREER0_tag IREER0;           /* SIUL2 Interrupt Rising-Edge Event Enable Register 0 */
  uint8_t SIUL2_1_reserved5[4];
  SIUL2_1_IFEER0_tag IFEER0;           /* SIUL2 Interrupt Falling-Edge Event Enable Register 0 */
  uint8_t SIUL2_1_reserved6[4];
  SIUL2_1_IFER0_tag IFER0;             /* SIUL2 Interrupt Filter Enable Register 0 */
  uint8_t SIUL2_1_reserved7[4];
  SIUL2_1_IFMCR_tag IFMCR[32];         /* SIUL2 Interrupt Filter Maximum Counter Register */
  SIUL2_1_IFCPR_tag IFCPR;             /* SIUL2 Interrupt Filter Clock Prescaler Register */
  uint8_t SIUL2_1_reserved8[380];
  SIUL2_1_MSCR_tag MSCR[191];          /* SIUL2 Multiplexed Signal Configuration Register; Valid array indices: 112-122, 144-190 */
  uint8_t SIUL2_1_reserved9[1284];
  SIUL2_1_IMCR_tag IMCR[496];          /* SIUL2 Input Multiplexed Signal Configuration Register; Valid array indices: 119-121, 128-129, 143-151, 153-161, 205-212, 224-225, 233-248, 273-274, 278-281, 283-286, 288-294, 296-302, 304-310, 312-314, 316, 318, 322-340, 343-360, 363-380, 383-393, 398-433, 467-470, 473-475, 478-480, 483-485, 488-490, 493-495 */
  uint8_t SIUL2_1_reserved10[368];
  SIUL2_1_GPDO115_tag GPDO115;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO114_tag GPDO114;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO113_tag GPDO113;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO112_tag GPDO112;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO119_tag GPDO119;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO118_tag GPDO118;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO117_tag GPDO117;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO116_tag GPDO116;         /* SIUL2 GPIO Pad Data Output Register */
  uint8_t SIUL2_1_reserved11[1];
  SIUL2_1_GPDO122_tag GPDO122;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO121_tag GPDO121;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO120_tag GPDO120;         /* SIUL2 GPIO Pad Data Output Register */
  uint8_t SIUL2_1_reserved12[20];
  SIUL2_1_GPDO147_tag GPDO147;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO146_tag GPDO146;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO145_tag GPDO145;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO144_tag GPDO144;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO151_tag GPDO151;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO150_tag GPDO150;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO149_tag GPDO149;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO148_tag GPDO148;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO155_tag GPDO155;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO154_tag GPDO154;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO153_tag GPDO153;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO152_tag GPDO152;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO159_tag GPDO159;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO158_tag GPDO158;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO157_tag GPDO157;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO156_tag GPDO156;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO163_tag GPDO163;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO162_tag GPDO162;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO161_tag GPDO161;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO160_tag GPDO160;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO167_tag GPDO167;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO166_tag GPDO166;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO165_tag GPDO165;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO164_tag GPDO164;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO171_tag GPDO171;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO170_tag GPDO170;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO169_tag GPDO169;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO168_tag GPDO168;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO175_tag GPDO175;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO174_tag GPDO174;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO173_tag GPDO173;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO172_tag GPDO172;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO179_tag GPDO179;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO178_tag GPDO178;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO177_tag GPDO177;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO176_tag GPDO176;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO183_tag GPDO183;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO182_tag GPDO182;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO181_tag GPDO181;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO180_tag GPDO180;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO187_tag GPDO187;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO186_tag GPDO186;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO185_tag GPDO185;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO184_tag GPDO184;         /* SIUL2 GPIO Pad Data Output Register */
  uint8_t SIUL2_1_reserved13[1];
  SIUL2_1_GPDO190_tag GPDO190;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO189_tag GPDO189;         /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_1_GPDO188_tag GPDO188;         /* SIUL2 GPIO Pad Data Output Register */
  uint8_t SIUL2_1_reserved14[432];
  SIUL2_1_GPDI115_tag GPDI115;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI114_tag GPDI114;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI113_tag GPDI113;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI112_tag GPDI112;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI119_tag GPDI119;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI118_tag GPDI118;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI117_tag GPDI117;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI116_tag GPDI116;         /* SIUL2 GPIO Pad Data Input Register */
  uint8_t SIUL2_1_reserved15[1];
  SIUL2_1_GPDI122_tag GPDI122;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI121_tag GPDI121;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI120_tag GPDI120;         /* SIUL2 GPIO Pad Data Input Register */
  uint8_t SIUL2_1_reserved16[20];
  SIUL2_1_GPDI147_tag GPDI147;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI146_tag GPDI146;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI145_tag GPDI145;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI144_tag GPDI144;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI151_tag GPDI151;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI150_tag GPDI150;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI149_tag GPDI149;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI148_tag GPDI148;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI155_tag GPDI155;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI154_tag GPDI154;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI153_tag GPDI153;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI152_tag GPDI152;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI159_tag GPDI159;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI158_tag GPDI158;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI157_tag GPDI157;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI156_tag GPDI156;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI163_tag GPDI163;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI162_tag GPDI162;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI161_tag GPDI161;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI160_tag GPDI160;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI167_tag GPDI167;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI166_tag GPDI166;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI165_tag GPDI165;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI164_tag GPDI164;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI171_tag GPDI171;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI170_tag GPDI170;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI169_tag GPDI169;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI168_tag GPDI168;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI175_tag GPDI175;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI174_tag GPDI174;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI173_tag GPDI173;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI172_tag GPDI172;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI179_tag GPDI179;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI178_tag GPDI178;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI177_tag GPDI177;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI176_tag GPDI176;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI183_tag GPDI183;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI182_tag GPDI182;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI181_tag GPDI181;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI180_tag GPDI180;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI187_tag GPDI187;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI186_tag GPDI186;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI185_tag GPDI185;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI184_tag GPDI184;         /* SIUL2 GPIO Pad Data Input Register */
  uint8_t SIUL2_1_reserved17[1];
  SIUL2_1_GPDI190_tag GPDI190;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI189_tag GPDI189;         /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_1_GPDI188_tag GPDI188;         /* SIUL2 GPIO Pad Data Input Register */
  uint8_t SIUL2_1_reserved18[332];
  SIUL2_1_PGPDO7_tag PGPDO7;           /* SIUL2 Parallel GPIO Pad Data Out Register */
  uint8_t SIUL2_1_reserved19[2];
  SIUL2_1_PGPDO9_tag PGPDO9;           /* SIUL2 Parallel GPIO Pad Data Out Register */
  uint8_t SIUL2_1_reserved20[2];
  SIUL2_1_PGPDO11_tag PGPDO11;         /* SIUL2 Parallel GPIO Pad Data Out Register */
  SIUL2_1_PGPDO10_tag PGPDO10;         /* SIUL2 Parallel GPIO Pad Data Out Register */
  uint8_t SIUL2_1_reserved21[52];
  SIUL2_1_PGPDI7_tag PGPDI7;           /* SIUL2 Parallel GPIO Pad Data In Register */
  uint8_t SIUL2_1_reserved22[2];
  SIUL2_1_PGPDI9_tag PGPDI9;           /* SIUL2 Parallel GPIO Pad Data In Register */
  uint8_t SIUL2_1_reserved23[2];
  SIUL2_1_PGPDI11_tag PGPDI11;         /* SIUL2 Parallel GPIO Pad Data In Register */
  SIUL2_1_PGPDI10_tag PGPDI10;         /* SIUL2 Parallel GPIO Pad Data In Register */
  uint8_t SIUL2_1_reserved24[40];
  SIUL2_1_MPGPDO_tag MPGPDO[12];       /* SIUL2 Masked Parallel GPIO Pad Data Out Register; Valid array indices: 7, 9-11 */
};


/* ============================================================================
   =============================== Module: SPI ================================
   ============================================================================ */

typedef union SPI_MCR_union_tag {      /* Module Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t HALT:1;                  /* Halt */
    vuint32_t PES:1;                   /* Parity Error Stop */
    vuint32_t FCPCS:1;                 /* Fast Continuous PCS Mode */
    vuint32_t XSPI:1;                  /* Extended SPI Mode */
    vuint32_t _unused_4:4;             /* Reserved */
    vuint32_t SMPL_PT:2;               /* Sample Point */
    vuint32_t CLR_RXF:1;               /* Clear RX FIFO */
    vuint32_t CLR_TXF:1;               /* Clear TX FIFO */
    vuint32_t DIS_RXF:1;               /* Disable Receive FIFO */
    vuint32_t DIS_TXF:1;               /* Disable Transmit FIFO */
    vuint32_t MDIS:1;                  /* Module Disable */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t PCSIS:5;                 /* Peripheral Chip Select x Inactive State */
    vuint32_t _unused_21:3;            /* Always write the reset value to this field. */
    vuint32_t ROOE:1;                  /* Receive FIFO Overflow Overwrite Enable */
    vuint32_t PCSSE:1;                 /* Peripheral Chip Select Strobe Enable */
    vuint32_t MTFE:1;                  /* Modified Transfer Format Enable */
    vuint32_t FRZ:1;                   /* Freeze */
    vuint32_t DCONF:2;                 /* SPI Configuration */
    vuint32_t CONT_SCKE:1;             /* Continuous SCK Enable */
    vuint32_t MSTR:1;                  /* Master/Slave Mode Select */
  } B;
} SPI_MCR_tag;

typedef union SPI_TCR_union_tag {      /* Transfer Count Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t SPI_TCNT:16;             /* SPI Transfer Counter */
  } B;
} SPI_TCR_tag;

typedef union SPI_MODE_CTAR_union_tag { /* Clock and Transfer Attributes Register (in Master mode) */
  vuint32_t R;
  struct {
    vuint32_t BR:4;                    /* Baud Rate Scaler */
    vuint32_t DT:4;                    /* Delay After Transfer Scaler */
    vuint32_t ASC:4;                   /* After SCK Delay Scaler */
    vuint32_t CSSCK:4;                 /* PCS to SCK Delay Scaler */
    vuint32_t PBR:2;                   /* Baud Rate Prescaler */
    vuint32_t PDT:2;                   /* Delay after Transfer Prescaler */
    vuint32_t PASC:2;                  /* After SCK Delay Prescaler */
    vuint32_t PCSSCK:2;                /* PCS to SCK Delay Prescaler */
    vuint32_t LSBFE:1;                 /* LSB First */
    vuint32_t CPHA:1;                  /* Clock Phase */
    vuint32_t CPOL:1;                  /* Clock Polarity */
    vuint32_t FMSZ:4;                  /* Frame Size */
    vuint32_t DBR:1;                   /* Double Baud Rate */
  } B;
} SPI_MODE_CTAR_tag;

typedef union SPI_MODE_CTAR_SLAVE_union_tag { /* Clock and Transfer Attributes Register (in Slave mode) */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:22;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t PP:1;                    /* Parity Polarity */
    vuint32_t PE:1;                    /* Parity Enable */
    vuint32_t CPHA:1;                  /* Clock Phase */
    vuint32_t CPOL:1;                  /* Clock Polarity */
    vuint32_t FMSZ:5;                  /* Frame Size */
  } B;
} SPI_MODE_CTAR_SLAVE_tag;

typedef union SPI_MODE_union_tag {
  SPI_MODE_CTAR_tag CTAR[6];           /* Clock and Transfer Attributes Register (in Master mode) */
  SPI_MODE_CTAR_SLAVE_tag CTAR_SLAVE[1]; /* Clock and Transfer Attributes Register (in Slave mode) */
} SPI_MODE_tag;

typedef union SPI_SR_union_tag {       /* Status Register */
  vuint32_t R;
  struct {
    vuint32_t POPNXTPTR:4;             /* Pop Next Pointer */
    vuint32_t RXCTR:4;                 /* RX FIFO Counter */
    vuint32_t TXNXTPTR:4;              /* Transmit Next Pointer */
    vuint32_t TXCTR:4;                 /* TX FIFO Counter */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t RFDF:1;                  /* Receive FIFO Drain Flag */
    vuint32_t TFIWF:1;                 /* Transmit FIFO Invalid Write Flag */
    vuint32_t RFOF:1;                  /* Receive FIFO Overflow Flag */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t SPEF:1;                  /* SPI Parity Error Flag */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t CMDTCF:1;                /* Command Transfer Complete Flag */
    vuint32_t BSYF:1;                  /* Busy Flag */
    vuint32_t TFFF:1;                  /* Transmit FIFO Fill Flag */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t TFUF:1;                  /* Transmit FIFO Underflow Flag */
    vuint32_t EOQF:1;                  /* End of Queue Flag */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t TXRXS:1;                 /* TX and RX Status */
    vuint32_t TCF:1;                   /* Transfer Complete Flag */
  } B;
} SPI_SR_tag;

typedef union SPI_RSER_union_tag {     /* DMA/Interrupt Request Select and Enable Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:14;            /* Reserved */
    vuint32_t _unused_14:1;            /* Always write the reset value to this field. */
    vuint32_t CMDFFF_DIRS:1;           /* Command FIFO Fill DMA or Interrupt Request Select */
    vuint32_t RFDF_DIRS:1;             /* Receive FIFO Drain DMA or Interrupt Request Select */
    vuint32_t RFDF_RE:1;               /* Receive FIFO Drain Request Enable */
    vuint32_t TFIWF_RE:1;              /* Transmit FIFO Invalid Write Request Enable */
    vuint32_t RFOF_RE:1;               /* Receive FIFO Overflow Request Enable */
    vuint32_t _unused_20:1;            /* Always write the reset value to this field. */
    vuint32_t SPEF_RE:1;               /* SPI Parity Error Request Enable */
    vuint32_t _unused_22:1;            /* Always write the reset value to this field. */
    vuint32_t CMDTCF_RE:1;             /* Command Transmission Complete Request Enable */
    vuint32_t TFFF_DIRS:1;             /* Transmit FIFO Fill DMA or Interrupt Request Select */
    vuint32_t TFFF_RE:1;               /* Transmit FIFO Fill Request Enable */
    vuint32_t _unused_26:1;            /* Always write the reset value to this field. */
    vuint32_t TFUF_RE:1;               /* Transmit FIFO Underflow Request Enable */
    vuint32_t EOQF_RE:1;               /* Finished Request Enable */
    vuint32_t _unused_29:1;            /* Always write the reset value to this field. */
    vuint32_t CMDFFF_RE:1;             /* Command FIFO Fill Flag Request Enable */
    vuint32_t TCF_RE:1;                /* Transmission Complete Request Enable */
  } B;
} SPI_RSER_tag;

typedef union SPI_PUSHR_PUSHR_union_tag { /* PUSH TX FIFO Register In Master Mode */
  vuint32_t R;
  struct {
    vuint32_t TXDATA:16;               /* Transmit Data */
    vuint32_t PCS:5;                   /* PCS */
    vuint32_t _unused_21:3;            /* Always write the reset value to this field. */
    vuint32_t PP_MCSC:1;               /* Parity Polarity or Mask TCSC Delay in Next Frame */
    vuint32_t PE_MASC:1;               /* Parity Enable or Mask TASC Delay in Current Frame */
    vuint32_t CTCNT:1;                 /* Clear Transfer Counter */
    vuint32_t EOQ:1;                   /* End of Queue */
    vuint32_t CTAS:3;                  /* Clock and Transfer Attributes Select */
    vuint32_t CONT:1;                  /* Continuous Peripheral Chip Select Enable */
  } B;
} SPI_PUSHR_PUSHR_tag;

typedef union SPI_PUSHR_PUSHR_SLAVE_union_tag { /* PUSH TX FIFO Register In Slave Mode */
  vuint32_t R;
  struct {
    vuint32_t TXDATA:16;               /* Transmit Data */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} SPI_PUSHR_PUSHR_SLAVE_tag;

typedef union SPI_PUSHR_union_tag {
  SPI_PUSHR_PUSHR_tag PUSHR;           /* PUSH TX FIFO Register In Master Mode */
  SPI_PUSHR_PUSHR_SLAVE_tag PUSHR_SLAVE; /* PUSH TX FIFO Register In Slave Mode */
} SPI_PUSHR_tag;

typedef union SPI_POPR_union_tag {     /* POP RX FIFO Register */
  vuint32_t R;
  struct {
    vuint32_t RXDATA:32;               /* Received Data */
  } B;
} SPI_POPR_tag;

typedef union SPI_TXFR_union_tag {     /* Transmit FIFO Registers */
  vuint32_t R;
  struct {
    vuint32_t TXDATA:16;               /* Transmit Data */
    vuint32_t TXCMD_TXDATA:16;         /* Transmit Command or Transmit Data */
  } B;
} SPI_TXFR_tag;

typedef union SPI_RXFR_union_tag {     /* Receive FIFO Registers */
  vuint32_t R;
  struct {
    vuint32_t RXDATA:32;               /* Receive Data */
  } B;
} SPI_RXFR_tag;

typedef union SPI_CTARE_union_tag {    /* Clock and Transfer Attributes Register Extended */
  vuint32_t R;
  struct {
    vuint32_t DTCP:11;                 /* Data Transfer Count Preload */
    vuint32_t _unused_11:5;            /* Reserved */
    vuint32_t FMSZE:1;                 /* Frame Size Extended */
    vuint32_t _unused_17:15;           /* Reserved */
  } B;
} SPI_CTARE_tag;

typedef union SPI_SREX_union_tag {     /* Status Register Extended */
  vuint32_t R;
  struct {
    vuint32_t CMDNXTPTR:4;             /* Command Next Pointer */
    vuint32_t CMDCTR:5;                /* CMD FIFO Counter */
    vuint32_t _unused_9:2;             /* Reserved */
    vuint32_t RXCTR4:1;                /* RX FIFO Counter[4] */
    vuint32_t _unused_12:2;            /* Reserved */
    vuint32_t TXCTR4:1;                /* TX FIFO Counter[4] */
    vuint32_t _unused_15:17;           /* Reserved */
  } B;
} SPI_SREX_tag;

struct SPI_tag {
  SPI_MCR_tag MCR;                     /* Module Configuration Register */
  uint8_t SPI_reserved0[4];
  SPI_TCR_tag TCR;                     /* Transfer Count Register */
  SPI_MODE_tag MODE;
  uint8_t SPI_reserved1[8];
  SPI_SR_tag SR;                       /* Status Register */
  SPI_RSER_tag RSER;                   /* DMA/Interrupt Request Select and Enable Register */
  SPI_PUSHR_tag PUSHR;
  SPI_POPR_tag POPR;                   /* POP RX FIFO Register */
  SPI_TXFR_tag TXFR[5];                /* Transmit FIFO Registers */
  uint8_t SPI_reserved2[44];
  SPI_RXFR_tag RXFR[5];                /* Receive FIFO Registers */
  uint8_t SPI_reserved3[140];
  SPI_CTARE_tag CTARE[6];              /* Clock and Transfer Attributes Register Extended */
  uint8_t SPI_reserved4[8];
  SPI_SREX_tag SREX;                   /* Status Register Extended */
};


/* ============================================================================
   =============================== Module: SRAMC ==============================
   ============================================================================ */

typedef union SRAMC_PRAMCR_union_tag { /* Platform RAM Control Register */
  vuint32_t R;
  struct {
    vuint32_t INITREQ:1;               /* Initialization request */
    vuint32_t IWS:2;                   /* Initialization wait cycles */
    vuint32_t _unused_3:29;            /* Reserved */
  } B;
} SRAMC_PRAMCR_tag;

typedef union SRAMC_PRAMIAS_union_tag { /* Platform RAM Initialization Address Register Start */
  vuint32_t R;
  struct {
    vuint32_t IAS:17;
    vuint32_t _unused_17:15;           /* Reserved */
  } B;
} SRAMC_PRAMIAS_tag;

typedef union SRAMC_PRAMIAE_union_tag { /* Platform RAM Initialization Address Register End */
  vuint32_t R;
  struct {
    vuint32_t IAE:17;
    vuint32_t _unused_17:15;           /* Reserved */
  } B;
} SRAMC_PRAMIAE_tag;

typedef union SRAMC_PRAMSR_union_tag { /* Platform RAM Status Register */
  vuint32_t R;
  struct {
    vuint32_t IDONE:1;
    vuint32_t IERR:1;
    vuint32_t IPEND:1;
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t AEXT:1;
    vuint32_t AERR:1;                  /* ECC Address Error */
    vuint32_t MLTERR:1;                /* ECC Multi-bit Error */
    vuint32_t SGLERR:1;                /* ECC Single-bit Error */
    vuint32_t SYND:8;                  /* ECC Syndrome Value */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} SRAMC_PRAMSR_tag;

typedef union SRAMC_PRAMECCA_union_tag { /* Platform RAM ECC Address */
  vuint32_t R;
  struct {
    vuint32_t EADR:17;
    vuint32_t _unused_17:3;            /* Reserved */
    vuint32_t EBNK:1;
    vuint32_t CTRLID:4;
    vuint32_t _unused_25:7;            /* Reserved */
  } B;
} SRAMC_PRAMECCA_tag;

struct SRAMC_tag {
  SRAMC_PRAMCR_tag PRAMCR;             /* Platform RAM Control Register */
  SRAMC_PRAMIAS_tag PRAMIAS;           /* Platform RAM Initialization Address Register Start */
  SRAMC_PRAMIAE_tag PRAMIAE;           /* Platform RAM Initialization Address Register End */
  SRAMC_PRAMSR_tag PRAMSR;             /* Platform RAM Status Register */
  SRAMC_PRAMECCA_tag PRAMECCA;         /* Platform RAM ECC Address */
};


/* ============================================================================
   =============================== Module: SRC ================================
   ============================================================================ */

typedef union SRC_SW_NCF_union_tag {   /* Software Triggered Faults Register */
  vuint32_t R;
  struct {
    vuint32_t SW_NCF1:1;               /* Software Triggered Fault 1 */
    vuint32_t SW_NCF2:1;               /* Software Triggered Fault 2 */
    vuint32_t SW_NCF3:1;               /* Software Triggered Fault 3 */
    vuint32_t SW_NCF4:1;               /* Software Triggered Fault 4 */
    vuint32_t SW_NCF5:1;               /* Software Triggered Fault 5 */
    vuint32_t RESERVED:27;
  } B;
} SRC_SW_NCF_tag;

typedef union SRC_GMAC_0_CTRL_STS_union_tag { /* GMAC Control Register */
  vuint32_t R;
  struct {
    vuint32_t PHY_MODE:1;
    vuint32_t PHY_INTF_SEL:3;          /* PHY Interface Select */
    vuint32_t _unused_4:6;             /* Reserved */
    vuint32_t FTM0_SEL:1;              /* Flextimer_0 Select */
    vuint32_t FTM1_SEL:1;              /* Flextimer_1 Select */
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} SRC_GMAC_0_CTRL_STS_tag;

typedef union SRC_HSE_CM7_STATUS_REG_union_tag { /* HSE CM7 status register */
  vuint32_t R;
  struct {
    vuint32_t HSE_CM7_SLEEP_STAT:1;    /* HSE CM7 core sleep status */
    vuint32_t RESERVED:31;
  } B;
} SRC_HSE_CM7_STATUS_REG_tag;

typedef union SRC_CMU_STATUS_REG1_union_tag { /* CMUs status register 1 */
  vuint32_t R;
  struct {
    vuint32_t FLL_FHH_STAT:32;         /* CMUs FLL and FHH interrupt event status register 1. Resettable on destructive reset. */
  } B;
} SRC_CMU_STATUS_REG1_tag;

typedef union SRC_CMU_STATUS_REG2_union_tag { /* CMUs status register 2 */
  vuint32_t R;
  struct {
    vuint32_t FLL_FHH_STAT:6;          /* CMUs FLL and FHH interrupt event status register 2. Resettable on destructive reset. */
    vuint32_t RESERVED:26;
  } B;
} SRC_CMU_STATUS_REG2_tag;

typedef union SRC_FCCU_EOUT_OVERRIDE_CLEAR_REG_union_tag { /* FCCU EOUT override clear register */
  vuint32_t R;
  struct {
    vuint32_t EOUT_OVERRIDE_CLEAR:1;   /* EOUT Override Clear */
    vuint32_t EOUT_OVERRIDE_DISABLE_DURING_SELFTEST:1;
    vuint32_t RESERVED:30;             /* Reserved */
  } B;
} SRC_FCCU_EOUT_OVERRIDE_CLEAR_REG_tag;

typedef union SRC_GPR21_union_tag {    /* GPR21 Register */
  vuint32_t R;
  struct {
    vuint32_t PCIE_PARITY_MODE_DATA:20; /* GPR21 Data */
    vuint32_t RESERVED:12;             /* Reserved */
  } B;
} SRC_GPR21_tag;

typedef union SRC_DEBUG_CONTROL_union_tag { /* Debug Control Register */
  vuint32_t R;
  struct {
    vuint32_t DEBUG_CLK_DISABLE:1;     /* Disable clocks of debug and trace components in functional mode */
    vuint32_t CA53_0_DBGL1RSTDISABLE:1; /* CA53_0_DBGL1RSTDISABLE */
    vuint32_t CA53_1_DBGL1RSTDISABLE:1; /* CA53_1_DBGL1RSTDISABLE */
    vuint32_t DBG_SETUP_DONE:1;        /* Status of Debug Setup Done by Debugger */
    vuint32_t JTAG_ACTIVE:1;           /* Status of JTAG_ACTIVE, when high suggests debugger has established connection to TAPs */
    vuint32_t CA53_0_L2RSTDISABLE:1;   /* Drives the L2RSTDISABLE input of Cortex-A53 Cluster 0 */
    vuint32_t CA53_1_L2RSTDISABLE:1;   /* Drives the L2RSTDISABLE input of Cortex-A53 Cluster 1. */
    vuint32_t DBG_RST_MSK_0A:1;        /* Used to mask nPRESETDBG of Cortex A53 cores from system Functional reset. */
    vuint32_t DBG_RST_MSK_1A:1;        /* Used to mask Debug domain reset from system Functional reset. */
    vuint32_t READY_FOR_DEBUG:1;       /* Handshake bit with Debugger */
    vuint32_t RESERVED:22;             /* Reserved */
  } B;
} SRC_DEBUG_CONTROL_tag;

typedef union SRC_TIMESTAMP_CONTROL_REGISTER_union_tag { /* Time Stamp Control Register */
  vuint32_t R;
  struct {
    vuint32_t CAN_TS_CNT_SEL:2;        /* Time Stamp Counter Select */
    vuint32_t TS_ENABLE:1;             /* Timestamp module enable control */
    vuint32_t _unused_3:29;
  } B;
} SRC_TIMESTAMP_CONTROL_REGISTER_tag;

typedef union SRC_FLEXRAY_OS_TICK_INPUT_SELECT_REG_union_tag { /* FlexRay OS Tick input select register */
  vuint32_t R;
  struct {
    vuint32_t FLEXRAY_0_STOPWATCH_MUX_SELECT:2; /* FlexRay_0 stopwatch mux select */
    vuint32_t FLEXRAY_1_STOPWATCH_MUX_SELECT:2; /* FlexRay_1 stopwatch mux select */
    vuint32_t RESERVED:28;             /* Reserved */
  } B;
} SRC_FLEXRAY_OS_TICK_INPUT_SELECT_REG_tag;

struct SRC_tag {
  SRC_SW_NCF_tag SW_NCF;               /* Software Triggered Faults Register */
  SRC_GMAC_0_CTRL_STS_tag GMAC_0_CTRL_STS; /* GMAC Control Register */
  uint8_t SRC_reserved0[4];
  SRC_HSE_CM7_STATUS_REG_tag HSE_CM7_STATUS_REG; /* HSE CM7 status register */
  uint8_t SRC_reserved1[24];
  SRC_CMU_STATUS_REG1_tag CMU_STATUS_REG1; /* CMUs status register 1 */
  SRC_CMU_STATUS_REG2_tag CMU_STATUS_REG2; /* CMUs status register 2 */
  SRC_FCCU_EOUT_OVERRIDE_CLEAR_REG_tag FCCU_EOUT_OVERRIDE_CLEAR_REG; /* FCCU EOUT override clear register */
  uint8_t SRC_reserved2[32];
  SRC_GPR21_tag GPR21;                 /* GPR21 Register */
  uint8_t SRC_reserved3[116];
  SRC_DEBUG_CONTROL_tag DEBUG_CONTROL; /* Debug Control Register */
  uint8_t SRC_reserved4[32];
  SRC_TIMESTAMP_CONTROL_REGISTER_tag TIMESTAMP_CONTROL_REGISTER; /* Time Stamp Control Register */
  SRC_FLEXRAY_OS_TICK_INPUT_SELECT_REG_tag FLEXRAY_OS_TICK_INPUT_SELECT_REG; /* FlexRay OS Tick input select register */
};


/* ============================================================================
   =============================== Module: STCU2 ==============================
   ============================================================================ */

typedef union STCU2_RUNSW_union_tag {  /* STCU2 Run Software */
  vuint32_t R;
  struct {
    vuint32_t RUNSW:1;                 /* RUNSW */
    vuint32_t RUNSW_ABORT:1;           /* RUNSW_ABORT */
    vuint32_t _unused_2:6;             /* Reserved */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t LBIE:1;                  /* LBIST Interrupt Enable */
    vuint32_t MBIE:1;                  /* MBIE */
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} STCU2_RUNSW_tag;

typedef union STCU2_SKC_union_tag {    /* STCU2 SK Code */
  vuint32_t R;
  struct {
    vuint32_t SKC:32;                  /* STCU2 SK Code */
  } B;
} STCU2_SKC_tag;

typedef union STCU2_CFG_union_tag {    /* STCU2 Configuration */
  vuint32_t R;
  struct {
    vuint32_t CLK_CFG:3;               /* CLK_CFG */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t WRP:1;                   /* WRP */
    vuint32_t _unused_9:4;             /* Reserved */
    vuint32_t LB_DELAY:8;
    vuint32_t PTR:10;                  /* PTR */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} STCU2_CFG_tag;

typedef union STCU2_WDG_union_tag {    /* STCU2 Watchdog Granularity */
  vuint32_t R;
  struct {
    vuint32_t WDGEOC:32;               /* WDGEOC */
  } B;
} STCU2_WDG_tag;

typedef union STCU2_INT_FLG_union_tag { /* STCU2 Interrupt Flag */
  vuint32_t R;
  struct {
    vuint32_t LBIFLG:1;                /* LBIFLG */
    vuint32_t MBIFLG:1;                /* MBIFLG */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} STCU2_INT_FLG_tag;

typedef union STCU2_ERR_STAT_union_tag { /* STCU2 Error */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:5;             /* Reserved */
    vuint32_t _unused_5:3;             /* Reserved */
    vuint32_t RFSF:1;
    vuint32_t UFSF:1;
    vuint32_t _unused_10:6;            /* Reserved */
    vuint32_t INVPSW:1;
    vuint32_t ENGESW:1;
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t WDTOSW:1;                /* WDTOSW */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t _unused_21:3;            /* Reserved */
    vuint32_t ABORTSW:1;               /* ABORTSW */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t _unused_26:6;            /* Reserved */
  } B;
} STCU2_ERR_STAT_tag;

typedef union STCU2_ERR_FM_union_tag { /* STCU2 Error FM */
  vuint32_t R;
  struct {
    vuint32_t INVPUFM:1;               /* INVPUFM */
    vuint32_t ENGEUFM:1;               /* ENGEUFM */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t WDTOUFM:1;               /* WDTOUFM */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:27;            /* Reserved */
  } B;
} STCU2_ERR_FM_tag;

typedef union STCU2_LBSSW_union_tag {  /* STCU2 Online LBIST Status */
  vuint32_t R;
  struct {
    vuint32_t LBSSW0:1;
    vuint32_t LBSSW1:1;
    vuint32_t LBSSW2:1;
    vuint32_t LBSSW3:1;
    vuint32_t LBSSW4:1;
    vuint32_t LBSSW5:1;
    vuint32_t LBSSW6:1;
    vuint32_t LBSSW7:1;
    vuint32_t LBSSW8:1;
    vuint32_t LBSSW9:1;
    vuint32_t LBSSW10:1;
    vuint32_t LBSSW11:1;
    vuint32_t LBSSW12:1;
    vuint32_t LBSSW13:1;
    vuint32_t LBSSW14:1;
    vuint32_t LBSSW15:1;
    vuint32_t LBSSW16:1;
    vuint32_t LBSSW17:1;
    vuint32_t LBSSW18:1;
    vuint32_t LBSSW19:1;
    vuint32_t LBSSW20:1;
    vuint32_t LBSSW21:1;
    vuint32_t LBSSW22:1;
    vuint32_t LBSSW23:1;
    vuint32_t LBSSW24:1;
    vuint32_t LBSSW25:1;
    vuint32_t LBSSW26:1;
    vuint32_t LBSSW27:1;
    vuint32_t LBSSW28:1;
    vuint32_t LBSSW29:1;
    vuint32_t LBSSW30:1;
    vuint32_t LBSSW31:1;
  } B;
} STCU2_LBSSW_tag;

typedef union STCU2_LBSSW1_union_tag { /* STCU2 Online LBIST Status */
  vuint32_t R;
  struct {
    vuint32_t LBSSW32:1;               /* LBSSW0 */
    vuint32_t LBSSW33:1;               /* LBSSW1 */
    vuint32_t LBSSW34:1;               /* LBSSW2 */
    vuint32_t LBSSW35:1;               /* LBSSW3 */
    vuint32_t LBSSW36:1;               /* LBSSW4 */
    vuint32_t LBSSW37:1;               /* LBSSW5 */
    vuint32_t LBSSW38:1;               /* LBSSW6 */
    vuint32_t LBSSW39:1;               /* LBSSW7 */
    vuint32_t LBSSW40:1;               /* LBSSW8 */
    vuint32_t LBSSW41:1;               /* LBSSW9 */
    vuint32_t LBSSW42:1;               /* LBSSW10 */
    vuint32_t LBSSW43:1;               /* LBSSW11 */
    vuint32_t LBSSW44:1;               /* LBSSW12 */
    vuint32_t LBSSW45:1;               /* LBSSW13 */
    vuint32_t LBSSW46:1;               /* LBSSW14 */
    vuint32_t LBSSW47:1;               /* LBSSW15 */
    vuint32_t LBSSW48:1;               /* LBSSW16 */
    vuint32_t LBSSW49:1;               /* LBSSW17 */
    vuint32_t LBSSW50:1;               /* LBSSW18 */
    vuint32_t LBSSW51:1;               /* LBSSW19 */
    vuint32_t LBSSW52:1;               /* LBSSW20 */
    vuint32_t LBSSW53:1;               /* LBSSW21 */
    vuint32_t LBSSW54:1;               /* LBSSW22 */
    vuint32_t LBSSW55:1;               /* LBSSW23 */
    vuint32_t LBSSW56:1;               /* LBSSW24 */
    vuint32_t LBSSW57:1;               /* LBSSW25 */
    vuint32_t LBSSW58:1;               /* LBSSW26 */
    vuint32_t LBSSW59:1;               /* LBSSW27 */
    vuint32_t _unused_28:4;            /* Reserved */
  } B;
} STCU2_LBSSW1_tag;

typedef union STCU2_LBESW_union_tag {  /* STCU2 Online LBIST End Flag */
  vuint32_t R;
  struct {
    vuint32_t LBESW0:1;                /* LBESW0 */
    vuint32_t LBESW1:1;                /* LBESW1 */
    vuint32_t LBESW2:1;                /* LBESW2 */
    vuint32_t LBESW3:1;                /* LBESW3 */
    vuint32_t LBESW4:1;                /* LBESW4 */
    vuint32_t LBESW5:1;                /* LBESW5 */
    vuint32_t LBESW6:1;                /* LBESW6 */
    vuint32_t LBESW7:1;                /* LBESW7 */
    vuint32_t LBESW8:1;                /* LBESW8 */
    vuint32_t LBESW9:1;                /* LBESW9 */
    vuint32_t LBESW10:1;               /* LBESW10 */
    vuint32_t LBESW11:1;               /* LBESW11 */
    vuint32_t LBESW12:1;               /* LBESW12 */
    vuint32_t LBESW13:1;               /* LBESW13 */
    vuint32_t LBESW14:1;               /* LBESW14 */
    vuint32_t LBESW15:1;               /* LBESW15 */
    vuint32_t LBESW16:1;               /* LBESW16 */
    vuint32_t LBESW17:1;               /* LBESW17 */
    vuint32_t LBESW18:1;               /* LBESW18 */
    vuint32_t LBESW19:1;               /* LBESW19 */
    vuint32_t LBESW20:1;               /* LBESW20 */
    vuint32_t LBESW21:1;               /* LBESW21 */
    vuint32_t LBESW22:1;               /* LBESW22 */
    vuint32_t LBESW23:1;               /* LBESW23 */
    vuint32_t LBESW24:1;               /* LBESW24 */
    vuint32_t LBESW25:1;               /* LBESW25 */
    vuint32_t LBESW26:1;               /* LBESW26 */
    vuint32_t LBESW27:1;               /* LBESW27 */
    vuint32_t LBESW28:1;               /* LBESW28 */
    vuint32_t LBESW29:1;               /* LBESW29 */
    vuint32_t LBESW30:1;               /* LBESW30 */
    vuint32_t LBESW31:1;               /* LBESW31 */
  } B;
} STCU2_LBESW_tag;

typedef union STCU2_LBESW1_union_tag { /* STCU2 Online LBIST End Flag */
  vuint32_t R;
  struct {
    vuint32_t LBESW32:1;               /* LBESW */
    vuint32_t LBESW33:1;               /* LBESW */
    vuint32_t LBESW34:1;               /* LBESW */
    vuint32_t LBESW35:1;               /* LBESW */
    vuint32_t LBESW36:1;               /* LBESW */
    vuint32_t LBESW37:1;               /* LBESW */
    vuint32_t LBESW38:1;               /* LBESW */
    vuint32_t LBESW39:1;               /* LBESW */
    vuint32_t LBESW40:1;               /* LBESW */
    vuint32_t LBESW41:1;               /* LBESW */
    vuint32_t LBESW42:1;               /* LBESW */
    vuint32_t LBESW43:1;               /* LBESW */
    vuint32_t LBESW44:1;               /* LBESW */
    vuint32_t LBESW45:1;               /* LBESW */
    vuint32_t LBESW46:1;               /* LBESW */
    vuint32_t LBESW47:1;               /* LBESW */
    vuint32_t LBESW48:1;               /* LBESW */
    vuint32_t LBESW49:1;               /* LBESW */
    vuint32_t LBESW50:1;               /* LBESW */
    vuint32_t LBESW51:1;               /* LBESW */
    vuint32_t LBESW52:1;               /* LBESW */
    vuint32_t LBESW53:1;               /* LBESW */
    vuint32_t LBESW54:1;               /* LBESW */
    vuint32_t LBESW55:1;               /* LBESW */
    vuint32_t LBESW56:1;               /* LBESW */
    vuint32_t LBESW57:1;               /* LBESW */
    vuint32_t LBESW58:1;               /* LBESW */
    vuint32_t LBESW59:1;               /* LBESW */
    vuint32_t _unused_28:4;            /* Reserved */
  } B;
} STCU2_LBESW1_tag;

typedef union STCU2_LBRMSW1_union_tag { /* STCU2 Online LBIST Reset Management */
  vuint32_t R;
  struct {
    vuint32_t LBRMSW32:1;              /* LBRMSW */
    vuint32_t LBRMSW33:1;              /* LBRMSW */
    vuint32_t LBRMSW34:1;              /* LBRMSW */
    vuint32_t LBRMSW35:1;              /* LBRMSW */
    vuint32_t LBRMSW36:1;              /* LBRMSW */
    vuint32_t LBRMSW37:1;              /* LBRMSW */
    vuint32_t LBRMSW38:1;              /* LBRMSW */
    vuint32_t LBRMSW39:1;              /* LBRMSW */
    vuint32_t LBRMSW40:1;              /* LBRMSW */
    vuint32_t LBRMSW41:1;              /* LBRMSW */
    vuint32_t LBRMSW42:1;              /* LBRMSW */
    vuint32_t LBRMSW43:1;              /* LBRMSW */
    vuint32_t LBRMSW44:1;              /* LBRMSW */
    vuint32_t LBRMSW45:1;              /* LBRMSW */
    vuint32_t LBRMSW46:1;              /* LBRMSW */
    vuint32_t LBRMSW47:1;              /* LBRMSW */
    vuint32_t LBRMSW48:1;              /* LBRMSW */
    vuint32_t LBRMSW49:1;              /* LBRMSW */
    vuint32_t LBRMSW50:1;              /* LBRMSW */
    vuint32_t LBRMSW51:1;              /* LBRMSW */
    vuint32_t LBRMSW52:1;              /* LBRMSW */
    vuint32_t LBRMSW53:1;              /* LBRMSW */
    vuint32_t LBRMSW54:1;              /* LBRMSW */
    vuint32_t LBRMSW55:1;              /* LBRMSW */
    vuint32_t LBRMSW56:1;              /* LBRMSW */
    vuint32_t LBRMSW57:1;              /* LBRMSW */
    vuint32_t LBRMSW58:1;              /* LBRMSW */
    vuint32_t LBRMSW59:1;              /* LBRMSW */
    vuint32_t _unused_28:4;            /* Reserved */
  } B;
} STCU2_LBRMSW1_tag;

typedef union STCU2_LBUFM_union_tag {  /* STCU2 Online LBIST Unrecoverable FM */
  vuint32_t R;
  struct {
    vuint32_t LBUFM0:1;
    vuint32_t LBUFM1:1;
    vuint32_t LBUFM2:1;
    vuint32_t LBUFM3:1;
    vuint32_t LBUFM4:1;
    vuint32_t LBUFM5:1;
    vuint32_t LBUFM6:1;
    vuint32_t LBUFM7:1;
    vuint32_t LBUFM8:1;
    vuint32_t LBUFM9:1;
    vuint32_t LBUFM10:1;
    vuint32_t LBUFM11:1;
    vuint32_t LBUFM12:1;
    vuint32_t LBUFM13:1;
    vuint32_t LBUFM14:1;
    vuint32_t LBUFM15:1;
    vuint32_t LBUFM16:1;
    vuint32_t LBUFM17:1;
    vuint32_t LBUFM18:1;
    vuint32_t LBUFM19:1;
    vuint32_t LBUFM20:1;
    vuint32_t LBUFM21:1;
    vuint32_t LBUFM22:1;
    vuint32_t LBUFM23:1;
    vuint32_t LBUFM24:1;
    vuint32_t LBUFM25:1;
    vuint32_t LBUFM26:1;
    vuint32_t LBUFM27:1;
    vuint32_t LBUFM28:1;
    vuint32_t LBUFM29:1;
    vuint32_t LBUFM30:1;
    vuint32_t LBUFM31:1;
  } B;
} STCU2_LBUFM_tag;

typedef union STCU2_LBUFM1_union_tag { /* STCU2 Online LBIST Unrecoverable FM */
  vuint32_t R;
  struct {
    vuint32_t LBUFM32:1;
    vuint32_t LBUFM33:1;
    vuint32_t LBUFM34:1;
    vuint32_t LBUFM35:1;
    vuint32_t LBUFM36:1;
    vuint32_t LBUFM37:1;
    vuint32_t LBUFM38:1;
    vuint32_t LBUFM39:1;
    vuint32_t LBUFM40:1;
    vuint32_t LBUFM41:1;
    vuint32_t LBUFM42:1;
    vuint32_t LBUFM43:1;
    vuint32_t LBUFM44:1;
    vuint32_t LBUFM45:1;
    vuint32_t LBUFM46:1;
    vuint32_t LBUFM47:1;
    vuint32_t LBUFM48:1;
    vuint32_t LBUFM49:1;
    vuint32_t LBUFM50:1;
    vuint32_t LBUFM51:1;
    vuint32_t LBUFM52:1;
    vuint32_t LBUFM53:1;
    vuint32_t LBUFM54:1;
    vuint32_t LBUFM55:1;
    vuint32_t LBUFM56:1;
    vuint32_t LBUFM57:1;
    vuint32_t LBUFM58:1;
    vuint32_t LBUFM59:1;
    vuint32_t _unused_28:4;            /* Reserved */
  } B;
} STCU2_LBUFM1_tag;

typedef union STCU2_MBSSW_union_tag {  /* STCU2 Online MBIST Status */
  vuint32_t R;
  struct {
    vuint32_t MBSSW0:1;                /* MBSSW0 */
    vuint32_t MBSSW1:1;                /* MBSSW1 */
    vuint32_t MBSSW2:1;                /* MBSSW2 */
    vuint32_t MBSSW3:1;                /* MBSSW3 */
    vuint32_t MBSSW4:1;                /* MBSSW4 */
    vuint32_t MBSSW5:1;                /* MBSSW5 */
    vuint32_t MBSSW6:1;                /* MBSSW6 */
    vuint32_t MBSSW7:1;                /* MBSSW7 */
    vuint32_t MBSSW8:1;                /* MBSSW8 */
    vuint32_t MBSSW9:1;                /* MBSSW9 */
    vuint32_t MBSSW10:1;               /* MBSSW10 */
    vuint32_t MBSSW11:1;               /* MBSSW11 */
    vuint32_t MBSSW12:1;               /* MBSSW12 */
    vuint32_t MBSSW13:1;               /* MBSSW13 */
    vuint32_t MBSSW14:1;               /* MBSSW14 */
    vuint32_t MBSSW15:1;               /* MBSSW15 */
    vuint32_t MBSSW16:1;               /* MBSSW16 */
    vuint32_t MBSSW17:1;               /* MBSSW17 */
    vuint32_t MBSSW18:1;               /* MBSSW18 */
    vuint32_t MBSSW19:1;               /* MBSSW19 */
    vuint32_t MBSSW20:1;               /* MBSSW20 */
    vuint32_t MBSSW21:1;               /* MBSSW21 */
    vuint32_t MBSSW22:1;               /* MBSSW22 */
    vuint32_t MBSSW23:1;               /* MBSSW23 */
    vuint32_t MBSSW24:1;               /* MBSSW24 */
    vuint32_t MBSSW25:1;               /* MBSSW25 */
    vuint32_t MBSSW26:1;               /* MBSSW26 */
    vuint32_t MBSSW27:1;               /* MBSSW27 */
    vuint32_t MBSSW28:1;               /* MBSSW28 */
    vuint32_t MBSSW29:1;               /* MBSSW29 */
    vuint32_t MBSSW30:1;               /* MBSSW30 */
    vuint32_t MBSSW31:1;               /* MBSSW31 */
  } B;
} STCU2_MBSSW_tag;

typedef union STCU2_MBSSW3_union_tag { /* STCU2 Online MBIST Status */
  vuint32_t R;
  struct {
    vuint32_t MBSSW96:1;               /* MBSSW */
    vuint32_t MBSSW97:1;               /* MBSSW */
    vuint32_t MBSSW98:1;               /* MBSSW */
    vuint32_t MBSSW99:1;               /* MBSSW */
    vuint32_t MBSSW100:1;              /* MBSSW */
    vuint32_t MBSSW101:1;              /* MBSSW */
    vuint32_t MBSSW102:1;              /* MBSSW */
    vuint32_t MBSSW103:1;              /* MBSSW */
    vuint32_t MBSSW104:1;              /* MBSSW */
    vuint32_t MBSSW105:1;              /* MBSSW */
    vuint32_t MBSSW106:1;              /* MBSSW */
    vuint32_t MBSSW107:1;              /* MBSSW */
    vuint32_t MBSSW108:1;              /* MBSSW */
    vuint32_t MBSSW109:1;              /* MBSSW */
    vuint32_t _unused_14:18;           /* Reserved */
  } B;
} STCU2_MBSSW3_tag;

typedef union STCU2_MBESW_union_tag {  /* STCU2 Online MBIST End Flag */
  vuint32_t R;
  struct {
    vuint32_t MBESW0:1;                /* MBESWn */
    vuint32_t MBESW1:1;                /* MBESWn */
    vuint32_t MBESW2:1;                /* MBESWn */
    vuint32_t MBESW3:1;                /* MBESWn */
    vuint32_t MBESW4:1;                /* MBESWn */
    vuint32_t MBESW5:1;                /* MBESWn */
    vuint32_t MBESW6:1;                /* MBESWn */
    vuint32_t MBESW7:1;                /* MBESWn */
    vuint32_t MBESW8:1;                /* MBESWn */
    vuint32_t MBESW9:1;                /* MBESWn */
    vuint32_t MBESW10:1;               /* MBESWn */
    vuint32_t MBESW11:1;               /* MBESWn */
    vuint32_t MBESW12:1;               /* MBESWn */
    vuint32_t MBESW13:1;               /* MBESWn */
    vuint32_t MBESW14:1;               /* MBESWn */
    vuint32_t MBESW15:1;               /* MBESWn */
    vuint32_t MBESW16:1;               /* MBESWn */
    vuint32_t MBESW17:1;               /* MBESWn */
    vuint32_t MBESW18:1;               /* MBESWn */
    vuint32_t MBESW19:1;               /* MBESWn */
    vuint32_t MBESW20:1;               /* MBESWn */
    vuint32_t MBESW21:1;               /* MBESWn */
    vuint32_t MBESW22:1;               /* MBESWn */
    vuint32_t MBESW23:1;               /* MBESWn */
    vuint32_t MBESW24:1;               /* MBESWn */
    vuint32_t MBESW25:1;               /* MBESWn */
    vuint32_t MBESW26:1;               /* MBESWn */
    vuint32_t MBESW27:1;               /* MBESWn */
    vuint32_t MBESW28:1;               /* MBESWn */
    vuint32_t MBESW29:1;               /* MBESWn */
    vuint32_t MBESW30:1;               /* MBESWn */
    vuint32_t MBESW31:1;               /* MBESWn */
  } B;
} STCU2_MBESW_tag;

typedef union STCU2_MBESW3_union_tag { /* STCU2 Online MBIST End Flag */
  vuint32_t R;
  struct {
    vuint32_t MBESW96:1;               /* MBESW */
    vuint32_t MBESW97:1;               /* MBESW */
    vuint32_t MBESW98:1;               /* MBESW */
    vuint32_t MBESW99:1;               /* MBESW */
    vuint32_t MBESW100:1;              /* MBESW */
    vuint32_t MBESW101:1;              /* MBESW */
    vuint32_t MBESW102:1;              /* MBESW */
    vuint32_t MBESW103:1;              /* MBESW */
    vuint32_t MBESW104:1;              /* MBESW */
    vuint32_t MBESW105:1;              /* MBESW */
    vuint32_t MBESW106:1;              /* MBESW */
    vuint32_t MBESW107:1;              /* MBESW */
    vuint32_t MBESW108:1;              /* MBESW */
    vuint32_t MBESW109:1;              /* MBESW */
    vuint32_t _unused_14:18;           /* Reserved */
  } B;
} STCU2_MBESW3_tag;

typedef union STCU2_MBUFM_union_tag {  /* STCU2 MBIST Unrecoverable FM */
  vuint32_t R;
  struct {
    vuint32_t MBUFM0:1;                /* MBUFMn */
    vuint32_t MBUFM1:1;                /* MBUFMn */
    vuint32_t MBUFM2:1;                /* MBUFMn */
    vuint32_t MBUFM3:1;                /* MBUFMn */
    vuint32_t MBUFM4:1;                /* MBUFMn */
    vuint32_t MBUFM5:1;                /* MBUFMn */
    vuint32_t MBUFM6:1;                /* MBUFMn */
    vuint32_t MBUFM7:1;                /* MBUFMn */
    vuint32_t MBUFM8:1;                /* MBUFMn */
    vuint32_t MBUFM9:1;                /* MBUFMn */
    vuint32_t MBUFM10:1;               /* MBUFMn */
    vuint32_t MBUFM11:1;               /* MBUFMn */
    vuint32_t MBUFM12:1;               /* MBUFMn */
    vuint32_t MBUFM13:1;               /* MBUFMn */
    vuint32_t MBUFM14:1;               /* MBUFMn */
    vuint32_t MBUFM15:1;               /* MBUFMn */
    vuint32_t MBUFM16:1;               /* MBUFMn */
    vuint32_t MBUFM17:1;               /* MBUFMn */
    vuint32_t MBUFM18:1;               /* MBUFMn */
    vuint32_t MBUFM19:1;               /* MBUFMn */
    vuint32_t MBUFM20:1;               /* MBUFMn */
    vuint32_t MBUFM21:1;               /* MBUFMn */
    vuint32_t MBUFM22:1;               /* MBUFMn */
    vuint32_t MBUFM23:1;               /* MBUFMn */
    vuint32_t MBUFM24:1;               /* MBUFMn */
    vuint32_t MBUFM25:1;               /* MBUFMn */
    vuint32_t MBUFM26:1;               /* MBUFMn */
    vuint32_t MBUFM27:1;               /* MBUFMn */
    vuint32_t MBUFM28:1;               /* MBUFMn */
    vuint32_t MBUFM29:1;               /* MBUFMn */
    vuint32_t MBUFM30:1;               /* MBUFMn */
    vuint32_t MBUFM31:1;               /* MBUFMn */
  } B;
} STCU2_MBUFM_tag;

typedef union STCU2_MBUFM3_union_tag { /* STCU2 MBIST Unrecoverable FM */
  vuint32_t R;
  struct {
    vuint32_t MBUFM96:1;               /* MBESW */
    vuint32_t MBUFM97:1;               /* MBESW */
    vuint32_t MBUFM98:1;               /* MBESW */
    vuint32_t MBUFM99:1;               /* MBESW */
    vuint32_t MBUFM100:1;              /* MBESW */
    vuint32_t MBUFM101:1;              /* MBESW */
    vuint32_t MBUFM102:1;              /* MBESW */
    vuint32_t MBUFM103:1;              /* MBESW */
    vuint32_t MBUFM104:1;              /* MBESW */
    vuint32_t MBUFM105:1;              /* MBESW */
    vuint32_t MBUFM106:1;              /* MBESW */
    vuint32_t MBUFM107:1;              /* MBESW */
    vuint32_t MBUFM108:1;              /* MBESW */
    vuint32_t MBUFM109:1;              /* MBESW */
    vuint32_t _unused_14:18;           /* Reserved */
  } B;
} STCU2_MBUFM3_tag;

typedef union STCU2_LB_CTRL_union_tag { /* STCU2 LBIST Control */
  vuint32_t R;
  struct {
    vuint32_t CWS:6;
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t SCEN_ON:4;
    vuint32_t SCEN_OFF:4;
    vuint32_t SHS:3;
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t PTR:10;
    vuint32_t CSM:1;
  } B;
} STCU2_LB_CTRL_tag;

typedef union STCU2_LB_PCS_union_tag { /* STCU2 LBIST PC Stop */
  vuint32_t R;
  struct {
    vuint32_t PCS:26;                  /* PCS */
    vuint32_t _unused_26:6;            /* Reserved */
  } B;
} STCU2_LB_PCS_tag;

typedef union STCU2_LB_MISRELSW_union_tag { /* STCU2 Online LBIST MISR Expected Low */
  vuint32_t R;
  struct {
    vuint32_t MISRESWX:32;             /* MISRESWx */
  } B;
} STCU2_LB_MISRELSW_tag;

typedef union STCU2_LB_MISREHSW_union_tag { /* STCU2 Online LBIST MISR Expected High */
  vuint32_t R;
  struct {
    vuint32_t MISRESWX:32;             /* MISRESWx */
  } B;
} STCU2_LB_MISREHSW_tag;

typedef union STCU2_LB_MISRRLSW_union_tag { /* STCU2 Online LBIST MISR Read Low */
  vuint32_t R;
  struct {
    vuint32_t MISRRSWX:32;             /* MISRRSWx */
  } B;
} STCU2_LB_MISRRLSW_tag;

typedef union STCU2_LB_MISRRHSW_union_tag { /* STCU2 Online LBIST MISR Read High */
  vuint32_t R;
  struct {
    vuint32_t MISRRSWX:32;             /* MISRRSWx */
  } B;
} STCU2_LB_MISRRHSW_tag;

typedef struct STCU2_LB_struct_tag {
  STCU2_LB_CTRL_tag CTRL;              /* STCU2 LBIST Control */
  STCU2_LB_PCS_tag PCS;                /* STCU2 LBIST PC Stop */
  uint8_t LB_reserved0[24];
  STCU2_LB_MISRELSW_tag MISRELSW;      /* STCU2 Online LBIST MISR Expected Low */
  STCU2_LB_MISREHSW_tag MISREHSW;      /* STCU2 Online LBIST MISR Expected High */
  STCU2_LB_MISRRLSW_tag MISRRLSW;      /* STCU2 Online LBIST MISR Read Low */
  STCU2_LB_MISRRHSW_tag MISRRHSW;      /* STCU2 Online LBIST MISR Read High */
  uint8_t LB_reserved1[16];
} STCU2_LB_tag;

typedef union STCU2_ALGOSEL_union_tag { /* STCU2 Algorithm Select */
  vuint32_t R;
  struct {
    vuint32_t ALGOSEL0:1;              /* ALGOSELn */
    vuint32_t ALGOSEL1:1;              /* ALGOSELn */
    vuint32_t ALGOSEL2:1;              /* ALGOSELn */
    vuint32_t ALGOSEL3:1;              /* ALGOSELn */
    vuint32_t ALGOSEL4:1;              /* ALGOSELn */
    vuint32_t ALGOSEL5:1;              /* ALGOSELn */
    vuint32_t ALGOSEL6:1;              /* ALGOSELn */
    vuint32_t ALGOSEL7:1;              /* ALGOSELn */
    vuint32_t ALGOSEL8:1;              /* ALGOSELn */
    vuint32_t ALGOSEL9:1;              /* ALGOSELn */
    vuint32_t ALGOSEL10:1;             /* ALGOSELn */
    vuint32_t ALGOSEL11:1;             /* ALGOSELn */
    vuint32_t ALGOSEL12:1;             /* ALGOSELn */
    vuint32_t ALGOSEL13:1;             /* ALGOSELn */
    vuint32_t ALGOSEL14:1;             /* ALGOSELn */
    vuint32_t ALGOSEL15:1;             /* ALGOSELn */
    vuint32_t ALGOSEL16:1;             /* ALGOSELn */
    vuint32_t ALGOSEL17:1;             /* ALGOSELn */
    vuint32_t ALGOSEL18:1;             /* ALGOSELn */
    vuint32_t ALGOSEL19:1;             /* ALGOSELn */
    vuint32_t ALGOSEL20:1;             /* ALGOSELn */
    vuint32_t ALGOSEL21:1;             /* ALGOSELn */
    vuint32_t ALGOSEL22:1;             /* ALGOSELn */
    vuint32_t ALGOSEL23:1;             /* ALGOSELn */
    vuint32_t ALGOSEL24:1;             /* ALGOSELn */
    vuint32_t ALGOSEL25:1;             /* ALGOSELn */
    vuint32_t ALGOSEL26:1;             /* ALGOSELn */
    vuint32_t ALGOSEL27:1;             /* ALGOSELn */
    vuint32_t ALGOSEL28:1;             /* ALGOSELn */
    vuint32_t ALGOSEL29:1;             /* ALGOSELn */
    vuint32_t ALGOSEL30:1;             /* ALGOSELn */
    vuint32_t ALGOSEL31:1;             /* ALGOSELn */
  } B;
} STCU2_ALGOSEL_tag;

typedef union STCU2_STGGR_union_tag {  /* STCU2 MBIST Stagger */
  vuint32_t R;
  struct {
    vuint32_t STAG:32;                 /* STAG */
  } B;
} STCU2_STGGR_tag;

typedef union STCU2_BSTART_union_tag { /* STCU2 BIST Start */
  vuint32_t R;
  struct {
    vuint32_t BSTART0:1;               /* BSTARTn */
    vuint32_t BSTART1:1;               /* BSTARTn */
    vuint32_t BSTART2:1;               /* BSTARTn */
    vuint32_t BSTART3:1;               /* BSTARTn */
    vuint32_t BSTART4:1;               /* BSTARTn */
    vuint32_t BSTART5:1;               /* BSTARTn */
    vuint32_t BSTART6:1;               /* BSTARTn */
    vuint32_t BSTART7:1;               /* BSTARTn */
    vuint32_t BSTART8:1;               /* BSTARTn */
    vuint32_t BSTART9:1;               /* BSTARTn */
    vuint32_t BSTART10:1;              /* BSTARTn */
    vuint32_t BSTART11:1;              /* BSTARTn */
    vuint32_t BSTART12:1;              /* BSTARTn */
    vuint32_t BSTART13:1;              /* BSTARTn */
    vuint32_t BSTART14:1;              /* BSTARTn */
    vuint32_t BSTART15:1;              /* BSTARTn */
    vuint32_t BSTART16:1;              /* BSTARTn */
    vuint32_t BSTART17:1;              /* BSTARTn */
    vuint32_t BSTART18:1;              /* BSTARTn */
    vuint32_t BSTART19:1;              /* BSTARTn */
    vuint32_t BSTART20:1;              /* BSTARTn */
    vuint32_t BSTART21:1;              /* BSTARTn */
    vuint32_t BSTART22:1;              /* BSTARTn */
    vuint32_t BSTART23:1;              /* BSTARTn */
    vuint32_t BSTART24:1;              /* BSTARTn */
    vuint32_t BSTART25:1;              /* BSTARTn */
    vuint32_t BSTART26:1;              /* BSTARTn */
    vuint32_t BSTART27:1;              /* BSTARTn */
    vuint32_t BSTART28:1;              /* BSTARTn */
    vuint32_t BSTART29:1;              /* BSTARTn */
    vuint32_t BSTART30:1;              /* BSTARTn */
    vuint32_t BSTART31:1;              /* BSTARTn */
  } B;
} STCU2_BSTART_tag;

typedef union STCU2_MB_CTRL_union_tag { /* STCU2 MBIST Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:20;            /* Reserved */
    vuint32_t BSEL:1;                  /* BSEL */
    vuint32_t PTR:10;                  /* PTR */
    vuint32_t CSM:1;                   /* CSM */
  } B;
} STCU2_MB_CTRL_tag;

struct STCU2_tag {
  uint8_t STCU2_reserved0[4];
  STCU2_RUNSW_tag RUNSW;               /* STCU2 Run Software */
  STCU2_SKC_tag SKC;                   /* STCU2 SK Code */
  STCU2_CFG_tag CFG;                   /* STCU2 Configuration */
  uint8_t STCU2_reserved1[4];
  STCU2_WDG_tag WDG;                   /* STCU2 Watchdog Granularity */
  STCU2_INT_FLG_tag INT_FLG;           /* STCU2 Interrupt Flag */
  uint8_t STCU2_reserved2[8];
  STCU2_ERR_STAT_tag ERR_STAT;         /* STCU2 Error */
  STCU2_ERR_FM_tag ERR_FM;             /* STCU2 Error FM */
  uint8_t STCU2_reserved3[32];
  STCU2_LBSSW_tag LBSSW[1];            /* STCU2 Online LBIST Status */
  STCU2_LBSSW1_tag LBSSW1;             /* STCU2 Online LBIST Status */
  uint8_t STCU2_reserved4[8];
  STCU2_LBESW_tag LBESW[1];            /* STCU2 Online LBIST End Flag */
  STCU2_LBESW1_tag LBESW1;             /* STCU2 Online LBIST End Flag */
  uint8_t STCU2_reserved5[12];
  STCU2_LBRMSW1_tag LBRMSW1;           /* STCU2 Online LBIST Reset Management */
  uint8_t STCU2_reserved6[8];
  STCU2_LBUFM_tag LBUFM[1];            /* STCU2 Online LBIST Unrecoverable FM */
  STCU2_LBUFM1_tag LBUFM1;             /* STCU2 Online LBIST Unrecoverable FM */
  uint8_t STCU2_reserved7[136];
  STCU2_MBSSW_tag MBSSW[3];            /* STCU2 Online MBIST Status */
  STCU2_MBSSW3_tag MBSSW3;             /* STCU2 Online MBIST Status */
  uint8_t STCU2_reserved8[48];
  STCU2_MBESW_tag MBESW[3];            /* STCU2 Online MBIST End Flag */
  STCU2_MBESW3_tag MBESW3;             /* STCU2 Online MBIST End Flag */
  uint8_t STCU2_reserved9[48];
  STCU2_MBUFM_tag MBUFM[3];            /* STCU2 MBIST Unrecoverable FM */
  STCU2_MBUFM3_tag MBUFM3;             /* STCU2 MBIST Unrecoverable FM */
  uint8_t STCU2_reserved10[100];
  STCU2_LB_tag LB[60];
  uint8_t STCU2_reserved11[4352];
  STCU2_ALGOSEL_tag ALGOSEL;           /* STCU2 Algorithm Select */
  uint8_t STCU2_reserved12[8];
  STCU2_STGGR_tag STGGR;               /* STCU2 MBIST Stagger */
  STCU2_BSTART_tag BSTART;             /* STCU2 BIST Start */
  STCU2_MB_CTRL_tag MB_CTRL[110];      /* STCU2 MBIST Control */
};


/* ============================================================================
   =============================== Module: STM ================================
   ============================================================================ */

typedef union STM_CR_union_tag {       /* Control */
  vuint32_t R;
  struct {
    vuint32_t TEN:1;                   /* Timer Enable */
    vuint32_t FRZ:1;                   /* Freeze */
    vuint32_t _unused_2:6;             /* Reserved */
    vuint32_t CPS:8;                   /* Counter Prescaler */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} STM_CR_tag;

typedef union STM_CNT_union_tag {      /* Count */
  vuint32_t R;
  struct {
    vuint32_t CNT:32;                  /* Timer Count */
  } B;
} STM_CNT_tag;

typedef union STM_CHANNEL_CCR_union_tag { /* Channel Control */
  vuint32_t R;
  struct {
    vuint32_t CEN:1;                   /* Channel Enable */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} STM_CHANNEL_CCR_tag;

typedef union STM_CHANNEL_CIR_union_tag { /* Channel Interrupt */
  vuint32_t R;
  struct {
    vuint32_t CIF:1;                   /* Channel Interrupt Flag */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} STM_CHANNEL_CIR_tag;

typedef union STM_CHANNEL_CMP_union_tag { /* Channel Compare */
  vuint32_t R;
  struct {
    vuint32_t CMP:32;                  /* Channel Compare */
  } B;
} STM_CHANNEL_CMP_tag;

typedef struct STM_CHANNEL_struct_tag {
  STM_CHANNEL_CCR_tag CCR;             /* Channel Control */
  STM_CHANNEL_CIR_tag CIR;             /* Channel Interrupt */
  STM_CHANNEL_CMP_tag CMP;             /* Channel Compare */
  uint8_t CHANNEL_reserved0[4];
} STM_CHANNEL_tag;

struct STM_tag {
  STM_CR_tag CR;                       /* Control */
  STM_CNT_tag CNT;                     /* Count */
  uint8_t STM_reserved0[8];
  STM_CHANNEL_tag CHANNEL[4];
};


/* ============================================================================
   =============================== Module: STM_TS =============================
   ============================================================================ */

typedef union STM_TS_CR_union_tag {    /* Control */
  vuint32_t R;
  struct {
    vuint32_t TEN:1;                   /* Timer Enable */
    vuint32_t FRZ:1;                   /* Freeze */
    vuint32_t _unused_2:6;             /* Reserved */
    vuint32_t CPS:8;                   /* Counter Prescaler */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} STM_TS_CR_tag;

typedef union STM_TS_CNT_union_tag {   /* Count */
  vuint32_t R;
  struct {
    vuint32_t CNT:32;                  /* Timer Count */
  } B;
} STM_TS_CNT_tag;

typedef union STM_TS_CHANNEL_CCR_union_tag { /* Channel Control */
  vuint32_t R;
  struct {
    vuint32_t CEN:1;                   /* Channel Enable */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} STM_TS_CHANNEL_CCR_tag;

typedef union STM_TS_CHANNEL_CIR_union_tag { /* Channel Interrupt */
  vuint32_t R;
  struct {
    vuint32_t CIF:1;                   /* Channel Interrupt Flag */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} STM_TS_CHANNEL_CIR_tag;

typedef union STM_TS_CHANNEL_CMP_union_tag { /* Channel Compare */
  vuint32_t R;
  struct {
    vuint32_t CMP:32;                  /* Channel Compare */
  } B;
} STM_TS_CHANNEL_CMP_tag;

typedef struct STM_TS_CHANNEL_struct_tag {
  STM_TS_CHANNEL_CCR_tag CCR;          /* Channel Control */
  STM_TS_CHANNEL_CIR_tag CIR;          /* Channel Interrupt */
  STM_TS_CHANNEL_CMP_tag CMP;          /* Channel Compare */
  uint8_t CHANNEL_reserved0[4];
} STM_TS_CHANNEL_tag;

struct STM_TS_tag {
  STM_TS_CR_tag CR;                    /* Control */
  STM_TS_CNT_tag CNT;                  /* Count */
  uint8_t STM_TS_reserved0[8];
  STM_TS_CHANNEL_tag CHANNEL[4];
};


/* ============================================================================
   =============================== Module: SWT ================================
   ============================================================================ */

typedef union SWT_CR_union_tag {       /* Control */
  vuint32_t R;
  struct {
    vuint32_t WEN:1;                   /* Watchdog Enable */
    vuint32_t FRZ:1;                   /* Debug Mode Control */
    vuint32_t STP:1;                   /* Stop Mode Control */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t SLK:1;                   /* Soft Lock */
    vuint32_t HLK:1;                   /* Hard Lock */
    vuint32_t ITR:1;                   /* Interrupt Then Reset Request */
    vuint32_t WND:1;                   /* Window Mode */
    vuint32_t RIA:1;                   /* Reset on Invalid Access */
    vuint32_t SMD:2;                   /* Service Mode */
    vuint32_t _unused_11:13;           /* Reserved */
    vuint32_t MAP7:1;                  /* Master Access Protection 7 */
    vuint32_t MAP6:1;                  /* Master Access Protection 6 */
    vuint32_t MAP5:1;                  /* Master Access Protection 5 */
    vuint32_t MAP4:1;                  /* Master Access Protection 4 */
    vuint32_t MAP3:1;                  /* Master Access Protection 3 */
    vuint32_t MAP2:1;                  /* Master Access Protection 2 */
    vuint32_t MAP1:1;                  /* Master Access Protection 1 */
    vuint32_t MAP0:1;                  /* Master Access Protection 0 */
  } B;
} SWT_CR_tag;

typedef union SWT_IR_union_tag {       /* Interrupt */
  vuint32_t R;
  struct {
    vuint32_t TIF:1;                   /* Timeout Interrupt Flag */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} SWT_IR_tag;

typedef union SWT_TO_union_tag {       /* Timeout */
  vuint32_t R;
  struct {
    vuint32_t WTO:32;                  /* Watchdog Timeout */
  } B;
} SWT_TO_tag;

typedef union SWT_WN_union_tag {       /* Window */
  vuint32_t R;
  struct {
    vuint32_t WST:32;                  /* Window Start Value */
  } B;
} SWT_WN_tag;

typedef union SWT_SR_union_tag {       /* Service */
  vuint32_t R;
  struct {
    vuint32_t WSC:16;                  /* Watchdog Service Code */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} SWT_SR_tag;

typedef union SWT_CO_union_tag {       /* Counter Output */
  vuint32_t R;
  struct {
    vuint32_t CNT:32;                  /* Watchdog Count */
  } B;
} SWT_CO_tag;

typedef union SWT_SK_union_tag {       /* Service Key */
  vuint32_t R;
  struct {
    vuint32_t SK:16;                   /* Service Key */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} SWT_SK_tag;

typedef union SWT_RRR_union_tag {      /* Reset Request */
  vuint32_t R;
  struct {
    vuint32_t RRF:1;                   /* Reset Request Flag */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} SWT_RRR_tag;

struct SWT_tag {
  SWT_CR_tag CR;                       /* Control */
  SWT_IR_tag IR;                       /* Interrupt */
  SWT_TO_tag TO;                       /* Timeout */
  SWT_WN_tag WN;                       /* Window */
  SWT_SR_tag SR;                       /* Service */
  SWT_CO_tag CO;                       /* Counter Output */
  SWT_SK_tag SK;                       /* Service Key */
  SWT_RRR_tag RRR;                     /* Reset Request */
};


/* ============================================================================
   =============================== Module: SerDes_1_GPR =======================
   ============================================================================ */

typedef union SerDes_1_GPR_PCIE_CONFIG_0_union_tag { /* Config_0_Register */
  vuint32_t R;
  struct {
    vuint32_t PARITY_CHK_MSTR_ARADDRP_ERR:1; /* parity_chk_mstr_araddrp_err */
    vuint32_t PARITY_CHK_MSTR_AWADDRP_ERR:1; /* parity_chk_mstr_awaddrp_err */
    vuint32_t PARITY_CHK_MSTR_WDATAP_ERR:1; /* parity_chk_mstr_wdatap_err */
    vuint32_t PARITY_CHK_SLV_RDATAP_ERR:1; /* parity_chk_slv_rdatap_err */
    vuint32_t RESERVED:28;             /* Reserved */
  } B;
} SerDes_1_GPR_PCIE_CONFIG_0_tag;

struct SerDes_1_GPR_tag {
  SerDes_1_GPR_PCIE_CONFIG_0_tag PCIE_CONFIG_0; /* Config_0_Register */
};


/* ============================================================================
   =============================== Module: TMU ================================
   ============================================================================ */

typedef union TMU_TMR_union_tag {      /* Mode */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;
    vuint32_t ALPF:2;                  /* Average low pass filter setting */
    vuint32_t _unused_26:3;
    vuint32_t CMD:1;                   /* Central module disable */
    vuint32_t MODE:2;                  /* Mode */
  } B;
} TMU_TMR_tag;

typedef union TMU_TSR_union_tag {      /* Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:28;
    vuint32_t ORH:1;                   /* Out-of-range high temperature measurement */
    vuint32_t ORL:1;                   /* Out-of-range low temperature measurement */
    vuint32_t MIE:1;                   /* Monitoring interval exceeded */
    vuint32_t _unused_31:1;
  } B;
} TMU_TSR_tag;

typedef union TMU_TMSR_union_tag {     /* Monitor Site */
  vuint32_t R;
  struct {
    vuint32_t SITE:3;                  /* Monitoring site select 2-0 */
    vuint32_t _unused_3:29;
  } B;
} TMU_TMSR_tag;

typedef union TMU_TMTMIR_union_tag {   /* Monitor Temperature Measurement Interval */
  vuint32_t R;
  struct {
    vuint32_t TMI:4;                   /* Temperature monitoring interval in seconds */
    vuint32_t _unused_4:28;
  } B;
} TMU_TMTMIR_tag;

typedef union TMU_TIER_union_tag {     /* Interrupt Enable */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;
    vuint32_t FTRCTIE:1;               /* Falling temperature rate critical threshold interrupt enable */
    vuint32_t RTRCTIE:1;               /* Rising temperature rate critical threshold interrupt enable */
    vuint32_t ALTCTIE:1;               /* Average low temperature critical threshold interrupt enable */
    vuint32_t ALTTIE:1;                /* Average low temperature threshold interrupt enable */
    vuint32_t ILTTIE:1;                /* Immediate low temperature threshold interrupt enable */
    vuint32_t AHTCTIE:1;               /* Average high temperature critical threshold interrupt enable */
    vuint32_t AHTTIE:1;                /* Average high temperature threshold interrupt enable */
    vuint32_t IHTTIE:1;                /* Immediate high temperature threshold interrupt enable */
  } B;
} TMU_TIER_tag;

typedef union TMU_TIDR_union_tag {     /* Interrupt Detect */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;
    vuint32_t FTRCT:1;                 /* Falling temperature rate critical threshold */
    vuint32_t RTRCT:1;                 /* Rising temperature rate critical threshold */
    vuint32_t ALTCT:1;                 /* Average low temperature critical threshold */
    vuint32_t ALTT:1;                  /* Average low temperature threshold */
    vuint32_t ILTT:1;                  /* Immediate low temperature threshold */
    vuint32_t AHTCT:1;                 /* Average high temperature critical threshold exceeded */
    vuint32_t AHTT:1;                  /* Average high temperature threshold exceeded */
    vuint32_t IHTT:1;                  /* Immediate high temperature threshold exceeded */
  } B;
} TMU_TIDR_tag;

typedef union TMU_TIISCR_union_tag {   /* Interrupt Immediate Site Capture */
  vuint32_t R;
  struct {
    vuint32_t SITE:3;                  /* Temperature sensor site */
    vuint32_t _unused_3:29;
  } B;
} TMU_TIISCR_tag;

typedef union TMU_TIASCR_union_tag {   /* Interrupt Average Site Capture */
  vuint32_t R;
  struct {
    vuint32_t SITE:3;                  /* Temperature sensor site */
    vuint32_t _unused_3:29;
  } B;
} TMU_TIASCR_tag;

typedef union TMU_TICSCR_union_tag {   /* Interrupt Critical Site Capture */
  vuint32_t R;
  struct {
    vuint32_t SITE:3;                  /* Temperature sensor site */
    vuint32_t _unused_3:29;
  } B;
} TMU_TICSCR_tag;

typedef union TMU_TMHTCR_union_tag {   /* Monitor High Temperature Capture */
  vuint32_t R;
  struct {
    vuint32_t TEMP:9;                  /* Highest temperature recorded in Kelvin by any enabled monitored site */
    vuint32_t TP5:1;                   /* Highest temperature recorded in Kelvin by any enabled monitored site */
    vuint32_t _unused_10:21;
    vuint32_t V:1;                     /* Valid reading */
  } B;
} TMU_TMHTCR_tag;

typedef union TMU_TMLTCR_union_tag {   /* Monitor Low Temperature Capture */
  vuint32_t R;
  struct {
    vuint32_t TEMP:9;                  /* Lowest temperature in Kelvin that any enabled monitored site records */
    vuint32_t TP5:1;                   /* Lowest temperature in Kelvin that any enabled monitored site records */
    vuint32_t _unused_10:21;
    vuint32_t V:1;                     /* Valid reading */
  } B;
} TMU_TMLTCR_tag;

typedef union TMU_TMRTRCR_union_tag {  /* Monitor Rising Temperature Rate Capture */
  vuint32_t R;
  struct {
    vuint32_t TEMP:8;                  /* Highest rising temperature rate change in Kelvin that any enabled monitored site records */
    vuint32_t _unused_8:23;
    vuint32_t V:1;                     /* Valid reading */
  } B;
} TMU_TMRTRCR_tag;

typedef union TMU_TMFTRCR_union_tag {  /* Monitor Falling Temperature Rate Capture */
  vuint32_t R;
  struct {
    vuint32_t TEMP:8;                  /* Highest falling temperature rate change in Kelvin that any enabled monitored site records */
    vuint32_t _unused_8:23;
    vuint32_t V:1;                     /* Valid reading */
  } B;
} TMU_TMFTRCR_tag;

typedef union TMU_TMHTITR_union_tag {  /* Monitor High Temperature Immediate Threshold */
  vuint32_t R;
  struct {
    vuint32_t TEMP:9;                  /* High temperature immediate threshold value */
    vuint32_t _unused_9:22;
    vuint32_t EN:1;                    /* Enable threshold */
  } B;
} TMU_TMHTITR_tag;

typedef union TMU_TMHTATR_union_tag {  /* Monitor High Temperature Average Threshold */
  vuint32_t R;
  struct {
    vuint32_t TEMP:9;                  /* High temperature average threshold value */
    vuint32_t _unused_9:22;
    vuint32_t EN:1;                    /* Enable threshold */
  } B;
} TMU_TMHTATR_tag;

typedef union TMU_TMHTACTR_union_tag { /* Monitor High Temperature Average Critical Threshold */
  vuint32_t R;
  struct {
    vuint32_t TEMP:9;                  /* High temperature average critical threshold value */
    vuint32_t _unused_9:22;
    vuint32_t EN:1;                    /* Enable threshold */
  } B;
} TMU_TMHTACTR_tag;

typedef union TMU_TMLTITR_union_tag {  /* Monitor Low Temperature Immediate Threshold */
  vuint32_t R;
  struct {
    vuint32_t TEMP:9;                  /* Low temperature immediate threshold value */
    vuint32_t _unused_9:22;
    vuint32_t EN:1;                    /* Enable threshold */
  } B;
} TMU_TMLTITR_tag;

typedef union TMU_TMLTATR_union_tag {  /* Monitor Low Temperature Average Threshold */
  vuint32_t R;
  struct {
    vuint32_t TEMP:9;                  /* Low temperature average threshold value */
    vuint32_t _unused_9:22;
    vuint32_t EN:1;                    /* Enable threshold */
  } B;
} TMU_TMLTATR_tag;

typedef union TMU_TMLTACTR_union_tag { /* Monitor Low Temperature Average Critical Threshold */
  vuint32_t R;
  struct {
    vuint32_t TEMP:9;                  /* Low temperature average critical threshold value */
    vuint32_t _unused_9:22;
    vuint32_t EN:1;                    /* Enable threshold */
  } B;
} TMU_TMLTACTR_tag;

typedef union TMU_TMRTRCTR_union_tag { /* Monitor Rising Temperature Rate Critical Threshold */
  vuint32_t R;
  struct {
    vuint32_t TEMP:8;                  /* Temperature difference between two measurements from the same site */
    vuint32_t _unused_8:23;
    vuint32_t EN:1;                    /* Enable threshold */
  } B;
} TMU_TMRTRCTR_tag;

typedef union TMU_TMFTRCTR_union_tag { /* Monitor Falling Temperature Rate Critical Threshold */
  vuint32_t R;
  struct {
    vuint32_t TEMP:8;                  /* Temperature difference between two measurements from the same site */
    vuint32_t _unused_8:23;
    vuint32_t EN:1;                    /* Enable threshold */
  } B;
} TMU_TMFTRCTR_tag;

typedef union TMU_TTCFGR_union_tag {   /* Temperature Configuration */
  vuint32_t R;
  struct {
    vuint32_t CAL_PT:4;                /* Calibration point */
    vuint32_t _unused_4:28;
  } B;
} TMU_TTCFGR_tag;

typedef union TMU_TSCFGR_union_tag {   /* Sensor Configuration */
  vuint32_t R;
  struct {
    vuint32_t SENSOR:9;                /* Sensor value */
    vuint32_t _unused_9:23;
  } B;
} TMU_TSCFGR_tag;

typedef union TMU_TRITRATSR_TRITSR_union_tag { /* Report Immediate Temperature at Site */
  vuint32_t R;
  struct {
    vuint32_t TEMP:9;                  /* Last temperature reading in Kelvin at the site */
    vuint32_t TP5:1;                   /* Last temperature reading in Kelvin at the site */
    vuint32_t _unused_10:21;
    vuint32_t V:1;                     /* Valid measured temperature */
  } B;
} TMU_TRITRATSR_TRITSR_tag;

typedef union TMU_TRITRATSR_TRATSR_union_tag { /* Report Average Temperature at Site */
  vuint32_t R;
  struct {
    vuint32_t TEMP:9;                  /* Average temperature reading in Kelvin at the site */
    vuint32_t _unused_9:22;
    vuint32_t V:1;                     /* Valid measured temperature */
  } B;
} TMU_TRITRATSR_TRATSR_tag;

typedef struct TMU_TRITRATSR_struct_tag {
  TMU_TRITRATSR_TRITSR_tag TRITSR;     /* Report Immediate Temperature at Site */
  TMU_TRITRATSR_TRATSR_tag TRATSR;     /* Report Average Temperature at Site */
  uint8_t TRITRATSR_reserved0[8];
} TMU_TRITRATSR_tag;

typedef union TMU_TCMCFG_union_tag {   /* Central Module Configuration */
  vuint32_t R;
  struct {
    vuint32_t DAC_OFFSET:7;            /* DAC offset */
    vuint32_t _unused_7:1;
    vuint32_t CMET:2;                  /* Central module enable time */
    vuint32_t DFD:2;                   /* Digital filter depth */
    vuint32_t CLK_DIV:4;
    vuint32_t SAR_RDY:1;               /* SAR ready */
    vuint32_t _unused_17:7;
    vuint32_t RCTC:3;                  /* RC time constant setting */
    vuint32_t _unused_27:1;
    vuint32_t DEMA:1;                  /* Dynamic element match averaging mode */
    vuint32_t OCS:1;                   /* Offset cancellation manual setting */
    vuint32_t OCM:1;                   /* Offset cancellation mode */
    vuint32_t DPM:1;
  } B;
} TMU_TCMCFG_tag;

typedef union TMU_TTRCR_union_tag {    /* Temperature Range Control 0 */
  vuint32_t R;
  struct {
    vuint32_t TEMP:9;                  /* Temperature in Kelvin for the calibration point */
    vuint32_t _unused_9:22;
    vuint32_t V:1;                     /* Calibration point is valid */
  } B;
} TMU_TTRCR_tag;

struct TMU_tag {
  TMU_TMR_tag TMR;                     /* Mode */
  TMU_TSR_tag TSR;                     /* Status */
  TMU_TMSR_tag TMSR;                   /* Monitor Site */
  TMU_TMTMIR_tag TMTMIR;               /* Monitor Temperature Measurement Interval */
  uint8_t TMU_reserved0[16];
  TMU_TIER_tag TIER;                   /* Interrupt Enable */
  TMU_TIDR_tag TIDR;                   /* Interrupt Detect */
  uint8_t TMU_reserved1[8];
  TMU_TIISCR_tag TIISCR;               /* Interrupt Immediate Site Capture */
  TMU_TIASCR_tag TIASCR;               /* Interrupt Average Site Capture */
  TMU_TICSCR_tag TICSCR;               /* Interrupt Critical Site Capture */
  uint8_t TMU_reserved2[4];
  TMU_TMHTCR_tag TMHTCR;               /* Monitor High Temperature Capture */
  TMU_TMLTCR_tag TMLTCR;               /* Monitor Low Temperature Capture */
  TMU_TMRTRCR_tag TMRTRCR;             /* Monitor Rising Temperature Rate Capture */
  TMU_TMFTRCR_tag TMFTRCR;             /* Monitor Falling Temperature Rate Capture */
  TMU_TMHTITR_tag TMHTITR;             /* Monitor High Temperature Immediate Threshold */
  TMU_TMHTATR_tag TMHTATR;             /* Monitor High Temperature Average Threshold */
  TMU_TMHTACTR_tag TMHTACTR;           /* Monitor High Temperature Average Critical Threshold */
  uint8_t TMU_reserved3[4];
  TMU_TMLTITR_tag TMLTITR;             /* Monitor Low Temperature Immediate Threshold */
  TMU_TMLTATR_tag TMLTATR;             /* Monitor Low Temperature Average Threshold */
  TMU_TMLTACTR_tag TMLTACTR;           /* Monitor Low Temperature Average Critical Threshold */
  uint8_t TMU_reserved4[4];
  TMU_TMRTRCTR_tag TMRTRCTR;           /* Monitor Rising Temperature Rate Critical Threshold */
  TMU_TMFTRCTR_tag TMFTRCTR;           /* Monitor Falling Temperature Rate Critical Threshold */
  uint8_t TMU_reserved5[8];
  TMU_TTCFGR_tag TTCFGR;               /* Temperature Configuration */
  TMU_TSCFGR_tag TSCFGR;               /* Sensor Configuration */
  uint8_t TMU_reserved6[120];
  TMU_TRITRATSR_tag TRITRATSR[3];
  uint8_t TMU_reserved7[3536];
  TMU_TCMCFG_tag TCMCFG;               /* Central Module Configuration */
  uint8_t TMU_reserved8[12];
  TMU_TTRCR_tag TTRCR[16];             /* Temperature Range Control 0 */
};


/* ============================================================================
   =============================== Module: UMCTL2_MP ==========================
   ============================================================================ */

typedef union UMCTL2_MP_PSTAT_union_tag { /* Port Status */
  vuint32_t R;
  struct {
    vuint32_t RD_PORT_BUSY_0:1;        /* Indicates if there are outstanding reads for AXI port 0. Programming Mode: Dynamic */
    vuint32_t RD_PORT_BUSY_1:1;        /* Indicates if there are outstanding reads for AXI port 1. Programming Mode: Dynamic */
    vuint32_t RD_PORT_BUSY_2:1;        /* Indicates if there are outstanding reads for AXI port 2. Programming Mode: Dynamic */
    vuint32_t _unused_3:13;
    vuint32_t WR_PORT_BUSY_0:1;        /* Indicates if there are outstanding writes for AXI port 0. Programming Mode: Dynamic */
    vuint32_t WR_PORT_BUSY_1:1;        /* Indicates if there are outstanding writes for AXI port 1. Programming Mode: Dynamic */
    vuint32_t WR_PORT_BUSY_2:1;        /* Indicates if there are outstanding writes for AXI port 2. Programming Mode: Dynamic */
    vuint32_t _unused_19:13;
  } B;
} UMCTL2_MP_PSTAT_tag;

typedef union UMCTL2_MP_PCCFG_union_tag { /* Port Common Configuration */
  vuint32_t R;
  struct {
    vuint32_t GO2CRITICAL_EN:1;        /* Go to critical enable */
    vuint32_t _unused_1:3;
    vuint32_t PAGEMATCH_LIMIT:1;       /* Page match four limit */
    vuint32_t _unused_5:3;
    vuint32_t BL_EXP_MODE:1;           /* Burst expansion mode */
    vuint32_t _unused_9:23;
  } B;
} UMCTL2_MP_PCCFG_tag;

typedef union UMCTL2_MP_PCFGR_0_union_tag { /* Port n Configuration Read */
  vuint32_t R;
  struct {
    vuint32_t RD_PORT_PRIORITY:10;     /* Read aging counter value */
    vuint32_t _unused_10:2;
    vuint32_t RD_PORT_AGING_EN:1;      /* Read aging enable */
    vuint32_t RD_PORT_URGENT_EN:1;     /* Read AXI urgent sideband enable */
    vuint32_t RD_PORT_PAGEMATCH_EN:1;  /* Read Page Match enable */
    vuint32_t _unused_15:1;
    vuint32_t RDWR_ORDERED_EN:1;       /* Ordered read/writes enable */
    vuint32_t _unused_17:15;
  } B;
} UMCTL2_MP_PCFGR_0_tag;

typedef union UMCTL2_MP_PCFGW_0_union_tag { /* Port n Configuration Write */
  vuint32_t R;
  struct {
    vuint32_t WR_PORT_PRIORITY:10;     /* Write aging counter value */
    vuint32_t _unused_10:2;
    vuint32_t WR_PORT_AGING_EN:1;      /* Write aging enable */
    vuint32_t WR_PORT_URGENT_EN:1;     /* Write AXI urgent sideband enable */
    vuint32_t WR_PORT_PAGEMATCH_EN:1;  /* Write Page Match enable */
    vuint32_t _unused_15:17;
  } B;
} UMCTL2_MP_PCFGW_0_tag;

typedef union UMCTL2_MP_PCTRL_0_union_tag { /* Port n Control */
  vuint32_t R;
  struct {
    vuint32_t PORT_EN:1;               /* Enables AXI port n. Programming Mode: Dynamic */
    vuint32_t _unused_1:31;
  } B;
} UMCTL2_MP_PCTRL_0_tag;

typedef union UMCTL2_MP_PCFGQOS0_0_union_tag { /* Port n Read QoS Configuration Register 0 */
  vuint32_t R;
  struct {
    vuint32_t RQOS_MAP_LEVEL1:4;       /* Read separation level 1 */
    vuint32_t _unused_4:4;
    vuint32_t RQOS_MAP_LEVEL2:4;       /* Read separation level 2 */
    vuint32_t _unused_12:4;
    vuint32_t RQOS_MAP_REGION0:2;      /* Read region 0 traffic class */
    vuint32_t _unused_18:2;
    vuint32_t RQOS_MAP_REGION1:2;      /* Region 1 traffic class */
    vuint32_t _unused_22:2;
    vuint32_t RQOS_MAP_REGION2:2;      /* Region 2 traffic class */
    vuint32_t _unused_26:6;
  } B;
} UMCTL2_MP_PCFGQOS0_0_tag;

typedef union UMCTL2_MP_PCFGQOS1_0_union_tag { /* Port n Read QoS Configuration Register 1 */
  vuint32_t R;
  struct {
    vuint32_t RQOS_MAP_TIMEOUTB:11;    /* Read blue address queue timeout interval */
    vuint32_t _unused_11:5;
    vuint32_t RQOS_MAP_TIMEOUTR:11;    /* Read red address queue timeout interval */
    vuint32_t _unused_27:5;
  } B;
} UMCTL2_MP_PCFGQOS1_0_tag;

typedef union UMCTL2_MP_PCFGWQOS0_0_union_tag { /* Port n Write QoS Configuration Register 0 */
  vuint32_t R;
  struct {
    vuint32_t WQOS_MAP_LEVEL1:4;       /* Write separation level 1 */
    vuint32_t _unused_4:4;
    vuint32_t WQOS_MAP_LEVEL2:4;       /* Write separation level 2 */
    vuint32_t _unused_12:4;
    vuint32_t WQOS_MAP_REGION0:2;      /* Write region 0 traffic class */
    vuint32_t _unused_18:2;
    vuint32_t WQOS_MAP_REGION1:2;      /* Write region 1 traffic class */
    vuint32_t _unused_22:2;
    vuint32_t WQOS_MAP_REGION2:2;      /* Write region 2 traffic class */
    vuint32_t _unused_26:6;
  } B;
} UMCTL2_MP_PCFGWQOS0_0_tag;

typedef union UMCTL2_MP_PCFGWQOS1_0_union_tag { /* Port n Write QoS Configuration Register 1 */
  vuint32_t R;
  struct {
    vuint32_t WQOS_MAP_TIMEOUT1:11;    /* Write region 0 and 1 timeout interval */
    vuint32_t _unused_11:5;
    vuint32_t WQOS_MAP_TIMEOUT2:11;    /* Write region 2 timeout interval */
    vuint32_t _unused_27:5;
  } B;
} UMCTL2_MP_PCFGWQOS1_0_tag;

typedef union UMCTL2_MP_PCFGR_1_union_tag { /* Port n Configuration Read */
  vuint32_t R;
  struct {
    vuint32_t RD_PORT_PRIORITY:10;     /* Determines the initial load value of read aging counters. These counters will be parallel loaded after reset, or after each grant to the corresponding port. The aging counters down-count every clock cycle where the port is requesting but not granted. The higher significant 5-bits of the read aging counter sets the priority of the read channel of a given port. Port's priority will increase as the higher significant 5-bits of the counter starts to decrease. When the aging counter becomes 0, the corresponding port channel will have the highest priority level (timeout condition - Priority0). For multi-port configurations, the aging counters cannot be used to set port priorities when external dynamic priority inputs (arqos) are enabled (timeout is still applicable). For single port configurations, the aging counters are only used when they timeout (become 0) to force read-write direction switching. In this case, external dynamic priority input, arqos (for reads only) can still be used to set the MC read priority (2 priority levels: low priority read - LPR, high priority read - HPR) on a command by command basis. Note: The two LSBs of this register field are tied internally to 2'b00. Programming Mode: Static */
    vuint32_t _unused_10:2;
    vuint32_t RD_PORT_AGING_EN:1;      /* If set to 1, enables aging function for the read channel of the port. Programming Mode: Static */
    vuint32_t RD_PORT_URGENT_EN:1;     /* If set to 1, enables the AXI urgent sideband signal (arurgent). When enabled and arurgent is asserted by the master, that port becomes the highest priority and co_gs_go2critical_lpr/co_gs_go2critical_hpr signal to MC is asserted if enabled in PCCFG.go2critical_en register. Note that arurgent signal can be asserted anytime and as long as required which is independent of address handshaking (it is not associated with any particular command). Programming Mode: Static */
    vuint32_t RD_PORT_PAGEMATCH_EN:1;  /* If set to 1, enables the Page Match feature. If enabled, once a requesting port is granted, the port is continued to be granted if the following immediate commands are to the same memory page (same bank and same row). See also related PCCFG.pagematch_limit register. Programming Mode: Static */
    vuint32_t _unused_15:1;
    vuint32_t RDWR_ORDERED_EN:1;       /* Enable ordered read/writes. If set to 1, preserves the ordering between read transaction and write transaction issued to the same address, on a given port. In other words, the controller ensures that all same address read and write commands from the application port interface are transported to the DFI interface in the order of acceptance. This feature is useful in cases where software coherency is desired for masters issuing back-to-back read/write transactions without waiting for write/read responses. Note that this register has an effect only if necessary logic is instantiated via the UMCTL2_RDWR_ORDERED_n parameter. Programming Mode: Static */
    vuint32_t _unused_17:15;
  } B;
} UMCTL2_MP_PCFGR_1_tag;

typedef union UMCTL2_MP_PCFGW_1_union_tag { /* Port n Configuration Write */
  vuint32_t R;
  struct {
    vuint32_t WR_PORT_PRIORITY:10;     /* Determines the initial load value of write aging counters. These counters will be parallel loaded after reset, or after each grant to the corresponding port. The aging counters down-count every clock cycle where the port is requesting but not granted. The higher significant 5-bits of the write aging counter sets the initial priority of the write channel of a given port. Port's priority will increase as the higher significant 5-bits of the counter starts to decrease. When the aging counter becomes 0, the corresponding port channel will have the highest priority level. For multi-port configurations, the aging counters cannot be used to set port priorities when external dynamic priority inputs (awqos) are enabled (timeout is still applicable). For single port configurations, the aging counters are only used when they timeout (become 0) to force read-write direction switching. Note: The two LSBs of this register field are tied internally to 2'b00. Programming Mode: Static */
    vuint32_t _unused_10:2;
    vuint32_t WR_PORT_AGING_EN:1;      /* If set to 1, enables aging function for the write channel of the port. Programming Mode: Static */
    vuint32_t WR_PORT_URGENT_EN:1;     /* If set to 1, enables the AXI urgent sideband signal (awurgent). When enabled and awurgent is asserted by the master, that port becomes the highest priority and co_gs_go2critical_wr signal to the MC is asserted if enabled in PCCFG.go2critical_en register. Note that awurgent signal can be asserted anytime and as long as required which is independent of address handshaking (it is not associated with any particular command). Programming Mode: Static */
    vuint32_t WR_PORT_PAGEMATCH_EN:1;  /* If set to 1, enables the Page Match feature. If enabled, once a requesting port is granted, the port is continued to be granted if the following immediate commands are to the same memory page (same bank and same row). See also related PCCFG.pagematch_limit register. Programming Mode: Static */
    vuint32_t _unused_15:17;
  } B;
} UMCTL2_MP_PCFGW_1_tag;

typedef union UMCTL2_MP_PCTRL_1_union_tag { /* Port n Control */
  vuint32_t R;
  struct {
    vuint32_t PORT_EN:1;               /* Enables AXI port n. Programming Mode: Dynamic */
    vuint32_t _unused_1:31;
  } B;
} UMCTL2_MP_PCTRL_1_tag;

typedef union UMCTL2_MP_PCFGQOS0_1_union_tag { /* Port n Read QoS Configuration Register 0 */
  vuint32_t R;
  struct {
    vuint32_t RQOS_MAP_LEVEL1:4;       /* Separation level1 indicating the end of region0 mapping; start of region0 is 0. Possible values for level1 are 0 to 13 (for dual RAQ) or 0 to 14 (for single RAQ) which corresponds to arqos. Note that for PA, arqos values are used directly as port priorities, where the higher the value corresponds to higher port priority. All of the map_level* registers must be set to distinct values. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t _unused_4:4;
    vuint32_t RQOS_MAP_LEVEL2:4;       /* Separation level2 indicating the end of region1 mapping; start of region1 is (level1 + 1). Possible values for level2 are (level1 + 1) to 14 which corresponds to arqos. Region2 starts from (level2 + 1) up to 15. Note that for PA, arqos values are used directly as port priorities, where the higher the value corresponds to higher port priority. All of the map_level* registers must be set to distinct values. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t _unused_12:4;
    vuint32_t RQOS_MAP_REGION0:2;      /* This bitfield indicates the traffic class of region 0. Valid values are: 0: LPR, 1: VPR, 2: HPR. For dual address queue configurations, region 0 maps to the blue address queue. In this case, valid values are: 0: LPR and 1: VPR only. When VPR support is disabled (UMCTL2_VPR_EN = 0) and traffic class of region0 is set to 1 (VPR), VPR traffic is aliased to LPR traffic. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t _unused_18:2;
    vuint32_t RQOS_MAP_REGION1:2;      /* This bitfield indicates the traffic class of region 1. Valid values are: 0 : LPR, 1: VPR, 2: HPR. For dual address queue configurations, region1 maps to the blue address queue. In this case, valid values are 0: LPR and 1: VPR only. When VPR support is disabled (UMCTL2_VPR_EN = 0) and traffic class of region 1 is set to 1 (VPR), VPR traffic is aliased to LPR traffic. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t _unused_22:2;
    vuint32_t RQOS_MAP_REGION2:2;      /* This bitfield indicates the traffic class of region2. For dual address queue configurations, region2 maps to the red address queue. Valid values are 1: VPR and 2: HPR only. When VPR support is disabled (UMCTL2_VPR_EN = 0) and traffic class of region2 is set to 1 (VPR), VPR traffic is aliased to LPR traffic. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t _unused_26:6;
  } B;
} UMCTL2_MP_PCFGQOS0_1_tag;

typedef union UMCTL2_MP_PCFGQOS1_1_union_tag { /* Port n Read QoS Configuration Register 1 */
  vuint32_t R;
  struct {
    vuint32_t RQOS_MAP_TIMEOUTB:11;    /* Specifies the timeout value for transactions mapped to the blue address queue. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t _unused_11:5;
    vuint32_t RQOS_MAP_TIMEOUTR:11;    /* Specifies the timeout value for transactions mapped to the red address queue. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t _unused_27:5;
  } B;
} UMCTL2_MP_PCFGQOS1_1_tag;

typedef union UMCTL2_MP_PCFGWQOS0_1_union_tag { /* Port n Write QoS Configuration Register 0 */
  vuint32_t R;
  struct {
    vuint32_t WQOS_MAP_LEVEL1:4;       /* Separation level indicating the end of region0 mapping; start of region0 is 0. Possible values for level1 are 0 to 13 which corresponds to awqos. Note that for PA, awqos values are used directly as port priorities, where the higher the value corresponds to higher port priority. All of the map_level* registers must be set to distinct values. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t _unused_4:4;
    vuint32_t WQOS_MAP_LEVEL2:4;       /* Separation level2 indicating the end of region1 mapping; start of region1 is (level1 + 1). Possible values for level2 are (level1 + 1) to 14 which corresponds to awqos. Region2 starts from (level2 + 1) up to 15. Note that for PA, awqos values are used directly as port priorities, where the higher the value corresponds to higher port priority. All of the map_level* registers must be set to distinct values. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t _unused_12:4;
    vuint32_t WQOS_MAP_REGION0:2;      /* This bitfield indicates the traffic class of region 0. Valid values are: 0: NPW, 1: VPW. When VPW support is disabled (UMCTL2_VPW_EN = 0) and traffic class of region 0 is set to 1 (VPW), VPW traffic is aliased to NPW traffic. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t _unused_18:2;
    vuint32_t WQOS_MAP_REGION1:2;      /* This bitfield indicates the traffic class of region 1. Valid values are: 0: NPW, 1: VPW. When VPW support is disabled (UMCTL2_VPW_EN = 0) and traffic class of region 1 is set to 1 (VPW), VPW traffic is aliased to NPW traffic. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t _unused_22:2;
    vuint32_t WQOS_MAP_REGION2:2;      /* This bitfield indicates the traffic class of region 2. Valid values are: 0: NPW, 1: VPW. When VPW support is disabled (UMCTL2_VPW_EN = 0) and traffic class of region 2 is set to 1 (VPW), VPW traffic is aliased to NPW traffic. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t _unused_26:6;
  } B;
} UMCTL2_MP_PCFGWQOS0_1_tag;

typedef union UMCTL2_MP_PCFGWQOS1_1_union_tag { /* Port n Write QoS Configuration Register 1 */
  vuint32_t R;
  struct {
    vuint32_t WQOS_MAP_TIMEOUT1:11;    /* Specifies the timeout value for write transactions in region 0 and 1. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t _unused_11:5;
    vuint32_t WQOS_MAP_TIMEOUT2:11;    /* Specifies the timeout value for write transactions in region 2. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t _unused_27:5;
  } B;
} UMCTL2_MP_PCFGWQOS1_1_tag;

typedef union UMCTL2_MP_PCFGR_2_union_tag { /* Port n Configuration Read */
  vuint32_t R;
  struct {
    vuint32_t RD_PORT_PRIORITY:10;     /* Determines the initial load value of read aging counters. These counters will be parallel loaded after reset, or after each grant to the corresponding port. The aging counters down-count every clock cycle where the port is requesting but not granted. The higher significant 5-bits of the read aging counter sets the priority of the read channel of a given port. Port's priority will increase as the higher significant 5-bits of the counter starts to decrease. When the aging counter becomes 0, the corresponding port channel will have the highest priority level (timeout condition - Priority0). For multi-port configurations, the aging counters cannot be used to set port priorities when external dynamic priority inputs (arqos) are enabled (timeout is still applicable). For single port configurations, the aging counters are only used when they timeout (become 0) to force read-write direction switching. In this case, external dynamic priority input, arqos (for reads only) can still be used to set the MC read priority (2 priority levels: low priority read - LPR, high priority read - HPR) on a command by command basis. Note: The two LSBs of this register field are tied internally to 2'b00. Programming Mode: Static */
    vuint32_t _unused_10:2;
    vuint32_t RD_PORT_AGING_EN:1;      /* If set to 1, enables aging function for the read channel of the port. Programming Mode: Static */
    vuint32_t RD_PORT_URGENT_EN:1;     /* If set to 1, enables the AXI urgent sideband signal (arurgent). When enabled and arurgent is asserted by the master, that port becomes the highest priority and co_gs_go2critical_lpr/co_gs_go2critical_hpr signal to the MC is asserted if enabled in PCCFG.go2critical_en register. Note that arurgent signal can be asserted anytime and as long as required which is independent of address handshaking (it is not associated with any particular command). Programming Mode: Static */
    vuint32_t RD_PORT_PAGEMATCH_EN:1;  /* If set to 1, enables the Page Match feature. If enabled, once a requesting port is granted, the port is continued to be granted if the following immediate commands are to the same memory page (same bank and same row). See also related PCCFG.pagematch_limit register. Programming Mode: Static */
    vuint32_t _unused_15:1;
    vuint32_t RDWR_ORDERED_EN:1;       /* Enable ordered read/writes. If set to 1, preserves the ordering between read transaction and write transaction issued to the same address, on a given port. In other words, the controller ensures that all same address read and write commands from the application port interface are transported to the DFI interface in the order of acceptance. This feature is useful in cases where software coherency is desired for masters issuing back-to-back read/write transactions without waiting for write/read responses. Note that this register has an effect only if necessary logic is instantiated via the UMCTL2_RDWR_ORDERED_n parameter. Programming Mode: Static */
    vuint32_t _unused_17:15;
  } B;
} UMCTL2_MP_PCFGR_2_tag;

typedef union UMCTL2_MP_PCFGW_2_union_tag { /* Port n Configuration Write */
  vuint32_t R;
  struct {
    vuint32_t WR_PORT_PRIORITY:10;     /* Determines the initial load value of write aging counters. These counters will be parallel loaded after reset, or after each grant to the corresponding port. The aging counters down-count every clock cycle where the port is requesting but not granted. The higher significant 5-bits of the write aging counter sets the initial priority of the write channel of a given port. Port's priority will increase as the higher significant 5-bits of the counter starts to decrease. When the aging counter becomes 0, the corresponding port channel will have the highest priority level. For multi-port configurations, the aging counters cannot be used to set port priorities when external dynamic priority inputs (awqos) are enabled (timeout is still applicable). For single port configurations, the aging counters are only used when they timeout (become 0) to force read-write direction switching. Note: The two LSBs of this register field are tied internally to 2'b00. Programming Mode: Static */
    vuint32_t _unused_10:2;
    vuint32_t WR_PORT_AGING_EN:1;      /* If set to 1, enables aging function for the write channel of the port. Programming Mode: Static */
    vuint32_t WR_PORT_URGENT_EN:1;     /* If set to 1, enables the AXI urgent sideband signal (awurgent). When enabled and awurgent is asserted by the master, that port becomes the highest priority and co_gs_go2critical_wr signal to the MC is asserted if enabled in PCCFG.go2critical_en register. Note that awurgent signal can be asserted anytime and as long as required which is independent of address handshaking (it is not associated with any particular command). Programming Mode: Static */
    vuint32_t WR_PORT_PAGEMATCH_EN:1;  /* If set to 1, enables the Page Match feature. If enabled, once a requesting port is granted, the port is continued to be granted if the following immediate commands are to the same memory page (same bank and same row). See also related PCCFG.pagematch_limit register. Programming Mode: Static */
    vuint32_t _unused_15:17;
  } B;
} UMCTL2_MP_PCFGW_2_tag;

typedef union UMCTL2_MP_PCTRL_2_union_tag { /* Port n Control */
  vuint32_t R;
  struct {
    vuint32_t PORT_EN:1;               /* Enables AXI port n. Programming Mode: Dynamic */
    vuint32_t _unused_1:31;
  } B;
} UMCTL2_MP_PCTRL_2_tag;

typedef union UMCTL2_MP_PCFGQOS0_2_union_tag { /* Port n Read QoS Configuration Register 0 */
  vuint32_t R;
  struct {
    vuint32_t RQOS_MAP_LEVEL1:4;       /* Separation level1 indicating the end of region0 mapping; start of region0 is 0. Possible values for level1 are 0 to 13 (for dual RAQ) or 0 to 14 (for single RAQ) which corresponds to arqos. Note that for PA, arqos values are used directly as port priorities, where the higher the value corresponds to higher port priority. All of the map_level* registers must be set to distinct values. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t _unused_4:4;
    vuint32_t RQOS_MAP_LEVEL2:4;       /* Separation level2 indicating the end of region1 mapping; start of region1 is (level1 + 1). Possible values for level2 are (level1 + 1) to 14 which corresponds to arqos. Region2 starts from (level2 + 1) up to 15. Note that for PA, arqos values are used directly as port priorities, where the higher the value corresponds to higher port priority. All of the map_level* registers must be set to distinct values. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t _unused_12:4;
    vuint32_t RQOS_MAP_REGION0:2;      /* This bitfield indicates the traffic class of region 0. Valid values are: 0: LPR, 1: VPR, 2: HPR. For dual address queue configurations, region 0 maps to the blue address queue. In this case, valid values are: 0: LPR and 1: VPR only. When VPR support is disabled (UMCTL2_VPR_EN = 0) and traffic class of region0 is set to 1 (VPR), VPR traffic is aliased to LPR traffic. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t _unused_18:2;
    vuint32_t RQOS_MAP_REGION1:2;      /* This bitfield indicates the traffic class of region 1. Valid values are: 0 : LPR, 1: VPR, 2: HPR. For dual address queue configurations, region1 maps to the blue address queue. In this case, valid values are 0: LPR and 1: VPR only. When VPR support is disabled (UMCTL2_VPR_EN = 0) and traffic class of region 1 is set to 1 (VPR), VPR traffic is aliased to LPR traffic. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t _unused_22:2;
    vuint32_t RQOS_MAP_REGION2:2;      /* This bitfield indicates the traffic class of region2. For dual address queue configurations, region2 maps to the red address queue. Valid values are 1: VPR and 2: HPR only. When VPR support is disabled (UMCTL2_VPR_EN = 0) and traffic class of region2 is set to 1 (VPR), VPR traffic is aliased to LPR traffic. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t _unused_26:6;
  } B;
} UMCTL2_MP_PCFGQOS0_2_tag;

typedef union UMCTL2_MP_PCFGQOS1_2_union_tag { /* Port n Read QoS Configuration Register 1 */
  vuint32_t R;
  struct {
    vuint32_t RQOS_MAP_TIMEOUTB:11;    /* Specifies the timeout value for transactions mapped to the blue address queue. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t _unused_11:5;
    vuint32_t RQOS_MAP_TIMEOUTR:11;    /* Specifies the timeout value for transactions mapped to the red address queue. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t _unused_27:5;
  } B;
} UMCTL2_MP_PCFGQOS1_2_tag;

typedef union UMCTL2_MP_PCFGWQOS0_2_union_tag { /* Port n Write QoS Configuration Register 0 */
  vuint32_t R;
  struct {
    vuint32_t WQOS_MAP_LEVEL1:4;       /* Separation level indicating the end of region0 mapping; start of region0 is 0. Possible values for level1 are 0 to 13 which corresponds to awqos. Note that for PA, awqos values are used directly as port priorities, where the higher the value corresponds to higher port priority. All of the map_level* registers must be set to distinct values. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t _unused_4:4;
    vuint32_t WQOS_MAP_LEVEL2:4;       /* Separation level2 indicating the end of region1 mapping; start of region1 is (level1 + 1). Possible values for level2 are (level1 + 1) to 14 which corresponds to awqos. Region2 starts from (level2 + 1) up to 15. Note that for PA, awqos values are used directly as port priorities, where the higher the value corresponds to higher port priority. All of the map_level* registers must be set to distinct values. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t _unused_12:4;
    vuint32_t WQOS_MAP_REGION0:2;      /* This bitfield indicates the traffic class of region 0. Valid values are: 0: NPW, 1: VPW. When VPW support is disabled (UMCTL2_VPW_EN = 0) and traffic class of region 0 is set to 1 (VPW), VPW traffic is aliased to NPW traffic. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t _unused_18:2;
    vuint32_t WQOS_MAP_REGION1:2;      /* This bitfield indicates the traffic class of region 1. Valid values are: 0: NPW, 1: VPW. When VPW support is disabled (UMCTL2_VPW_EN = 0) and traffic class of region 1 is set to 1 (VPW), VPW traffic is aliased to NPW traffic. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t _unused_22:2;
    vuint32_t WQOS_MAP_REGION2:2;      /* This bitfield indicates the traffic class of region 2. Valid values are: 0: NPW, 1: VPW. When VPW support is disabled (UMCTL2_VPW_EN = 0) and traffic class of region 2 is set to 1 (VPW), VPW traffic is aliased to NPW traffic. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t _unused_26:6;
  } B;
} UMCTL2_MP_PCFGWQOS0_2_tag;

typedef union UMCTL2_MP_PCFGWQOS1_2_union_tag { /* Port n Write QoS Configuration Register 1 */
  vuint32_t R;
  struct {
    vuint32_t WQOS_MAP_TIMEOUT1:11;    /* Specifies the timeout value for write transactions in region 0 and 1. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t _unused_11:5;
    vuint32_t WQOS_MAP_TIMEOUT2:11;    /* Specifies the timeout value for write transactions in region 2. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t _unused_27:5;
  } B;
} UMCTL2_MP_PCFGWQOS1_2_tag;

typedef union UMCTL2_MP_SBRCTL_union_tag { /* Scrubber Control */
  vuint32_t R;
  struct {
    vuint32_t SCRUB_EN:1;              /* Enable ECC scrubber. If set to 1, enables the scrubber to generate background read commands after the memories are initialized. If set to 0, disables the scrubber, resets the address generator to 0 and clears the scrubber status. This bitfield must be accessed separately from the other bitfields in this register. Programming Mode: Dynamic */
    vuint32_t SCRUB_DURING_LOWPOWER:1; /* Continue scrubbing during low power. If set to 1, burst of scrubs will be issued in HW controlled low power modes. There are two such modes: automatically initiated by idleness or initiated by Hardware low power interface. If set to 0, the scrubber will not attempt to send commands while the MC is in HW controlled low power modes. In this case, the scrubber will remember the last address issued and will automatically continue from there when the MC exits the LP mode. Programming Mode: Dynamic */
    vuint32_t SCRUB_MODE:1;            /* scrub_mode:0 ECC scrubber will perform reads scrub_mode:1 ECC scrubber will perform writes Programming Mode: Dynamic */
    vuint32_t _unused_3:1;
    vuint32_t SCRUB_BURST:3;           /* Scrub burst count. Determines the number of back-to-back scrub read commands that can be issued together when the controller is in one of the HW controlled low power modes with Sideband ECC, both normal operation mode and low-power mode with Inline ECC. During these modes, the period of the scrub burst becomes "scrub_burst*scrub_interval" cycles. During normal operation mode of the controller with Sideband ECC (not in power-down or self refresh), scrub_burst is ignored and only one scrub command is generated. Valid values are (Sideband ECC): 1: 1 read, 2: 4 reads, 3: 16 reads, 4: 64 reads, 5: 256 reads, 6: 1024 reads. (Inline ECC): 1: 8 reads, 2: 16 reads, 3: 32 reads. New programmed value will take effect only after scrubber is disabled by programming scrub_en to 0. Programming Mode: Dynamic */
    vuint32_t _unused_7:1;
    vuint32_t SCRUB_INTERVAL:13;       /* Scrub interval. (512 x scrub_interval) number of clock cycles between two scrub read commands. If set to 0, scrub commands are issued back-to-back. This mode of operation (scrub_interval=0) can typically be used for scrubbing the full range of memory at once before or after SW controlled low power operations. After completing the full range of scrub while scrub_interval=0, scrub_done register is set and sbr_done_intr interrupt signal is asserted. This mode can't be used with Inline ECC: If MEMC_INLINE_ECC is 1 and scrub_interval is programme to 0, then RMW logic inside scrubber is disabled. New programmed value will take effect only after scrubber is disabled by programming scrub_en to 0. Unit: Multiples of 512 sbr_clk cycles. Programming Mode: Dynamic */
    vuint32_t _unused_21:11;
  } B;
} UMCTL2_MP_SBRCTL_tag;

typedef union UMCTL2_MP_SBRSTAT_union_tag { /* Scrubber Status */
  vuint32_t R;
  struct {
    vuint32_t SCRUB_BUSY:1;            /* Scrubber busy. Controller sets this bit to 1 when the scrubber logic has outstanding read commands being executed. Cleared when there are no active outstanding scrub reads in the system. Programming Mode: Dynamic */
    vuint32_t SCRUB_DONE:1;            /* Scrubber done. Controller sets this bit to 1, after full range of addresses are scrubbed once while scrub_interval is set to 0. Cleared if scrub_en is set to 0 (scrubber disabled) or scrub_interval is set to a non-zero value for normal scrub operation. The interrupt signal, sbr_done_intr, is equivalent to this status bitfield. Programming Mode: Dynamic */
    vuint32_t _unused_2:30;
  } B;
} UMCTL2_MP_SBRSTAT_tag;

typedef union UMCTL2_MP_SBRWDATA0_union_tag { /* Scrubber Write Data Pattern0 */
  vuint32_t R;
  struct {
    vuint32_t SCRUB_PATTERN0:32;       /* ECC Scrubber write data pattern for data bus[31:0] Programming Mode: Dynamic */
  } B;
} UMCTL2_MP_SBRWDATA0_tag;

struct UMCTL2_MP_tag {
  uint8_t UMCTL2_MP_reserved0[4];
  UMCTL2_MP_PSTAT_tag PSTAT;           /* Port Status */
  UMCTL2_MP_PCCFG_tag PCCFG;           /* Port Common Configuration */
  UMCTL2_MP_PCFGR_0_tag PCFGR_0;       /* Port n Configuration Read */
  UMCTL2_MP_PCFGW_0_tag PCFGW_0;       /* Port n Configuration Write */
  uint8_t UMCTL2_MP_reserved1[132];
  UMCTL2_MP_PCTRL_0_tag PCTRL_0;       /* Port n Control */
  UMCTL2_MP_PCFGQOS0_0_tag PCFGQOS0_0; /* Port n Read QoS Configuration Register 0 */
  UMCTL2_MP_PCFGQOS1_0_tag PCFGQOS1_0; /* Port n Read QoS Configuration Register 1 */
  UMCTL2_MP_PCFGWQOS0_0_tag PCFGWQOS0_0; /* Port n Write QoS Configuration Register 0 */
  UMCTL2_MP_PCFGWQOS1_0_tag PCFGWQOS1_0; /* Port n Write QoS Configuration Register 1 */
  uint8_t UMCTL2_MP_reserved2[16];
  UMCTL2_MP_PCFGR_1_tag PCFGR_1;       /* Port n Configuration Read */
  UMCTL2_MP_PCFGW_1_tag PCFGW_1;       /* Port n Configuration Write */
  uint8_t UMCTL2_MP_reserved3[132];
  UMCTL2_MP_PCTRL_1_tag PCTRL_1;       /* Port n Control */
  UMCTL2_MP_PCFGQOS0_1_tag PCFGQOS0_1; /* Port n Read QoS Configuration Register 0 */
  UMCTL2_MP_PCFGQOS1_1_tag PCFGQOS1_1; /* Port n Read QoS Configuration Register 1 */
  UMCTL2_MP_PCFGWQOS0_1_tag PCFGWQOS0_1; /* Port n Write QoS Configuration Register 0 */
  UMCTL2_MP_PCFGWQOS1_1_tag PCFGWQOS1_1; /* Port n Write QoS Configuration Register 1 */
  uint8_t UMCTL2_MP_reserved4[16];
  UMCTL2_MP_PCFGR_2_tag PCFGR_2;       /* Port n Configuration Read */
  UMCTL2_MP_PCFGW_2_tag PCFGW_2;       /* Port n Configuration Write */
  uint8_t UMCTL2_MP_reserved5[132];
  UMCTL2_MP_PCTRL_2_tag PCTRL_2;       /* Port n Control */
  UMCTL2_MP_PCFGQOS0_2_tag PCFGQOS0_2; /* Port n Read QoS Configuration Register 0 */
  UMCTL2_MP_PCFGQOS1_2_tag PCFGQOS1_2; /* Port n Read QoS Configuration Register 1 */
  UMCTL2_MP_PCFGWQOS0_2_tag PCFGWQOS0_2; /* Port n Write QoS Configuration Register 0 */
  UMCTL2_MP_PCFGWQOS1_2_tag PCFGWQOS1_2; /* Port n Write QoS Configuration Register 1 */
  uint8_t UMCTL2_MP_reserved6[2336];
  UMCTL2_MP_SBRCTL_tag SBRCTL;         /* Scrubber Control */
  UMCTL2_MP_SBRSTAT_tag SBRSTAT;       /* Scrubber Status */
  UMCTL2_MP_SBRWDATA0_tag SBRWDATA0;   /* Scrubber Write Data Pattern0 */
};


/* ============================================================================
   =============================== Module: UMCTL2_REGS ========================
   ============================================================================ */

typedef union UMCTL2_REGS_MSTR_union_tag { /* Master */
  vuint32_t R;
  struct {
    vuint32_t DDR3:1;                  /* DDR3 */
    vuint32_t _unused_1:1;
    vuint32_t LPDDR2:1;                /* LPDDR2 */
    vuint32_t LPDDR3:1;                /* LPDDR3 */
    vuint32_t DDR4:1;                  /* DDR4 */
    vuint32_t LPDDR4:1;                /* LPDDR4 */
    vuint32_t _unused_6:3;
    vuint32_t BURSTCHOP:1;             /* Burst */
    vuint32_t EN_2T_TIMING_MODE:1;     /* 2T timing */
    vuint32_t GEARDOWN_MODE:1;         /* Geardown */
    vuint32_t DATA_BUS_WIDTH:2;        /* Data bus width */
    vuint32_t _unused_14:1;
    vuint32_t DLL_OFF_MODE:1;          /* Dll-off mode */
    vuint32_t BURST_RDWR:4;            /* DRAM burst length */
    vuint32_t _unused_20:4;
    vuint32_t ACTIVE_RANKS:4;          /* Active ranks */
    vuint32_t _unused_28:2;
    vuint32_t DEVICE_CONFIG:2;         /* Device configuration */
  } B;
} UMCTL2_REGS_MSTR_tag;

typedef union UMCTL2_REGS_STAT_union_tag { /* Operating mode status */
  vuint32_t R;
  struct {
    vuint32_t OPERATING_MODE:3;        /* Operating state */
    vuint32_t _unused_3:1;
    vuint32_t SELFREF_TYPE:2;          /* Self refresh mode */
    vuint32_t _unused_6:2;
    vuint32_t SELFREF_STATE:2;         /* Self refresh state */
    vuint32_t _unused_10:2;
    vuint32_t SELFREF_CAM_NOT_EMPTY:1; /* Self refresh with CAMs not empty */
    vuint32_t _unused_13:19;
  } B;
} UMCTL2_REGS_STAT_tag;

typedef union UMCTL2_REGS_MRCTRL0_union_tag { /* Mode Register read/write control 0 */
  vuint32_t R;
  struct {
    vuint32_t MR_TYPE:1;               /* Mode Register operation */
    vuint32_t MPR_EN:1;                /* Multi-purpose register */
    vuint32_t PDA_EN:1;                /* Per DRAM addressability */
    vuint32_t SW_INIT_INT:1;           /* Software intervention */
    vuint32_t MR_RANK:2;               /* Rank access */
    vuint32_t _unused_6:6;
    vuint32_t MR_ADDR:4;               /* Mode Register address */
    vuint32_t _unused_16:14;
    vuint32_t PBA_MODE:1;              /* Per buffer addressability */
    vuint32_t MR_WR:1;                 /* Mode Register read/write */
  } B;
} UMCTL2_REGS_MRCTRL0_tag;

typedef union UMCTL2_REGS_MRCTRL1_union_tag { /* Mode Register Read/Write Control 1 */
  vuint32_t R;
  struct {
    vuint32_t MR_DATA:18;              /* Mode Register write data */
    vuint32_t _unused_18:14;
  } B;
} UMCTL2_REGS_MRCTRL1_tag;

typedef union UMCTL2_REGS_MRSTAT_union_tag { /* Mode Register Read/Write Status */
  vuint32_t R;
  struct {
    vuint32_t MR_WR_BUSY:1;            /* MR busy */
    vuint32_t _unused_1:7;
    vuint32_t PDA_DONE:1;              /* PDA operation complete */
    vuint32_t _unused_9:23;
  } B;
} UMCTL2_REGS_MRSTAT_tag;

typedef union UMCTL2_REGS_MRCTRL2_union_tag { /* Mode Register Read/Write Control 2 */
  vuint32_t R;
  struct {
    vuint32_t MR_DEVICE_SEL:32;        /* MRS device select */
  } B;
} UMCTL2_REGS_MRCTRL2_tag;

typedef union UMCTL2_REGS_DERATEEN_union_tag { /* Temperature derate enable */
  vuint32_t R;
  struct {
    vuint32_t DERATE_ENABLE:1;         /* Derate enable */
    vuint32_t DERATE_VALUE:2;          /* Derate value */
    vuint32_t _unused_3:1;
    vuint32_t DERATE_BYTE:4;           /* Derate byte */
    vuint32_t RC_DERATE_VALUE:3;       /* tRC derate value */
    vuint32_t _unused_11:21;
  } B;
} UMCTL2_REGS_DERATEEN_tag;

typedef union UMCTL2_REGS_DERATEINT_union_tag { /* Temperature derate interval */
  vuint32_t R;
  struct {
    vuint32_t MR4_READ_INTERVAL:32;    /* MR4 read interval */
  } B;
} UMCTL2_REGS_DERATEINT_tag;

typedef union UMCTL2_REGS_DERATECTL_union_tag { /* Temperature derate control */
  vuint32_t R;
  struct {
    vuint32_t DERATE_TEMP_LIMIT_INTR_EN:1; /* Temperature derate limit interrupt enable */
    vuint32_t DERATE_TEMP_LIMIT_INTR_CLR:1; /* Temperature derate limit interrupt clear */
    vuint32_t DERATE_TEMP_LIMIT_INTR_FORCE:1; /* Temperature derate limit interrupt clear */
    vuint32_t _unused_3:29;
  } B;
} UMCTL2_REGS_DERATECTL_tag;

typedef union UMCTL2_REGS_PWRCTL_union_tag { /* Low power control */
  vuint32_t R;
  struct {
    vuint32_t SELFREF_EN:1;            /* Self-refresh enable */
    vuint32_t POWERDOWN_EN:1;          /* Power down enable */
    vuint32_t DEEPPOWERDOWN_EN:1;      /* Deep power down enable */
    vuint32_t EN_DFI_DRAM_CLK_DISABLE:1; /* Enable DFI DRAM clock disable */
    vuint32_t MPSM_EN:1;               /* Maximum power saving mode enable */
    vuint32_t SELFREF_SW:1;            /* Software self refresh */
    vuint32_t STAY_IN_SELFREF:1;       /* Stay in self refresh */
    vuint32_t DIS_CAM_DRAIN_SELFREF:1; /* Skip CAM draining */
    vuint32_t LPDDR4_SR_ALLOWED:1;     /* LPDDR4 SRPD-SR transition */
    vuint32_t _unused_9:23;
  } B;
} UMCTL2_REGS_PWRCTL_tag;

typedef union UMCTL2_REGS_PWRTMG_union_tag { /* Low Power Timing */
  vuint32_t R;
  struct {
    vuint32_t POWERDOWN_TO_X32:5;      /* Power down idle period */
    vuint32_t _unused_5:3;
    vuint32_t T_DPD_X4096:8;           /* Minimum deep power down period */
    vuint32_t SELFREF_TO_X32:8;        /* Self-refresh idle period */
    vuint32_t _unused_24:8;
  } B;
} UMCTL2_REGS_PWRTMG_tag;

typedef union UMCTL2_REGS_HWLPCTL_union_tag { /* Hardware low power control */
  vuint32_t R;
  struct {
    vuint32_t HW_LP_EN:1;              /* Hardware low power interface enable */
    vuint32_t HW_LP_EXIT_IDLE_EN:1;    /* Hardware low power exit enable */
    vuint32_t _unused_2:14;
    vuint32_t HW_LP_IDLE_X32:12;       /* Hardware low power idle period */
    vuint32_t _unused_28:4;
  } B;
} UMCTL2_REGS_HWLPCTL_tag;

typedef union UMCTL2_REGS_RFSHCTL0_union_tag { /* Refresh Control 0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t PER_BANK_REFRESH:1;      /* Per-bank refresh enable */
    vuint32_t _unused_3:1;
    vuint32_t REFRESH_BURST:6;         /* Burst refresh */
    vuint32_t _unused_10:2;
    vuint32_t REFRESH_TO_X1_X32:5;     /* Speculative refresh period */
    vuint32_t _unused_17:3;
    vuint32_t REFRESH_MARGIN:4;        /* Refresh margin */
    vuint32_t _unused_24:8;
  } B;
} UMCTL2_REGS_RFSHCTL0_tag;

typedef union UMCTL2_REGS_RFSHCTL1_union_tag { /* Refresh control 1 */
  vuint32_t R;
  struct {
    vuint32_t REFRESH_TIMER0_START_VALUE_X32:12; /* Refresh timer start rank 0 */
    vuint32_t _unused_12:4;
    vuint32_t REFRESH_TIMER1_START_VALUE_X32:12; /* Refresh timer start rank 1 */
    vuint32_t _unused_28:4;
  } B;
} UMCTL2_REGS_RFSHCTL1_tag;

typedef union UMCTL2_REGS_RFSHCTL3_union_tag { /* Refresh Control 3 */
  vuint32_t R;
  struct {
    vuint32_t DIS_AUTO_REFRESH:1;      /* Auto refresh disable */
    vuint32_t REFRESH_UPDATE_LEVEL:1;  /* Refresh update level */
    vuint32_t _unused_2:2;
    vuint32_t REFRESH_MODE:3;          /* Fine granularity refresh mode */
    vuint32_t _unused_7:25;
  } B;
} UMCTL2_REGS_RFSHCTL3_tag;

typedef union UMCTL2_REGS_RFSHTMG_union_tag { /* Refresh Timing */
  vuint32_t R;
  struct {
    vuint32_t T_RFC_MIN:10;            /* Refresh cycle time minimum */
    vuint32_t _unused_10:5;
    vuint32_t LPDDR3_TREFBW_EN:1;      /* Burst refresh window parameter enable */
    vuint32_t T_RFC_NOM_X1_X32:12;     /* Average refresh interval per rank */
    vuint32_t _unused_28:3;
    vuint32_t T_RFC_NOM_X1_SEL:1;      /* Refresh units */
  } B;
} UMCTL2_REGS_RFSHTMG_tag;

typedef union UMCTL2_REGS_RFSHTMG1_union_tag { /* Refresh timing 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t T_PBR2PBR:8;             /* Per-bank refresh to per-bank refresh different bank time */
    vuint32_t _unused_24:8;
  } B;
} UMCTL2_REGS_RFSHTMG1_tag;

typedef union UMCTL2_REGS_ECCCFG0_union_tag { /* ECC Configuration 0 */
  vuint32_t R;
  struct {
    vuint32_t ECC_MODE:3;              /* ECC mode */
    vuint32_t _unused_3:1;
    vuint32_t DIS_SCRUB:1;             /* ECC scrubs disable */
    vuint32_t _unused_5:1;
    vuint32_t ECC_AP_EN:1;             /* Address protection enable */
    vuint32_t _unused_7:1;
    vuint32_t ECC_REGION_MAP:7;        /* Selectable protected region map */
    vuint32_t _unused_15:1;
    vuint32_t BLK_CHANNEL_IDLE_TIME_X32:6; /* Block channel idle time */
    vuint32_t _unused_22:2;
    vuint32_t ECC_AP_ERR_THRESHOLD:3;  /* Address parity error threshold */
    vuint32_t _unused_27:3;
    vuint32_t ECC_REGION_MAP_GRANU:2;  /* Selectable protected region granularity */
  } B;
} UMCTL2_REGS_ECCCFG0_tag;

typedef union UMCTL2_REGS_ECCCFG1_union_tag { /* ECC Configuration 1 */
  vuint32_t R;
  struct {
    vuint32_t DATA_POISON_EN:1;        /* ECC data poisoning enable */
    vuint32_t DATA_POISON_BIT:1;       /* Data poison bits */
    vuint32_t _unused_2:2;
    vuint32_t ECC_REGION_PARITY_LOCK:1; /* ECC parity section lock */
    vuint32_t ECC_REGION_WASTE_LOCK:1; /* ECC waste region lock */
    vuint32_t _unused_6:1;
    vuint32_t BLK_CHANNEL_ACTIVE_TERM:1; /* Block channel active terminate enable */
    vuint32_t ACTIVE_BLK_CHANNEL:4;    /* Active block channels */
    vuint32_t _unused_12:20;
  } B;
} UMCTL2_REGS_ECCCFG1_tag;

typedef union UMCTL2_REGS_ECCSTAT_union_tag { /* SECDED ECC Status */
  vuint32_t R;
  struct {
    vuint32_t ECC_CORRECTED_BIT_NUM:7; /* ECC corrected bit number */
    vuint32_t _unused_7:1;
    vuint32_t ECC_CORRECTED_ERR:1;     /* Single-bit error indicator */
    vuint32_t _unused_9:7;
    vuint32_t ECC_UNCORRECTED_ERR:1;   /* Double-bit error indicator */
    vuint32_t _unused_17:15;
  } B;
} UMCTL2_REGS_ECCSTAT_tag;

typedef union UMCTL2_REGS_ECCCTL_union_tag { /* ECC Control */
  vuint32_t R;
  struct {
    vuint32_t ECC_CORRECTED_ERR_CLR:1; /* Clear corrected ECC error */
    vuint32_t ECC_UNCORRECTED_ERR_CLR:1; /* Clear uncorrected ECC error */
    vuint32_t ECC_CORR_ERR_CNT_CLR:1;  /* Clear corrected ECC error count */
    vuint32_t ECC_UNCORR_ERR_CNT_CLR:1; /* Clear uncorrected ECC error count */
    vuint32_t ECC_AP_ERR_INTR_CLR:1;   /* Clear ECC address protection error interrupt */
    vuint32_t _unused_5:3;
    vuint32_t ECC_CORRECTED_ERR_INTR_EN:1; /* Corrected ECC error interrupt enable */
    vuint32_t ECC_UNCORRECTED_ERR_INTR_EN:1; /* Uncorrected ECC error interrupt enable */
    vuint32_t ECC_AP_ERR_INTR_EN:1;    /* ECC address protection error interrupt enable */
    vuint32_t _unused_11:5;
    vuint32_t ECC_CORRECTED_ERR_INTR_FORCE:1; /* Corrected ECC error interrupt force */
    vuint32_t ECC_UNCORRECTED_ERR_INTR_FORCE:1; /* Uncorrected ECC error interrupt force */
    vuint32_t ECC_AP_ERR_INTR_FORCE:1; /* ECC address protection error interrupt force */
    vuint32_t _unused_19:13;
  } B;
} UMCTL2_REGS_ECCCTL_tag;

typedef union UMCTL2_REGS_ECCERRCNT_union_tag { /* ECC Error Counter */
  vuint32_t R;
  struct {
    vuint32_t ECC_CORR_ERR_CNT:16;     /* Correctable ECC errors count */
    vuint32_t ECC_UNCORR_ERR_CNT:16;   /* Uncorrectable ECC errors count */
  } B;
} UMCTL2_REGS_ECCERRCNT_tag;

typedef union UMCTL2_REGS_ECCCADDR0_union_tag { /* ECC Corrected Error Address 0 */
  vuint32_t R;
  struct {
    vuint32_t ECC_CORR_ROW:18;         /* Page/row number */
    vuint32_t _unused_18:6;
    vuint32_t ECC_CORR_RANK:1;         /* Rank number */
    vuint32_t _unused_25:7;
  } B;
} UMCTL2_REGS_ECCCADDR0_tag;

typedef union UMCTL2_REGS_ECCCADDR1_union_tag { /* ECC Corrected Error Address 1 */
  vuint32_t R;
  struct {
    vuint32_t ECC_CORR_COL:12;         /* Block number */
    vuint32_t _unused_12:4;
    vuint32_t ECC_CORR_BANK:3;         /* Bank number */
    vuint32_t _unused_19:5;
    vuint32_t ECC_CORR_BG:2;           /* Bank group */
    vuint32_t _unused_26:6;
  } B;
} UMCTL2_REGS_ECCCADDR1_tag;

typedef union UMCTL2_REGS_ECCCSYN0_union_tag { /* ECC Corrected Syndrome 0 */
  vuint32_t R;
  struct {
    vuint32_t ECC_CORR_SYNDROMES_31_0:32; /* Corrected ECC error data pattern: bits 31-0 */
  } B;
} UMCTL2_REGS_ECCCSYN0_tag;

typedef union UMCTL2_REGS_ECCCSYN1_union_tag { /* ECC Corrected Syndrome 1 */
  vuint32_t R;
  struct {
    vuint32_t ECC_CORR_SYNDROMES_63_32:32; /* Corrected ECC error data pattern: bits 63-31 */
  } B;
} UMCTL2_REGS_ECCCSYN1_tag;

typedef union UMCTL2_REGS_ECCCSYN2_union_tag { /* ECC Corrected Syndrome 2 */
  vuint32_t R;
  struct {
    vuint32_t ECC_CORR_SYNDROMES_71_64:8; /* Corrected ECC error data pattern: ECC byte */
    vuint32_t _unused_8:24;
  } B;
} UMCTL2_REGS_ECCCSYN2_tag;

typedef union UMCTL2_REGS_ECCBITMASK0_union_tag { /* ECC Corrected Data Bit Mask 0 */
  vuint32_t R;
  struct {
    vuint32_t ECC_CORR_BIT_MASK_31_0:32; /* Corrected data bit mask: bits 31-0 */
  } B;
} UMCTL2_REGS_ECCBITMASK0_tag;

typedef union UMCTL2_REGS_ECCBITMASK1_union_tag { /* ECC Corrected Data Bit Mask 1 */
  vuint32_t R;
  struct {
    vuint32_t ECC_CORR_BIT_MASK_63_32:32; /* Corrected data bit mask: bits 63-32 */
  } B;
} UMCTL2_REGS_ECCBITMASK1_tag;

typedef union UMCTL2_REGS_ECCBITMASK2_union_tag { /* ECC Corrected Data Bit Mask 2 */
  vuint32_t R;
  struct {
    vuint32_t ECC_CORR_BIT_MASK_71_64:8; /* Corrected data bit mask: ECC byte */
    vuint32_t _unused_8:24;
  } B;
} UMCTL2_REGS_ECCBITMASK2_tag;

typedef union UMCTL2_REGS_ECCUADDR0_union_tag { /* ECC Uncorrected Error Address 0 */
  vuint32_t R;
  struct {
    vuint32_t ECC_UNCORR_ROW:18;       /* Page/row number */
    vuint32_t _unused_18:6;
    vuint32_t ECC_UNCORR_RANK:1;       /* Rank number */
    vuint32_t _unused_25:7;
  } B;
} UMCTL2_REGS_ECCUADDR0_tag;

typedef union UMCTL2_REGS_ECCUADDR1_union_tag { /* ECC Uncorrected Error Address 1 */
  vuint32_t R;
  struct {
    vuint32_t ECC_UNCORR_COL:12;       /* Block number */
    vuint32_t _unused_12:4;
    vuint32_t ECC_UNCORR_BANK:3;       /* Bank number */
    vuint32_t _unused_19:5;
    vuint32_t ECC_UNCORR_BG:2;         /* Bank group */
    vuint32_t _unused_26:6;
  } B;
} UMCTL2_REGS_ECCUADDR1_tag;

typedef union UMCTL2_REGS_ECCUSYN0_union_tag { /* ECC Uncorrected Syndrome 0 */
  vuint32_t R;
  struct {
    vuint32_t ECC_UNCORR_SYNDROMES_31_0:32; /* Uncorrected ECC error data pattern: bits 31-0 */
  } B;
} UMCTL2_REGS_ECCUSYN0_tag;

typedef union UMCTL2_REGS_ECCUSYN1_union_tag { /* ECC Uncorrected Syndrome 1 */
  vuint32_t R;
  struct {
    vuint32_t ECC_UNCORR_SYNDROMES_63_32:32; /* Uncorrected ECC error data pattern: bits 63-31 */
  } B;
} UMCTL2_REGS_ECCUSYN1_tag;

typedef union UMCTL2_REGS_ECCUSYN2_union_tag { /* ECC Uncorrected Syndrome 2 */
  vuint32_t R;
  struct {
    vuint32_t ECC_UNCORR_SYNDROMES_71_64:8; /* Uncorrected ECC error data pattern: ECC byte */
    vuint32_t _unused_8:24;
  } B;
} UMCTL2_REGS_ECCUSYN2_tag;

typedef union UMCTL2_REGS_ECCPOISONADDR0_union_tag { /* ECC Data Poisoning Address 0 */
  vuint32_t R;
  struct {
    vuint32_t ECC_POISON_COL:12;       /* ECC poisoning column address */
    vuint32_t _unused_12:12;
    vuint32_t ECC_POISON_RANK:1;       /* ECC poisoning rank address */
    vuint32_t _unused_25:7;
  } B;
} UMCTL2_REGS_ECCPOISONADDR0_tag;

typedef union UMCTL2_REGS_ECCPOISONADDR1_union_tag { /* ECC Data Poisoning Address 1 */
  vuint32_t R;
  struct {
    vuint32_t ECC_POISON_ROW:18;       /* ECC poisoning row address */
    vuint32_t _unused_18:6;
    vuint32_t ECC_POISON_BANK:3;       /* ECC poisoning bank address */
    vuint32_t _unused_27:1;
    vuint32_t ECC_POISON_BG:2;         /* ECC poisoning bank group address */
    vuint32_t _unused_30:2;
  } B;
} UMCTL2_REGS_ECCPOISONADDR1_tag;

typedef union UMCTL2_REGS_CRCPARCTL0_union_tag { /* CRC Parity Control 0 */
  vuint32_t R;
  struct {
    vuint32_t DFI_ALERT_ERR_INT_EN:1;  /* Interrupt enable bit for DFI alert error. If this bit is set, any parity/CRC error detected on the dfi_alert_n input will result in an interrupt being set on CRCPARSTAT.dfi_alert_err_int. Programming Mode: Dynamic */
    vuint32_t DFI_ALERT_ERR_INT_CLR:1; /* Interrupt clear bit for DFI alert error. If this bit is set, the alert error interrupt on CRCPARSTAT.dfi_alert_err_int will be cleared. uMCTL2 automatically clears this bit. Programming Mode: Dynamic */
    vuint32_t DFI_ALERT_ERR_CNT_CLR:1; /* DFI alert error count clear. Clear bit for DFI alert error counter. Asserting this bit will clear the DFI alert error counter, CRCPARSTAT.dfi_alert_err_cnt. uMCTL2 automatically clears this bit. Programming Mode: Dynamic */
    vuint32_t _unused_3:29;
  } B;
} UMCTL2_REGS_CRCPARCTL0_tag;

typedef union UMCTL2_REGS_CRCPARCTL1_union_tag { /* CRC Parity Control 1 */
  vuint32_t R;
  struct {
    vuint32_t PARITY_ENABLE:1;         /* C/A Parity enable register - 1: Enable generation of C/A parity and detection of C/A parity error - 0: Disable generation of C/A parity and disable detection of C/A parity error If RCD's parity error detection or DRAM's parity detection is enabled, this register should be 1. Programming Mode: Static */
    vuint32_t _unused_1:3;
    vuint32_t CRC_ENABLE:1;            /* CRC enable - 1: Enable generation of CRC - 0: Disable generation of CRC The setting of this register should match the CRC mode register setting in the DRAM. Programming Mode: Quasi-dynamic Group 2 */
    vuint32_t _unused_5:2;
    vuint32_t CRC_INC_DM:1;            /* CRC Calculation setting register - 1: CRC includes DM signal - 0: CRC not includes DM signal Present only in designs configured to support DDR4. Programming Mode: Static */
    vuint32_t _unused_8:4;
    vuint32_t CAPARITY_DISABLE_BEFORE_SR:1; /* If DDR4-DRAM's CA parity is enabled by INIT6.mr5[2:0]!=0 and this register is set to 1, CA parity is automatically disabled before Self-Refresh entry and enabled after Self-Refresh exit by issuing MR5. - 1: CA parity is disabled before Self-Refresh entry - 0: CA parity is not disabled before Self-Refresh entry If Geardown is used by MSTR.geardown_mode=1, this register must be set to 1. If this register set to 0, DRAMTMG5.t_ckesr and DRAMTMG5.t_cksre must be increased by PL(Parity latency) Programming Mode: Static */
    vuint32_t _unused_13:19;
  } B;
} UMCTL2_REGS_CRCPARCTL1_tag;

typedef union UMCTL2_REGS_CRCPARSTAT_union_tag { /* CRC Parity Status */
  vuint32_t R;
  struct {
    vuint32_t DFI_ALERT_ERR_CNT:16;    /* DFI alert error count. If a parity/CRC error is detected on dfi_alert_n, this counter be incremented. This is independent of the setting of CRCPARCTL0.dfi_alert_err_int_en. It will saturate at 0xFFFF, and can be cleared by asserting CRCPARCTL0.dfi_alert_err_cnt_clr. Programming Mode: Static */
    vuint32_t DFI_ALERT_ERR_INT:1;     /* DFI alert error interrupt. If a parity/CRC error is detected on dfi_alert_n, and the interrupt is enabled by CRCPARCTL0.dfi_alert_err_int_en, this interrupt bit will be set. It will remain set until cleared by CRCPARCTL0.dfi_alert_err_int_clr Programming Mode: Static */
    vuint32_t _unused_17:15;
  } B;
} UMCTL2_REGS_CRCPARSTAT_tag;

typedef union UMCTL2_REGS_INIT0_union_tag { /* DRAM Initialization 0 */
  vuint32_t R;
  struct {
    vuint32_t PRE_CKE_X1024:12;        /* Pre-CKE Interval */
    vuint32_t _unused_12:4;
    vuint32_t POST_CKE_X1024:10;       /* Post-CKE Interval */
    vuint32_t _unused_26:4;
    vuint32_t SKIP_DRAM_INIT:2;        /* Skip DRAM Initialization/Reset State */
  } B;
} UMCTL2_REGS_INIT0_tag;

typedef union UMCTL2_REGS_INIT1_union_tag { /* DRAM Initialization 1 */
  vuint32_t R;
  struct {
    vuint32_t PRE_OCD_X32:4;           /* Pre-OCD Interval */
    vuint32_t _unused_4:12;
    vuint32_t DRAM_RSTN_X1024:9;       /* Reset Signal Assert Interval */
    vuint32_t _unused_25:7;
  } B;
} UMCTL2_REGS_INIT1_tag;

typedef union UMCTL2_REGS_INIT2_union_tag { /* DRAM Initialization 2 */
  vuint32_t R;
  struct {
    vuint32_t MIN_STABLE_CLOCK_X1:4;   /* Time to wait after the first CKE high, tINIT2. Present only in designs configured to support LPDDR2/LPDDR3. LPDDR2/LPDDR3 typically requires 5 x tCK delay. When the controller is operating in 1:2 frequency ratio mode, program this to JEDEC spec value divided by 2, and round it up to the next integer value. Unit: DFI clock cycles. Programming Mode: Static */
    vuint32_t _unused_4:4;
    vuint32_t IDLE_AFTER_RESET_X32:8;  /* Idle time after the reset command, tINIT4. Present only in designs configured to support LPDDR2. When the controller is operating in 1:2 frequency ratio mode, program this to JEDEC spec value divided by 2, and round it up to the next integer value. Unit: Multiples of 32 DFI clock cycles. Programming Mode: Static */
    vuint32_t _unused_16:16;
  } B;
} UMCTL2_REGS_INIT2_tag;

typedef union UMCTL2_REGS_INIT3_union_tag { /* DRAM Initialization 3 */
  vuint32_t R;
  struct {
    vuint32_t EMR:16;                  /* Extended Mode Register Value */
    vuint32_t MR:16;                   /* Mode Register Value */
  } B;
} UMCTL2_REGS_INIT3_tag;

typedef union UMCTL2_REGS_INIT4_union_tag { /* DRAM Initialization 4 */
  vuint32_t R;
  struct {
    vuint32_t EMR3:16;                 /* Extended Mode Register 3 Value */
    vuint32_t EMR2:16;                 /* Extended Mode Register 2 Value */
  } B;
} UMCTL2_REGS_INIT4_tag;

typedef union UMCTL2_REGS_INIT5_union_tag { /* DRAM Initialization 5 */
  vuint32_t R;
  struct {
    vuint32_t MAX_AUTO_INIT_X1024:10;  /* Maximum duration of the auto initialization, tINIT5. Present only in designs configured to support LPDDR2/LPDDR3. LPDDR2/LPDDR3 typically requires 10 us. Unit: Multiples of 1024 DFI clock cycles. Programming Mode: Static */
    vuint32_t _unused_10:6;
    vuint32_t DEV_ZQINIT_X32:8;        /* ZQ initial calibration, tZQINIT. Present only in designs configured to support DDR3 or DDR4 or LPDDR2/LPDDR3. DDR3 typically requires 512 DRAM clock cycles. DDR4 requires 1024 DRAM clock cycles. LPDDR2/LPDDR3 requires 1 us. When the controller is operating in 1:2 frequency ratio mode, program this to JEDEC spec value divided by 2, and round it up to the next integer value. Unit: Multiples of 32 DFI clock cycles. Programming Mode: Static */
    vuint32_t _unused_24:8;
  } B;
} UMCTL2_REGS_INIT5_tag;

typedef union UMCTL2_REGS_INIT6_union_tag { /* DRAM Initialization 6 */
  vuint32_t R;
  struct {
    vuint32_t MR5:16;                  /* Mode Register 5 Value */
    vuint32_t MR4:16;                  /* Mode Register 4 Value */
  } B;
} UMCTL2_REGS_INIT6_tag;

typedef union UMCTL2_REGS_INIT7_union_tag { /* DRAM Initialization 7 */
  vuint32_t R;
  struct {
    vuint32_t MR6:16;                  /* Mode Register 6 Value */
    vuint32_t MR22:16;                 /* Mode Register 22 Value */
  } B;
} UMCTL2_REGS_INIT7_tag;

typedef union UMCTL2_REGS_DIMMCTL_union_tag { /* DIMM Control */
  vuint32_t R;
  struct {
    vuint32_t DIMM_STAGGER_CS_EN:1;    /* Staggering enable for multi-rank accesses (for multi-rank UDIMM, RDIMM and LRDIMM implementations only). This is not supported for mDDR, LPDDR2, LPDDR3 or LPDDR4 SDRAMs. Note: Even if this bit is set it does not take care of software driven MR commands (via MRCTRL0/MRCTRL1), where software is responsible to send them to seperate ranks as appropriate. - 1 - (DDR4) Send MRS commands to each ranks seperately - 1 - (non-DDR4) Send all commands to even and odd ranks seperately - 0 - Do not stagger accesses Programming Mode: Static */
    vuint32_t DIMM_ADDR_MIRR_EN:1;     /* Address Mirroring Enable (for multi-rank UDIMM implementations and multi-rank DDR4 RDIMM/LRDIMM implementations). Some UDIMMs and DDR4 RDIMMs/LRDIMMs implement address mirroring for odd ranks, which means that the following address, bank address and bank group bits are swapped: (A3, A4), (A5, A6), (A7, A8), (BA0, BA1) and also (A11, A13), (BG0, BG1) for the DDR4. Setting this bit ensures that, for mode register accesses during the automatic initialization routine, these bits are swapped within the uMCTL2 to compensate for this UDIMM/RDIMM/LRDIMM swapping. In addition to the automatic initialization routine, in case of DDR4 UDIMM/RDIMM/LRDIMM, they are swapped during the automatic MRS access to enable/disable of a particular DDR4 feature. Note: This has no effect on the address of any other memory accesses, or of software-driven mode register accesses. This is not supported for mDDR, LPDDR2, LPDDR3 or LPDDR4 SDRAMs. Note: In case of x16 DDR4 DIMMs, BG1 output of MRS for the odd ranks is same as BG0 because BG1 is invalid, hence dimm_dis_bg_mirroring register must be set to 1. - 1 - For odd ranks, implement address mirroring for MRS commands to during initialization and for any automatic DDR4 MRS commands (to be used if UDIMM/RDIMM/LRDIMM implements address mirroring) - 0 - Do not implement address mirroring Programming Mode: Static */
    vuint32_t DIMM_OUTPUT_INV_EN:1;    /* Output Inversion Enable (for DDR4 RDIMM/LRDIMM implementations only). DDR4 RDIMM/LRDIMM implements the Output Inversion feature by default, which means that the following address, bank address and bank group bits of B-side DRAMs are inverted: A3-A9, A11, A13, A17, BA0-BA1, BG0-BG1. Setting this bit ensures that, for mode register accesses generated by the uMCTL2 during the automatic initialization routine and enabling of a particular DDR4 feature, separate A-side and B-side mode register accesses are generated. For B-side mode register accesses, these bits are inverted within the uMCTL2 to compensate for this RDIMM/LRDIMM inversion. It is recommended to set this bit always, if using DDR4 RDIMMs/LRDIMMs. Note: This has no effect on the address of any other memory accesses, or of software-driven mode register accesses. - 1 - Implement output inversion for B-side DRAMs. - 0 - Do not implement output inversion for B-side DRAMs. Programming Mode: Static */
    vuint32_t MRS_A17_EN:1;            /* Enable for A17 bit of MRS command. A17 bit of the mode register address is specified as RFU (Reserved for Future Use) and must be programmed to 0 during MRS. In case where DRAMs which do not have A17 are attached as DDR4 RDIMM/LRDIMM and the Output Inversion is enabled, this must be set to 0, so that the calculation of CA parity will not include A17 bit. To keep a consistency with the RCD, DA[3] in F0RC08 of the RCD also needs to be set to 1 (i.e. Disabled) Note: This has no effect on the address of any other memory accesses, or of software-driven mode register accesses. - 1 - Enabled - 0 - Disabled Programming Mode: Static */
    vuint32_t MRS_BG1_EN:1;            /* Enable for BG1 bit of MRS command. BG1 bit of the mode register address is specified as RFU (Reserved for Future Use) and must be programmed to 0 during MRS. In case where DRAMs which do not have BG1 are attached and both the CA parity and the Output Inversion are enabled, this must be set to 0, so that the calculation of CA parity will not include BG1 bit. Note: This has no effect on the address of any other memory accesses, or of software-driven mode register accesses. If address mirroring is enabled, this is applied to BG1 of even ranks and BG0 of odd ranks. - 1 - Enabled - 0 - Disabled Programming Mode: Static */
    vuint32_t DIMM_DIS_BG_MIRRORING:1; /* Disabling Address Mirroring for BG bits. When this is set to 1, BG0 and BG1 are NOT swapped even if Address Mirroring is enabled. This will be required for DDR4 DIMMs with x16 devices. - 1 - BG0 and BG1 are NOT swapped. - 0 - BG0 and BG1 are swapped if address mirroring is enabled. Programming Mode: Static */
    vuint32_t LRDIMM_BCOM_CMD_PROT:1;  /* Protects the timing restrictions (tBCW/tMRC) between consecutive BCOM commands defined in the Data Buffer specification. When using DDR4 LRDIMM, this bit must be set to 1. Otherwise, this bit must be set to 0. Programming Mode: Static */
    vuint32_t _unused_7:5;
    vuint32_t RCD_WEAK_DRIVE:1;        /* Weak Drive mode to set to the RCD. This field is used only when the uMCTL2 disables CAL mode. When weak drive mode in the RCD is enabled during initialization, this field should be set to 1. When RCD is not used, this field should be set to 0. - 1 - Enable Weak Drive mode - 0 - Disable Weak Drive mode Programming Mode: Static */
    vuint32_t RCD_A_OUTPUT_DISABLED:1; /* Disable RCD outputs to A-side DRAMs. This field is used only when the uMCTL2 disables CAL mode. This value is written to F0RC0 DA[2] before and after disabling CAL mode. It is recommended to set it to 0 except for debug. - 1 - Disable A outputs - 0 - Enable A outputs Programming Mode: Static */
    vuint32_t RCD_B_OUTPUT_DISABLED:1; /* Disable RCD outputs to B-side DRAMs. This field is used only when the uMCTL2 disables CAL mode. This value is written to F0RC0 DA[3] before and after disabling CAL mode. It is recommended to set it to ~DIMMCTL.dimm_output_inv_en except for debug. - 1 - Disable B outputs - 0 - Enable B outputs Programming Mode: Static */
    vuint32_t _unused_15:17;
  } B;
} UMCTL2_REGS_DIMMCTL_tag;

typedef union UMCTL2_REGS_RANKCTL_union_tag { /* Rank Control */
  vuint32_t R;
  struct {
    vuint32_t MAX_RANK_RD:4;           /* Rank Maximum Reads */
    vuint32_t DIFF_RANK_RD_GAP:4;      /* Different rank read gap */
    vuint32_t DIFF_RANK_WR_GAP:4;      /* Different rank write gap */
    vuint32_t _unused_12:20;
  } B;
} UMCTL2_REGS_RANKCTL_tag;

typedef union UMCTL2_REGS_DRAMTMG0_union_tag { /* DRAM Timing 0 */
  vuint32_t R;
  struct {
    vuint32_t T_RAS_MIN:6;             /* Activate to precharge minimum interval */
    vuint32_t _unused_6:2;
    vuint32_t T_RAS_MAX:7;             /* Activate to precharge maximum interval */
    vuint32_t _unused_15:1;
    vuint32_t T_FAW:6;                 /* Four active window (tFAW) */
    vuint32_t _unused_22:2;
    vuint32_t WR2PRE:7;                /* Write to precharge minimum interval */
    vuint32_t _unused_31:1;
  } B;
} UMCTL2_REGS_DRAMTMG0_tag;

typedef union UMCTL2_REGS_DRAMTMG1_union_tag { /* DRAM Timing 1 */
  vuint32_t R;
  struct {
    vuint32_t T_RC:7;                  /* Same bank activate internal (tRC) */
    vuint32_t _unused_7:1;
    vuint32_t RD2PRE:6;                /* Read to precharge minimum interval (tRTP) */
    vuint32_t _unused_14:2;
    vuint32_t T_XP:5;                  /* tXP */
    vuint32_t _unused_21:11;
  } B;
} UMCTL2_REGS_DRAMTMG1_tag;

typedef union UMCTL2_REGS_DRAMTMG2_union_tag { /* DRAM Timing 2 */
  vuint32_t R;
  struct {
    vuint32_t WR2RD:6;                 /* Write To Read Minimum Time */
    vuint32_t _unused_6:2;
    vuint32_t RD2WR:6;                 /* Read To Write Minimum Time */
    vuint32_t _unused_14:2;
    vuint32_t READ_LATENCY:6;          /* Read Latency */
    vuint32_t _unused_22:2;
    vuint32_t WRITE_LATENCY:6;         /* Write latency */
    vuint32_t _unused_30:2;
  } B;
} UMCTL2_REGS_DRAMTMG2_tag;

typedef union UMCTL2_REGS_DRAMTMG3_union_tag { /* DRAM Timing 3 */
  vuint32_t R;
  struct {
    vuint32_t T_MOD:10;                /* tMOD */
    vuint32_t _unused_10:2;
    vuint32_t T_MRD:6;                 /* tMRD */
    vuint32_t _unused_18:2;
    vuint32_t T_MRW:10;                /* tMRW */
    vuint32_t _unused_30:2;
  } B;
} UMCTL2_REGS_DRAMTMG3_tag;

typedef union UMCTL2_REGS_DRAMTMG4_union_tag { /* DRAM Timing 4 */
  vuint32_t R;
  struct {
    vuint32_t T_RP:5;                  /* tRP */
    vuint32_t _unused_5:3;
    vuint32_t T_RRD:4;                 /* tRRD */
    vuint32_t _unused_12:4;
    vuint32_t T_CCD:4;                 /* tCCD */
    vuint32_t _unused_20:4;
    vuint32_t T_RCD:5;                 /* tRCD - tAL */
    vuint32_t _unused_29:3;
  } B;
} UMCTL2_REGS_DRAMTMG4_tag;

typedef union UMCTL2_REGS_DRAMTMG5_union_tag { /* DRAM Timing 5 */
  vuint32_t R;
  struct {
    vuint32_t T_CKE:5;                 /* tCKE */
    vuint32_t _unused_5:3;
    vuint32_t T_CKESR:6;               /* tCKESR */
    vuint32_t _unused_14:2;
    vuint32_t T_CKSRE:4;               /* tCKSRE */
    vuint32_t _unused_20:4;
    vuint32_t T_CKSRX:4;               /* tCKSRX */
    vuint32_t _unused_28:4;
  } B;
} UMCTL2_REGS_DRAMTMG5_tag;

typedef union UMCTL2_REGS_DRAMTMG6_union_tag { /* DRAM Timing 6 */
  vuint32_t R;
  struct {
    vuint32_t T_CKCSX:4;               /* tCKCSX */
    vuint32_t _unused_4:12;
    vuint32_t T_CKDPDX:4;
    vuint32_t _unused_20:4;
    vuint32_t T_CKDPDE:4;              /* tCKDPDE */
    vuint32_t _unused_28:4;
  } B;
} UMCTL2_REGS_DRAMTMG6_tag;

typedef union UMCTL2_REGS_DRAMTMG7_union_tag { /* DRAM Timing 7 */
  vuint32_t R;
  struct {
    vuint32_t T_CKPDX:4;               /* tCKPDX */
    vuint32_t _unused_4:4;
    vuint32_t T_CKPDE:4;               /* tCKPDEX */
    vuint32_t _unused_12:20;
  } B;
} UMCTL2_REGS_DRAMTMG7_tag;

typedef union UMCTL2_REGS_DRAMTMG8_union_tag { /* DRAM Timing 8 */
  vuint32_t R;
  struct {
    vuint32_t T_XS_X32:7;              /* tXS: Exit Self Refresh to commands not requiring a locked DLL. When the controller is operating in 1:2 frequency ratio mode, program this to the above value divided by 2 and round up to next integer value. Note: Used only for DDR2, DDR3 and DDR4 SDRAMs. Unit: Multiples of 32 DFI clock cycles. Programming Mode: Quasi-dynamic Group 2, Group 4 */
    vuint32_t _unused_7:1;
    vuint32_t T_XS_DLL_X32:7;          /* tXSDLL: Exit Self Refresh to commands requiring a locked DLL. When the controller is operating in 1:2 frequency ratio mode, program this to the above value divided by 2 and round up to next integer value. Note: Used only for DDR2, DDR3 and DDR4 SDRAMs. Unit: Multiples of 32 DFI clock cycles. Programming Mode: Quasi-dynamic Group 2, Group 4 */
    vuint32_t _unused_15:1;
    vuint32_t T_XS_ABORT_X32:7;        /* tXS_ABORT: Exit Self Refresh to commands not requiring a locked DLL in Self Refresh Abort. When the controller is operating in 1:2 frequency ratio mode, program this to the above value divided by 2 and round up to next integer value. Note: Ensure this is less than or equal to t_xs_x32. Unit: Multiples of 32 DFI clock cycles. Programming Mode: Quasi-dynamic Group 2, Group 4 */
    vuint32_t _unused_23:1;
    vuint32_t T_XS_FAST_X32:7;         /* tXS_FAST: Exit Self Refresh to ZQCL, ZQCS and MRS (only CL, WR, RTP and Geardown mode). When the controller is operating in 1:2 frequency ratio mode, program this to the above value divided by 2 and round up to next integer value. Note: This is applicable to only ZQCL/ZQCS commands. Note: Ensure this is less than or equal to t_xs_x32. Unit: Multiples of 32 DFI clock cycles. Programming Mode: Quasi-dynamic Group 2, Group 4 */
    vuint32_t _unused_31:1;
  } B;
} UMCTL2_REGS_DRAMTMG8_tag;

typedef union UMCTL2_REGS_DRAMTMG9_union_tag { /* DRAM Timing 9 */
  vuint32_t R;
  struct {
    vuint32_t WR2RD_S:6;               /* CWL + PL + BL/2 + tWTR_S Minimum time from write command to read command for different bank group. Includes time for bus turnaround, recovery times, and all per-bank, per-rank, and global constraints. Present only in designs configured to support DDR4. Where: - CWL = CAS write latency - PL = Parity latency - BL = burst length. This must match the value programmed in the BL bit of the mode register to the DRAM - tWTR_S = internal write to read command delay for different bank group. This comes directly from the DRAM specification. WTR_S should be increased by one if DDR4 2tCK write preamble is used. When the controller is operating in 1:2 mode, divide the value calculated using the above equation by 2, and round it up to next integer. Unit: DFI clock cycles. Programming Mode: Quasi-dynamic Group 1, Group 2, Group 4 */
    vuint32_t _unused_6:2;
    vuint32_t T_RRD_S:4;               /* tRRD_S: Minimum time between activates from bank "a" to bank "b" for different bank group. When the controller is operating in 1:2 frequency ratio mode, program this to (tRRD_S/2) and round it up to the next integer value. Present only in designs configured to support DDR4. Unit: DFI clock cycles. Programming Mode: Quasi-dynamic Group 2, Group 4 */
    vuint32_t _unused_12:4;
    vuint32_t T_CCD_S:3;               /* tCCD_S: This is the minimum time between two reads or two writes for different bank group. For bank switching (from bank "a" to bank "b"), the minimum time is this value + 1. When the controller is operating in 1:2 frequency ratio mode, program this to (tCCD_S/2) and round it up to the next integer value. Present only in designs configured to support DDR4. Unit: DFI clock cycles. Programming Mode: Quasi-dynamic Group 2, Group 4 */
    vuint32_t _unused_19:11;
    vuint32_t DDR4_WR_PREAMBLE:1;      /* DDR4 Write preamble mode - 0: 1tCK preamble - 1: 2tCK preamble Present only with MEMC_FREQ_RATIO=2 Programming Mode: Quasi-dynamic Group 2, Group 4 */
    vuint32_t _unused_31:1;
  } B;
} UMCTL2_REGS_DRAMTMG9_tag;

typedef union UMCTL2_REGS_DRAMTMG10_union_tag { /* DRAM Timing 10 */
  vuint32_t R;
  struct {
    vuint32_t T_GEAR_HOLD:2;           /* Geardown hold time. Minimum value of this register is 1. Zero is invalid. For DDR4-2666 and DDR4-3200, this parameter is defined as 2 clks When the controller is operating in 1:2 frequency ratio mode, program this to (tGEAR_hold/2) and round it up to the next integer value. Unit: DFI clock cycles. Programming Mode: Quasi-dynamic Group 2, Group 4 */
    vuint32_t T_GEAR_SETUP:2;          /* Geardown setup time. Minimum value of this register is 1. Zero is invalid. For DDR4-2666 and DDR4-3200, this parameter is defined as 2 clks When the controller is operating in 1:2 frequency ratio mode, program this to (tGEAR_setup/2) and round it up to the next integer value. Unit: DFI clock cycles. Programming Mode: Quasi-dynamic Group 2, Group 4 */
    vuint32_t _unused_4:4;
    vuint32_t T_CMD_GEAR:5;            /* Sync pulse to first valid command. For DDR4-2666 and DDR4-3200, this parameter is defined as tMOD(min) tMOD(min) is greater of 24nCK or 15ns 15ns / .625ns = 24 Max value for this register is 24 When the controller is operating in 1:2 mode, program this to (tCMD_GEAR/2) and round it up to the next integer value. Unit: DFI clock cycles. Programming Mode: Quasi-dynamic Group 2, Group 4 */
    vuint32_t _unused_13:3;
    vuint32_t T_SYNC_GEAR:5;           /* Indicates the time between MRS command and the sync pulse time. This must be even number of clocks. For DDR4-2666 and DDR4-3200, this parameter is defined as tMOD(min)+4nCK tMOD(min) is greater of 24nCK or 15ns 15ns / .625ns = 24 Max value for this register is 24+4 = 28 When the controller is operating in 1:2 mode, program this to (tSYNC_GEAR/2) and round it up to the next integer value. Unit: DFI clock cycles. Programming Mode: Quasi-dynamic Group 2, Group 4 */
    vuint32_t _unused_21:11;
  } B;
} UMCTL2_REGS_DRAMTMG10_tag;

typedef union UMCTL2_REGS_DRAMTMG11_union_tag { /* DRAM Timing 11 */
  vuint32_t R;
  struct {
    vuint32_t T_CKMPE:5;               /* tCKMPE: Minimum valid clock requirement after MPSM entry. Present only in designs configured to support DDR4. When the controller is operating in 1:2 frequency ratio mode, divide the value calculated using the above equation by 2, and round it up to next integer. Unit: DFI clock cycles. Programming Mode: Quasi-dynamic Group 2, Group 4 */
    vuint32_t _unused_5:3;
    vuint32_t T_MPX_S:2;               /* tMPX_S: Minimum time CS setup time to CKE. When the controller is operating in 1:2 frequency ratio mode, program this to (tMPX_S/2) and round it up to the next integer value. Present only in designs configured to support DDR4. Unit: DFI clock cycles. Programming Mode: Quasi-dynamic Group 2, Group 4 */
    vuint32_t _unused_10:6;
    vuint32_t T_MPX_LH:5;              /* tMPX_LH: This is the minimum CS_n Low hold time to CKE rising edge. When the controller is operating in 1:2 frequency ratio mode, program this to RoundUp(tMPX_LH/2)+1. Present only in designs configured to support DDR4. Unit: DFI clock cycles. Programming Mode: Quasi-dynamic Group 2, Group 4 */
    vuint32_t _unused_21:3;
    vuint32_t POST_MPSM_GAP_X32:7;     /* tXMPDLL: This is the minimum Exit MPSM to commands requiring a locked DLL. When the controller is operating in 1:2 frequency ratio mode, program this to (tXMPDLL/2) and round it up to the next integer value. Present only in designs configured to support DDR4. Unit: Multiples of 32 DFI clock cycles. Programming Mode: Quasi-dynamic Group 2, Group 4 */
    vuint32_t _unused_31:1;
  } B;
} UMCTL2_REGS_DRAMTMG11_tag;

typedef union UMCTL2_REGS_DRAMTMG12_union_tag { /* DRAM Timing 12 */
  vuint32_t R;
  struct {
    vuint32_t T_MRD_PDA:5;             /* tMRD_PDA */
    vuint32_t _unused_5:11;
    vuint32_t T_CMDCKE:2;              /* tCMDCKE */
    vuint32_t _unused_18:14;
  } B;
} UMCTL2_REGS_DRAMTMG12_tag;

typedef union UMCTL2_REGS_DRAMTMG13_union_tag { /* DRAM Timing 13 */
  vuint32_t R;
  struct {
    vuint32_t T_PPD:3;                 /* tPPD */
    vuint32_t _unused_3:13;
    vuint32_t T_CCD_MW:6;              /* tCCDMW */
    vuint32_t _unused_22:2;
    vuint32_t ODTLOFF:7;               /* tODTLoff */
    vuint32_t _unused_31:1;
  } B;
} UMCTL2_REGS_DRAMTMG13_tag;

typedef union UMCTL2_REGS_DRAMTMG14_union_tag { /* DRAM Timing 14 */
  vuint32_t R;
  struct {
    vuint32_t T_XSR:12;                /* tXSR */
    vuint32_t _unused_12:20;
  } B;
} UMCTL2_REGS_DRAMTMG14_tag;

typedef union UMCTL2_REGS_DRAMTMG15_union_tag { /* DRAM Timing 15 */
  vuint32_t R;
  struct {
    vuint32_t T_STAB_X32:8;            /* tSTAB: Stabilization time. It is required in the following two cases for DDR3/DDR4 RDIMM : - when exiting power saving mode, if the clock was stopped, after re-enabling it the clock must be stable for a time specified by tSTAB - in the case of input clock frequency change (DDR4) - after issuing control words that refers to clock timing (Specification: 6us for DDR3, 5us for DDR4) When the controller is operating in 1:2 frequency ratio mode, program this to recommended value divided by two and round it up to next integer. Unit: Multiples of 32 DFI clock cycles. Programming Mode: Quasi-dynamic Group 2, Group 4 */
    vuint32_t _unused_8:23;
    vuint32_t EN_DFI_LP_T_STAB:1;      /* - 1 - Enable using tSTAB when exiting DFI LP. Needs to be set when the PHY is stopping the clock during DFI LP to save maximum power. - 0 - Disable using tSTAB when exiting DFI LP Programming Mode: Quasi-dynamic Group 2, Group 4 */
  } B;
} UMCTL2_REGS_DRAMTMG15_tag;

typedef union UMCTL2_REGS_ZQCTL0_union_tag { /* ZQ Control 0 */
  vuint32_t R;
  struct {
    vuint32_t T_ZQ_SHORT_NOP:10;       /* tZQCS (DDR3, DDR4, LPDDR2, LPDDR3) | tZQLAT (LPDDR4) */
    vuint32_t _unused_10:6;
    vuint32_t T_ZQ_LONG_NOP:11;        /* tZQoper (DDR3, DDR4) | tZQCL (LPDDR2, LPDDR3) | tZQCAL (LPDDR4) */
    vuint32_t _unused_27:1;
    vuint32_t DIS_MPSMX_ZQCL:1;        /* Disable ZQCL on MPSM exit */
    vuint32_t ZQ_RESISTOR_SHARED:1;    /* Shared ZQ resistor */
    vuint32_t DIS_SRX_ZQCL:1;          /* Disable ZQCL|MPC on SR|SRPD exit */
    vuint32_t DIS_AUTO_ZQ:1;           /* Disable automatic ZQCS|MPC */
  } B;
} UMCTL2_REGS_ZQCTL0_tag;

typedef union UMCTL2_REGS_ZQCTL1_union_tag { /* ZQ Control 1 */
  vuint32_t R;
  struct {
    vuint32_t T_ZQ_SHORT_INTERVAL_X1024:20; /* ZQ calibration short interval */
    vuint32_t T_ZQ_RESET_NOP:10;       /* ZQreset NOP */
    vuint32_t _unused_30:2;
  } B;
} UMCTL2_REGS_ZQCTL1_tag;

typedef union UMCTL2_REGS_ZQCTL2_union_tag { /* ZQ Control 2 */
  vuint32_t R;
  struct {
    vuint32_t ZQ_RESET:1;              /* Setting this register bit to 1 triggers a ZQ Reset operation. When the ZQ Reset operation is complete, the uMCTL2 automatically clears this bit. It is recommended NOT to set this register bit if in Init, in Self-Refresh(except LPDDR4) or SR-Powerdown(LPDDR4) or Deep power-down operating modes. For Self-Refresh(except LPDDR4) or SR-Powerdown(LPDDR4) it will be scheduled after SR(except LPDDR4) or SPRD(LPDDR4) has been exited. For Deep power down, it will not be scheduled, although ZQSTAT.zq_reset_busy will be de-asserted. This is only present for designs supporting LPDDR2/LPDDR3/LPDDR4 devices. Programming Mode: Dynamic */
    vuint32_t _unused_1:31;
  } B;
} UMCTL2_REGS_ZQCTL2_tag;

typedef union UMCTL2_REGS_ZQSTAT_union_tag { /* ZQ Status */
  vuint32_t R;
  struct {
    vuint32_t ZQ_RESET_BUSY:1;         /* SoC core may initiate a ZQ Reset operation only if this signal is low. This signal goes high in the clock after the uMCTL2 accepts the ZQ Reset request. It goes low when the ZQ Reset command is issued to the DRAM and the associated NOP period is over. It is recommended not to perform ZQ Reset commands when this signal is high. - 0 - Indicates that the SoC core can initiate a ZQ Reset operation - 1 - Indicates that ZQ Reset operation is in progress Programming Mode: Dynamic */
    vuint32_t _unused_1:31;
  } B;
} UMCTL2_REGS_ZQSTAT_tag;

typedef union UMCTL2_REGS_DFITMG0_union_tag { /* DFI Timing 0 */
  vuint32_t R;
  struct {
    vuint32_t DFI_TPHY_WRLAT:6;        /* Write latency */
    vuint32_t _unused_6:2;
    vuint32_t DFI_TPHY_WRDATA:6;       /* Write data driven */
    vuint32_t _unused_14:1;
    vuint32_t DFI_WRDATA_USE_DFI_PHY_CLK:1; /* DFI or DFI PHY clock for write control */
    vuint32_t DFI_T_RDDATA_EN:7;       /* Time to read data enable */
    vuint32_t DFI_RDDATA_USE_DFI_PHY_CLK:1; /* DFI or DFI PHY clock for read control */
    vuint32_t DFI_T_CTRL_DELAY:5;      /* DFI control delay */
    vuint32_t _unused_29:3;
  } B;
} UMCTL2_REGS_DFITMG0_tag;

typedef union UMCTL2_REGS_DFITMG1_union_tag { /* DFI Timing 1 */
  vuint32_t R;
  struct {
    vuint32_t DFI_T_DRAM_CLK_ENABLE:5; /* DRAM clock enable latency */
    vuint32_t _unused_5:3;
    vuint32_t DFI_T_DRAM_CLK_DISABLE:5; /* DRAM clock disable latency */
    vuint32_t _unused_13:3;
    vuint32_t DFI_T_WRDATA_DELAY:5;    /* Write delay */
    vuint32_t _unused_21:3;
    vuint32_t DFI_T_PARIN_LAT:2;       /* Parity in latency */
    vuint32_t _unused_26:2;
    vuint32_t DFI_T_CMD_LAT:4;         /* Command latency */
  } B;
} UMCTL2_REGS_DFITMG1_tag;

typedef union UMCTL2_REGS_DFILPCFG0_union_tag { /* DFI Low Power Configuration 0 */
  vuint32_t R;
  struct {
    vuint32_t DFI_LP_EN_PD:1;          /* Enables DFI Low Power interface handshaking during Power Down Entry/Exit. - 0 - Disabled - 1 - Enabled Programming Mode: Static */
    vuint32_t _unused_1:3;
    vuint32_t DFI_LP_WAKEUP_PD:4;      /* Value in DFI clock cycles to drive on dfi_lp_wakeup signal when Power Down mode is entered. Determines the DFI's tlp_wakeup time: - 0x0 - 16 cycles - 0x1 - 32 cycles - 0x2 - 64 cycles - 0x3 - 128 cycles - 0x4 - 256 cycles - 0x5 - 512 cycles - 0x6 - 1024 cycles - 0x7 - 2048 cycles - 0x8 - 4096 cycles - 0x9 - 8192 cycles - 0xA - 16384 cycles - 0xB - 32768 cycles - 0xC - 65536 cycles - 0xD - 131072 cycles - 0xE - 262144 cycles - 0xF - Unlimited Unit: DFI clock cycles. Programming Mode: Static */
    vuint32_t DFI_LP_EN_SR:1;          /* Enables DFI Low Power interface handshaking during Self Refresh Entry/Exit. - 0 - Disabled - 1 - Enabled Programming Mode: Static */
    vuint32_t _unused_9:3;
    vuint32_t DFI_LP_WAKEUP_SR:4;      /* Value in DFI clock cycles to drive on dfi_lp_wakeup signal when Self Refresh mode is entered. Determines the DFI's tlp_wakeup time: - 0x0 - 16 cycles - 0x1 - 32 cycles - 0x2 - 64 cycles - 0x3 - 128 cycles - 0x4 - 256 cycles - 0x5 - 512 cycles - 0x6 - 1024 cycles - 0x7 - 2048 cycles - 0x8 - 4096 cycles - 0x9 - 8192 cycles - 0xA - 16384 cycles - 0xB - 32768 cycles - 0xC - 65536 cycles - 0xD - 131072 cycles - 0xE - 262144 cycles - 0xF - Unlimited Unit: DFI clock cycles. Programming Mode: Static */
    vuint32_t DFI_LP_EN_DPD:1;         /* Enables DFI Low Power interface handshaking during Deep Power Down Entry/Exit. - 0 - Disabled - 1 - Enabled This is only present for designs supporting mDDR or LPDDR2/LPDDR3 devices. Programming Mode: Static */
    vuint32_t _unused_17:3;
    vuint32_t DFI_LP_WAKEUP_DPD:4;     /* Value in DFI clock cycles to drive on dfi_lp_wakeup signal when Deep Power Down mode is entered. Determines the DFI's tlp_wakeup time: - 0x0 - 16 cycles - 0x1 - 32 cycles - 0x2 - 64 cycles - 0x3 - 128 cycles - 0x4 - 256 cycles - 0x5 - 512 cycles - 0x6 - 1024 cycles - 0x7 - 2048 cycles - 0x8 - 4096 cycles - 0x9 - 8192 cycles - 0xA - 16384 cycles - 0xB - 32768 cycles - 0xC - 65536 cycles - 0xD - 131072 cycles - 0xE - 262144 cycles - 0xF - Unlimited This is only present for designs supporting mDDR or LPDDR2/LPDDR3 devices. Unit: DFI clock cycles. Programming Mode: Static */
    vuint32_t DFI_TLP_RESP:5;          /* Setting in DFI clock cycles for DFI's tlp_resp time. Same value is used for both Power Down, Self Refresh, Deep Power Down and Maximum Power Saving modes. DFI 2.1 specification onwards, recommends using a fixed value of 7 always. Unit: DFI clock cycles. Programming Mode: Static */
    vuint32_t _unused_29:3;
  } B;
} UMCTL2_REGS_DFILPCFG0_tag;

typedef union UMCTL2_REGS_DFILPCFG1_union_tag { /* DFI Low Power Configuration 1 */
  vuint32_t R;
  struct {
    vuint32_t DFI_LP_EN_MPSM:1;        /* Enables DFI Low Power interface handshaking during Maximum Power Saving Mode Entry/Exit. - 0 - Disabled - 1 - Enabled This is only present for designs supporting DDR4 devices. Programming Mode: Static */
    vuint32_t _unused_1:3;
    vuint32_t DFI_LP_WAKEUP_MPSM:4;    /* Value in DFI clock cycles to drive on dfi_lp_wakeup signal when Maximum Power Saving Mode is entered. Determines the DFI's tlp_wakeup time: - 0x0 - 16 cycles - 0x1 - 32 cycles - 0x2 - 64 cycles - 0x3 - 128 cycles - 0x4 - 256 cycles - 0x5 - 512 cycles - 0x6 - 1024 cycles - 0x7 - 2048 cycles - 0x8 - 4096 cycles - 0x9 - 8192 cycles - 0xA - 16384 cycles - 0xB - 32768 cycles - 0xC - 65536 cycles - 0xD - 131072 cycles - 0xE - 262144 cycles - 0xF - Unlimited This is only present for designs supporting DDR4 devices. Unit: DFI clock cycles. Programming Mode: Static */
    vuint32_t _unused_8:24;
  } B;
} UMCTL2_REGS_DFILPCFG1_tag;

typedef union UMCTL2_REGS_DFIUPD0_union_tag { /* DFI Update 0 */
  vuint32_t R;
  struct {
    vuint32_t DFI_T_CTRLUP_MIN:10;     /* Update request latency */
    vuint32_t _unused_10:6;
    vuint32_t DFI_T_CTRLUP_MAX:10;     /* Maximum update request time */
    vuint32_t _unused_26:3;
    vuint32_t CTRLUPD_PRE_SRX:1;       /* Update request on SRX */
    vuint32_t DIS_AUTO_CTRLUPD_SRX:1;  /* Disable automatic update request on SRX */
    vuint32_t DIS_AUTO_CTRLUPD:1;      /* Disable automatic update request */
  } B;
} UMCTL2_REGS_DFIUPD0_tag;

typedef union UMCTL2_REGS_DFIUPD1_union_tag { /* DFI Update 1 */
  vuint32_t R;
  struct {
    vuint32_t DFI_T_CTRLUPD_INTERVAL_MAX_X1024:8; /* Maximum update interval */
    vuint32_t _unused_8:8;
    vuint32_t DFI_T_CTRLUPD_INTERVAL_MIN_X1024:8; /* Minimum update interval */
    vuint32_t _unused_24:8;
  } B;
} UMCTL2_REGS_DFIUPD1_tag;

typedef union UMCTL2_REGS_DFIUPD2_union_tag { /* DFI Update 2 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;
    vuint32_t DFI_PHYUPD_EN:1;         /* PHY update acknowledge enable */
  } B;
} UMCTL2_REGS_DFIUPD2_tag;

typedef union UMCTL2_REGS_DFIMISC_union_tag { /* DFI Miscellaneous Control */
  vuint32_t R;
  struct {
    vuint32_t DFI_INIT_COMPLETE_EN:1;  /* PHY initialization complete enable */
    vuint32_t PHY_DBI_MODE:1;          /* DBI mode */
    vuint32_t DFI_DATA_CS_POLARITY:1;  /* Chip select polarity */
    vuint32_t _unused_3:2;
    vuint32_t DFI_INIT_START:1;        /* PHY init start */
    vuint32_t DIS_DYN_ADR_TRI:1;       /* Disable Dynamic Tristating */
    vuint32_t _unused_7:1;
    vuint32_t DFI_FREQUENCY:5;         /* Operating frequency */
    vuint32_t _unused_13:19;
  } B;
} UMCTL2_REGS_DFIMISC_tag;

typedef union UMCTL2_REGS_DFITMG2_union_tag { /* DFI Timing 2 */
  vuint32_t R;
  struct {
    vuint32_t DFI_TPHY_WRCSLAT:6;      /* DFI write to chip select latency */
    vuint32_t _unused_6:2;
    vuint32_t DFI_TPHY_RDCSLAT:7;      /* DFI read to chip select latency */
    vuint32_t _unused_15:17;
  } B;
} UMCTL2_REGS_DFITMG2_tag;

typedef union UMCTL2_REGS_DFITMG3_union_tag { /* DFI Timing 3 */
  vuint32_t R;
  struct {
    vuint32_t DFI_T_GEARDOWN_DELAY:5;  /* The delay from dfi_geardown_en assertion to the time of the PHY being ready to receive commands. Refer to PHY specification for correct value. When the controller is operating in 1:2 frequency ratio mode, program this to (tgeardown_delay/2) and round it up to the next integer value. Unit: DFI clock cycles. Programming Mode: Static */
    vuint32_t _unused_5:27;
  } B;
} UMCTL2_REGS_DFITMG3_tag;

typedef union UMCTL2_REGS_DFISTAT_union_tag { /* DFI Status */
  vuint32_t R;
  struct {
    vuint32_t DFI_INIT_COMPLETE:1;     /* The status flag register which announces when the DFI initialization has been completed. The DFI INIT triggered by dfi_init_start signal and then the dfi_init_complete flag is polled to know when the initialization is done. Programming Mode: Dynamic */
    vuint32_t DFI_LP_ACK:1;            /* Stores the value of the dfi_lp_ack input to the controller. Programming Mode: Dynamic */
    vuint32_t _unused_2:30;
  } B;
} UMCTL2_REGS_DFISTAT_tag;

typedef union UMCTL2_REGS_DBICTL_union_tag { /* DM/DBI Control */
  vuint32_t R;
  struct {
    vuint32_t DM_EN:1;                 /* Data mask enable */
    vuint32_t WR_DBI_EN:1;             /* Write DBI enable */
    vuint32_t RD_DBI_EN:1;             /* Read DBI enable */
    vuint32_t _unused_3:29;
  } B;
} UMCTL2_REGS_DBICTL_tag;

typedef union UMCTL2_REGS_DFIPHYMSTR_union_tag { /* DFI PHY Master */
  vuint32_t R;
  struct {
    vuint32_t DFI_PHYMSTR_EN:1;
    vuint32_t _unused_1:31;
  } B;
} UMCTL2_REGS_DFIPHYMSTR_tag;

typedef union UMCTL2_REGS_ADDRMAP0_union_tag { /* Address Map 0 */
  vuint32_t R;
  struct {
    vuint32_t ADDRMAP_CS_BIT0:5;       /* Rank address bit 0 */
    vuint32_t _unused_5:27;
  } B;
} UMCTL2_REGS_ADDRMAP0_tag;

typedef union UMCTL2_REGS_ADDRMAP1_union_tag { /* Address Map 1 */
  vuint32_t R;
  struct {
    vuint32_t ADDRMAP_BANK_B0:6;       /* Bank address bit 0 */
    vuint32_t _unused_6:2;
    vuint32_t ADDRMAP_BANK_B1:6;       /* Bank address bit 1 */
    vuint32_t _unused_14:2;
    vuint32_t ADDRMAP_BANK_B2:6;       /* Bank address bit 2 */
    vuint32_t _unused_22:10;
  } B;
} UMCTL2_REGS_ADDRMAP1_tag;

typedef union UMCTL2_REGS_ADDRMAP2_union_tag { /* Address Map 2 */
  vuint32_t R;
  struct {
    vuint32_t ADDRMAP_COL_B2:4;        /* Column address bit 2 */
    vuint32_t _unused_4:4;
    vuint32_t ADDRMAP_COL_B3:5;        /* Column address bit 3 */
    vuint32_t _unused_13:3;
    vuint32_t ADDRMAP_COL_B4:4;        /* Column address bit 4 */
    vuint32_t _unused_20:4;
    vuint32_t ADDRMAP_COL_B5:4;        /* Column address bit 5 */
    vuint32_t _unused_28:4;
  } B;
} UMCTL2_REGS_ADDRMAP2_tag;

typedef union UMCTL2_REGS_ADDRMAP3_union_tag { /* Address Map 3 */
  vuint32_t R;
  struct {
    vuint32_t ADDRMAP_COL_B6:5;        /* Column address bit 6 */
    vuint32_t _unused_5:3;
    vuint32_t ADDRMAP_COL_B7:5;        /* Column address bit 7 */
    vuint32_t _unused_13:3;
    vuint32_t ADDRMAP_COL_B8:5;        /* Column address bit 8 */
    vuint32_t _unused_21:3;
    vuint32_t ADDRMAP_COL_B9:5;        /* Column address bit 9 */
    vuint32_t _unused_29:3;
  } B;
} UMCTL2_REGS_ADDRMAP3_tag;

typedef union UMCTL2_REGS_ADDRMAP4_union_tag { /* Address Map 4 */
  vuint32_t R;
  struct {
    vuint32_t ADDRMAP_COL_B10:5;       /* Column address bit 10 */
    vuint32_t _unused_5:3;
    vuint32_t ADDRMAP_COL_B11:5;       /* Column address bit 11 */
    vuint32_t _unused_13:18;
    vuint32_t COL_ADDR_SHIFT:1;        /* Column address shift 2 */
  } B;
} UMCTL2_REGS_ADDRMAP4_tag;

typedef union UMCTL2_REGS_ADDRMAP5_union_tag { /* Address Map 5 */
  vuint32_t R;
  struct {
    vuint32_t ADDRMAP_ROW_B0:4;        /* Row address bit 0 */
    vuint32_t _unused_4:4;
    vuint32_t ADDRMAP_ROW_B1:4;        /* Row address bit 1 */
    vuint32_t _unused_12:4;
    vuint32_t ADDRMAP_ROW_B2_10:4;     /* Row address bits 2 to 10 */
    vuint32_t _unused_20:4;
    vuint32_t ADDRMAP_ROW_B11:4;       /* Row address bit 11 */
    vuint32_t _unused_28:4;
  } B;
} UMCTL2_REGS_ADDRMAP5_tag;

typedef union UMCTL2_REGS_ADDRMAP6_union_tag { /* Address Map 6 */
  vuint32_t R;
  struct {
    vuint32_t ADDRMAP_ROW_B12:4;       /* Row address bit 12 */
    vuint32_t _unused_4:4;
    vuint32_t ADDRMAP_ROW_B13:4;       /* Row address bit 13 */
    vuint32_t _unused_12:4;
    vuint32_t ADDRMAP_ROW_B14:4;       /* Row address bit 14 */
    vuint32_t _unused_20:4;
    vuint32_t ADDRMAP_ROW_B15:4;       /* Row address bit 15 */
    vuint32_t _unused_28:1;
    vuint32_t LPDDR4_6GB_12GB_24GB:2;  /* LPDDR4 type */
    vuint32_t LPDDR3_6GB_12GB:1;
  } B;
} UMCTL2_REGS_ADDRMAP6_tag;

typedef union UMCTL2_REGS_ADDRMAP7_union_tag { /* Address Map 7 */
  vuint32_t R;
  struct {
    vuint32_t ADDRMAP_ROW_B16:4;       /* Selects the HIF address bit used as row address bit 16. Valid Range: 0 to 11, and 15 Internal Base: 22 The selected HIF address bit is determined by adding the internal base to the value of this field. If unused, set to 15 and then row address bit 16 is set to 0. Programming Mode: Static */
    vuint32_t _unused_4:4;
    vuint32_t ADDRMAP_ROW_B17:4;       /* Selects the HIF address bit used as row address bit 17. Valid Range: 0 to 11, and 15 Internal Base: 23 The selected HIF address bit is determined by adding the internal base to the value of this field. If unused, set to 15 and then row address bit 17 is set to 0. Programming Mode: Static */
    vuint32_t _unused_12:20;
  } B;
} UMCTL2_REGS_ADDRMAP7_tag;

typedef union UMCTL2_REGS_ADDRMAP8_union_tag { /* Address Map 8 */
  vuint32_t R;
  struct {
    vuint32_t ADDRMAP_BG_B0:6;         /* Selects the HIF address bits used as bank group address bit 0. Valid Range: 0 to 32, and 63 Internal Base: 2 The selected HIF address bit for each of the bank group address bits is determined by adding the internal base to the value of this field. If unused, set to 63 and then bank group address bit 0 is set to 0. Programming Mode: Static */
    vuint32_t _unused_6:2;
    vuint32_t ADDRMAP_BG_B1:6;         /* Selects the HIF address bits used as bank group address bit 1. Valid Range: 0 to 32, and 63 Internal Base: 3 The selected HIF address bit for each of the bank group address bits is determined by adding the internal base to the value of this field. If unused, set to 63 and then bank group address bit 1 is set to 0. Programming Mode: Static */
    vuint32_t _unused_14:18;
  } B;
} UMCTL2_REGS_ADDRMAP8_tag;

typedef union UMCTL2_REGS_ADDRMAP9_union_tag { /* Address Map 9 */
  vuint32_t R;
  struct {
    vuint32_t ADDRMAP_ROW_B2:4;        /* Selects the HIF address bits used as row address bit 2. Valid Range: 0 to 11 Internal Base: 8 The selected HIF address bit for each of the row address bits is determined by adding the internal base to the value of this field. This register field is used only when ADDRMAP5.addrmap_row_b2_10 is set to value 15. Programming Mode: Static */
    vuint32_t _unused_4:4;
    vuint32_t ADDRMAP_ROW_B3:4;        /* Selects the HIF address bits used as row address bit 3. Valid Range: 0 to 11 Internal Base: 9 The selected HIF address bit for each of the row address bits is determined by adding the internal base to the value of this field. This register field is used only when ADDRMAP5.addrmap_row_b2_10 is set to value 15. Programming Mode: Static */
    vuint32_t _unused_12:4;
    vuint32_t ADDRMAP_ROW_B4:4;        /* Selects the HIF address bits used as row address bit 4. Valid Range: 0 to 11 Internal Base: 10 The selected HIF address bit for each of the row address bits is determined by adding the internal base to the value of this field. This register field is used only when ADDRMAP5.addrmap_row_b2_10 is set to value 15. Programming Mode: Static */
    vuint32_t _unused_20:4;
    vuint32_t ADDRMAP_ROW_B5:4;        /* Selects the HIF address bits used as row address bit 5. Valid Range: 0 to 11 Internal Base: 11 The selected HIF address bit for each of the row address bits is determined by adding the internal base to the value of this field. This register field is used only when ADDRMAP5.addrmap_row_b2_10 is set to value 15. Programming Mode: Static */
    vuint32_t _unused_28:4;
  } B;
} UMCTL2_REGS_ADDRMAP9_tag;

typedef union UMCTL2_REGS_ADDRMAP10_union_tag { /* Address Map 10 */
  vuint32_t R;
  struct {
    vuint32_t ADDRMAP_ROW_B6:4;        /* Selects the HIF address bits used as row address bit 6. Valid Range: 0 to 11 Internal Base: 12 The selected HIF address bit for each of the row address bits is determined by adding the internal base to the value of this field. This register field is used only when ADDRMAP5.addrmap_row_b2_10 is set to value 15. Programming Mode: Static */
    vuint32_t _unused_4:4;
    vuint32_t ADDRMAP_ROW_B7:4;        /* Selects the HIF address bits used as row address bit 7. Valid Range: 0 to 11 Internal Base: 13 The selected HIF address bit for each of the row address bits is determined by adding the internal base to the value of this field. This register field is used only when ADDRMAP5.addrmap_row_b2_10 is set to value 15. Programming Mode: Static */
    vuint32_t _unused_12:4;
    vuint32_t ADDRMAP_ROW_B8:4;        /* Selects the HIF address bits used as row address bit 8. Valid Range: 0 to 11 Internal Base: 14 The selected HIF address bit for each of the row address bits is determined by adding the internal base to the value of this field. This register field is used only when ADDRMAP5.addrmap_row_b2_10 is set to value 15. Programming Mode: Static */
    vuint32_t _unused_20:4;
    vuint32_t ADDRMAP_ROW_B9:4;        /* Selects the HIF address bits used as row address bit 9. Valid Range: 0 to 11 Internal Base: 15 The selected HIF address bit for each of the row address bits is determined by adding the internal base to the value of this field. This register field is used only when ADDRMAP5.addrmap_row_b2_10 is set to value 15. Programming Mode: Static */
    vuint32_t _unused_28:4;
  } B;
} UMCTL2_REGS_ADDRMAP10_tag;

typedef union UMCTL2_REGS_ADDRMAP11_union_tag { /* Address Map 11 */
  vuint32_t R;
  struct {
    vuint32_t ADDRMAP_ROW_B10:4;       /* Selects the HIF address bits used as row address bit 10. Valid Range: 0 to 11 Internal Base: 16 The selected HIF address bit for each of the row address bits is determined by adding the internal base to the value of this field. This register field is used only when ADDRMAP5.addrmap_row_b2_10 is set to value 15. Programming Mode: Static */
    vuint32_t _unused_4:28;
  } B;
} UMCTL2_REGS_ADDRMAP11_tag;

typedef union UMCTL2_REGS_ODTCFG_union_tag { /* ODT Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t RD_ODT_DELAY:5;          /* The delay, in DFI PHY clock cycles, from issuing a read command to setting ODT values associated with that command. ODT setting must remain constant for the entire time that DQS is driven by the uMCTL2. Recommended values: DDR2: - CL + AL - 4 (not DDR2-1066), CL + AL - 5 (DDR2-1066) If (CL + AL - 4 < 0), uMCTL2 does not support ODT for read operation. DDR3: - CL - CWL DDR4: - CL - CWL - RD_PREAMBLE + WR_PREAMBLE + DFITMG1.dfi_t_cmd_lat (to adjust for CAL mode) WR_PREAMBLE = 1 (1tCK write preamble), 2 (2tCK write preamble) RD_PREAMBLE = 1 (1tCK read preamble), 2 (2tCK read preamble) If (CL - CWL - RD_PREAMBLE + WR_PREAMBLE) < 0, uMCTL2 does not support ODT for read operation. LPDDR3: - RL + RD(tDQSCK(min)/tCK) - 1 - RU(tODTon(max)/tCK) Unit: DFI PHY clock cycles. Programming Mode: Quasi-dynamic Group 1, Group 4 */
    vuint32_t _unused_7:1;
    vuint32_t RD_ODT_HOLD:4;           /* DFI PHY clock cycles to hold ODT for a read command. The minimum supported value is 2. Recommended values: DDR2: - BL8: 0x6 (not DDR2-1066), 0x7 (DDR2-1066) - BL4: 0x4 (not DDR2-1066), 0x5 (DDR2-1066) DDR3: - BL8 - 0x6 DDR4: - BL8: 5 + RD_PREAMBLE RD_PREAMBLE = 1 (1tCK read preamble), 2 (2tCK read preamble) LPDDR3: - BL8: 5 + RU(tDQSCK(max)/tCK) - RD(tDQSCK(min)/tCK) + RU(tODTon(max)/tCK) Unit: DFI PHY clock cycles. Programming Mode: Quasi-dynamic Group 1, Group 4 */
    vuint32_t _unused_12:4;
    vuint32_t WR_ODT_DELAY:5;          /* The delay, in DFI PHY clock cycles, from issuing a write command to setting ODT values associated with that command. ODT setting must remain constant for the entire time that DQS is driven by the uMCTL2. Recommended values: DDR2: - CWL + AL - 3 (DDR2-400/533/667), CWL + AL - 4 (DDR2-800), CWL + AL - 5 (DDR2-1066) If (CWL + AL - 3 < 0), uMCTL2 does not support ODT for write operation. DDR3: - 0x0 DDR4: - DFITMG1.dfi_t_cmd_lat (to adjust for CAL mode) LPDDR3: - WL - 1 - RU(tODTon(max)/tCK)) Unit: DFI PHY clock cycles. Programming Mode: Quasi-dynamic Group 1, Group 4 */
    vuint32_t _unused_21:3;
    vuint32_t WR_ODT_HOLD:4;           /* DFI PHY clock cycles to hold ODT for a write command. The minimum supported value is 2. Recommended values: DDR2: - BL8: 0x5 (DDR2-400/533/667), 0x6 (DDR2-800), 0x7 (DDR2-1066) - BL4: 0x3 (DDR2-400/533/667), 0x4 (DDR2-800), 0x5 (DDR2-1066) DDR3: - BL8: 0x6 DDR4: - BL8: 5 + WR_PREAMBLE + CRC_MODE WR_PREAMBLE = 1 (1tCK write preamble), 2 (2tCK write preamble) CRC_MODE = 0 (not CRC mode), 1 (CRC mode) LPDDR3: - BL8: 7 + RU(tODTon(max)/tCK) Unit: DFI PHY clock cycles. Programming Mode: Quasi-dynamic Group 1, Group 4 */
    vuint32_t _unused_28:4;
  } B;
} UMCTL2_REGS_ODTCFG_tag;

typedef union UMCTL2_REGS_ODTMAP_union_tag { /* ODT/Rank Map */
  vuint32_t R;
  struct {
    vuint32_t RANK0_WR_ODT:2;          /* ODTs for write to rank 0 */
    vuint32_t _unused_2:2;
    vuint32_t RANK0_RD_ODT:2;          /* ODTs for read from rank 0 */
    vuint32_t _unused_6:2;
    vuint32_t RANK1_WR_ODT:2;          /* ODTs for write to rank 1 */
    vuint32_t _unused_10:2;
    vuint32_t RANK1_RD_ODT:2;          /* ODTs for read from rank 1 */
    vuint32_t _unused_14:18;
  } B;
} UMCTL2_REGS_ODTMAP_tag;

typedef union UMCTL2_REGS_SCHED_union_tag { /* Scheduler Control */
  vuint32_t R;
  struct {
    vuint32_t FORCE_LOW_PRI_N:1;       /* Force low priority */
    vuint32_t PREFER_WRITE:1;          /* Prefer writes over reads */
    vuint32_t PAGECLOSE:1;             /* Paging policy */
    vuint32_t _unused_3:5;
    vuint32_t LPR_NUM_ENTRIES:5;       /* Low-priority transaction store entries */
    vuint32_t _unused_13:11;
    vuint32_t RDWR_IDLE_GAP:7;
    vuint32_t _unused_31:1;
  } B;
} UMCTL2_REGS_SCHED_tag;

typedef union UMCTL2_REGS_SCHED1_union_tag { /* Scheduler Control 1 */
  vuint32_t R;
  struct {
    vuint32_t PAGECLOSE_TIMER:8;
    vuint32_t _unused_8:24;
  } B;
} UMCTL2_REGS_SCHED1_tag;

typedef union UMCTL2_REGS_PERFHPR1_union_tag { /* High Priority Read CAM 1 */
  vuint32_t R;
  struct {
    vuint32_t HPR_MAX_STARVE:16;       /* HPR maximimum starve interval */
    vuint32_t _unused_16:8;
    vuint32_t HPR_XACT_RUN_LENGTH:8;   /* HPR transactions after critical */
  } B;
} UMCTL2_REGS_PERFHPR1_tag;

typedef union UMCTL2_REGS_PERFLPR1_union_tag { /* Low Priority Read CAM 1 */
  vuint32_t R;
  struct {
    vuint32_t LPR_MAX_STARVE:16;       /* LPR maximimum starve interval */
    vuint32_t _unused_16:8;
    vuint32_t LPR_XACT_RUN_LENGTH:8;   /* LPR transactions after critical */
  } B;
} UMCTL2_REGS_PERFLPR1_tag;

typedef union UMCTL2_REGS_PERFWR1_union_tag { /* Write CAM 1 */
  vuint32_t R;
  struct {
    vuint32_t W_MAX_STARVE:16;         /* WR maximimum starve interval */
    vuint32_t _unused_16:8;
    vuint32_t W_XACT_RUN_LENGTH:8;     /* WR transactions after critical */
  } B;
} UMCTL2_REGS_PERFWR1_tag;

typedef union UMCTL2_REGS_DBG0_union_tag { /* Debug 0 */
  vuint32_t R;
  struct {
    vuint32_t DIS_WC:1;                /* When 1, disable write combine. FOR DEBUG ONLY Programming Mode: Static */
    vuint32_t _unused_1:3;
    vuint32_t DIS_COLLISION_PAGE_OPT:1; /* When this is set to '0', auto-precharge is disabled for the flushed command in a collision case. Collision cases are write followed by read to same address, read followed by write to same address, or write followed by write to same address with DBG0.dis_wc bit = 1 (where same address comparisons exclude the two address bits representing critical word). FOR DEBUG ONLY. Programming Mode: Static */
    vuint32_t _unused_5:27;
  } B;
} UMCTL2_REGS_DBG0_tag;

typedef union UMCTL2_REGS_DBG1_union_tag { /* Debug 1 */
  vuint32_t R;
  struct {
    vuint32_t DIS_DQ:1;                /* When 1, uMCTL2 will not de-queue any transactions from the CAM. Bypass is also disabled. All transactions are queued in the CAM. No reads or writes are issued to DRAM as long as this is asserted. This bit may be used to prevent reads or writes being issued by the uMCTL2, which makes it safe to modify certain register fields associated with reads and writes (see User Guide for details). After setting this bit, it is strongly recommended to poll DBGCAM.wr_data_pipeline_empty and DBGCAM.rd_data_pipeline_empty, before making changes to any registers which affect reads and writes. This will ensure that the relevant logic in the MC is idle. This bit is intended to be switched on-the-fly. Programming Mode: Dynamic */
    vuint32_t DIS_HIF:1;               /* When 1, uMCTL2 asserts the HIF command signal hif_cmd_stall. uMCTL2 will ignore the hif_cmd_valid and all other associated request signals. This bit is intended to be switched on-the-fly. Programming Mode: Dynamic */
    vuint32_t _unused_2:30;
  } B;
} UMCTL2_REGS_DBG1_tag;

typedef union UMCTL2_REGS_DBGCAM_union_tag { /* CAM Debug */
  vuint32_t R;
  struct {
    vuint32_t DBG_HPR_Q_DEPTH:6;       /* High priority read queue depth FOR DEBUG ONLY Programming Mode: Dynamic */
    vuint32_t _unused_6:2;
    vuint32_t DBG_LPR_Q_DEPTH:6;       /* Low priority read queue depth The last entry of Lpr queue is reserved for ECC SCRUB operation. This entry is not included in the calculation of the queue depth. FOR DEBUG ONLY Programming Mode: Dynamic */
    vuint32_t _unused_14:2;
    vuint32_t DBG_W_Q_DEPTH:6;         /* Write queue depth The last entry of WR queue is reserved for ECC SCRUB operation. This entry is not included in the calculation of the queue depth. FOR DEBUG ONLY Programming Mode: Dynamic */
    vuint32_t _unused_22:2;
    vuint32_t DBG_STALL:1;             /* Stall FOR DEBUG ONLY Programming Mode: Dynamic */
    vuint32_t DBG_RD_Q_EMPTY:1;        /* When 1, all the Read command queues and Read data buffers inside the MC are empty. This register is to be used for debug purpose. An example use-case scenario: When Controller enters Self-Refresh using the Low-Power entry sequence, Controller is expected to have executed all the commands in its queues and the write and read data drained. Hence this register should be 1 at that time. FOR DEBUG ONLY Programming Mode: Dynamic */
    vuint32_t DBG_WR_Q_EMPTY:1;        /* When 1, all the Write command queues and Write data buffers inside the MC are empty. This register is to be used for debug purpose. An example use-case scenario: When Controller enters Self-Refresh using the Low-Power entry sequence, Controller is expected to have executed all the commands in its queues and the write and read data drained. Hence this register should be 1 at that time. FOR DEBUG ONLY Programming Mode: Dynamic */
    vuint32_t _unused_27:1;
    vuint32_t RD_DATA_PIPELINE_EMPTY:1; /* This bit indicates that the read data pipeline on the DFI interface is empty. This register is intended to be polled at least twice after setting DBG1.dis_dq, to ensure that all remaining commands/data have completed. Programming Mode: Dynamic */
    vuint32_t WR_DATA_PIPELINE_EMPTY:1; /* This bit indicates that the write data pipeline on the DFI interface is empty. This register is intended to be polled at least twice after setting DBG1.dis_dq, to ensure that all remaining commands/data have completed. Programming Mode: Dynamic */
    vuint32_t _unused_30:2;
  } B;
} UMCTL2_REGS_DBGCAM_tag;

typedef union UMCTL2_REGS_DBGCMD_union_tag { /* Command Debug */
  vuint32_t R;
  struct {
    vuint32_t RANK0_REFRESH:1;         /* Setting this register bit to 1 indicates to the uMCTL2 to issue a refresh to rank 0. Writing to this bit causes DBGSTAT.rank0_refresh_busy to be set. When DBGSTAT.rank0_refresh_busy is cleared, the command has been stored in uMCTL2. For 3DS configuration, refresh is sent to rank index 0. This operation can be performed only when RFSHCTL3.dis_auto_refresh=1. It is recommended NOT to set this register bit if in Init or Deep power-down operating modes or Maximum Power Saving Mode. Programming Mode: Dynamic */
    vuint32_t RANK1_REFRESH:1;         /* Setting this register bit to 1 indicates to the uMCTL2 to issue a refresh to rank 1. Writing to this bit causes DBGSTAT.rank1_refresh_busy to be set. When DBGSTAT.rank1_refresh_busy is cleared, the command has been stored in uMCTL2. For 3DS configuration, refresh is sent to rank index 1. This operation can be performed only when RFSHCTL3.dis_auto_refresh=1. It is recommended NOT to set this register bit if in Init or Deep power-down operating modes or Maximum Power Saving Mode. Programming Mode: Dynamic */
    vuint32_t _unused_2:2;
    vuint32_t ZQ_CALIB_SHORT:1;        /* Setting this register bit to 1 indicates to the uMCTL2 to issue a ZQCS (ZQ calibration short)/MPC(ZQ calibration) command to the DRAM. When this request is stored in the uMCTL2, the bit is automatically cleared. This operation can be performed only when ZQCTL0.dis_auto_zq=1. It is recommended NOT to set this register bit if in Init, in Self-Refresh(except LPDDR4) or SR-Powerdown(LPDDR4) or Deep power-down operating modes or Maximum Power Saving Mode. For Self-Refresh(except LPDDR4) or SR-Powerdown(LPDDR4) it will be scheduled after SR(except LPDDR4) or SPRD(LPDDR4) has been exited. For Deep power down and Maximum Power Saving Mode, it will not be scheduled, although DBGSTAT.zq_calib_short_busy will be de-asserted. Programming Mode: Dynamic */
    vuint32_t CTRLUPD:1;               /* Setting this register bit to 1 indicates to the uMCTL2 to issue a dfi_ctrlupd_req to the PHY. When this request is stored in the uMCTL2, the bit is automatically cleared. This operation must only be performed when DFIUPD0.dis_auto_ctrlupd=1. Programming Mode: Dynamic */
    vuint32_t _unused_6:26;
  } B;
} UMCTL2_REGS_DBGCMD_tag;

typedef union UMCTL2_REGS_DBGSTAT_union_tag { /* Status Debug */
  vuint32_t R;
  struct {
    vuint32_t RANK0_REFRESH_BUSY:1;    /* SoC core may initiate a rank0_refresh operation (refresh operation to rank 0) only if this signal is low. This signal goes high in the clock after DBGCMD.rank0_refresh is set to one. It goes low when the rank0_refresh operation is stored in the uMCTL2. It is recommended not to perform rank0_refresh operations when this signal is high. - 0 - Indicates that the SoC core can initiate a rank0_refresh operation - 1 - Indicates that rank0_refresh operation has not been stored yet in the uMCTL2 Programming Mode: Dynamic */
    vuint32_t RANK1_REFRESH_BUSY:1;    /* SoC core may initiate a rank1_refresh operation (refresh operation to rank 1) only if this signal is low. This signal goes high in the clock after DBGCMD.rank1_refresh is set to one. It goes low when the rank1_refresh operation is stored in the uMCTL2. It is recommended not to perform rank1_refresh operations when this signal is high. - 0 - Indicates that the SoC core can initiate a rank1_refresh operation - 1 - Indicates that rank1_refresh operation has not been stored yet in the uMCTL2 Programming Mode: Dynamic */
    vuint32_t _unused_2:2;
    vuint32_t ZQ_CALIB_SHORT_BUSY:1;   /* SoC core may initiate a ZQCS (ZQ calibration short) operation only if this signal is low. This signal goes high in the clock after the uMCTL2 accepts the ZQCS request. It goes low when the ZQCS operation is initiated in the uMCTL2. It is recommended not to perform ZQCS operations when this signal is high. - 0 - Indicates that the SoC core can initiate a ZQCS operation - 1 - Indicates that ZQCS operation has not been initiated yet in the uMCTL2 Programming Mode: Dynamic */
    vuint32_t CTRLUPD_BUSY:1;          /* SoC core may initiate a ctrlupd operation only if this signal is low. This signal goes high in the clock after the uMCTL2 accepts the ctrlupd request. It goes low when the ctrlupd operation is initiated in the uMCTL2. It is recommended not to perform ctrlupd operations when this signal is high. - 0 - Indicates that the SoC core can initiate a ctrlupd operation - 1 - Indicates that ctrlupd operation has not been initiated yet in the uMCTL2 Programming Mode: Dynamic */
    vuint32_t _unused_6:26;
  } B;
} UMCTL2_REGS_DBGSTAT_tag;

typedef union UMCTL2_REGS_DBGCAM1_union_tag { /* CAM Debug 1 */
  vuint32_t R;
  struct {
    vuint32_t DBG_WRECC_Q_DEPTH:6;     /* Write ECC queue depth FOR DEBUG ONLY Programming Mode: Dynamic */
    vuint32_t _unused_6:26;
  } B;
} UMCTL2_REGS_DBGCAM1_tag;

typedef union UMCTL2_REGS_SWCTL_union_tag { /* Software Register Programming Control Enable */
  vuint32_t R;
  struct {
    vuint32_t SW_DONE:1;               /* Enable quasi-dynamic register programming outside reset. Program register to 0 to enable quasi-dynamic programming. Set back register to 1 once programming is done. Programming Mode: Dynamic */
    vuint32_t _unused_1:31;
  } B;
} UMCTL2_REGS_SWCTL_tag;

typedef union UMCTL2_REGS_SWSTAT_union_tag { /* Software Register Programming Control Status */
  vuint32_t R;
  struct {
    vuint32_t SW_DONE_ACK:1;           /* Register programming done. This register is the echo of SWCTL.sw_done. Wait for sw_done value 1 to propagate to sw_done_ack at the end of the programming sequence to ensure that the correct registers values are propagated to the destination clock domains. Programming Mode: Static */
    vuint32_t _unused_1:31;
  } B;
} UMCTL2_REGS_SWSTAT_tag;

typedef union UMCTL2_REGS_OCPARCFG0_union_tag { /* On-Chip Parity Configuration 0 */
  vuint32_t R;
  struct {
    vuint32_t OC_PARITY_EN:1;          /* Parity enable register. Enables On-Chip parity for all interfaces. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t OC_PARITY_TYPE:1;        /* Parity type: - 0: Even parity - 1: Odd parity Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t _unused_2:2;
    vuint32_t PAR_WDATA_ERR_INTR_EN:1; /* Enables write data interrupt generation (par_wdata_err_intr) upon detection of parity error at the AXI or DFI interface. Programming Mode: Dynamic */
    vuint32_t PAR_WDATA_SLVERR_EN:1;   /* Enables SLVERR generation on write response when write data parity error is detected at the AXI interface. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t PAR_WDATA_ERR_INTR_CLR:1; /* Interrupt clear bit for par_wdata_err_intr. uMCTL2 automatically clears this bit. Programming Mode: Dynamic */
    vuint32_t PAR_WDATA_ERR_INTR_FORCE:1; /* Interrupt force bit for par_wdata_err_intr. uMCTL2 automatically clears this bit. Programming Mode: Dynamic */
    vuint32_t _unused_8:4;
    vuint32_t PAR_RDATA_SLVERR_EN:1;   /* Enables SLVERR generation on read response when read data parity error is detected at the AXI interface. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t PAR_RDATA_ERR_INTR_EN:1; /* Enables interrupt generation, if set to 1, for all ports, on signal par_rdata_err_intr_n upon detection of parity error at the AXI interface. Programming Mode: Dynamic */
    vuint32_t PAR_RDATA_ERR_INTR_CLR:1; /* Interrupt clear bit for par_rdata_err_intr. uMCTL2 automatically clears this bit. Programming Mode: Dynamic */
    vuint32_t PAR_RDATA_ERR_INTR_FORCE:1; /* Interrupt force bit for all par_rdata_err_intr_n and par_rdata_in_err_ecc_intr (Inline-ECC only). uMCTL2 automatically clears this bit. Programming Mode: Dynamic */
    vuint32_t _unused_16:4;
    vuint32_t PAR_ADDR_SLVERR_EN:1;    /* Enables SLVERR generation on read response or write response when address parity error is detected at the AXI interface. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t PAR_WADDR_ERR_INTR_EN:1; /* Enables interrupt generation, if set to 1, for all ports, on signal par_waddr_err_intr_n upon detection of parity error on the AXI interface. Programming Mode: Dynamic */
    vuint32_t PAR_WADDR_ERR_INTR_CLR:1; /* Interrupt clear bit for all par_waddr_err_intr. uMCTL2 automatically clears this bit. Programming Mode: Dynamic */
    vuint32_t PAR_RADDR_ERR_INTR_EN:1; /* Enables interrupt generation, if set to 1, for all ports, on signal par_raddr_err_intr_n upon detection of parity error on the AXI interface. Programming Mode: Dynamic */
    vuint32_t PAR_RADDR_ERR_INTR_CLR:1; /* Interrupt clear bit for all par_raddr_err_intr. uMCTL2 automatically clears this bit. Programming Mode: Dynamic */
    vuint32_t PAR_WADDR_ERR_INTR_FORCE:1; /* Interrupt force bit for all par_waddr_err_intr. uMCTL2 automatically clears this bit. Programming Mode: Dynamic */
    vuint32_t PAR_RADDR_ERR_INTR_FORCE:1; /* Interrupt force bit for all par_raddr_err_intr. uMCTL2 automatically clears this bit. Programming Mode: Dynamic */
    vuint32_t _unused_27:5;
  } B;
} UMCTL2_REGS_OCPARCFG0_tag;

typedef union UMCTL2_REGS_OCPARCFG1_union_tag { /* On-Chip Parity Configuration 1 */
  vuint32_t R;
  struct {
    vuint32_t PAR_POISON_EN:1;         /* Enables on-chip parity poisoning on the data interfaces. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t _unused_1:1;
    vuint32_t PAR_POISON_LOC_RD_DFI:1; /* Enables parity poisoning on read data at the DFI interface after the parity generation logic, and when MEMC_INLINE_ECC=1 enables poisoning of ECC word after the ECC encoder at the write data interface at the DFI. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t PAR_POISON_LOC_RD_IECC_TYPE:1; /* Selects which parity to poison at the DFI when inline ECC is enabled. If this register is set to 0, parity error is injected on the first read data going through the ECC path; if this register is set to 1, parity error is injected on the first read data going through the data path. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t PAR_POISON_LOC_RD_PORT:4; /* Enables parity poisoning on read data at the AXI interface after the parity check logic. The value specifies the binary encoded port number of the AXI interface to be injected with parity error. Error can be injected to one port at a time. An error injected here is not logged and does not trigger SLVERR or interrupt by the controller. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t PAR_POISON_LOC_WR_PORT:4; /* Enables parity poisoning on write data at the AXI interface before the input parity check logic. The value specifies the binary encoded port number of the AXI interface to be injected with parity error. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t _unused_12:20;
  } B;
} UMCTL2_REGS_OCPARCFG1_tag;

typedef union UMCTL2_REGS_OCPARSTAT0_union_tag { /* On-Chip Parity Status 0 */
  vuint32_t R;
  struct {
    vuint32_t PAR_WADDR_ERR_INTR_0:1;  /* Write address parity error interrupt for port 0. This interrupt is asserted when an on-chip write address parity error occurred on the corresponding AXI port's write address channel. Programming Mode: Static */
    vuint32_t PAR_WADDR_ERR_INTR_1:1;  /* Write address parity error interrupt for port 1. This interrupt is asserted when an on-chip write address parity error occurred on the corresponding AXI port's write address channel. Programming Mode: Static */
    vuint32_t PAR_WADDR_ERR_INTR_2:1;  /* Write address parity error interrupt for port 2. This interrupt is asserted when an on-chip write address parity error occurred on the corresponding AXI port's write address channel. Programming Mode: Static */
    vuint32_t _unused_3:13;
    vuint32_t PAR_RADDR_ERR_INTR_0:1;  /* Read address parity error interrupt for port 0. This interrupt is asserted when an on-chip read address parity error occurred on the corresponding AXI port's read address channel. Programming Mode: Static */
    vuint32_t PAR_RADDR_ERR_INTR_1:1;  /* Read address parity error interrupt for port 1. This interrupt is asserted when an on-chip read address parity error occurred on the corresponding AXI port's read address channel. Programming Mode: Static */
    vuint32_t PAR_RADDR_ERR_INTR_2:1;  /* Read address parity error interrupt for port 2. This interrupt is asserted when an on-chip read address parity error occurred on the corresponding AXI port's read address channel. Programming Mode: Static */
    vuint32_t _unused_19:13;
  } B;
} UMCTL2_REGS_OCPARSTAT0_tag;

typedef union UMCTL2_REGS_OCPARSTAT1_union_tag { /* On-Chip Parity Status 1 */
  vuint32_t R;
  struct {
    vuint32_t PAR_WDATA_IN_ERR_INTR_0:1; /* Write data parity error interrupt on input for port 0. This interrupt is asserted when an on-chip write data parity error occurred on the corresponding AXI port's write data channel. Bit 0 corresponds to Port 0, and so on. Cleared by register par_wdata_err_intr_clr. Programming Mode: Static */
    vuint32_t PAR_WDATA_IN_ERR_INTR_1:1; /* Write data parity error interrupt on input for port 1. This interrupt is asserted when an on-chip write data parity error occurred on the corresponding AXI port's write data channel. Bit 0 corresponds to Port 0, and so on. Cleared by register par_wdata_err_intr_clr. Programming Mode: Static */
    vuint32_t PAR_WDATA_IN_ERR_INTR_2:1; /* Write data parity error interrupt on input for port 2. This interrupt is asserted when an on-chip write data parity error occurred on the corresponding AXI port's write data channel. Bit 0 corresponds to Port 0, and so on. Cleared by register par_wdata_err_intr_clr. Programming Mode: Static */
    vuint32_t _unused_3:13;
    vuint32_t PAR_RDATA_ERR_INTR_0:1;  /* Read data parity error interrupt for port 0. This interrupt is asserted when an on-chip read data parity error occurred on the corresponding AXI port's read data channel. Bit 0 corresponds to Port 0, and so on. Cleared by register par_rdata_err_intr_clr. Programming Mode: Static */
    vuint32_t PAR_RDATA_ERR_INTR_1:1;  /* Read data parity error interrupt for port 1. This interrupt is asserted when an on-chip read data parity error occurred on the corresponding AXI port's read data channel. Bit 0 corresponds to Port 0, and so on. Cleared by register par_rdata_err_intr_clr. Programming Mode: Static */
    vuint32_t PAR_RDATA_ERR_INTR_2:1;  /* Read data parity error interrupt for port 2. This interrupt is asserted when an on-chip read data parity error occurred on the corresponding AXI port's read data channel. Bit 0 corresponds to Port 0, and so on. Cleared by register par_rdata_err_intr_clr. Programming Mode: Static */
    vuint32_t _unused_19:13;
  } B;
} UMCTL2_REGS_OCPARSTAT1_tag;

typedef union UMCTL2_REGS_OCPARSTAT2_union_tag { /* On-Chip Parity Status 2 */
  vuint32_t R;
  struct {
    vuint32_t PAR_WDATA_OUT_ERR_INTR:2; /* Write data parity error interrupt on output. Cleared by register par_wdata_err_intr_clr. Programming Mode: Static */
    vuint32_t _unused_2:2;
    vuint32_t PAR_RDATA_IN_ERR_ECC_INTR:1; /* Interrupt on ECC data going into inline ECC decoder. Cleared by par_rdata_err_intr_clr. Programming Mode: Static */
    vuint32_t _unused_5:27;
  } B;
} UMCTL2_REGS_OCPARSTAT2_tag;

typedef union UMCTL2_REGS_POISONCFG_union_tag { /* AXI Poison Configuration */
  vuint32_t R;
  struct {
    vuint32_t WR_POISON_SLVERR_EN:1;   /* Write SLVERR enable */
    vuint32_t _unused_1:3;
    vuint32_t WR_POISON_INTR_EN:1;     /* Write poison interrupt enable */
    vuint32_t _unused_5:3;
    vuint32_t WR_POISON_INTR_CLR:1;    /* Write poison interrupt clear */
    vuint32_t _unused_9:7;
    vuint32_t RD_POISON_SLVERR_EN:1;   /* Read SLVERR enable */
    vuint32_t _unused_17:3;
    vuint32_t RD_POISON_INTR_EN:1;     /* Read poison interrupt enable */
    vuint32_t _unused_21:3;
    vuint32_t RD_POISON_INTR_CLR:1;    /* Read poison interrupt clear */
    vuint32_t _unused_25:7;
  } B;
} UMCTL2_REGS_POISONCFG_tag;

typedef union UMCTL2_REGS_POISONSTAT_union_tag { /* AXI Poison Status */
  vuint32_t R;
  struct {
    vuint32_t WR_POISON_INTR_0:1;      /* Write transaction poisoning error interrupt for port 0. This register is a APB clock copy (double register synchronizer) of the interrupt asserted when a transaction is poisoned on the corresponding AXI port's write address channel. Bit 0 corresponds to Port 0, and so on. Interrupt is cleared by register wr_poison_intr_clr, then value propagated to APB clock. Programming Mode: Dynamic */
    vuint32_t WR_POISON_INTR_1:1;      /* Write transaction poisoning error interrupt for port 1. This register is a APB clock copy (double register synchronizer) of the interrupt asserted when a transaction is poisoned on the corresponding AXI port's write address channel. Bit 0 corresponds to Port 0, and so on. Interrupt is cleared by register wr_poison_intr_clr, then value propagated to APB clock. Programming Mode: Dynamic */
    vuint32_t WR_POISON_INTR_2:1;      /* Write transaction poisoning error interrupt for port 2. This register is a APB clock copy (double register synchronizer) of the interrupt asserted when a transaction is poisoned on the corresponding AXI port's write address channel. Bit 0 corresponds to Port 0, and so on. Interrupt is cleared by register wr_poison_intr_clr, then value propagated to APB clock. Programming Mode: Dynamic */
    vuint32_t _unused_3:13;
    vuint32_t RD_POISON_INTR_0:1;      /* Read transaction poisoning error interrupt for port 0. This register is a APB clock copy (double register synchronizer) of the interrupt asserted when a transaction is poisoned on the corresponding AXI port's read address channel. Bit 0 corresponds to Port 0, and so on. Interrupt is cleared by register rd_poison_intr_clr, then value propagated to APB clock. Programming Mode: Dynamic */
    vuint32_t RD_POISON_INTR_1:1;      /* Read transaction poisoning error interrupt for port 1. This register is a APB clock copy (double register synchronizer) of the interrupt asserted when a transaction is poisoned on the corresponding AXI port's read address channel. Bit 0 corresponds to Port 0, and so on. Interrupt is cleared by register rd_poison_intr_clr, then value propagated to APB clock. Programming Mode: Dynamic */
    vuint32_t RD_POISON_INTR_2:1;      /* Read transaction poisoning error interrupt for port 2. This register is a APB clock copy (double register synchronizer) of the interrupt asserted when a transaction is poisoned on the corresponding AXI port's read address channel. Bit 0 corresponds to Port 0, and so on. Interrupt is cleared by register rd_poison_intr_clr, then value propagated to APB clock. Programming Mode: Dynamic */
    vuint32_t _unused_19:13;
  } B;
} UMCTL2_REGS_POISONSTAT_tag;

typedef union UMCTL2_REGS_ADVECCINDEX_union_tag { /* Advanced ECC Index */
  vuint32_t R;
  struct {
    vuint32_t ECC_SYNDROME_SEL:3;      /* Selector of which DRAM beat data output to ECCCSYN0/1/2 as well as ECCUCSYN. In Advanced ECC, the syndrome consist of number of DRAM beats. This register select which beats of data will be output to ECCCSYN0/1/2 and ECCUCSYN0/1/2 registers. Programming Mode: Quasi-dynamic Group 1 */
    vuint32_t ECC_ERR_SYMBOL_SEL:2;    /* Selector of which error symbol's status output to ADVECCSTAT.advecc_err_symbol_pos and advecc_err_symbol_bits. The default is first error symbol. The value should be less than ADVECCSTAT.advecc_num_err_symbol. Programming Mode: Quasi-dynamic Group 1 */
    vuint32_t ECC_POISON_BEATS_SEL:4;  /* Selector of which DRAM beat's poison pattern will be set by ECCPOISONPAT0/1/2 registers. For frequency ratio 1:1 mode, 2 DRAM beats can be poisoned. Set ecc_poison_beats_sel to 0 and given ECCPOISONPAT0/1/2 to set 1st beat's poison pattern; set ecc_poison_beats_sel to 1 and given ECCPOISONPAT0/1/2 to set 2nd beat's poison pattern. For frequency ratio 1:2 mode, 4 DRAM beats can be poisoned. Set ecc_poison_beats_sel from 0~3 to set 1st to 4th beat's poison pattern. The other value is reserved. Programming Mode: Quasi-dynamic Group 1 */
    vuint32_t _unused_9:23;
  } B;
} UMCTL2_REGS_ADVECCINDEX_tag;

typedef union UMCTL2_REGS_ECCPOISONPAT0_union_tag { /* ECC Poison Pattern 0 */
  vuint32_t R;
  struct {
    vuint32_t ECC_POISON_DATA_31_0:32; /* Poison pattern for DRAM data[31:0]. Only bit is set to 1 indicate poison (invert) corresponding DRAM bit. It is indirect register. Selector is ADVECCINDEX.ecc_poison_beats_sel. Programming Mode: Static */
  } B;
} UMCTL2_REGS_ECCPOISONPAT0_tag;

typedef union UMCTL2_REGS_ECCPOISONPAT2_union_tag { /* ECC Poison Pattern 2 */
  vuint32_t R;
  struct {
    vuint32_t ECC_POISON_DATA_71_64:8; /* Poison pattern for DRAM data[71:64]. Only bit is set to 1 indicate poison (invert) corresponding DRAM bit. It is indirect register. Selector is ADVECCINDEX.ecc_poison_beats_sel. Programming Mode: Static */
    vuint32_t _unused_8:24;
  } B;
} UMCTL2_REGS_ECCPOISONPAT2_tag;

typedef union UMCTL2_REGS_ECCAPSTAT_union_tag { /* Address protection within ECC Status */
  vuint32_t R;
  struct {
    vuint32_t ECC_AP_ERR:1;            /* Indicates the number of ECC errors (correctable/uncorrectable) within one burst exceeded the threshold.(ECCCFG0.ecc_ap_err_threshold) Programming Mode: Dynamic */
    vuint32_t _unused_1:31;
  } B;
} UMCTL2_REGS_ECCAPSTAT_tag;

typedef union UMCTL2_REGS_REGPARCFG_union_tag { /* Register Parity Configuration */
  vuint32_t R;
  struct {
    vuint32_t REG_PAR_EN:1;            /* Register Parity enable register. Programming Mode: Dynamic */
    vuint32_t REG_PAR_ERR_INTR_EN:1;   /* Enables interrupt generation, if set to 1, on signal reg_par_err_intr upon detection of register parity error. Programming Mode: Dynamic */
    vuint32_t REG_PAR_ERR_INTR_CLR:1;  /* Interupt clear bit for reg_par_err_intr. uMCTL2 automatically clears this bit. Programming Mode: Dynamic */
    vuint32_t REG_PAR_ERR_INTR_FORCE:1; /* Interrupt force bit for reg_par_err_intr, setting this register will cause the output interrupt to be asserted. uMCTL2 automatically clears this bit. There is no interaction between functionally triggering an interrupt and forcing an interrupt (they are mutually exclusive). Programming Mode: Dynamic */
    vuint32_t _unused_4:4;
    vuint32_t REG_PAR_POISON_EN:1;     /* Enable Register Parity poisoning. Programming Mode: Dynamic */
    vuint32_t _unused_9:23;
  } B;
} UMCTL2_REGS_REGPARCFG_tag;

typedef union UMCTL2_REGS_REGPARSTAT_union_tag { /* Register Parity Status */
  vuint32_t R;
  struct {
    vuint32_t REG_PAR_ERR_INTR:1;      /* Interrupt asserted when Register Parity error is detected. Cleared by setting REGPARCFG.reg_par_err_intr_clr to 1. Programming Mode: Static */
    vuint32_t _unused_1:31;
  } B;
} UMCTL2_REGS_REGPARSTAT_tag;

typedef union UMCTL2_REGS_OCCAPCFG_union_tag { /* On-Chip command/Address Protection Configuration */
  vuint32_t R;
  struct {
    vuint32_t OCCAP_EN:1;              /* On Chip Command/Address Path Protection (OCCAP) enable register. Programming Mode: Quasi-dynamic Group 3 */
    vuint32_t _unused_1:15;
    vuint32_t OCCAP_ARB_INTR_EN:1;     /* Enables interrupt generation upon detection of OCCAP Arbiter errors. Programming Mode: Dynamic */
    vuint32_t OCCAP_ARB_INTR_CLR:1;    /* Interrupt clear bit for occap_arb_err_intr and occap_arb_cmp_poison_complete. uMCTL2 automatically clears this bit. Programming Mode: Dynamic */
    vuint32_t OCCAP_ARB_INTR_FORCE:1;  /* Interrupt force bit for occap_arb_err_intr, setting this register will cause the output interrupt to be asserted. uMCTL2 automatically clears this bit. There is no interaction between functionally triggering an interrupt and forcing an interrupt (they are mutually exclusive). Programming Mode: Dynamic */
    vuint32_t _unused_19:5;
    vuint32_t OCCAP_ARB_CMP_POISON_SEQ:1; /* Enables poisoning for compare logic inside XPI. Poisoning inverts all bits coming from the duplicated modules before the XOR comparators one output at the time per each comparator. uMCTL2 automatically clears this bit. Programming Mode: Dynamic */
    vuint32_t OCCAP_ARB_CMP_POISON_PARALLEL:1; /* Enables full poisoning for compare logic inside XPI. Poisoning inverts all bits of all outputs coming from the duplicated modules before the XOR comparators together. uMCTL2 automatically clears this bit. Programming Mode: Dynamic */
    vuint32_t OCCAP_ARB_CMP_POISON_ERR_INJ:1; /* Enable error injection in the poisoning of OCCAP Arbiter logic Injects error into poisoning logic (either parallel or seq) such that XOR logic for one signal is not poisoned when expected. If set, it allows ability to corrupt the following register fields. - 1'b0: OCCAPSTAT.occap_arb_poison_parallel/seq_err=0 - 1'b1: OCCAPSTAT.occap_arb_poison_parallel/seq_err=1 Do not change value in same APB write as setting of occap_arb_poison_parallel/_seq Programming Mode: Dynamic */
    vuint32_t OCCAP_ARB_RAQ_POISON_EN:1; /* Enables poisoning for the Read Address Queues (RAQ) inside each XPI. Poisoning inverts all parity bits generated by the parity generator. Error will be flagged as soon as the first RAQ is read. This register is not cleared automatically and must be reprogrammed to 0 at the end of the operation. Programming Mode: Dynamic */
    vuint32_t _unused_28:4;
  } B;
} UMCTL2_REGS_OCCAPCFG_tag;

typedef union UMCTL2_REGS_OCCAPSTAT_union_tag { /* On-Chip command/Address Protection Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t OCCAP_ARB_ERR_INTR:1;    /* OCCAP Arbiter error interrupt status. Register cleared by OCCAPCFG.occap_arb_intr_clr. Programming Mode: Static */
    vuint32_t OCCAP_ARB_CMP_POISON_COMPLETE:1; /* OCCAP ARB comparator poisoning complete interrupt status. Register cleared by OCCAPCFG.occap_arb_intr_clr. Programming Mode: Static */
    vuint32_t _unused_18:6;
    vuint32_t OCCAP_ARB_CMP_POISON_SEQ_ERR:1; /* Error when occap_arb_cmp_poison_en was active due to incorrect no. of errors being occurring. Internal logic checks that the correct number of errors detected while poisoning one output at the time occurred for occap_arb_cmp_poison_en. It checks for error on one output at the time. Register is valid when occap_arb_cmp_poison_complete=1. Programming Mode: Static */
    vuint32_t OCCAP_ARB_CMP_POISON_PARALLEL_ERR:1; /* Error when occap_arb_cmp_poison_full_en was active due to incorrect no. of errors being occurring. Internal logic checks the number of errors detected while poisoning occurred for occap_arb_cmp_poison_full_en. It checks for error on all of the the corresponding XOR outputs. If multi-bit, checks also that all XOR bits are set. Register is valid when occap_arb_cmp_poison_complete=1. Programming Mode: Static */
    vuint32_t _unused_26:6;
  } B;
} UMCTL2_REGS_OCCAPSTAT_tag;

typedef union UMCTL2_REGS_OCCAPCFG1_union_tag { /* On-Chip command/Address Protection Configuration 1 */
  vuint32_t R;
  struct {
    vuint32_t OCCAP_DDRC_DATA_INTR_EN:1; /* Enables interrupt generation on signal occap_ddrc_data_err_intr upon detection of OCCAP MC DATA errors. Programming Mode: Dynamic */
    vuint32_t OCCAP_DDRC_DATA_INTR_CLR:1; /* Interrupt clear bit for occap_ddrc_data_err_intr. uMCTL2 automatically clears this bit. Programming Mode: Dynamic */
    vuint32_t OCCAP_DDRC_DATA_INTR_FORCE:1; /* Interrupt force bit for occap_ddrc_data_err_intr, setting this register will cause the output interrupt to be asserted. uMCTL2 automatically clears this bit. There is no interaction between functionally triggering an interrupt and forcing an interrupt (they are mutually exclusive). Programming Mode: Dynamic */
    vuint32_t _unused_3:5;
    vuint32_t OCCAP_DDRC_DATA_POISON_SEQ:1; /* Enables poisoning of OCCAP MC DATA logic for all parts of comparison logic, in sequence. Poisons comparison logic for one core_ddrc_core_clk cycle by inverting all bits of a signal to XOR logic. All signals of instance[0] of the duplicated modules are poisoned in parallel and checks if all signals were poisoned correctly. If this is not the case, this is flagged by OCCAPSTAT1.occap_ddrc_data_poison_seq_err=1. uMCTL2 automatically clears this bit. Programming Mode: Dynamic */
    vuint32_t OCCAP_DDRC_DATA_POISON_PARALLEL:1; /* Enables poisoning of OCCAP MC DATA logic for all parts of comparison logic, in parallel. Poisons comparison logic for one core_ddrc_core_clk cycle by inverting all bits of a signal to XOR logic. All signals of instance[0] of the duplicated modules are poisoned in parallel and checks if all signals were poisoned correctly. If this is not the case, this is flagged by OCCAPSTAT1.occap_ddrc_data_poison_parallel_err=1. uMCTL2 automatically clears this bit. Programming Mode: Dynamic */
    vuint32_t OCCAP_DDRC_DATA_POISON_ERR_INJ:1; /* Enable error injection in the poisoning of OCCAP MC DATA logic Injects error into poisoning logic (either parallel or seq) such that XOR logic for one signal is not poisoned when expected. If set, it allows ability to corrupt the following register fields. - 1'b0: OCCAPSTAT1.occap_ddrc_data_poison_parallel/seq_err=0 - 1'b1: OCCAPSTAT1.occap_ddrc_data_poison_parallel/seq_err=1 Do not change value in same APB write as setting of occap_ddrc_data_poison_parallel/_seq Programming Mode: Dynamic */
    vuint32_t _unused_11:5;
    vuint32_t OCCAP_DDRC_CTRL_INTR_EN:1; /* Enables interrupt generation on signal occap_ddrc_ctrl_err_intr upon detection of OCCAP MC CTRL errors. Programming Mode: Dynamic */
    vuint32_t OCCAP_DDRC_CTRL_INTR_CLR:1; /* Interrupt clear bit for occap_ddrc_ctrl_err_intr. uMCTL2 automatically clears this bit. Programming Mode: Dynamic */
    vuint32_t OCCAP_DDRC_CTRL_INTR_FORCE:1; /* Interrupt force bit for occap_ddrc_ctrl_err_intr, setting this register will cause the output interrupt to be asserted. uMCTL2 automatically clears this bit. There is no interaction between functionally triggering an interrupt and forcing an interrupt (they are mutually exclusive). Programming Mode: Dynamic */
    vuint32_t _unused_19:5;
    vuint32_t OCCAP_DDRC_CTRL_POISON_SEQ:1; /* Enables poisoning of OCCAP MC CTRL logic for all parts of comparison logic, in sequence. Poisons comparison logic for one core_ddrc_core_clk cycle by inverting a ddrc_ctrl[0]'s signal to XOR logic. ddrc_ctrl[1] related signals are never poisoned. Each signal from ddrc_ctrl[0] is poisoned in series and checks in turn, that each signal was poisoned correctly. If this is not the case, this is flagged by OCCAPSTAT1.occap_ddrc_ctrl_poison_seq_err=1. uMCTL2 automatically clears this bit. Programming Mode: Dynamic */
    vuint32_t OCCAP_DDRC_CTRL_POISON_PARALLEL:1; /* Enables poisoning of OCCAP MC CTRL logic for all parts of comparison logic, in parallel. Poisons comparison logic for one core_ddrc_core_clk cycle by inverting a ddrc_ctrl[0]'s signal to XOR logic. ddrc_ctrl[1] related signals are never poisoned. All signals are poisoned in parallel and checks if all signals were poisoned correctly. If this is not the case, this is flagged by OCCAPSTAT1.occap_ddrc_ctrl_poison_parallel_err=1. uMCTL2 automatically clears this bit. Programming Mode: Dynamic */
    vuint32_t OCCAP_DDRC_CTRL_POISON_ERR_INJ:1; /* Enable error injection in the poisoning of OCCAP MC CTRL logic Injects error into poisoning logic (either parallel or seq) such that XOR logic for one signal is not poisoned when expected. If set, it allows ability to corrupt the following register fields. - 1'b0: OCCAPSTAT1.occap_ddrc_ctrl_poison_parallel/seq_err=0 - 1'b1: OCCAPSTAT1.occap_ddrc_ctrl_poison_parallel/seq_err=1 Do not change value in same APB write as setting of occap_ddrc_ctrl_poison_parallel/_seq Programming Mode: Dynamic */
    vuint32_t _unused_27:5;
  } B;
} UMCTL2_REGS_OCCAPCFG1_tag;

typedef union UMCTL2_REGS_OCCAPSTAT1_union_tag { /* On-Chip command/Address Protection Status 1 */
  vuint32_t R;
  struct {
    vuint32_t OCCAP_DDRC_DATA_ERR_INTR:1; /* OCCAP MC DATA error interrupt status. Register cleared by OCCAPCFG1.occap_ddrc_data_err_intr_clr. Programming Mode: Static */
    vuint32_t OCCAP_DDRC_DATA_POISON_COMPLETE:1; /* OCCAP MC DATA poisoning complete interrupt status. Register cleared by OCCAPCFG1.occap_ddrc_data_err_intr_clr. Programming Mode: Static */
    vuint32_t _unused_2:6;
    vuint32_t OCCAP_DDRC_DATA_POISON_SEQ_ERR:1; /* Error when occap_ddrc_data_poison_seq was active due to incorrect no. of errors being occurring. Internal logic checks the number of errors detected while poisoning occurred for occap_ddrc_data_poison_seq. It checks for error on all of the corresponding XOR outputs. It checks each XOR sequentially. This is cleared when OCCAPCFG1.occap_ddrc_data_poison_seq=0 occurs. Programming Mode: Static */
    vuint32_t OCCAP_DDRC_DATA_POISON_PARALLEL_ERR:1; /* Error when occap_ddrc_data_poison_parallel was active due to incorrect no. of errors being occurring. Internal logic checks the number of errors detected while poisoning occurred for occap_ddrc_data_poison_parallel. It checks for error on all of the the corresponding XOR outputs. If multi-bit, checks also that all XOR bits are set. It checks all XOR in parallel. This is cleared when OCCAPCFG1.occap_ddrc_data_poison_parallel=0 occurs. Programming Mode: Static */
    vuint32_t _unused_10:6;
    vuint32_t OCCAP_DDRC_CTRL_ERR_INTR:1; /* OCCAP MC CTRL error interrupt status. Register cleared by OCCAPCFG1.occap_ddrc_ctrl_err_intr_clr. Programming Mode: Static */
    vuint32_t OCCAP_DDRC_CTRL_POISON_COMPLETE:1; /* OCCAP MC CTRL poisoning complete interrupt status. Register cleared by OCCAPCFG1.occap_ddrc_ctrl_err_intr_clr. Programming Mode: Static */
    vuint32_t _unused_18:6;
    vuint32_t OCCAP_DDRC_CTRL_POISON_SEQ_ERR:1; /* Error when occap_ddrc_ctrl_poison_seq was active due to incorrect no. of errors being occurring. Internal logic checks the number of errors detected while poisoning occurred for occap_ddrc_ctrl_poison_seq. It checks for error on all of the corresponding XOR outputs. It checks each XOR sequentially. Register is valid only when occap_ddrc_ctrl_cmp_poison_complete=1. Programming Mode: Static */
    vuint32_t OCCAP_DDRC_CTRL_POISON_PARALLEL_ERR:1; /* Error when occap_ddrc_ctrl_poison_parallel was active due to incorrect no. of errors being occurring. Internal logic checks the number of errors detected while poisoning occurred for occap_ddrc_ctrl_poison_parallel. It checks for error on all of the the corresponding XOR outputs. If multi-bit, checks also that all XOR bits are set. It checks all XOR in parallel. Register is valid only when occap_ddrc_ctrl_cmp_poison_complete=1. Programming Mode: Static */
    vuint32_t _unused_26:6;
  } B;
} UMCTL2_REGS_OCCAPSTAT1_tag;

typedef union UMCTL2_REGS_DERATESTAT_union_tag { /* Temperature Derate Status */
  vuint32_t R;
  struct {
    vuint32_t DERATE_TEMP_LIMIT_INTR:1; /* Derate temperature interrupt indicating LPDDR2/3/4 DRAM temperature operating limit is exceeded. This register field is set to 1 when the value read from MR4[2:0] is 3'b000 or 3'b111. Cleared by register DERATECTL.derate_temp_limit_intr_clr. Programming Mode: Static */
    vuint32_t _unused_1:31;
  } B;
} UMCTL2_REGS_DERATESTAT_tag;

struct UMCTL2_REGS_tag {
  UMCTL2_REGS_MSTR_tag MSTR;           /* Master */
  UMCTL2_REGS_STAT_tag STAT;           /* Operating mode status */
  uint8_t UMCTL2_REGS_reserved0[8];
  UMCTL2_REGS_MRCTRL0_tag MRCTRL0;     /* Mode Register read/write control 0 */
  UMCTL2_REGS_MRCTRL1_tag MRCTRL1;     /* Mode Register Read/Write Control 1 */
  UMCTL2_REGS_MRSTAT_tag MRSTAT;       /* Mode Register Read/Write Status */
  UMCTL2_REGS_MRCTRL2_tag MRCTRL2;     /* Mode Register Read/Write Control 2 */
  UMCTL2_REGS_DERATEEN_tag DERATEEN;   /* Temperature derate enable */
  UMCTL2_REGS_DERATEINT_tag DERATEINT; /* Temperature derate interval */
  uint8_t UMCTL2_REGS_reserved1[4];
  UMCTL2_REGS_DERATECTL_tag DERATECTL; /* Temperature derate control */
  UMCTL2_REGS_PWRCTL_tag PWRCTL;       /* Low power control */
  UMCTL2_REGS_PWRTMG_tag PWRTMG;       /* Low Power Timing */
  UMCTL2_REGS_HWLPCTL_tag HWLPCTL;     /* Hardware low power control */
  uint8_t UMCTL2_REGS_reserved2[20];
  UMCTL2_REGS_RFSHCTL0_tag RFSHCTL0;   /* Refresh Control 0 */
  UMCTL2_REGS_RFSHCTL1_tag RFSHCTL1;   /* Refresh control 1 */
  uint8_t UMCTL2_REGS_reserved3[8];
  UMCTL2_REGS_RFSHCTL3_tag RFSHCTL3;   /* Refresh Control 3 */
  UMCTL2_REGS_RFSHTMG_tag RFSHTMG;     /* Refresh Timing */
  UMCTL2_REGS_RFSHTMG1_tag RFSHTMG1;   /* Refresh timing 1 */
  uint8_t UMCTL2_REGS_reserved4[4];
  UMCTL2_REGS_ECCCFG0_tag ECCCFG0;     /* ECC Configuration 0 */
  UMCTL2_REGS_ECCCFG1_tag ECCCFG1;     /* ECC Configuration 1 */
  UMCTL2_REGS_ECCSTAT_tag ECCSTAT;     /* SECDED ECC Status */
  UMCTL2_REGS_ECCCTL_tag ECCCTL;       /* ECC Control */
  UMCTL2_REGS_ECCERRCNT_tag ECCERRCNT; /* ECC Error Counter */
  UMCTL2_REGS_ECCCADDR0_tag ECCCADDR0; /* ECC Corrected Error Address 0 */
  UMCTL2_REGS_ECCCADDR1_tag ECCCADDR1; /* ECC Corrected Error Address 1 */
  UMCTL2_REGS_ECCCSYN0_tag ECCCSYN0;   /* ECC Corrected Syndrome 0 */
  UMCTL2_REGS_ECCCSYN1_tag ECCCSYN1;   /* ECC Corrected Syndrome 1 */
  UMCTL2_REGS_ECCCSYN2_tag ECCCSYN2;   /* ECC Corrected Syndrome 2 */
  UMCTL2_REGS_ECCBITMASK0_tag ECCBITMASK0; /* ECC Corrected Data Bit Mask 0 */
  UMCTL2_REGS_ECCBITMASK1_tag ECCBITMASK1; /* ECC Corrected Data Bit Mask 1 */
  UMCTL2_REGS_ECCBITMASK2_tag ECCBITMASK2; /* ECC Corrected Data Bit Mask 2 */
  UMCTL2_REGS_ECCUADDR0_tag ECCUADDR0; /* ECC Uncorrected Error Address 0 */
  UMCTL2_REGS_ECCUADDR1_tag ECCUADDR1; /* ECC Uncorrected Error Address 1 */
  UMCTL2_REGS_ECCUSYN0_tag ECCUSYN0;   /* ECC Uncorrected Syndrome 0 */
  UMCTL2_REGS_ECCUSYN1_tag ECCUSYN1;   /* ECC Uncorrected Syndrome 1 */
  UMCTL2_REGS_ECCUSYN2_tag ECCUSYN2;   /* ECC Uncorrected Syndrome 2 */
  UMCTL2_REGS_ECCPOISONADDR0_tag ECCPOISONADDR0; /* ECC Data Poisoning Address 0 */
  UMCTL2_REGS_ECCPOISONADDR1_tag ECCPOISONADDR1; /* ECC Data Poisoning Address 1 */
  UMCTL2_REGS_CRCPARCTL0_tag CRCPARCTL0; /* CRC Parity Control 0 */
  UMCTL2_REGS_CRCPARCTL1_tag CRCPARCTL1; /* CRC Parity Control 1 */
  uint8_t UMCTL2_REGS_reserved5[4];
  UMCTL2_REGS_CRCPARSTAT_tag CRCPARSTAT; /* CRC Parity Status */
  UMCTL2_REGS_INIT0_tag INIT0;         /* DRAM Initialization 0 */
  UMCTL2_REGS_INIT1_tag INIT1;         /* DRAM Initialization 1 */
  UMCTL2_REGS_INIT2_tag INIT2;         /* DRAM Initialization 2 */
  UMCTL2_REGS_INIT3_tag INIT3;         /* DRAM Initialization 3 */
  UMCTL2_REGS_INIT4_tag INIT4;         /* DRAM Initialization 4 */
  UMCTL2_REGS_INIT5_tag INIT5;         /* DRAM Initialization 5 */
  UMCTL2_REGS_INIT6_tag INIT6;         /* DRAM Initialization 6 */
  UMCTL2_REGS_INIT7_tag INIT7;         /* DRAM Initialization 7 */
  UMCTL2_REGS_DIMMCTL_tag DIMMCTL;     /* DIMM Control */
  UMCTL2_REGS_RANKCTL_tag RANKCTL;     /* Rank Control */
  uint8_t UMCTL2_REGS_reserved6[8];
  UMCTL2_REGS_DRAMTMG0_tag DRAMTMG0;   /* DRAM Timing 0 */
  UMCTL2_REGS_DRAMTMG1_tag DRAMTMG1;   /* DRAM Timing 1 */
  UMCTL2_REGS_DRAMTMG2_tag DRAMTMG2;   /* DRAM Timing 2 */
  UMCTL2_REGS_DRAMTMG3_tag DRAMTMG3;   /* DRAM Timing 3 */
  UMCTL2_REGS_DRAMTMG4_tag DRAMTMG4;   /* DRAM Timing 4 */
  UMCTL2_REGS_DRAMTMG5_tag DRAMTMG5;   /* DRAM Timing 5 */
  UMCTL2_REGS_DRAMTMG6_tag DRAMTMG6;   /* DRAM Timing 6 */
  UMCTL2_REGS_DRAMTMG7_tag DRAMTMG7;   /* DRAM Timing 7 */
  UMCTL2_REGS_DRAMTMG8_tag DRAMTMG8;   /* DRAM Timing 8 */
  UMCTL2_REGS_DRAMTMG9_tag DRAMTMG9;   /* DRAM Timing 9 */
  UMCTL2_REGS_DRAMTMG10_tag DRAMTMG10; /* DRAM Timing 10 */
  UMCTL2_REGS_DRAMTMG11_tag DRAMTMG11; /* DRAM Timing 11 */
  UMCTL2_REGS_DRAMTMG12_tag DRAMTMG12; /* DRAM Timing 12 */
  UMCTL2_REGS_DRAMTMG13_tag DRAMTMG13; /* DRAM Timing 13 */
  UMCTL2_REGS_DRAMTMG14_tag DRAMTMG14; /* DRAM Timing 14 */
  UMCTL2_REGS_DRAMTMG15_tag DRAMTMG15; /* DRAM Timing 15 */
  uint8_t UMCTL2_REGS_reserved7[64];
  UMCTL2_REGS_ZQCTL0_tag ZQCTL0;       /* ZQ Control 0 */
  UMCTL2_REGS_ZQCTL1_tag ZQCTL1;       /* ZQ Control 1 */
  UMCTL2_REGS_ZQCTL2_tag ZQCTL2;       /* ZQ Control 2 */
  UMCTL2_REGS_ZQSTAT_tag ZQSTAT;       /* ZQ Status */
  UMCTL2_REGS_DFITMG0_tag DFITMG0;     /* DFI Timing 0 */
  UMCTL2_REGS_DFITMG1_tag DFITMG1;     /* DFI Timing 1 */
  UMCTL2_REGS_DFILPCFG0_tag DFILPCFG0; /* DFI Low Power Configuration 0 */
  UMCTL2_REGS_DFILPCFG1_tag DFILPCFG1; /* DFI Low Power Configuration 1 */
  UMCTL2_REGS_DFIUPD0_tag DFIUPD0;     /* DFI Update 0 */
  UMCTL2_REGS_DFIUPD1_tag DFIUPD1;     /* DFI Update 1 */
  UMCTL2_REGS_DFIUPD2_tag DFIUPD2;     /* DFI Update 2 */
  uint8_t UMCTL2_REGS_reserved8[4];
  UMCTL2_REGS_DFIMISC_tag DFIMISC;     /* DFI Miscellaneous Control */
  UMCTL2_REGS_DFITMG2_tag DFITMG2;     /* DFI Timing 2 */
  UMCTL2_REGS_DFITMG3_tag DFITMG3;     /* DFI Timing 3 */
  UMCTL2_REGS_DFISTAT_tag DFISTAT;     /* DFI Status */
  UMCTL2_REGS_DBICTL_tag DBICTL;       /* DM/DBI Control */
  UMCTL2_REGS_DFIPHYMSTR_tag DFIPHYMSTR; /* DFI PHY Master */
  uint8_t UMCTL2_REGS_reserved9[56];
  UMCTL2_REGS_ADDRMAP0_tag ADDRMAP0;   /* Address Map 0 */
  UMCTL2_REGS_ADDRMAP1_tag ADDRMAP1;   /* Address Map 1 */
  UMCTL2_REGS_ADDRMAP2_tag ADDRMAP2;   /* Address Map 2 */
  UMCTL2_REGS_ADDRMAP3_tag ADDRMAP3;   /* Address Map 3 */
  UMCTL2_REGS_ADDRMAP4_tag ADDRMAP4;   /* Address Map 4 */
  UMCTL2_REGS_ADDRMAP5_tag ADDRMAP5;   /* Address Map 5 */
  UMCTL2_REGS_ADDRMAP6_tag ADDRMAP6;   /* Address Map 6 */
  UMCTL2_REGS_ADDRMAP7_tag ADDRMAP7;   /* Address Map 7 */
  UMCTL2_REGS_ADDRMAP8_tag ADDRMAP8;   /* Address Map 8 */
  UMCTL2_REGS_ADDRMAP9_tag ADDRMAP9;   /* Address Map 9 */
  UMCTL2_REGS_ADDRMAP10_tag ADDRMAP10; /* Address Map 10 */
  UMCTL2_REGS_ADDRMAP11_tag ADDRMAP11; /* Address Map 11 */
  uint8_t UMCTL2_REGS_reserved10[16];
  UMCTL2_REGS_ODTCFG_tag ODTCFG;       /* ODT Configuration */
  UMCTL2_REGS_ODTMAP_tag ODTMAP;       /* ODT/Rank Map */
  uint8_t UMCTL2_REGS_reserved11[8];
  UMCTL2_REGS_SCHED_tag SCHED;         /* Scheduler Control */
  UMCTL2_REGS_SCHED1_tag SCHED1;       /* Scheduler Control 1 */
  uint8_t UMCTL2_REGS_reserved12[4];
  UMCTL2_REGS_PERFHPR1_tag PERFHPR1;   /* High Priority Read CAM 1 */
  uint8_t UMCTL2_REGS_reserved13[4];
  UMCTL2_REGS_PERFLPR1_tag PERFLPR1;   /* Low Priority Read CAM 1 */
  uint8_t UMCTL2_REGS_reserved14[4];
  UMCTL2_REGS_PERFWR1_tag PERFWR1;     /* Write CAM 1 */
  uint8_t UMCTL2_REGS_reserved15[144];
  UMCTL2_REGS_DBG0_tag DBG0;           /* Debug 0 */
  UMCTL2_REGS_DBG1_tag DBG1;           /* Debug 1 */
  UMCTL2_REGS_DBGCAM_tag DBGCAM;       /* CAM Debug */
  UMCTL2_REGS_DBGCMD_tag DBGCMD;       /* Command Debug */
  UMCTL2_REGS_DBGSTAT_tag DBGSTAT;     /* Status Debug */
  uint8_t UMCTL2_REGS_reserved16[4];
  UMCTL2_REGS_DBGCAM1_tag DBGCAM1;     /* CAM Debug 1 */
  uint8_t UMCTL2_REGS_reserved17[4];
  UMCTL2_REGS_SWCTL_tag SWCTL;         /* Software Register Programming Control Enable */
  UMCTL2_REGS_SWSTAT_tag SWSTAT;       /* Software Register Programming Control Status */
  uint8_t UMCTL2_REGS_reserved18[8];
  UMCTL2_REGS_OCPARCFG0_tag OCPARCFG0; /* On-Chip Parity Configuration 0 */
  UMCTL2_REGS_OCPARCFG1_tag OCPARCFG1; /* On-Chip Parity Configuration 1 */
  UMCTL2_REGS_OCPARSTAT0_tag OCPARSTAT0; /* On-Chip Parity Status 0 */
  UMCTL2_REGS_OCPARSTAT1_tag OCPARSTAT1; /* On-Chip Parity Status 1 */
  UMCTL2_REGS_OCPARSTAT2_tag OCPARSTAT2; /* On-Chip Parity Status 2 */
  uint8_t UMCTL2_REGS_reserved19[40];
  UMCTL2_REGS_POISONCFG_tag POISONCFG; /* AXI Poison Configuration */
  UMCTL2_REGS_POISONSTAT_tag POISONSTAT; /* AXI Poison Status */
  UMCTL2_REGS_ADVECCINDEX_tag ADVECCINDEX; /* Advanced ECC Index */
  uint8_t UMCTL2_REGS_reserved20[4];
  UMCTL2_REGS_ECCPOISONPAT0_tag ECCPOISONPAT0; /* ECC Poison Pattern 0 */
  uint8_t UMCTL2_REGS_reserved21[4];
  UMCTL2_REGS_ECCPOISONPAT2_tag ECCPOISONPAT2; /* ECC Poison Pattern 2 */
  UMCTL2_REGS_ECCAPSTAT_tag ECCAPSTAT; /* Address protection within ECC Status */
  uint8_t UMCTL2_REGS_reserved22[52];
  UMCTL2_REGS_REGPARCFG_tag REGPARCFG; /* Register Parity Configuration */
  UMCTL2_REGS_REGPARSTAT_tag REGPARSTAT; /* Register Parity Status */
  uint8_t UMCTL2_REGS_reserved23[24];
  UMCTL2_REGS_OCCAPCFG_tag OCCAPCFG;   /* On-Chip command/Address Protection Configuration */
  UMCTL2_REGS_OCCAPSTAT_tag OCCAPSTAT; /* On-Chip command/Address Protection Status */
  UMCTL2_REGS_OCCAPCFG1_tag OCCAPCFG1; /* On-Chip command/Address Protection Configuration 1 */
  UMCTL2_REGS_OCCAPSTAT1_tag OCCAPSTAT1; /* On-Chip command/Address Protection Status 1 */
  UMCTL2_REGS_DERATESTAT_tag DERATESTAT; /* Temperature Derate Status */
};


/* ============================================================================
   =============================== Module: UOTG ===============================
   ============================================================================ */

typedef union UOTG_ID_union_tag {      /* Identification Register */
  vuint32_t R;
  struct {
    vuint32_t ID:6;                    /* Configuration number */
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t NID:6;                   /* NID */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t _unused_16:5;            /* Reserved */
    vuint32_t REVISION:4;              /* REVISION */
    vuint32_t _unused_25:7;            /* Reserved */
  } B;
} UOTG_ID_tag;

typedef union UOTG_HWGENERAL_union_tag { /* General Hardware Parameters */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;             /* Reserved */
    vuint32_t PHYW:2;                  /* PHYW */
    vuint32_t PHYM:4;                  /* PHYM */
    vuint32_t SM:2;                    /* SM */
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} UOTG_HWGENERAL_tag;

typedef union UOTG_HWHOST_union_tag {  /* Host Hardware Parameters */
  vuint32_t R;
  struct {
    vuint32_t HC:1;                    /* Host capable */
    vuint32_t NPORT:3;                 /* NPORT */
    vuint32_t _unused_4:28;            /* Reserved */
  } B;
} UOTG_HWHOST_tag;

typedef union UOTG_HWDEVICE_union_tag { /* Device Hardware Parameters */
  vuint32_t R;
  struct {
    vuint32_t DC:1;                    /* DC */
    vuint32_t DEVEP:6;                 /* Device endpoint number */
    vuint32_t _unused_7:25;            /* Reserved */
  } B;
} UOTG_HWDEVICE_tag;

typedef union UOTG_HWTXBUF_union_tag { /* TX Buffer Hardware Parameters */
  vuint32_t R;
  struct {
    vuint32_t TXBURST:8;               /* TXBURST */
    vuint32_t TXADD:8;                 /* TXADD */
    vuint32_t TXCHANADD:8;             /* TXCHANADD */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} UOTG_HWTXBUF_tag;

typedef union UOTG_HWRXBUF_union_tag { /* RX Buffer Hardware Parameters */
  vuint32_t R;
  struct {
    vuint32_t RXBURST:8;               /* RXBURST */
    vuint32_t RXADD:8;                 /* RXADD */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} UOTG_HWRXBUF_tag;

typedef union UOTG_GPTIMER_GPTIMERLD_union_tag { /* General Purpose Timer Load */
  vuint32_t R;
  struct {
    vuint32_t GPTLD:24;                /* General Purpose Timer Load Value */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} UOTG_GPTIMER_GPTIMERLD_tag;

typedef union UOTG_GPTIMER_GPTIMERCTRL_union_tag { /* General Purpose Timer Controller */
  vuint32_t R;
  struct {
    vuint32_t GPTCNT:24;               /* General Purpose Timer Counter */
    vuint32_t GPTMODE:1;               /* General Purpose Timer Mode */
    vuint32_t _unused_25:5;            /* Reserved */
    vuint32_t GPTRST:1;                /* GPTRST */
    vuint32_t GPTRUN:1;                /* GPTRUN */
  } B;
} UOTG_GPTIMER_GPTIMERCTRL_tag;

typedef struct UOTG_GPTIMER_struct_tag {
  UOTG_GPTIMER_GPTIMERLD_tag GPTIMERLD; /* General Purpose Timer Load */
  UOTG_GPTIMER_GPTIMERCTRL_tag GPTIMERCTRL; /* General Purpose Timer Controller */
} UOTG_GPTIMER_tag;

typedef union UOTG_SBUSCFG_union_tag { /* System Bus Configuration */
  vuint32_t R;
  struct {
    vuint32_t AHBBRST:3;               /* AHBBRST */
    vuint32_t BARD:3;                  /* AMBA Burst Alignment for Reads */
    vuint32_t BAWR:3;                  /* AMBA Burst Alignment for Writes */
    vuint32_t _unused_9:23;            /* Reserved */
  } B;
} UOTG_SBUSCFG_tag;

typedef union UOTG_CAPLENGTH_union_tag { /* Capability Register Length */
  vuint8_t R;
  struct {
    vuint8_t CAPLENGTH:8;              /* CAPLENGTH */
  } B;
} UOTG_CAPLENGTH_tag;

typedef union UOTG_HCIVERSION_union_tag { /* Host Controller Interface Version */
  vuint16_t R;
  struct {
    vuint16_t HCIVERSION:16;           /* HCIVERSION */
  } B;
} UOTG_HCIVERSION_tag;

typedef union UOTG_HCSPARAMS_union_tag { /* Host Controller Structural Parameters */
  vuint32_t R;
  struct {
    vuint32_t N_PORTS:4;               /* Number of downstream ports */
    vuint32_t PPC:1;                   /* PPC */
    vuint32_t _unused_5:3;             /* Reserved */
    vuint32_t N_PCC:4;                 /* N_PCC */
    vuint32_t N_CC:4;                  /* Number of Companion Controllers */
    vuint32_t PI:1;                    /* Port Indicators */
    vuint32_t _unused_17:3;            /* Reserved */
    vuint32_t N_PTT:4;                 /* Number of Ports per Transaction Translator */
    vuint32_t N_TT:4;                  /* Number of Transaction Translators */
    vuint32_t _unused_28:4;            /* Reserved */
  } B;
} UOTG_HCSPARAMS_tag;

typedef union UOTG_HCCPARAMS_union_tag { /* Host Controller Capability Parameters */
  vuint32_t R;
  struct {
    vuint32_t ADC:1;                   /* ADC */
    vuint32_t PFL:1;                   /* PFL */
    vuint32_t ASP:1;                   /* ASP */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t IST:4;                   /* IST */
    vuint32_t EECP:8;                  /* EECP */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} UOTG_HCCPARAMS_tag;

typedef union UOTG_DCIVERSION_union_tag { /* Device Controller Interface Version */
  vuint16_t R;
  struct {
    vuint16_t DCIFVER:16;              /* DCIFVER */
  } B;
} UOTG_DCIVERSION_tag;

typedef union UOTG_DCCPARAMS_union_tag { /* Device Controller Capability Parameters */
  vuint32_t R;
  struct {
    vuint32_t DEN:6;                   /* DEN */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t DC:1;                    /* DC */
    vuint32_t HC:1;                    /* HC */
    vuint32_t _unused_9:23;            /* Reserved */
  } B;
} UOTG_DCCPARAMS_tag;

typedef union UOTG_USBCMD_union_tag {  /* USB Command Register */
  vuint32_t R;
  struct {
    vuint32_t RS:1;                    /* Run/Stop */
    vuint32_t RST:1;                   /* Controller Reset */
    vuint32_t FS0:2;                   /* FS0 */
    vuint32_t PSE:1;                   /* Periodic Schedule Enable */
    vuint32_t ASE:1;                   /* Asynchronous Schedule Enable */
    vuint32_t IAA:1;                   /* Interrupt on Async Advance Doorbell */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t ASP:2;                   /* Asynchronous Schedule Park Mode Count */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t ASPE:1;                  /* ASPE */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t SUTW:1;                  /* Setup TripWire */
    vuint32_t ATDTW:1;                 /* Add dTD TripWire */
    vuint32_t FS1:1;                   /* Frame List Size */
    vuint32_t ITC:8;                   /* Interrupt Threshold Control */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} UOTG_USBCMD_tag;

typedef union UOTG_USBSTS_union_tag {  /* USB Status Register */
  vuint32_t R;
  struct {
    vuint32_t UI:1;                    /* USB Interrupt */
    vuint32_t UEI:1;                   /* USB Error Interrupt */
    vuint32_t PCI:1;                   /* Port Change Detect */
    vuint32_t FRI:1;                   /* Frame List Rollover */
    vuint32_t SEI:1;                   /* System Error */
    vuint32_t AAI:1;                   /* Interrupt on Async Advance */
    vuint32_t URI:1;                   /* USB Reset Received */
    vuint32_t SRI:1;                   /* SOF Received */
    vuint32_t SLI:1;                   /* DC Suspend */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t ULPII:1;                 /* ULPI Interrupt */
    vuint32_t UALTI:1;                 /* ULPI alt_int Interrupt */
    vuint32_t HCH:1;                   /* HC Halted */
    vuint32_t RCL:1;                   /* Reclamation */
    vuint32_t PS:1;                    /* Periodic Schedule Status */
    vuint32_t AS:1;                    /* Asynchronous Schedule Status */
    vuint32_t NAKI:1;                  /* NAK Interrupt Bit */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t UAI:1;                   /* USB Host Asynchronous Interrupt */
    vuint32_t UPI:1;                   /* USB Host Periodic Interrupt */
    vuint32_t _unused_20:4;            /* Reserved */
    vuint32_t TI0:1;                   /* General Purpose Timer Interrupt 0 */
    vuint32_t TI1:1;                   /* General Purpose Timer Interrupt 1 */
    vuint32_t _unused_26:6;            /* Reserved */
  } B;
} UOTG_USBSTS_tag;

typedef union UOTG_USBINTR_union_tag { /* Interrupt Enable Register */
  vuint32_t R;
  struct {
    vuint32_t UE:1;                    /* UE */
    vuint32_t UEE:1;                   /* UEE */
    vuint32_t PCE:1;                   /* PCE */
    vuint32_t FRE:1;                   /* FRE */
    vuint32_t SEE:1;                   /* SEE */
    vuint32_t AAE:1;                   /* AAE */
    vuint32_t URE:1;                   /* URE */
    vuint32_t SRE:1;                   /* SRE */
    vuint32_t SLE:1;                   /* SLE */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t ULPIE:1;                 /* ULPIE */
    vuint32_t _unused_11:5;            /* Reserved */
    vuint32_t NAKE:1;                  /* NAKE */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t UAIE:1;                  /* UAIE */
    vuint32_t UPIE:1;                  /* UPIE */
    vuint32_t _unused_20:4;            /* Reserved */
    vuint32_t TIE0:1;                  /* TIE0 */
    vuint32_t TIE1:1;                  /* TIE1 */
    vuint32_t _unused_26:6;            /* Reserved */
  } B;
} UOTG_USBINTR_tag;

typedef union UOTG_FRINDEX_union_tag { /* USB Frame Index */
  vuint32_t R;
  struct {
    vuint32_t FRINDEX:14;              /* FRINDEX */
    vuint32_t _unused_14:18;           /* Reserved */
  } B;
} UOTG_FRINDEX_tag;

typedef union UOTG_PERIODICLISTBASE_OR_DEVICEADDR_union_tag { /* Frame List Base Address or Device Address */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t PERBASE:12;              /* PERBASE (For Host Mode) or RESERVED (For Device Mode) */
    vuint32_t USBADDRA:1;              /* Device Address Advance (For Device Mode) or RESERVED (For Host Mode) */
    vuint32_t USBADR_OR_PERBASE:7;     /* Device Address (For Device Mode) or PERBASE (For Host Mode) */
  } B;
} UOTG_PERIODICLISTBASE_OR_DEVICEADDR_tag;

typedef union UOTG_ASYNCLISTADDR_OR_ENDPOINTLISTADDR_union_tag { /* Next Asynch. Address or Endpoint List Address) */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:5;             /* Reserved */
    vuint32_t ASYBASE_OR_RESERVED:6;   /* Link Pointer Low (LPL) (for Host Mode) or RESERVED (for Device Mode) */
    vuint32_t EPBASE_OR_ASYBASE:21;    /* Endpoint List Pointer (Low) (for Device Mode) or Link Pointer Low (LPL) (for Host Mode) */
  } B;
} UOTG_ASYNCLISTADDR_OR_ENDPOINTLISTADDR_tag;

typedef union UOTG_BURSTSIZE_union_tag { /* Programmable Burst Size */
  vuint32_t R;
  struct {
    vuint32_t RXPBURST:8;              /* RXPBURST */
    vuint32_t TXPBURST:8;              /* TXPBURST */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} UOTG_BURSTSIZE_tag;

typedef union UOTG_TXFILLTUNING_union_tag { /* TX FIFO Fill Tuning */
  vuint32_t R;
  struct {
    vuint32_t TXSCHOH:7;               /* Scheduler Overhead */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t TXSCHHEALTH:5;           /* Scheduler Health Counter */
    vuint32_t _unused_13:3;            /* Reserved */
    vuint32_t TXFIFOTHRES:6;           /* FIFO Burst Threshold */
    vuint32_t _unused_22:10;           /* Reserved */
  } B;
} UOTG_TXFILLTUNING_tag;

typedef union UOTG_IC_USB_union_tag {  /* IC_USB enable and voltage negotiation */
  vuint32_t R;
  struct {
    vuint32_t IC_VDD1:3;               /* IC_VDD1 */
    vuint32_t IC1:1;                   /* IC1 */
    vuint32_t _unused_4:28;            /* Reserved */
  } B;
} UOTG_IC_USB_tag;

typedef union UOTG_ULPI_VIEWPORT_union_tag { /* ULPI Register Access */
  vuint32_t R;
  struct {
    vuint32_t ULPI_DATWR:8;            /* ULPI Data Write */
    vuint32_t ULPI_DATRD:8;            /* ULPI Data Read */
    vuint32_t ULPI_ADDR:8;             /* ULPI data Address */
    vuint32_t ULPI_PORT:3;             /* ULPI Port number */
    vuint32_t ULPI_SS:1;               /* ULPI Sync State */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t ULPI_RW:1;               /* ULPI Read/Write */
    vuint32_t ULPI_RUN:1;              /* ULPI Run */
    vuint32_t ULPI_WU:1;               /* ULPI Wake-Up */
  } B;
} UOTG_ULPI_VIEWPORT_tag;

typedef union UOTG_ENDPTNAK_union_tag { /* Endpoint NAK */
  vuint32_t R;
  struct {
    vuint32_t EPRN:6;                  /* RX Endpoint NAK */
    vuint32_t _unused_6:10;            /* Reserved */
    vuint32_t EPTN:6;                  /* TX Endpoint NAK */
    vuint32_t _unused_22:10;           /* Reserved */
  } B;
} UOTG_ENDPTNAK_tag;

typedef union UOTG_ENDPTNAKEN_union_tag { /* Endpoint NAK Enable */
  vuint32_t R;
  struct {
    vuint32_t EPRNE:6;                 /* RX Endpoint NAK Enable */
    vuint32_t _unused_6:10;            /* Reserved */
    vuint32_t EPTNE:6;                 /* TX Endpoint NAK Enable */
    vuint32_t _unused_22:10;           /* Reserved */
  } B;
} UOTG_ENDPTNAKEN_tag;

typedef union UOTG_CONFIGFLAG_union_tag { /* Configure Flag Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} UOTG_CONFIGFLAG_tag;

typedef union UOTG_PORTSC1_union_tag { /* Port Status and Control */
  vuint32_t R;
  struct {
    vuint32_t CCS:1;                   /* Current Connect Status */
    vuint32_t CSC:1;                   /* Connect Status Change */
    vuint32_t PE:1;                    /* Port Enabled/Disabled */
    vuint32_t PEC:1;                   /* Port Enable/Disable Change */
    vuint32_t OCA:1;                   /* Over-current Active */
    vuint32_t OCC:1;                   /* Over-current Change */
    vuint32_t FPR:1;                   /* Force Port Resume */
    vuint32_t SUSP:1;                  /* Suspend */
    vuint32_t PR:1;                    /* Port Reset */
    vuint32_t HSP:1;                   /* High-Speed Port */
    vuint32_t LS:2;                    /* Line Status */
    vuint32_t PP:1;                    /* PP */
    vuint32_t PO:1;                    /* Port Owner */
    vuint32_t PIC:2;                   /* Port Indicator Control */
    vuint32_t PTC:4;                   /* Port Test Control */
    vuint32_t WKCN:1;                  /* Wake on Connect Enable */
    vuint32_t WKDS:1;                  /* Wake on Disconnect Enable */
    vuint32_t WKOC:1;                  /* Wake on Over-current Enable */
    vuint32_t PHCD:1;                  /* PHY Low Power Suspend - Clock Disable */
    vuint32_t PFSC:1;                  /* Port Force Full Speed Connect */
    vuint32_t PTS0:1;                  /* PTS0 */
    vuint32_t PSPD:2;                  /* Port Speed */
    vuint32_t PTW:1;                   /* Parallel Transceiver Width */
    vuint32_t STS:1;                   /* Serial Transceiver Select */
    vuint32_t PTS1:2;                  /* Parallel Transceiver Select */
  } B;
} UOTG_PORTSC1_tag;

typedef union UOTG_OTGSC_union_tag {   /* On-The-Go Status Control */
  vuint32_t R;
  struct {
    vuint32_t VD:1;                    /* VBUS Discharge */
    vuint32_t VC:1;                    /* VBUS Charge */
    vuint32_t HAAR:1;                  /* Hardware Assist Auto-Reset */
    vuint32_t OT:1;                    /* OTG Termination */
    vuint32_t DP:1;                    /* Data Pulsing */
    vuint32_t IDPU:1;                  /* ID Pullup */
    vuint32_t HADP:1;                  /* HADP Hardware Assist Data. */
    vuint32_t HABA:1;                  /* Hardware Assist B-Disconnect to A-connect. */
    vuint32_t ID:1;                    /* USB ID */
    vuint32_t AVV:1;                   /* A VBus Valid */
    vuint32_t ASV:1;                   /* A Session Valid */
    vuint32_t BSV:1;                   /* B Session Valid */
    vuint32_t BSE:1;                   /* B Session End */
    vuint32_t TIM_TOG:1;               /* One-millisecond timer toggle */
    vuint32_t DPS:1;                   /* Data Bus Pulsing Status */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t IDIS:1;                  /* USB ID Interrupt Status */
    vuint32_t AVVIS:1;                 /* A VBus Valid Interrupt Status */
    vuint32_t ASVIS:1;                 /* A Session Valid Interrupt Status */
    vuint32_t BSVIS:1;                 /* B Session Valid Interrupt Status */
    vuint32_t BSEIS:1;                 /* B Session End Interrupt Status */
    vuint32_t TIMIS:1;                 /* One-millisecond timer interrupt status (1MsS) */
    vuint32_t DPIS:1;                  /* Data Pulse Interrupt Status */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t IDIE:1;                  /* USB ID Interrupt Enable */
    vuint32_t AVVIE:1;                 /* A VBus Valid Interrupt Enable */
    vuint32_t ASVIE:1;                 /* A Session Valid Interrupt Enable */
    vuint32_t BSVIE:1;                 /* B Session Valid Interrupt Enable */
    vuint32_t BSEIE:1;                 /* B Session End Interrupt Enable */
    vuint32_t TIMIE:1;                 /* One-millisecond timer interrupt enable (1MsE) */
    vuint32_t DPIE:1;                  /* DPIE */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} UOTG_OTGSC_tag;

typedef union UOTG_USBMODE_union_tag { /* USB Device Mode */
  vuint32_t R;
  struct {
    vuint32_t CM:2;                    /* Controller Mode */
    vuint32_t ES:1;                    /* Endian Select */
    vuint32_t SLOM:1;                  /* Setup Lockout Mode */
    vuint32_t SDIS:1;                  /* Stream Disable Mode */
    vuint32_t _unused_5:7;             /* Reserved */
    vuint32_t TXHSD:3;                 /* Tx to Tx HS Delay */
    vuint32_t SRT:1;                   /* Shorten Reset Time */
    vuint32_t ALP:8;                   /* Auto Low Power */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} UOTG_USBMODE_tag;

typedef union UOTG_ENDPTSETUPSTAT_union_tag { /* Endpoint Setup Status */
  vuint32_t R;
  struct {
    vuint32_t ENDPTSETUPSTAT:16;       /* Setup Endpoint Status */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} UOTG_ENDPTSETUPSTAT_tag;

typedef union UOTG_ENDPTPRIME_union_tag { /* Endpoint Initialization */
  vuint32_t R;
  struct {
    vuint32_t PERB:6;                  /* Prime Endpoint Receive Buffer */
    vuint32_t _unused_6:10;            /* Reserved */
    vuint32_t PETB:6;                  /* Prime Endpoint Transmit Buffer */
    vuint32_t _unused_22:10;           /* Reserved */
  } B;
} UOTG_ENDPTPRIME_tag;

typedef union UOTG_ENDPTFLUSH_union_tag { /* Endpoint De-Initialize */
  vuint32_t R;
  struct {
    vuint32_t FERB:6;                  /* Flush Endpoint Receive Buffer */
    vuint32_t _unused_6:10;            /* Reserved */
    vuint32_t FETB:6;                  /* Flush Endpoint Transmit Buffer */
    vuint32_t _unused_22:10;           /* Reserved */
  } B;
} UOTG_ENDPTFLUSH_tag;

typedef union UOTG_ENDPTSTAT_union_tag { /* Endpoint Status */
  vuint32_t R;
  struct {
    vuint32_t ERBR:6;                  /* Endpoint Receive Buffer Ready */
    vuint32_t _unused_6:10;            /* Reserved */
    vuint32_t ETBR:6;                  /* Endpoint Transmit Buffer Ready */
    vuint32_t _unused_22:10;           /* Reserved */
  } B;
} UOTG_ENDPTSTAT_tag;

typedef union UOTG_ENDPTCOMPLETE_union_tag { /* Endpoint Complete */
  vuint32_t R;
  struct {
    vuint32_t ERCE:6;                  /* Endpoint Receive Complete Event */
    vuint32_t _unused_6:10;            /* Reserved */
    vuint32_t ETCE:6;                  /* Endpoint Transmit Complete Event */
    vuint32_t _unused_22:10;           /* Reserved */
  } B;
} UOTG_ENDPTCOMPLETE_tag;

typedef union UOTG_ENDPTCTRL0_union_tag { /* Endpoint Control 0 */
  vuint32_t R;
  struct {
    vuint32_t RXS:1;                   /* RX Endpoint Stall */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t RXT:2;                   /* RX Endpoint Type */
    vuint32_t _unused_4:3;             /* Reserved */
    vuint32_t RXE:1;                   /* RXE */
    vuint32_t _unused_8:8;             /* Reserved */
    vuint32_t TXS:1;                   /* TX Endpoint Stall */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t TXT:2;                   /* TX Endpoint Type */
    vuint32_t _unused_20:3;            /* Reserved */
    vuint32_t TXE:1;                   /* TXE */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} UOTG_ENDPTCTRL0_tag;

typedef union UOTG_ENDPTCTRL1_union_tag { /* Endpoint Control */
  vuint32_t R;
  struct {
    vuint32_t RXS:1;                   /* RX Endpoint Stall */
    vuint32_t RXD:1;                   /* RX Endpoint Data Sink */
    vuint32_t RXT:2;                   /* RX Endpoint Type */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t RXI:1;                   /* RX Data Toggle Inhibit */
    vuint32_t RXR:1;                   /* RX Data Toggle Reset */
    vuint32_t RXE:1;                   /* RXE */
    vuint32_t _unused_8:8;             /* Reserved */
    vuint32_t TXS:1;                   /* TXS */
    vuint32_t TXD:1;                   /* TXD */
    vuint32_t TXT:2;                   /* TXT */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t TXI:1;                   /* TXI */
    vuint32_t TXR:1;                   /* TX Data Toggle Reset */
    vuint32_t TXE:1;                   /* TXE */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} UOTG_ENDPTCTRL1_tag;

typedef union UOTG_ENDPTCTRL2_union_tag { /* Endpoint Control */
  vuint32_t R;
  struct {
    vuint32_t RXS:1;                   /* RX Endpoint Stall */
    vuint32_t RXD:1;                   /* RX Endpoint Data Sink */
    vuint32_t RXT:2;                   /* RX Endpoint Type */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t RXI:1;                   /* RX Data Toggle Inhibit */
    vuint32_t RXR:1;                   /* RX Data Toggle Reset */
    vuint32_t RXE:1;                   /* RXE */
    vuint32_t _unused_8:8;             /* Reserved */
    vuint32_t TXS:1;                   /* TXS */
    vuint32_t TXD:1;                   /* TXD */
    vuint32_t TXT:2;                   /* TXT */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t TXI:1;                   /* TXI */
    vuint32_t TXR:1;                   /* TX Data Toggle Reset */
    vuint32_t TXE:1;                   /* TXE */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} UOTG_ENDPTCTRL2_tag;

typedef union UOTG_ENDPTCTRL3_union_tag { /* Endpoint Control */
  vuint32_t R;
  struct {
    vuint32_t RXS:1;                   /* RX Endpoint Stall */
    vuint32_t RXD:1;                   /* RX Endpoint Data Sink */
    vuint32_t RXT:2;                   /* RX Endpoint Type */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t RXI:1;                   /* RX Data Toggle Inhibit */
    vuint32_t RXR:1;                   /* RX Data Toggle Reset */
    vuint32_t RXE:1;                   /* RXE */
    vuint32_t _unused_8:8;             /* Reserved */
    vuint32_t TXS:1;                   /* TXS */
    vuint32_t TXD:1;                   /* TXD */
    vuint32_t TXT:2;                   /* TXT */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t TXI:1;                   /* TXI */
    vuint32_t TXR:1;                   /* TX Data Toggle Reset */
    vuint32_t TXE:1;                   /* TXE */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} UOTG_ENDPTCTRL3_tag;

typedef union UOTG_ENDPTCTRL4_union_tag { /* Endpoint Control */
  vuint32_t R;
  struct {
    vuint32_t RXS:1;                   /* RX Endpoint Stall */
    vuint32_t RXD:1;                   /* RX Endpoint Data Sink */
    vuint32_t RXT:2;                   /* RX Endpoint Type */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t RXI:1;                   /* RX Data Toggle Inhibit */
    vuint32_t RXR:1;                   /* RX Data Toggle Reset */
    vuint32_t RXE:1;                   /* RXE */
    vuint32_t _unused_8:8;             /* Reserved */
    vuint32_t TXS:1;                   /* TXS */
    vuint32_t TXD:1;                   /* TXD */
    vuint32_t TXT:2;                   /* TXT */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t TXI:1;                   /* TXI */
    vuint32_t TXR:1;                   /* TX Data Toggle Reset */
    vuint32_t TXE:1;                   /* TXE */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} UOTG_ENDPTCTRL4_tag;

typedef union UOTG_ENDPTCTRL5_union_tag { /* Endpoint Control */
  vuint32_t R;
  struct {
    vuint32_t RXS:1;                   /* RX Endpoint Stall */
    vuint32_t RXD:1;                   /* RX Endpoint Data Sink */
    vuint32_t RXT:2;                   /* RX Endpoint Type */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t RXI:1;                   /* RX Data Toggle Inhibit */
    vuint32_t RXR:1;                   /* RX Data Toggle Reset */
    vuint32_t RXE:1;                   /* RXE */
    vuint32_t _unused_8:8;             /* Reserved */
    vuint32_t TXS:1;                   /* TXS */
    vuint32_t TXD:1;                   /* TXD */
    vuint32_t TXT:2;                   /* TXT */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t TXI:1;                   /* TXI */
    vuint32_t TXR:1;                   /* TX Data Toggle Reset */
    vuint32_t TXE:1;                   /* TXE */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} UOTG_ENDPTCTRL5_tag;

struct UOTG_tag {
  UOTG_ID_tag ID;                      /* Identification Register */
  UOTG_HWGENERAL_tag HWGENERAL;        /* General Hardware Parameters */
  UOTG_HWHOST_tag HWHOST;              /* Host Hardware Parameters */
  UOTG_HWDEVICE_tag HWDEVICE;          /* Device Hardware Parameters */
  UOTG_HWTXBUF_tag HWTXBUF;            /* TX Buffer Hardware Parameters */
  UOTG_HWRXBUF_tag HWRXBUF;            /* RX Buffer Hardware Parameters */
  uint8_t UOTG_reserved0[104];
  UOTG_GPTIMER_tag GPTIMER[2];
  UOTG_SBUSCFG_tag SBUSCFG;            /* System Bus Configuration */
  uint8_t UOTG_reserved1[108];
  UOTG_CAPLENGTH_tag CAPLENGTH;        /* Capability Register Length */
  uint8_t UOTG_reserved2[1];
  UOTG_HCIVERSION_tag HCIVERSION;      /* Host Controller Interface Version */
  UOTG_HCSPARAMS_tag HCSPARAMS;        /* Host Controller Structural Parameters */
  UOTG_HCCPARAMS_tag HCCPARAMS;        /* Host Controller Capability Parameters */
  uint8_t UOTG_reserved3[20];
  UOTG_DCIVERSION_tag DCIVERSION;      /* Device Controller Interface Version */
  uint8_t UOTG_reserved4[2];
  UOTG_DCCPARAMS_tag DCCPARAMS;        /* Device Controller Capability Parameters */
  uint8_t UOTG_reserved5[24];
  UOTG_USBCMD_tag USBCMD;              /* USB Command Register */
  UOTG_USBSTS_tag USBSTS;              /* USB Status Register */
  UOTG_USBINTR_tag USBINTR;            /* Interrupt Enable Register */
  UOTG_FRINDEX_tag FRINDEX;            /* USB Frame Index */
  uint8_t UOTG_reserved6[4];
  UOTG_PERIODICLISTBASE_OR_DEVICEADDR_tag PERIODICLISTBASE_OR_DEVICEADDR; /* Frame List Base Address or Device Address */
  UOTG_ASYNCLISTADDR_OR_ENDPOINTLISTADDR_tag ASYNCLISTADDR_OR_ENDPOINTLISTADDR; /* Next Asynch. Address or Endpoint List Address) */
  uint8_t UOTG_reserved7[4];
  UOTG_BURSTSIZE_tag BURSTSIZE;        /* Programmable Burst Size */
  UOTG_TXFILLTUNING_tag TXFILLTUNING;  /* TX FIFO Fill Tuning */
  uint8_t UOTG_reserved8[4];
  UOTG_IC_USB_tag IC_USB;              /* IC_USB enable and voltage negotiation */
  UOTG_ULPI_VIEWPORT_tag ULPI_VIEWPORT; /* ULPI Register Access */
  uint8_t UOTG_reserved9[4];
  UOTG_ENDPTNAK_tag ENDPTNAK;          /* Endpoint NAK */
  UOTG_ENDPTNAKEN_tag ENDPTNAKEN;      /* Endpoint NAK Enable */
  UOTG_CONFIGFLAG_tag CONFIGFLAG;      /* Configure Flag Register */
  UOTG_PORTSC1_tag PORTSC1;            /* Port Status and Control */
  uint8_t UOTG_reserved10[28];
  UOTG_OTGSC_tag OTGSC;                /* On-The-Go Status Control */
  UOTG_USBMODE_tag USBMODE;            /* USB Device Mode */
  UOTG_ENDPTSETUPSTAT_tag ENDPTSETUPSTAT; /* Endpoint Setup Status */
  UOTG_ENDPTPRIME_tag ENDPTPRIME;      /* Endpoint Initialization */
  UOTG_ENDPTFLUSH_tag ENDPTFLUSH;      /* Endpoint De-Initialize */
  UOTG_ENDPTSTAT_tag ENDPTSTAT;        /* Endpoint Status */
  UOTG_ENDPTCOMPLETE_tag ENDPTCOMPLETE; /* Endpoint Complete */
  UOTG_ENDPTCTRL0_tag ENDPTCTRL0;      /* Endpoint Control 0 */
  UOTG_ENDPTCTRL1_tag ENDPTCTRL1;      /* Endpoint Control */
  UOTG_ENDPTCTRL2_tag ENDPTCTRL2;      /* Endpoint Control */
  UOTG_ENDPTCTRL3_tag ENDPTCTRL3;      /* Endpoint Control */
  UOTG_ENDPTCTRL4_tag ENDPTCTRL4;      /* Endpoint Control */
  UOTG_ENDPTCTRL5_tag ENDPTCTRL5;      /* Endpoint Control */
};


/* ============================================================================
   =============================== Module: UOTGNC =============================
   ============================================================================ */

typedef union UOTGNC_CR_union_tag {    /* Control register */
  vuint32_t R;
  struct {
    vuint32_t WAKEUP_IE:1;             /* USB wake up interrupt enable */
    vuint32_t CORE_IE:1;               /* Enable interrupt from core */
    vuint32_t PWRFLT:1;                /* Power fault indication */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t WAKEUPIC:1;              /* Clear USB wake up interrupt */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t PWRFLTEN:1;              /* Enable Vbus power fault detection */
    vuint32_t PWRFLTDF:1;              /* Vbus power fault current default value */
    vuint32_t WAKEUPIS:1;              /* USB wake-up interrupt status */
    vuint32_t WAKEUPCTRL:1;            /* User wake-up control */
    vuint32_t WAKEUPEN:1;              /* User wake-up enable */
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} UOTGNC_CR_tag;

struct UOTGNC_tag {
  UOTGNC_CR_tag CR;                    /* Control register */
};


/* ============================================================================
   =============================== Module: USDHC ==============================
   ============================================================================ */

typedef union USDHC_DS_ADDR_union_tag { /* DMA System Address */
  vuint32_t R;
  struct {
    vuint32_t DS_ADDR:32;              /* System address */
  } B;
} USDHC_DS_ADDR_tag;

typedef union USDHC_BLK_ATT_union_tag { /* Block Attributes */
  vuint32_t R;
  struct {
    vuint32_t BLKSIZE:13;              /* Transfer block size */
    vuint32_t _unused_13:3;            /* Reserved */
    vuint32_t BLKCNT:16;               /* Blocks count for current transfer */
  } B;
} USDHC_BLK_ATT_tag;

typedef union USDHC_CMD_ARG_union_tag { /* Command Argument */
  vuint32_t R;
  struct {
    vuint32_t CMDARG:32;               /* Command argument */
  } B;
} USDHC_CMD_ARG_tag;

typedef union USDHC_CMD_XFR_TYP_union_tag { /* Command Transfer Type */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t RSPTYP:2;                /* Response type select */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t CCCEN:1;                 /* Command CRC check enable */
    vuint32_t CICEN:1;                 /* Command index check enable */
    vuint32_t DPSEL:1;                 /* Data present select */
    vuint32_t CMDTYP:2;                /* Command type */
    vuint32_t CMDINX:6;                /* Command index */
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} USDHC_CMD_XFR_TYP_tag;

typedef union USDHC_CMD_RSP0_union_tag { /* Command Response0 */
  vuint32_t R;
  struct {
    vuint32_t CMDRSP0:32;              /* Command response 0 */
  } B;
} USDHC_CMD_RSP0_tag;

typedef union USDHC_CMD_RSP1_union_tag { /* Command Response1 */
  vuint32_t R;
  struct {
    vuint32_t CMDRSP1:32;              /* Command response 1 */
  } B;
} USDHC_CMD_RSP1_tag;

typedef union USDHC_CMD_RSP2_union_tag { /* Command Response2 */
  vuint32_t R;
  struct {
    vuint32_t CMDRSP2:32;              /* Command response 2 */
  } B;
} USDHC_CMD_RSP2_tag;

typedef union USDHC_CMD_RSP3_union_tag { /* Command Response3 */
  vuint32_t R;
  struct {
    vuint32_t CMDRSP3:32;              /* Command response 3 */
  } B;
} USDHC_CMD_RSP3_tag;

typedef union USDHC_DATA_BUFF_ACC_PORT_union_tag { /* Data Buffer Access Port */
  vuint32_t R;
  struct {
    vuint32_t DATCONT:32;              /* Data content */
  } B;
} USDHC_DATA_BUFF_ACC_PORT_tag;

typedef union USDHC_PRES_STATE_union_tag { /* Present State */
  vuint32_t R;
  struct {
    vuint32_t CIHB:1;                  /* Command inhibit (CMD) */
    vuint32_t CDIHB:1;                 /* Command inhibit (DATA) */
    vuint32_t DLA:1;                   /* Data line active */
    vuint32_t SDSTB:1;                 /* SD clock stable */
    vuint32_t IPGOFF:1;                /* Peripheral clock gated off internally */
    vuint32_t HCKOFF:1;                /* HCLK gated off internally */
    vuint32_t PEROFF:1;                /* IPG_PERCLK gated off internally */
    vuint32_t SDOFF:1;                 /* SD clock gated off internally */
    vuint32_t WTA:1;                   /* Write transfer active */
    vuint32_t RTA:1;                   /* Read transfer active */
    vuint32_t BWEN:1;                  /* Buffer write enable */
    vuint32_t BREN:1;                  /* Buffer read enable */
    vuint32_t RTR:1;                   /* Re-Tuning Request (only for SD3.0 SDR104 mode and EMMC HS200 mode) */
    vuint32_t _unused_13:2;            /* Reserved */
    vuint32_t TSCD:1;                  /* Tape select change done */
    vuint32_t CINST:1;                 /* Card inserted */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t CDPL:1;                  /* Card detect pin level */
    vuint32_t WPSPL:1;                 /* Write protect switch pin level */
    vuint32_t _unused_20:3;            /* Reserved */
    vuint32_t CLSL:1;                  /* CMD line signal level */
    vuint32_t DLSL:8;                  /* DATA[7:0] line signal level */
  } B;
} USDHC_PRES_STATE_tag;

typedef union USDHC_PROT_CTRL_union_tag { /* Protocol Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t DTW:2;                   /* Data transfer width */
    vuint32_t D3CD:1;                  /* DATA3 as card detection pin */
    vuint32_t EMODE:2;                 /* Endian mode */
    vuint32_t CDTL:1;                  /* Card detect test level */
    vuint32_t CDSS:1;                  /* Card detect signal selection */
    vuint32_t DMASEL:2;                /* DMA select */
    vuint32_t _unused_10:6;            /* Reserved */
    vuint32_t SABGREQ:1;               /* Stop at block gap request */
    vuint32_t CREQ:1;                  /* Continue request */
    vuint32_t RWCTL:1;                 /* Read wait control */
    vuint32_t IABG:1;                  /* Interrupt at block gap */
    vuint32_t RD_DONE_NO_8CLK:1;       /* Read performed number 8 clock */
    vuint32_t _unused_21:3;            /* Reserved */
    vuint32_t WECINT:1;                /* Wakeup event enable on card interrupt */
    vuint32_t WECINS:1;                /* Wakeup event enable on SD card insertion */
    vuint32_t WECRM:1;                 /* Wakeup event enable on SD card removal */
    vuint32_t _unused_27:3;            /* Reserved */
    vuint32_t NON_EXACT_BLK_RD:1;      /* Non-exact block read */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} USDHC_PROT_CTRL_tag;

typedef union USDHC_SYS_CTRL_union_tag { /* System Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;             /* Reserved */
    vuint32_t DVS:4;                   /* Divisor */
    vuint32_t SDCLKFS:8;               /* SDCLK frequency select */
    vuint32_t DTOCV:4;                 /* Data timeout counter value */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t IPP_RST_N:1;             /* Hardware reset */
    vuint32_t RSTA:1;                  /* Software reset for all */
    vuint32_t RSTC:1;                  /* Software reset for CMD line */
    vuint32_t RSTD:1;                  /* Software reset for data line */
    vuint32_t INITA:1;                 /* Initialization active */
    vuint32_t RSTT:1;                  /* Reset tuning */
    vuint32_t _unused_29:3;            /* Reserved */
  } B;
} USDHC_SYS_CTRL_tag;

typedef union USDHC_INT_STATUS_union_tag { /* Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t CC:1;                    /* Command complete */
    vuint32_t TC:1;                    /* Transfer complete */
    vuint32_t BGE:1;                   /* Block gap event */
    vuint32_t DINT:1;                  /* DMA interrupt */
    vuint32_t BWR:1;                   /* Buffer write ready */
    vuint32_t BRR:1;                   /* Buffer read ready */
    vuint32_t CINS:1;                  /* Card insertion */
    vuint32_t CRM:1;                   /* Card removal */
    vuint32_t CINT:1;                  /* Card interrupt */
    vuint32_t _unused_9:3;             /* Reserved */
    vuint32_t RTE:1;                   /* Re-tuning event: (only for SD3.0 SDR104 mode and EMMC HS200 mode) */
    vuint32_t TP:1;                    /* Tuning pass:(only for SD3.0 SDR104 mode and EMMC HS200 mode) */
    vuint32_t CQI:1;                   /* Command queuing interrupt */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t CTOE:1;                  /* Command timeout error */
    vuint32_t CCE:1;                   /* Command CRC error */
    vuint32_t CEBE:1;                  /* Command end bit error */
    vuint32_t CIE:1;                   /* Command index error */
    vuint32_t DTOE:1;                  /* Data timeout error */
    vuint32_t DCE:1;                   /* Data CRC error */
    vuint32_t DEBE:1;                  /* Data end bit error */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t AC12E:1;                 /* Auto CMD12 error */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t TNE:1;                   /* Tuning error: (only for SD3.0 SDR104 mode and EMMC HS200 mode) */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t DMAE:1;                  /* DMA error */
    vuint32_t _unused_29:3;            /* Reserved */
  } B;
} USDHC_INT_STATUS_tag;

typedef union USDHC_INT_STATUS_EN_union_tag { /* Interrupt Status Enable */
  vuint32_t R;
  struct {
    vuint32_t CCSEN:1;                 /* Command complete status enable */
    vuint32_t TCSEN:1;                 /* Transfer complete status enable */
    vuint32_t BGESEN:1;                /* Block gap event status enable */
    vuint32_t DINTSEN:1;               /* DMA interrupt status enable */
    vuint32_t BWRSEN:1;                /* Buffer write ready status enable */
    vuint32_t BRRSEN:1;                /* Buffer read ready status enable */
    vuint32_t CINSSEN:1;               /* Card insertion status enable */
    vuint32_t CRMSEN:1;                /* Card removal status enable */
    vuint32_t CINTSEN:1;               /* Card interrupt status enable */
    vuint32_t _unused_9:3;             /* Reserved */
    vuint32_t RTESEN:1;                /* Re-tuning event status enable */
    vuint32_t TPSEN:1;                 /* Tuning pass status enable */
    vuint32_t CQISEN:1;                /* Command queuing status enable */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t CTOESEN:1;               /* Command timeout error status enable */
    vuint32_t CCESEN:1;                /* Command CRC error status enable */
    vuint32_t CEBESEN:1;               /* Command end bit error status enable */
    vuint32_t CIESEN:1;                /* Command index error status enable */
    vuint32_t DTOESEN:1;               /* Data timeout error status enable */
    vuint32_t DCESEN:1;                /* Data CRC error status enable */
    vuint32_t DEBESEN:1;               /* Data end bit error status enable */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t AC12ESEN:1;              /* Auto CMD12 error status enable */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t TNESEN:1;                /* Tuning error status enable */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t DMAESEN:1;               /* DMA error status enable */
    vuint32_t _unused_29:3;            /* Reserved */
  } B;
} USDHC_INT_STATUS_EN_tag;

typedef union USDHC_INT_SIGNAL_EN_union_tag { /* Interrupt Signal Enable */
  vuint32_t R;
  struct {
    vuint32_t CCIEN:1;                 /* Command complete interrupt enable */
    vuint32_t TCIEN:1;                 /* Transfer complete interrupt enable */
    vuint32_t BGEIEN:1;                /* Block gap event interrupt enable */
    vuint32_t DINTIEN:1;               /* DMA interrupt enable */
    vuint32_t BWRIEN:1;                /* Buffer write ready interrupt enable */
    vuint32_t BRRIEN:1;                /* Buffer read ready interrupt enable */
    vuint32_t CINSIEN:1;               /* Card insertion interrupt enable */
    vuint32_t CRMIEN:1;                /* Card removal interrupt enable */
    vuint32_t CINTIEN:1;               /* Card interrupt enable */
    vuint32_t _unused_9:3;             /* Reserved */
    vuint32_t RTEIEN:1;                /* Re-tuning event interrupt enable */
    vuint32_t TPIEN:1;                 /* Tuning pass interrupt enable */
    vuint32_t CQIIEN:1;                /* Command queuing signal enable */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t CTOEIEN:1;               /* Command timeout error interrupt enable */
    vuint32_t CCEIEN:1;                /* Command CRC error interrupt enable */
    vuint32_t CEBEIEN:1;               /* Command end bit error interrupt enable */
    vuint32_t CIEIEN:1;                /* Command index error interrupt enable */
    vuint32_t DTOEIEN:1;               /* Data timeout error interrupt enable */
    vuint32_t DCEIEN:1;                /* Data CRC error interrupt enable */
    vuint32_t DEBEIEN:1;               /* Data end bit error interrupt enable */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t AC12EIEN:1;              /* Auto CMD12 error interrupt enable */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t TNEIEN:1;                /* Tuning error interrupt enable */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t DMAEIEN:1;               /* DMA error interrupt enable */
    vuint32_t _unused_29:3;            /* Reserved */
  } B;
} USDHC_INT_SIGNAL_EN_tag;

typedef union USDHC_AUTOCMD12_ERR_STATUS_union_tag { /* Auto CMD12 Error Status */
  vuint32_t R;
  struct {
    vuint32_t AC12NE:1;                /* Auto CMD12 not executed */
    vuint32_t AC12TOE:1;               /* Auto CMD12 / 23 timeout error */
    vuint32_t AC12EBE:1;               /* Auto CMD12 / 23 end bit error */
    vuint32_t AC12CE:1;                /* Auto CMD12 / 23 CRC error */
    vuint32_t AC12IE:1;                /* Auto CMD12 / 23 index error */
    vuint32_t _unused_5:2;             /* Reserved */
    vuint32_t CNIBAC12E:1;             /* Command not issued by Auto CMD12 error */
    vuint32_t _unused_8:14;            /* Reserved */
    vuint32_t EXECUTE_TUNING:1;        /* Execute tuning */
    vuint32_t SMP_CLK_SEL:1;           /* Sample clock select */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} USDHC_AUTOCMD12_ERR_STATUS_tag;

typedef union USDHC_HOST_CTRL_CAP_union_tag { /* Host Controller Capabilities */
  vuint32_t R;
  struct {
    vuint32_t SDR50_SUPPORT:1;         /* SDR50 support */
    vuint32_t SDR104_SUPPORT:1;        /* SDR104 support */
    vuint32_t DDR50_SUPPORT:1;         /* DDR50 support */
    vuint32_t _unused_3:5;             /* Reserved */
    vuint32_t TIME_COUNT_RETUNING:4;   /* Time counter for retuning */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t USE_TUNING_SDR50:1;      /* Use Tuning for SDR50 */
    vuint32_t RETUNING_MODE:2;         /* Retuning Mode */
    vuint32_t MBL:3;                   /* Max block length */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t ADMAS:1;                 /* ADMA support */
    vuint32_t HSS:1;                   /* High speed support */
    vuint32_t DMAS:1;                  /* DMA support */
    vuint32_t SRS:1;                   /* Suspend / resume support */
    vuint32_t VS33:1;                  /* Voltage support 3.3 V */
    vuint32_t VS30:1;                  /* Voltage support 3.0 V */
    vuint32_t VS18:1;                  /* Voltage support 1.8 V */
    vuint32_t _unused_27:5;            /* Reserved */
  } B;
} USDHC_HOST_CTRL_CAP_tag;

typedef union USDHC_WTMK_LVL_union_tag { /* Watermark Level */
  vuint32_t R;
  struct {
    vuint32_t RD_WML:8;                /* Read watermark level */
    vuint32_t _unused_8:5;             /* Reserved */
    vuint32_t _unused_13:3;            /* Reserved */
    vuint32_t WR_WML:8;                /* Write watermark level */
    vuint32_t _unused_24:5;            /* Reserved */
    vuint32_t _unused_29:3;            /* Reserved */
  } B;
} USDHC_WTMK_LVL_tag;

typedef union USDHC_MIX_CTRL_union_tag { /* Mixer Control */
  vuint32_t R;
  struct {
    vuint32_t DMAEN:1;                 /* DMA enable */
    vuint32_t BCEN:1;                  /* Block count enable */
    vuint32_t AC12EN:1;                /* Auto CMD12 enable */
    vuint32_t DDR_EN:1;                /* Dual data rate mode selection */
    vuint32_t DTDSEL:1;                /* Data transfer direction select */
    vuint32_t MSBSEL:1;                /* Multi / Single block select */
    vuint32_t NIBBLE_POS:1;            /* Nibble position indication */
    vuint32_t AC23EN:1;                /* Auto CMD23 enable */
    vuint32_t _unused_8:14;            /* Reserved */
    vuint32_t EXE_TUNE:1;              /* Execute tuning: (Only used for SD3.0, SDR104 mode and EMMC HS200 mode) */
    vuint32_t SMP_CLK_SEL:1;           /* Clock selection */
    vuint32_t AUTO_TUNE_EN:1;          /* Auto tuning enable (Only used for SD3.0, SDR104 mode and and EMMC HS200 mode) */
    vuint32_t FBCLK_SEL:1;             /* Feedback clock source selection (Only used for SD3.0, SDR104 mode and EMMC HS200 mode) */
    vuint32_t HS400_MODE:1;            /* Enable HS400 mode */
    vuint32_t EN_HS400_MODE:1;         /* Enable enhance HS400 mode */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} USDHC_MIX_CTRL_tag;

typedef union USDHC_FORCE_EVENT_union_tag { /* Force Event */
  vuint32_t R;
  struct {
    vuint32_t FEVTAC12NE:1;            /* Force event auto command 12 not executed */
    vuint32_t FEVTAC12TOE:1;           /* Force event auto command 12 time out error */
    vuint32_t FEVTAC12CE:1;            /* Force event auto command 12 CRC error */
    vuint32_t FEVTAC12EBE:1;           /* Force event Auto Command 12 end bit error */
    vuint32_t FEVTAC12IE:1;            /* Force event Auto Command 12 index error */
    vuint32_t _unused_5:2;             /* Reserved */
    vuint32_t FEVTCNIBAC12E:1;         /* Force event command not executed by Auto Command 12 error */
    vuint32_t _unused_8:8;             /* Reserved */
    vuint32_t FEVTCTOE:1;              /* Force event command time out error */
    vuint32_t FEVTCCE:1;               /* Force event command CRC error */
    vuint32_t FEVTCEBE:1;              /* Force event command end bit error */
    vuint32_t FEVTCIE:1;               /* Force event command index error */
    vuint32_t FEVTDTOE:1;              /* Force event data time out error */
    vuint32_t FEVTDCE:1;               /* Force event data CRC error */
    vuint32_t FEVTDEBE:1;              /* Force event data end bit error */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t FEVTAC12E:1;             /* Force event Auto Command 12 error */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t FEVTTNE:1;               /* Force tuning error */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t FEVTDMAE:1;              /* Force event DMA error */
    vuint32_t _unused_29:2;            /* Reserved */
    vuint32_t FEVTCINT:1;              /* Force event card interrupt */
  } B;
} USDHC_FORCE_EVENT_tag;

typedef union USDHC_ADMA_ERR_STATUS_union_tag { /* ADMA Error Status */
  vuint32_t R;
  struct {
    vuint32_t ADMAES:2;                /* ADMA error state (when ADMA error is occurred) */
    vuint32_t ADMALME:1;               /* ADMA length mismatch error */
    vuint32_t ADMADCE:1;               /* ADMA descriptor error */
    vuint32_t _unused_4:28;            /* Reserved */
  } B;
} USDHC_ADMA_ERR_STATUS_tag;

typedef union USDHC_ADMA_SYS_ADDR_union_tag { /* ADMA System Address */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t ADS_ADDR:30;             /* ADMA system address */
  } B;
} USDHC_ADMA_SYS_ADDR_tag;

typedef union USDHC_DLL_CTRL_union_tag { /* DLL (Delay Line) Control */
  vuint32_t R;
  struct {
    vuint32_t DLL_CTRL_ENABLE:1;       /* DLL and delay chain */
    vuint32_t DLL_CTRL_RESET:1;        /* DLL reset */
    vuint32_t DLL_CTRL_SLV_FORCE_UPD:1; /* DLL slave delay line */
    vuint32_t DLL_CTRL_SLV_DLY_TARGET0:4; /* DLL slave delay target0 */
    vuint32_t DLL_CTRL_GATE_UPDATE:1;  /* DLL gate update */
    vuint32_t DLL_CTRL_SLV_OVERRIDE:1; /* DLL slave override */
    vuint32_t DLL_CTRL_SLV_OVERRIDE_VAL:7; /* DLL slave override val */
    vuint32_t DLL_CTRL_SLV_DLY_TARGET1:3; /* DLL slave delay target1 */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t DLL_CTRL_SLV_UPDATE_INT:8; /* Slave delay line update interval */
    vuint32_t DLL_CTRL_REF_UPDATE_INT:4; /* DLL control loop update interval */
  } B;
} USDHC_DLL_CTRL_tag;

typedef union USDHC_DLL_STATUS_union_tag { /* DLL Status */
  vuint32_t R;
  struct {
    vuint32_t DLL_STS_SLV_LOCK:1;      /* Slave delay-line lock status */
    vuint32_t DLL_STS_REF_LOCK:1;      /* Reference DLL lock status */
    vuint32_t DLL_STS_SLV_SEL:7;       /* Slave delay line select status */
    vuint32_t DLL_STS_REF_SEL:7;       /* Reference delay line select taps */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} USDHC_DLL_STATUS_tag;

typedef union USDHC_CLK_TUNE_CTRL_STATUS_union_tag { /* CLK Tuning Control and Status */
  vuint32_t R;
  struct {
    vuint32_t DLY_CELL_SET_POST:4;     /* Delay cells on the feedback clock between CLK_OUT and CLK_POST */
    vuint32_t DLY_CELL_SET_OUT:4;      /* Delay cells on the feedback clock between CLK_PRE and CLK_OUT */
    vuint32_t DLY_CELL_SET_PRE:7;      /* delay cells on the feedback clock between the feedback clock and CLK_PRE */
    vuint32_t NXT_ERR:1;               /* NXT error */
    vuint32_t TAP_SEL_POST:4;          /* Delay cells added on the feedback clock between CLK_OUT and CLK_POST */
    vuint32_t TAP_SEL_OUT:4;           /* Delay cells added on the feedback clock between CLK_PRE and CLK_OUT */
    vuint32_t TAP_SEL_PRE:7;           /* TAP_SEL_PRE */
    vuint32_t PRE_ERR:1;               /* PRE error */
  } B;
} USDHC_CLK_TUNE_CTRL_STATUS_tag;

typedef union USDHC_STROBE_DLL_CTRL_union_tag { /* Strobe DLL control */
  vuint32_t R;
  struct {
    vuint32_t STROBE_DLL_CTRL_ENABLE:1; /* Strobe DLL control enable */
    vuint32_t STROBE_DLL_CTRL_RESET:1; /* Strobe DLL control reset */
    vuint32_t STROBE_DLL_CTRL_SLV_FORCE_UPD:1; /* Strobe DLL control slave force updated */
    vuint32_t STROBE_DLL_CTRL_SLV_DLY_TARGET:3; /* Strobe DLL Control Slave Delay Target */
    vuint32_t STROBE_DLL_CTRL_GATE_UPDATE_0:1; /* Strobe DLL control gate update */
    vuint32_t STROBE_DLL_CTRL_GATE_UPDATE_1:1; /* Strobe DLL control gate update */
    vuint32_t STROBE_DLL_CTRL_SLV_OVERRIDE:1; /* Strobe DLL control slave override */
    vuint32_t STROBE_DLL_CTRL_SLV_OVERRIDE_VAL:7; /* Strobe DLL control slave Override value */
    vuint32_t _unused_16:4;            /* This field is reserved. */
    vuint32_t STROBE_DLL_CTRL_SLV_UPDATE_INT:8; /* Strobe DLL control slave update interval */
    vuint32_t STROBE_DLL_CTRL_REF_UPDATE_INT:4; /* Strobe DLL control reference update interval */
  } B;
} USDHC_STROBE_DLL_CTRL_tag;

typedef union USDHC_STROBE_DLL_STATUS_union_tag { /* Strobe DLL status */
  vuint32_t R;
  struct {
    vuint32_t STROBE_DLL_STS_SLV_LOCK:1; /* Strobe DLL status slave lock */
    vuint32_t STROBE_DLL_STS_REF_LOCK:1; /* Strobe DLL status reference lock */
    vuint32_t STROBE_DLL_STS_SLV_SEL:7; /* Strobe DLL status slave select */
    vuint32_t STROBE_DLL_STS_REF_SEL:7; /* Strobe DLL status reference select */
    vuint32_t _unused_16:16;           /* This field is reserved. */
  } B;
} USDHC_STROBE_DLL_STATUS_tag;

typedef union USDHC_VEND_SPEC_union_tag { /* Vendor Specific Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t VSELECT:1;               /* Voltage selection */
    vuint32_t CONFLICT_CHK_EN:1;       /* Conflict check enable */
    vuint32_t AC12_WR_CHKBUSY_EN:1;    /* Check busy enable */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t FRC_SDCLK_ON:1;          /* Force CLK */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t _unused_11:4;            /* Reserved */
    vuint32_t CRC_CHK_DIS:1;           /* CRC Check Disable */
    vuint32_t _unused_16:8;            /* Reserved */
    vuint32_t _unused_24:4;            /* Reserved */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t CMD_BYTE_EN:1;           /* Byte access */
  } B;
} USDHC_VEND_SPEC_tag;

typedef union USDHC_MMC_BOOT_union_tag { /* MMC Boot */
  vuint32_t R;
  struct {
    vuint32_t DTOCV_ACK:4;             /* DTOCV_ACK */
    vuint32_t BOOT_ACK:1;              /* BOOT ACK */
    vuint32_t BOOT_MODE:1;             /* Boot mode */
    vuint32_t BOOT_EN:1;               /* Boot enable */
    vuint32_t AUTO_SABG_EN:1;          /* Auto stop at block gap */
    vuint32_t DISABLE_TIME_OUT:1;      /* Time out */
    vuint32_t _unused_9:7;             /* Reserved */
    vuint32_t BOOT_BLK_CNT:16;         /* Stop At Block Gap value of automatic mode */
  } B;
} USDHC_MMC_BOOT_tag;

typedef union USDHC_VEND_SPEC2_union_tag { /* Vendor Specific 2 Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;             /* Reserved */
    vuint32_t CARD_INT_D3_TEST:1;      /* Card interrupt detection test */
    vuint32_t TUNING_8BIT_EN:1;        /* Tuning 8bit enable */
    vuint32_t TUNING_1BIT_EN:1;        /* Tuning 1bit enable */
    vuint32_t TUNING_CMD_EN:1;         /* Tuning command enable */
    vuint32_t _unused_7:2;             /* Reserved */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t HS400_WR_CLK_STOP_EN:1;  /* HS400 write clock stop enable */
    vuint32_t HS400_RD_CLK_STOP_EN:1;  /* HS400 read clock stop enable */
    vuint32_t ACMD23_ARGU2_EN:1;       /* Argument2 register enable for ACMD23 */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t EN_32K_CLK:1;            /* Enable 32khz clock for card detection */
    vuint32_t FBCLK_TAP_SEL:16;        /* Enable extra delay on internal feedback clock */
  } B;
} USDHC_VEND_SPEC2_tag;

typedef union USDHC_TUNING_CTRL_union_tag { /* Tuning Control */
  vuint32_t R;
  struct {
    vuint32_t TUNING_START_TAP:8;      /* Tuning start */
    vuint32_t TUNING_COUNTER:8;        /* Tuning counter */
    vuint32_t TUNING_STEP:3;           /* TUNING_STEP */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t TUNING_WINDOW:3;         /* Data window */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t STD_TUNING_EN:1;         /* Standard tuning circuit and procedure enable */
    vuint32_t _unused_25:7;            /* Reserved */
  } B;
} USDHC_TUNING_CTRL_tag;

typedef union USDHC_CQE_union_tag {    /* Command Queue */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:32;
  } B;
} USDHC_CQE_tag;

struct USDHC_tag {
  USDHC_DS_ADDR_tag DS_ADDR;           /* DMA System Address */
  USDHC_BLK_ATT_tag BLK_ATT;           /* Block Attributes */
  USDHC_CMD_ARG_tag CMD_ARG;           /* Command Argument */
  USDHC_CMD_XFR_TYP_tag CMD_XFR_TYP;   /* Command Transfer Type */
  USDHC_CMD_RSP0_tag CMD_RSP0;         /* Command Response0 */
  USDHC_CMD_RSP1_tag CMD_RSP1;         /* Command Response1 */
  USDHC_CMD_RSP2_tag CMD_RSP2;         /* Command Response2 */
  USDHC_CMD_RSP3_tag CMD_RSP3;         /* Command Response3 */
  USDHC_DATA_BUFF_ACC_PORT_tag DATA_BUFF_ACC_PORT; /* Data Buffer Access Port */
  USDHC_PRES_STATE_tag PRES_STATE;     /* Present State */
  USDHC_PROT_CTRL_tag PROT_CTRL;       /* Protocol Control */
  USDHC_SYS_CTRL_tag SYS_CTRL;         /* System Control */
  USDHC_INT_STATUS_tag INT_STATUS;     /* Interrupt Status */
  USDHC_INT_STATUS_EN_tag INT_STATUS_EN; /* Interrupt Status Enable */
  USDHC_INT_SIGNAL_EN_tag INT_SIGNAL_EN; /* Interrupt Signal Enable */
  USDHC_AUTOCMD12_ERR_STATUS_tag AUTOCMD12_ERR_STATUS; /* Auto CMD12 Error Status */
  USDHC_HOST_CTRL_CAP_tag HOST_CTRL_CAP; /* Host Controller Capabilities */
  USDHC_WTMK_LVL_tag WTMK_LVL;         /* Watermark Level */
  USDHC_MIX_CTRL_tag MIX_CTRL;         /* Mixer Control */
  uint8_t USDHC_reserved0[4];
  USDHC_FORCE_EVENT_tag FORCE_EVENT;   /* Force Event */
  USDHC_ADMA_ERR_STATUS_tag ADMA_ERR_STATUS; /* ADMA Error Status */
  USDHC_ADMA_SYS_ADDR_tag ADMA_SYS_ADDR; /* ADMA System Address */
  uint8_t USDHC_reserved1[4];
  USDHC_DLL_CTRL_tag DLL_CTRL;         /* DLL (Delay Line) Control */
  USDHC_DLL_STATUS_tag DLL_STATUS;     /* DLL Status */
  USDHC_CLK_TUNE_CTRL_STATUS_tag CLK_TUNE_CTRL_STATUS; /* CLK Tuning Control and Status */
  uint8_t USDHC_reserved2[4];
  USDHC_STROBE_DLL_CTRL_tag STROBE_DLL_CTRL; /* Strobe DLL control */
  USDHC_STROBE_DLL_STATUS_tag STROBE_DLL_STATUS; /* Strobe DLL status */
  uint8_t USDHC_reserved3[72];
  USDHC_VEND_SPEC_tag VEND_SPEC;       /* Vendor Specific Register */
  USDHC_MMC_BOOT_tag MMC_BOOT;         /* MMC Boot */
  USDHC_VEND_SPEC2_tag VEND_SPEC2;     /* Vendor Specific 2 Register */
  USDHC_TUNING_CTRL_tag TUNING_CTRL;   /* Tuning Control */
  uint8_t USDHC_reserved4[48];
  USDHC_CQE_tag CQE;                   /* Command Queue */
};


/* ============================================================================
   =============================== Module: WKPU ===============================
   ============================================================================ */

typedef union WKPU_NSR_union_tag {     /* NMI Status Flag Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t _unused_8:6;             /* Reserved */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t _unused_16:6;            /* Reserved */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:6;            /* Reserved */
    vuint32_t NOVF0:1;                 /* NMI Overrun Status Flag 0 */
    vuint32_t NIF0:1;                  /* NMI Status Flag 0 */
  } B;
} WKPU_NSR_tag;

typedef union WKPU_NCR_union_tag {     /* NMI Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;             /* Reserved */
    vuint32_t _unused_8:8;             /* Reserved */
    vuint32_t _unused_16:8;            /* Reserved */
    vuint32_t NFE0:1;                  /* NMI Filter Enable 0 */
    vuint32_t NFEE0:1;                 /* NMI Falling-edge Events Enable 0 */
    vuint32_t NREE0:1;                 /* NMI Rising-Edge Events Enable 0 */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t NWRE0:1;                 /* NMI Wakeup Request Enable 0 */
    vuint32_t NDSS0:2;                 /* NMI Destination Source Select 0 */
    vuint32_t NLOCK0:1;                /* NMI Configuration Lock Register 0 */
  } B;
} WKPU_NCR_tag;

typedef union WKPU_WBMSR_union_tag {   /* Wakeup Boot Mode Select Register */
  vuint32_t R;
  struct {
    vuint32_t WBMS_32:32;
  } B;
} WKPU_WBMSR_tag;

typedef union WKPU_WISR_union_tag {    /* Wakeup/Interrupt Status Flag Register */
  vuint32_t R;
  struct {
    vuint32_t EIF:32;                  /* External Wakeup/Interrupt Status Flag x */
  } B;
} WKPU_WISR_tag;

typedef union WKPU_IRER_union_tag {    /* Interrupt Request Enable Register */
  vuint32_t R;
  struct {
    vuint32_t EIRE:32;                 /* External Interrupt Request Enable x */
  } B;
} WKPU_IRER_tag;

typedef union WKPU_WRER_union_tag {    /* Wakeup Request Enable Register */
  vuint32_t R;
  struct {
    vuint32_t WRE:32;                  /* External Wakeup Request Enable x */
  } B;
} WKPU_WRER_tag;

typedef union WKPU_WIREER_union_tag {  /* Wakeup/Interrupt Rising-Edge Event Enable Register */
  vuint32_t R;
  struct {
    vuint32_t IREE:32;                 /* External Interrupt Rising-edge Events Enable x */
  } B;
} WKPU_WIREER_tag;

typedef union WKPU_WIFEER_union_tag {  /* Wakeup/Interrupt Falling-Edge Event Enable Register */
  vuint32_t R;
  struct {
    vuint32_t IFEEX:32;                /* External Interrupt Falling-edge Events Enable x */
  } B;
} WKPU_WIFEER_tag;

typedef union WKPU_WIFER_union_tag {   /* Wakeup/Interrupt Filter Enable Register */
  vuint32_t R;
  struct {
    vuint32_t IFE:31;                  /* External Interrupt Filter Enable x */
    vuint32_t _unused_31:1;
  } B;
} WKPU_WIFER_tag;

typedef union WKPU_WIPUER_WIPDER_union_tag { /* Wakeup/Interrupt Pull Enable Register */
  vuint32_t R;
  struct {
    vuint32_t IPUE:31;
    vuint32_t _unused_31:1;
  } B;
} WKPU_WIPUER_WIPDER_tag;

struct WKPU_tag {
  WKPU_NSR_tag NSR;                    /* NMI Status Flag Register */
  uint8_t WKPU_reserved0[4];
  WKPU_NCR_tag NCR;                    /* NMI Configuration Register */
  uint8_t WKPU_reserved1[4];
  WKPU_WBMSR_tag WBMSR;                /* Wakeup Boot Mode Select Register */
  WKPU_WISR_tag WISR;                  /* Wakeup/Interrupt Status Flag Register */
  WKPU_IRER_tag IRER;                  /* Interrupt Request Enable Register */
  WKPU_WRER_tag WRER;                  /* Wakeup Request Enable Register */
  uint8_t WKPU_reserved2[8];
  WKPU_WIREER_tag WIREER;              /* Wakeup/Interrupt Rising-Edge Event Enable Register */
  WKPU_WIFEER_tag WIFEER;              /* Wakeup/Interrupt Falling-Edge Event Enable Register */
  WKPU_WIFER_tag WIFER;                /* Wakeup/Interrupt Filter Enable Register */
  WKPU_WIPUER_WIPDER_tag WIPUER_WIPDER; /* Wakeup/Interrupt Pull Enable Register */
};


/* ============================================================================
   =============================== Module: XRDC ===============================
   ============================================================================ */

typedef union XRDC_CR_union_tag {      /* Control */
  vuint32_t R;
  struct {
    vuint32_t GVLD:1;                  /* Global Valid (XRDC global enable/disable). */
    vuint32_t HRL:4;                   /* Hardware Revision Level */
    vuint32_t _unused_5:2;
    vuint32_t MRF:1;                   /* Memory Region Format */
    vuint32_t VAW:1;                   /* Virtualization aware */
    vuint32_t _unused_9:21;
    vuint32_t LK1:1;                   /* One-bit Lock */
    vuint32_t _unused_31:1;
  } B;
} XRDC_CR_tag;

typedef union XRDC_HWCFG0_union_tag {  /* Hardware Configuration 0 */
  vuint32_t R;
  struct {
    vuint32_t NDID:8;                  /* Number of domains */
    vuint32_t NMSTR:8;                 /* Number of bus masters */
    vuint32_t NMRC:8;                  /* Number of MRCs */
    vuint32_t NPAC:4;                  /* Number of PACs */
    vuint32_t MID:4;                   /* Module ID */
  } B;
} XRDC_HWCFG0_tag;

typedef union XRDC_HWCFG1_union_tag {  /* Hardware Configuration 1 */
  vuint32_t R;
  struct {
    vuint32_t DID:4;                   /* Domain identifier number */
    vuint32_t _unused_4:28;
  } B;
} XRDC_HWCFG1_tag;

typedef union XRDC_HWCFG2_union_tag {  /* Hardware Configuration 2 */
  vuint32_t R;
  struct {
    vuint32_t PIDP0:1;                 /* Process identifier */
    vuint32_t PIDP1:1;                 /* Process identifier */
    vuint32_t PIDP2:1;                 /* Process identifier */
    vuint32_t PIDP3:1;                 /* Process identifier */
    vuint32_t PIDP4:1;                 /* Process identifier */
    vuint32_t PIDP5:1;                 /* Process identifier */
    vuint32_t PIDP6:1;                 /* Process identifier */
    vuint32_t PIDP7:1;                 /* Process identifier */
    vuint32_t PIDP8:1;                 /* Process identifier */
    vuint32_t PIDP9:1;                 /* Process identifier */
    vuint32_t PIDP10:1;                /* Process identifier */
    vuint32_t PIDP11:1;                /* Process identifier */
    vuint32_t PIDP12:1;                /* Process identifier */
    vuint32_t PIDP13:1;                /* Process identifier */
    vuint32_t PIDP14:1;                /* Process identifier */
    vuint32_t PIDP15:1;                /* Process identifier */
    vuint32_t PIDP16:1;                /* Process identifier */
    vuint32_t PIDP17:1;                /* Process identifier */
    vuint32_t PIDP18:1;                /* Process identifier */
    vuint32_t PIDP19:1;                /* Process identifier */
    vuint32_t PIDP20:1;                /* Process identifier */
    vuint32_t PIDP21:1;                /* Process identifier */
    vuint32_t PIDP22:1;                /* Process identifier */
    vuint32_t PIDP23:1;                /* Process identifier */
    vuint32_t PIDP24:1;                /* Process identifier */
    vuint32_t PIDP25:1;                /* Process identifier */
    vuint32_t PIDP26:1;                /* Process identifier */
    vuint32_t PIDP27:1;                /* Process identifier */
    vuint32_t PIDP28:1;                /* Process identifier */
    vuint32_t PIDP29:1;                /* Process identifier */
    vuint32_t PIDP30:1;                /* Process identifier */
    vuint32_t PIDP31:1;                /* Process identifier */
  } B;
} XRDC_HWCFG2_tag;

typedef union XRDC_MDACFG_union_tag {  /* Master Domain Assignment Configuration */
  vuint8_t R;
  struct {
    vuint8_t NMDAR:4;                  /* Number of master domain assignment registers for bus master m */
    vuint8_t _unused_4:3;
    vuint8_t NCM:1;                    /* Non-CPU Master */
  } B;
} XRDC_MDACFG_tag;

typedef union XRDC_MRCFG_union_tag {   /* Memory Region Configuration */
  vuint8_t R;
  struct {
    vuint8_t NMRGD:5;                  /* Number of memory region descriptors for memory region controller n */
    vuint8_t _unused_5:3;
  } B;
} XRDC_MRCFG_tag;

typedef union XRDC_DERRLOC_union_tag { /* Domain Error Location */
  vuint32_t R;
  struct {
    vuint32_t MRCINST:16;              /* MRC instance */
    vuint32_t PACINST:4;               /* PAC instance */
    vuint32_t _unused_20:12;
  } B;
} XRDC_DERRLOC_tag;

typedef union XRDC_DERRW0_DERR_W0_union_tag { /* Domain Error Word0 */
  vuint32_t R;
  struct {
    vuint32_t EADDR:32;                /* Error address */
  } B;
} XRDC_DERRW0_DERR_W0_tag;

typedef union XRDC_DERRW0_DERR_W1_union_tag { /* Domain Error Word1 */
  vuint32_t R;
  struct {
    vuint32_t EDID:4;                  /* Error domain identifier */
    vuint32_t _unused_4:4;
    vuint32_t EATR:3;                  /* Error attributes */
    vuint32_t ERW:1;                   /* Error read/write */
    vuint32_t _unused_12:4;
    vuint32_t EA40FMT:1;               /* Error Address 40 Format */
    vuint32_t _unused_17:7;
    vuint32_t EPORT:3;                 /* Error port */
    vuint32_t _unused_27:3;
    vuint32_t EST:2;                   /* Error state */
  } B;
} XRDC_DERRW0_DERR_W1_tag;

typedef union XRDC_DERRW0_DERR_W2_union_tag { /* Domain Error Word2 */
  vuint32_t R;
  struct {
    vuint32_t EADDR39_32:8;            /* EADDR[39:32] */
    vuint32_t _unused_8:24;
  } B;
} XRDC_DERRW0_DERR_W2_tag;

typedef union XRDC_DERRW0_DERR_W3_union_tag { /* Domain Error Word3 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:30;
    vuint32_t RECR:2;                  /* Rearm Error Capture registers */
  } B;
} XRDC_DERRW0_DERR_W3_tag;

typedef struct XRDC_DERRW0_struct_tag {
  XRDC_DERRW0_DERR_W0_tag DERR_W0;     /* Domain Error Word0 */
  XRDC_DERRW0_DERR_W1_tag DERR_W1;     /* Domain Error Word1 */
  XRDC_DERRW0_DERR_W2_tag DERR_W2;     /* Domain Error Word2 */
  XRDC_DERRW0_DERR_W3_tag DERR_W3;     /* Domain Error Word3 */
} XRDC_DERRW0_tag;

typedef union XRDC_MDA_W0_0_DFMT1_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t PA:2;                    /* Privileged attribute */
    vuint32_t SA:2;                    /* Secure attribute */
    vuint32_t DIDB:1;                  /* DID Bypass */
    vuint32_t _unused_9:20;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_MDA_W0_0_DFMT1_tag;

typedef union XRDC_MDA_W0_1_DFMT1_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t PA:2;                    /* Privileged attribute */
    vuint32_t SA:2;                    /* Secure attribute */
    vuint32_t DIDB:1;                  /* DID Bypass */
    vuint32_t _unused_9:20;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_MDA_W0_1_DFMT1_tag;

typedef union XRDC_MDA_W0_2_DFMT1_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t PA:2;                    /* Privileged attribute */
    vuint32_t SA:2;                    /* Secure attribute */
    vuint32_t DIDB:1;                  /* DID Bypass */
    vuint32_t _unused_9:20;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_MDA_W0_2_DFMT1_tag;

typedef union XRDC_MDA_W0_3_DFMT1_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t PA:2;                    /* Privileged attribute */
    vuint32_t SA:2;                    /* Secure attribute */
    vuint32_t DIDB:1;                  /* DID Bypass */
    vuint32_t _unused_9:20;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_MDA_W0_3_DFMT1_tag;

typedef union XRDC_MDA_W0_4_DFMT1_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t PA:2;                    /* Privileged attribute */
    vuint32_t SA:2;                    /* Secure attribute */
    vuint32_t DIDB:1;                  /* DID Bypass */
    vuint32_t _unused_9:20;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_MDA_W0_4_DFMT1_tag;

typedef union XRDC_MDA_W0_5_DFMT1_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t PA:2;                    /* Privileged attribute */
    vuint32_t SA:2;                    /* Secure attribute */
    vuint32_t DIDB:1;                  /* DID Bypass */
    vuint32_t _unused_9:20;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_MDA_W0_5_DFMT1_tag;

typedef union XRDC_MDA_W0_6_DFMT1_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t PA:2;                    /* Privileged attribute */
    vuint32_t SA:2;                    /* Secure attribute */
    vuint32_t DIDB:1;                  /* DID Bypass */
    vuint32_t _unused_9:20;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_MDA_W0_6_DFMT1_tag;

typedef union XRDC_MDA_W0_7_DFMT1_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t PA:2;                    /* Privileged attribute */
    vuint32_t SA:2;                    /* Secure attribute */
    vuint32_t DIDB:1;                  /* DID Bypass */
    vuint32_t _unused_9:20;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_MDA_W0_7_DFMT1_tag;

typedef union XRDC_PDACN_PDAC_W0_union_tag { /* Peripheral Domain Access Control */
  vuint32_t R;
  struct {
    vuint32_t D0ACP:3;                 /* Domain n access control policy */
    vuint32_t D1ACP:3;                 /* Domain n access control policy */
    vuint32_t D2ACP:3;                 /* Domain n access control policy */
    vuint32_t D3ACP:3;                 /* Domain n access control policy */
    vuint32_t D4ACP:3;                 /* Domain n access control policy */
    vuint32_t D5ACP:3;                 /* Domain n access control policy */
    vuint32_t D6ACP:3;                 /* Domain n access control policy */
    vuint32_t D7ACP:3;                 /* Domain n access control policy */
    vuint32_t SNUM:4;                  /* Semaphore number */
    vuint32_t _unused_28:2;
    vuint32_t SE:1;                    /* Semaphore enable */
    vuint32_t _unused_31:1;
  } B;
} XRDC_PDACN_PDAC_W0_tag;

typedef union XRDC_PDACN_PDAC_W1_union_tag { /* Peripheral Domain Access Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;
    vuint32_t _unused_24:5;
    vuint32_t LK2:2;                   /* Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_PDACN_PDAC_W1_tag;

typedef struct XRDC_PDACN_struct_tag {
  XRDC_PDACN_PDAC_W0_tag PDAC_W0;      /* Peripheral Domain Access Control */
  XRDC_PDACN_PDAC_W1_tag PDAC_W1;      /* Peripheral Domain Access Control */
} XRDC_PDACN_tag;

typedef union XRDC_MRCN_MRGDN_XRDC_MRGD_W0_union_tag { /* Memory Region Descriptor */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;
    vuint32_t SRTADDR:31;              /* Start Address */
  } B;
} XRDC_MRCN_MRGDN_XRDC_MRGD_W0_tag;

typedef union XRDC_MRCN_MRGDN_XRDC_MRGD_W1_union_tag { /* Memory Region Descriptor */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;
    vuint32_t ENDADDR:31;              /* End Address */
  } B;
} XRDC_MRCN_MRGDN_XRDC_MRGD_W1_tag;

typedef union XRDC_MRCN_MRGDN_XRDC_MRGD_W2_union_tag { /* Memory Region Descriptor */
  vuint32_t R;
  struct {
    vuint32_t D0ACP:3;                 /* Domain n access control policy */
    vuint32_t D1ACP:3;                 /* Domain n access control policy */
    vuint32_t D2ACP:3;                 /* Domain n access control policy */
    vuint32_t D3ACP:3;                 /* Domain n access control policy */
    vuint32_t D4ACP:3;                 /* Domain n access control policy */
    vuint32_t D5ACP:3;                 /* Domain n access control policy */
    vuint32_t D6ACP:3;                 /* Domain n access control policy */
    vuint32_t D7ACP:3;                 /* Domain n access control policy */
    vuint32_t SNUM:4;                  /* Semaphore number */
    vuint32_t _unused_28:2;
    vuint32_t SE:1;                    /* Semaphore enable */
    vuint32_t _unused_31:1;
  } B;
} XRDC_MRCN_MRGDN_XRDC_MRGD_W2_tag;

typedef union XRDC_MRCN_MRGDN_XRDC_MRGD_W3_union_tag { /* Memory Region Descriptor */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;
    vuint32_t _unused_24:5;
    vuint32_t LK2:2;                   /* Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_MRCN_MRGDN_XRDC_MRGD_W3_tag;

typedef struct XRDC_MRCN_MRGDN_struct_tag {
  XRDC_MRCN_MRGDN_XRDC_MRGD_W0_tag XRDC_MRGD_W0; /* Memory Region Descriptor */
  XRDC_MRCN_MRGDN_XRDC_MRGD_W1_tag XRDC_MRGD_W1; /* Memory Region Descriptor */
  XRDC_MRCN_MRGDN_XRDC_MRGD_W2_tag XRDC_MRGD_W2; /* Memory Region Descriptor */
  XRDC_MRCN_MRGDN_XRDC_MRGD_W3_tag XRDC_MRGD_W3; /* Memory Region Descriptor */
  uint8_t MRGDN_reserved0[16];
} XRDC_MRCN_MRGDN_tag;

typedef struct XRDC_MRCN_struct_tag {
  XRDC_MRCN_MRGDN_tag MRGDN[4];
  uint8_t MRCN_reserved0[384];
} XRDC_MRCN_tag;

struct XRDC_tag {
  XRDC_CR_tag CR;                      /* Control */
  uint8_t XRDC_reserved0[236];
  XRDC_HWCFG0_tag HWCFG0;              /* Hardware Configuration 0 */
  XRDC_HWCFG1_tag HWCFG1;              /* Hardware Configuration 1 */
  XRDC_HWCFG2_tag HWCFG2;              /* Hardware Configuration 2 */
  uint8_t XRDC_reserved1[4];
  XRDC_MDACFG_tag MDACFG[8];           /* Master Domain Assignment Configuration */
  uint8_t XRDC_reserved2[56];
  XRDC_MRCFG_tag MRCFG[6];             /* Memory Region Configuration */
  uint8_t XRDC_reserved3[186];
  XRDC_DERRLOC_tag DERRLOC[8];         /* Domain Error Location */
  uint8_t XRDC_reserved4[480];
  XRDC_DERRW0_tag DERRW0[17];          /* Valid array indices: 0-5, 16 */
  uint8_t XRDC_reserved5[752];
  XRDC_MDA_W0_0_DFMT1_tag MDA_W0_0_DFMT1; /* Master Domain Assignment */
  uint8_t XRDC_reserved6[28];
  XRDC_MDA_W0_1_DFMT1_tag MDA_W0_1_DFMT1; /* Master Domain Assignment */
  uint8_t XRDC_reserved7[28];
  XRDC_MDA_W0_2_DFMT1_tag MDA_W0_2_DFMT1; /* Master Domain Assignment */
  uint8_t XRDC_reserved8[28];
  XRDC_MDA_W0_3_DFMT1_tag MDA_W0_3_DFMT1; /* Master Domain Assignment */
  uint8_t XRDC_reserved9[28];
  XRDC_MDA_W0_4_DFMT1_tag MDA_W0_4_DFMT1; /* Master Domain Assignment */
  uint8_t XRDC_reserved10[28];
  XRDC_MDA_W0_5_DFMT1_tag MDA_W0_5_DFMT1; /* Master Domain Assignment */
  uint8_t XRDC_reserved11[28];
  XRDC_MDA_W0_6_DFMT1_tag MDA_W0_6_DFMT1; /* Master Domain Assignment */
  uint8_t XRDC_reserved12[28];
  XRDC_MDA_W0_7_DFMT1_tag MDA_W0_7_DFMT1; /* Master Domain Assignment */
  uint8_t XRDC_reserved13[1820];
  XRDC_PDACN_tag PDACN[1][16];
  uint8_t XRDC_reserved14[3968];
  XRDC_MRCN_tag MRCN[6];
};


/* ============================================================================
   =============================== Module: XRDC_0 =============================
   ============================================================================ */

typedef union XRDC_0_CR_union_tag {    /* Control */
  vuint32_t R;
  struct {
    vuint32_t GVLD:1;                  /* Global Valid (XRDC global enable/disable). */
    vuint32_t HRL:4;                   /* Hardware Revision Level */
    vuint32_t _unused_5:2;
    vuint32_t MRF:1;                   /* Memory Region Format */
    vuint32_t VAW:1;                   /* Virtualization aware */
    vuint32_t _unused_9:21;
    vuint32_t LK1:1;                   /* One-bit Lock */
    vuint32_t _unused_31:1;
  } B;
} XRDC_0_CR_tag;

typedef union XRDC_0_HWCFG0_union_tag { /* Hardware Configuration 0 */
  vuint32_t R;
  struct {
    vuint32_t NDID:8;                  /* Number of domains */
    vuint32_t NMSTR:8;                 /* Number of bus masters */
    vuint32_t NMRC:8;                  /* Number of MRCs */
    vuint32_t NPAC:4;                  /* Number of PACs */
    vuint32_t MID:4;                   /* Module ID */
  } B;
} XRDC_0_HWCFG0_tag;

typedef union XRDC_0_HWCFG1_union_tag { /* Hardware Configuration 1 */
  vuint32_t R;
  struct {
    vuint32_t DID:4;                   /* Domain identifier number */
    vuint32_t _unused_4:28;
  } B;
} XRDC_0_HWCFG1_tag;

typedef union XRDC_0_HWCFG2_union_tag { /* Hardware Configuration 2 */
  vuint32_t R;
  struct {
    vuint32_t PIDP0:1;                 /* Process identifier */
    vuint32_t PIDP1:1;                 /* Process identifier */
    vuint32_t PIDP2:1;                 /* Process identifier */
    vuint32_t PIDP3:1;                 /* Process identifier */
    vuint32_t PIDP4:1;                 /* Process identifier */
    vuint32_t PIDP5:1;                 /* Process identifier */
    vuint32_t PIDP6:1;                 /* Process identifier */
    vuint32_t PIDP7:1;                 /* Process identifier */
    vuint32_t PIDP8:1;                 /* Process identifier */
    vuint32_t PIDP9:1;                 /* Process identifier */
    vuint32_t PIDP10:1;                /* Process identifier */
    vuint32_t PIDP11:1;                /* Process identifier */
    vuint32_t PIDP12:1;                /* Process identifier */
    vuint32_t PIDP13:1;                /* Process identifier */
    vuint32_t PIDP14:1;                /* Process identifier */
    vuint32_t PIDP15:1;                /* Process identifier */
    vuint32_t PIDP16:1;                /* Process identifier */
    vuint32_t PIDP17:1;                /* Process identifier */
    vuint32_t PIDP18:1;                /* Process identifier */
    vuint32_t PIDP19:1;                /* Process identifier */
    vuint32_t PIDP20:1;                /* Process identifier */
    vuint32_t PIDP21:1;                /* Process identifier */
    vuint32_t PIDP22:1;                /* Process identifier */
    vuint32_t PIDP23:1;                /* Process identifier */
    vuint32_t PIDP24:1;                /* Process identifier */
    vuint32_t PIDP25:1;                /* Process identifier */
    vuint32_t PIDP26:1;                /* Process identifier */
    vuint32_t PIDP27:1;                /* Process identifier */
    vuint32_t PIDP28:1;                /* Process identifier */
    vuint32_t PIDP29:1;                /* Process identifier */
    vuint32_t PIDP30:1;                /* Process identifier */
    vuint32_t PIDP31:1;                /* Process identifier */
  } B;
} XRDC_0_HWCFG2_tag;

typedef union XRDC_0_MDACFG_union_tag { /* Master Domain Assignment Configuration */
  vuint8_t R;
  struct {
    vuint8_t NMDAR:4;                  /* Number of master domain assignment registers for bus master m */
    vuint8_t _unused_4:3;
    vuint8_t NCM:1;                    /* Non-CPU Master */
  } B;
} XRDC_0_MDACFG_tag;

typedef union XRDC_0_MRCFG_union_tag { /* Memory Region Configuration */
  vuint8_t R;
  struct {
    vuint8_t NMRGD:5;                  /* Number of memory region descriptors for memory region controller n */
    vuint8_t _unused_5:3;
  } B;
} XRDC_0_MRCFG_tag;

typedef union XRDC_0_DERRLOC_union_tag { /* Domain Error Location */
  vuint32_t R;
  struct {
    vuint32_t MRCINST:16;              /* MRC instance */
    vuint32_t PACINST:4;               /* PAC instance */
    vuint32_t _unused_20:12;
  } B;
} XRDC_0_DERRLOC_tag;

typedef union XRDC_0_DERRW0_DERR_W0_union_tag { /* Domain Error Word0 */
  vuint32_t R;
  struct {
    vuint32_t EADDR:32;                /* Error address */
  } B;
} XRDC_0_DERRW0_DERR_W0_tag;

typedef union XRDC_0_DERRW0_DERR_W1_union_tag { /* Domain Error Word1 */
  vuint32_t R;
  struct {
    vuint32_t EDID:4;                  /* Error domain identifier */
    vuint32_t _unused_4:4;
    vuint32_t EATR:3;                  /* Error attributes */
    vuint32_t ERW:1;                   /* Error read/write */
    vuint32_t _unused_12:4;
    vuint32_t EA40FMT:1;               /* Error Address 40 Format */
    vuint32_t _unused_17:7;
    vuint32_t EPORT:3;                 /* Error port */
    vuint32_t _unused_27:3;
    vuint32_t EST:2;                   /* Error state */
  } B;
} XRDC_0_DERRW0_DERR_W1_tag;

typedef union XRDC_0_DERRW0_DERR_W2_union_tag { /* Domain Error Word2 */
  vuint32_t R;
  struct {
    vuint32_t EADDR39_32:8;            /* EADDR[39:32] */
    vuint32_t _unused_8:24;
  } B;
} XRDC_0_DERRW0_DERR_W2_tag;

typedef union XRDC_0_DERRW0_DERR_W3_union_tag { /* Domain Error Word3 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:30;
    vuint32_t RECR:2;                  /* Rearm Error Capture registers */
  } B;
} XRDC_0_DERRW0_DERR_W3_tag;

typedef struct XRDC_0_DERRW0_struct_tag {
  XRDC_0_DERRW0_DERR_W0_tag DERR_W0;   /* Domain Error Word0 */
  XRDC_0_DERRW0_DERR_W1_tag DERR_W1;   /* Domain Error Word1 */
  XRDC_0_DERRW0_DERR_W2_tag DERR_W2;   /* Domain Error Word2 */
  XRDC_0_DERRW0_DERR_W3_tag DERR_W3;   /* Domain Error Word3 */
} XRDC_0_DERRW0_tag;

typedef union XRDC_0_PID_union_tag {   /* Process Identifier */
  vuint32_t R;
  struct {
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_6:10;
    vuint32_t LMNUM:6;                 /* Locked Master NUMber */
    vuint32_t _unused_22:2;
    vuint32_t ELK22H:1;                /* Enable (LK2 = 2) special handling */
    vuint32_t _unused_25:3;
    vuint32_t TSM:1;                   /* Three-state model */
    vuint32_t LK2:2;                   /* Lock */
    vuint32_t _unused_31:1;
  } B;
} XRDC_0_PID_tag;

typedef union XRDC_0_MDA_W0_0_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W0_0_DFMT0_tag;

typedef union XRDC_0_MDA_W1_0_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W1_0_DFMT0_tag;

typedef union XRDC_0_MDA_W2_0_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W2_0_DFMT0_tag;

typedef union XRDC_0_MDA_W3_0_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W3_0_DFMT0_tag;

typedef union XRDC_0_MDA_W4_0_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W4_0_DFMT0_tag;

typedef union XRDC_0_MDA_W5_0_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W5_0_DFMT0_tag;

typedef union XRDC_0_MDA_W6_0_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W6_0_DFMT0_tag;

typedef union XRDC_0_MDA_W7_0_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W7_0_DFMT0_tag;

typedef union XRDC_0_MDA_W0_1_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W0_1_DFMT0_tag;

typedef union XRDC_0_MDA_W1_1_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W1_1_DFMT0_tag;

typedef union XRDC_0_MDA_W2_1_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W2_1_DFMT0_tag;

typedef union XRDC_0_MDA_W3_1_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W3_1_DFMT0_tag;

typedef union XRDC_0_MDA_W4_1_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W4_1_DFMT0_tag;

typedef union XRDC_0_MDA_W5_1_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W5_1_DFMT0_tag;

typedef union XRDC_0_MDA_W6_1_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W6_1_DFMT0_tag;

typedef union XRDC_0_MDA_W7_1_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W7_1_DFMT0_tag;

typedef union XRDC_0_MDA_W0_2_DFMT1_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t PA:2;                    /* Privileged attribute */
    vuint32_t SA:2;                    /* Secure attribute */
    vuint32_t DIDB:1;                  /* DID Bypass */
    vuint32_t _unused_9:20;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W0_2_DFMT1_tag;

typedef union XRDC_0_MDA_W0_3_DFMT1_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t PA:2;                    /* Privileged attribute */
    vuint32_t SA:2;                    /* Secure attribute */
    vuint32_t DIDB:1;                  /* DID Bypass */
    vuint32_t _unused_9:20;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W0_3_DFMT1_tag;

typedef union XRDC_0_MDA_W0_4_DFMT1_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t PA:2;                    /* Privileged attribute */
    vuint32_t SA:2;                    /* Secure attribute */
    vuint32_t DIDB:1;                  /* DID Bypass */
    vuint32_t _unused_9:20;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W0_4_DFMT1_tag;

typedef union XRDC_0_MDA_W0_5_DFMT1_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t PA:2;                    /* Privileged attribute */
    vuint32_t SA:2;                    /* Secure attribute */
    vuint32_t DIDB:1;                  /* DID Bypass */
    vuint32_t _unused_9:20;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W0_5_DFMT1_tag;

typedef union XRDC_0_MDA_W0_6_DFMT1_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t PA:2;                    /* Privileged attribute */
    vuint32_t SA:2;                    /* Secure attribute */
    vuint32_t DIDB:1;                  /* DID Bypass */
    vuint32_t _unused_9:20;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W0_6_DFMT1_tag;

typedef union XRDC_0_MDA_W0_7_DFMT1_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t PA:2;                    /* Privileged attribute */
    vuint32_t SA:2;                    /* Secure attribute */
    vuint32_t DIDB:1;                  /* DID Bypass */
    vuint32_t _unused_9:20;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W0_7_DFMT1_tag;

typedef union XRDC_0_MDA_W0_8_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W0_8_DFMT0_tag;

typedef union XRDC_0_MDA_W1_8_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W1_8_DFMT0_tag;

typedef union XRDC_0_MDA_W2_8_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W2_8_DFMT0_tag;

typedef union XRDC_0_MDA_W3_8_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W3_8_DFMT0_tag;

typedef union XRDC_0_MDA_W4_8_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W4_8_DFMT0_tag;

typedef union XRDC_0_MDA_W5_8_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W5_8_DFMT0_tag;

typedef union XRDC_0_MDA_W6_8_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W6_8_DFMT0_tag;

typedef union XRDC_0_MDA_W7_8_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W7_8_DFMT0_tag;

typedef union XRDC_0_MDA_W0_9_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W0_9_DFMT0_tag;

typedef union XRDC_0_MDA_W1_9_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W1_9_DFMT0_tag;

typedef union XRDC_0_MDA_W2_9_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W2_9_DFMT0_tag;

typedef union XRDC_0_MDA_W3_9_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W3_9_DFMT0_tag;

typedef union XRDC_0_MDA_W4_9_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W4_9_DFMT0_tag;

typedef union XRDC_0_MDA_W5_9_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W5_9_DFMT0_tag;

typedef union XRDC_0_MDA_W6_9_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W6_9_DFMT0_tag;

typedef union XRDC_0_MDA_W7_9_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W7_9_DFMT0_tag;

typedef union XRDC_0_MDA_W0_10_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W0_10_DFMT0_tag;

typedef union XRDC_0_MDA_W1_10_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W1_10_DFMT0_tag;

typedef union XRDC_0_MDA_W2_10_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W2_10_DFMT0_tag;

typedef union XRDC_0_MDA_W3_10_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W3_10_DFMT0_tag;

typedef union XRDC_0_MDA_W4_10_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W4_10_DFMT0_tag;

typedef union XRDC_0_MDA_W5_10_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W5_10_DFMT0_tag;

typedef union XRDC_0_MDA_W6_10_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W6_10_DFMT0_tag;

typedef union XRDC_0_MDA_W7_10_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W7_10_DFMT0_tag;

typedef union XRDC_0_MDA_W0_11_DFMT1_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t PA:2;                    /* Privileged attribute */
    vuint32_t SA:2;                    /* Secure attribute */
    vuint32_t DIDB:1;                  /* DID Bypass */
    vuint32_t _unused_9:20;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W0_11_DFMT1_tag;

typedef union XRDC_0_MDA_W0_12_DFMT1_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t PA:2;                    /* Privileged attribute */
    vuint32_t SA:2;                    /* Secure attribute */
    vuint32_t DIDB:1;                  /* DID Bypass */
    vuint32_t _unused_9:20;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W0_12_DFMT1_tag;

typedef union XRDC_0_MDA_W0_15_DFMT1_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t PA:2;                    /* Privileged attribute */
    vuint32_t SA:2;                    /* Secure attribute */
    vuint32_t DIDB:1;                  /* DID Bypass */
    vuint32_t _unused_9:20;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W0_15_DFMT1_tag;

typedef union XRDC_0_MDA_W0_16_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W0_16_DFMT0_tag;

typedef union XRDC_0_MDA_W1_16_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W1_16_DFMT0_tag;

typedef union XRDC_0_MDA_W2_16_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W2_16_DFMT0_tag;

typedef union XRDC_0_MDA_W3_16_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W3_16_DFMT0_tag;

typedef union XRDC_0_MDA_W4_16_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W4_16_DFMT0_tag;

typedef union XRDC_0_MDA_W5_16_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W5_16_DFMT0_tag;

typedef union XRDC_0_MDA_W6_16_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W6_16_DFMT0_tag;

typedef union XRDC_0_MDA_W7_16_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W7_16_DFMT0_tag;

typedef union XRDC_0_MDA_W0_17_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W0_17_DFMT0_tag;

typedef union XRDC_0_MDA_W1_17_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W1_17_DFMT0_tag;

typedef union XRDC_0_MDA_W2_17_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W2_17_DFMT0_tag;

typedef union XRDC_0_MDA_W3_17_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W3_17_DFMT0_tag;

typedef union XRDC_0_MDA_W4_17_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W4_17_DFMT0_tag;

typedef union XRDC_0_MDA_W5_17_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W5_17_DFMT0_tag;

typedef union XRDC_0_MDA_W6_17_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W6_17_DFMT0_tag;

typedef union XRDC_0_MDA_W7_17_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W7_17_DFMT0_tag;

typedef union XRDC_0_MDA_W0_18_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W0_18_DFMT0_tag;

typedef union XRDC_0_MDA_W1_18_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W1_18_DFMT0_tag;

typedef union XRDC_0_MDA_W2_18_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W2_18_DFMT0_tag;

typedef union XRDC_0_MDA_W3_18_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W3_18_DFMT0_tag;

typedef union XRDC_0_MDA_W4_18_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W4_18_DFMT0_tag;

typedef union XRDC_0_MDA_W5_18_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W5_18_DFMT0_tag;

typedef union XRDC_0_MDA_W6_18_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W6_18_DFMT0_tag;

typedef union XRDC_0_MDA_W7_18_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t DIDS:2;                  /* DID select */
    vuint32_t PE:2;                    /* Process identifier enable */
    vuint32_t PIDM:6;                  /* Process identifier mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W7_18_DFMT0_tag;

typedef union XRDC_0_MDA_W0_19_DFMT1_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t PA:2;                    /* Privileged attribute */
    vuint32_t SA:2;                    /* Secure attribute */
    vuint32_t DIDB:1;                  /* DID Bypass */
    vuint32_t _unused_9:20;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W0_19_DFMT1_tag;

typedef union XRDC_0_MDA_W0_20_DFMT1_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t PA:2;                    /* Privileged attribute */
    vuint32_t SA:2;                    /* Secure attribute */
    vuint32_t DIDB:1;                  /* DID Bypass */
    vuint32_t _unused_9:20;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W0_20_DFMT1_tag;

typedef union XRDC_0_MDA_W0_21_DFMT1_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:3;                   /* Domain identifier */
    vuint32_t _unused_3:1;
    vuint32_t PA:2;                    /* Privileged attribute */
    vuint32_t SA:2;                    /* Secure attribute */
    vuint32_t DIDB:1;                  /* DID Bypass */
    vuint32_t _unused_9:20;
    vuint32_t DFMT:1;                  /* Domain format */
    vuint32_t LK1:1;                   /* 1-bit Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MDA_W0_21_DFMT1_tag;

typedef union XRDC_0_PDAC_SLOT_PDACN_PDAC_W0_union_tag { /* Peripheral Domain Access Control */
  vuint32_t R;
  struct {
    vuint32_t D0ACP:3;                 /* Domain n access control policy */
    vuint32_t D1ACP:3;                 /* Domain n access control policy */
    vuint32_t D2ACP:3;                 /* Domain n access control policy */
    vuint32_t D3ACP:3;                 /* Domain n access control policy */
    vuint32_t D4ACP:3;                 /* Domain n access control policy */
    vuint32_t D5ACP:3;                 /* Domain n access control policy */
    vuint32_t D6ACP:3;                 /* Domain n access control policy */
    vuint32_t D7ACP:3;                 /* Domain n access control policy */
    vuint32_t SNUM:4;                  /* Semaphore number */
    vuint32_t _unused_28:2;
    vuint32_t SE:1;                    /* Semaphore enable */
    vuint32_t _unused_31:1;
  } B;
} XRDC_0_PDAC_SLOT_PDACN_PDAC_W0_tag;

typedef union XRDC_0_PDAC_SLOT_PDACN_PDAC_W1_union_tag { /* Peripheral Domain Access Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;
    vuint32_t _unused_24:5;
    vuint32_t LK2:2;                   /* Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_PDAC_SLOT_PDACN_PDAC_W1_tag;

typedef struct XRDC_0_PDAC_SLOT_PDACN_struct_tag {
  XRDC_0_PDAC_SLOT_PDACN_PDAC_W0_tag PDAC_W0; /* Peripheral Domain Access Control */
  XRDC_0_PDAC_SLOT_PDACN_PDAC_W1_tag PDAC_W1; /* Peripheral Domain Access Control */
} XRDC_0_PDAC_SLOT_PDACN_tag;

typedef struct XRDC_0_PDAC_SLOT_struct_tag {
  XRDC_0_PDAC_SLOT_PDACN_tag PDACN[32];
  uint8_t PDAC_SLOT_reserved0[768];
} XRDC_0_PDAC_SLOT_tag;

typedef union XRDC_0_MRGDN_XRDC_MRGD_W0_union_tag { /* Memory Region Descriptor */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;
    vuint32_t SRTADDR:31;              /* Start Address */
  } B;
} XRDC_0_MRGDN_XRDC_MRGD_W0_tag;

typedef union XRDC_0_MRGDN_XRDC_MRGD_W1_union_tag { /* Memory Region Descriptor */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;
    vuint32_t ENDADDR:31;              /* End Address */
  } B;
} XRDC_0_MRGDN_XRDC_MRGD_W1_tag;

typedef union XRDC_0_MRGDN_XRDC_MRGD_W2_union_tag { /* Memory Region Descriptor */
  vuint32_t R;
  struct {
    vuint32_t D0ACP:3;                 /* Domain n access control policy */
    vuint32_t D1ACP:3;                 /* Domain n access control policy */
    vuint32_t D2ACP:3;                 /* Domain n access control policy */
    vuint32_t D3ACP:3;                 /* Domain n access control policy */
    vuint32_t D4ACP:3;                 /* Domain n access control policy */
    vuint32_t D5ACP:3;                 /* Domain n access control policy */
    vuint32_t D6ACP:3;                 /* Domain n access control policy */
    vuint32_t D7ACP:3;                 /* Domain n access control policy */
    vuint32_t SNUM:4;                  /* Semaphore number */
    vuint32_t _unused_28:2;
    vuint32_t SE:1;                    /* Semaphore enable */
    vuint32_t _unused_31:1;
  } B;
} XRDC_0_MRGDN_XRDC_MRGD_W2_tag;

typedef union XRDC_0_MRGDN_XRDC_MRGD_W3_union_tag { /* Memory Region Descriptor */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;
    vuint32_t _unused_24:5;
    vuint32_t LK2:2;                   /* Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_0_MRGDN_XRDC_MRGD_W3_tag;

typedef struct XRDC_0_MRGDN_struct_tag {
  XRDC_0_MRGDN_XRDC_MRGD_W0_tag XRDC_MRGD_W0; /* Memory Region Descriptor */
  XRDC_0_MRGDN_XRDC_MRGD_W1_tag XRDC_MRGD_W1; /* Memory Region Descriptor */
  XRDC_0_MRGDN_XRDC_MRGD_W2_tag XRDC_MRGD_W2; /* Memory Region Descriptor */
  XRDC_0_MRGDN_XRDC_MRGD_W3_tag XRDC_MRGD_W3; /* Memory Region Descriptor */
  uint8_t MRGDN_reserved0[16];
} XRDC_0_MRGDN_tag;

struct XRDC_0_tag {
  XRDC_0_CR_tag CR;                    /* Control */
  uint8_t XRDC_0_reserved0[236];
  XRDC_0_HWCFG0_tag HWCFG0;            /* Hardware Configuration 0 */
  XRDC_0_HWCFG1_tag HWCFG1;            /* Hardware Configuration 1 */
  XRDC_0_HWCFG2_tag HWCFG2;            /* Hardware Configuration 2 */
  uint8_t XRDC_0_reserved1[4];
  XRDC_0_MDACFG_tag MDACFG[22];        /* Master Domain Assignment Configuration; Valid array indices: 0-12, 15-21 */
  uint8_t XRDC_0_reserved2[42];
  XRDC_0_MRCFG_tag MRCFG[14];          /* Memory Region Configuration; Valid array indices: 0, 2-13 */
  uint8_t XRDC_0_reserved3[178];
  XRDC_0_DERRLOC_tag DERRLOC[8];       /* Domain Error Location */
  uint8_t XRDC_0_reserved4[480];
  XRDC_0_DERRW0_tag DERRW0[20];        /* Valid array indices: 0, 2-13, 16-19 */
  uint8_t XRDC_0_reserved5[448];
  XRDC_0_PID_tag PID[19];              /* Process Identifier; Valid array indices: 0-1, 8-10, 16-18 */
  uint8_t XRDC_0_reserved6[180];
  XRDC_0_MDA_W0_0_DFMT0_tag MDA_W0_0_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W1_0_DFMT0_tag MDA_W1_0_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W2_0_DFMT0_tag MDA_W2_0_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W3_0_DFMT0_tag MDA_W3_0_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W4_0_DFMT0_tag MDA_W4_0_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W5_0_DFMT0_tag MDA_W5_0_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W6_0_DFMT0_tag MDA_W6_0_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W7_0_DFMT0_tag MDA_W7_0_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W0_1_DFMT0_tag MDA_W0_1_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W1_1_DFMT0_tag MDA_W1_1_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W2_1_DFMT0_tag MDA_W2_1_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W3_1_DFMT0_tag MDA_W3_1_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W4_1_DFMT0_tag MDA_W4_1_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W5_1_DFMT0_tag MDA_W5_1_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W6_1_DFMT0_tag MDA_W6_1_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W7_1_DFMT0_tag MDA_W7_1_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W0_2_DFMT1_tag MDA_W0_2_DFMT1; /* Master Domain Assignment */
  uint8_t XRDC_0_reserved7[28];
  XRDC_0_MDA_W0_3_DFMT1_tag MDA_W0_3_DFMT1; /* Master Domain Assignment */
  uint8_t XRDC_0_reserved8[28];
  XRDC_0_MDA_W0_4_DFMT1_tag MDA_W0_4_DFMT1; /* Master Domain Assignment */
  uint8_t XRDC_0_reserved9[28];
  XRDC_0_MDA_W0_5_DFMT1_tag MDA_W0_5_DFMT1; /* Master Domain Assignment */
  uint8_t XRDC_0_reserved10[28];
  XRDC_0_MDA_W0_6_DFMT1_tag MDA_W0_6_DFMT1; /* Master Domain Assignment */
  uint8_t XRDC_0_reserved11[28];
  XRDC_0_MDA_W0_7_DFMT1_tag MDA_W0_7_DFMT1; /* Master Domain Assignment */
  uint8_t XRDC_0_reserved12[28];
  XRDC_0_MDA_W0_8_DFMT0_tag MDA_W0_8_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W1_8_DFMT0_tag MDA_W1_8_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W2_8_DFMT0_tag MDA_W2_8_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W3_8_DFMT0_tag MDA_W3_8_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W4_8_DFMT0_tag MDA_W4_8_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W5_8_DFMT0_tag MDA_W5_8_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W6_8_DFMT0_tag MDA_W6_8_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W7_8_DFMT0_tag MDA_W7_8_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W0_9_DFMT0_tag MDA_W0_9_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W1_9_DFMT0_tag MDA_W1_9_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W2_9_DFMT0_tag MDA_W2_9_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W3_9_DFMT0_tag MDA_W3_9_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W4_9_DFMT0_tag MDA_W4_9_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W5_9_DFMT0_tag MDA_W5_9_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W6_9_DFMT0_tag MDA_W6_9_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W7_9_DFMT0_tag MDA_W7_9_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W0_10_DFMT0_tag MDA_W0_10_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W1_10_DFMT0_tag MDA_W1_10_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W2_10_DFMT0_tag MDA_W2_10_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W3_10_DFMT0_tag MDA_W3_10_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W4_10_DFMT0_tag MDA_W4_10_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W5_10_DFMT0_tag MDA_W5_10_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W6_10_DFMT0_tag MDA_W6_10_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W7_10_DFMT0_tag MDA_W7_10_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W0_11_DFMT1_tag MDA_W0_11_DFMT1; /* Master Domain Assignment */
  uint8_t XRDC_0_reserved13[28];
  XRDC_0_MDA_W0_12_DFMT1_tag MDA_W0_12_DFMT1; /* Master Domain Assignment */
  uint8_t XRDC_0_reserved14[92];
  XRDC_0_MDA_W0_15_DFMT1_tag MDA_W0_15_DFMT1; /* Master Domain Assignment */
  uint8_t XRDC_0_reserved15[28];
  XRDC_0_MDA_W0_16_DFMT0_tag MDA_W0_16_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W1_16_DFMT0_tag MDA_W1_16_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W2_16_DFMT0_tag MDA_W2_16_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W3_16_DFMT0_tag MDA_W3_16_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W4_16_DFMT0_tag MDA_W4_16_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W5_16_DFMT0_tag MDA_W5_16_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W6_16_DFMT0_tag MDA_W6_16_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W7_16_DFMT0_tag MDA_W7_16_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W0_17_DFMT0_tag MDA_W0_17_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W1_17_DFMT0_tag MDA_W1_17_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W2_17_DFMT0_tag MDA_W2_17_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W3_17_DFMT0_tag MDA_W3_17_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W4_17_DFMT0_tag MDA_W4_17_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W5_17_DFMT0_tag MDA_W5_17_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W6_17_DFMT0_tag MDA_W6_17_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W7_17_DFMT0_tag MDA_W7_17_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W0_18_DFMT0_tag MDA_W0_18_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W1_18_DFMT0_tag MDA_W1_18_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W2_18_DFMT0_tag MDA_W2_18_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W3_18_DFMT0_tag MDA_W3_18_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W4_18_DFMT0_tag MDA_W4_18_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W5_18_DFMT0_tag MDA_W5_18_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W6_18_DFMT0_tag MDA_W6_18_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W7_18_DFMT0_tag MDA_W7_18_DFMT0; /* Master Domain Assignment */
  XRDC_0_MDA_W0_19_DFMT1_tag MDA_W0_19_DFMT1; /* Master Domain Assignment */
  uint8_t XRDC_0_reserved16[28];
  XRDC_0_MDA_W0_20_DFMT1_tag MDA_W0_20_DFMT1; /* Master Domain Assignment */
  uint8_t XRDC_0_reserved17[28];
  XRDC_0_MDA_W0_21_DFMT1_tag MDA_W0_21_DFMT1; /* Master Domain Assignment */
  uint8_t XRDC_0_reserved18[1372];
  XRDC_0_PDAC_SLOT_tag PDAC_SLOT[4];
  XRDC_0_MRGDN_tag MRGDN[14][16];      /* Valid array indices: 0, 2-13; all */
};


/* ============================================================================
   =============================== Module: ddr_subsystem ======================
   ============================================================================ */

typedef union ddr_subsystem_REG_GRP0_union_tag { /* DDR SS Reg */
  vuint32_t R;
  struct {
    vuint32_t DFI1_ENABLED:1;          /* NA */
    vuint32_t _unused_1:3;
    vuint32_t AXI_PARITY_EN:9;         /* NA */
    vuint32_t _unused_13:3;
    vuint32_t AXI_PARITY_TYPE:9;       /* NA */
    vuint32_t _unused_25:2;
    vuint32_t CORE_CLK_DISABLE:1;      /* NA */
    vuint32_t ACLK_0_DISABLE:1;        /* NA */
    vuint32_t ACLK_1_DISABLE:1;        /* NA */
    vuint32_t ACLK_2_DISABLE:1;        /* NA */
    vuint32_t DDR_SS_PUB_REG_DECO_INT_EN:1; /* NA */
  } B;
} ddr_subsystem_REG_GRP0_tag;

struct ddr_subsystem_tag {
  ddr_subsystem_REG_GRP0_tag REG_GRP0; /* DDR SS Reg */
};


/* ============================================================================
   =============================== Module: eDMA_0_MP ==========================
   ============================================================================ */

typedef union eDMA_0_MP_CSR_union_tag { /* Management Page Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t EDBG:1;                  /* Enable Debug */
    vuint32_t ERCA:1;                  /* Enable Round Robin Channel Arbitration */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t HAE:1;                   /* Halt After Error */
    vuint32_t HALT:1;                  /* Halt DMA Operations */
    vuint32_t GCLC:1;                  /* Global Channel Linking Control */
    vuint32_t GMRC:1;                  /* Global Master ID Replication Control */
    vuint32_t ECX:1;                   /* Cancel Transfer With Error */
    vuint32_t CX:1;                    /* Cancel Transfer */
    vuint32_t _unused_10:6;            /* Reserved */
    vuint32_t _unused_16:8;            /* Reserved */
    vuint32_t ACTIVE_ID:5;             /* Active Channel ID */
    vuint32_t _unused_29:2;            /* Reserved */
    vuint32_t ACTIVE:1;                /* DMA Active Status */
  } B;
} eDMA_0_MP_CSR_tag;

typedef union eDMA_0_MP_ES_union_tag { /* Management Page Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t ECX:1;                   /* Transfer Canceled */
    vuint32_t UCE:1;                   /* Uncorrectable TCD Error During Channel Execution */
    vuint32_t _unused_10:14;           /* Reserved */
    vuint32_t ERRCHN:5;                /* Error Channel Number or Canceled Channel Number */
    vuint32_t _unused_29:2;            /* Reserved */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} eDMA_0_MP_ES_tag;

typedef union eDMA_0_MP_INT_union_tag { /* Management Page Interrupt Request Status */
  vuint32_t R;
  struct {
    vuint32_t INT:32;                  /* Interrupt Request Status */
  } B;
} eDMA_0_MP_INT_tag;

typedef union eDMA_0_MP_HRS_union_tag { /* Management Page Hardware Request Status */
  vuint32_t R;
  struct {
    vuint32_t HRS:32;                  /* Hardware Request Status */
  } B;
} eDMA_0_MP_HRS_tag;

typedef union eDMA_0_MP_CH_GRPRI_union_tag { /* Channel Arbitration Group */
  vuint32_t R;
  struct {
    vuint32_t GRPRI:5;                 /* Arbitration Group For Channel n */
    vuint32_t _unused_5:27;
  } B;
} eDMA_0_MP_CH_GRPRI_tag;

struct eDMA_0_MP_tag {
  eDMA_0_MP_CSR_tag CSR;               /* Management Page Control */
  eDMA_0_MP_ES_tag ES;                 /* Management Page Error Status */
  eDMA_0_MP_INT_tag INT;               /* Management Page Interrupt Request Status */
  eDMA_0_MP_HRS_tag HRS;               /* Management Page Hardware Request Status */
  uint8_t eDMA_0_MP_reserved0[240];
  eDMA_0_MP_CH_GRPRI_tag CH_GRPRI[32]; /* Channel Arbitration Group */
};


/* ============================================================================
   =============================== Module: eDMA_0_TCD =========================
   ============================================================================ */

typedef union eDMA_0_TCD_TCD_CH_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} eDMA_0_TCD_TCD_CH_CSR_tag;

typedef union eDMA_0_TCD_TCD_CH_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} eDMA_0_TCD_TCD_CH_ES_tag;

typedef union eDMA_0_TCD_TCD_CH_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} eDMA_0_TCD_TCD_CH_INT_tag;

typedef union eDMA_0_TCD_TCD_CH_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:6;                   /* Master ID */
    vuint32_t _unused_6:9;             /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} eDMA_0_TCD_TCD_CH_SBR_tag;

typedef union eDMA_0_TCD_TCD_CH_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} eDMA_0_TCD_TCD_CH_PRI_tag;

typedef union eDMA_0_TCD_TCD_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD_SADDR_tag;

typedef union eDMA_0_TCD_TCD_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD_SOFF_tag;

typedef union eDMA_0_TCD_TCD_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} eDMA_0_TCD_TCD_ATTR_tag;

typedef union eDMA_0_TCD_TCD_NBYTES_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} eDMA_0_TCD_TCD_NBYTES_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_TCD_NBYTES_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} eDMA_0_TCD_TCD_NBYTES_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_TCD_NBYTES_union_tag {
  eDMA_0_TCD_TCD_NBYTES_NBYTES_MLOFFNO_tag NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_TCD_NBYTES_NBYTES_MLOFFYES_tag NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_TCD_NBYTES_tag;

typedef union eDMA_0_TCD_TCD_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD_DADDR_tag;

typedef union eDMA_0_TCD_TCD_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD_DOFF_tag;

typedef union eDMA_0_TCD_TCD_CITER_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} eDMA_0_TCD_TCD_CITER_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_TCD_CITER_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} eDMA_0_TCD_TCD_CITER_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_TCD_CITER_union_tag {
  eDMA_0_TCD_TCD_CITER_CITER_ELINKNO_tag CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_TCD_CITER_CITER_ELINKYES_tag CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_TCD_CITER_tag;

typedef union eDMA_0_TCD_TCD_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD_DLAST_SGA_tag;

typedef union eDMA_0_TCD_TCD_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt if Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} eDMA_0_TCD_TCD_CSR_tag;

typedef union eDMA_0_TCD_TCD_BITER_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} eDMA_0_TCD_TCD_BITER_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_TCD_BITER_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} eDMA_0_TCD_TCD_BITER_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_TCD_BITER_union_tag {
  eDMA_0_TCD_TCD_BITER_BITER_ELINKNO_tag BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_TCD_BITER_BITER_ELINKYES_tag BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_TCD_BITER_tag;

typedef struct eDMA_0_TCD_TCD_struct_tag {
  eDMA_0_TCD_TCD_CH_CSR_tag CH_CSR;    /* Channel Control and Status */
  eDMA_0_TCD_TCD_CH_ES_tag CH_ES;      /* Channel Error Status */
  eDMA_0_TCD_TCD_CH_INT_tag CH_INT;    /* Channel Interrupt Status */
  eDMA_0_TCD_TCD_CH_SBR_tag CH_SBR;    /* Channel System Bus */
  eDMA_0_TCD_TCD_CH_PRI_tag CH_PRI;    /* Channel Priority */
  uint8_t TCD_reserved0[12];
  eDMA_0_TCD_TCD_SADDR_tag SADDR;      /* TCD Source Address */
  eDMA_0_TCD_TCD_SOFF_tag SOFF;        /* TCD Signed Source Address Offset */
  eDMA_0_TCD_TCD_ATTR_tag ATTR;        /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD_NBYTES_tag NBYTES;
  eDMA_0_TCD_TCD_SLAST_SDA_tag SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD_DADDR_tag DADDR;      /* TCD Destination Address */
  eDMA_0_TCD_TCD_DOFF_tag DOFF;        /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD_CITER_tag CITER;
  eDMA_0_TCD_TCD_DLAST_SGA_tag DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_TCD_CSR_tag CSR;          /* TCD Control and Status */
  eDMA_0_TCD_TCD_BITER_tag BITER;
  uint8_t TCD_reserved1[4032];
} eDMA_0_TCD_TCD_tag;

struct eDMA_0_TCD_tag {
  eDMA_0_TCD_TCD_tag TCD[32];
};


/* ============================================================================
   =============================== Module: eDMA_1_MP ==========================
   ============================================================================ */

typedef union eDMA_1_MP_CSR_union_tag { /* Management Page Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t EDBG:1;                  /* Enable Debug */
    vuint32_t ERCA:1;                  /* Enable Round Robin Channel Arbitration */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t HAE:1;                   /* Halt After Error */
    vuint32_t HALT:1;                  /* Halt DMA Operations */
    vuint32_t GCLC:1;                  /* Global Channel Linking Control */
    vuint32_t GMRC:1;                  /* Global Master ID Replication Control */
    vuint32_t ECX:1;                   /* Cancel Transfer With Error */
    vuint32_t CX:1;                    /* Cancel Transfer */
    vuint32_t _unused_10:6;            /* Reserved */
    vuint32_t _unused_16:8;            /* Reserved */
    vuint32_t ACTIVE_ID:5;             /* Active Channel ID */
    vuint32_t _unused_29:2;            /* Reserved */
    vuint32_t ACTIVE:1;                /* DMA Active Status */
  } B;
} eDMA_1_MP_CSR_tag;

typedef union eDMA_1_MP_ES_union_tag { /* Management Page Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t ECX:1;                   /* Transfer Canceled */
    vuint32_t UCE:1;                   /* Uncorrectable TCD Error During Channel Execution */
    vuint32_t _unused_10:14;           /* Reserved */
    vuint32_t ERRCHN:5;                /* Error Channel Number or Canceled Channel Number */
    vuint32_t _unused_29:2;            /* Reserved */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} eDMA_1_MP_ES_tag;

typedef union eDMA_1_MP_INT_union_tag { /* Management Page Interrupt Request Status */
  vuint32_t R;
  struct {
    vuint32_t INT:32;                  /* Interrupt Request Status */
  } B;
} eDMA_1_MP_INT_tag;

typedef union eDMA_1_MP_HRS_union_tag { /* Management Page Hardware Request Status */
  vuint32_t R;
  struct {
    vuint32_t HRS:32;                  /* Hardware Request Status */
  } B;
} eDMA_1_MP_HRS_tag;

typedef union eDMA_1_MP_CH_GRPRI_union_tag { /* Channel Arbitration Group */
  vuint32_t R;
  struct {
    vuint32_t GRPRI:5;                 /* Arbitration Group For Channel n */
    vuint32_t _unused_5:27;
  } B;
} eDMA_1_MP_CH_GRPRI_tag;

struct eDMA_1_MP_tag {
  eDMA_1_MP_CSR_tag CSR;               /* Management Page Control */
  eDMA_1_MP_ES_tag ES;                 /* Management Page Error Status */
  eDMA_1_MP_INT_tag INT;               /* Management Page Interrupt Request Status */
  eDMA_1_MP_HRS_tag HRS;               /* Management Page Hardware Request Status */
  uint8_t eDMA_1_MP_reserved0[240];
  eDMA_1_MP_CH_GRPRI_tag CH_GRPRI[32]; /* Channel Arbitration Group */
};


/* ============================================================================
   =============================== Module: eDMA_1_TCD =========================
   ============================================================================ */

typedef union eDMA_1_TCD_TCD_CH_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} eDMA_1_TCD_TCD_CH_CSR_tag;

typedef union eDMA_1_TCD_TCD_CH_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} eDMA_1_TCD_TCD_CH_ES_tag;

typedef union eDMA_1_TCD_TCD_CH_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} eDMA_1_TCD_TCD_CH_INT_tag;

typedef union eDMA_1_TCD_TCD_CH_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:6;                   /* Master ID */
    vuint32_t _unused_6:9;             /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} eDMA_1_TCD_TCD_CH_SBR_tag;

typedef union eDMA_1_TCD_TCD_CH_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} eDMA_1_TCD_TCD_CH_PRI_tag;

typedef union eDMA_1_TCD_TCD_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_1_TCD_TCD_SADDR_tag;

typedef union eDMA_1_TCD_TCD_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_1_TCD_TCD_SOFF_tag;

typedef union eDMA_1_TCD_TCD_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} eDMA_1_TCD_TCD_ATTR_tag;

typedef union eDMA_1_TCD_TCD_NBYTES_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} eDMA_1_TCD_TCD_NBYTES_NBYTES_MLOFFNO_tag;

typedef union eDMA_1_TCD_TCD_NBYTES_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} eDMA_1_TCD_TCD_NBYTES_NBYTES_MLOFFYES_tag;

typedef union eDMA_1_TCD_TCD_NBYTES_union_tag {
  eDMA_1_TCD_TCD_NBYTES_NBYTES_MLOFFNO_tag NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_1_TCD_TCD_NBYTES_NBYTES_MLOFFYES_tag NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_1_TCD_TCD_NBYTES_tag;

typedef union eDMA_1_TCD_TCD_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_1_TCD_TCD_SLAST_SDA_tag;

typedef union eDMA_1_TCD_TCD_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_1_TCD_TCD_DADDR_tag;

typedef union eDMA_1_TCD_TCD_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_1_TCD_TCD_DOFF_tag;

typedef union eDMA_1_TCD_TCD_CITER_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} eDMA_1_TCD_TCD_CITER_CITER_ELINKNO_tag;

typedef union eDMA_1_TCD_TCD_CITER_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} eDMA_1_TCD_TCD_CITER_CITER_ELINKYES_tag;

typedef union eDMA_1_TCD_TCD_CITER_union_tag {
  eDMA_1_TCD_TCD_CITER_CITER_ELINKNO_tag CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_1_TCD_TCD_CITER_CITER_ELINKYES_tag CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_1_TCD_TCD_CITER_tag;

typedef union eDMA_1_TCD_TCD_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_1_TCD_TCD_DLAST_SGA_tag;

typedef union eDMA_1_TCD_TCD_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt if Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} eDMA_1_TCD_TCD_CSR_tag;

typedef union eDMA_1_TCD_TCD_BITER_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} eDMA_1_TCD_TCD_BITER_BITER_ELINKNO_tag;

typedef union eDMA_1_TCD_TCD_BITER_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} eDMA_1_TCD_TCD_BITER_BITER_ELINKYES_tag;

typedef union eDMA_1_TCD_TCD_BITER_union_tag {
  eDMA_1_TCD_TCD_BITER_BITER_ELINKNO_tag BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_1_TCD_TCD_BITER_BITER_ELINKYES_tag BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_1_TCD_TCD_BITER_tag;

typedef struct eDMA_1_TCD_TCD_struct_tag {
  eDMA_1_TCD_TCD_CH_CSR_tag CH_CSR;    /* Channel Control and Status */
  eDMA_1_TCD_TCD_CH_ES_tag CH_ES;      /* Channel Error Status */
  eDMA_1_TCD_TCD_CH_INT_tag CH_INT;    /* Channel Interrupt Status */
  eDMA_1_TCD_TCD_CH_SBR_tag CH_SBR;    /* Channel System Bus */
  eDMA_1_TCD_TCD_CH_PRI_tag CH_PRI;    /* Channel Priority */
  uint8_t TCD_reserved0[12];
  eDMA_1_TCD_TCD_SADDR_tag SADDR;      /* TCD Source Address */
  eDMA_1_TCD_TCD_SOFF_tag SOFF;        /* TCD Signed Source Address Offset */
  eDMA_1_TCD_TCD_ATTR_tag ATTR;        /* TCD Transfer Attributes */
  eDMA_1_TCD_TCD_NBYTES_tag NBYTES;
  eDMA_1_TCD_TCD_SLAST_SDA_tag SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_1_TCD_TCD_DADDR_tag DADDR;      /* TCD Destination Address */
  eDMA_1_TCD_TCD_DOFF_tag DOFF;        /* TCD Signed Destination Address Offset */
  eDMA_1_TCD_TCD_CITER_tag CITER;
  eDMA_1_TCD_TCD_DLAST_SGA_tag DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_1_TCD_TCD_CSR_tag CSR;          /* TCD Control and Status */
  eDMA_1_TCD_TCD_BITER_tag BITER;
  uint8_t TCD_reserved1[4032];
} eDMA_1_TCD_TCD_tag;

struct eDMA_1_TCD_tag {
  eDMA_1_TCD_TCD_tag TCD[32];
};


/* ============================================================================
   =============================== Module: ocotp_gpr ==========================
   ============================================================================ */

typedef union ocotp_gpr_OCOTP_GPR_0_union_tag { /* Boot Configuration Register 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:32;
  } B;
} ocotp_gpr_OCOTP_GPR_0_tag;

typedef union ocotp_gpr_OCOTP_GPR_1_union_tag { /* Boot Configuration Register 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:32;
  } B;
} ocotp_gpr_OCOTP_GPR_1_tag;

struct ocotp_gpr_tag {
  ocotp_gpr_OCOTP_GPR_0_tag OCOTP_GPR_0; /* Boot Configuration Register 1 */
  ocotp_gpr_OCOTP_GPR_1_tag OCOTP_GPR_1; /* Boot Configuration Register 1 */
};

#define A53_GPR (*(volatile struct A53_GPR_tag *) 0x4007C400UL)
#define ACCEL_PLL (*(volatile struct ACCEL_PLL_tag *) 0x40040000UL)
#define ADC_0 (*(volatile struct ADC_tag *) 0x401F8000UL)
#define ADC_1 (*(volatile struct ADC_tag *) 0x402E8000UL)
#define ATP (*(volatile struct ATP_tag *) 0x51033000UL)
#define BOOT_CC (*(volatile struct BOOT_tag *) 0x4007C900UL)
#define CAIU0 (*(volatile struct CAIU0_tag *) 0x50400000UL)
#define CAIU1 (*(volatile struct CAIU1_tag *) 0x50401000UL)
#define CCTI_FAULT_CTRL (*(volatile struct CCTI_fault_ctrl_tag *) 0x50500000UL)
#define CM7_GPR_0 (*(volatile struct CM7_GPR_tag *) 0x4007C100UL)
#define CM7_GPR_1 (*(volatile struct CM7_GPR_tag *) 0x4007C200UL)
#define CM7_GPR_2 (*(volatile struct CM7_GPR_tag *) 0x4007C300UL)
#define CMIU (*(volatile struct CMIU_tag *) 0x504C0000UL)
#define CMU_FC_0 (*(volatile struct CMU_FC_tag *) 0x4005C000UL)
#define CMU_FC_6 (*(volatile struct CMU_FC_tag *) 0x4005C0C0UL)
#define CMU_FC_8 (*(volatile struct CMU_FC_tag *) 0x4005C100UL)
#define CMU_FC_9 (*(volatile struct CMU_FC_tag *) 0x4005C120UL)
#define CMU_FC_27 (*(volatile struct CMU_FC_tag *) 0x4005C360UL)
#define CMU_FC_28 (*(volatile struct CMU_FC_tag *) 0x4005C380UL)
#define CMU_FC_20 (*(volatile struct CMU_FC_tag *) 0x4005C280UL)
#define CMU_FC_14 (*(volatile struct CMU_FC_tag *) 0x4005C1C0UL)
#define CMU_FC_15 (*(volatile struct CMU_FC_tag *) 0x4005C1E0UL)
#define CMU_FC_21 (*(volatile struct CMU_FC_tag *) 0x4005C2A0UL)
#define CMU_FC_17 (*(volatile struct CMU_FC_tag *) 0x4005C220UL)
#define CMU_FC_18 (*(volatile struct CMU_FC_tag *) 0x4005C240UL)
#define CMU_FC_10 (*(volatile struct CMU_FC_tag *) 0x4005C140UL)
#define CMU_FC_13 (*(volatile struct CMU_FC_tag *) 0x4005C1A0UL)
#define CMU_FC_16 (*(volatile struct CMU_FC_tag *) 0x4005C200UL)
#define CMU_FC_7 (*(volatile struct CMU_FC_tag *) 0x4005C0E0UL)
#define CMU_FC_5 (*(volatile struct CMU_FC_tag *) 0x4005C0A0UL)
#define CMU_FC_11 (*(volatile struct CMU_FC_tag *) 0x4005C160UL)
#define CMU_FC_22 (*(volatile struct CMU_FC_tag *) 0x4005C2C0UL)
#define CMU_FC_12 (*(volatile struct CMU_FC_tag *) 0x4005C180UL)
#define CMU_FC_39 (*(volatile struct CMU_FC_tag *) 0x4005C4E0UL)
#define CMU_FC_46 (*(volatile struct CMU_FC_tag *) 0x4005C5C0UL)
#define CMU_FC_47 (*(volatile struct CMU_FC_tag *) 0x4005C5E0UL)
#define CMU_FC_48 (*(volatile struct CMU_FC_tag *) 0x4005C600UL)
#define CMU_FC_49 (*(volatile struct CMU_FC_tag *) 0x4005C620UL)
#define CMU_FC_50 (*(volatile struct CMU_FC_tag *) 0x4005C640UL)
#define CMU_FC_51 (*(volatile struct CMU_FC_tag *) 0x4005C660UL)
#define CMU_FM_4 (*(volatile struct CMU_FM_tag *) 0x4005C080UL)
#define CMU_FM_3 (*(volatile struct CMU_FM_tag *) 0x4005C060UL)
#define CMU_FM_1 (*(volatile struct CMU_FM_tag *) 0x4005C020UL)
#define CMU_FM_2 (*(volatile struct CMU_FM_tag *) 0x4005C040UL)
#define CORE_PLL (*(volatile struct CORE_PLL_tag *) 0x40038000UL)
#define CRC_0 (*(volatile struct CRC_0_tag *) 0x40190000UL)
#define CSR (*(volatile struct CSR_tag *) 0x504FF000UL)
#define CTU (*(volatile struct CTU_tag *) 0x401FC000UL)
#define DDR_GPR (*(volatile struct DDR_GPR_tag *) 0x4007C600UL)
#define DDR_PLL (*(volatile struct DDR_PLL_tag *) 0x40044000UL)
#define CORE_DFS (*(volatile struct DFS_tag *) 0x40054000UL)
#define PERIPH_DFS (*(volatile struct DFS_tag *) 0x40058000UL)
#define DIRU (*(volatile struct DIRU_tag *) 0x50480000UL)
#define DMAMUX_0 (*(volatile struct DMAMUX_tag *) 0x4012C000UL)
#define DMAMUX_1 (*(volatile struct DMAMUX_tag *) 0x40130000UL)
#define DMAMUX_2 (*(volatile struct DMAMUX_tag *) 0x4022C000UL)
#define DMAMUX_3 (*(volatile struct DMAMUX_tag *) 0x40230000UL)
#define DMA_CRC_0 (*(volatile struct DMA_CRC_tag *) 0x4013C000UL)
#define DMA_CRC_1 (*(volatile struct DMA_CRC_tag *) 0x4023C000UL)
#define LLCE (*(volatile struct D_IP_LLCE_SYN_tag *) 0x43FF8000UL)
#define EIM_0 (*(volatile struct EIM_tag *) 0x40330000UL)
#define EIM_3 (*(volatile struct EIM_tag *) 0x40333000UL)
#define EIM_1 (*(volatile struct EIM_tag *) 0x40331000UL)
#define EIM_2 (*(volatile struct EIM_tag *) 0x40332000UL)
#define EIM (*(volatile struct EIM_tag *) 0x40308000UL)
#define LLCE__EIM_LLCE (*(volatile struct EIM_tag *) 0x44050000UL)
#define EIM_PFE0 (*(volatile struct EIM_tag *) 0x44054000UL)
#define EIM_PFE1 (*(volatile struct EIM_tag *) 0x44055000UL)
#define EIM_PFE2 (*(volatile struct EIM_tag *) 0x44056000UL)
#define EIM_PFE3 (*(volatile struct EIM_tag *) 0x44057000UL)
#define EIM_PFE4 (*(volatile struct EIM_tag *) 0x44058000UL)
#define EIM_PFE5 (*(volatile struct EIM_tag *) 0x44059000UL)
#define EIM_PFE6 (*(volatile struct EIM_tag *) 0x4405A000UL)
#define EIM_MISC (*(volatile struct EIM_tag *) 0x4404C000UL)
#define ERM_PER (*(volatile struct ERM_tag *) 0x40314000UL)
#define ERM_CPU0 (*(volatile struct ERM_tag *) 0x40318000UL)
#define ERM_CPU1 (*(volatile struct ERM_tag *) 0x40318400UL)
#define ERM_CPU2 (*(volatile struct ERM_tag *) 0x40318800UL)
#define ERM_EDMA0 (*(volatile struct ERM_tag *) 0x40314400UL)
#define ERM_EDMA1 (*(volatile struct ERM_tag *) 0x40314800UL)
#define LLCE__ERM_LLCE (*(volatile struct ERM_tag *) 0x44030000UL)
#define ERM_PFE10 (*(volatile struct ERM_tag *) 0x4403E000UL)
#define ERM_PFE2 (*(volatile struct ERM_tag *) 0x44036000UL)
#define ERM_PFE3 (*(volatile struct ERM_tag *) 0x44037000UL)
#define ERM_PFE4 (*(volatile struct ERM_tag *) 0x44038000UL)
#define ERM_PFE5 (*(volatile struct ERM_tag *) 0x44039000UL)
#define ERM_PFE6 (*(volatile struct ERM_tag *) 0x4403A000UL)
#define ERM_PFE7 (*(volatile struct ERM_tag *) 0x4403B000UL)
#define ERM_PFE8 (*(volatile struct ERM_tag *) 0x4403C000UL)
#define ERM_PFE9 (*(volatile struct ERM_tag *) 0x4403D000UL)
#define ERM_PFE0 (*(volatile struct ERM_tag *) 0x44034000UL)
#define ERM_PFE1 (*(volatile struct ERM_tag *) 0x44035000UL)
#define ERM_PFE12 (*(volatile struct ERM_tag *) 0x44040000UL)
#define ERM_PFE14 (*(volatile struct ERM_tag *) 0x44042000UL)
#define ERM_PFE15 (*(volatile struct ERM_tag *) 0x44043000UL)
#define ERM_PFE11 (*(volatile struct ERM_tag *) 0x4403F000UL)
#define ERM_PFE13 (*(volatile struct ERM_tag *) 0x44041000UL)
#define ERM_STDBY_SRAM (*(volatile struct ERM_tag *) 0x44044000UL)
#define FBXC (*(volatile struct FBXC_tag *) 0x400A4100UL)
#define FCCU (*(volatile struct FCCU_tag *) 0x4030C000UL)
#define CAN_2 (*(volatile struct FLEXCAN_tag *) 0x402A8000UL)
#define CAN_3 (*(volatile struct FLEXCAN_tag *) 0x402B2000UL)
#define CAN_0 (*(volatile struct FLEXCAN_tag *) 0x401B4000UL)
#define CAN_1 (*(volatile struct FLEXCAN_tag *) 0x401BE000UL)
#define FR_0 (*(volatile struct FLEXRAY_tag *) 0x402F8000UL)
#define FTM_1 (*(volatile struct FLEXTIMER_tag *) 0x402E4000UL)
#define FTM_0 (*(volatile struct FLEXTIMER_tag *) 0x401F4000UL)
#define FSC (*(volatile struct FSC_tag *) 0x50600000UL)
#define FXOSC (*(volatile struct FXOSC_tag *) 0x40050000UL)
#define GMAC_0 (*(volatile struct GMAC_tag *) 0x4033C000UL)
#define I2C_3 (*(volatile struct I2C_tag *) 0x402D8000UL)
#define I2C_4 (*(volatile struct I2C_tag *) 0x402DC000UL)
#define I2C_0 (*(volatile struct I2C_tag *) 0x401E4000UL)
#define I2C_1 (*(volatile struct I2C_tag *) 0x401E8000UL)
#define I2C_2 (*(volatile struct I2C_tag *) 0x401EC000UL)
#define JDC (*(volatile struct JDC_tag *) 0x402F4000UL)
#define LINFLEXD_2 (*(volatile struct LINFLEXD_tag *) 0x402BC000UL)
#define LINFLEXD_0 (*(volatile struct LINFLEXD_tag *) 0x401C8000UL)
#define LINFLEXD_1 (*(volatile struct LINFLEXD_tag *) 0x401CC000UL)
#define MCM (*(volatile struct MCM_tag *) 0xE0080000UL)
#define MTR_MCT (*(volatile struct MCT_tag *) 0xF1000000UL)
#define MC_CGM_0 (*(volatile struct MC_CGM_tag *) 0x40030000UL)
#define MC_CGM_5 (*(volatile struct MC_CGM_tag *) 0x40068000UL)
#define MC_CGM_1 (*(volatile struct MC_CGM_1_tag *) 0x40034000UL)
#define MC_CGM_2 (*(volatile struct MC_CGM_2_tag *) 0x44018000UL)
#define MC_ME (*(volatile struct MC_ME_tag *) 0x40088000UL)
#define MC_RGM (*(volatile struct MC_RGM_tag *) 0x40078000UL)
#define MDM_AP (*(volatile struct MDM_AP_tag *) 0x51D00600UL)
#define MSCM (*(volatile struct MSCM_tag *) 0x40198000UL)
#define MTR_BIST (*(volatile struct MTR_tag *) 0UL)
#define MU0__MUA (*(volatile struct MU_tag *) 0x23258000UL)
#define MU1__MUA (*(volatile struct MU_tag *) 0x23259000UL)
#define MU2__MUA (*(volatile struct MU_tag *) 0x2325A000UL)
#define MU3__MUA (*(volatile struct MU_tag *) 0x2325B000UL)
#define MU0__MUB (*(volatile struct MU_tag *) 0x40210000UL)
#define MU1__MUB (*(volatile struct MU_tag *) 0x40211000UL)
#define MU2__MUB (*(volatile struct MU_tag *) 0x40212000UL)
#define MU3__MUB (*(volatile struct MU_tag *) 0x40213000UL)
#define NCBU0 (*(volatile struct NCBUID_reset_value_tag *) 0x50460000UL)
#define NCBU1 (*(volatile struct NCBUID_reset_value_tag *) 0x50461000UL)
#define OCOTP (*(volatile struct OCOTP_tag *) 0x400A4000UL)
#define PERIPH_PLL (*(volatile struct PERIPH_PLL_tag *) 0x4003C000UL)
#define PIT_1 (*(volatile struct PIT_tag *) 0x40288000UL)
#define PIT_0 (*(volatile struct PIT_tag *) 0x40188000UL)
#define PMC (*(volatile struct PMC_tag *) 0x4008C000UL)
#define PMUEVENTOBSERVER (*(volatile struct PMUEVENTOBSERVER_tag *) 0UL)
#define PERF_REGISTERS (*(volatile struct Perf_Registers_tag *) 0x403E0000UL)
#define QUADSPI (*(volatile struct QuadSPI_tag *) 0x40134000UL)
#define QUADSPI_ARDB (*(volatile struct QuadSPI_ARDB_tag *) 0x41000000UL)
#define REG_PROT (*(volatile struct REGISTER_PROTECTION_tag *) 0UL)
#define RDC (*(volatile struct RESET_tag *) 0x40080000UL)
#define RTC (*(volatile struct RTC_tag *) 0x40060000UL)
#define S32G_GPR (*(volatile struct S32G_GPR_tag *) 0x4007CA00UL)
#define S32G_STDBY_GPR (*(volatile struct S32G_STDBY_GPR_tag *) 0x4007CB00UL)
#define D_IP_SAFETY_BY_SW_SYN (*(volatile struct SBSW_tag *) 0x40310000UL)
#define SECURITY_CC (*(volatile struct SECURITY_tag *) 0x4007C900UL)
#define SELFTEST_GPR (*(volatile struct SELFTEST_GPR_tag *) 0x4001C000UL)
#define SELFTEST_GPR_TOP (*(volatile struct SELFTEST_GPR_TOP_tag *) 0x4001CFE0UL)
#define SEMA42 (*(volatile struct SEMA42_tag *) 0x40298000UL)
#define SERDES_0_GPR (*(volatile struct SERDES_0_GPR_tag *) 0x4007C500UL)
#define SIUL2_0 (*(volatile struct SIUL2_0_tag *) 0x4009C000UL)
#define SIUL2_1 (*(volatile struct SIUL2_1_tag *) 0x44010000UL)
#define SPI_3 (*(volatile struct SPI_tag *) 0x402C8000UL)
#define SPI_4 (*(volatile struct SPI_tag *) 0x402CC000UL)
#define SPI_5 (*(volatile struct SPI_tag *) 0x402D0000UL)
#define SPI_0 (*(volatile struct SPI_tag *) 0x401D4000UL)
#define SPI_1 (*(volatile struct SPI_tag *) 0x401D8000UL)
#define SPI_2 (*(volatile struct SPI_tag *) 0x401DC000UL)
#define SRAMC (*(volatile struct SRAMC_tag *) 0x4019C000UL)
#define SRAMC_1 (*(volatile struct SRAMC_tag *) 0x401A0000UL)
#define SRAM_STDBY_CFG (*(volatile struct SRAMC_tag *) 0x44028000UL)
#define SRC (*(volatile struct SRC_tag *) 0x4007C000UL)
#define STCU2 (*(volatile struct STCU2_tag *) 0x40028000UL)
#define STM_4 (*(volatile struct STM_tag *) 0x4021C000UL)
#define STM_5 (*(volatile struct STM_tag *) 0x40220000UL)
#define STM_6 (*(volatile struct STM_tag *) 0x40224000UL)
#define STM_7 (*(volatile struct STM_tag *) 0x40228000UL)
#define STM_0 (*(volatile struct STM_tag *) 0x4011C000UL)
#define STM_1 (*(volatile struct STM_tag *) 0x40120000UL)
#define STM_2 (*(volatile struct STM_tag *) 0x40124000UL)
#define STM_3 (*(volatile struct STM_tag *) 0x40128000UL)
#define STM_TS (*(volatile struct STM_TS_tag *) 0x4400C000UL)
#define SWT_4 (*(volatile struct SWT_tag *) 0x40200000UL)
#define SWT_5 (*(volatile struct SWT_tag *) 0x40204000UL)
#define SWT_6 (*(volatile struct SWT_tag *) 0x40208000UL)
#define SWT_0 (*(volatile struct SWT_tag *) 0x40100000UL)
#define SWT_1 (*(volatile struct SWT_tag *) 0x40104000UL)
#define SWT_2 (*(volatile struct SWT_tag *) 0x40108000UL)
#define SWT_3 (*(volatile struct SWT_tag *) 0x4010C000UL)
#define SERDES_1_GPR (*(volatile struct SerDes_1_GPR_tag *) 0x4007CC00UL)
#define TMU (*(volatile struct TMU_tag *) 0x400A8000UL)
#define UMCTL2_MP (*(volatile struct UMCTL2_MP_tag *) 0x403C03F8UL)
#define UMCTL2_REGS (*(volatile struct UMCTL2_REGS_tag *) 0x403C0000UL)
#define UOTG (*(volatile struct UOTG_tag *) 0x44064000UL)
#define UOTGNC (*(volatile struct UOTGNC_tag *) 0x44064200UL)
#define USDHC (*(volatile struct USDHC_tag *) 0x402F0000UL)
#define WKPU (*(volatile struct WKPU_tag *) 0x40090000UL)
#define XRDC_1 (*(volatile struct XRDC_tag *) 0x44004000UL)
#define XRDC_0 (*(volatile struct XRDC_0_tag *) 0x401A4000UL)
#define DDR_SUBSYSTEM (*(volatile struct ddr_subsystem_tag *) 0x403D0000UL)
#define EDMA_0_MP (*(volatile struct eDMA_0_MP_tag *) 0x40144000UL)
#define EDMA_0_TCD (*(volatile struct eDMA_0_TCD_tag *) 0x40148000UL)
#define EDMA_1_MP (*(volatile struct eDMA_1_MP_tag *) 0x40244000UL)
#define EDMA_1_TCD (*(volatile struct eDMA_1_TCD_tag *) 0x40248000UL)
#define OCOTP_GPR (*(volatile struct ocotp_gpr_tag *) 0x400A040UL)

/* A53_GPR */
#define A53_GPR_GPR00        A53_GPR.GPR00.R               /* GPR00 */
#define A53_GPR_GPR01        A53_GPR.GPR01.R               /* GPR01 */
#define A53_GPR_GPR06        A53_GPR.GPR06.R               /* GPR06 */
#define A53_GPR_GPR07        A53_GPR.GPR07.R               /* GPR07 */
#define A53_GPR_GPR08        A53_GPR.GPR08.R               /* GPR08 */
#define A53_GPR_GPR09        A53_GPR.GPR09.R               /* GPR09 */
#define A53_GPR_GPR10        A53_GPR.GPR10.R               /* GPR10 */
#define A53_GPR_GPR11        A53_GPR.GPR11.R               /* GPR11 */
#define A53_GPR_GPR12        A53_GPR.GPR12.R               /* GPR12 */
#define A53_GPR_GPR13        A53_GPR.GPR13.R               /* GPR13 */
#define A53_GPR_GPR14        A53_GPR.GPR14.R               /* GPR14 */
#define A53_GPR_GPR15        A53_GPR.GPR15.R               /* GPR15 */
#define A53_GPR_GPR16        A53_GPR.GPR16.R               /* GPR16 */
#define A53_GPR_GPR17        A53_GPR.GPR17.R               /* GPR17 */
#define A53_GPR_GPR18        A53_GPR.GPR18.R               /* GPR18 */
#define A53_GPR_GPR19        A53_GPR.GPR19.R               /* GPR19 */
#define A53_GPR_GPR20        A53_GPR.GPR20.R               /* GPR20 */
#define A53_GPR_GPR21        A53_GPR.GPR21.R               /* GPR21 */

/* ACCEL_PLL */
#define ACCEL_PLL_PLLCR      ACCEL_PLL.PLLCR.R             /* PLL Control Register */
#define ACCEL_PLL_PLLSR      ACCEL_PLL.PLLSR.R             /* PLL status register */
#define ACCEL_PLL_PLLDV      ACCEL_PLL.PLLDV.R             /* PLL Divider */
#define ACCEL_PLL_PLLFM      ACCEL_PLL.PLLFM.R             /* PLL Frequency Modulation */
#define ACCEL_PLL_PLLFD      ACCEL_PLL.PLLFD.R             /* PLL Fractional Divider */
#define ACCEL_PLL_PLLCLKMUX  ACCEL_PLL.PLLCLKMUX.R         /* PLL Clock Multiplexer */
#define ACCEL_PLL_PLLODIV_0  ACCEL_PLL.PLLODIV[0].R        /* PLL Output Divider */
#define ACCEL_PLL_PLLODIV_1  ACCEL_PLL.PLLODIV[1].R        /* PLL Output Divider */

/* ADC */
#define ADC_0_MCR            ADC_0.MCR.R                   /* Main Configuration Register */
#define ADC_0_MSR            ADC_0.MSR.R                   /* Main Status Register */
#define ADC_0_ISR            ADC_0.ISR.R                   /* Interrupt Status Register */
#define ADC_0_CEOCFR0        ADC_0.CEOCFR0.R               /* Channel Pending Register */
#define ADC_0_CEOCFR1        ADC_0.CEOCFR1.R               /* Channel Pending Register 1 */
#define ADC_0_IMR            ADC_0.IMR.R                   /* Interrupt Mask Register */
#define ADC_0_CIMR0          ADC_0.CIMR0.R                 /* Channel Interrupt Mask Register 0 */
#define ADC_0_CIMR1          ADC_0.CIMR1.R                 /* Channel Interrupt Mask Register 1 */
#define ADC_0_WTISR          ADC_0.WTISR.R                 /* Watchdog Threshold Interrupt Status Register */
#define ADC_0_WTIMR          ADC_0.WTIMR.R                 /* Watchdog Threshold Interrupt Mask Register */
#define ADC_0_DMAE           ADC_0.DMAE.R                  /* DMAE Register */
#define ADC_0_DMAR0          ADC_0.DMAR0.R                 /* DMA Register 0 */
#define ADC_0_DMAR1          ADC_0.DMAR1.R                 /* DMA Register 1 */
#define ADC_0_THRHLR0        ADC_0.THRHLR0.R               /* Analog Watchdog Threshold Register 0 */
#define ADC_0_THRHLR1        ADC_0.THRHLR1.R               /* Analog Watchdog Threshold Register 1 */
#define ADC_0_THRHLR2        ADC_0.THRHLR2.R               /* Analog Watchdog Threshold Register 2 */
#define ADC_0_THRHLR3        ADC_0.THRHLR3.R               /* Analog Watchdog Threshold Register 2 */
#define ADC_0_PSCR           ADC_0.PSCR.R                  /* Presampling Control Register */
#define ADC_0_PSR0           ADC_0.PSR0.R                  /* Presampling Register 0 */
#define ADC_0_PSR1           ADC_0.PSR1.R                  /* Presampling Register 1 */
#define ADC_0_CTR0           ADC_0.CTR0.R                  /* Conversion Timing Register 0 */
#define ADC_0_CTR1           ADC_0.CTR1.R                  /* Conversion Timing Register 1 */
#define ADC_0_NCMR0          ADC_0.NCMR0.R                 /* Normal Conversion Mask Register */
#define ADC_0_NCMR1          ADC_0.NCMR1.R                 /* Normal Conversion Mask Register */
#define ADC_0_JCMR0          ADC_0.JCMR0.R                 /* Injected Conversion Mask Register */
#define ADC_0_JCMR1          ADC_0.JCMR1.R                 /* Injected Conversion Mask Register */
#define ADC_0_USROFSGN       ADC_0.USROFSGN.R              /* User OFFSET and Gain Register */
#define ADC_0_PDEDR          ADC_0.PDEDR.R                 /* Power Down Exit Delay Register */
#define ADC_0_PCDR0          ADC_0.PCDR[0].R               /* Precision Channel n Data Register */
#define ADC_0_PCDR1          ADC_0.PCDR[1].R               /* Precision Channel n Data Register */
#define ADC_0_PCDR2          ADC_0.PCDR[2].R               /* Precision Channel n Data Register */
#define ADC_0_PCDR3          ADC_0.PCDR[3].R               /* Precision Channel n Data Register */
#define ADC_0_PCDR4          ADC_0.PCDR[4].R               /* Precision Channel n Data Register */
#define ADC_0_PCDR5          ADC_0.PCDR[5].R               /* Precision Channel n Data Register */
#define ADC_0_PCDR6          ADC_0.PCDR[6].R               /* Precision Channel n Data Register */
#define ADC_0_PCDR7          ADC_0.PCDR[7].R               /* Precision Channel n Data Register */
#define ADC_0_ICDR32         ADC_0.ICDR[0].R               /* Internal Channel n Data Register */
#define ADC_0_ICDR33         ADC_0.ICDR[1].R               /* Internal Channel n Data Register */
#define ADC_0_ICDR34         ADC_0.ICDR[2].R               /* Internal Channel n Data Register */
#define ADC_0_ICDR35         ADC_0.ICDR[3].R               /* Internal Channel n Data Register */
#define ADC_0_ICDR36         ADC_0.ICDR[4].R               /* Internal Channel n Data Register */
#define ADC_0_ICDR37         ADC_0.ICDR[5].R               /* Internal Channel n Data Register */
#define ADC_0_ICDR38         ADC_0.ICDR[6].R               /* Internal Channel n Data Register */
#define ADC_0_ICDR39         ADC_0.ICDR[7].R               /* Internal Channel n Data Register */
#define ADC_0_ICDR40         ADC_0.ICDR[8].R               /* Internal Channel n Data Register */
#define ADC_0_ICDR41         ADC_0.ICDR[9].R               /* Internal Channel n Data Register */
#define ADC_0_ICDR42         ADC_0.ICDR[10].R              /* Internal Channel n Data Register */
#define ADC_0_ICDR43         ADC_0.ICDR[11].R              /* Internal Channel n Data Register */
#define ADC_0_ICDR44         ADC_0.ICDR[12].R              /* Internal Channel n Data Register */
#define ADC_0_ICDR45         ADC_0.ICDR[13].R              /* Internal Channel n Data Register */
#define ADC_0_ICDR46         ADC_0.ICDR[14].R              /* Internal Channel n Data Register */
#define ADC_0_ICDR47         ADC_0.ICDR[15].R              /* Internal Channel n Data Register */
#define ADC_0_THRHLR4        ADC_0.THRHLR4.R               /* Analog Watchdog Threshold Register 4 */
#define ADC_0_THRHLR5        ADC_0.THRHLR5.R               /* Analog Watchdog Threshold Register 5 */
#define ADC_0_THRHLR6        ADC_0.THRHLR6.R               /* Analog Watchdog Threshold Register 6 */
#define ADC_0_THRHLR7        ADC_0.THRHLR7.R               /* Analog Watchdog Threshold Register 7 */
#define ADC_0_CWSELR0        ADC_0.CWSELR0.R               /* Channel Watchdog Select Register 0 */
#define ADC_0_CWSELR4        ADC_0.CWSELR4.R               /* Channel Watchdog Select Register 4 */
#define ADC_0_CWSELR5        ADC_0.CWSELR5.R               /* Channel Watchdog Select Register 5 */
#define ADC_0_CWENR0         ADC_0.CWENR0.R                /* Channel Watchdog Enable Register */
#define ADC_0_CWENR1         ADC_0.CWENR1.R                /* Channel Watchdog Enable Register */
#define ADC_0_AWORR0         ADC_0.AWORR0.R                /* Analog Watchdog Out of Range Register */
#define ADC_0_AWORR1         ADC_0.AWORR1.R                /* Analog Watchdog Out of Range Register */
#define ADC_0_STCR1          ADC_0.STCR1.R                 /* Self-Test Configuration Register 1 */
#define ADC_0_STCR2          ADC_0.STCR2.R                 /* Self-Test Configuration Register 2 */
#define ADC_0_STCR3          ADC_0.STCR3.R                 /* Self-Test Configuration Register 3 */
#define ADC_0_STBRR          ADC_0.STBRR.R                 /* Self-Test Baud Rate Register */
#define ADC_0_STSR1          ADC_0.STSR1.R                 /* Self-Test Status Register 1 */
#define ADC_0_STSR2          ADC_0.STSR2.R                 /* Self-Test Status Register 2 */
#define ADC_0_STSR3          ADC_0.STSR3.R                 /* Self-Test Status Register 3 */
#define ADC_0_STSR4          ADC_0.STSR4.R                 /* Self-Test Status Register 4 */
#define ADC_0_STDR1          ADC_0.STDR1.R                 /* Self-Test Data Register 1 */
#define ADC_0_STDR2          ADC_0.STDR2.R                 /* Self-Test Data Register 2 */
#define ADC_0_STAW0R         ADC_0.STAW0R.R                /* Self-Test Analog Watchdog Register */
#define ADC_0_STAW1AR        ADC_0.STAW1AR.R               /* Self-Test Analog Watchdog Register */
#define ADC_0_STAW1BR        ADC_0.STAW1BR.R               /* Self-Test Analog Watchdog Register 1B */
#define ADC_0_STAW2R         ADC_0.STAW2R.R                /* Self-Test Analog Watchdog Register 2 */
#define ADC_0_STAW3R         ADC_0.STAW3R.R                /* Self-Test Analog Watchdog Register 3 */
#define ADC_0_STAW4R         ADC_0.STAW4R.R                /* Self-Test Analog Watchdog Register 4 */
#define ADC_0_STAW5R         ADC_0.STAW5R.R                /* Self-Test Analog Watchdog Register 5 */
#define ADC_0_CALSTAT        ADC_0.CALSTAT.R               /* Calibration Status register */

#define ADC_1_MCR            ADC_1.MCR.R                   /* Main Configuration Register */
#define ADC_1_MSR            ADC_1.MSR.R                   /* Main Status Register */
#define ADC_1_ISR            ADC_1.ISR.R                   /* Interrupt Status Register */
#define ADC_1_CEOCFR0        ADC_1.CEOCFR0.R               /* Channel Pending Register */
#define ADC_1_CEOCFR1        ADC_1.CEOCFR1.R               /* Channel Pending Register 1 */
#define ADC_1_IMR            ADC_1.IMR.R                   /* Interrupt Mask Register */
#define ADC_1_CIMR0          ADC_1.CIMR0.R                 /* Channel Interrupt Mask Register 0 */
#define ADC_1_CIMR1          ADC_1.CIMR1.R                 /* Channel Interrupt Mask Register 1 */
#define ADC_1_WTISR          ADC_1.WTISR.R                 /* Watchdog Threshold Interrupt Status Register */
#define ADC_1_WTIMR          ADC_1.WTIMR.R                 /* Watchdog Threshold Interrupt Mask Register */
#define ADC_1_DMAE           ADC_1.DMAE.R                  /* DMAE Register */
#define ADC_1_DMAR0          ADC_1.DMAR0.R                 /* DMA Register 0 */
#define ADC_1_DMAR1          ADC_1.DMAR1.R                 /* DMA Register 1 */
#define ADC_1_THRHLR0        ADC_1.THRHLR0.R               /* Analog Watchdog Threshold Register 0 */
#define ADC_1_THRHLR1        ADC_1.THRHLR1.R               /* Analog Watchdog Threshold Register 1 */
#define ADC_1_THRHLR2        ADC_1.THRHLR2.R               /* Analog Watchdog Threshold Register 2 */
#define ADC_1_THRHLR3        ADC_1.THRHLR3.R               /* Analog Watchdog Threshold Register 2 */
#define ADC_1_PSCR           ADC_1.PSCR.R                  /* Presampling Control Register */
#define ADC_1_PSR0           ADC_1.PSR0.R                  /* Presampling Register 0 */
#define ADC_1_PSR1           ADC_1.PSR1.R                  /* Presampling Register 1 */
#define ADC_1_CTR0           ADC_1.CTR0.R                  /* Conversion Timing Register 0 */
#define ADC_1_CTR1           ADC_1.CTR1.R                  /* Conversion Timing Register 1 */
#define ADC_1_NCMR0          ADC_1.NCMR0.R                 /* Normal Conversion Mask Register */
#define ADC_1_NCMR1          ADC_1.NCMR1.R                 /* Normal Conversion Mask Register */
#define ADC_1_JCMR0          ADC_1.JCMR0.R                 /* Injected Conversion Mask Register */
#define ADC_1_JCMR1          ADC_1.JCMR1.R                 /* Injected Conversion Mask Register */
#define ADC_1_USROFSGN       ADC_1.USROFSGN.R              /* User OFFSET and Gain Register */
#define ADC_1_PDEDR          ADC_1.PDEDR.R                 /* Power Down Exit Delay Register */
#define ADC_1_PCDR0          ADC_1.PCDR[0].R               /* Precision Channel n Data Register */
#define ADC_1_PCDR1          ADC_1.PCDR[1].R               /* Precision Channel n Data Register */
#define ADC_1_PCDR2          ADC_1.PCDR[2].R               /* Precision Channel n Data Register */
#define ADC_1_PCDR3          ADC_1.PCDR[3].R               /* Precision Channel n Data Register */
#define ADC_1_PCDR4          ADC_1.PCDR[4].R               /* Precision Channel n Data Register */
#define ADC_1_PCDR5          ADC_1.PCDR[5].R               /* Precision Channel n Data Register */
#define ADC_1_PCDR6          ADC_1.PCDR[6].R               /* Precision Channel n Data Register */
#define ADC_1_PCDR7          ADC_1.PCDR[7].R               /* Precision Channel n Data Register */
#define ADC_1_ICDR32         ADC_1.ICDR[0].R               /* Internal Channel n Data Register */
#define ADC_1_ICDR33         ADC_1.ICDR[1].R               /* Internal Channel n Data Register */
#define ADC_1_ICDR34         ADC_1.ICDR[2].R               /* Internal Channel n Data Register */
#define ADC_1_ICDR35         ADC_1.ICDR[3].R               /* Internal Channel n Data Register */
#define ADC_1_ICDR36         ADC_1.ICDR[4].R               /* Internal Channel n Data Register */
#define ADC_1_ICDR37         ADC_1.ICDR[5].R               /* Internal Channel n Data Register */
#define ADC_1_ICDR38         ADC_1.ICDR[6].R               /* Internal Channel n Data Register */
#define ADC_1_ICDR39         ADC_1.ICDR[7].R               /* Internal Channel n Data Register */
#define ADC_1_ICDR40         ADC_1.ICDR[8].R               /* Internal Channel n Data Register */
#define ADC_1_ICDR41         ADC_1.ICDR[9].R               /* Internal Channel n Data Register */
#define ADC_1_ICDR42         ADC_1.ICDR[10].R              /* Internal Channel n Data Register */
#define ADC_1_ICDR43         ADC_1.ICDR[11].R              /* Internal Channel n Data Register */
#define ADC_1_ICDR44         ADC_1.ICDR[12].R              /* Internal Channel n Data Register */
#define ADC_1_ICDR45         ADC_1.ICDR[13].R              /* Internal Channel n Data Register */
#define ADC_1_ICDR46         ADC_1.ICDR[14].R              /* Internal Channel n Data Register */
#define ADC_1_ICDR47         ADC_1.ICDR[15].R              /* Internal Channel n Data Register */
#define ADC_1_THRHLR4        ADC_1.THRHLR4.R               /* Analog Watchdog Threshold Register 4 */
#define ADC_1_THRHLR5        ADC_1.THRHLR5.R               /* Analog Watchdog Threshold Register 5 */
#define ADC_1_THRHLR6        ADC_1.THRHLR6.R               /* Analog Watchdog Threshold Register 6 */
#define ADC_1_THRHLR7        ADC_1.THRHLR7.R               /* Analog Watchdog Threshold Register 7 */
#define ADC_1_CWSELR0        ADC_1.CWSELR0.R               /* Channel Watchdog Select Register 0 */
#define ADC_1_CWSELR4        ADC_1.CWSELR4.R               /* Channel Watchdog Select Register 4 */
#define ADC_1_CWSELR5        ADC_1.CWSELR5.R               /* Channel Watchdog Select Register 5 */
#define ADC_1_CWENR0         ADC_1.CWENR0.R                /* Channel Watchdog Enable Register */
#define ADC_1_CWENR1         ADC_1.CWENR1.R                /* Channel Watchdog Enable Register */
#define ADC_1_AWORR0         ADC_1.AWORR0.R                /* Analog Watchdog Out of Range Register */
#define ADC_1_AWORR1         ADC_1.AWORR1.R                /* Analog Watchdog Out of Range Register */
#define ADC_1_STCR1          ADC_1.STCR1.R                 /* Self-Test Configuration Register 1 */
#define ADC_1_STCR2          ADC_1.STCR2.R                 /* Self-Test Configuration Register 2 */
#define ADC_1_STCR3          ADC_1.STCR3.R                 /* Self-Test Configuration Register 3 */
#define ADC_1_STBRR          ADC_1.STBRR.R                 /* Self-Test Baud Rate Register */
#define ADC_1_STSR1          ADC_1.STSR1.R                 /* Self-Test Status Register 1 */
#define ADC_1_STSR2          ADC_1.STSR2.R                 /* Self-Test Status Register 2 */
#define ADC_1_STSR3          ADC_1.STSR3.R                 /* Self-Test Status Register 3 */
#define ADC_1_STSR4          ADC_1.STSR4.R                 /* Self-Test Status Register 4 */
#define ADC_1_STDR1          ADC_1.STDR1.R                 /* Self-Test Data Register 1 */
#define ADC_1_STDR2          ADC_1.STDR2.R                 /* Self-Test Data Register 2 */
#define ADC_1_STAW0R         ADC_1.STAW0R.R                /* Self-Test Analog Watchdog Register */
#define ADC_1_STAW1AR        ADC_1.STAW1AR.R               /* Self-Test Analog Watchdog Register */
#define ADC_1_STAW1BR        ADC_1.STAW1BR.R               /* Self-Test Analog Watchdog Register 1B */
#define ADC_1_STAW2R         ADC_1.STAW2R.R                /* Self-Test Analog Watchdog Register 2 */
#define ADC_1_STAW3R         ADC_1.STAW3R.R                /* Self-Test Analog Watchdog Register 3 */
#define ADC_1_STAW4R         ADC_1.STAW4R.R                /* Self-Test Analog Watchdog Register 4 */
#define ADC_1_STAW5R         ADC_1.STAW5R.R                /* Self-Test Analog Watchdog Register 5 */
#define ADC_1_CALSTAT        ADC_1.CALSTAT.R               /* Calibration Status register */

/* ATP */
#define ATP_PLLC             ATP.PLLC.R                    /* PLL Control */
#define ATP_PLLS             ATP.PLLS.R                    /* PLL Status */
#define ATP_PLLDIV           ATP.PLLDIV.R                  /* PLL Divider */
#define ATP_PLLCKMUX         ATP.PLLCKMUX.R                /* PLL Clock MUX */
#define ATP_ALS              ATP.ALS.R                     /* AL Status */
#define ATP_ALGC             ATP.ALGC.R                    /* AL General Control */
#define ATP_ALTC             ATP.ALTC.R                    /* AL Training Control */
#define ATP_LVDSTX           ATP.LVDSTX.R                  /* LVDS TX IO Configuration */
#define ATP_LVDSRX           ATP.LVDSRX.R                  /* LVDS RX IO Configuration */
#define ATP_LVDSTXOBE        ATP.LVDSTXOBE.R               /* LVDS TX OBE Configuration */
#define ATP_CIAC             ATP.CIAC.R                    /* CIA Control */
#define ATP_ATPE             ATP.ATPE.R                    /* Aurora Trace Port Enable */
#define ATP_ITCTRL           ATP.ITCTRL.R                  /* Integration Mode Control */
#define ATP_CLAIMSET         ATP.CLAIMSET.R                /* Claim Tag Set */
#define ATP_CLAIMCLR         ATP.CLAIMCLR.R                /* Claim Tag Clear */
#define ATP_DEVAFF0          ATP.DEVAFF0.R                 /* Device Affinity 0 */
#define ATP_DEVAFF1          ATP.DEVAFF1.R                 /* Device Affinity 1 */
#define ATP_LAR              ATP.LAR.R                     /* Lock Access Register */
#define ATP_LSR              ATP.LSR.R                     /* Lock Status Register */
#define ATP_AUTHSTATUS       ATP.AUTHSTATUS.R              /* Authentication Status */
#define ATP_DEVARCH          ATP.DEVARCH.R                 /* Device Architecture */
#define ATP_DEVID2           ATP.DEVID2.R                  /* Device Configuration 2 */
#define ATP_DEVID1           ATP.DEVID1.R                  /* Device Configuration 1 */
#define ATP_DEVID            ATP.DEVID.R                   /* Device Configuration */
#define ATP_DEVTYPE          ATP.DEVTYPE.R                 /* Device Type Identifier */
#define ATP_PIDR4            ATP.PIDR4.R                   /* Peripheral Identification Register 4 */
#define ATP_PIDR0            ATP.PIDR0.R                   /* Peripheral Identification Register 0 */
#define ATP_PIDR1            ATP.PIDR1.R                   /* Peripheral Identification Register 1 */
#define ATP_PIDR2            ATP.PIDR2.R                   /* Peripheral Identification Register 2 */
#define ATP_PIDR3            ATP.PIDR3.R                   /* Peripheral Identification Register 3 */
#define ATP_CIDR0            ATP.CIDR0.R                   /* Component Identification Register 0 */
#define ATP_CIDR1            ATP.CIDR1.R                   /* Component Identification Register 1 */
#define ATP_CIDR2            ATP.CIDR2.R                   /* Component Identification Register 2 */
#define ATP_CIDR3            ATP.CIDR3.R                   /* Component Identification Register 3 */

/* BOOT */
#define BOOT_CC_BOOT_GPR_BMR1 BOOT_CC.BOOT_GPR_BMR1.R      /* Boot Configuration Register 1 */
#define BOOT_CC_BOOT_GPR_BMR2 BOOT_CC.BOOT_GPR_BMR2.R      /* Boot Configuration Register 2 */
#define BOOT_CC_SRC_POR_CTRL_REG BOOT_CC.SRC_POR_CTRL_REG.R /* SRC POR Control Register */

/* CAIU0 */
#define CAIU0_CAIUTC         CAIU0.CAIUTC.R                /* CAIU Transaction Control */
#define CAIU0_CAIUTA         CAIU0.CAIUTA.R                /* CAIU Transaction Activity */
#define CAIU0_CAIUCEC        CAIU0.CAIUCEC.R               /* CAIU Correctable Error Control */
#define CAIU0_CAIUCES        CAIU0.CAIUCES.R               /* CAIU Correctable Error Status */
#define CAIU0_CAIUCELR0      CAIU0.CAIUCELR0.R             /* CAIU Correctable Error Location Register 0 */
#define CAIU0_CAIUCELR1      CAIU0.CAIUCELR1.R             /* CAIU Correctable Error Location Register 1 */
#define CAIU0_CAIUCESA       CAIU0.CAIUCESA.R              /* CAIU Correctable Error Status Alias */
#define CAIU0_CAIUUEC        CAIU0.CAIUUEC.R               /* CAIU Uncorrectable Error Control */
#define CAIU0_CAIUUES        CAIU0.CAIUUES.R               /* CAIU Uncorrectable Error Status */
#define CAIU0_CAIUUELR0      CAIU0.CAIUUELR0.R             /* CAIU Uncorrectable Error Location Register 0 */
#define CAIU0_CAIUUELR1      CAIU0.CAIUUELR1.R             /* CAIU Uncorrectable Error Location Register 1 */
#define CAIU0_CAIUUESA       CAIU0.CAIUUESA.R              /* CAIU Uncorrectable Error Status Alias */
#define CAIU0_CAIUID         CAIU0.CAIUID.R                /* CAIU Identification */

/* CAIU1 */
#define CAIU1_CAIUTC         CAIU1.CAIUTC.R                /* CAIU Transaction Control */
#define CAIU1_CAIUTA         CAIU1.CAIUTA.R                /* CAIU Transaction Activity */
#define CAIU1_CAIUCEC        CAIU1.CAIUCEC.R               /* CAIU Correctable Error Control */
#define CAIU1_CAIUCES        CAIU1.CAIUCES.R               /* CAIU Correctable Error Status */
#define CAIU1_CAIUCELR0      CAIU1.CAIUCELR0.R             /* CAIU Correctable Error Location Register 0 */
#define CAIU1_CAIUCELR1      CAIU1.CAIUCELR1.R             /* CAIU Correctable Error Location Register 1 */
#define CAIU1_CAIUCESA       CAIU1.CAIUCESA.R              /* CAIU Correctable Error Status Alias */
#define CAIU1_CAIUUEC        CAIU1.CAIUUEC.R               /* CAIU Uncorrectable Error Control */
#define CAIU1_CAIUUES        CAIU1.CAIUUES.R               /* CAIU Uncorrectable Error Status */
#define CAIU1_CAIUUELR0      CAIU1.CAIUUELR0.R             /* CAIU Uncorrectable Error Location Register 0 */
#define CAIU1_CAIUUELR1      CAIU1.CAIUUELR1.R             /* CAIU Uncorrectable Error Location Register 1 */
#define CAIU1_CAIUUESA       CAIU1.CAIUUESA.R              /* CAIU Uncorrectable Error Status Alias */
#define CAIU1_CAIUID         CAIU1.CAIUID.R                /* CAIU Identification */

/* CCTI_fault_ctrl */
#define CCTI_FAULT_CTRL_COREID CCTI_FAULT_CTRL.COREID.R    /* Core ID */
#define CCTI_FAULT_CTRL_REVISIONID CCTI_FAULT_CTRL.REVISIONID.R /* Revision ID */
#define CCTI_FAULT_CTRL_MISSION_FAULT0 CCTI_FAULT_CTRL.MISSION_FAULT[0].R /* Mission Fault 0 */
#define CCTI_FAULT_CTRL_MISSION_FAULT1 CCTI_FAULT_CTRL.MISSION_FAULT[1].R /* Mission Fault 1 */
#define CCTI_FAULT_CTRL_MISSION_FAULT2 CCTI_FAULT_CTRL.MISSION_FAULT[2].R /* Mission Fault 2 */
#define CCTI_FAULT_CTRL_MISSION_FAULT3 CCTI_FAULT_CTRL.MISSION_FAULT[3].R /* Mission Fault 3 */
#define CCTI_FAULT_CTRL_LATENT_FAULT0 CCTI_FAULT_CTRL.LATENT_FAULT[0].R /* Latent Fault 0 */
#define CCTI_FAULT_CTRL_LATENT_FAULT1 CCTI_FAULT_CTRL.LATENT_FAULT[1].R /* Latent Fault 1 */
#define CCTI_FAULT_CTRL_LATENT_FAULT2 CCTI_FAULT_CTRL.LATENT_FAULT[2].R /* Latent Fault 2 */
#define CCTI_FAULT_CTRL_LATENT_FAULT3 CCTI_FAULT_CTRL.LATENT_FAULT[3].R /* Latent Fault 3 */
#define CCTI_FAULT_CTRL_FAULTS CCTI_FAULT_CTRL.FAULTS.R    /* Faults */
#define CCTI_FAULT_CTRL_INTEN CCTI_FAULT_CTRL.INTEN.R      /* Interrupt Enable */
#define CCTI_FAULT_CTRL_INTCLR CCTI_FAULT_CTRL.INTCLR.R    /* Interrupt Clear */
#define CCTI_FAULT_CTRL_BISTCTL CCTI_FAULT_CTRL.BISTCTL.R  /* BIST Control */
#define CCTI_FAULT_CTRL_BIST_DONE CCTI_FAULT_CTRL.BIST_DONE.R /* BIST Done */
#define CCTI_FAULT_CTRL_BIST_TO1 CCTI_FAULT_CTRL.BIST_TO1.R /* BIST Timeout 1 */
#define CCTI_FAULT_CTRL_BIST_TO2 CCTI_FAULT_CTRL.BIST_TO2.R /* BIST Timeout 2 */

/* CM7_GPR */
#define CM7_GPR_0_CORTEXM7_GPR0 CM7_GPR_0.CORTEXM7_GPR0.R  /* CORTEXM7_GPR0 */

#define CM7_GPR_1_CORTEXM7_GPR0 CM7_GPR_1.CORTEXM7_GPR0.R  /* CORTEXM7_GPR0 */

#define CM7_GPR_2_CORTEXM7_GPR0 CM7_GPR_2.CORTEXM7_GPR0.R  /* CORTEXM7_GPR0 */

/* CMIU */
#define CMIU_CMIUTA          CMIU.CMIUTA.R                 /* CMIU Transaction Activity */
#define CMIU_CMIUCEC         CMIU.CMIUCEC.R                /* CMIU Correctable Error Control */
#define CMIU_CMIUCES         CMIU.CMIUCES.R                /* CMIU Correctable Error Status */
#define CMIU_CMIUCELR0       CMIU.CMIUCELR0.R              /* CMIU Correctable Error Location Register 0 */
#define CMIU_CMIUCELR1       CMIU.CMIUCELR1.R              /* CMIU Correctable Error Location Register 1 */
#define CMIU_CMIUCESA        CMIU.CMIUCESA.R               /* CMIU Correctable Error Status Alias */
#define CMIU_CMIUUEC         CMIU.CMIUUEC.R                /* CMIU Uncorrectable Error Control */
#define CMIU_CMIUUES         CMIU.CMIUUES.R                /* CMIU Uncorrectable Error Status */
#define CMIU_CMIUUELR0       CMIU.CMIUUELR0.R              /* CMIU Uncorrectable Error Location Register 0 */
#define CMIU_CMIUUELR1       CMIU.CMIUUELR1.R              /* CMIU Uncorrectable Error Location Register 1 */
#define CMIU_CMIUUESA        CMIU.CMIUUESA.R               /* CMIU Uncorrectable Error Status Alias */
#define CMIU_CMIUID          CMIU.CMIUID.R                 /* CMIU Identification Register */

/* CMU_FC */
#define CMU_FC_0_GCR         CMU_FC_0.GCR.R                /* Global Configuration Register */
#define CMU_FC_0_RCCR        CMU_FC_0.RCCR.R               /* Reference Count Configuration Register */
#define CMU_FC_0_HTCR        CMU_FC_0.HTCR.R               /* High Threshold Configuration Register */
#define CMU_FC_0_LTCR        CMU_FC_0.LTCR.R               /* Low Threshold Configuration Register */
#define CMU_FC_0_SR          CMU_FC_0.SR.R                 /* Status Register */
#define CMU_FC_0_IER         CMU_FC_0.IER.R                /* Interrupt Enable Register */

#define CMU_FC_6_GCR         CMU_FC_6.GCR.R                /* Global Configuration Register */
#define CMU_FC_6_RCCR        CMU_FC_6.RCCR.R               /* Reference Count Configuration Register */
#define CMU_FC_6_HTCR        CMU_FC_6.HTCR.R               /* High Threshold Configuration Register */
#define CMU_FC_6_LTCR        CMU_FC_6.LTCR.R               /* Low Threshold Configuration Register */
#define CMU_FC_6_SR          CMU_FC_6.SR.R                 /* Status Register */

#define CMU_FC_8_GCR         CMU_FC_8.GCR.R                /* Global Configuration Register */
#define CMU_FC_8_RCCR        CMU_FC_8.RCCR.R               /* Reference Count Configuration Register */
#define CMU_FC_8_HTCR        CMU_FC_8.HTCR.R               /* High Threshold Configuration Register */
#define CMU_FC_8_LTCR        CMU_FC_8.LTCR.R               /* Low Threshold Configuration Register */
#define CMU_FC_8_SR          CMU_FC_8.SR.R                 /* Status Register */

#define CMU_FC_9_GCR         CMU_FC_9.GCR.R                /* Global Configuration Register */
#define CMU_FC_9_RCCR        CMU_FC_9.RCCR.R               /* Reference Count Configuration Register */
#define CMU_FC_9_HTCR        CMU_FC_9.HTCR.R               /* High Threshold Configuration Register */
#define CMU_FC_9_LTCR        CMU_FC_9.LTCR.R               /* Low Threshold Configuration Register */
#define CMU_FC_9_SR          CMU_FC_9.SR.R                 /* Status Register */

#define CMU_FC_27_GCR        CMU_FC_27.GCR.R               /* Global Configuration Register */
#define CMU_FC_27_RCCR       CMU_FC_27.RCCR.R              /* Reference Count Configuration Register */
#define CMU_FC_27_HTCR       CMU_FC_27.HTCR.R              /* High Threshold Configuration Register */
#define CMU_FC_27_LTCR       CMU_FC_27.LTCR.R              /* Low Threshold Configuration Register */
#define CMU_FC_27_SR         CMU_FC_27.SR.R                /* Status Register */
#define CMU_FC_27_IER        CMU_FC_27.IER.R               /* Interrupt Enable Register */

#define CMU_FC_28_GCR        CMU_FC_28.GCR.R               /* Global Configuration Register */
#define CMU_FC_28_RCCR       CMU_FC_28.RCCR.R              /* Reference Count Configuration Register */
#define CMU_FC_28_HTCR       CMU_FC_28.HTCR.R              /* High Threshold Configuration Register */
#define CMU_FC_28_LTCR       CMU_FC_28.LTCR.R              /* Low Threshold Configuration Register */
#define CMU_FC_28_SR         CMU_FC_28.SR.R                /* Status Register */
#define CMU_FC_28_IER        CMU_FC_28.IER.R               /* Interrupt Enable Register */

#define CMU_FC_20_GCR        CMU_FC_20.GCR.R               /* Global Configuration Register */
#define CMU_FC_20_RCCR       CMU_FC_20.RCCR.R              /* Reference Count Configuration Register */
#define CMU_FC_20_HTCR       CMU_FC_20.HTCR.R              /* High Threshold Configuration Register */
#define CMU_FC_20_LTCR       CMU_FC_20.LTCR.R              /* Low Threshold Configuration Register */
#define CMU_FC_20_SR         CMU_FC_20.SR.R                /* Status Register */
#define CMU_FC_20_IER        CMU_FC_20.IER.R               /* Interrupt Enable Register */

#define CMU_FC_14_GCR        CMU_FC_14.GCR.R               /* Global Configuration Register */
#define CMU_FC_14_RCCR       CMU_FC_14.RCCR.R              /* Reference Count Configuration Register */
#define CMU_FC_14_HTCR       CMU_FC_14.HTCR.R              /* High Threshold Configuration Register */
#define CMU_FC_14_LTCR       CMU_FC_14.LTCR.R              /* Low Threshold Configuration Register */
#define CMU_FC_14_SR         CMU_FC_14.SR.R                /* Status Register */
#define CMU_FC_14_IER        CMU_FC_14.IER.R               /* Interrupt Enable Register */

#define CMU_FC_15_GCR        CMU_FC_15.GCR.R               /* Global Configuration Register */
#define CMU_FC_15_RCCR       CMU_FC_15.RCCR.R              /* Reference Count Configuration Register */
#define CMU_FC_15_HTCR       CMU_FC_15.HTCR.R              /* High Threshold Configuration Register */
#define CMU_FC_15_LTCR       CMU_FC_15.LTCR.R              /* Low Threshold Configuration Register */
#define CMU_FC_15_SR         CMU_FC_15.SR.R                /* Status Register */
#define CMU_FC_15_IER        CMU_FC_15.IER.R               /* Interrupt Enable Register */

#define CMU_FC_21_GCR        CMU_FC_21.GCR.R               /* Global Configuration Register */
#define CMU_FC_21_RCCR       CMU_FC_21.RCCR.R              /* Reference Count Configuration Register */
#define CMU_FC_21_HTCR       CMU_FC_21.HTCR.R              /* High Threshold Configuration Register */
#define CMU_FC_21_LTCR       CMU_FC_21.LTCR.R              /* Low Threshold Configuration Register */
#define CMU_FC_21_SR         CMU_FC_21.SR.R                /* Status Register */
#define CMU_FC_21_IER        CMU_FC_21.IER.R               /* Interrupt Enable Register */

#define CMU_FC_17_GCR        CMU_FC_17.GCR.R               /* Global Configuration Register */
#define CMU_FC_17_RCCR       CMU_FC_17.RCCR.R              /* Reference Count Configuration Register */
#define CMU_FC_17_HTCR       CMU_FC_17.HTCR.R              /* High Threshold Configuration Register */
#define CMU_FC_17_LTCR       CMU_FC_17.LTCR.R              /* Low Threshold Configuration Register */
#define CMU_FC_17_SR         CMU_FC_17.SR.R                /* Status Register */
#define CMU_FC_17_IER        CMU_FC_17.IER.R               /* Interrupt Enable Register */

#define CMU_FC_18_GCR        CMU_FC_18.GCR.R               /* Global Configuration Register */
#define CMU_FC_18_RCCR       CMU_FC_18.RCCR.R              /* Reference Count Configuration Register */
#define CMU_FC_18_HTCR       CMU_FC_18.HTCR.R              /* High Threshold Configuration Register */
#define CMU_FC_18_LTCR       CMU_FC_18.LTCR.R              /* Low Threshold Configuration Register */
#define CMU_FC_18_SR         CMU_FC_18.SR.R                /* Status Register */
#define CMU_FC_18_IER        CMU_FC_18.IER.R               /* Interrupt Enable Register */

#define CMU_FC_10_GCR        CMU_FC_10.GCR.R               /* Global Configuration Register */
#define CMU_FC_10_RCCR       CMU_FC_10.RCCR.R              /* Reference Count Configuration Register */
#define CMU_FC_10_HTCR       CMU_FC_10.HTCR.R              /* High Threshold Configuration Register */
#define CMU_FC_10_LTCR       CMU_FC_10.LTCR.R              /* Low Threshold Configuration Register */
#define CMU_FC_10_SR         CMU_FC_10.SR.R                /* Status Register */
#define CMU_FC_10_IER        CMU_FC_10.IER.R               /* Interrupt Enable Register */

#define CMU_FC_13_GCR        CMU_FC_13.GCR.R               /* Global Configuration Register */
#define CMU_FC_13_RCCR       CMU_FC_13.RCCR.R              /* Reference Count Configuration Register */
#define CMU_FC_13_HTCR       CMU_FC_13.HTCR.R              /* High Threshold Configuration Register */
#define CMU_FC_13_LTCR       CMU_FC_13.LTCR.R              /* Low Threshold Configuration Register */
#define CMU_FC_13_SR         CMU_FC_13.SR.R                /* Status Register */
#define CMU_FC_13_IER        CMU_FC_13.IER.R               /* Interrupt Enable Register */

#define CMU_FC_16_GCR        CMU_FC_16.GCR.R               /* Global Configuration Register */
#define CMU_FC_16_RCCR       CMU_FC_16.RCCR.R              /* Reference Count Configuration Register */
#define CMU_FC_16_HTCR       CMU_FC_16.HTCR.R              /* High Threshold Configuration Register */
#define CMU_FC_16_LTCR       CMU_FC_16.LTCR.R              /* Low Threshold Configuration Register */
#define CMU_FC_16_SR         CMU_FC_16.SR.R                /* Status Register */
#define CMU_FC_16_IER        CMU_FC_16.IER.R               /* Interrupt Enable Register */

#define CMU_FC_7_GCR         CMU_FC_7.GCR.R                /* Global Configuration Register */
#define CMU_FC_7_RCCR        CMU_FC_7.RCCR.R               /* Reference Count Configuration Register */
#define CMU_FC_7_HTCR        CMU_FC_7.HTCR.R               /* High Threshold Configuration Register */
#define CMU_FC_7_LTCR        CMU_FC_7.LTCR.R               /* Low Threshold Configuration Register */
#define CMU_FC_7_SR          CMU_FC_7.SR.R                 /* Status Register */
#define CMU_FC_7_IER         CMU_FC_7.IER.R                /* Interrupt Enable Register */

#define CMU_FC_5_GCR         CMU_FC_5.GCR.R                /* Global Configuration Register */
#define CMU_FC_5_RCCR        CMU_FC_5.RCCR.R               /* Reference Count Configuration Register */
#define CMU_FC_5_HTCR        CMU_FC_5.HTCR.R               /* High Threshold Configuration Register */
#define CMU_FC_5_LTCR        CMU_FC_5.LTCR.R               /* Low Threshold Configuration Register */
#define CMU_FC_5_SR          CMU_FC_5.SR.R                 /* Status Register */
#define CMU_FC_5_IER         CMU_FC_5.IER.R                /* Interrupt Enable Register */

#define CMU_FC_11_GCR        CMU_FC_11.GCR.R               /* Global Configuration Register */
#define CMU_FC_11_RCCR       CMU_FC_11.RCCR.R              /* Reference Count Configuration Register */
#define CMU_FC_11_HTCR       CMU_FC_11.HTCR.R              /* High Threshold Configuration Register */
#define CMU_FC_11_LTCR       CMU_FC_11.LTCR.R              /* Low Threshold Configuration Register */
#define CMU_FC_11_SR         CMU_FC_11.SR.R                /* Status Register */
#define CMU_FC_11_IER        CMU_FC_11.IER.R               /* Interrupt Enable Register */

#define CMU_FC_22_GCR        CMU_FC_22.GCR.R               /* Global Configuration Register */
#define CMU_FC_22_RCCR       CMU_FC_22.RCCR.R              /* Reference Count Configuration Register */
#define CMU_FC_22_HTCR       CMU_FC_22.HTCR.R              /* High Threshold Configuration Register */
#define CMU_FC_22_LTCR       CMU_FC_22.LTCR.R              /* Low Threshold Configuration Register */
#define CMU_FC_22_SR         CMU_FC_22.SR.R                /* Status Register */
#define CMU_FC_22_IER        CMU_FC_22.IER.R               /* Interrupt Enable Register */

#define CMU_FC_12_GCR        CMU_FC_12.GCR.R               /* Global Configuration Register */
#define CMU_FC_12_RCCR       CMU_FC_12.RCCR.R              /* Reference Count Configuration Register */
#define CMU_FC_12_HTCR       CMU_FC_12.HTCR.R              /* High Threshold Configuration Register */
#define CMU_FC_12_LTCR       CMU_FC_12.LTCR.R              /* Low Threshold Configuration Register */
#define CMU_FC_12_SR         CMU_FC_12.SR.R                /* Status Register */
#define CMU_FC_12_IER        CMU_FC_12.IER.R               /* Interrupt Enable Register */

#define CMU_FC_39_GCR        CMU_FC_39.GCR.R               /* Global Configuration Register */
#define CMU_FC_39_RCCR       CMU_FC_39.RCCR.R              /* Reference Count Configuration Register */
#define CMU_FC_39_HTCR       CMU_FC_39.HTCR.R              /* High Threshold Configuration Register */
#define CMU_FC_39_LTCR       CMU_FC_39.LTCR.R              /* Low Threshold Configuration Register */
#define CMU_FC_39_SR         CMU_FC_39.SR.R                /* Status Register */
#define CMU_FC_39_IER        CMU_FC_39.IER.R               /* Interrupt Enable Register */

#define CMU_FC_46_GCR        CMU_FC_46.GCR.R               /* Global Configuration Register */
#define CMU_FC_46_RCCR       CMU_FC_46.RCCR.R              /* Reference Count Configuration Register */
#define CMU_FC_46_HTCR       CMU_FC_46.HTCR.R              /* High Threshold Configuration Register */
#define CMU_FC_46_LTCR       CMU_FC_46.LTCR.R              /* Low Threshold Configuration Register */
#define CMU_FC_46_SR         CMU_FC_46.SR.R                /* Status Register */
#define CMU_FC_46_IER        CMU_FC_46.IER.R               /* Interrupt Enable Register */

#define CMU_FC_47_GCR        CMU_FC_47.GCR.R               /* Global Configuration Register */
#define CMU_FC_47_RCCR       CMU_FC_47.RCCR.R              /* Reference Count Configuration Register */
#define CMU_FC_47_HTCR       CMU_FC_47.HTCR.R              /* High Threshold Configuration Register */
#define CMU_FC_47_LTCR       CMU_FC_47.LTCR.R              /* Low Threshold Configuration Register */
#define CMU_FC_47_SR         CMU_FC_47.SR.R                /* Status Register */
#define CMU_FC_47_IER        CMU_FC_47.IER.R               /* Interrupt Enable Register */

#define CMU_FC_48_GCR        CMU_FC_48.GCR.R               /* Global Configuration Register */
#define CMU_FC_48_RCCR       CMU_FC_48.RCCR.R              /* Reference Count Configuration Register */
#define CMU_FC_48_HTCR       CMU_FC_48.HTCR.R              /* High Threshold Configuration Register */
#define CMU_FC_48_LTCR       CMU_FC_48.LTCR.R              /* Low Threshold Configuration Register */
#define CMU_FC_48_SR         CMU_FC_48.SR.R                /* Status Register */
#define CMU_FC_48_IER        CMU_FC_48.IER.R               /* Interrupt Enable Register */

#define CMU_FC_49_GCR        CMU_FC_49.GCR.R               /* Global Configuration Register */
#define CMU_FC_49_RCCR       CMU_FC_49.RCCR.R              /* Reference Count Configuration Register */
#define CMU_FC_49_HTCR       CMU_FC_49.HTCR.R              /* High Threshold Configuration Register */
#define CMU_FC_49_LTCR       CMU_FC_49.LTCR.R              /* Low Threshold Configuration Register */
#define CMU_FC_49_SR         CMU_FC_49.SR.R                /* Status Register */
#define CMU_FC_49_IER        CMU_FC_49.IER.R               /* Interrupt Enable Register */

#define CMU_FC_50_GCR        CMU_FC_50.GCR.R               /* Global Configuration Register */
#define CMU_FC_50_RCCR       CMU_FC_50.RCCR.R              /* Reference Count Configuration Register */
#define CMU_FC_50_HTCR       CMU_FC_50.HTCR.R              /* High Threshold Configuration Register */
#define CMU_FC_50_LTCR       CMU_FC_50.LTCR.R              /* Low Threshold Configuration Register */
#define CMU_FC_50_SR         CMU_FC_50.SR.R                /* Status Register */
#define CMU_FC_50_IER        CMU_FC_50.IER.R               /* Interrupt Enable Register */

#define CMU_FC_51_GCR        CMU_FC_51.GCR.R               /* Global Configuration Register */
#define CMU_FC_51_RCCR       CMU_FC_51.RCCR.R              /* Reference Count Configuration Register */
#define CMU_FC_51_HTCR       CMU_FC_51.HTCR.R              /* High Threshold Configuration Register */
#define CMU_FC_51_LTCR       CMU_FC_51.LTCR.R              /* Low Threshold Configuration Register */
#define CMU_FC_51_SR         CMU_FC_51.SR.R                /* Status Register */
#define CMU_FC_51_IER        CMU_FC_51.IER.R               /* Interrupt Enable Register */

/* CMU_FM */
#define CMU_FM_4_GCR         CMU_FM_4.GCR.R                /* CMU Frequency Meter Global Configuration Register */
#define CMU_FM_4_RCCR        CMU_FM_4.RCCR.R               /* CMU Frequency Meter Reference Count Configuration Register */
#define CMU_FM_4_SR          CMU_FM_4.SR.R                 /* CMU Frequency Meter Status Register */

#define CMU_FM_3_GCR         CMU_FM_3.GCR.R                /* CMU Frequency Meter Global Configuration Register */
#define CMU_FM_3_RCCR        CMU_FM_3.RCCR.R               /* CMU Frequency Meter Reference Count Configuration Register */
#define CMU_FM_3_SR          CMU_FM_3.SR.R                 /* CMU Frequency Meter Status Register */

#define CMU_FM_1_GCR         CMU_FM_1.GCR.R                /* CMU Frequency Meter Global Configuration Register */
#define CMU_FM_1_RCCR        CMU_FM_1.RCCR.R               /* CMU Frequency Meter Reference Count Configuration Register */
#define CMU_FM_1_SR          CMU_FM_1.SR.R                 /* CMU Frequency Meter Status Register */

#define CMU_FM_2_GCR         CMU_FM_2.GCR.R                /* CMU Frequency Meter Global Configuration Register */
#define CMU_FM_2_RCCR        CMU_FM_2.RCCR.R               /* CMU Frequency Meter Reference Count Configuration Register */
#define CMU_FM_2_SR          CMU_FM_2.SR.R                 /* CMU Frequency Meter Status Register */

/* CORE_PLL */
#define CORE_PLL_PLLCR       CORE_PLL.PLLCR.R              /* PLL Control Register */
#define CORE_PLL_PLLSR       CORE_PLL.PLLSR.R              /* PLL status register */
#define CORE_PLL_PLLDV       CORE_PLL.PLLDV.R              /* PLL Divider */
#define CORE_PLL_PLLFM       CORE_PLL.PLLFM.R              /* PLL Frequency Modulation */
#define CORE_PLL_PLLFD       CORE_PLL.PLLFD.R              /* PLL Fractional Divider */
#define CORE_PLL_PLLCLKMUX   CORE_PLL.PLLCLKMUX.R          /* PLL Clock Multiplexer */
#define CORE_PLL_PLLODIV_0   CORE_PLL.PLLODIV[0].R         /* PLL Output Divider */
#define CORE_PLL_PLLODIV_1   CORE_PLL.PLLODIV[1].R         /* PLL Output Divider */

/* CRC_0 */
#define CRC_0_CFG1           CRC_0.CHANNEL[0].CFG.R        /* Configuration Register */
#define CRC_0_INP1           CRC_0.CHANNEL[0].INP.R        /* Input Register */
#define CRC_0_CSTAT1         CRC_0.CHANNEL[0].CSTAT.R      /* Current Status Register */
#define CRC_0_OUTP1          CRC_0.CHANNEL[0].OUTP.R       /* Output Register */
#define CRC_0_CFG2           CRC_0.CHANNEL[1].CFG.R        /* Configuration Register */
#define CRC_0_INP2           CRC_0.CHANNEL[1].INP.R        /* Input Register */
#define CRC_0_CSTAT2         CRC_0.CHANNEL[1].CSTAT.R      /* Current Status Register */
#define CRC_0_OUTP2          CRC_0.CHANNEL[1].OUTP.R       /* Output Register */
#define CRC_0_CFG3           CRC_0.CHANNEL[2].CFG.R        /* Configuration Register */
#define CRC_0_INP3           CRC_0.CHANNEL[2].INP.R        /* Input Register */
#define CRC_0_CSTAT3         CRC_0.CHANNEL[2].CSTAT.R      /* Current Status Register */
#define CRC_0_OUTP3          CRC_0.CHANNEL[2].OUTP.R       /* Output Register */

/* CSR */
#define CSR_CSADSE0          CSR.CSADSE0.R                 /* Coherent Subsystem ACE DVM Snoop Enable */
#define CSR_CSADSA           CSR.CSADSA.R                  /* Coherent Subsystem ACE DVM Snoop Activity */
#define CSR_CSCEIS0          CSR.CSCEIS0.R                 /* Coherent Subsystem Correctable Error Interrupt Status */
#define CSR_CSCEIS3          CSR.CSCEIS3.R                 /* Coherent Subsystem Correctable Error Interrupt Status */
#define CSR_CSCEIS4          CSR.CSCEIS4.R                 /* Coherent Subsystem Correctable Error Interrupt Status */
#define CSR_CSCEIS6          CSR.CSCEIS6.R                 /* Coherent Subsystem Correctable Error Interrupt Status */
#define CSR_CSUEIS0          CSR.CSUEIS0.R                 /* Coherent Subsystem Uncorrectable Error Interrupt Status */
#define CSR_CSUEIS3          CSR.CSUEIS3.R                 /* Coherent Subsystem Uncorrectable Error Interrupt Status */
#define CSR_CSUEIS4          CSR.CSUEIS4.R                 /* Coherent Subsystem Uncorrectable Error Interrupt Status */
#define CSR_CSUEIS6          CSR.CSUEIS6.R                 /* Coherent Subsystem Uncorrectable Error Interrupt Status */
#define CSR_CSSFIDR0         CSR.CSSFIDR[0].R              /* Coherent Subsystem Snoop Filter Identification */
#define CSR_CSSFIDR1         CSR.CSSFIDR[1].R              /* Coherent Subsystem Snoop Filter Identification */
#define CSR_CSSFIDR2         CSR.CSSFIDR[2].R              /* Coherent Subsystem Snoop Filter Identification */
#define CSR_CSSFIDR3         CSR.CSSFIDR[3].R              /* Coherent Subsystem Snoop Filter Identification */
#define CSR_CSSFIDR4         CSR.CSSFIDR[4].R              /* Coherent Subsystem Snoop Filter Identification */
#define CSR_CSSFIDR5         CSR.CSSFIDR[5].R              /* Coherent Subsystem Snoop Filter Identification */
#define CSR_CSSFIDR6         CSR.CSSFIDR[6].R              /* Coherent Subsystem Snoop Filter Identification */
#define CSR_CSSFIDR7         CSR.CSSFIDR[7].R              /* Coherent Subsystem Snoop Filter Identification */
#define CSR_CSSFIDR8         CSR.CSSFIDR[8].R              /* Coherent Subsystem Snoop Filter Identification */
#define CSR_CSSFIDR9         CSR.CSSFIDR[9].R              /* Coherent Subsystem Snoop Filter Identification */
#define CSR_CSSFIDR10        CSR.CSSFIDR[10].R             /* Coherent Subsystem Snoop Filter Identification */
#define CSR_CSSFIDR11        CSR.CSSFIDR[11].R             /* Coherent Subsystem Snoop Filter Identification */
#define CSR_CSSFIDR12        CSR.CSSFIDR[12].R             /* Coherent Subsystem Snoop Filter Identification */
#define CSR_CSSFIDR13        CSR.CSSFIDR[13].R             /* Coherent Subsystem Snoop Filter Identification */
#define CSR_CSSFIDR14        CSR.CSSFIDR[14].R             /* Coherent Subsystem Snoop Filter Identification */
#define CSR_CSSFIDR15        CSR.CSSFIDR[15].R             /* Coherent Subsystem Snoop Filter Identification */
#define CSR_CSSFIDR16        CSR.CSSFIDR[16].R             /* Coherent Subsystem Snoop Filter Identification */
#define CSR_CSSFIDR17        CSR.CSSFIDR[17].R             /* Coherent Subsystem Snoop Filter Identification */
#define CSR_CSSFIDR18        CSR.CSSFIDR[18].R             /* Coherent Subsystem Snoop Filter Identification */
#define CSR_CSSFIDR19        CSR.CSSFIDR[19].R             /* Coherent Subsystem Snoop Filter Identification */
#define CSR_CSSFIDR20        CSR.CSSFIDR[20].R             /* Coherent Subsystem Snoop Filter Identification */
#define CSR_CSSFIDR21        CSR.CSSFIDR[21].R             /* Coherent Subsystem Snoop Filter Identification */
#define CSR_CSSFIDR22        CSR.CSSFIDR[22].R             /* Coherent Subsystem Snoop Filter Identification */
#define CSR_CSSFIDR23        CSR.CSSFIDR[23].R             /* Coherent Subsystem Snoop Filter Identification */
#define CSR_CSSFIDR24        CSR.CSSFIDR[24].R             /* Coherent Subsystem Snoop Filter Identification */
#define CSR_CSSFIDR25        CSR.CSSFIDR[25].R             /* Coherent Subsystem Snoop Filter Identification */
#define CSR_CSSFIDR26        CSR.CSSFIDR[26].R             /* Coherent Subsystem Snoop Filter Identification */
#define CSR_CSSFIDR27        CSR.CSSFIDR[27].R             /* Coherent Subsystem Snoop Filter Identification */
#define CSR_CSSFIDR28        CSR.CSSFIDR[28].R             /* Coherent Subsystem Snoop Filter Identification */
#define CSR_CSSFIDR29        CSR.CSSFIDR[29].R             /* Coherent Subsystem Snoop Filter Identification */
#define CSR_CSSFIDR30        CSR.CSSFIDR[30].R             /* Coherent Subsystem Snoop Filter Identification */
#define CSR_CSSFIDR31        CSR.CSSFIDR[31].R             /* Coherent Subsystem Snoop Filter Identification */
#define CSR_CSUID            CSR.CSUID.R                   /* Coherent Subsystem Unit Identification */
#define CSR_CSID             CSR.CSID.R                    /* Coherent Subsystem Identification */

/* CTU */
#define CTU_TGSISR           CTU.TGSISR.R                  /* Trigger Generator Subunit Input Selection Register */
#define CTU_TGSCR            CTU.TGSCR.R                   /* Trigger Generator Subunit Control Register */
#define CTU_T0CR             CTU.TCR[0].R                  /* Trigger Compare Register */
#define CTU_T1CR             CTU.TCR[1].R                  /* Trigger Compare Register */
#define CTU_T2CR             CTU.TCR[2].R                  /* Trigger Compare Register */
#define CTU_T3CR             CTU.TCR[3].R                  /* Trigger Compare Register */
#define CTU_T4CR             CTU.TCR[4].R                  /* Trigger Compare Register */
#define CTU_T5CR             CTU.TCR[5].R                  /* Trigger Compare Register */
#define CTU_T6CR             CTU.TCR[6].R                  /* Trigger Compare Register */
#define CTU_T7CR             CTU.TCR[7].R                  /* Trigger Compare Register */
#define CTU_TGSCCR           CTU.TGSCCR.R                  /* TGS Counter Compare Register */
#define CTU_TGSCRR           CTU.TGSCRR.R                  /* TGS Counter Reload Register */
#define CTU_CLCR1            CTU.CLCR1.R                   /* Commands List Control Register 1 */
#define CTU_CLCR2            CTU.CLCR2.R                   /* Commands List Control Register 2 */
#define CTU_THCR1            CTU.THCR1.R                   /* Trigger Handler Control Register 1 */
#define CTU_THCR2            CTU.THCR2.R                   /* Trigger Handler Control Register 2 */
#define CTU_CLR_A_1          CTU.CLR[0].A.R                /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_1          CTU.CLR[0].B.R                /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_1          CTU.CLR[0].C.R                /* Command List Register C for self-test commands */
#define CTU_CLR_A_2          CTU.CLR[1].A.R                /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_2          CTU.CLR[1].B.R                /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_2          CTU.CLR[1].C.R                /* Command List Register C for self-test commands */
#define CTU_CLR_A_3          CTU.CLR[2].A.R                /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_3          CTU.CLR[2].B.R                /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_3          CTU.CLR[2].C.R                /* Command List Register C for self-test commands */
#define CTU_CLR_A_4          CTU.CLR[3].A.R                /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_4          CTU.CLR[3].B.R                /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_4          CTU.CLR[3].C.R                /* Command List Register C for self-test commands */
#define CTU_CLR_A_5          CTU.CLR[4].A.R                /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_5          CTU.CLR[4].B.R                /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_5          CTU.CLR[4].C.R                /* Command List Register C for self-test commands */
#define CTU_CLR_A_6          CTU.CLR[5].A.R                /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_6          CTU.CLR[5].B.R                /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_6          CTU.CLR[5].C.R                /* Command List Register C for self-test commands */
#define CTU_CLR_A_7          CTU.CLR[6].A.R                /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_7          CTU.CLR[6].B.R                /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_7          CTU.CLR[6].C.R                /* Command List Register C for self-test commands */
#define CTU_CLR_A_8          CTU.CLR[7].A.R                /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_8          CTU.CLR[7].B.R                /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_8          CTU.CLR[7].C.R                /* Command List Register C for self-test commands */
#define CTU_CLR_A_9          CTU.CLR[8].A.R                /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_9          CTU.CLR[8].B.R                /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_9          CTU.CLR[8].C.R                /* Command List Register C for self-test commands */
#define CTU_CLR_A_10         CTU.CLR[9].A.R                /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_10         CTU.CLR[9].B.R                /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_10         CTU.CLR[9].C.R                /* Command List Register C for self-test commands */
#define CTU_CLR_A_11         CTU.CLR[10].A.R               /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_11         CTU.CLR[10].B.R               /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_11         CTU.CLR[10].C.R               /* Command List Register C for self-test commands */
#define CTU_CLR_A_12         CTU.CLR[11].A.R               /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_12         CTU.CLR[11].B.R               /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_12         CTU.CLR[11].C.R               /* Command List Register C for self-test commands */
#define CTU_CLR_A_13         CTU.CLR[12].A.R               /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_13         CTU.CLR[12].B.R               /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_13         CTU.CLR[12].C.R               /* Command List Register C for self-test commands */
#define CTU_CLR_A_14         CTU.CLR[13].A.R               /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_14         CTU.CLR[13].B.R               /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_14         CTU.CLR[13].C.R               /* Command List Register C for self-test commands */
#define CTU_CLR_A_15         CTU.CLR[14].A.R               /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_15         CTU.CLR[14].B.R               /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_15         CTU.CLR[14].C.R               /* Command List Register C for self-test commands */
#define CTU_CLR_A_16         CTU.CLR[15].A.R               /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_16         CTU.CLR[15].B.R               /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_16         CTU.CLR[15].C.R               /* Command List Register C for self-test commands */
#define CTU_CLR_A_17         CTU.CLR[16].A.R               /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_17         CTU.CLR[16].B.R               /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_17         CTU.CLR[16].C.R               /* Command List Register C for self-test commands */
#define CTU_CLR_A_18         CTU.CLR[17].A.R               /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_18         CTU.CLR[17].B.R               /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_18         CTU.CLR[17].C.R               /* Command List Register C for self-test commands */
#define CTU_CLR_A_19         CTU.CLR[18].A.R               /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_19         CTU.CLR[18].B.R               /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_19         CTU.CLR[18].C.R               /* Command List Register C for self-test commands */
#define CTU_CLR_A_20         CTU.CLR[19].A.R               /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_20         CTU.CLR[19].B.R               /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_20         CTU.CLR[19].C.R               /* Command List Register C for self-test commands */
#define CTU_CLR_A_21         CTU.CLR[20].A.R               /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_21         CTU.CLR[20].B.R               /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_21         CTU.CLR[20].C.R               /* Command List Register C for self-test commands */
#define CTU_CLR_A_22         CTU.CLR[21].A.R               /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_22         CTU.CLR[21].B.R               /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_22         CTU.CLR[21].C.R               /* Command List Register C for self-test commands */
#define CTU_CLR_A_23         CTU.CLR[22].A.R               /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_23         CTU.CLR[22].B.R               /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_23         CTU.CLR[22].C.R               /* Command List Register C for self-test commands */
#define CTU_CLR_A_24         CTU.CLR[23].A.R               /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_24         CTU.CLR[23].B.R               /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_24         CTU.CLR[23].C.R               /* Command List Register C for self-test commands */
#define CTU_FDCR             CTU.FDCR.R                    /* FIFO DMA Control Register */
#define CTU_FCR              CTU.FCR.R                     /* FIFO Control Register */
#define CTU_FTH              CTU.FTH.R                     /* FIFO Threshold Register */
#define CTU_FST              CTU.FST.R                     /* FIFO Status Register */
#define CTU_FR0              CTU.FR[0].R                   /* FIFO Right Aligned Data Register */
#define CTU_FR1              CTU.FR[1].R                   /* FIFO Right Aligned Data Register */
#define CTU_FR2              CTU.FR[2].R                   /* FIFO Right Aligned Data Register */
#define CTU_FR3              CTU.FR[3].R                   /* FIFO Right Aligned Data Register */
#define CTU_FL0              CTU.FL[0].R                   /* FIFO Signed Left Aligned Data Register */
#define CTU_FL1              CTU.FL[1].R                   /* FIFO Signed Left Aligned Data Register */
#define CTU_FL2              CTU.FL[2].R                   /* FIFO Signed Left Aligned Data Register */
#define CTU_FL3              CTU.FL[3].R                   /* FIFO Signed Left Aligned Data Register */
#define CTU_EFR              CTU.EFR.R                     /* Error Flag Register */
#define CTU_IFR              CTU.IFR.R                     /* Interrupt Flag Register */
#define CTU_IR               CTU.IR.R                      /* Interrupt/DMA Register */
#define CTU_COTR             CTU.COTR.R                    /* Control ON Time Register */
#define CTU_CR               CTU.CR.R                      /* Control Register */
#define CTU_DFR              CTU.DFR.R                     /* Digital Filter Register */
#define CTU_EXPAR            CTU.EXPAR.R                   /* Expected Value A Register */
#define CTU_EXPBR            CTU.EXPBR.R                   /* Expected Value B Register */
#define CTU_CNTRNGR          CTU.CNTRNGR.R                 /* Counter Range Register */
#define CTU_LISTCSR          CTU.LISTCSR.R                 /* List Control/Status Register */

/* DDR_GPR */
#define DDR_GPR_DDR_Config_0 DDR_GPR.DDR_CONFIG_0.R        /* Configuration 0 Register */
#define DDR_GPR_DDR_Config_1 DDR_GPR.DDR_CONFIG_1.R        /* Configuration 1 Register */
#define DDR_GPR_DDR_Config_2 DDR_GPR.DDR_CONFIG_2.R        /* Configuration 2 Register */
#define DDR_GPR_DDR_Config_3 DDR_GPR.DDR_CONFIG_3.R        /* Configuration 3 Register */
#define DDR_GPR_DDR_Config_4 DDR_GPR.DDR_CONFIG_4.R        /* Configuration 4 Register */
#define DDR_GPR_DDR_Config_5 DDR_GPR.DDR_CONFIG_5.R        /* Configuration 5 Register */
#define DDR_GPR_DDR_Config_6 DDR_GPR.DDR_CONFIG_6.R        /* Configuration 6 Register */
#define DDR_GPR_DDR_RET_CONTROL DDR_GPR.DDR_RET_CONTROL.R  /* LP3 IO Retention Control Register */

/* DDR_PLL */
#define DDR_PLL_PLLCR        DDR_PLL.PLLCR.R               /* PLL Control Register */
#define DDR_PLL_PLLSR        DDR_PLL.PLLSR.R               /* PLL status register */
#define DDR_PLL_PLLDV        DDR_PLL.PLLDV.R               /* PLL Divider */
#define DDR_PLL_PLLFM        DDR_PLL.PLLFM.R               /* PLL Frequency Modulation */
#define DDR_PLL_PLLFD        DDR_PLL.PLLFD.R               /* PLL Fractional Divider */
#define DDR_PLL_PLLCLKMUX    DDR_PLL.PLLCLKMUX.R           /* PLL Clock Multiplexer */
#define DDR_PLL_PLLODIV_0    DDR_PLL.PLLODIV[0].R          /* PLL Output Divider */

/* DFS */
#define CORE_DFS_PORTSR      CORE_DFS.PORTSR.R             /* Port status register */
#define CORE_DFS_PORTLOLSR   CORE_DFS.PORTLOLSR.R          /* Port Loss of Lock Status */
#define CORE_DFS_PORTRESET   CORE_DFS.PORTRESET.R          /* Port Reset */
#define CORE_DFS_CTL         CORE_DFS.CTL.R                /* Control */
#define CORE_DFS_DVPORT0     CORE_DFS.DVPORT[0].R          /* Divider for Port 0 */
#define CORE_DFS_DVPORT1     CORE_DFS.DVPORT[1].R          /* Divider for Port 1 */
#define CORE_DFS_DVPORT2     CORE_DFS.DVPORT[2].R          /* Divider for Port 2 */
#define CORE_DFS_DVPORT3     CORE_DFS.DVPORT[3].R          /* Divider for Port 3 */
#define CORE_DFS_DVPORT4     CORE_DFS.DVPORT[4].R          /* Divider for Port 4 */
#define CORE_DFS_DVPORT5     CORE_DFS.DVPORT[5].R          /* Divider for Port 5 */

#define PERIPH_DFS_PORTSR    PERIPH_DFS.PORTSR.R           /* Port status register */
#define PERIPH_DFS_PORTLOLSR PERIPH_DFS.PORTLOLSR.R        /* Port Loss of Lock Status */
#define PERIPH_DFS_PORTRESET PERIPH_DFS.PORTRESET.R        /* Port Reset */
#define PERIPH_DFS_CTL       PERIPH_DFS.CTL.R              /* Control */
#define PERIPH_DFS_DVPORT0   PERIPH_DFS.DVPORT[0].R        /* Divider for Port 0 */
#define PERIPH_DFS_DVPORT1   PERIPH_DFS.DVPORT[1].R        /* Divider for Port 1 */
#define PERIPH_DFS_DVPORT2   PERIPH_DFS.DVPORT[2].R        /* Divider for Port 2 */
#define PERIPH_DFS_DVPORT3   PERIPH_DFS.DVPORT[3].R        /* Divider for Port 3 */
#define PERIPH_DFS_DVPORT4   PERIPH_DFS.DVPORT[4].R        /* Divider for Port 4 */
#define PERIPH_DFS_DVPORT5   PERIPH_DFS.DVPORT[5].R        /* Divider for Port 5 */

/* DIRU */
#define DIRU_DIRUTA          DIRU.DIRUTA.R                 /* DIRU Transaction Activity */
#define DIRU_DIRUSFE         DIRU.DIRUSFE.R                /* DIRU Snoop Filtering Enable */
#define DIRU_DIRUCASE0       DIRU.DIRUCASE0.R              /* DIRU Caching Agent Snoop Enable */
#define DIRU_DIRUCASA0       DIRU.DIRUCASA0.R              /* DIRU Caching Agent Snoop Activity */
#define DIRU_DIRUSFMC        DIRU.DIRUSFMC.R               /* DIRU Snoop Filter Maintenance Control */
#define DIRU_DIRUSFMA        DIRU.DIRUSFMA.R               /* DIRU Snoop Filter Maintenance Activity */
#define DIRU_DIRUSFMLR0      DIRU.DIRUSFMLR0.R             /* DIRU Snoop Filter Maintenance Location Register 0 */
#define DIRU_DIRUSFMLR1      DIRU.DIRUSFMLR1.R             /* DIRU Snoop Filter Maintenance Location Register 1 */
#define DIRU_DIRUCEC         DIRU.DIRUCEC.R                /* DIRU Correctable Error Control */
#define DIRU_DIRUCES         DIRU.DIRUCES.R                /* DIRU Correctable Error Status */
#define DIRU_DIRUCELR0       DIRU.DIRUCELR0.R              /* DIRU Correctable Error Location Register 0 */
#define DIRU_DIRUCELR1       DIRU.DIRUCELR1.R              /* DIRU Correctable Error Location Register 1 */
#define DIRU_DIRUCESA        DIRU.DIRUCESA.R               /* DIRU Correctable Error Status Alias */
#define DIRU_DIRUUEC         DIRU.DIRUUEC.R                /* DIRU Uncorrectable Error Control */
#define DIRU_DIRUUES         DIRU.DIRUUES.R                /* DIRU Uncorrectable Error Status */
#define DIRU_DIRUUELR0       DIRU.DIRUUELR0.R              /* DIRU Uncorrectable Error Location Register 0 */
#define DIRU_DIRUUELR1       DIRU.DIRUUELR1.R              /* DIRU Uncorrectable Error Location Register 1 */
#define DIRU_DIRUUESA        DIRU.DIRUUESA.R               /* DIRU Uncorrectable Error Status Alias */
#define DIRU_DIRUID          DIRU.DIRUID.R                 /* DIRU Identification Register */

/* DMAMUX */
#define DMAMUX_0_CHCFG3      DMAMUX_0.CHCFG[0].R           /* Channel Configuration register */
#define DMAMUX_0_CHCFG2      DMAMUX_0.CHCFG[1].R           /* Channel Configuration register */
#define DMAMUX_0_CHCFG1      DMAMUX_0.CHCFG[2].R           /* Channel Configuration register */
#define DMAMUX_0_CHCFG0      DMAMUX_0.CHCFG[3].R           /* Channel Configuration register */
#define DMAMUX_0_CHCFG7      DMAMUX_0.CHCFG[4].R           /* Channel Configuration register */
#define DMAMUX_0_CHCFG6      DMAMUX_0.CHCFG[5].R           /* Channel Configuration register */
#define DMAMUX_0_CHCFG5      DMAMUX_0.CHCFG[6].R           /* Channel Configuration register */
#define DMAMUX_0_CHCFG4      DMAMUX_0.CHCFG[7].R           /* Channel Configuration register */
#define DMAMUX_0_CHCFG11     DMAMUX_0.CHCFG[8].R           /* Channel Configuration register */
#define DMAMUX_0_CHCFG10     DMAMUX_0.CHCFG[9].R           /* Channel Configuration register */
#define DMAMUX_0_CHCFG9      DMAMUX_0.CHCFG[10].R          /* Channel Configuration register */
#define DMAMUX_0_CHCFG8      DMAMUX_0.CHCFG[11].R          /* Channel Configuration register */
#define DMAMUX_0_CHCFG15     DMAMUX_0.CHCFG[12].R          /* Channel Configuration register */
#define DMAMUX_0_CHCFG14     DMAMUX_0.CHCFG[13].R          /* Channel Configuration register */
#define DMAMUX_0_CHCFG13     DMAMUX_0.CHCFG[14].R          /* Channel Configuration register */
#define DMAMUX_0_CHCFG12     DMAMUX_0.CHCFG[15].R          /* Channel Configuration register */

#define DMAMUX_1_CHCFG3      DMAMUX_1.CHCFG[0].R           /* Channel Configuration register */
#define DMAMUX_1_CHCFG2      DMAMUX_1.CHCFG[1].R           /* Channel Configuration register */
#define DMAMUX_1_CHCFG1      DMAMUX_1.CHCFG[2].R           /* Channel Configuration register */
#define DMAMUX_1_CHCFG0      DMAMUX_1.CHCFG[3].R           /* Channel Configuration register */
#define DMAMUX_1_CHCFG7      DMAMUX_1.CHCFG[4].R           /* Channel Configuration register */
#define DMAMUX_1_CHCFG6      DMAMUX_1.CHCFG[5].R           /* Channel Configuration register */
#define DMAMUX_1_CHCFG5      DMAMUX_1.CHCFG[6].R           /* Channel Configuration register */
#define DMAMUX_1_CHCFG4      DMAMUX_1.CHCFG[7].R           /* Channel Configuration register */
#define DMAMUX_1_CHCFG11     DMAMUX_1.CHCFG[8].R           /* Channel Configuration register */
#define DMAMUX_1_CHCFG10     DMAMUX_1.CHCFG[9].R           /* Channel Configuration register */
#define DMAMUX_1_CHCFG9      DMAMUX_1.CHCFG[10].R          /* Channel Configuration register */
#define DMAMUX_1_CHCFG8      DMAMUX_1.CHCFG[11].R          /* Channel Configuration register */
#define DMAMUX_1_CHCFG15     DMAMUX_1.CHCFG[12].R          /* Channel Configuration register */
#define DMAMUX_1_CHCFG14     DMAMUX_1.CHCFG[13].R          /* Channel Configuration register */
#define DMAMUX_1_CHCFG13     DMAMUX_1.CHCFG[14].R          /* Channel Configuration register */
#define DMAMUX_1_CHCFG12     DMAMUX_1.CHCFG[15].R          /* Channel Configuration register */

#define DMAMUX_2_CHCFG3      DMAMUX_2.CHCFG[0].R           /* Channel Configuration register */
#define DMAMUX_2_CHCFG2      DMAMUX_2.CHCFG[1].R           /* Channel Configuration register */
#define DMAMUX_2_CHCFG1      DMAMUX_2.CHCFG[2].R           /* Channel Configuration register */
#define DMAMUX_2_CHCFG0      DMAMUX_2.CHCFG[3].R           /* Channel Configuration register */
#define DMAMUX_2_CHCFG7      DMAMUX_2.CHCFG[4].R           /* Channel Configuration register */
#define DMAMUX_2_CHCFG6      DMAMUX_2.CHCFG[5].R           /* Channel Configuration register */
#define DMAMUX_2_CHCFG5      DMAMUX_2.CHCFG[6].R           /* Channel Configuration register */
#define DMAMUX_2_CHCFG4      DMAMUX_2.CHCFG[7].R           /* Channel Configuration register */
#define DMAMUX_2_CHCFG11     DMAMUX_2.CHCFG[8].R           /* Channel Configuration register */
#define DMAMUX_2_CHCFG10     DMAMUX_2.CHCFG[9].R           /* Channel Configuration register */
#define DMAMUX_2_CHCFG9      DMAMUX_2.CHCFG[10].R          /* Channel Configuration register */
#define DMAMUX_2_CHCFG8      DMAMUX_2.CHCFG[11].R          /* Channel Configuration register */
#define DMAMUX_2_CHCFG15     DMAMUX_2.CHCFG[12].R          /* Channel Configuration register */
#define DMAMUX_2_CHCFG14     DMAMUX_2.CHCFG[13].R          /* Channel Configuration register */
#define DMAMUX_2_CHCFG13     DMAMUX_2.CHCFG[14].R          /* Channel Configuration register */
#define DMAMUX_2_CHCFG12     DMAMUX_2.CHCFG[15].R          /* Channel Configuration register */

#define DMAMUX_3_CHCFG3      DMAMUX_3.CHCFG[0].R           /* Channel Configuration register */
#define DMAMUX_3_CHCFG2      DMAMUX_3.CHCFG[1].R           /* Channel Configuration register */
#define DMAMUX_3_CHCFG1      DMAMUX_3.CHCFG[2].R           /* Channel Configuration register */
#define DMAMUX_3_CHCFG0      DMAMUX_3.CHCFG[3].R           /* Channel Configuration register */
#define DMAMUX_3_CHCFG7      DMAMUX_3.CHCFG[4].R           /* Channel Configuration register */
#define DMAMUX_3_CHCFG6      DMAMUX_3.CHCFG[5].R           /* Channel Configuration register */
#define DMAMUX_3_CHCFG5      DMAMUX_3.CHCFG[6].R           /* Channel Configuration register */
#define DMAMUX_3_CHCFG4      DMAMUX_3.CHCFG[7].R           /* Channel Configuration register */
#define DMAMUX_3_CHCFG11     DMAMUX_3.CHCFG[8].R           /* Channel Configuration register */
#define DMAMUX_3_CHCFG10     DMAMUX_3.CHCFG[9].R           /* Channel Configuration register */
#define DMAMUX_3_CHCFG9      DMAMUX_3.CHCFG[10].R          /* Channel Configuration register */
#define DMAMUX_3_CHCFG8      DMAMUX_3.CHCFG[11].R          /* Channel Configuration register */
#define DMAMUX_3_CHCFG15     DMAMUX_3.CHCFG[12].R          /* Channel Configuration register */
#define DMAMUX_3_CHCFG14     DMAMUX_3.CHCFG[13].R          /* Channel Configuration register */
#define DMAMUX_3_CHCFG13     DMAMUX_3.CHCFG[14].R          /* Channel Configuration register */
#define DMAMUX_3_CHCFG12     DMAMUX_3.CHCFG[15].R          /* Channel Configuration register */

/* DMA_CRC */
#define DMA_CRC_0_GEC        DMA_CRC_0.GEC.R               /* Global Enable CRC Register */
#define DMA_CRC_0_CTL0       DMA_CRC_0.CONTROL_REGISTER[0].CTL.R /* CRC Control Register */
#define DMA_CRC_0_ICRC0      DMA_CRC_0.CONTROL_REGISTER[0].ICRC.R /* Initial CRC Value Register */
#define DMA_CRC_0_FCRC0      DMA_CRC_0.CONTROL_REGISTER[0].FCRC.R /* Final CRC Value Register */
#define DMA_CRC_0_CTL1       DMA_CRC_0.CONTROL_REGISTER[1].CTL.R /* CRC Control Register */
#define DMA_CRC_0_ICRC1      DMA_CRC_0.CONTROL_REGISTER[1].ICRC.R /* Initial CRC Value Register */
#define DMA_CRC_0_FCRC1      DMA_CRC_0.CONTROL_REGISTER[1].FCRC.R /* Final CRC Value Register */
#define DMA_CRC_0_CTL2       DMA_CRC_0.CONTROL_REGISTER[2].CTL.R /* CRC Control Register */
#define DMA_CRC_0_ICRC2      DMA_CRC_0.CONTROL_REGISTER[2].ICRC.R /* Initial CRC Value Register */
#define DMA_CRC_0_FCRC2      DMA_CRC_0.CONTROL_REGISTER[2].FCRC.R /* Final CRC Value Register */
#define DMA_CRC_0_CTL3       DMA_CRC_0.CONTROL_REGISTER[3].CTL.R /* CRC Control Register */
#define DMA_CRC_0_ICRC3      DMA_CRC_0.CONTROL_REGISTER[3].ICRC.R /* Initial CRC Value Register */
#define DMA_CRC_0_FCRC3      DMA_CRC_0.CONTROL_REGISTER[3].FCRC.R /* Final CRC Value Register */
#define DMA_CRC_0_CTL4       DMA_CRC_0.CONTROL_REGISTER[4].CTL.R /* CRC Control Register */
#define DMA_CRC_0_ICRC4      DMA_CRC_0.CONTROL_REGISTER[4].ICRC.R /* Initial CRC Value Register */
#define DMA_CRC_0_FCRC4      DMA_CRC_0.CONTROL_REGISTER[4].FCRC.R /* Final CRC Value Register */
#define DMA_CRC_0_CTL5       DMA_CRC_0.CONTROL_REGISTER[5].CTL.R /* CRC Control Register */
#define DMA_CRC_0_ICRC5      DMA_CRC_0.CONTROL_REGISTER[5].ICRC.R /* Initial CRC Value Register */
#define DMA_CRC_0_FCRC5      DMA_CRC_0.CONTROL_REGISTER[5].FCRC.R /* Final CRC Value Register */
#define DMA_CRC_0_CTL6       DMA_CRC_0.CONTROL_REGISTER[6].CTL.R /* CRC Control Register */
#define DMA_CRC_0_ICRC6      DMA_CRC_0.CONTROL_REGISTER[6].ICRC.R /* Initial CRC Value Register */
#define DMA_CRC_0_FCRC6      DMA_CRC_0.CONTROL_REGISTER[6].FCRC.R /* Final CRC Value Register */
#define DMA_CRC_0_CTL7       DMA_CRC_0.CONTROL_REGISTER[7].CTL.R /* CRC Control Register */
#define DMA_CRC_0_ICRC7      DMA_CRC_0.CONTROL_REGISTER[7].ICRC.R /* Initial CRC Value Register */
#define DMA_CRC_0_FCRC7      DMA_CRC_0.CONTROL_REGISTER[7].FCRC.R /* Final CRC Value Register */

#define DMA_CRC_1_GEC        DMA_CRC_1.GEC.R               /* Global Enable CRC Register */
#define DMA_CRC_1_CTL0       DMA_CRC_1.CONTROL_REGISTER[0].CTL.R /* CRC Control Register */
#define DMA_CRC_1_ICRC0      DMA_CRC_1.CONTROL_REGISTER[0].ICRC.R /* Initial CRC Value Register */
#define DMA_CRC_1_FCRC0      DMA_CRC_1.CONTROL_REGISTER[0].FCRC.R /* Final CRC Value Register */
#define DMA_CRC_1_CTL1       DMA_CRC_1.CONTROL_REGISTER[1].CTL.R /* CRC Control Register */
#define DMA_CRC_1_ICRC1      DMA_CRC_1.CONTROL_REGISTER[1].ICRC.R /* Initial CRC Value Register */
#define DMA_CRC_1_FCRC1      DMA_CRC_1.CONTROL_REGISTER[1].FCRC.R /* Final CRC Value Register */
#define DMA_CRC_1_CTL2       DMA_CRC_1.CONTROL_REGISTER[2].CTL.R /* CRC Control Register */
#define DMA_CRC_1_ICRC2      DMA_CRC_1.CONTROL_REGISTER[2].ICRC.R /* Initial CRC Value Register */
#define DMA_CRC_1_FCRC2      DMA_CRC_1.CONTROL_REGISTER[2].FCRC.R /* Final CRC Value Register */
#define DMA_CRC_1_CTL3       DMA_CRC_1.CONTROL_REGISTER[3].CTL.R /* CRC Control Register */
#define DMA_CRC_1_ICRC3      DMA_CRC_1.CONTROL_REGISTER[3].ICRC.R /* Initial CRC Value Register */
#define DMA_CRC_1_FCRC3      DMA_CRC_1.CONTROL_REGISTER[3].FCRC.R /* Final CRC Value Register */
#define DMA_CRC_1_CTL4       DMA_CRC_1.CONTROL_REGISTER[4].CTL.R /* CRC Control Register */
#define DMA_CRC_1_ICRC4      DMA_CRC_1.CONTROL_REGISTER[4].ICRC.R /* Initial CRC Value Register */
#define DMA_CRC_1_FCRC4      DMA_CRC_1.CONTROL_REGISTER[4].FCRC.R /* Final CRC Value Register */
#define DMA_CRC_1_CTL5       DMA_CRC_1.CONTROL_REGISTER[5].CTL.R /* CRC Control Register */
#define DMA_CRC_1_ICRC5      DMA_CRC_1.CONTROL_REGISTER[5].ICRC.R /* Initial CRC Value Register */
#define DMA_CRC_1_FCRC5      DMA_CRC_1.CONTROL_REGISTER[5].FCRC.R /* Final CRC Value Register */
#define DMA_CRC_1_CTL6       DMA_CRC_1.CONTROL_REGISTER[6].CTL.R /* CRC Control Register */
#define DMA_CRC_1_ICRC6      DMA_CRC_1.CONTROL_REGISTER[6].ICRC.R /* Initial CRC Value Register */
#define DMA_CRC_1_FCRC6      DMA_CRC_1.CONTROL_REGISTER[6].FCRC.R /* Final CRC Value Register */
#define DMA_CRC_1_CTL7       DMA_CRC_1.CONTROL_REGISTER[7].CTL.R /* CRC Control Register */
#define DMA_CRC_1_ICRC7      DMA_CRC_1.CONTROL_REGISTER[7].ICRC.R /* Initial CRC Value Register */
#define DMA_CRC_1_FCRC7      DMA_CRC_1.CONTROL_REGISTER[7].FCRC.R /* Final CRC Value Register */

/* D_IP_LLCE_SYN */
#define LLCE_LLCE_SYSRSTR    LLCE.LLCE_SYSRSTR.R           /* System reset control register */
#define LLCE_LLCE_MASIDR     LLCE.LLCE_MASIDR.R            /* LLCE master ID register */
#define LLCE_LLCE_RAMCCSR    LLCE.LLCE_RAMCCSR.R           /* RAM Controller Configuration and Status Register */

/* EIM */
#define EIM_0_EIMCR          EIM_0.EIMCR.R                 /* Error Injection Module Configuration Register */
#define EIM_0_EICHEN         EIM_0.EICHEN.R                /* Error Injection Channel Enable register */
#define EIM_0_EICHD0_WORD1   EIM_0.EICHD0_WORD1.R          /* Error Injection Channel Descriptor n, Word1 */
#define EIM_0_EICHD0_WORD2   EIM_0.EICHD0_WORD2.R          /* Error Injection Channel Descriptor n, Word2 */
#define EIM_0_EICHD0_WORD3   EIM_0.EICHD0_WORD3.R          /* Error Injection Channel Descriptor n, Word3 */
#define EIM_0_EICHD0_WORD4   EIM_0.EICHD0_WORD4.R          /* Error Injection Channel Descriptor n, Word4 */
#define EIM_0_EICHD0_WORD5   EIM_0.EICHD0_WORD5.R          /* Error Injection Channel Descriptor n, Word5 */
#define EIM_0_EICHD0_WORD6   EIM_0.EICHD0_WORD6.R          /* Error Injection Channel Descriptor n, Word6 */
#define EIM_0_EICHD0_WORD7   EIM_0.EICHD0_WORD7.R          /* Error Injection Channel Descriptor n, Word7 */
#define EIM_0_EICHD0_WORD8   EIM_0.EICHD0_WORD8.R          /* Error Injection Channel Descriptor n, Word8 */

#define EIM_3_EIMCR          EIM_3.EIMCR.R                 /* Error Injection Module Configuration Register */
#define EIM_3_EICHEN         EIM_3.EICHEN.R                /* Error Injection Channel Enable register */
#define EIM_3_EICHD0_WORD1   EIM_3.EICHD0_WORD1.R          /* Error Injection Channel Descriptor n, Word1 */
#define EIM_3_EICHD0_WORD2   EIM_3.EICHD0_WORD2.R          /* Error Injection Channel Descriptor n, Word2 */
#define EIM_3_EICHD0_WORD3   EIM_3.EICHD0_WORD3.R          /* Error Injection Channel Descriptor n, Word3 */
#define EIM_3_EICHD0_WORD4   EIM_3.EICHD0_WORD4.R          /* Error Injection Channel Descriptor n, Word4 */
#define EIM_3_EICHD0_WORD5   EIM_3.EICHD0_WORD5.R          /* Error Injection Channel Descriptor n, Word5 */
#define EIM_3_EICHD0_WORD6   EIM_3.EICHD0_WORD6.R          /* Error Injection Channel Descriptor n, Word6 */
#define EIM_3_EICHD0_WORD7   EIM_3.EICHD0_WORD7.R          /* Error Injection Channel Descriptor n, Word7 */
#define EIM_3_EICHD0_WORD8   EIM_3.EICHD0_WORD8.R          /* Error Injection Channel Descriptor n, Word8 */
#define EIM_3_EICHD1_WORD1   EIM_3.EICHD1_WORD1.R          /* Error Injection Channel Descriptor n, Word1 */
#define EIM_3_EICHD1_WORD2   EIM_3.EICHD1_WORD2.R          /* Error Injection Channel Descriptor n, Word2 */
#define EIM_3_EICHD1_WORD3   EIM_3.EICHD1_WORD3.R          /* Error Injection Channel Descriptor n, Word3 */
#define EIM_3_EICHD1_WORD4   EIM_3.EICHD1_WORD4.R          /* Error Injection Channel Descriptor n, Word4 */
#define EIM_3_EICHD1_WORD5   EIM_3.EICHD1_WORD5.R          /* Error Injection Channel Descriptor n, Word5 */
#define EIM_3_EICHD1_WORD6   EIM_3.EICHD1_WORD6.R          /* Error Injection Channel Descriptor n, Word6 */
#define EIM_3_EICHD1_WORD7   EIM_3.EICHD1_WORD7.R          /* Error Injection Channel Descriptor n, Word7 */
#define EIM_3_EICHD1_WORD8   EIM_3.EICHD1_WORD8.R          /* Error Injection Channel Descriptor n, Word8 */
#define EIM_3_EICHD2_WORD1   EIM_3.EICHD2_WORD1.R          /* Error Injection Channel Descriptor n, Word1 */
#define EIM_3_EICHD2_WORD2   EIM_3.EICHD2_WORD2.R          /* Error Injection Channel Descriptor n, Word2 */
#define EIM_3_EICHD2_WORD3   EIM_3.EICHD2_WORD3.R          /* Error Injection Channel Descriptor n, Word3 */
#define EIM_3_EICHD2_WORD4   EIM_3.EICHD2_WORD4.R          /* Error Injection Channel Descriptor n, Word4 */
#define EIM_3_EICHD2_WORD5   EIM_3.EICHD2_WORD5.R          /* Error Injection Channel Descriptor n, Word5 */
#define EIM_3_EICHD2_WORD6   EIM_3.EICHD2_WORD6.R          /* Error Injection Channel Descriptor n, Word6 */
#define EIM_3_EICHD2_WORD7   EIM_3.EICHD2_WORD7.R          /* Error Injection Channel Descriptor n, Word7 */
#define EIM_3_EICHD2_WORD8   EIM_3.EICHD2_WORD8.R          /* Error Injection Channel Descriptor n, Word8 */
#define EIM_3_EICHD3_WORD1   EIM_3.EICHD3_WORD1.R          /* Error Injection Channel Descriptor n, Word1 */
#define EIM_3_EICHD3_WORD2   EIM_3.EICHD3_WORD2.R          /* Error Injection Channel Descriptor n, Word2 */
#define EIM_3_EICHD3_WORD3   EIM_3.EICHD3_WORD3.R          /* Error Injection Channel Descriptor n, Word3 */
#define EIM_3_EICHD3_WORD4   EIM_3.EICHD3_WORD4.R          /* Error Injection Channel Descriptor n, Word4 */
#define EIM_3_EICHD3_WORD5   EIM_3.EICHD3_WORD5.R          /* Error Injection Channel Descriptor n, Word5 */
#define EIM_3_EICHD3_WORD6   EIM_3.EICHD3_WORD6.R          /* Error Injection Channel Descriptor n, Word6 */
#define EIM_3_EICHD3_WORD7   EIM_3.EICHD3_WORD7.R          /* Error Injection Channel Descriptor n, Word7 */
#define EIM_3_EICHD3_WORD8   EIM_3.EICHD3_WORD8.R          /* Error Injection Channel Descriptor n, Word8 */

#define EIM_1_EIMCR          EIM_1.EIMCR.R                 /* Error Injection Module Configuration Register */
#define EIM_1_EICHEN         EIM_1.EICHEN.R                /* Error Injection Channel Enable register */
#define EIM_1_EICHD0_WORD1   EIM_1.EICHD0_WORD1.R          /* Error Injection Channel Descriptor n, Word1 */
#define EIM_1_EICHD0_WORD2   EIM_1.EICHD0_WORD2.R          /* Error Injection Channel Descriptor n, Word2 */
#define EIM_1_EICHD0_WORD3   EIM_1.EICHD0_WORD3.R          /* Error Injection Channel Descriptor n, Word3 */
#define EIM_1_EICHD0_WORD4   EIM_1.EICHD0_WORD4.R          /* Error Injection Channel Descriptor n, Word4 */
#define EIM_1_EICHD0_WORD5   EIM_1.EICHD0_WORD5.R          /* Error Injection Channel Descriptor n, Word5 */
#define EIM_1_EICHD0_WORD6   EIM_1.EICHD0_WORD6.R          /* Error Injection Channel Descriptor n, Word6 */
#define EIM_1_EICHD0_WORD7   EIM_1.EICHD0_WORD7.R          /* Error Injection Channel Descriptor n, Word7 */
#define EIM_1_EICHD0_WORD8   EIM_1.EICHD0_WORD8.R          /* Error Injection Channel Descriptor n, Word8 */
#define EIM_1_EICHD1_WORD1   EIM_1.EICHD1_WORD1.R          /* Error Injection Channel Descriptor n, Word1 */
#define EIM_1_EICHD1_WORD2   EIM_1.EICHD1_WORD2.R          /* Error Injection Channel Descriptor n, Word2 */
#define EIM_1_EICHD1_WORD3   EIM_1.EICHD1_WORD3.R          /* Error Injection Channel Descriptor n, Word3 */
#define EIM_1_EICHD1_WORD4   EIM_1.EICHD1_WORD4.R          /* Error Injection Channel Descriptor n, Word4 */
#define EIM_1_EICHD1_WORD5   EIM_1.EICHD1_WORD5.R          /* Error Injection Channel Descriptor n, Word5 */
#define EIM_1_EICHD1_WORD6   EIM_1.EICHD1_WORD6.R          /* Error Injection Channel Descriptor n, Word6 */
#define EIM_1_EICHD1_WORD7   EIM_1.EICHD1_WORD7.R          /* Error Injection Channel Descriptor n, Word7 */
#define EIM_1_EICHD1_WORD8   EIM_1.EICHD1_WORD8.R          /* Error Injection Channel Descriptor n, Word8 */
#define EIM_1_EICHD2_WORD1   EIM_1.EICHD2_WORD1.R          /* Error Injection Channel Descriptor n, Word1 */
#define EIM_1_EICHD2_WORD2   EIM_1.EICHD2_WORD2.R          /* Error Injection Channel Descriptor n, Word2 */
#define EIM_1_EICHD2_WORD3   EIM_1.EICHD2_WORD3.R          /* Error Injection Channel Descriptor n, Word3 */
#define EIM_1_EICHD2_WORD4   EIM_1.EICHD2_WORD4.R          /* Error Injection Channel Descriptor n, Word4 */
#define EIM_1_EICHD2_WORD5   EIM_1.EICHD2_WORD5.R          /* Error Injection Channel Descriptor n, Word5 */
#define EIM_1_EICHD2_WORD6   EIM_1.EICHD2_WORD6.R          /* Error Injection Channel Descriptor n, Word6 */
#define EIM_1_EICHD2_WORD7   EIM_1.EICHD2_WORD7.R          /* Error Injection Channel Descriptor n, Word7 */
#define EIM_1_EICHD2_WORD8   EIM_1.EICHD2_WORD8.R          /* Error Injection Channel Descriptor n, Word8 */
#define EIM_1_EICHD3_WORD1   EIM_1.EICHD3_WORD1.R          /* Error Injection Channel Descriptor n, Word1 */
#define EIM_1_EICHD3_WORD2   EIM_1.EICHD3_WORD2.R          /* Error Injection Channel Descriptor n, Word2 */
#define EIM_1_EICHD3_WORD3   EIM_1.EICHD3_WORD3.R          /* Error Injection Channel Descriptor n, Word3 */
#define EIM_1_EICHD3_WORD4   EIM_1.EICHD3_WORD4.R          /* Error Injection Channel Descriptor n, Word4 */
#define EIM_1_EICHD3_WORD5   EIM_1.EICHD3_WORD5.R          /* Error Injection Channel Descriptor n, Word5 */
#define EIM_1_EICHD3_WORD6   EIM_1.EICHD3_WORD6.R          /* Error Injection Channel Descriptor n, Word6 */
#define EIM_1_EICHD3_WORD7   EIM_1.EICHD3_WORD7.R          /* Error Injection Channel Descriptor n, Word7 */
#define EIM_1_EICHD3_WORD8   EIM_1.EICHD3_WORD8.R          /* Error Injection Channel Descriptor n, Word8 */
#define EIM_1_EICHD4_WORD1   EIM_1.EICHD4_WORD1.R          /* Error Injection Channel Descriptor n, Word1 */
#define EIM_1_EICHD4_WORD2   EIM_1.EICHD4_WORD2.R          /* Error Injection Channel Descriptor n, Word2 */
#define EIM_1_EICHD4_WORD3   EIM_1.EICHD4_WORD3.R          /* Error Injection Channel Descriptor n, Word3 */
#define EIM_1_EICHD4_WORD4   EIM_1.EICHD4_WORD4.R          /* Error Injection Channel Descriptor n, Word4 */
#define EIM_1_EICHD4_WORD5   EIM_1.EICHD4_WORD5.R          /* Error Injection Channel Descriptor n, Word5 */
#define EIM_1_EICHD4_WORD6   EIM_1.EICHD4_WORD6.R          /* Error Injection Channel Descriptor n, Word6 */
#define EIM_1_EICHD4_WORD7   EIM_1.EICHD4_WORD7.R          /* Error Injection Channel Descriptor n, Word7 */
#define EIM_1_EICHD4_WORD8   EIM_1.EICHD4_WORD8.R          /* Error Injection Channel Descriptor n, Word8 */
#define EIM_1_EICHD5_WORD1   EIM_1.EICHD5_WORD1.R          /* Error Injection Channel Descriptor n, Word1 */
#define EIM_1_EICHD5_WORD2   EIM_1.EICHD5_WORD2.R          /* Error Injection Channel Descriptor n, Word2 */
#define EIM_1_EICHD5_WORD3   EIM_1.EICHD5_WORD3.R          /* Error Injection Channel Descriptor n, Word3 */
#define EIM_1_EICHD5_WORD4   EIM_1.EICHD5_WORD4.R          /* Error Injection Channel Descriptor n, Word4 */
#define EIM_1_EICHD5_WORD5   EIM_1.EICHD5_WORD5.R          /* Error Injection Channel Descriptor n, Word5 */
#define EIM_1_EICHD5_WORD6   EIM_1.EICHD5_WORD6.R          /* Error Injection Channel Descriptor n, Word6 */
#define EIM_1_EICHD5_WORD7   EIM_1.EICHD5_WORD7.R          /* Error Injection Channel Descriptor n, Word7 */
#define EIM_1_EICHD5_WORD8   EIM_1.EICHD5_WORD8.R          /* Error Injection Channel Descriptor n, Word8 */
#define EIM_1_EICHD6_WORD1   EIM_1.EICHD6_WORD1.R          /* Error Injection Channel Descriptor n, Word1 */
#define EIM_1_EICHD6_WORD2   EIM_1.EICHD6_WORD2.R          /* Error Injection Channel Descriptor n, Word2 */
#define EIM_1_EICHD6_WORD3   EIM_1.EICHD6_WORD3.R          /* Error Injection Channel Descriptor n, Word3 */
#define EIM_1_EICHD6_WORD4   EIM_1.EICHD6_WORD4.R          /* Error Injection Channel Descriptor n, Word4 */
#define EIM_1_EICHD6_WORD5   EIM_1.EICHD6_WORD5.R          /* Error Injection Channel Descriptor n, Word5 */
#define EIM_1_EICHD6_WORD6   EIM_1.EICHD6_WORD6.R          /* Error Injection Channel Descriptor n, Word6 */
#define EIM_1_EICHD6_WORD7   EIM_1.EICHD6_WORD7.R          /* Error Injection Channel Descriptor n, Word7 */
#define EIM_1_EICHD6_WORD8   EIM_1.EICHD6_WORD8.R          /* Error Injection Channel Descriptor n, Word8 */
#define EIM_1_EICHD7_WORD1   EIM_1.EICHD7_WORD1.R          /* Error Injection Channel Descriptor n, Word1 */
#define EIM_1_EICHD7_WORD2   EIM_1.EICHD7_WORD2.R          /* Error Injection Channel Descriptor n, Word2 */
#define EIM_1_EICHD7_WORD3   EIM_1.EICHD7_WORD3.R          /* Error Injection Channel Descriptor n, Word3 */
#define EIM_1_EICHD7_WORD4   EIM_1.EICHD7_WORD4.R          /* Error Injection Channel Descriptor n, Word4 */
#define EIM_1_EICHD7_WORD5   EIM_1.EICHD7_WORD5.R          /* Error Injection Channel Descriptor n, Word5 */
#define EIM_1_EICHD7_WORD6   EIM_1.EICHD7_WORD6.R          /* Error Injection Channel Descriptor n, Word6 */
#define EIM_1_EICHD7_WORD7   EIM_1.EICHD7_WORD7.R          /* Error Injection Channel Descriptor n, Word7 */
#define EIM_1_EICHD7_WORD8   EIM_1.EICHD7_WORD8.R          /* Error Injection Channel Descriptor n, Word8 */
#define EIM_1_EICHD8_WORD1   EIM_1.EICHD8_WORD1.R          /* Error Injection Channel Descriptor n, Word1 */
#define EIM_1_EICHD8_WORD2   EIM_1.EICHD8_WORD2.R          /* Error Injection Channel Descriptor n, Word2 */
#define EIM_1_EICHD8_WORD3   EIM_1.EICHD8_WORD3.R          /* Error Injection Channel Descriptor n, Word3 */
#define EIM_1_EICHD8_WORD4   EIM_1.EICHD8_WORD4.R          /* Error Injection Channel Descriptor n, Word4 */
#define EIM_1_EICHD8_WORD5   EIM_1.EICHD8_WORD5.R          /* Error Injection Channel Descriptor n, Word5 */
#define EIM_1_EICHD8_WORD6   EIM_1.EICHD8_WORD6.R          /* Error Injection Channel Descriptor n, Word6 */
#define EIM_1_EICHD8_WORD7   EIM_1.EICHD8_WORD7.R          /* Error Injection Channel Descriptor n, Word7 */
#define EIM_1_EICHD8_WORD8   EIM_1.EICHD8_WORD8.R          /* Error Injection Channel Descriptor n, Word8 */
#define EIM_1_EICHD9_WORD1   EIM_1.EICHD9_WORD1.R          /* Error Injection Channel Descriptor n, Word1 */
#define EIM_1_EICHD9_WORD2   EIM_1.EICHD9_WORD2.R          /* Error Injection Channel Descriptor n, Word2 */
#define EIM_1_EICHD9_WORD3   EIM_1.EICHD9_WORD3.R          /* Error Injection Channel Descriptor n, Word3 */
#define EIM_1_EICHD9_WORD4   EIM_1.EICHD9_WORD4.R          /* Error Injection Channel Descriptor n, Word4 */
#define EIM_1_EICHD9_WORD5   EIM_1.EICHD9_WORD5.R          /* Error Injection Channel Descriptor n, Word5 */
#define EIM_1_EICHD9_WORD6   EIM_1.EICHD9_WORD6.R          /* Error Injection Channel Descriptor n, Word6 */
#define EIM_1_EICHD9_WORD7   EIM_1.EICHD9_WORD7.R          /* Error Injection Channel Descriptor n, Word7 */
#define EIM_1_EICHD9_WORD8   EIM_1.EICHD9_WORD8.R          /* Error Injection Channel Descriptor n, Word8 */
#define EIM_1_EICHD10_WORD1  EIM_1.EICHD10_WORD1.R         /* Error Injection Channel Descriptor n, Word1 */
#define EIM_1_EICHD10_WORD2  EIM_1.EICHD10_WORD2.R         /* Error Injection Channel Descriptor n, Word2 */
#define EIM_1_EICHD10_WORD3  EIM_1.EICHD10_WORD3.R         /* Error Injection Channel Descriptor n, Word3 */
#define EIM_1_EICHD10_WORD4  EIM_1.EICHD10_WORD4.R         /* Error Injection Channel Descriptor n, Word4 */
#define EIM_1_EICHD10_WORD5  EIM_1.EICHD10_WORD5.R         /* Error Injection Channel Descriptor n, Word5 */
#define EIM_1_EICHD10_WORD6  EIM_1.EICHD10_WORD6.R         /* Error Injection Channel Descriptor n, Word6 */
#define EIM_1_EICHD10_WORD7  EIM_1.EICHD10_WORD7.R         /* Error Injection Channel Descriptor n, Word7 */
#define EIM_1_EICHD10_WORD8  EIM_1.EICHD10_WORD8.R         /* Error Injection Channel Descriptor n, Word8 */
#define EIM_1_EICHD11_WORD1  EIM_1.EICHD11_WORD1.R         /* Error Injection Channel Descriptor n, Word1 */
#define EIM_1_EICHD11_WORD2  EIM_1.EICHD11_WORD2.R         /* Error Injection Channel Descriptor n, Word2 */
#define EIM_1_EICHD11_WORD3  EIM_1.EICHD11_WORD3.R         /* Error Injection Channel Descriptor n, Word3 */
#define EIM_1_EICHD11_WORD4  EIM_1.EICHD11_WORD4.R         /* Error Injection Channel Descriptor n, Word4 */
#define EIM_1_EICHD11_WORD5  EIM_1.EICHD11_WORD5.R         /* Error Injection Channel Descriptor n, Word5 */
#define EIM_1_EICHD11_WORD6  EIM_1.EICHD11_WORD6.R         /* Error Injection Channel Descriptor n, Word6 */
#define EIM_1_EICHD11_WORD7  EIM_1.EICHD11_WORD7.R         /* Error Injection Channel Descriptor n, Word7 */
#define EIM_1_EICHD11_WORD8  EIM_1.EICHD11_WORD8.R         /* Error Injection Channel Descriptor n, Word8 */
#define EIM_1_EICHD12_WORD1  EIM_1.EICHD12_WORD1.R         /* Error Injection Channel Descriptor n, Word1 */
#define EIM_1_EICHD12_WORD2  EIM_1.EICHD12_WORD2.R         /* Error Injection Channel Descriptor n, Word2 */
#define EIM_1_EICHD12_WORD3  EIM_1.EICHD12_WORD3.R         /* Error Injection Channel Descriptor n, Word3 */
#define EIM_1_EICHD12_WORD4  EIM_1.EICHD12_WORD4.R         /* Error Injection Channel Descriptor n, Word4 */
#define EIM_1_EICHD12_WORD5  EIM_1.EICHD12_WORD5.R         /* Error Injection Channel Descriptor n, Word5 */
#define EIM_1_EICHD12_WORD6  EIM_1.EICHD12_WORD6.R         /* Error Injection Channel Descriptor n, Word6 */
#define EIM_1_EICHD12_WORD7  EIM_1.EICHD12_WORD7.R         /* Error Injection Channel Descriptor n, Word7 */
#define EIM_1_EICHD12_WORD8  EIM_1.EICHD12_WORD8.R         /* Error Injection Channel Descriptor n, Word8 */
#define EIM_1_EICHD13_WORD1  EIM_1.EICHD13_WORD1.R         /* Error Injection Channel Descriptor n, Word1 */
#define EIM_1_EICHD13_WORD2  EIM_1.EICHD13_WORD2.R         /* Error Injection Channel Descriptor n, Word2 */
#define EIM_1_EICHD13_WORD3  EIM_1.EICHD13_WORD3.R         /* Error Injection Channel Descriptor n, Word3 */
#define EIM_1_EICHD13_WORD4  EIM_1.EICHD13_WORD4.R         /* Error Injection Channel Descriptor n, Word4 */
#define EIM_1_EICHD13_WORD5  EIM_1.EICHD13_WORD5.R         /* Error Injection Channel Descriptor n, Word5 */
#define EIM_1_EICHD13_WORD6  EIM_1.EICHD13_WORD6.R         /* Error Injection Channel Descriptor n, Word6 */
#define EIM_1_EICHD13_WORD7  EIM_1.EICHD13_WORD7.R         /* Error Injection Channel Descriptor n, Word7 */
#define EIM_1_EICHD13_WORD8  EIM_1.EICHD13_WORD8.R         /* Error Injection Channel Descriptor n, Word8 */
#define EIM_1_EICHD14_WORD1  EIM_1.EICHD14_WORD1.R         /* Error Injection Channel Descriptor n, Word1 */
#define EIM_1_EICHD14_WORD2  EIM_1.EICHD14_WORD2.R         /* Error Injection Channel Descriptor n, Word2 */
#define EIM_1_EICHD14_WORD3  EIM_1.EICHD14_WORD3.R         /* Error Injection Channel Descriptor n, Word3 */
#define EIM_1_EICHD14_WORD4  EIM_1.EICHD14_WORD4.R         /* Error Injection Channel Descriptor n, Word4 */
#define EIM_1_EICHD14_WORD5  EIM_1.EICHD14_WORD5.R         /* Error Injection Channel Descriptor n, Word5 */
#define EIM_1_EICHD14_WORD6  EIM_1.EICHD14_WORD6.R         /* Error Injection Channel Descriptor n, Word6 */
#define EIM_1_EICHD14_WORD7  EIM_1.EICHD14_WORD7.R         /* Error Injection Channel Descriptor n, Word7 */
#define EIM_1_EICHD14_WORD8  EIM_1.EICHD14_WORD8.R         /* Error Injection Channel Descriptor n, Word8 */

#define EIM_2_EIMCR          EIM_2.EIMCR.R                 /* Error Injection Module Configuration Register */
#define EIM_2_EICHEN         EIM_2.EICHEN.R                /* Error Injection Channel Enable register */
#define EIM_2_EICHD0_WORD1   EIM_2.EICHD0_WORD1.R          /* Error Injection Channel Descriptor n, Word1 */
#define EIM_2_EICHD0_WORD2   EIM_2.EICHD0_WORD2.R          /* Error Injection Channel Descriptor n, Word2 */
#define EIM_2_EICHD0_WORD3   EIM_2.EICHD0_WORD3.R          /* Error Injection Channel Descriptor n, Word3 */
#define EIM_2_EICHD0_WORD4   EIM_2.EICHD0_WORD4.R          /* Error Injection Channel Descriptor n, Word4 */
#define EIM_2_EICHD0_WORD5   EIM_2.EICHD0_WORD5.R          /* Error Injection Channel Descriptor n, Word5 */
#define EIM_2_EICHD0_WORD6   EIM_2.EICHD0_WORD6.R          /* Error Injection Channel Descriptor n, Word6 */
#define EIM_2_EICHD0_WORD7   EIM_2.EICHD0_WORD7.R          /* Error Injection Channel Descriptor n, Word7 */
#define EIM_2_EICHD0_WORD8   EIM_2.EICHD0_WORD8.R          /* Error Injection Channel Descriptor n, Word8 */
#define EIM_2_EICHD1_WORD1   EIM_2.EICHD1_WORD1.R          /* Error Injection Channel Descriptor n, Word1 */
#define EIM_2_EICHD1_WORD2   EIM_2.EICHD1_WORD2.R          /* Error Injection Channel Descriptor n, Word2 */
#define EIM_2_EICHD1_WORD3   EIM_2.EICHD1_WORD3.R          /* Error Injection Channel Descriptor n, Word3 */
#define EIM_2_EICHD1_WORD4   EIM_2.EICHD1_WORD4.R          /* Error Injection Channel Descriptor n, Word4 */
#define EIM_2_EICHD1_WORD5   EIM_2.EICHD1_WORD5.R          /* Error Injection Channel Descriptor n, Word5 */
#define EIM_2_EICHD1_WORD6   EIM_2.EICHD1_WORD6.R          /* Error Injection Channel Descriptor n, Word6 */
#define EIM_2_EICHD1_WORD7   EIM_2.EICHD1_WORD7.R          /* Error Injection Channel Descriptor n, Word7 */
#define EIM_2_EICHD1_WORD8   EIM_2.EICHD1_WORD8.R          /* Error Injection Channel Descriptor n, Word8 */
#define EIM_2_EICHD2_WORD1   EIM_2.EICHD2_WORD1.R          /* Error Injection Channel Descriptor n, Word1 */
#define EIM_2_EICHD2_WORD2   EIM_2.EICHD2_WORD2.R          /* Error Injection Channel Descriptor n, Word2 */
#define EIM_2_EICHD2_WORD3   EIM_2.EICHD2_WORD3.R          /* Error Injection Channel Descriptor n, Word3 */
#define EIM_2_EICHD2_WORD4   EIM_2.EICHD2_WORD4.R          /* Error Injection Channel Descriptor n, Word4 */
#define EIM_2_EICHD2_WORD5   EIM_2.EICHD2_WORD5.R          /* Error Injection Channel Descriptor n, Word5 */
#define EIM_2_EICHD2_WORD6   EIM_2.EICHD2_WORD6.R          /* Error Injection Channel Descriptor n, Word6 */
#define EIM_2_EICHD2_WORD7   EIM_2.EICHD2_WORD7.R          /* Error Injection Channel Descriptor n, Word7 */
#define EIM_2_EICHD2_WORD8   EIM_2.EICHD2_WORD8.R          /* Error Injection Channel Descriptor n, Word8 */
#define EIM_2_EICHD3_WORD1   EIM_2.EICHD3_WORD1.R          /* Error Injection Channel Descriptor n, Word1 */
#define EIM_2_EICHD3_WORD2   EIM_2.EICHD3_WORD2.R          /* Error Injection Channel Descriptor n, Word2 */
#define EIM_2_EICHD3_WORD3   EIM_2.EICHD3_WORD3.R          /* Error Injection Channel Descriptor n, Word3 */
#define EIM_2_EICHD3_WORD4   EIM_2.EICHD3_WORD4.R          /* Error Injection Channel Descriptor n, Word4 */
#define EIM_2_EICHD3_WORD5   EIM_2.EICHD3_WORD5.R          /* Error Injection Channel Descriptor n, Word5 */
#define EIM_2_EICHD3_WORD6   EIM_2.EICHD3_WORD6.R          /* Error Injection Channel Descriptor n, Word6 */
#define EIM_2_EICHD3_WORD7   EIM_2.EICHD3_WORD7.R          /* Error Injection Channel Descriptor n, Word7 */
#define EIM_2_EICHD3_WORD8   EIM_2.EICHD3_WORD8.R          /* Error Injection Channel Descriptor n, Word8 */
#define EIM_2_EICHD4_WORD1   EIM_2.EICHD4_WORD1.R          /* Error Injection Channel Descriptor n, Word1 */
#define EIM_2_EICHD4_WORD2   EIM_2.EICHD4_WORD2.R          /* Error Injection Channel Descriptor n, Word2 */
#define EIM_2_EICHD4_WORD3   EIM_2.EICHD4_WORD3.R          /* Error Injection Channel Descriptor n, Word3 */
#define EIM_2_EICHD4_WORD4   EIM_2.EICHD4_WORD4.R          /* Error Injection Channel Descriptor n, Word4 */
#define EIM_2_EICHD4_WORD5   EIM_2.EICHD4_WORD5.R          /* Error Injection Channel Descriptor n, Word5 */
#define EIM_2_EICHD4_WORD6   EIM_2.EICHD4_WORD6.R          /* Error Injection Channel Descriptor n, Word6 */
#define EIM_2_EICHD4_WORD7   EIM_2.EICHD4_WORD7.R          /* Error Injection Channel Descriptor n, Word7 */
#define EIM_2_EICHD4_WORD8   EIM_2.EICHD4_WORD8.R          /* Error Injection Channel Descriptor n, Word8 */
#define EIM_2_EICHD5_WORD1   EIM_2.EICHD5_WORD1.R          /* Error Injection Channel Descriptor n, Word1 */
#define EIM_2_EICHD5_WORD2   EIM_2.EICHD5_WORD2.R          /* Error Injection Channel Descriptor n, Word2 */
#define EIM_2_EICHD5_WORD3   EIM_2.EICHD5_WORD3.R          /* Error Injection Channel Descriptor n, Word3 */
#define EIM_2_EICHD5_WORD4   EIM_2.EICHD5_WORD4.R          /* Error Injection Channel Descriptor n, Word4 */
#define EIM_2_EICHD5_WORD5   EIM_2.EICHD5_WORD5.R          /* Error Injection Channel Descriptor n, Word5 */
#define EIM_2_EICHD5_WORD6   EIM_2.EICHD5_WORD6.R          /* Error Injection Channel Descriptor n, Word6 */
#define EIM_2_EICHD5_WORD7   EIM_2.EICHD5_WORD7.R          /* Error Injection Channel Descriptor n, Word7 */
#define EIM_2_EICHD5_WORD8   EIM_2.EICHD5_WORD8.R          /* Error Injection Channel Descriptor n, Word8 */

#define EIM_EIMCR            EIM.EIMCR.R                   /* Error Injection Module Configuration Register */
#define EIM_EICHEN           EIM.EICHEN.R                  /* Error Injection Channel Enable register */
#define EIM_EICHD0_WORD0     EIM.EICHD0_WORD0.R            /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD0_WORD1     EIM.EICHD0_WORD1.R            /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD0_WORD2     EIM.EICHD0_WORD2.R            /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD0_WORD3     EIM.EICHD0_WORD3.R            /* Error Injection Channel Descriptor n, Word3 */
#define EIM_EICHD0_WORD4     EIM.EICHD0_WORD4.R            /* Error Injection Channel Descriptor n, Word4 */
#define EIM_EICHD0_WORD5     EIM.EICHD0_WORD5.R            /* Error Injection Channel Descriptor n, Word5 */
#define EIM_EICHD0_WORD6     EIM.EICHD0_WORD6.R            /* Error Injection Channel Descriptor n, Word6 */
#define EIM_EICHD0_WORD7     EIM.EICHD0_WORD7.R            /* Error Injection Channel Descriptor n, Word7 */
#define EIM_EICHD0_WORD8     EIM.EICHD0_WORD8.R            /* Error Injection Channel Descriptor n, Word8 */
#define EIM_EICHD1_WORD0     EIM.EICHD1_WORD0.R            /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD1_WORD1     EIM.EICHD1_WORD1.R            /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD1_WORD2     EIM.EICHD1_WORD2.R            /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD1_WORD3     EIM.EICHD1_WORD3.R            /* Error Injection Channel Descriptor n, Word3 */
#define EIM_EICHD1_WORD4     EIM.EICHD1_WORD4.R            /* Error Injection Channel Descriptor n, Word4 */
#define EIM_EICHD1_WORD5     EIM.EICHD1_WORD5.R            /* Error Injection Channel Descriptor n, Word5 */
#define EIM_EICHD1_WORD6     EIM.EICHD1_WORD6.R            /* Error Injection Channel Descriptor n, Word6 */
#define EIM_EICHD1_WORD7     EIM.EICHD1_WORD7.R            /* Error Injection Channel Descriptor n, Word7 */
#define EIM_EICHD1_WORD8     EIM.EICHD1_WORD8.R            /* Error Injection Channel Descriptor n, Word8 */
#define EIM_EICHD2_WORD0     EIM.EICHD2_WORD0.R            /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD2_WORD1     EIM.EICHD2_WORD1.R            /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD2_WORD2     EIM.EICHD2_WORD2.R            /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD2_WORD3     EIM.EICHD2_WORD3.R            /* Error Injection Channel Descriptor n, Word3 */
#define EIM_EICHD2_WORD4     EIM.EICHD2_WORD4.R            /* Error Injection Channel Descriptor n, Word4 */
#define EIM_EICHD2_WORD5     EIM.EICHD2_WORD5.R            /* Error Injection Channel Descriptor n, Word5 */
#define EIM_EICHD2_WORD6     EIM.EICHD2_WORD6.R            /* Error Injection Channel Descriptor n, Word6 */
#define EIM_EICHD2_WORD7     EIM.EICHD2_WORD7.R            /* Error Injection Channel Descriptor n, Word7 */
#define EIM_EICHD2_WORD8     EIM.EICHD2_WORD8.R            /* Error Injection Channel Descriptor n, Word8 */
#define EIM_EICHD3_WORD0     EIM.EICHD3_WORD0.R            /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD3_WORD1     EIM.EICHD3_WORD1.R            /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD3_WORD2     EIM.EICHD3_WORD2.R            /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD3_WORD3     EIM.EICHD3_WORD3.R            /* Error Injection Channel Descriptor n, Word3 */
#define EIM_EICHD3_WORD4     EIM.EICHD3_WORD4.R            /* Error Injection Channel Descriptor n, Word4 */
#define EIM_EICHD3_WORD5     EIM.EICHD3_WORD5.R            /* Error Injection Channel Descriptor n, Word5 */
#define EIM_EICHD3_WORD6     EIM.EICHD3_WORD6.R            /* Error Injection Channel Descriptor n, Word6 */
#define EIM_EICHD3_WORD7     EIM.EICHD3_WORD7.R            /* Error Injection Channel Descriptor n, Word7 */
#define EIM_EICHD3_WORD8     EIM.EICHD3_WORD8.R            /* Error Injection Channel Descriptor n, Word8 */
#define EIM_EICHD4_WORD0     EIM.EICHD4_WORD0.R            /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD4_WORD1     EIM.EICHD4_WORD1.R            /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD4_WORD2     EIM.EICHD4_WORD2.R            /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD4_WORD3     EIM.EICHD4_WORD3.R            /* Error Injection Channel Descriptor n, Word3 */
#define EIM_EICHD4_WORD4     EIM.EICHD4_WORD4.R            /* Error Injection Channel Descriptor n, Word4 */
#define EIM_EICHD4_WORD5     EIM.EICHD4_WORD5.R            /* Error Injection Channel Descriptor n, Word5 */
#define EIM_EICHD4_WORD6     EIM.EICHD4_WORD6.R            /* Error Injection Channel Descriptor n, Word6 */
#define EIM_EICHD4_WORD7     EIM.EICHD4_WORD7.R            /* Error Injection Channel Descriptor n, Word7 */
#define EIM_EICHD4_WORD8     EIM.EICHD4_WORD8.R            /* Error Injection Channel Descriptor n, Word8 */
#define EIM_EICHD5_WORD0     EIM.EICHD5_WORD0.R            /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD5_WORD1     EIM.EICHD5_WORD1.R            /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD5_WORD2     EIM.EICHD5_WORD2.R            /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD5_WORD3     EIM.EICHD5_WORD3.R            /* Error Injection Channel Descriptor n, Word3 */
#define EIM_EICHD5_WORD4     EIM.EICHD5_WORD4.R            /* Error Injection Channel Descriptor n, Word4 */
#define EIM_EICHD5_WORD5     EIM.EICHD5_WORD5.R            /* Error Injection Channel Descriptor n, Word5 */
#define EIM_EICHD5_WORD6     EIM.EICHD5_WORD6.R            /* Error Injection Channel Descriptor n, Word6 */
#define EIM_EICHD5_WORD7     EIM.EICHD5_WORD7.R            /* Error Injection Channel Descriptor n, Word7 */
#define EIM_EICHD5_WORD8     EIM.EICHD5_WORD8.R            /* Error Injection Channel Descriptor n, Word8 */
#define EIM_EICHD6_WORD0     EIM.EICHD6_WORD0.R            /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD6_WORD1     EIM.EICHD6_WORD1.R            /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD6_WORD2     EIM.EICHD6_WORD2.R            /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD6_WORD3     EIM.EICHD6_WORD3.R            /* Error Injection Channel Descriptor n, Word3 */
#define EIM_EICHD6_WORD4     EIM.EICHD6_WORD4.R            /* Error Injection Channel Descriptor n, Word4 */
#define EIM_EICHD6_WORD5     EIM.EICHD6_WORD5.R            /* Error Injection Channel Descriptor n, Word5 */
#define EIM_EICHD6_WORD6     EIM.EICHD6_WORD6.R            /* Error Injection Channel Descriptor n, Word6 */
#define EIM_EICHD6_WORD7     EIM.EICHD6_WORD7.R            /* Error Injection Channel Descriptor n, Word7 */
#define EIM_EICHD6_WORD8     EIM.EICHD6_WORD8.R            /* Error Injection Channel Descriptor n, Word8 */
#define EIM_EICHD7_WORD0     EIM.EICHD7_WORD0.R            /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD7_WORD1     EIM.EICHD7_WORD1.R            /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD7_WORD2     EIM.EICHD7_WORD2.R            /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD7_WORD3     EIM.EICHD7_WORD3.R            /* Error Injection Channel Descriptor n, Word3 */
#define EIM_EICHD7_WORD4     EIM.EICHD7_WORD4.R            /* Error Injection Channel Descriptor n, Word4 */
#define EIM_EICHD7_WORD5     EIM.EICHD7_WORD5.R            /* Error Injection Channel Descriptor n, Word5 */
#define EIM_EICHD7_WORD6     EIM.EICHD7_WORD6.R            /* Error Injection Channel Descriptor n, Word6 */
#define EIM_EICHD7_WORD7     EIM.EICHD7_WORD7.R            /* Error Injection Channel Descriptor n, Word7 */
#define EIM_EICHD7_WORD8     EIM.EICHD7_WORD8.R            /* Error Injection Channel Descriptor n, Word8 */
#define EIM_EICHD8_WORD0     EIM.EICHD8_WORD0.R            /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD8_WORD1     EIM.EICHD8_WORD1.R            /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD8_WORD2     EIM.EICHD8_WORD2.R            /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD9_WORD0     EIM.EICHD9_WORD0.R            /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD9_WORD1     EIM.EICHD9_WORD1.R            /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD9_WORD2     EIM.EICHD9_WORD2.R            /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD10_WORD0    EIM.EICHD10_WORD0.R           /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD10_WORD1    EIM.EICHD10_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD10_WORD2    EIM.EICHD10_WORD2.R           /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD11_WORD0    EIM.EICHD11_WORD0.R           /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD11_WORD1    EIM.EICHD11_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD11_WORD2    EIM.EICHD11_WORD2.R           /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD12_WORD0    EIM.EICHD12_WORD0.R           /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD12_WORD1    EIM.EICHD12_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD12_WORD2    EIM.EICHD12_WORD2.R           /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD12_WORD3    EIM.EICHD12_WORD3.R           /* Error Injection Channel Descriptor n, Word3 */
#define EIM_EICHD12_WORD4    EIM.EICHD12_WORD4.R           /* Error Injection Channel Descriptor n, Word4 */
#define EIM_EICHD13_WORD0    EIM.EICHD13_WORD0.R           /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD13_WORD1    EIM.EICHD13_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD13_WORD2    EIM.EICHD13_WORD2.R           /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD13_WORD3    EIM.EICHD13_WORD3.R           /* Error Injection Channel Descriptor n, Word3 */
#define EIM_EICHD13_WORD4    EIM.EICHD13_WORD4.R           /* Error Injection Channel Descriptor n, Word4 */
#define EIM_EICHD14_WORD0    EIM.EICHD14_WORD0.R           /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD14_WORD1    EIM.EICHD14_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD14_WORD2    EIM.EICHD14_WORD2.R           /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD14_WORD3    EIM.EICHD14_WORD3.R           /* Error Injection Channel Descriptor n, Word3 */
#define EIM_EICHD14_WORD4    EIM.EICHD14_WORD4.R           /* Error Injection Channel Descriptor n, Word4 */
#define EIM_EICHD15_WORD0    EIM.EICHD15_WORD0.R           /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD15_WORD1    EIM.EICHD15_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD15_WORD2    EIM.EICHD15_WORD2.R           /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD15_WORD3    EIM.EICHD15_WORD3.R           /* Error Injection Channel Descriptor n, Word3 */
#define EIM_EICHD15_WORD4    EIM.EICHD15_WORD4.R           /* Error Injection Channel Descriptor n, Word4 */
#define EIM_EICHD16_WORD0    EIM.EICHD16_WORD0.R           /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD16_WORD1    EIM.EICHD16_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD16_WORD2    EIM.EICHD16_WORD2.R           /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD17_WORD0    EIM.EICHD17_WORD0.R           /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD17_WORD1    EIM.EICHD17_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD17_WORD2    EIM.EICHD17_WORD2.R           /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD18_WORD0    EIM.EICHD18_WORD0.R           /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD18_WORD1    EIM.EICHD18_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD18_WORD2    EIM.EICHD18_WORD2.R           /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD18_WORD3    EIM.EICHD18_WORD3.R           /* Error Injection Channel Descriptor n, Word3 */
#define EIM_EICHD18_WORD4    EIM.EICHD18_WORD4.R           /* Error Injection Channel Descriptor n, Word4 */
#define EIM_EICHD19_WORD0    EIM.EICHD19_WORD0.R           /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD19_WORD1    EIM.EICHD19_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD19_WORD2    EIM.EICHD19_WORD2.R           /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD19_WORD3    EIM.EICHD19_WORD3.R           /* Error Injection Channel Descriptor n, Word3 */
#define EIM_EICHD19_WORD4    EIM.EICHD19_WORD4.R           /* Error Injection Channel Descriptor n, Word4 */
#define EIM_EICHD20_WORD0    EIM.EICHD20_WORD0.R           /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD20_WORD1    EIM.EICHD20_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD20_WORD2    EIM.EICHD20_WORD2.R           /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD20_WORD3    EIM.EICHD20_WORD3.R           /* Error Injection Channel Descriptor n, Word3 */
#define EIM_EICHD20_WORD4    EIM.EICHD20_WORD4.R           /* Error Injection Channel Descriptor n, Word4 */
#define EIM_EICHD21_WORD0    EIM.EICHD21_WORD0.R           /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD21_WORD1    EIM.EICHD21_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD21_WORD2    EIM.EICHD21_WORD2.R           /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD21_WORD3    EIM.EICHD21_WORD3.R           /* Error Injection Channel Descriptor n, Word3 */
#define EIM_EICHD21_WORD4    EIM.EICHD21_WORD4.R           /* Error Injection Channel Descriptor n, Word4 */
#define EIM_EICHD22_WORD0    EIM.EICHD22_WORD0.R           /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD22_WORD1    EIM.EICHD22_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD22_WORD2    EIM.EICHD22_WORD2.R           /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD23_WORD0    EIM.EICHD23_WORD0.R           /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD23_WORD1    EIM.EICHD23_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD23_WORD2    EIM.EICHD23_WORD2.R           /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD24_WORD0    EIM.EICHD24_WORD0.R           /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD24_WORD1    EIM.EICHD24_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD24_WORD2    EIM.EICHD24_WORD2.R           /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD24_WORD3    EIM.EICHD24_WORD3.R           /* Error Injection Channel Descriptor n, Word3 */
#define EIM_EICHD24_WORD4    EIM.EICHD24_WORD4.R           /* Error Injection Channel Descriptor n, Word4 */
#define EIM_EICHD25_WORD0    EIM.EICHD25_WORD0.R           /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD25_WORD1    EIM.EICHD25_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD25_WORD2    EIM.EICHD25_WORD2.R           /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD25_WORD3    EIM.EICHD25_WORD3.R           /* Error Injection Channel Descriptor n, Word3 */
#define EIM_EICHD25_WORD4    EIM.EICHD25_WORD4.R           /* Error Injection Channel Descriptor n, Word4 */
#define EIM_EICHD26_WORD0    EIM.EICHD26_WORD0.R           /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD26_WORD1    EIM.EICHD26_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD26_WORD2    EIM.EICHD26_WORD2.R           /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD26_WORD3    EIM.EICHD26_WORD3.R           /* Error Injection Channel Descriptor n, Word3 */
#define EIM_EICHD26_WORD4    EIM.EICHD26_WORD4.R           /* Error Injection Channel Descriptor n, Word4 */
#define EIM_EICHD27_WORD0    EIM.EICHD27_WORD0.R           /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD27_WORD1    EIM.EICHD27_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD27_WORD2    EIM.EICHD27_WORD2.R           /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD27_WORD3    EIM.EICHD27_WORD3.R           /* Error Injection Channel Descriptor n, Word3 */
#define EIM_EICHD27_WORD4    EIM.EICHD27_WORD4.R           /* Error Injection Channel Descriptor n, Word4 */
#define EIM_EICHD28_WORD1    EIM.EICHD28_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD28_WORD2    EIM.EICHD28_WORD2.R           /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD28_WORD3    EIM.EICHD28_WORD3.R           /* Error Injection Channel Descriptor n, Word3 */
#define EIM_EICHD29_WORD1    EIM.EICHD29_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD30_WORD1    EIM.EICHD30_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */

#define LLCE__EIM_LLCE_EIMCR LLCE__EIM_LLCE.EIMCR.R        /* Error Injection Module Configuration Register */
#define LLCE__EIM_LLCE_EICHEN LLCE__EIM_LLCE.EICHEN.R      /* Error Injection Channel Enable register */
#define LLCE__EIM_LLCE_EICHD0_WORD0 LLCE__EIM_LLCE.EICHD0_WORD0.R /* Error Injection Channel Descriptor n, Word0 */
#define LLCE__EIM_LLCE_EICHD0_WORD1 LLCE__EIM_LLCE.EICHD0_WORD1.R /* Error Injection Channel Descriptor n, Word1 */
#define LLCE__EIM_LLCE_EICHD1_WORD0 LLCE__EIM_LLCE.EICHD1_WORD0.R /* Error Injection Channel Descriptor n, Word0 */
#define LLCE__EIM_LLCE_EICHD1_WORD1 LLCE__EIM_LLCE.EICHD1_WORD1.R /* Error Injection Channel Descriptor n, Word1 */
#define LLCE__EIM_LLCE_EICHD3_WORD0 LLCE__EIM_LLCE.EICHD3_WORD0.R /* Error Injection Channel Descriptor n, Word0 */
#define LLCE__EIM_LLCE_EICHD3_WORD1 LLCE__EIM_LLCE.EICHD3_WORD1.R /* Error Injection Channel Descriptor n, Word1 */
#define LLCE__EIM_LLCE_EICHD4_WORD0 LLCE__EIM_LLCE.EICHD4_WORD0.R /* Error Injection Channel Descriptor n, Word0 */
#define LLCE__EIM_LLCE_EICHD4_WORD1 LLCE__EIM_LLCE.EICHD4_WORD1.R /* Error Injection Channel Descriptor n, Word1 */
#define LLCE__EIM_LLCE_EICHD5_WORD0 LLCE__EIM_LLCE.EICHD5_WORD0.R /* Error Injection Channel Descriptor n, Word0 */
#define LLCE__EIM_LLCE_EICHD5_WORD1 LLCE__EIM_LLCE.EICHD5_WORD1.R /* Error Injection Channel Descriptor n, Word1 */
#define LLCE__EIM_LLCE_EICHD6_WORD0 LLCE__EIM_LLCE.EICHD6_WORD0.R /* Error Injection Channel Descriptor n, Word0 */
#define LLCE__EIM_LLCE_EICHD6_WORD1 LLCE__EIM_LLCE.EICHD6_WORD1.R /* Error Injection Channel Descriptor n, Word1 */

#define EIM_PFE0_EIMCR       EIM_PFE0.EIMCR.R              /* Error Injection Module Configuration Register */
#define EIM_PFE0_EICHEN      EIM_PFE0.EICHEN.R             /* Error Injection Channel Enable register */
#define EIM_PFE0_EICHD0_WORD0 EIM_PFE0.EICHD0_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE0_EICHD0_WORD1 EIM_PFE0.EICHD0_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE0_EICHD1_WORD0 EIM_PFE0.EICHD1_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE0_EICHD1_WORD1 EIM_PFE0.EICHD1_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE0_EICHD1_WORD2 EIM_PFE0.EICHD1_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE0_EICHD2_WORD0 EIM_PFE0.EICHD2_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE0_EICHD2_WORD1 EIM_PFE0.EICHD2_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE0_EICHD2_WORD2 EIM_PFE0.EICHD2_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE0_EICHD2_WORD3 EIM_PFE0.EICHD2_WORD3.R      /* Error Injection Channel Descriptor n, Word3 */
#define EIM_PFE0_EICHD2_WORD4 EIM_PFE0.EICHD2_WORD4.R      /* Error Injection Channel Descriptor n, Word4 */
#define EIM_PFE0_EICHD3_WORD0 EIM_PFE0.EICHD3_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE0_EICHD3_WORD1 EIM_PFE0.EICHD3_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE0_EICHD3_WORD2 EIM_PFE0.EICHD3_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE0_EICHD4_WORD0 EIM_PFE0.EICHD4_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE0_EICHD4_WORD1 EIM_PFE0.EICHD4_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE0_EICHD5_WORD0 EIM_PFE0.EICHD5_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE0_EICHD5_WORD1 EIM_PFE0.EICHD5_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE0_EICHD6_WORD0 EIM_PFE0.EICHD6_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE0_EICHD6_WORD1 EIM_PFE0.EICHD6_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE0_EICHD7_WORD0 EIM_PFE0.EICHD7_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE0_EICHD7_WORD1 EIM_PFE0.EICHD7_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE0_EICHD8_WORD0 EIM_PFE0.EICHD8_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE0_EICHD8_WORD1 EIM_PFE0.EICHD8_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE0_EICHD8_WORD2 EIM_PFE0.EICHD8_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE0_EICHD9_WORD0 EIM_PFE0.EICHD9_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE0_EICHD9_WORD1 EIM_PFE0.EICHD9_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE0_EICHD10_WORD0 EIM_PFE0.EICHD10_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE0_EICHD10_WORD1 EIM_PFE0.EICHD10_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE0_EICHD11_WORD0 EIM_PFE0.EICHD11_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE0_EICHD11_WORD1 EIM_PFE0.EICHD11_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE0_EICHD12_WORD0 EIM_PFE0.EICHD12_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE0_EICHD12_WORD1 EIM_PFE0.EICHD12_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE0_EICHD13_WORD0 EIM_PFE0.EICHD13_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE0_EICHD13_WORD1 EIM_PFE0.EICHD13_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE0_EICHD13_WORD2 EIM_PFE0.EICHD13_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE0_EICHD14_WORD0 EIM_PFE0.EICHD14_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE0_EICHD14_WORD1 EIM_PFE0.EICHD14_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE0_EICHD15_WORD0 EIM_PFE0.EICHD15_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE0_EICHD15_WORD1 EIM_PFE0.EICHD15_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE0_EICHD16_WORD0 EIM_PFE0.EICHD16_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE0_EICHD16_WORD1 EIM_PFE0.EICHD16_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE0_EICHD17_WORD0 EIM_PFE0.EICHD17_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE0_EICHD17_WORD1 EIM_PFE0.EICHD17_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE0_EICHD18_WORD0 EIM_PFE0.EICHD18_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE0_EICHD18_WORD1 EIM_PFE0.EICHD18_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE0_EICHD18_WORD2 EIM_PFE0.EICHD18_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE0_EICHD19_WORD0 EIM_PFE0.EICHD19_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE0_EICHD19_WORD1 EIM_PFE0.EICHD19_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE0_EICHD20_WORD0 EIM_PFE0.EICHD20_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE0_EICHD20_WORD1 EIM_PFE0.EICHD20_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE0_EICHD21_WORD0 EIM_PFE0.EICHD21_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE0_EICHD21_WORD1 EIM_PFE0.EICHD21_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE0_EICHD22_WORD0 EIM_PFE0.EICHD22_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE0_EICHD22_WORD1 EIM_PFE0.EICHD22_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE0_EICHD23_WORD0 EIM_PFE0.EICHD23_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE0_EICHD23_WORD1 EIM_PFE0.EICHD23_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE0_EICHD23_WORD2 EIM_PFE0.EICHD23_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE0_EICHD24_WORD0 EIM_PFE0.EICHD24_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE0_EICHD24_WORD1 EIM_PFE0.EICHD24_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE0_EICHD25_WORD0 EIM_PFE0.EICHD25_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE0_EICHD25_WORD1 EIM_PFE0.EICHD25_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE0_EICHD26_WORD0 EIM_PFE0.EICHD26_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE0_EICHD26_WORD1 EIM_PFE0.EICHD26_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE0_EICHD27_WORD0 EIM_PFE0.EICHD27_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE0_EICHD27_WORD1 EIM_PFE0.EICHD27_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE0_EICHD28_WORD0 EIM_PFE0.EICHD28_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE0_EICHD28_WORD1 EIM_PFE0.EICHD28_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE0_EICHD28_WORD2 EIM_PFE0.EICHD28_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE0_EICHD29_WORD0 EIM_PFE0.EICHD29_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE0_EICHD29_WORD1 EIM_PFE0.EICHD29_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE0_EICHD30_WORD0 EIM_PFE0.EICHD30_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE0_EICHD30_WORD1 EIM_PFE0.EICHD30_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE0_EICHD31_WORD0 EIM_PFE0.EICHD31_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE0_EICHD31_WORD1 EIM_PFE0.EICHD31_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */

#define EIM_PFE1_EIMCR       EIM_PFE1.EIMCR.R              /* Error Injection Module Configuration Register */
#define EIM_PFE1_EICHEN      EIM_PFE1.EICHEN.R             /* Error Injection Channel Enable register */
#define EIM_PFE1_EICHD0_WORD0 EIM_PFE1.EICHD0_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE1_EICHD0_WORD1 EIM_PFE1.EICHD0_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE1_EICHD1_WORD0 EIM_PFE1.EICHD1_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE1_EICHD1_WORD1 EIM_PFE1.EICHD1_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE1_EICHD1_WORD2 EIM_PFE1.EICHD1_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE1_EICHD2_WORD0 EIM_PFE1.EICHD2_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE1_EICHD2_WORD1 EIM_PFE1.EICHD2_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE1_EICHD3_WORD0 EIM_PFE1.EICHD3_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE1_EICHD3_WORD1 EIM_PFE1.EICHD3_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE1_EICHD4_WORD0 EIM_PFE1.EICHD4_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE1_EICHD4_WORD1 EIM_PFE1.EICHD4_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE1_EICHD5_WORD0 EIM_PFE1.EICHD5_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE1_EICHD5_WORD1 EIM_PFE1.EICHD5_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE1_EICHD6_WORD0 EIM_PFE1.EICHD6_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE1_EICHD6_WORD1 EIM_PFE1.EICHD6_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE1_EICHD6_WORD2 EIM_PFE1.EICHD6_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE1_EICHD7_WORD0 EIM_PFE1.EICHD7_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE1_EICHD7_WORD1 EIM_PFE1.EICHD7_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE1_EICHD8_WORD0 EIM_PFE1.EICHD8_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE1_EICHD8_WORD1 EIM_PFE1.EICHD8_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE1_EICHD9_WORD0 EIM_PFE1.EICHD9_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE1_EICHD9_WORD1 EIM_PFE1.EICHD9_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE1_EICHD10_WORD0 EIM_PFE1.EICHD10_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE1_EICHD10_WORD1 EIM_PFE1.EICHD10_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE1_EICHD11_WORD0 EIM_PFE1.EICHD11_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE1_EICHD11_WORD1 EIM_PFE1.EICHD11_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE1_EICHD12_WORD0 EIM_PFE1.EICHD12_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE1_EICHD12_WORD1 EIM_PFE1.EICHD12_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE1_EICHD12_WORD2 EIM_PFE1.EICHD12_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE1_EICHD13_WORD0 EIM_PFE1.EICHD13_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE1_EICHD13_WORD1 EIM_PFE1.EICHD13_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE1_EICHD13_WORD2 EIM_PFE1.EICHD13_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE1_EICHD13_WORD3 EIM_PFE1.EICHD13_WORD3.R    /* Error Injection Channel Descriptor n, Word3 */
#define EIM_PFE1_EICHD13_WORD4 EIM_PFE1.EICHD13_WORD4.R    /* Error Injection Channel Descriptor n, Word4 */
#define EIM_PFE1_EICHD14_WORD0 EIM_PFE1.EICHD14_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE1_EICHD14_WORD1 EIM_PFE1.EICHD14_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE1_EICHD14_WORD2 EIM_PFE1.EICHD14_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE1_EICHD14_WORD3 EIM_PFE1.EICHD14_WORD3.R    /* Error Injection Channel Descriptor n, Word3 */
#define EIM_PFE1_EICHD14_WORD4 EIM_PFE1.EICHD14_WORD4.R    /* Error Injection Channel Descriptor n, Word4 */

#define EIM_PFE2_EIMCR       EIM_PFE2.EIMCR.R              /* Error Injection Module Configuration Register */
#define EIM_PFE2_EICHEN      EIM_PFE2.EICHEN.R             /* Error Injection Channel Enable register */
#define EIM_PFE2_EICHD0_WORD1 EIM_PFE2.EICHD0_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE2_EICHD1_WORD1 EIM_PFE2.EICHD1_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE2_EICHD2_WORD1 EIM_PFE2.EICHD2_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE2_EICHD3_WORD1 EIM_PFE2.EICHD3_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE2_EICHD4_WORD1 EIM_PFE2.EICHD4_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE2_EICHD5_WORD1 EIM_PFE2.EICHD5_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE2_EICHD6_WORD1 EIM_PFE2.EICHD6_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE2_EICHD7_WORD1 EIM_PFE2.EICHD7_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE2_EICHD8_WORD1 EIM_PFE2.EICHD8_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE2_EICHD9_WORD1 EIM_PFE2.EICHD9_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE2_EICHD10_WORD1 EIM_PFE2.EICHD10_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE2_EICHD11_WORD1 EIM_PFE2.EICHD11_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE2_EICHD12_WORD1 EIM_PFE2.EICHD12_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE2_EICHD13_WORD1 EIM_PFE2.EICHD13_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE2_EICHD14_WORD1 EIM_PFE2.EICHD14_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE2_EICHD15_WORD1 EIM_PFE2.EICHD15_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE2_EICHD16_WORD0 EIM_PFE2.EICHD16_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE2_EICHD16_WORD1 EIM_PFE2.EICHD16_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE2_EICHD16_WORD2 EIM_PFE2.EICHD16_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE2_EICHD17_WORD0 EIM_PFE2.EICHD17_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE2_EICHD17_WORD1 EIM_PFE2.EICHD17_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE2_EICHD17_WORD2 EIM_PFE2.EICHD17_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE2_EICHD18_WORD0 EIM_PFE2.EICHD18_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE2_EICHD18_WORD1 EIM_PFE2.EICHD18_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE2_EICHD18_WORD2 EIM_PFE2.EICHD18_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE2_EICHD19_WORD0 EIM_PFE2.EICHD19_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE2_EICHD19_WORD1 EIM_PFE2.EICHD19_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE2_EICHD19_WORD2 EIM_PFE2.EICHD19_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE2_EICHD20_WORD0 EIM_PFE2.EICHD20_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE2_EICHD20_WORD1 EIM_PFE2.EICHD20_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE2_EICHD20_WORD2 EIM_PFE2.EICHD20_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE2_EICHD21_WORD0 EIM_PFE2.EICHD21_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE2_EICHD21_WORD1 EIM_PFE2.EICHD21_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE2_EICHD21_WORD2 EIM_PFE2.EICHD21_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE2_EICHD22_WORD0 EIM_PFE2.EICHD22_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE2_EICHD22_WORD1 EIM_PFE2.EICHD22_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE2_EICHD22_WORD2 EIM_PFE2.EICHD22_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE2_EICHD22_WORD3 EIM_PFE2.EICHD22_WORD3.R    /* Error Injection Channel Descriptor n, Word3 */
#define EIM_PFE2_EICHD22_WORD4 EIM_PFE2.EICHD22_WORD4.R    /* Error Injection Channel Descriptor n, Word4 */
#define EIM_PFE2_EICHD22_WORD5 EIM_PFE2.EICHD22_WORD5.R    /* Error Injection Channel Descriptor n, Word5 */
#define EIM_PFE2_EICHD22_WORD6 EIM_PFE2.EICHD22_WORD6.R    /* Error Injection Channel Descriptor n, Word6 */
#define EIM_PFE2_EICHD22_WORD7 EIM_PFE2.EICHD22_WORD7.R    /* Error Injection Channel Descriptor n, Word7 */
#define EIM_PFE2_EICHD22_WORD8 EIM_PFE2.EICHD22_WORD8.R    /* Error Injection Channel Descriptor n, Word8 */
#define EIM_PFE2_EICHD23_WORD0 EIM_PFE2.EICHD23_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE2_EICHD23_WORD1 EIM_PFE2.EICHD23_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE2_EICHD23_WORD2 EIM_PFE2.EICHD23_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE2_EICHD24_WORD0 EIM_PFE2.EICHD24_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE2_EICHD24_WORD1 EIM_PFE2.EICHD24_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE2_EICHD24_WORD2 EIM_PFE2.EICHD24_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE2_EICHD25_WORD0 EIM_PFE2.EICHD25_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE2_EICHD25_WORD1 EIM_PFE2.EICHD25_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE2_EICHD25_WORD2 EIM_PFE2.EICHD25_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE2_EICHD26_WORD0 EIM_PFE2.EICHD26_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE2_EICHD26_WORD1 EIM_PFE2.EICHD26_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE2_EICHD26_WORD2 EIM_PFE2.EICHD26_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE2_EICHD27_WORD0 EIM_PFE2.EICHD27_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE2_EICHD27_WORD1 EIM_PFE2.EICHD27_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE2_EICHD27_WORD2 EIM_PFE2.EICHD27_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE2_EICHD28_WORD0 EIM_PFE2.EICHD28_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE2_EICHD28_WORD1 EIM_PFE2.EICHD28_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE2_EICHD28_WORD2 EIM_PFE2.EICHD28_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE2_EICHD29_WORD0 EIM_PFE2.EICHD29_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE2_EICHD29_WORD1 EIM_PFE2.EICHD29_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE2_EICHD29_WORD2 EIM_PFE2.EICHD29_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE2_EICHD30_WORD0 EIM_PFE2.EICHD30_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE2_EICHD30_WORD1 EIM_PFE2.EICHD30_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE2_EICHD30_WORD2 EIM_PFE2.EICHD30_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE2_EICHD31_WORD0 EIM_PFE2.EICHD31_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE2_EICHD31_WORD1 EIM_PFE2.EICHD31_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */

#define EIM_PFE3_EIMCR       EIM_PFE3.EIMCR.R              /* Error Injection Module Configuration Register */
#define EIM_PFE3_EICHEN      EIM_PFE3.EICHEN.R             /* Error Injection Channel Enable register */
#define EIM_PFE3_EICHD0_WORD0 EIM_PFE3.EICHD0_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE3_EICHD0_WORD1 EIM_PFE3.EICHD0_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE3_EICHD0_WORD2 EIM_PFE3.EICHD0_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE3_EICHD0_WORD3 EIM_PFE3.EICHD0_WORD3.R      /* Error Injection Channel Descriptor n, Word3 */
#define EIM_PFE3_EICHD0_WORD4 EIM_PFE3.EICHD0_WORD4.R      /* Error Injection Channel Descriptor n, Word4 */
#define EIM_PFE3_EICHD0_WORD5 EIM_PFE3.EICHD0_WORD5.R      /* Error Injection Channel Descriptor n, Word5 */
#define EIM_PFE3_EICHD0_WORD6 EIM_PFE3.EICHD0_WORD6.R      /* Error Injection Channel Descriptor n, Word6 */
#define EIM_PFE3_EICHD0_WORD7 EIM_PFE3.EICHD0_WORD7.R      /* Error Injection Channel Descriptor n, Word7 */
#define EIM_PFE3_EICHD0_WORD8 EIM_PFE3.EICHD0_WORD8.R      /* Error Injection Channel Descriptor n, Word8 */
#define EIM_PFE3_EICHD1_WORD0 EIM_PFE3.EICHD1_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE3_EICHD1_WORD1 EIM_PFE3.EICHD1_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE3_EICHD1_WORD2 EIM_PFE3.EICHD1_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE3_EICHD2_WORD0 EIM_PFE3.EICHD2_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE3_EICHD2_WORD1 EIM_PFE3.EICHD2_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE3_EICHD2_WORD2 EIM_PFE3.EICHD2_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE3_EICHD3_WORD0 EIM_PFE3.EICHD3_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE3_EICHD3_WORD1 EIM_PFE3.EICHD3_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE3_EICHD3_WORD2 EIM_PFE3.EICHD3_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE3_EICHD4_WORD0 EIM_PFE3.EICHD4_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE3_EICHD4_WORD1 EIM_PFE3.EICHD4_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE3_EICHD4_WORD2 EIM_PFE3.EICHD4_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE3_EICHD5_WORD0 EIM_PFE3.EICHD5_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE3_EICHD5_WORD1 EIM_PFE3.EICHD5_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE3_EICHD5_WORD2 EIM_PFE3.EICHD5_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE3_EICHD6_WORD0 EIM_PFE3.EICHD6_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE3_EICHD6_WORD1 EIM_PFE3.EICHD6_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE3_EICHD6_WORD2 EIM_PFE3.EICHD6_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE3_EICHD7_WORD0 EIM_PFE3.EICHD7_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE3_EICHD7_WORD1 EIM_PFE3.EICHD7_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE3_EICHD7_WORD2 EIM_PFE3.EICHD7_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE3_EICHD8_WORD0 EIM_PFE3.EICHD8_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE3_EICHD8_WORD1 EIM_PFE3.EICHD8_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE3_EICHD8_WORD2 EIM_PFE3.EICHD8_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE3_EICHD9_WORD0 EIM_PFE3.EICHD9_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE3_EICHD9_WORD1 EIM_PFE3.EICHD9_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE3_EICHD10_WORD0 EIM_PFE3.EICHD10_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE3_EICHD10_WORD1 EIM_PFE3.EICHD10_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE3_EICHD10_WORD2 EIM_PFE3.EICHD10_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE3_EICHD10_WORD3 EIM_PFE3.EICHD10_WORD3.R    /* Error Injection Channel Descriptor n, Word3 */
#define EIM_PFE3_EICHD10_WORD4 EIM_PFE3.EICHD10_WORD4.R    /* Error Injection Channel Descriptor n, Word4 */
#define EIM_PFE3_EICHD10_WORD5 EIM_PFE3.EICHD10_WORD5.R    /* Error Injection Channel Descriptor n, Word5 */
#define EIM_PFE3_EICHD10_WORD6 EIM_PFE3.EICHD10_WORD6.R    /* Error Injection Channel Descriptor n, Word6 */
#define EIM_PFE3_EICHD10_WORD7 EIM_PFE3.EICHD10_WORD7.R    /* Error Injection Channel Descriptor n, Word7 */
#define EIM_PFE3_EICHD10_WORD8 EIM_PFE3.EICHD10_WORD8.R    /* Error Injection Channel Descriptor n, Word8 */
#define EIM_PFE3_EICHD11_WORD0 EIM_PFE3.EICHD11_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE3_EICHD11_WORD1 EIM_PFE3.EICHD11_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE3_EICHD11_WORD2 EIM_PFE3.EICHD11_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE3_EICHD12_WORD0 EIM_PFE3.EICHD12_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE3_EICHD12_WORD1 EIM_PFE3.EICHD12_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE3_EICHD12_WORD2 EIM_PFE3.EICHD12_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE3_EICHD13_WORD0 EIM_PFE3.EICHD13_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE3_EICHD13_WORD1 EIM_PFE3.EICHD13_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE3_EICHD13_WORD2 EIM_PFE3.EICHD13_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE3_EICHD14_WORD0 EIM_PFE3.EICHD14_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE3_EICHD14_WORD1 EIM_PFE3.EICHD14_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE3_EICHD14_WORD2 EIM_PFE3.EICHD14_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE3_EICHD15_WORD0 EIM_PFE3.EICHD15_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE3_EICHD15_WORD1 EIM_PFE3.EICHD15_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE3_EICHD15_WORD2 EIM_PFE3.EICHD15_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE3_EICHD16_WORD0 EIM_PFE3.EICHD16_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE3_EICHD16_WORD1 EIM_PFE3.EICHD16_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE3_EICHD16_WORD2 EIM_PFE3.EICHD16_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE3_EICHD17_WORD0 EIM_PFE3.EICHD17_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE3_EICHD17_WORD1 EIM_PFE3.EICHD17_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE3_EICHD17_WORD2 EIM_PFE3.EICHD17_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE3_EICHD18_WORD0 EIM_PFE3.EICHD18_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE3_EICHD18_WORD1 EIM_PFE3.EICHD18_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE3_EICHD18_WORD2 EIM_PFE3.EICHD18_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE3_EICHD19_WORD0 EIM_PFE3.EICHD19_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE3_EICHD19_WORD1 EIM_PFE3.EICHD19_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE3_EICHD20_WORD0 EIM_PFE3.EICHD20_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE3_EICHD20_WORD1 EIM_PFE3.EICHD20_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE3_EICHD20_WORD2 EIM_PFE3.EICHD20_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE3_EICHD21_WORD0 EIM_PFE3.EICHD21_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE3_EICHD21_WORD1 EIM_PFE3.EICHD21_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE3_EICHD21_WORD2 EIM_PFE3.EICHD21_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE3_EICHD22_WORD0 EIM_PFE3.EICHD22_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE3_EICHD22_WORD1 EIM_PFE3.EICHD22_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE3_EICHD22_WORD2 EIM_PFE3.EICHD22_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE3_EICHD23_WORD0 EIM_PFE3.EICHD23_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE3_EICHD23_WORD1 EIM_PFE3.EICHD23_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE3_EICHD23_WORD2 EIM_PFE3.EICHD23_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE3_EICHD24_WORD0 EIM_PFE3.EICHD24_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE3_EICHD24_WORD1 EIM_PFE3.EICHD24_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE3_EICHD24_WORD2 EIM_PFE3.EICHD24_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE3_EICHD25_WORD0 EIM_PFE3.EICHD25_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE3_EICHD25_WORD1 EIM_PFE3.EICHD25_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE3_EICHD25_WORD2 EIM_PFE3.EICHD25_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE3_EICHD26_WORD0 EIM_PFE3.EICHD26_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE3_EICHD26_WORD1 EIM_PFE3.EICHD26_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE3_EICHD26_WORD2 EIM_PFE3.EICHD26_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE3_EICHD27_WORD0 EIM_PFE3.EICHD27_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE3_EICHD27_WORD1 EIM_PFE3.EICHD27_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE3_EICHD27_WORD2 EIM_PFE3.EICHD27_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE3_EICHD28_WORD0 EIM_PFE3.EICHD28_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE3_EICHD28_WORD1 EIM_PFE3.EICHD28_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE3_EICHD28_WORD2 EIM_PFE3.EICHD28_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE3_EICHD29_WORD0 EIM_PFE3.EICHD29_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE3_EICHD29_WORD1 EIM_PFE3.EICHD29_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE3_EICHD29_WORD2 EIM_PFE3.EICHD29_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE3_EICHD30_WORD0 EIM_PFE3.EICHD30_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE3_EICHD30_WORD1 EIM_PFE3.EICHD30_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE3_EICHD30_WORD2 EIM_PFE3.EICHD30_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE3_EICHD31_WORD0 EIM_PFE3.EICHD31_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE3_EICHD31_WORD1 EIM_PFE3.EICHD31_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE3_EICHD31_WORD2 EIM_PFE3.EICHD31_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */

#define EIM_PFE4_EIMCR       EIM_PFE4.EIMCR.R              /* Error Injection Module Configuration Register */
#define EIM_PFE4_EICHEN      EIM_PFE4.EICHEN.R             /* Error Injection Channel Enable register */
#define EIM_PFE4_EICHD0_WORD0 EIM_PFE4.EICHD0_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE4_EICHD0_WORD1 EIM_PFE4.EICHD0_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE4_EICHD0_WORD2 EIM_PFE4.EICHD0_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE4_EICHD1_WORD0 EIM_PFE4.EICHD1_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE4_EICHD1_WORD1 EIM_PFE4.EICHD1_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE4_EICHD2_WORD0 EIM_PFE4.EICHD2_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE4_EICHD2_WORD1 EIM_PFE4.EICHD2_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE4_EICHD2_WORD2 EIM_PFE4.EICHD2_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE4_EICHD3_WORD0 EIM_PFE4.EICHD3_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE4_EICHD3_WORD1 EIM_PFE4.EICHD3_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE4_EICHD3_WORD2 EIM_PFE4.EICHD3_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE4_EICHD4_WORD0 EIM_PFE4.EICHD4_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE4_EICHD4_WORD1 EIM_PFE4.EICHD4_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE4_EICHD4_WORD2 EIM_PFE4.EICHD4_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE4_EICHD5_WORD0 EIM_PFE4.EICHD5_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE4_EICHD5_WORD1 EIM_PFE4.EICHD5_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE4_EICHD5_WORD2 EIM_PFE4.EICHD5_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE4_EICHD6_WORD0 EIM_PFE4.EICHD6_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE4_EICHD6_WORD1 EIM_PFE4.EICHD6_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE4_EICHD6_WORD2 EIM_PFE4.EICHD6_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE4_EICHD7_WORD0 EIM_PFE4.EICHD7_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE4_EICHD7_WORD1 EIM_PFE4.EICHD7_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE4_EICHD7_WORD2 EIM_PFE4.EICHD7_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE4_EICHD8_WORD0 EIM_PFE4.EICHD8_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE4_EICHD8_WORD1 EIM_PFE4.EICHD8_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE4_EICHD8_WORD2 EIM_PFE4.EICHD8_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE4_EICHD9_WORD0 EIM_PFE4.EICHD9_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE4_EICHD9_WORD1 EIM_PFE4.EICHD9_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE4_EICHD9_WORD2 EIM_PFE4.EICHD9_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */

#define EIM_PFE5_EIMCR       EIM_PFE5.EIMCR.R              /* Error Injection Module Configuration Register */
#define EIM_PFE5_EICHEN      EIM_PFE5.EICHEN.R             /* Error Injection Channel Enable register */
#define EIM_PFE5_EICHD0_WORD1 EIM_PFE5.EICHD0_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE5_EICHD1_WORD1 EIM_PFE5.EICHD1_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE5_EICHD2_WORD1 EIM_PFE5.EICHD2_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE5_EICHD3_WORD1 EIM_PFE5.EICHD3_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE5_EICHD4_WORD1 EIM_PFE5.EICHD4_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE5_EICHD5_WORD1 EIM_PFE5.EICHD5_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE5_EICHD6_WORD1 EIM_PFE5.EICHD6_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE5_EICHD7_WORD1 EIM_PFE5.EICHD7_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE5_EICHD8_WORD0 EIM_PFE5.EICHD8_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE5_EICHD8_WORD1 EIM_PFE5.EICHD8_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE5_EICHD8_WORD2 EIM_PFE5.EICHD8_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE5_EICHD9_WORD0 EIM_PFE5.EICHD9_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE5_EICHD9_WORD1 EIM_PFE5.EICHD9_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE5_EICHD9_WORD2 EIM_PFE5.EICHD9_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE5_EICHD10_WORD0 EIM_PFE5.EICHD10_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE5_EICHD10_WORD1 EIM_PFE5.EICHD10_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE5_EICHD10_WORD2 EIM_PFE5.EICHD10_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE5_EICHD11_WORD0 EIM_PFE5.EICHD11_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE5_EICHD11_WORD1 EIM_PFE5.EICHD11_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE5_EICHD11_WORD2 EIM_PFE5.EICHD11_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE5_EICHD12_WORD0 EIM_PFE5.EICHD12_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE5_EICHD12_WORD1 EIM_PFE5.EICHD12_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE5_EICHD12_WORD2 EIM_PFE5.EICHD12_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE5_EICHD13_WORD0 EIM_PFE5.EICHD13_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE5_EICHD13_WORD1 EIM_PFE5.EICHD13_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE5_EICHD13_WORD2 EIM_PFE5.EICHD13_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE5_EICHD14_WORD0 EIM_PFE5.EICHD14_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE5_EICHD14_WORD1 EIM_PFE5.EICHD14_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE5_EICHD15_WORD0 EIM_PFE5.EICHD15_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE5_EICHD15_WORD1 EIM_PFE5.EICHD15_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE5_EICHD15_WORD2 EIM_PFE5.EICHD15_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE5_EICHD16_WORD0 EIM_PFE5.EICHD16_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE5_EICHD16_WORD1 EIM_PFE5.EICHD16_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE5_EICHD17_WORD0 EIM_PFE5.EICHD17_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE5_EICHD17_WORD1 EIM_PFE5.EICHD17_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE5_EICHD17_WORD2 EIM_PFE5.EICHD17_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE5_EICHD18_WORD0 EIM_PFE5.EICHD18_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE5_EICHD18_WORD1 EIM_PFE5.EICHD18_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE5_EICHD19_WORD0 EIM_PFE5.EICHD19_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE5_EICHD19_WORD1 EIM_PFE5.EICHD19_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE5_EICHD19_WORD2 EIM_PFE5.EICHD19_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE5_EICHD20_WORD0 EIM_PFE5.EICHD20_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE5_EICHD20_WORD1 EIM_PFE5.EICHD20_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE5_EICHD21_WORD0 EIM_PFE5.EICHD21_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE5_EICHD21_WORD1 EIM_PFE5.EICHD21_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE5_EICHD21_WORD2 EIM_PFE5.EICHD21_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE5_EICHD22_WORD0 EIM_PFE5.EICHD22_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE5_EICHD22_WORD1 EIM_PFE5.EICHD22_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE5_EICHD23_WORD0 EIM_PFE5.EICHD23_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE5_EICHD23_WORD1 EIM_PFE5.EICHD23_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE5_EICHD23_WORD2 EIM_PFE5.EICHD23_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE5_EICHD24_WORD0 EIM_PFE5.EICHD24_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE5_EICHD24_WORD1 EIM_PFE5.EICHD24_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE5_EICHD25_WORD0 EIM_PFE5.EICHD25_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE5_EICHD25_WORD1 EIM_PFE5.EICHD25_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE5_EICHD25_WORD2 EIM_PFE5.EICHD25_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE5_EICHD25_WORD3 EIM_PFE5.EICHD25_WORD3.R    /* Error Injection Channel Descriptor n, Word3 */
#define EIM_PFE5_EICHD25_WORD4 EIM_PFE5.EICHD25_WORD4.R    /* Error Injection Channel Descriptor n, Word4 */
#define EIM_PFE5_EICHD26_WORD0 EIM_PFE5.EICHD26_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE5_EICHD26_WORD1 EIM_PFE5.EICHD26_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE5_EICHD26_WORD2 EIM_PFE5.EICHD26_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE5_EICHD27_WORD0 EIM_PFE5.EICHD27_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE5_EICHD27_WORD1 EIM_PFE5.EICHD27_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE5_EICHD27_WORD2 EIM_PFE5.EICHD27_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE5_EICHD28_WORD0 EIM_PFE5.EICHD28_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE5_EICHD28_WORD1 EIM_PFE5.EICHD28_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE5_EICHD28_WORD2 EIM_PFE5.EICHD28_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_PFE5_EICHD29_WORD0 EIM_PFE5.EICHD29_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE5_EICHD29_WORD1 EIM_PFE5.EICHD29_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE5_EICHD30_WORD0 EIM_PFE5.EICHD30_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE5_EICHD30_WORD1 EIM_PFE5.EICHD30_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE5_EICHD31_WORD0 EIM_PFE5.EICHD31_WORD0.R    /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE5_EICHD31_WORD1 EIM_PFE5.EICHD31_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */

#define EIM_PFE6_EIMCR       EIM_PFE6.EIMCR.R              /* Error Injection Module Configuration Register */
#define EIM_PFE6_EICHEN      EIM_PFE6.EICHEN.R             /* Error Injection Channel Enable register */
#define EIM_PFE6_EICHD0_WORD0 EIM_PFE6.EICHD0_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE6_EICHD0_WORD1 EIM_PFE6.EICHD0_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_PFE6_EICHD1_WORD0 EIM_PFE6.EICHD1_WORD0.R      /* Error Injection Channel Descriptor n, Word0 */
#define EIM_PFE6_EICHD1_WORD1 EIM_PFE6.EICHD1_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */

#define EIM_MISC_EIMCR       EIM_MISC.EIMCR.R              /* Error Injection Module Configuration Register */
#define EIM_MISC_EICHEN      EIM_MISC.EICHEN.R             /* Error Injection Channel Enable register */
#define EIM_MISC_EICHD0_WORD1 EIM_MISC.EICHD0_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_MISC_EICHD0_WORD2 EIM_MISC.EICHD0_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_MISC_EICHD0_WORD3 EIM_MISC.EICHD0_WORD3.R      /* Error Injection Channel Descriptor n, Word3 */
#define EIM_MISC_EICHD1_WORD1 EIM_MISC.EICHD1_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_MISC_EICHD1_WORD2 EIM_MISC.EICHD1_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_MISC_EICHD1_WORD3 EIM_MISC.EICHD1_WORD3.R      /* Error Injection Channel Descriptor n, Word3 */
#define EIM_MISC_EICHD2_WORD1 EIM_MISC.EICHD2_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_MISC_EICHD2_WORD2 EIM_MISC.EICHD2_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_MISC_EICHD2_WORD3 EIM_MISC.EICHD2_WORD3.R      /* Error Injection Channel Descriptor n, Word3 */
#define EIM_MISC_EICHD2_WORD4 EIM_MISC.EICHD2_WORD4.R      /* Error Injection Channel Descriptor n, Word4 */
#define EIM_MISC_EICHD3_WORD1 EIM_MISC.EICHD3_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_MISC_EICHD3_WORD2 EIM_MISC.EICHD3_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_MISC_EICHD3_WORD3 EIM_MISC.EICHD3_WORD3.R      /* Error Injection Channel Descriptor n, Word3 */
#define EIM_MISC_EICHD3_WORD4 EIM_MISC.EICHD3_WORD4.R      /* Error Injection Channel Descriptor n, Word4 */
#define EIM_MISC_EICHD4_WORD1 EIM_MISC.EICHD4_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_MISC_EICHD4_WORD2 EIM_MISC.EICHD4_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_MISC_EICHD4_WORD3 EIM_MISC.EICHD4_WORD3.R      /* Error Injection Channel Descriptor n, Word3 */
#define EIM_MISC_EICHD4_WORD4 EIM_MISC.EICHD4_WORD4.R      /* Error Injection Channel Descriptor n, Word4 */
#define EIM_MISC_EICHD5_WORD1 EIM_MISC.EICHD5_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_MISC_EICHD5_WORD2 EIM_MISC.EICHD5_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_MISC_EICHD6_WORD1 EIM_MISC.EICHD6_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_MISC_EICHD6_WORD2 EIM_MISC.EICHD6_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_MISC_EICHD6_WORD3 EIM_MISC.EICHD6_WORD3.R      /* Error Injection Channel Descriptor n, Word3 */
#define EIM_MISC_EICHD7_WORD1 EIM_MISC.EICHD7_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_MISC_EICHD7_WORD2 EIM_MISC.EICHD7_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_MISC_EICHD7_WORD3 EIM_MISC.EICHD7_WORD3.R      /* Error Injection Channel Descriptor n, Word3 */
#define EIM_MISC_EICHD8_WORD1 EIM_MISC.EICHD8_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_MISC_EICHD8_WORD2 EIM_MISC.EICHD8_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_MISC_EICHD8_WORD3 EIM_MISC.EICHD8_WORD3.R      /* Error Injection Channel Descriptor n, Word3 */
#define EIM_MISC_EICHD9_WORD1 EIM_MISC.EICHD9_WORD1.R      /* Error Injection Channel Descriptor n, Word1 */
#define EIM_MISC_EICHD9_WORD2 EIM_MISC.EICHD9_WORD2.R      /* Error Injection Channel Descriptor n, Word2 */
#define EIM_MISC_EICHD10_WORD1 EIM_MISC.EICHD10_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_MISC_EICHD10_WORD2 EIM_MISC.EICHD10_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_MISC_EICHD10_WORD3 EIM_MISC.EICHD10_WORD3.R    /* Error Injection Channel Descriptor n, Word3 */
#define EIM_MISC_EICHD11_WORD1 EIM_MISC.EICHD11_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_MISC_EICHD11_WORD2 EIM_MISC.EICHD11_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_MISC_EICHD11_WORD3 EIM_MISC.EICHD11_WORD3.R    /* Error Injection Channel Descriptor n, Word3 */
#define EIM_MISC_EICHD12_WORD1 EIM_MISC.EICHD12_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_MISC_EICHD12_WORD2 EIM_MISC.EICHD12_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_MISC_EICHD12_WORD3 EIM_MISC.EICHD12_WORD3.R    /* Error Injection Channel Descriptor n, Word3 */
#define EIM_MISC_EICHD13_WORD1 EIM_MISC.EICHD13_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_MISC_EICHD13_WORD2 EIM_MISC.EICHD13_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_MISC_EICHD13_WORD3 EIM_MISC.EICHD13_WORD3.R    /* Error Injection Channel Descriptor n, Word3 */
#define EIM_MISC_EICHD14_WORD1 EIM_MISC.EICHD14_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_MISC_EICHD14_WORD2 EIM_MISC.EICHD14_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_MISC_EICHD14_WORD3 EIM_MISC.EICHD14_WORD3.R    /* Error Injection Channel Descriptor n, Word3 */
#define EIM_MISC_EICHD15_WORD1 EIM_MISC.EICHD15_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */
#define EIM_MISC_EICHD15_WORD2 EIM_MISC.EICHD15_WORD2.R    /* Error Injection Channel Descriptor n, Word2 */
#define EIM_MISC_EICHD16_WORD1 EIM_MISC.EICHD16_WORD1.R    /* Error Injection Channel Descriptor n, Word1 */

/* ERM */
#define ERM_PER_CR0          ERM_PER.CR0.R                 /* ERM Configuration Register 0 */
#define ERM_PER_CR1          ERM_PER.CR1.R                 /* ERM Configuration Register 1 */
#define ERM_PER_SR0          ERM_PER.SR0.R                 /* ERM Status Register 0 */
#define ERM_PER_SR1          ERM_PER.SR1.R                 /* ERM Status Register 1 */
#define ERM_PER_EAR0         ERM_PER.EAR0.R                /* ERM Memory n Error Address Register */
#define ERM_PER_CORR_ERR_CNT0 ERM_PER.CORR_ERR_CNT0.R      /* ERM Memory n Correctable Error Count Register */
#define ERM_PER_EAR1         ERM_PER.EAR1.R                /* ERM Memory n Error Address Register */
#define ERM_PER_CORR_ERR_CNT1 ERM_PER.CORR_ERR_CNT1.R      /* ERM Memory n Correctable Error Count Register */
#define ERM_PER_EAR2         ERM_PER.EAR2.R                /* ERM Memory n Error Address Register */
#define ERM_PER_CORR_ERR_CNT2 ERM_PER.CORR_ERR_CNT2.R      /* ERM Memory n Correctable Error Count Register */
#define ERM_PER_EAR3         ERM_PER.EAR3.R                /* ERM Memory n Error Address Register */
#define ERM_PER_CORR_ERR_CNT3 ERM_PER.CORR_ERR_CNT3.R      /* ERM Memory n Correctable Error Count Register */
#define ERM_PER_EAR4         ERM_PER.EAR4.R                /* ERM Memory n Error Address Register */
#define ERM_PER_CORR_ERR_CNT4 ERM_PER.CORR_ERR_CNT4.R      /* ERM Memory n Correctable Error Count Register */
#define ERM_PER_EAR5         ERM_PER.EAR5.R                /* ERM Memory n Error Address Register */
#define ERM_PER_CORR_ERR_CNT5 ERM_PER.CORR_ERR_CNT5.R      /* ERM Memory n Correctable Error Count Register */
#define ERM_PER_CORR_ERR_CNT6 ERM_PER.CORR_ERR_CNT6.R      /* ERM Memory n Correctable Error Count Register */
#define ERM_PER_CORR_ERR_CNT7 ERM_PER.CORR_ERR_CNT7.R      /* ERM Memory n Correctable Error Count Register */
#define ERM_PER_EAR8         ERM_PER.EAR8.R                /* ERM Memory n Error Address Register */
#define ERM_PER_SYN8         ERM_PER.SYN8.R                /* ERM Memory n Syndrome Register */
#define ERM_PER_CORR_ERR_CNT8 ERM_PER.CORR_ERR_CNT8.R      /* ERM Memory n Correctable Error Count Register */
#define ERM_PER_EAR9         ERM_PER.EAR9.R                /* ERM Memory n Error Address Register */
#define ERM_PER_SYN9         ERM_PER.SYN9.R                /* ERM Memory n Syndrome Register */
#define ERM_PER_CORR_ERR_CNT9 ERM_PER.CORR_ERR_CNT9.R      /* ERM Memory n Correctable Error Count Register */

#define ERM_CPU0_CR0         ERM_CPU0.CR0.R                /* ERM Configuration Register 0 */
#define ERM_CPU0_SR0         ERM_CPU0.SR0.R                /* ERM Status Register 0 */
#define ERM_CPU0_EAR0        ERM_CPU0.EAR0.R               /* ERM Memory n Error Address Register */
#define ERM_CPU0_SYN0        ERM_CPU0.SYN0.R               /* ERM Memory n Syndrome Register */
#define ERM_CPU0_CORR_ERR_CNT0 ERM_CPU0.CORR_ERR_CNT0.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_CPU0_EAR1        ERM_CPU0.EAR1.R               /* ERM Memory n Error Address Register */
#define ERM_CPU0_SYN1        ERM_CPU0.SYN1.R               /* ERM Memory n Syndrome Register */
#define ERM_CPU0_CORR_ERR_CNT1 ERM_CPU0.CORR_ERR_CNT1.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_CPU0_CORR_ERR_CNT2 ERM_CPU0.CORR_ERR_CNT2.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_CPU0_CORR_ERR_CNT3 ERM_CPU0.CORR_ERR_CNT3.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_CPU0_CORR_ERR_CNT4 ERM_CPU0.CORR_ERR_CNT4.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_CPU0_CORR_ERR_CNT5 ERM_CPU0.CORR_ERR_CNT5.R    /* ERM Memory n Correctable Error Count Register */

#define ERM_CPU1_CR0         ERM_CPU1.CR0.R                /* ERM Configuration Register 0 */
#define ERM_CPU1_SR0         ERM_CPU1.SR0.R                /* ERM Status Register 0 */
#define ERM_CPU1_EAR0        ERM_CPU1.EAR0.R               /* ERM Memory n Error Address Register */
#define ERM_CPU1_SYN0        ERM_CPU1.SYN0.R               /* ERM Memory n Syndrome Register */
#define ERM_CPU1_CORR_ERR_CNT0 ERM_CPU1.CORR_ERR_CNT0.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_CPU1_EAR1        ERM_CPU1.EAR1.R               /* ERM Memory n Error Address Register */
#define ERM_CPU1_SYN1        ERM_CPU1.SYN1.R               /* ERM Memory n Syndrome Register */
#define ERM_CPU1_CORR_ERR_CNT1 ERM_CPU1.CORR_ERR_CNT1.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_CPU1_CORR_ERR_CNT2 ERM_CPU1.CORR_ERR_CNT2.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_CPU1_CORR_ERR_CNT3 ERM_CPU1.CORR_ERR_CNT3.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_CPU1_CORR_ERR_CNT4 ERM_CPU1.CORR_ERR_CNT4.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_CPU1_CORR_ERR_CNT5 ERM_CPU1.CORR_ERR_CNT5.R    /* ERM Memory n Correctable Error Count Register */

#define ERM_CPU2_CR0         ERM_CPU2.CR0.R                /* ERM Configuration Register 0 */
#define ERM_CPU2_SR0         ERM_CPU2.SR0.R                /* ERM Status Register 0 */
#define ERM_CPU2_EAR0        ERM_CPU2.EAR0.R               /* ERM Memory n Error Address Register */
#define ERM_CPU2_SYN0        ERM_CPU2.SYN0.R               /* ERM Memory n Syndrome Register */
#define ERM_CPU2_CORR_ERR_CNT0 ERM_CPU2.CORR_ERR_CNT0.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_CPU2_EAR1        ERM_CPU2.EAR1.R               /* ERM Memory n Error Address Register */
#define ERM_CPU2_SYN1        ERM_CPU2.SYN1.R               /* ERM Memory n Syndrome Register */
#define ERM_CPU2_CORR_ERR_CNT1 ERM_CPU2.CORR_ERR_CNT1.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_CPU2_CORR_ERR_CNT2 ERM_CPU2.CORR_ERR_CNT2.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_CPU2_CORR_ERR_CNT3 ERM_CPU2.CORR_ERR_CNT3.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_CPU2_CORR_ERR_CNT4 ERM_CPU2.CORR_ERR_CNT4.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_CPU2_CORR_ERR_CNT5 ERM_CPU2.CORR_ERR_CNT5.R    /* ERM Memory n Correctable Error Count Register */

#define ERM_EDMA0_CR0        ERM_EDMA0.CR0.R               /* ERM Configuration Register 0 */
#define ERM_EDMA0_SR0        ERM_EDMA0.SR0.R               /* ERM Status Register 0 */
#define ERM_EDMA0_EAR0       ERM_EDMA0.EAR0.R              /* ERM Memory n Error Address Register */
#define ERM_EDMA0_SYN0       ERM_EDMA0.SYN0.R              /* ERM Memory n Syndrome Register */
#define ERM_EDMA0_CORR_ERR_CNT0 ERM_EDMA0.CORR_ERR_CNT0.R  /* ERM Memory n Correctable Error Count Register */

#define ERM_EDMA1_CR0        ERM_EDMA1.CR0.R               /* ERM Configuration Register 0 */
#define ERM_EDMA1_SR0        ERM_EDMA1.SR0.R               /* ERM Status Register 0 */
#define ERM_EDMA1_EAR0       ERM_EDMA1.EAR0.R              /* ERM Memory n Error Address Register */
#define ERM_EDMA1_SYN0       ERM_EDMA1.SYN0.R              /* ERM Memory n Syndrome Register */
#define ERM_EDMA1_CORR_ERR_CNT0 ERM_EDMA1.CORR_ERR_CNT0.R  /* ERM Memory n Correctable Error Count Register */

#define LLCE__ERM_LLCE_CR0   LLCE__ERM_LLCE.CR0.R          /* ERM Configuration Register 0 */
#define LLCE__ERM_LLCE_CR1   LLCE__ERM_LLCE.CR1.R          /* ERM Configuration Register 1 */
#define LLCE__ERM_LLCE_SR0   LLCE__ERM_LLCE.SR0.R          /* ERM Status Register 0 */
#define LLCE__ERM_LLCE_SR1   LLCE__ERM_LLCE.SR1.R          /* ERM Status Register 1 */
#define LLCE__ERM_LLCE_EAR0  LLCE__ERM_LLCE.EAR0.R         /* ERM Memory n Error Address Register */
#define LLCE__ERM_LLCE_SYN0  LLCE__ERM_LLCE.SYN0.R         /* ERM Memory n Syndrome Register */
#define LLCE__ERM_LLCE_CORR_ERR_CNT0 LLCE__ERM_LLCE.CORR_ERR_CNT0.R /* ERM Memory n Correctable Error Count Register */
#define LLCE__ERM_LLCE_EAR1  LLCE__ERM_LLCE.EAR1.R         /* ERM Memory n Error Address Register */
#define LLCE__ERM_LLCE_SYN1  LLCE__ERM_LLCE.SYN1.R         /* ERM Memory n Syndrome Register */
#define LLCE__ERM_LLCE_CORR_ERR_CNT1 LLCE__ERM_LLCE.CORR_ERR_CNT1.R /* ERM Memory n Correctable Error Count Register */
#define LLCE__ERM_LLCE_CORR_ERR_CNT2 LLCE__ERM_LLCE.CORR_ERR_CNT2.R /* ERM Memory n Correctable Error Count Register */
#define LLCE__ERM_LLCE_EAR3  LLCE__ERM_LLCE.EAR3.R         /* ERM Memory n Error Address Register */
#define LLCE__ERM_LLCE_SYN3  LLCE__ERM_LLCE.SYN3.R         /* ERM Memory n Syndrome Register */
#define LLCE__ERM_LLCE_CORR_ERR_CNT3 LLCE__ERM_LLCE.CORR_ERR_CNT3.R /* ERM Memory n Correctable Error Count Register */
#define LLCE__ERM_LLCE_EAR4  LLCE__ERM_LLCE.EAR4.R         /* ERM Memory n Error Address Register */
#define LLCE__ERM_LLCE_SYN4  LLCE__ERM_LLCE.SYN4.R         /* ERM Memory n Syndrome Register */
#define LLCE__ERM_LLCE_CORR_ERR_CNT4 LLCE__ERM_LLCE.CORR_ERR_CNT4.R /* ERM Memory n Correctable Error Count Register */
#define LLCE__ERM_LLCE_EAR5  LLCE__ERM_LLCE.EAR5.R         /* ERM Memory n Error Address Register */
#define LLCE__ERM_LLCE_SYN5  LLCE__ERM_LLCE.SYN5.R         /* ERM Memory n Syndrome Register */
#define LLCE__ERM_LLCE_CORR_ERR_CNT5 LLCE__ERM_LLCE.CORR_ERR_CNT5.R /* ERM Memory n Correctable Error Count Register */
#define LLCE__ERM_LLCE_EAR6  LLCE__ERM_LLCE.EAR6.R         /* ERM Memory n Error Address Register */
#define LLCE__ERM_LLCE_SYN6  LLCE__ERM_LLCE.SYN6.R         /* ERM Memory n Syndrome Register */
#define LLCE__ERM_LLCE_CORR_ERR_CNT6 LLCE__ERM_LLCE.CORR_ERR_CNT6.R /* ERM Memory n Correctable Error Count Register */
#define LLCE__ERM_LLCE_CORR_ERR_CNT7 LLCE__ERM_LLCE.CORR_ERR_CNT7.R /* ERM Memory n Correctable Error Count Register */
#define LLCE__ERM_LLCE_CORR_ERR_CNT8 LLCE__ERM_LLCE.CORR_ERR_CNT8.R /* ERM Memory n Correctable Error Count Register */

#define ERM_PFE10_CR0        ERM_PFE10.CR0.R               /* ERM Configuration Register 0 */
#define ERM_PFE10_CR1        ERM_PFE10.CR1.R               /* ERM Configuration Register 1 */
#define ERM_PFE10_SR0        ERM_PFE10.SR0.R               /* ERM Status Register 0 */
#define ERM_PFE10_SR1        ERM_PFE10.SR1.R               /* ERM Status Register 1 */
#define ERM_PFE10_EAR0       ERM_PFE10.EAR0.R              /* ERM Memory n Error Address Register */
#define ERM_PFE10_SYN0       ERM_PFE10.SYN0.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE10_CORR_ERR_CNT0 ERM_PFE10.CORR_ERR_CNT0.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE10_EAR1       ERM_PFE10.EAR1.R              /* ERM Memory n Error Address Register */
#define ERM_PFE10_SYN1       ERM_PFE10.SYN1.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE10_CORR_ERR_CNT1 ERM_PFE10.CORR_ERR_CNT1.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE10_EAR2       ERM_PFE10.EAR2.R              /* ERM Memory n Error Address Register */
#define ERM_PFE10_SYN2       ERM_PFE10.SYN2.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE10_CORR_ERR_CNT2 ERM_PFE10.CORR_ERR_CNT2.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE10_EAR3       ERM_PFE10.EAR3.R              /* ERM Memory n Error Address Register */
#define ERM_PFE10_SYN3       ERM_PFE10.SYN3.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE10_CORR_ERR_CNT3 ERM_PFE10.CORR_ERR_CNT3.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE10_EAR4       ERM_PFE10.EAR4.R              /* ERM Memory n Error Address Register */
#define ERM_PFE10_SYN4       ERM_PFE10.SYN4.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE10_CORR_ERR_CNT4 ERM_PFE10.CORR_ERR_CNT4.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE10_EAR5       ERM_PFE10.EAR5.R              /* ERM Memory n Error Address Register */
#define ERM_PFE10_SYN5       ERM_PFE10.SYN5.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE10_CORR_ERR_CNT5 ERM_PFE10.CORR_ERR_CNT5.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE10_EAR6       ERM_PFE10.EAR6.R              /* ERM Memory n Error Address Register */
#define ERM_PFE10_SYN6       ERM_PFE10.SYN6.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE10_CORR_ERR_CNT6 ERM_PFE10.CORR_ERR_CNT6.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE10_EAR7       ERM_PFE10.EAR7.R              /* ERM Memory n Error Address Register */
#define ERM_PFE10_SYN7       ERM_PFE10.SYN7.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE10_CORR_ERR_CNT7 ERM_PFE10.CORR_ERR_CNT7.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE10_EAR8       ERM_PFE10.EAR8.R              /* ERM Memory n Error Address Register */
#define ERM_PFE10_SYN8       ERM_PFE10.SYN8.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE10_CORR_ERR_CNT8 ERM_PFE10.CORR_ERR_CNT8.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE10_EAR9       ERM_PFE10.EAR9.R              /* ERM Memory n Error Address Register */
#define ERM_PFE10_SYN9       ERM_PFE10.SYN9.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE10_CORR_ERR_CNT9 ERM_PFE10.CORR_ERR_CNT9.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE10_EAR10      ERM_PFE10.EAR10.R             /* ERM Memory n Error Address Register */
#define ERM_PFE10_SYN10      ERM_PFE10.SYN10.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE10_CORR_ERR_CNT10 ERM_PFE10.CORR_ERR_CNT10.R /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE10_EAR11      ERM_PFE10.EAR11.R             /* ERM Memory n Error Address Register */
#define ERM_PFE10_SYN11      ERM_PFE10.SYN11.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE10_CORR_ERR_CNT11 ERM_PFE10.CORR_ERR_CNT11.R /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE10_EAR12      ERM_PFE10.EAR12.R             /* ERM Memory n Error Address Register */
#define ERM_PFE10_SYN12      ERM_PFE10.SYN12.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE10_CORR_ERR_CNT12 ERM_PFE10.CORR_ERR_CNT12.R /* ERM Memory n Correctable Error Count Register */

#define ERM_PFE2_CR0         ERM_PFE2.CR0.R                /* ERM Configuration Register 0 */
#define ERM_PFE2_CR1         ERM_PFE2.CR1.R                /* ERM Configuration Register 1 */
#define ERM_PFE2_CR2         ERM_PFE2.CR2.R                /* ERM Configuration Register 2 */
#define ERM_PFE2_SR0         ERM_PFE2.SR0.R                /* ERM Status Register 0 */
#define ERM_PFE2_SR1         ERM_PFE2.SR1.R                /* ERM Status Register 1 */
#define ERM_PFE2_SR2         ERM_PFE2.SR2.R                /* ERM Status Register 2 */
#define ERM_PFE2_EAR0        ERM_PFE2.EAR0.R               /* ERM Memory n Error Address Register */
#define ERM_PFE2_SYN0        ERM_PFE2.SYN0.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE2_CORR_ERR_CNT0 ERM_PFE2.CORR_ERR_CNT0.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE2_EAR1        ERM_PFE2.EAR1.R               /* ERM Memory n Error Address Register */
#define ERM_PFE2_SYN1        ERM_PFE2.SYN1.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE2_CORR_ERR_CNT1 ERM_PFE2.CORR_ERR_CNT1.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE2_EAR2        ERM_PFE2.EAR2.R               /* ERM Memory n Error Address Register */
#define ERM_PFE2_SYN2        ERM_PFE2.SYN2.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE2_CORR_ERR_CNT2 ERM_PFE2.CORR_ERR_CNT2.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE2_EAR3        ERM_PFE2.EAR3.R               /* ERM Memory n Error Address Register */
#define ERM_PFE2_SYN3        ERM_PFE2.SYN3.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE2_CORR_ERR_CNT3 ERM_PFE2.CORR_ERR_CNT3.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE2_EAR4        ERM_PFE2.EAR4.R               /* ERM Memory n Error Address Register */
#define ERM_PFE2_SYN4        ERM_PFE2.SYN4.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE2_CORR_ERR_CNT4 ERM_PFE2.CORR_ERR_CNT4.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE2_EAR5        ERM_PFE2.EAR5.R               /* ERM Memory n Error Address Register */
#define ERM_PFE2_SYN5        ERM_PFE2.SYN5.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE2_CORR_ERR_CNT5 ERM_PFE2.CORR_ERR_CNT5.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE2_EAR6        ERM_PFE2.EAR6.R               /* ERM Memory n Error Address Register */
#define ERM_PFE2_SYN6        ERM_PFE2.SYN6.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE2_CORR_ERR_CNT6 ERM_PFE2.CORR_ERR_CNT6.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE2_EAR7        ERM_PFE2.EAR7.R               /* ERM Memory n Error Address Register */
#define ERM_PFE2_SYN7        ERM_PFE2.SYN7.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE2_CORR_ERR_CNT7 ERM_PFE2.CORR_ERR_CNT7.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE2_EAR8        ERM_PFE2.EAR8.R               /* ERM Memory n Error Address Register */
#define ERM_PFE2_SYN8        ERM_PFE2.SYN8.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE2_CORR_ERR_CNT8 ERM_PFE2.CORR_ERR_CNT8.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE2_EAR9        ERM_PFE2.EAR9.R               /* ERM Memory n Error Address Register */
#define ERM_PFE2_SYN9        ERM_PFE2.SYN9.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE2_CORR_ERR_CNT9 ERM_PFE2.CORR_ERR_CNT9.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE2_EAR10       ERM_PFE2.EAR10.R              /* ERM Memory n Error Address Register */
#define ERM_PFE2_SYN10       ERM_PFE2.SYN10.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE2_CORR_ERR_CNT10 ERM_PFE2.CORR_ERR_CNT10.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE2_EAR11       ERM_PFE2.EAR11.R              /* ERM Memory n Error Address Register */
#define ERM_PFE2_SYN11       ERM_PFE2.SYN11.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE2_CORR_ERR_CNT11 ERM_PFE2.CORR_ERR_CNT11.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE2_EAR12       ERM_PFE2.EAR12.R              /* ERM Memory n Error Address Register */
#define ERM_PFE2_SYN12       ERM_PFE2.SYN12.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE2_CORR_ERR_CNT12 ERM_PFE2.CORR_ERR_CNT12.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE2_EAR13       ERM_PFE2.EAR13.R              /* ERM Memory n Error Address Register */
#define ERM_PFE2_SYN13       ERM_PFE2.SYN13.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE2_CORR_ERR_CNT13 ERM_PFE2.CORR_ERR_CNT13.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE2_EAR14       ERM_PFE2.EAR14.R              /* ERM Memory n Error Address Register */
#define ERM_PFE2_SYN14       ERM_PFE2.SYN14.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE2_CORR_ERR_CNT14 ERM_PFE2.CORR_ERR_CNT14.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE2_EAR15       ERM_PFE2.EAR15.R              /* ERM Memory n Error Address Register */
#define ERM_PFE2_SYN15       ERM_PFE2.SYN15.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE2_CORR_ERR_CNT15 ERM_PFE2.CORR_ERR_CNT15.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE2_EAR16       ERM_PFE2.EAR16.R              /* ERM Memory n Error Address Register */
#define ERM_PFE2_SYN16       ERM_PFE2.SYN16.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE2_CORR_ERR_CNT16 ERM_PFE2.CORR_ERR_CNT16.R  /* ERM Memory n Correctable Error Count Register */

#define ERM_PFE3_CR0         ERM_PFE3.CR0.R                /* ERM Configuration Register 0 */
#define ERM_PFE3_CR1         ERM_PFE3.CR1.R                /* ERM Configuration Register 1 */
#define ERM_PFE3_CR2         ERM_PFE3.CR2.R                /* ERM Configuration Register 2 */
#define ERM_PFE3_SR0         ERM_PFE3.SR0.R                /* ERM Status Register 0 */
#define ERM_PFE3_SR1         ERM_PFE3.SR1.R                /* ERM Status Register 1 */
#define ERM_PFE3_SR2         ERM_PFE3.SR2.R                /* ERM Status Register 2 */
#define ERM_PFE3_EAR0        ERM_PFE3.EAR0.R               /* ERM Memory n Error Address Register */
#define ERM_PFE3_SYN0        ERM_PFE3.SYN0.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE3_CORR_ERR_CNT0 ERM_PFE3.CORR_ERR_CNT0.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE3_EAR1        ERM_PFE3.EAR1.R               /* ERM Memory n Error Address Register */
#define ERM_PFE3_SYN1        ERM_PFE3.SYN1.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE3_CORR_ERR_CNT1 ERM_PFE3.CORR_ERR_CNT1.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE3_EAR2        ERM_PFE3.EAR2.R               /* ERM Memory n Error Address Register */
#define ERM_PFE3_SYN2        ERM_PFE3.SYN2.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE3_CORR_ERR_CNT2 ERM_PFE3.CORR_ERR_CNT2.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE3_EAR3        ERM_PFE3.EAR3.R               /* ERM Memory n Error Address Register */
#define ERM_PFE3_SYN3        ERM_PFE3.SYN3.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE3_CORR_ERR_CNT3 ERM_PFE3.CORR_ERR_CNT3.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE3_EAR4        ERM_PFE3.EAR4.R               /* ERM Memory n Error Address Register */
#define ERM_PFE3_SYN4        ERM_PFE3.SYN4.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE3_CORR_ERR_CNT4 ERM_PFE3.CORR_ERR_CNT4.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE3_EAR5        ERM_PFE3.EAR5.R               /* ERM Memory n Error Address Register */
#define ERM_PFE3_SYN5        ERM_PFE3.SYN5.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE3_CORR_ERR_CNT5 ERM_PFE3.CORR_ERR_CNT5.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE3_EAR6        ERM_PFE3.EAR6.R               /* ERM Memory n Error Address Register */
#define ERM_PFE3_SYN6        ERM_PFE3.SYN6.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE3_CORR_ERR_CNT6 ERM_PFE3.CORR_ERR_CNT6.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE3_EAR7        ERM_PFE3.EAR7.R               /* ERM Memory n Error Address Register */
#define ERM_PFE3_SYN7        ERM_PFE3.SYN7.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE3_CORR_ERR_CNT7 ERM_PFE3.CORR_ERR_CNT7.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE3_EAR8        ERM_PFE3.EAR8.R               /* ERM Memory n Error Address Register */
#define ERM_PFE3_SYN8        ERM_PFE3.SYN8.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE3_CORR_ERR_CNT8 ERM_PFE3.CORR_ERR_CNT8.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE3_EAR9        ERM_PFE3.EAR9.R               /* ERM Memory n Error Address Register */
#define ERM_PFE3_SYN9        ERM_PFE3.SYN9.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE3_CORR_ERR_CNT9 ERM_PFE3.CORR_ERR_CNT9.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE3_EAR10       ERM_PFE3.EAR10.R              /* ERM Memory n Error Address Register */
#define ERM_PFE3_SYN10       ERM_PFE3.SYN10.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE3_CORR_ERR_CNT10 ERM_PFE3.CORR_ERR_CNT10.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE3_EAR11       ERM_PFE3.EAR11.R              /* ERM Memory n Error Address Register */
#define ERM_PFE3_SYN11       ERM_PFE3.SYN11.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE3_CORR_ERR_CNT11 ERM_PFE3.CORR_ERR_CNT11.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE3_EAR12       ERM_PFE3.EAR12.R              /* ERM Memory n Error Address Register */
#define ERM_PFE3_SYN12       ERM_PFE3.SYN12.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE3_CORR_ERR_CNT12 ERM_PFE3.CORR_ERR_CNT12.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE3_EAR13       ERM_PFE3.EAR13.R              /* ERM Memory n Error Address Register */
#define ERM_PFE3_SYN13       ERM_PFE3.SYN13.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE3_CORR_ERR_CNT13 ERM_PFE3.CORR_ERR_CNT13.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE3_EAR14       ERM_PFE3.EAR14.R              /* ERM Memory n Error Address Register */
#define ERM_PFE3_SYN14       ERM_PFE3.SYN14.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE3_CORR_ERR_CNT14 ERM_PFE3.CORR_ERR_CNT14.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE3_EAR15       ERM_PFE3.EAR15.R              /* ERM Memory n Error Address Register */
#define ERM_PFE3_SYN15       ERM_PFE3.SYN15.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE3_CORR_ERR_CNT15 ERM_PFE3.CORR_ERR_CNT15.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE3_EAR16       ERM_PFE3.EAR16.R              /* ERM Memory n Error Address Register */
#define ERM_PFE3_SYN16       ERM_PFE3.SYN16.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE3_CORR_ERR_CNT16 ERM_PFE3.CORR_ERR_CNT16.R  /* ERM Memory n Correctable Error Count Register */

#define ERM_PFE4_CR0         ERM_PFE4.CR0.R                /* ERM Configuration Register 0 */
#define ERM_PFE4_CR1         ERM_PFE4.CR1.R                /* ERM Configuration Register 1 */
#define ERM_PFE4_CR2         ERM_PFE4.CR2.R                /* ERM Configuration Register 2 */
#define ERM_PFE4_SR0         ERM_PFE4.SR0.R                /* ERM Status Register 0 */
#define ERM_PFE4_SR1         ERM_PFE4.SR1.R                /* ERM Status Register 1 */
#define ERM_PFE4_SR2         ERM_PFE4.SR2.R                /* ERM Status Register 2 */
#define ERM_PFE4_EAR0        ERM_PFE4.EAR0.R               /* ERM Memory n Error Address Register */
#define ERM_PFE4_SYN0        ERM_PFE4.SYN0.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE4_CORR_ERR_CNT0 ERM_PFE4.CORR_ERR_CNT0.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE4_EAR1        ERM_PFE4.EAR1.R               /* ERM Memory n Error Address Register */
#define ERM_PFE4_SYN1        ERM_PFE4.SYN1.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE4_CORR_ERR_CNT1 ERM_PFE4.CORR_ERR_CNT1.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE4_EAR2        ERM_PFE4.EAR2.R               /* ERM Memory n Error Address Register */
#define ERM_PFE4_SYN2        ERM_PFE4.SYN2.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE4_CORR_ERR_CNT2 ERM_PFE4.CORR_ERR_CNT2.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE4_EAR3        ERM_PFE4.EAR3.R               /* ERM Memory n Error Address Register */
#define ERM_PFE4_SYN3        ERM_PFE4.SYN3.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE4_CORR_ERR_CNT3 ERM_PFE4.CORR_ERR_CNT3.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE4_EAR4        ERM_PFE4.EAR4.R               /* ERM Memory n Error Address Register */
#define ERM_PFE4_SYN4        ERM_PFE4.SYN4.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE4_CORR_ERR_CNT4 ERM_PFE4.CORR_ERR_CNT4.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE4_EAR5        ERM_PFE4.EAR5.R               /* ERM Memory n Error Address Register */
#define ERM_PFE4_SYN5        ERM_PFE4.SYN5.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE4_CORR_ERR_CNT5 ERM_PFE4.CORR_ERR_CNT5.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE4_EAR6        ERM_PFE4.EAR6.R               /* ERM Memory n Error Address Register */
#define ERM_PFE4_SYN6        ERM_PFE4.SYN6.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE4_CORR_ERR_CNT6 ERM_PFE4.CORR_ERR_CNT6.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE4_EAR7        ERM_PFE4.EAR7.R               /* ERM Memory n Error Address Register */
#define ERM_PFE4_SYN7        ERM_PFE4.SYN7.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE4_CORR_ERR_CNT7 ERM_PFE4.CORR_ERR_CNT7.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE4_EAR8        ERM_PFE4.EAR8.R               /* ERM Memory n Error Address Register */
#define ERM_PFE4_SYN8        ERM_PFE4.SYN8.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE4_CORR_ERR_CNT8 ERM_PFE4.CORR_ERR_CNT8.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE4_EAR9        ERM_PFE4.EAR9.R               /* ERM Memory n Error Address Register */
#define ERM_PFE4_SYN9        ERM_PFE4.SYN9.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE4_CORR_ERR_CNT9 ERM_PFE4.CORR_ERR_CNT9.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE4_EAR10       ERM_PFE4.EAR10.R              /* ERM Memory n Error Address Register */
#define ERM_PFE4_SYN10       ERM_PFE4.SYN10.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE4_CORR_ERR_CNT10 ERM_PFE4.CORR_ERR_CNT10.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE4_EAR11       ERM_PFE4.EAR11.R              /* ERM Memory n Error Address Register */
#define ERM_PFE4_SYN11       ERM_PFE4.SYN11.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE4_CORR_ERR_CNT11 ERM_PFE4.CORR_ERR_CNT11.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE4_EAR12       ERM_PFE4.EAR12.R              /* ERM Memory n Error Address Register */
#define ERM_PFE4_SYN12       ERM_PFE4.SYN12.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE4_CORR_ERR_CNT12 ERM_PFE4.CORR_ERR_CNT12.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE4_EAR13       ERM_PFE4.EAR13.R              /* ERM Memory n Error Address Register */
#define ERM_PFE4_SYN13       ERM_PFE4.SYN13.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE4_CORR_ERR_CNT13 ERM_PFE4.CORR_ERR_CNT13.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE4_EAR14       ERM_PFE4.EAR14.R              /* ERM Memory n Error Address Register */
#define ERM_PFE4_SYN14       ERM_PFE4.SYN14.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE4_CORR_ERR_CNT14 ERM_PFE4.CORR_ERR_CNT14.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE4_EAR15       ERM_PFE4.EAR15.R              /* ERM Memory n Error Address Register */
#define ERM_PFE4_SYN15       ERM_PFE4.SYN15.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE4_CORR_ERR_CNT15 ERM_PFE4.CORR_ERR_CNT15.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE4_EAR16       ERM_PFE4.EAR16.R              /* ERM Memory n Error Address Register */
#define ERM_PFE4_SYN16       ERM_PFE4.SYN16.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE4_CORR_ERR_CNT16 ERM_PFE4.CORR_ERR_CNT16.R  /* ERM Memory n Correctable Error Count Register */

#define ERM_PFE5_CR0         ERM_PFE5.CR0.R                /* ERM Configuration Register 0 */
#define ERM_PFE5_CR1         ERM_PFE5.CR1.R                /* ERM Configuration Register 1 */
#define ERM_PFE5_CR2         ERM_PFE5.CR2.R                /* ERM Configuration Register 2 */
#define ERM_PFE5_SR0         ERM_PFE5.SR0.R                /* ERM Status Register 0 */
#define ERM_PFE5_SR1         ERM_PFE5.SR1.R                /* ERM Status Register 1 */
#define ERM_PFE5_SR2         ERM_PFE5.SR2.R                /* ERM Status Register 2 */
#define ERM_PFE5_EAR0        ERM_PFE5.EAR0.R               /* ERM Memory n Error Address Register */
#define ERM_PFE5_SYN0        ERM_PFE5.SYN0.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE5_CORR_ERR_CNT0 ERM_PFE5.CORR_ERR_CNT0.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE5_EAR1        ERM_PFE5.EAR1.R               /* ERM Memory n Error Address Register */
#define ERM_PFE5_SYN1        ERM_PFE5.SYN1.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE5_CORR_ERR_CNT1 ERM_PFE5.CORR_ERR_CNT1.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE5_EAR2        ERM_PFE5.EAR2.R               /* ERM Memory n Error Address Register */
#define ERM_PFE5_SYN2        ERM_PFE5.SYN2.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE5_CORR_ERR_CNT2 ERM_PFE5.CORR_ERR_CNT2.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE5_EAR3        ERM_PFE5.EAR3.R               /* ERM Memory n Error Address Register */
#define ERM_PFE5_SYN3        ERM_PFE5.SYN3.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE5_CORR_ERR_CNT3 ERM_PFE5.CORR_ERR_CNT3.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE5_EAR4        ERM_PFE5.EAR4.R               /* ERM Memory n Error Address Register */
#define ERM_PFE5_SYN4        ERM_PFE5.SYN4.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE5_CORR_ERR_CNT4 ERM_PFE5.CORR_ERR_CNT4.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE5_EAR5        ERM_PFE5.EAR5.R               /* ERM Memory n Error Address Register */
#define ERM_PFE5_SYN5        ERM_PFE5.SYN5.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE5_CORR_ERR_CNT5 ERM_PFE5.CORR_ERR_CNT5.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE5_EAR6        ERM_PFE5.EAR6.R               /* ERM Memory n Error Address Register */
#define ERM_PFE5_SYN6        ERM_PFE5.SYN6.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE5_CORR_ERR_CNT6 ERM_PFE5.CORR_ERR_CNT6.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE5_EAR7        ERM_PFE5.EAR7.R               /* ERM Memory n Error Address Register */
#define ERM_PFE5_SYN7        ERM_PFE5.SYN7.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE5_CORR_ERR_CNT7 ERM_PFE5.CORR_ERR_CNT7.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE5_EAR8        ERM_PFE5.EAR8.R               /* ERM Memory n Error Address Register */
#define ERM_PFE5_SYN8        ERM_PFE5.SYN8.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE5_CORR_ERR_CNT8 ERM_PFE5.CORR_ERR_CNT8.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE5_EAR9        ERM_PFE5.EAR9.R               /* ERM Memory n Error Address Register */
#define ERM_PFE5_SYN9        ERM_PFE5.SYN9.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE5_CORR_ERR_CNT9 ERM_PFE5.CORR_ERR_CNT9.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE5_EAR10       ERM_PFE5.EAR10.R              /* ERM Memory n Error Address Register */
#define ERM_PFE5_SYN10       ERM_PFE5.SYN10.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE5_CORR_ERR_CNT10 ERM_PFE5.CORR_ERR_CNT10.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE5_EAR11       ERM_PFE5.EAR11.R              /* ERM Memory n Error Address Register */
#define ERM_PFE5_SYN11       ERM_PFE5.SYN11.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE5_CORR_ERR_CNT11 ERM_PFE5.CORR_ERR_CNT11.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE5_EAR12       ERM_PFE5.EAR12.R              /* ERM Memory n Error Address Register */
#define ERM_PFE5_SYN12       ERM_PFE5.SYN12.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE5_CORR_ERR_CNT12 ERM_PFE5.CORR_ERR_CNT12.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE5_EAR13       ERM_PFE5.EAR13.R              /* ERM Memory n Error Address Register */
#define ERM_PFE5_SYN13       ERM_PFE5.SYN13.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE5_CORR_ERR_CNT13 ERM_PFE5.CORR_ERR_CNT13.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE5_EAR14       ERM_PFE5.EAR14.R              /* ERM Memory n Error Address Register */
#define ERM_PFE5_SYN14       ERM_PFE5.SYN14.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE5_CORR_ERR_CNT14 ERM_PFE5.CORR_ERR_CNT14.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE5_EAR15       ERM_PFE5.EAR15.R              /* ERM Memory n Error Address Register */
#define ERM_PFE5_SYN15       ERM_PFE5.SYN15.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE5_CORR_ERR_CNT15 ERM_PFE5.CORR_ERR_CNT15.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE5_EAR16       ERM_PFE5.EAR16.R              /* ERM Memory n Error Address Register */
#define ERM_PFE5_SYN16       ERM_PFE5.SYN16.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE5_CORR_ERR_CNT16 ERM_PFE5.CORR_ERR_CNT16.R  /* ERM Memory n Correctable Error Count Register */

#define ERM_PFE6_CR0         ERM_PFE6.CR0.R                /* ERM Configuration Register 0 */
#define ERM_PFE6_CR1         ERM_PFE6.CR1.R                /* ERM Configuration Register 1 */
#define ERM_PFE6_CR2         ERM_PFE6.CR2.R                /* ERM Configuration Register 2 */
#define ERM_PFE6_SR0         ERM_PFE6.SR0.R                /* ERM Status Register 0 */
#define ERM_PFE6_SR1         ERM_PFE6.SR1.R                /* ERM Status Register 1 */
#define ERM_PFE6_SR2         ERM_PFE6.SR2.R                /* ERM Status Register 2 */
#define ERM_PFE6_EAR0        ERM_PFE6.EAR0.R               /* ERM Memory n Error Address Register */
#define ERM_PFE6_SYN0        ERM_PFE6.SYN0.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE6_CORR_ERR_CNT0 ERM_PFE6.CORR_ERR_CNT0.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE6_EAR1        ERM_PFE6.EAR1.R               /* ERM Memory n Error Address Register */
#define ERM_PFE6_SYN1        ERM_PFE6.SYN1.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE6_CORR_ERR_CNT1 ERM_PFE6.CORR_ERR_CNT1.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE6_EAR2        ERM_PFE6.EAR2.R               /* ERM Memory n Error Address Register */
#define ERM_PFE6_SYN2        ERM_PFE6.SYN2.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE6_CORR_ERR_CNT2 ERM_PFE6.CORR_ERR_CNT2.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE6_EAR3        ERM_PFE6.EAR3.R               /* ERM Memory n Error Address Register */
#define ERM_PFE6_SYN3        ERM_PFE6.SYN3.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE6_CORR_ERR_CNT3 ERM_PFE6.CORR_ERR_CNT3.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE6_EAR4        ERM_PFE6.EAR4.R               /* ERM Memory n Error Address Register */
#define ERM_PFE6_SYN4        ERM_PFE6.SYN4.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE6_CORR_ERR_CNT4 ERM_PFE6.CORR_ERR_CNT4.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE6_EAR5        ERM_PFE6.EAR5.R               /* ERM Memory n Error Address Register */
#define ERM_PFE6_SYN5        ERM_PFE6.SYN5.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE6_CORR_ERR_CNT5 ERM_PFE6.CORR_ERR_CNT5.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE6_EAR6        ERM_PFE6.EAR6.R               /* ERM Memory n Error Address Register */
#define ERM_PFE6_SYN6        ERM_PFE6.SYN6.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE6_CORR_ERR_CNT6 ERM_PFE6.CORR_ERR_CNT6.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE6_EAR7        ERM_PFE6.EAR7.R               /* ERM Memory n Error Address Register */
#define ERM_PFE6_SYN7        ERM_PFE6.SYN7.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE6_CORR_ERR_CNT7 ERM_PFE6.CORR_ERR_CNT7.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE6_EAR8        ERM_PFE6.EAR8.R               /* ERM Memory n Error Address Register */
#define ERM_PFE6_SYN8        ERM_PFE6.SYN8.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE6_CORR_ERR_CNT8 ERM_PFE6.CORR_ERR_CNT8.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE6_EAR9        ERM_PFE6.EAR9.R               /* ERM Memory n Error Address Register */
#define ERM_PFE6_SYN9        ERM_PFE6.SYN9.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE6_CORR_ERR_CNT9 ERM_PFE6.CORR_ERR_CNT9.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE6_EAR10       ERM_PFE6.EAR10.R              /* ERM Memory n Error Address Register */
#define ERM_PFE6_SYN10       ERM_PFE6.SYN10.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE6_CORR_ERR_CNT10 ERM_PFE6.CORR_ERR_CNT10.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE6_EAR11       ERM_PFE6.EAR11.R              /* ERM Memory n Error Address Register */
#define ERM_PFE6_SYN11       ERM_PFE6.SYN11.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE6_CORR_ERR_CNT11 ERM_PFE6.CORR_ERR_CNT11.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE6_EAR12       ERM_PFE6.EAR12.R              /* ERM Memory n Error Address Register */
#define ERM_PFE6_SYN12       ERM_PFE6.SYN12.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE6_CORR_ERR_CNT12 ERM_PFE6.CORR_ERR_CNT12.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE6_EAR13       ERM_PFE6.EAR13.R              /* ERM Memory n Error Address Register */
#define ERM_PFE6_SYN13       ERM_PFE6.SYN13.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE6_CORR_ERR_CNT13 ERM_PFE6.CORR_ERR_CNT13.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE6_EAR14       ERM_PFE6.EAR14.R              /* ERM Memory n Error Address Register */
#define ERM_PFE6_SYN14       ERM_PFE6.SYN14.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE6_CORR_ERR_CNT14 ERM_PFE6.CORR_ERR_CNT14.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE6_EAR15       ERM_PFE6.EAR15.R              /* ERM Memory n Error Address Register */
#define ERM_PFE6_SYN15       ERM_PFE6.SYN15.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE6_CORR_ERR_CNT15 ERM_PFE6.CORR_ERR_CNT15.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE6_EAR16       ERM_PFE6.EAR16.R              /* ERM Memory n Error Address Register */
#define ERM_PFE6_SYN16       ERM_PFE6.SYN16.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE6_CORR_ERR_CNT16 ERM_PFE6.CORR_ERR_CNT16.R  /* ERM Memory n Correctable Error Count Register */

#define ERM_PFE7_CR0         ERM_PFE7.CR0.R                /* ERM Configuration Register 0 */
#define ERM_PFE7_CR1         ERM_PFE7.CR1.R                /* ERM Configuration Register 1 */
#define ERM_PFE7_CR2         ERM_PFE7.CR2.R                /* ERM Configuration Register 2 */
#define ERM_PFE7_SR0         ERM_PFE7.SR0.R                /* ERM Status Register 0 */
#define ERM_PFE7_SR1         ERM_PFE7.SR1.R                /* ERM Status Register 1 */
#define ERM_PFE7_SR2         ERM_PFE7.SR2.R                /* ERM Status Register 2 */
#define ERM_PFE7_EAR0        ERM_PFE7.EAR0.R               /* ERM Memory n Error Address Register */
#define ERM_PFE7_SYN0        ERM_PFE7.SYN0.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE7_CORR_ERR_CNT0 ERM_PFE7.CORR_ERR_CNT0.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE7_EAR1        ERM_PFE7.EAR1.R               /* ERM Memory n Error Address Register */
#define ERM_PFE7_SYN1        ERM_PFE7.SYN1.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE7_CORR_ERR_CNT1 ERM_PFE7.CORR_ERR_CNT1.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE7_EAR2        ERM_PFE7.EAR2.R               /* ERM Memory n Error Address Register */
#define ERM_PFE7_SYN2        ERM_PFE7.SYN2.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE7_CORR_ERR_CNT2 ERM_PFE7.CORR_ERR_CNT2.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE7_EAR3        ERM_PFE7.EAR3.R               /* ERM Memory n Error Address Register */
#define ERM_PFE7_SYN3        ERM_PFE7.SYN3.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE7_CORR_ERR_CNT3 ERM_PFE7.CORR_ERR_CNT3.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE7_EAR4        ERM_PFE7.EAR4.R               /* ERM Memory n Error Address Register */
#define ERM_PFE7_SYN4        ERM_PFE7.SYN4.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE7_CORR_ERR_CNT4 ERM_PFE7.CORR_ERR_CNT4.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE7_EAR5        ERM_PFE7.EAR5.R               /* ERM Memory n Error Address Register */
#define ERM_PFE7_SYN5        ERM_PFE7.SYN5.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE7_CORR_ERR_CNT5 ERM_PFE7.CORR_ERR_CNT5.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE7_EAR6        ERM_PFE7.EAR6.R               /* ERM Memory n Error Address Register */
#define ERM_PFE7_SYN6        ERM_PFE7.SYN6.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE7_CORR_ERR_CNT6 ERM_PFE7.CORR_ERR_CNT6.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE7_EAR7        ERM_PFE7.EAR7.R               /* ERM Memory n Error Address Register */
#define ERM_PFE7_SYN7        ERM_PFE7.SYN7.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE7_CORR_ERR_CNT7 ERM_PFE7.CORR_ERR_CNT7.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE7_EAR8        ERM_PFE7.EAR8.R               /* ERM Memory n Error Address Register */
#define ERM_PFE7_SYN8        ERM_PFE7.SYN8.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE7_CORR_ERR_CNT8 ERM_PFE7.CORR_ERR_CNT8.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE7_EAR9        ERM_PFE7.EAR9.R               /* ERM Memory n Error Address Register */
#define ERM_PFE7_SYN9        ERM_PFE7.SYN9.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE7_CORR_ERR_CNT9 ERM_PFE7.CORR_ERR_CNT9.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE7_EAR10       ERM_PFE7.EAR10.R              /* ERM Memory n Error Address Register */
#define ERM_PFE7_SYN10       ERM_PFE7.SYN10.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE7_CORR_ERR_CNT10 ERM_PFE7.CORR_ERR_CNT10.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE7_EAR11       ERM_PFE7.EAR11.R              /* ERM Memory n Error Address Register */
#define ERM_PFE7_SYN11       ERM_PFE7.SYN11.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE7_CORR_ERR_CNT11 ERM_PFE7.CORR_ERR_CNT11.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE7_EAR12       ERM_PFE7.EAR12.R              /* ERM Memory n Error Address Register */
#define ERM_PFE7_SYN12       ERM_PFE7.SYN12.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE7_CORR_ERR_CNT12 ERM_PFE7.CORR_ERR_CNT12.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE7_EAR13       ERM_PFE7.EAR13.R              /* ERM Memory n Error Address Register */
#define ERM_PFE7_SYN13       ERM_PFE7.SYN13.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE7_CORR_ERR_CNT13 ERM_PFE7.CORR_ERR_CNT13.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE7_EAR14       ERM_PFE7.EAR14.R              /* ERM Memory n Error Address Register */
#define ERM_PFE7_SYN14       ERM_PFE7.SYN14.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE7_CORR_ERR_CNT14 ERM_PFE7.CORR_ERR_CNT14.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE7_EAR15       ERM_PFE7.EAR15.R              /* ERM Memory n Error Address Register */
#define ERM_PFE7_SYN15       ERM_PFE7.SYN15.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE7_CORR_ERR_CNT15 ERM_PFE7.CORR_ERR_CNT15.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE7_EAR16       ERM_PFE7.EAR16.R              /* ERM Memory n Error Address Register */
#define ERM_PFE7_SYN16       ERM_PFE7.SYN16.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE7_CORR_ERR_CNT16 ERM_PFE7.CORR_ERR_CNT16.R  /* ERM Memory n Correctable Error Count Register */

#define ERM_PFE8_CR0         ERM_PFE8.CR0.R                /* ERM Configuration Register 0 */
#define ERM_PFE8_CR1         ERM_PFE8.CR1.R                /* ERM Configuration Register 1 */
#define ERM_PFE8_CR2         ERM_PFE8.CR2.R                /* ERM Configuration Register 2 */
#define ERM_PFE8_SR0         ERM_PFE8.SR0.R                /* ERM Status Register 0 */
#define ERM_PFE8_SR1         ERM_PFE8.SR1.R                /* ERM Status Register 1 */
#define ERM_PFE8_SR2         ERM_PFE8.SR2.R                /* ERM Status Register 2 */
#define ERM_PFE8_EAR0        ERM_PFE8.EAR0.R               /* ERM Memory n Error Address Register */
#define ERM_PFE8_SYN0        ERM_PFE8.SYN0.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE8_CORR_ERR_CNT0 ERM_PFE8.CORR_ERR_CNT0.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE8_EAR1        ERM_PFE8.EAR1.R               /* ERM Memory n Error Address Register */
#define ERM_PFE8_SYN1        ERM_PFE8.SYN1.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE8_CORR_ERR_CNT1 ERM_PFE8.CORR_ERR_CNT1.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE8_EAR2        ERM_PFE8.EAR2.R               /* ERM Memory n Error Address Register */
#define ERM_PFE8_SYN2        ERM_PFE8.SYN2.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE8_CORR_ERR_CNT2 ERM_PFE8.CORR_ERR_CNT2.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE8_EAR3        ERM_PFE8.EAR3.R               /* ERM Memory n Error Address Register */
#define ERM_PFE8_SYN3        ERM_PFE8.SYN3.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE8_CORR_ERR_CNT3 ERM_PFE8.CORR_ERR_CNT3.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE8_EAR4        ERM_PFE8.EAR4.R               /* ERM Memory n Error Address Register */
#define ERM_PFE8_SYN4        ERM_PFE8.SYN4.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE8_CORR_ERR_CNT4 ERM_PFE8.CORR_ERR_CNT4.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE8_EAR5        ERM_PFE8.EAR5.R               /* ERM Memory n Error Address Register */
#define ERM_PFE8_SYN5        ERM_PFE8.SYN5.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE8_CORR_ERR_CNT5 ERM_PFE8.CORR_ERR_CNT5.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE8_EAR6        ERM_PFE8.EAR6.R               /* ERM Memory n Error Address Register */
#define ERM_PFE8_SYN6        ERM_PFE8.SYN6.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE8_CORR_ERR_CNT6 ERM_PFE8.CORR_ERR_CNT6.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE8_EAR7        ERM_PFE8.EAR7.R               /* ERM Memory n Error Address Register */
#define ERM_PFE8_SYN7        ERM_PFE8.SYN7.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE8_CORR_ERR_CNT7 ERM_PFE8.CORR_ERR_CNT7.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE8_EAR8        ERM_PFE8.EAR8.R               /* ERM Memory n Error Address Register */
#define ERM_PFE8_SYN8        ERM_PFE8.SYN8.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE8_CORR_ERR_CNT8 ERM_PFE8.CORR_ERR_CNT8.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE8_EAR9        ERM_PFE8.EAR9.R               /* ERM Memory n Error Address Register */
#define ERM_PFE8_SYN9        ERM_PFE8.SYN9.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE8_CORR_ERR_CNT9 ERM_PFE8.CORR_ERR_CNT9.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE8_EAR10       ERM_PFE8.EAR10.R              /* ERM Memory n Error Address Register */
#define ERM_PFE8_SYN10       ERM_PFE8.SYN10.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE8_CORR_ERR_CNT10 ERM_PFE8.CORR_ERR_CNT10.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE8_EAR11       ERM_PFE8.EAR11.R              /* ERM Memory n Error Address Register */
#define ERM_PFE8_SYN11       ERM_PFE8.SYN11.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE8_CORR_ERR_CNT11 ERM_PFE8.CORR_ERR_CNT11.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE8_EAR12       ERM_PFE8.EAR12.R              /* ERM Memory n Error Address Register */
#define ERM_PFE8_SYN12       ERM_PFE8.SYN12.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE8_CORR_ERR_CNT12 ERM_PFE8.CORR_ERR_CNT12.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE8_EAR13       ERM_PFE8.EAR13.R              /* ERM Memory n Error Address Register */
#define ERM_PFE8_SYN13       ERM_PFE8.SYN13.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE8_CORR_ERR_CNT13 ERM_PFE8.CORR_ERR_CNT13.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE8_EAR14       ERM_PFE8.EAR14.R              /* ERM Memory n Error Address Register */
#define ERM_PFE8_SYN14       ERM_PFE8.SYN14.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE8_CORR_ERR_CNT14 ERM_PFE8.CORR_ERR_CNT14.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE8_EAR15       ERM_PFE8.EAR15.R              /* ERM Memory n Error Address Register */
#define ERM_PFE8_SYN15       ERM_PFE8.SYN15.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE8_CORR_ERR_CNT15 ERM_PFE8.CORR_ERR_CNT15.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE8_EAR16       ERM_PFE8.EAR16.R              /* ERM Memory n Error Address Register */
#define ERM_PFE8_SYN16       ERM_PFE8.SYN16.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE8_CORR_ERR_CNT16 ERM_PFE8.CORR_ERR_CNT16.R  /* ERM Memory n Correctable Error Count Register */

#define ERM_PFE9_CR0         ERM_PFE9.CR0.R                /* ERM Configuration Register 0 */
#define ERM_PFE9_CR1         ERM_PFE9.CR1.R                /* ERM Configuration Register 1 */
#define ERM_PFE9_CR2         ERM_PFE9.CR2.R                /* ERM Configuration Register 2 */
#define ERM_PFE9_SR0         ERM_PFE9.SR0.R                /* ERM Status Register 0 */
#define ERM_PFE9_SR1         ERM_PFE9.SR1.R                /* ERM Status Register 1 */
#define ERM_PFE9_SR2         ERM_PFE9.SR2.R                /* ERM Status Register 2 */
#define ERM_PFE9_EAR0        ERM_PFE9.EAR0.R               /* ERM Memory n Error Address Register */
#define ERM_PFE9_SYN0        ERM_PFE9.SYN0.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE9_CORR_ERR_CNT0 ERM_PFE9.CORR_ERR_CNT0.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE9_EAR1        ERM_PFE9.EAR1.R               /* ERM Memory n Error Address Register */
#define ERM_PFE9_SYN1        ERM_PFE9.SYN1.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE9_CORR_ERR_CNT1 ERM_PFE9.CORR_ERR_CNT1.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE9_EAR2        ERM_PFE9.EAR2.R               /* ERM Memory n Error Address Register */
#define ERM_PFE9_SYN2        ERM_PFE9.SYN2.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE9_CORR_ERR_CNT2 ERM_PFE9.CORR_ERR_CNT2.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE9_EAR3        ERM_PFE9.EAR3.R               /* ERM Memory n Error Address Register */
#define ERM_PFE9_SYN3        ERM_PFE9.SYN3.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE9_CORR_ERR_CNT3 ERM_PFE9.CORR_ERR_CNT3.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE9_EAR4        ERM_PFE9.EAR4.R               /* ERM Memory n Error Address Register */
#define ERM_PFE9_SYN4        ERM_PFE9.SYN4.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE9_CORR_ERR_CNT4 ERM_PFE9.CORR_ERR_CNT4.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE9_EAR5        ERM_PFE9.EAR5.R               /* ERM Memory n Error Address Register */
#define ERM_PFE9_SYN5        ERM_PFE9.SYN5.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE9_CORR_ERR_CNT5 ERM_PFE9.CORR_ERR_CNT5.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE9_EAR6        ERM_PFE9.EAR6.R               /* ERM Memory n Error Address Register */
#define ERM_PFE9_SYN6        ERM_PFE9.SYN6.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE9_CORR_ERR_CNT6 ERM_PFE9.CORR_ERR_CNT6.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE9_EAR7        ERM_PFE9.EAR7.R               /* ERM Memory n Error Address Register */
#define ERM_PFE9_SYN7        ERM_PFE9.SYN7.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE9_CORR_ERR_CNT7 ERM_PFE9.CORR_ERR_CNT7.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE9_EAR8        ERM_PFE9.EAR8.R               /* ERM Memory n Error Address Register */
#define ERM_PFE9_SYN8        ERM_PFE9.SYN8.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE9_CORR_ERR_CNT8 ERM_PFE9.CORR_ERR_CNT8.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE9_EAR9        ERM_PFE9.EAR9.R               /* ERM Memory n Error Address Register */
#define ERM_PFE9_SYN9        ERM_PFE9.SYN9.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE9_CORR_ERR_CNT9 ERM_PFE9.CORR_ERR_CNT9.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE9_EAR10       ERM_PFE9.EAR10.R              /* ERM Memory n Error Address Register */
#define ERM_PFE9_SYN10       ERM_PFE9.SYN10.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE9_CORR_ERR_CNT10 ERM_PFE9.CORR_ERR_CNT10.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE9_EAR11       ERM_PFE9.EAR11.R              /* ERM Memory n Error Address Register */
#define ERM_PFE9_SYN11       ERM_PFE9.SYN11.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE9_CORR_ERR_CNT11 ERM_PFE9.CORR_ERR_CNT11.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE9_EAR12       ERM_PFE9.EAR12.R              /* ERM Memory n Error Address Register */
#define ERM_PFE9_SYN12       ERM_PFE9.SYN12.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE9_CORR_ERR_CNT12 ERM_PFE9.CORR_ERR_CNT12.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE9_EAR13       ERM_PFE9.EAR13.R              /* ERM Memory n Error Address Register */
#define ERM_PFE9_SYN13       ERM_PFE9.SYN13.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE9_CORR_ERR_CNT13 ERM_PFE9.CORR_ERR_CNT13.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE9_EAR14       ERM_PFE9.EAR14.R              /* ERM Memory n Error Address Register */
#define ERM_PFE9_SYN14       ERM_PFE9.SYN14.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE9_CORR_ERR_CNT14 ERM_PFE9.CORR_ERR_CNT14.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE9_EAR15       ERM_PFE9.EAR15.R              /* ERM Memory n Error Address Register */
#define ERM_PFE9_SYN15       ERM_PFE9.SYN15.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE9_CORR_ERR_CNT15 ERM_PFE9.CORR_ERR_CNT15.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE9_EAR16       ERM_PFE9.EAR16.R              /* ERM Memory n Error Address Register */
#define ERM_PFE9_SYN16       ERM_PFE9.SYN16.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE9_CORR_ERR_CNT16 ERM_PFE9.CORR_ERR_CNT16.R  /* ERM Memory n Correctable Error Count Register */

#define ERM_PFE0_CR0         ERM_PFE0.CR0.R                /* ERM Configuration Register 0 */
#define ERM_PFE0_CR1         ERM_PFE0.CR1.R                /* ERM Configuration Register 1 */
#define ERM_PFE0_SR0         ERM_PFE0.SR0.R                /* ERM Status Register 0 */
#define ERM_PFE0_SR1         ERM_PFE0.SR1.R                /* ERM Status Register 1 */
#define ERM_PFE0_EAR0        ERM_PFE0.EAR0.R               /* ERM Memory n Error Address Register */
#define ERM_PFE0_SYN0        ERM_PFE0.SYN0.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE0_CORR_ERR_CNT0 ERM_PFE0.CORR_ERR_CNT0.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE0_EAR1        ERM_PFE0.EAR1.R               /* ERM Memory n Error Address Register */
#define ERM_PFE0_SYN1        ERM_PFE0.SYN1.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE0_CORR_ERR_CNT1 ERM_PFE0.CORR_ERR_CNT1.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE0_EAR2        ERM_PFE0.EAR2.R               /* ERM Memory n Error Address Register */
#define ERM_PFE0_SYN2        ERM_PFE0.SYN2.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE0_CORR_ERR_CNT2 ERM_PFE0.CORR_ERR_CNT2.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE0_EAR3        ERM_PFE0.EAR3.R               /* ERM Memory n Error Address Register */
#define ERM_PFE0_SYN3        ERM_PFE0.SYN3.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE0_CORR_ERR_CNT3 ERM_PFE0.CORR_ERR_CNT3.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE0_EAR4        ERM_PFE0.EAR4.R               /* ERM Memory n Error Address Register */
#define ERM_PFE0_SYN4        ERM_PFE0.SYN4.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE0_CORR_ERR_CNT4 ERM_PFE0.CORR_ERR_CNT4.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE0_EAR5        ERM_PFE0.EAR5.R               /* ERM Memory n Error Address Register */
#define ERM_PFE0_SYN5        ERM_PFE0.SYN5.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE0_CORR_ERR_CNT5 ERM_PFE0.CORR_ERR_CNT5.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE0_EAR6        ERM_PFE0.EAR6.R               /* ERM Memory n Error Address Register */
#define ERM_PFE0_SYN6        ERM_PFE0.SYN6.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE0_CORR_ERR_CNT6 ERM_PFE0.CORR_ERR_CNT6.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE0_EAR7        ERM_PFE0.EAR7.R               /* ERM Memory n Error Address Register */
#define ERM_PFE0_SYN7        ERM_PFE0.SYN7.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE0_CORR_ERR_CNT7 ERM_PFE0.CORR_ERR_CNT7.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE0_EAR8        ERM_PFE0.EAR8.R               /* ERM Memory n Error Address Register */
#define ERM_PFE0_SYN8        ERM_PFE0.SYN8.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE0_CORR_ERR_CNT8 ERM_PFE0.CORR_ERR_CNT8.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE0_EAR9        ERM_PFE0.EAR9.R               /* ERM Memory n Error Address Register */
#define ERM_PFE0_SYN9        ERM_PFE0.SYN9.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE0_CORR_ERR_CNT9 ERM_PFE0.CORR_ERR_CNT9.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE0_EAR10       ERM_PFE0.EAR10.R              /* ERM Memory n Error Address Register */
#define ERM_PFE0_SYN10       ERM_PFE0.SYN10.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE0_CORR_ERR_CNT10 ERM_PFE0.CORR_ERR_CNT10.R  /* ERM Memory n Correctable Error Count Register */

#define ERM_PFE1_CR0         ERM_PFE1.CR0.R                /* ERM Configuration Register 0 */
#define ERM_PFE1_CR1         ERM_PFE1.CR1.R                /* ERM Configuration Register 1 */
#define ERM_PFE1_SR0         ERM_PFE1.SR0.R                /* ERM Status Register 0 */
#define ERM_PFE1_SR1         ERM_PFE1.SR1.R                /* ERM Status Register 1 */
#define ERM_PFE1_EAR0        ERM_PFE1.EAR0.R               /* ERM Memory n Error Address Register */
#define ERM_PFE1_SYN0        ERM_PFE1.SYN0.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE1_CORR_ERR_CNT0 ERM_PFE1.CORR_ERR_CNT0.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE1_EAR1        ERM_PFE1.EAR1.R               /* ERM Memory n Error Address Register */
#define ERM_PFE1_SYN1        ERM_PFE1.SYN1.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE1_CORR_ERR_CNT1 ERM_PFE1.CORR_ERR_CNT1.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE1_EAR2        ERM_PFE1.EAR2.R               /* ERM Memory n Error Address Register */
#define ERM_PFE1_SYN2        ERM_PFE1.SYN2.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE1_CORR_ERR_CNT2 ERM_PFE1.CORR_ERR_CNT2.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE1_EAR3        ERM_PFE1.EAR3.R               /* ERM Memory n Error Address Register */
#define ERM_PFE1_SYN3        ERM_PFE1.SYN3.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE1_CORR_ERR_CNT3 ERM_PFE1.CORR_ERR_CNT3.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE1_EAR4        ERM_PFE1.EAR4.R               /* ERM Memory n Error Address Register */
#define ERM_PFE1_SYN4        ERM_PFE1.SYN4.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE1_CORR_ERR_CNT4 ERM_PFE1.CORR_ERR_CNT4.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE1_EAR5        ERM_PFE1.EAR5.R               /* ERM Memory n Error Address Register */
#define ERM_PFE1_SYN5        ERM_PFE1.SYN5.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE1_CORR_ERR_CNT5 ERM_PFE1.CORR_ERR_CNT5.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE1_EAR6        ERM_PFE1.EAR6.R               /* ERM Memory n Error Address Register */
#define ERM_PFE1_SYN6        ERM_PFE1.SYN6.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE1_CORR_ERR_CNT6 ERM_PFE1.CORR_ERR_CNT6.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE1_EAR7        ERM_PFE1.EAR7.R               /* ERM Memory n Error Address Register */
#define ERM_PFE1_SYN7        ERM_PFE1.SYN7.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE1_CORR_ERR_CNT7 ERM_PFE1.CORR_ERR_CNT7.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE1_EAR8        ERM_PFE1.EAR8.R               /* ERM Memory n Error Address Register */
#define ERM_PFE1_SYN8        ERM_PFE1.SYN8.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE1_CORR_ERR_CNT8 ERM_PFE1.CORR_ERR_CNT8.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE1_EAR9        ERM_PFE1.EAR9.R               /* ERM Memory n Error Address Register */
#define ERM_PFE1_SYN9        ERM_PFE1.SYN9.R               /* ERM Memory n Syndrome Register */
#define ERM_PFE1_CORR_ERR_CNT9 ERM_PFE1.CORR_ERR_CNT9.R    /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE1_EAR10       ERM_PFE1.EAR10.R              /* ERM Memory n Error Address Register */
#define ERM_PFE1_SYN10       ERM_PFE1.SYN10.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE1_CORR_ERR_CNT10 ERM_PFE1.CORR_ERR_CNT10.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE1_EAR11       ERM_PFE1.EAR11.R              /* ERM Memory n Error Address Register */
#define ERM_PFE1_SYN11       ERM_PFE1.SYN11.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE1_CORR_ERR_CNT11 ERM_PFE1.CORR_ERR_CNT11.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE1_EAR12       ERM_PFE1.EAR12.R              /* ERM Memory n Error Address Register */
#define ERM_PFE1_SYN12       ERM_PFE1.SYN12.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE1_CORR_ERR_CNT12 ERM_PFE1.CORR_ERR_CNT12.R  /* ERM Memory n Correctable Error Count Register */

#define ERM_PFE12_CR0        ERM_PFE12.CR0.R               /* ERM Configuration Register 0 */
#define ERM_PFE12_CR1        ERM_PFE12.CR1.R               /* ERM Configuration Register 1 */
#define ERM_PFE12_CR2        ERM_PFE12.CR2.R               /* ERM Configuration Register 2 */
#define ERM_PFE12_SR0        ERM_PFE12.SR0.R               /* ERM Status Register 0 */
#define ERM_PFE12_SR1        ERM_PFE12.SR1.R               /* ERM Status Register 1 */
#define ERM_PFE12_SR2        ERM_PFE12.SR2.R               /* ERM Status Register 2 */
#define ERM_PFE12_EAR0       ERM_PFE12.EAR0.R              /* ERM Memory n Error Address Register */
#define ERM_PFE12_SYN0       ERM_PFE12.SYN0.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE12_CORR_ERR_CNT0 ERM_PFE12.CORR_ERR_CNT0.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE12_EAR1       ERM_PFE12.EAR1.R              /* ERM Memory n Error Address Register */
#define ERM_PFE12_SYN1       ERM_PFE12.SYN1.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE12_CORR_ERR_CNT1 ERM_PFE12.CORR_ERR_CNT1.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE12_EAR2       ERM_PFE12.EAR2.R              /* ERM Memory n Error Address Register */
#define ERM_PFE12_SYN2       ERM_PFE12.SYN2.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE12_CORR_ERR_CNT2 ERM_PFE12.CORR_ERR_CNT2.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE12_EAR3       ERM_PFE12.EAR3.R              /* ERM Memory n Error Address Register */
#define ERM_PFE12_SYN3       ERM_PFE12.SYN3.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE12_CORR_ERR_CNT3 ERM_PFE12.CORR_ERR_CNT3.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE12_EAR4       ERM_PFE12.EAR4.R              /* ERM Memory n Error Address Register */
#define ERM_PFE12_SYN4       ERM_PFE12.SYN4.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE12_CORR_ERR_CNT4 ERM_PFE12.CORR_ERR_CNT4.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE12_EAR5       ERM_PFE12.EAR5.R              /* ERM Memory n Error Address Register */
#define ERM_PFE12_SYN5       ERM_PFE12.SYN5.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE12_CORR_ERR_CNT5 ERM_PFE12.CORR_ERR_CNT5.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE12_EAR6       ERM_PFE12.EAR6.R              /* ERM Memory n Error Address Register */
#define ERM_PFE12_SYN6       ERM_PFE12.SYN6.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE12_CORR_ERR_CNT6 ERM_PFE12.CORR_ERR_CNT6.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE12_EAR7       ERM_PFE12.EAR7.R              /* ERM Memory n Error Address Register */
#define ERM_PFE12_SYN7       ERM_PFE12.SYN7.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE12_CORR_ERR_CNT7 ERM_PFE12.CORR_ERR_CNT7.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE12_EAR8       ERM_PFE12.EAR8.R              /* ERM Memory n Error Address Register */
#define ERM_PFE12_SYN8       ERM_PFE12.SYN8.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE12_CORR_ERR_CNT8 ERM_PFE12.CORR_ERR_CNT8.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE12_EAR9       ERM_PFE12.EAR9.R              /* ERM Memory n Error Address Register */
#define ERM_PFE12_SYN9       ERM_PFE12.SYN9.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE12_CORR_ERR_CNT9 ERM_PFE12.CORR_ERR_CNT9.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE12_EAR10      ERM_PFE12.EAR10.R             /* ERM Memory n Error Address Register */
#define ERM_PFE12_SYN10      ERM_PFE12.SYN10.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE12_CORR_ERR_CNT10 ERM_PFE12.CORR_ERR_CNT10.R /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE12_EAR11      ERM_PFE12.EAR11.R             /* ERM Memory n Error Address Register */
#define ERM_PFE12_SYN11      ERM_PFE12.SYN11.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE12_CORR_ERR_CNT11 ERM_PFE12.CORR_ERR_CNT11.R /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE12_EAR12      ERM_PFE12.EAR12.R             /* ERM Memory n Error Address Register */
#define ERM_PFE12_SYN12      ERM_PFE12.SYN12.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE12_CORR_ERR_CNT12 ERM_PFE12.CORR_ERR_CNT12.R /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE12_EAR13      ERM_PFE12.EAR13.R             /* ERM Memory n Error Address Register */
#define ERM_PFE12_SYN13      ERM_PFE12.SYN13.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE12_CORR_ERR_CNT13 ERM_PFE12.CORR_ERR_CNT13.R /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE12_EAR14      ERM_PFE12.EAR14.R             /* ERM Memory n Error Address Register */
#define ERM_PFE12_SYN14      ERM_PFE12.SYN14.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE12_CORR_ERR_CNT14 ERM_PFE12.CORR_ERR_CNT14.R /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE12_EAR15      ERM_PFE12.EAR15.R             /* ERM Memory n Error Address Register */
#define ERM_PFE12_SYN15      ERM_PFE12.SYN15.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE12_CORR_ERR_CNT15 ERM_PFE12.CORR_ERR_CNT15.R /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE12_EAR16      ERM_PFE12.EAR16.R             /* ERM Memory n Error Address Register */
#define ERM_PFE12_SYN16      ERM_PFE12.SYN16.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE12_CORR_ERR_CNT16 ERM_PFE12.CORR_ERR_CNT16.R /* ERM Memory n Correctable Error Count Register */

#define ERM_PFE14_CR0        ERM_PFE14.CR0.R               /* ERM Configuration Register 0 */
#define ERM_PFE14_CR1        ERM_PFE14.CR1.R               /* ERM Configuration Register 1 */
#define ERM_PFE14_SR0        ERM_PFE14.SR0.R               /* ERM Status Register 0 */
#define ERM_PFE14_SR1        ERM_PFE14.SR1.R               /* ERM Status Register 1 */
#define ERM_PFE14_EAR0       ERM_PFE14.EAR0.R              /* ERM Memory n Error Address Register */
#define ERM_PFE14_SYN0       ERM_PFE14.SYN0.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE14_CORR_ERR_CNT0 ERM_PFE14.CORR_ERR_CNT0.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE14_EAR1       ERM_PFE14.EAR1.R              /* ERM Memory n Error Address Register */
#define ERM_PFE14_SYN1       ERM_PFE14.SYN1.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE14_CORR_ERR_CNT1 ERM_PFE14.CORR_ERR_CNT1.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE14_EAR2       ERM_PFE14.EAR2.R              /* ERM Memory n Error Address Register */
#define ERM_PFE14_SYN2       ERM_PFE14.SYN2.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE14_CORR_ERR_CNT2 ERM_PFE14.CORR_ERR_CNT2.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE14_EAR3       ERM_PFE14.EAR3.R              /* ERM Memory n Error Address Register */
#define ERM_PFE14_SYN3       ERM_PFE14.SYN3.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE14_CORR_ERR_CNT3 ERM_PFE14.CORR_ERR_CNT3.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE14_EAR4       ERM_PFE14.EAR4.R              /* ERM Memory n Error Address Register */
#define ERM_PFE14_SYN4       ERM_PFE14.SYN4.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE14_CORR_ERR_CNT4 ERM_PFE14.CORR_ERR_CNT4.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE14_EAR5       ERM_PFE14.EAR5.R              /* ERM Memory n Error Address Register */
#define ERM_PFE14_SYN5       ERM_PFE14.SYN5.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE14_CORR_ERR_CNT5 ERM_PFE14.CORR_ERR_CNT5.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE14_EAR6       ERM_PFE14.EAR6.R              /* ERM Memory n Error Address Register */
#define ERM_PFE14_SYN6       ERM_PFE14.SYN6.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE14_CORR_ERR_CNT6 ERM_PFE14.CORR_ERR_CNT6.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE14_EAR7       ERM_PFE14.EAR7.R              /* ERM Memory n Error Address Register */
#define ERM_PFE14_SYN7       ERM_PFE14.SYN7.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE14_CORR_ERR_CNT7 ERM_PFE14.CORR_ERR_CNT7.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE14_EAR8       ERM_PFE14.EAR8.R              /* ERM Memory n Error Address Register */
#define ERM_PFE14_SYN8       ERM_PFE14.SYN8.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE14_CORR_ERR_CNT8 ERM_PFE14.CORR_ERR_CNT8.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE14_EAR9       ERM_PFE14.EAR9.R              /* ERM Memory n Error Address Register */
#define ERM_PFE14_SYN9       ERM_PFE14.SYN9.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE14_CORR_ERR_CNT9 ERM_PFE14.CORR_ERR_CNT9.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE14_EAR10      ERM_PFE14.EAR10.R             /* ERM Memory n Error Address Register */
#define ERM_PFE14_SYN10      ERM_PFE14.SYN10.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE14_CORR_ERR_CNT10 ERM_PFE14.CORR_ERR_CNT10.R /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE14_EAR11      ERM_PFE14.EAR11.R             /* ERM Memory n Error Address Register */
#define ERM_PFE14_SYN11      ERM_PFE14.SYN11.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE14_CORR_ERR_CNT11 ERM_PFE14.CORR_ERR_CNT11.R /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE14_EAR12      ERM_PFE14.EAR12.R             /* ERM Memory n Error Address Register */
#define ERM_PFE14_SYN12      ERM_PFE14.SYN12.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE14_CORR_ERR_CNT12 ERM_PFE14.CORR_ERR_CNT12.R /* ERM Memory n Correctable Error Count Register */

#define ERM_PFE15_CR0        ERM_PFE15.CR0.R               /* ERM Configuration Register 0 */
#define ERM_PFE15_CR1        ERM_PFE15.CR1.R               /* ERM Configuration Register 1 */
#define ERM_PFE15_SR0        ERM_PFE15.SR0.R               /* ERM Status Register 0 */
#define ERM_PFE15_SR1        ERM_PFE15.SR1.R               /* ERM Status Register 1 */
#define ERM_PFE15_EAR0       ERM_PFE15.EAR0.R              /* ERM Memory n Error Address Register */
#define ERM_PFE15_SYN0       ERM_PFE15.SYN0.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE15_CORR_ERR_CNT0 ERM_PFE15.CORR_ERR_CNT0.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE15_EAR1       ERM_PFE15.EAR1.R              /* ERM Memory n Error Address Register */
#define ERM_PFE15_SYN1       ERM_PFE15.SYN1.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE15_CORR_ERR_CNT1 ERM_PFE15.CORR_ERR_CNT1.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE15_EAR2       ERM_PFE15.EAR2.R              /* ERM Memory n Error Address Register */
#define ERM_PFE15_SYN2       ERM_PFE15.SYN2.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE15_CORR_ERR_CNT2 ERM_PFE15.CORR_ERR_CNT2.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE15_EAR3       ERM_PFE15.EAR3.R              /* ERM Memory n Error Address Register */
#define ERM_PFE15_SYN3       ERM_PFE15.SYN3.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE15_CORR_ERR_CNT3 ERM_PFE15.CORR_ERR_CNT3.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE15_EAR4       ERM_PFE15.EAR4.R              /* ERM Memory n Error Address Register */
#define ERM_PFE15_SYN4       ERM_PFE15.SYN4.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE15_CORR_ERR_CNT4 ERM_PFE15.CORR_ERR_CNT4.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE15_EAR5       ERM_PFE15.EAR5.R              /* ERM Memory n Error Address Register */
#define ERM_PFE15_SYN5       ERM_PFE15.SYN5.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE15_CORR_ERR_CNT5 ERM_PFE15.CORR_ERR_CNT5.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE15_EAR6       ERM_PFE15.EAR6.R              /* ERM Memory n Error Address Register */
#define ERM_PFE15_SYN6       ERM_PFE15.SYN6.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE15_CORR_ERR_CNT6 ERM_PFE15.CORR_ERR_CNT6.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE15_EAR7       ERM_PFE15.EAR7.R              /* ERM Memory n Error Address Register */
#define ERM_PFE15_SYN7       ERM_PFE15.SYN7.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE15_CORR_ERR_CNT7 ERM_PFE15.CORR_ERR_CNT7.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE15_EAR8       ERM_PFE15.EAR8.R              /* ERM Memory n Error Address Register */
#define ERM_PFE15_SYN8       ERM_PFE15.SYN8.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE15_CORR_ERR_CNT8 ERM_PFE15.CORR_ERR_CNT8.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE15_EAR9       ERM_PFE15.EAR9.R              /* ERM Memory n Error Address Register */
#define ERM_PFE15_SYN9       ERM_PFE15.SYN9.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE15_CORR_ERR_CNT9 ERM_PFE15.CORR_ERR_CNT9.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE15_EAR10      ERM_PFE15.EAR10.R             /* ERM Memory n Error Address Register */
#define ERM_PFE15_SYN10      ERM_PFE15.SYN10.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE15_CORR_ERR_CNT10 ERM_PFE15.CORR_ERR_CNT10.R /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE15_EAR11      ERM_PFE15.EAR11.R             /* ERM Memory n Error Address Register */
#define ERM_PFE15_SYN11      ERM_PFE15.SYN11.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE15_CORR_ERR_CNT11 ERM_PFE15.CORR_ERR_CNT11.R /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE15_EAR12      ERM_PFE15.EAR12.R             /* ERM Memory n Error Address Register */
#define ERM_PFE15_SYN12      ERM_PFE15.SYN12.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE15_CORR_ERR_CNT12 ERM_PFE15.CORR_ERR_CNT12.R /* ERM Memory n Correctable Error Count Register */

#define ERM_PFE11_CR0        ERM_PFE11.CR0.R               /* ERM Configuration Register 0 */
#define ERM_PFE11_CR1        ERM_PFE11.CR1.R               /* ERM Configuration Register 1 */
#define ERM_PFE11_CR2        ERM_PFE11.CR2.R               /* ERM Configuration Register 2 */
#define ERM_PFE11_SR0        ERM_PFE11.SR0.R               /* ERM Status Register 0 */
#define ERM_PFE11_SR1        ERM_PFE11.SR1.R               /* ERM Status Register 1 */
#define ERM_PFE11_SR2        ERM_PFE11.SR2.R               /* ERM Status Register 2 */
#define ERM_PFE11_EAR0       ERM_PFE11.EAR0.R              /* ERM Memory n Error Address Register */
#define ERM_PFE11_SYN0       ERM_PFE11.SYN0.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE11_CORR_ERR_CNT0 ERM_PFE11.CORR_ERR_CNT0.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE11_EAR1       ERM_PFE11.EAR1.R              /* ERM Memory n Error Address Register */
#define ERM_PFE11_SYN1       ERM_PFE11.SYN1.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE11_CORR_ERR_CNT1 ERM_PFE11.CORR_ERR_CNT1.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE11_EAR2       ERM_PFE11.EAR2.R              /* ERM Memory n Error Address Register */
#define ERM_PFE11_SYN2       ERM_PFE11.SYN2.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE11_CORR_ERR_CNT2 ERM_PFE11.CORR_ERR_CNT2.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE11_EAR3       ERM_PFE11.EAR3.R              /* ERM Memory n Error Address Register */
#define ERM_PFE11_SYN3       ERM_PFE11.SYN3.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE11_CORR_ERR_CNT3 ERM_PFE11.CORR_ERR_CNT3.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE11_EAR4       ERM_PFE11.EAR4.R              /* ERM Memory n Error Address Register */
#define ERM_PFE11_SYN4       ERM_PFE11.SYN4.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE11_CORR_ERR_CNT4 ERM_PFE11.CORR_ERR_CNT4.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE11_EAR5       ERM_PFE11.EAR5.R              /* ERM Memory n Error Address Register */
#define ERM_PFE11_SYN5       ERM_PFE11.SYN5.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE11_CORR_ERR_CNT5 ERM_PFE11.CORR_ERR_CNT5.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE11_EAR6       ERM_PFE11.EAR6.R              /* ERM Memory n Error Address Register */
#define ERM_PFE11_SYN6       ERM_PFE11.SYN6.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE11_CORR_ERR_CNT6 ERM_PFE11.CORR_ERR_CNT6.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE11_EAR7       ERM_PFE11.EAR7.R              /* ERM Memory n Error Address Register */
#define ERM_PFE11_SYN7       ERM_PFE11.SYN7.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE11_CORR_ERR_CNT7 ERM_PFE11.CORR_ERR_CNT7.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE11_EAR8       ERM_PFE11.EAR8.R              /* ERM Memory n Error Address Register */
#define ERM_PFE11_SYN8       ERM_PFE11.SYN8.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE11_CORR_ERR_CNT8 ERM_PFE11.CORR_ERR_CNT8.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE11_EAR9       ERM_PFE11.EAR9.R              /* ERM Memory n Error Address Register */
#define ERM_PFE11_SYN9       ERM_PFE11.SYN9.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE11_CORR_ERR_CNT9 ERM_PFE11.CORR_ERR_CNT9.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE11_EAR10      ERM_PFE11.EAR10.R             /* ERM Memory n Error Address Register */
#define ERM_PFE11_SYN10      ERM_PFE11.SYN10.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE11_CORR_ERR_CNT10 ERM_PFE11.CORR_ERR_CNT10.R /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE11_EAR11      ERM_PFE11.EAR11.R             /* ERM Memory n Error Address Register */
#define ERM_PFE11_SYN11      ERM_PFE11.SYN11.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE11_CORR_ERR_CNT11 ERM_PFE11.CORR_ERR_CNT11.R /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE11_EAR12      ERM_PFE11.EAR12.R             /* ERM Memory n Error Address Register */
#define ERM_PFE11_SYN12      ERM_PFE11.SYN12.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE11_CORR_ERR_CNT12 ERM_PFE11.CORR_ERR_CNT12.R /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE11_EAR13      ERM_PFE11.EAR13.R             /* ERM Memory n Error Address Register */
#define ERM_PFE11_SYN13      ERM_PFE11.SYN13.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE11_CORR_ERR_CNT13 ERM_PFE11.CORR_ERR_CNT13.R /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE11_EAR14      ERM_PFE11.EAR14.R             /* ERM Memory n Error Address Register */
#define ERM_PFE11_SYN14      ERM_PFE11.SYN14.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE11_CORR_ERR_CNT14 ERM_PFE11.CORR_ERR_CNT14.R /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE11_EAR15      ERM_PFE11.EAR15.R             /* ERM Memory n Error Address Register */
#define ERM_PFE11_SYN15      ERM_PFE11.SYN15.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE11_CORR_ERR_CNT15 ERM_PFE11.CORR_ERR_CNT15.R /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE11_EAR16      ERM_PFE11.EAR16.R             /* ERM Memory n Error Address Register */
#define ERM_PFE11_SYN16      ERM_PFE11.SYN16.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE11_CORR_ERR_CNT16 ERM_PFE11.CORR_ERR_CNT16.R /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE11_EAR17      ERM_PFE11.EAR17.R             /* ERM Memory n Error Address Register */
#define ERM_PFE11_SYN17      ERM_PFE11.SYN17.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE11_CORR_ERR_CNT17 ERM_PFE11.CORR_ERR_CNT17.R /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE11_EAR18      ERM_PFE11.EAR18.R             /* ERM Memory n Error Address Register */
#define ERM_PFE11_SYN18      ERM_PFE11.SYN18.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE11_CORR_ERR_CNT18 ERM_PFE11.CORR_ERR_CNT18.R /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE11_EAR19      ERM_PFE11.EAR19.R             /* ERM Memory n Error Address Register */
#define ERM_PFE11_SYN19      ERM_PFE11.SYN19.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE11_CORR_ERR_CNT19 ERM_PFE11.CORR_ERR_CNT19.R /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE11_EAR20      ERM_PFE11.EAR20.R             /* ERM Memory n Error Address Register */
#define ERM_PFE11_SYN20      ERM_PFE11.SYN20.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE11_CORR_ERR_CNT20 ERM_PFE11.CORR_ERR_CNT20.R /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE11_EAR21      ERM_PFE11.EAR21.R             /* ERM Memory n Error Address Register */
#define ERM_PFE11_SYN21      ERM_PFE11.SYN21.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE11_CORR_ERR_CNT21 ERM_PFE11.CORR_ERR_CNT21.R /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE11_EAR22      ERM_PFE11.EAR22.R             /* ERM Memory n Error Address Register */
#define ERM_PFE11_SYN22      ERM_PFE11.SYN22.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE11_CORR_ERR_CNT22 ERM_PFE11.CORR_ERR_CNT22.R /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE11_EAR23      ERM_PFE11.EAR23.R             /* ERM Memory n Error Address Register */
#define ERM_PFE11_SYN23      ERM_PFE11.SYN23.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE11_CORR_ERR_CNT23 ERM_PFE11.CORR_ERR_CNT23.R /* ERM Memory n Correctable Error Count Register */

#define ERM_PFE13_CR0        ERM_PFE13.CR0.R               /* ERM Configuration Register 0 */
#define ERM_PFE13_CR1        ERM_PFE13.CR1.R               /* ERM Configuration Register 1 */
#define ERM_PFE13_CR2        ERM_PFE13.CR2.R               /* ERM Configuration Register 2 */
#define ERM_PFE13_SR0        ERM_PFE13.SR0.R               /* ERM Status Register 0 */
#define ERM_PFE13_SR1        ERM_PFE13.SR1.R               /* ERM Status Register 1 */
#define ERM_PFE13_SR2        ERM_PFE13.SR2.R               /* ERM Status Register 2 */
#define ERM_PFE13_EAR0       ERM_PFE13.EAR0.R              /* ERM Memory n Error Address Register */
#define ERM_PFE13_SYN0       ERM_PFE13.SYN0.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE13_CORR_ERR_CNT0 ERM_PFE13.CORR_ERR_CNT0.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE13_EAR1       ERM_PFE13.EAR1.R              /* ERM Memory n Error Address Register */
#define ERM_PFE13_SYN1       ERM_PFE13.SYN1.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE13_CORR_ERR_CNT1 ERM_PFE13.CORR_ERR_CNT1.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE13_EAR2       ERM_PFE13.EAR2.R              /* ERM Memory n Error Address Register */
#define ERM_PFE13_SYN2       ERM_PFE13.SYN2.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE13_CORR_ERR_CNT2 ERM_PFE13.CORR_ERR_CNT2.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE13_EAR3       ERM_PFE13.EAR3.R              /* ERM Memory n Error Address Register */
#define ERM_PFE13_SYN3       ERM_PFE13.SYN3.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE13_CORR_ERR_CNT3 ERM_PFE13.CORR_ERR_CNT3.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE13_EAR4       ERM_PFE13.EAR4.R              /* ERM Memory n Error Address Register */
#define ERM_PFE13_SYN4       ERM_PFE13.SYN4.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE13_CORR_ERR_CNT4 ERM_PFE13.CORR_ERR_CNT4.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE13_EAR5       ERM_PFE13.EAR5.R              /* ERM Memory n Error Address Register */
#define ERM_PFE13_SYN5       ERM_PFE13.SYN5.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE13_CORR_ERR_CNT5 ERM_PFE13.CORR_ERR_CNT5.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE13_EAR6       ERM_PFE13.EAR6.R              /* ERM Memory n Error Address Register */
#define ERM_PFE13_SYN6       ERM_PFE13.SYN6.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE13_CORR_ERR_CNT6 ERM_PFE13.CORR_ERR_CNT6.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE13_EAR7       ERM_PFE13.EAR7.R              /* ERM Memory n Error Address Register */
#define ERM_PFE13_SYN7       ERM_PFE13.SYN7.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE13_CORR_ERR_CNT7 ERM_PFE13.CORR_ERR_CNT7.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE13_EAR8       ERM_PFE13.EAR8.R              /* ERM Memory n Error Address Register */
#define ERM_PFE13_SYN8       ERM_PFE13.SYN8.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE13_CORR_ERR_CNT8 ERM_PFE13.CORR_ERR_CNT8.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE13_EAR9       ERM_PFE13.EAR9.R              /* ERM Memory n Error Address Register */
#define ERM_PFE13_SYN9       ERM_PFE13.SYN9.R              /* ERM Memory n Syndrome Register */
#define ERM_PFE13_CORR_ERR_CNT9 ERM_PFE13.CORR_ERR_CNT9.R  /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE13_EAR10      ERM_PFE13.EAR10.R             /* ERM Memory n Error Address Register */
#define ERM_PFE13_SYN10      ERM_PFE13.SYN10.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE13_CORR_ERR_CNT10 ERM_PFE13.CORR_ERR_CNT10.R /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE13_EAR11      ERM_PFE13.EAR11.R             /* ERM Memory n Error Address Register */
#define ERM_PFE13_SYN11      ERM_PFE13.SYN11.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE13_CORR_ERR_CNT11 ERM_PFE13.CORR_ERR_CNT11.R /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE13_EAR12      ERM_PFE13.EAR12.R             /* ERM Memory n Error Address Register */
#define ERM_PFE13_SYN12      ERM_PFE13.SYN12.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE13_CORR_ERR_CNT12 ERM_PFE13.CORR_ERR_CNT12.R /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE13_EAR13      ERM_PFE13.EAR13.R             /* ERM Memory n Error Address Register */
#define ERM_PFE13_SYN13      ERM_PFE13.SYN13.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE13_CORR_ERR_CNT13 ERM_PFE13.CORR_ERR_CNT13.R /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE13_EAR14      ERM_PFE13.EAR14.R             /* ERM Memory n Error Address Register */
#define ERM_PFE13_SYN14      ERM_PFE13.SYN14.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE13_CORR_ERR_CNT14 ERM_PFE13.CORR_ERR_CNT14.R /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE13_EAR15      ERM_PFE13.EAR15.R             /* ERM Memory n Error Address Register */
#define ERM_PFE13_SYN15      ERM_PFE13.SYN15.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE13_CORR_ERR_CNT15 ERM_PFE13.CORR_ERR_CNT15.R /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE13_EAR16      ERM_PFE13.EAR16.R             /* ERM Memory n Error Address Register */
#define ERM_PFE13_SYN16      ERM_PFE13.SYN16.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE13_CORR_ERR_CNT16 ERM_PFE13.CORR_ERR_CNT16.R /* ERM Memory n Correctable Error Count Register */
#define ERM_PFE13_EAR17      ERM_PFE13.EAR17.R             /* ERM Memory n Error Address Register */
#define ERM_PFE13_SYN17      ERM_PFE13.SYN17.R             /* ERM Memory n Syndrome Register */
#define ERM_PFE13_CORR_ERR_CNT17 ERM_PFE13.CORR_ERR_CNT17.R /* ERM Memory n Correctable Error Count Register */

#define ERM_STDBY_SRAM_CR0   ERM_STDBY_SRAM.CR0.R          /* ERM Configuration Register 0 */
#define ERM_STDBY_SRAM_SR0   ERM_STDBY_SRAM.SR0.R          /* ERM Status Register 0 */
#define ERM_STDBY_SRAM_EAR0  ERM_STDBY_SRAM.EAR0.R         /* ERM Memory n Error Address Register */
#define ERM_STDBY_SRAM_SYN0  ERM_STDBY_SRAM.SYN0.R         /* ERM Memory n Syndrome Register */
#define ERM_STDBY_SRAM_CORR_ERR_CNT0 ERM_STDBY_SRAM.CORR_ERR_CNT0.R /* ERM Memory n Correctable Error Count Register */

/* FBXC */
#define FBXC_STR             FBXC.STR.R                    /* Status Register */
#define FBXC_CTL             FBXC.CTL.R                    /* Control Register */

/* FCCU */
#define FCCU_CTRL            FCCU.CTRL.R                   /* Control */
#define FCCU_CTRLK           FCCU.CTRLK.R                  /* Control Key */
#define FCCU_CFG             FCCU.CFG.R                    /* Configuration */
#define FCCU_NCF_CFG0        FCCU.NCF_CFG[0].R             /* Non-critical Fault Configuration */
#define FCCU_NCF_CFG1        FCCU.NCF_CFG[1].R             /* Non-critical Fault Configuration */
#define FCCU_NCF_CFG2        FCCU.NCF_CFG[2].R             /* Non-critical Fault Configuration */
#define FCCU_NCF_CFG3        FCCU.NCF_CFG[3].R             /* Non-critical Fault Configuration */
#define FCCU_NCFS_CFG0       FCCU.NCFS_CFG[0].R            /* Non-critical Fault-State Configuration */
#define FCCU_NCFS_CFG1       FCCU.NCFS_CFG[1].R            /* Non-critical Fault-State Configuration */
#define FCCU_NCFS_CFG2       FCCU.NCFS_CFG[2].R            /* Non-critical Fault-State Configuration */
#define FCCU_NCFS_CFG3       FCCU.NCFS_CFG[3].R            /* Non-critical Fault-State Configuration */
#define FCCU_NCFS_CFG4       FCCU.NCFS_CFG[4].R            /* Non-critical Fault-State Configuration */
#define FCCU_NCFS_CFG5       FCCU.NCFS_CFG[5].R            /* Non-critical Fault-State Configuration */
#define FCCU_NCFS_CFG6       FCCU.NCFS_CFG[6].R            /* Non-critical Fault-State Configuration */
#define FCCU_NCFS_CFG7       FCCU.NCFS_CFG[7].R            /* Non-critical Fault-State Configuration */
#define FCCU_NCF_S0          FCCU.NCF_S[0].R               /* Non-critical Fault Status */
#define FCCU_NCF_S1          FCCU.NCF_S[1].R               /* Non-critical Fault Status */
#define FCCU_NCF_S2          FCCU.NCF_S[2].R               /* Non-critical Fault Status */
#define FCCU_NCF_S3          FCCU.NCF_S[3].R               /* Non-critical Fault Status */
#define FCCU_NCFK            FCCU.NCFK.R                   /* Non-critical Fault Key */
#define FCCU_NCF_E0          FCCU.NCF_E[0].R               /* Non-critical Fault Enable */
#define FCCU_NCF_E1          FCCU.NCF_E[1].R               /* Non-critical Fault Enable */
#define FCCU_NCF_E2          FCCU.NCF_E[2].R               /* Non-critical Fault Enable */
#define FCCU_NCF_E3          FCCU.NCF_E[3].R               /* Non-critical Fault Enable */
#define FCCU_NCF_TOE0        FCCU.NCF_TOE[0].R             /* Non-critical-Fault Alarm-State Timeout Enable */
#define FCCU_NCF_TOE1        FCCU.NCF_TOE[1].R             /* Non-critical-Fault Alarm-State Timeout Enable */
#define FCCU_NCF_TOE2        FCCU.NCF_TOE[2].R             /* Non-critical-Fault Alarm-State Timeout Enable */
#define FCCU_NCF_TOE3        FCCU.NCF_TOE[3].R             /* Non-critical-Fault Alarm-State Timeout Enable */
#define FCCU_NCF_TO          FCCU.NCF_TO.R                 /* Non-critical-Fault Alarm-State Timeout Interval */
#define FCCU_CFG_TO          FCCU.CFG_TO.R                 /* Configuration-State Timeout Interval */
#define FCCU_EINOUT          FCCU.EINOUT.R                 /* IO Control */
#define FCCU_STAT            FCCU.STAT.R                   /* Status */
#define FCCU_N2AF_STATUS     FCCU.N2AF_STATUS.R            /* Normal-to-Alarm Freeze Status */
#define FCCU_A2FF_STATUS     FCCU.A2FF_STATUS.R            /* Alarm-to-Fault Freeze Status */
#define FCCU_N2FF_STATUS     FCCU.N2FF_STATUS.R            /* Normal-to-Fault Freeze Status */
#define FCCU_F2AF_STATUS     FCCU.F2AF_STATUS.R            /* Fault-to-Alarm Freeze Status */
#define FCCU_NCFF            FCCU.NCFF.R                   /* Non-critical Fault Fake */
#define FCCU_IRQ_STAT        FCCU.IRQ_STAT.R               /* IRQ Status */
#define FCCU_IRQ_EN          FCCU.IRQ_EN.R                 /* IRQ Enable */
#define FCCU_TRANS_LOCK      FCCU.TRANS_LOCK.R             /* Transient Configuration Lock */
#define FCCU_PERMNT_LOCK     FCCU.PERMNT_LOCK.R            /* Permanent Configuration Lock */
#define FCCU_DELTA_T         FCCU.DELTA_T.R                /* Delta T */
#define FCCU_IRQ_ALARM_EN0   FCCU.IRQ_ALARM_EN[0].R        /* Non-critical Alarm-State Interrupt-Request Enable */
#define FCCU_IRQ_ALARM_EN1   FCCU.IRQ_ALARM_EN[1].R        /* Non-critical Alarm-State Interrupt-Request Enable */
#define FCCU_IRQ_ALARM_EN2   FCCU.IRQ_ALARM_EN[2].R        /* Non-critical Alarm-State Interrupt-Request Enable */
#define FCCU_IRQ_ALARM_EN3   FCCU.IRQ_ALARM_EN[3].R        /* Non-critical Alarm-State Interrupt-Request Enable */
#define FCCU_NMI_EN0         FCCU.NMI_EN[0].R              /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable */
#define FCCU_NMI_EN1         FCCU.NMI_EN[1].R              /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable */
#define FCCU_NMI_EN2         FCCU.NMI_EN[2].R              /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable */
#define FCCU_NMI_EN3         FCCU.NMI_EN[3].R              /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable */
#define FCCU_EOUT_SIG_EN0    FCCU.EOUT_SIG_EN[0].R         /* Non-critical Fault-State EOUT Signaling Enable */
#define FCCU_EOUT_SIG_EN1    FCCU.EOUT_SIG_EN[1].R         /* Non-critical Fault-State EOUT Signaling Enable */
#define FCCU_EOUT_SIG_EN2    FCCU.EOUT_SIG_EN[2].R         /* Non-critical Fault-State EOUT Signaling Enable */
#define FCCU_EOUT_SIG_EN3    FCCU.EOUT_SIG_EN[3].R         /* Non-critical Fault-State EOUT Signaling Enable */
#define FCCU_TMR_ALARM       FCCU.TMR_ALARM.R              /* Alarm-State Timer */
#define FCCU_TMR_CFG         FCCU.TMR_CFG.R                /* Configuration-State Timer */
#define FCCU_TMR_ETMR        FCCU.TMR_ETMR.R               /* Fault-Output Timer */

/* FLEXCAN */
#define CAN_2_MCR            CAN_2.MCR.R                   /* Module Configuration register */
#define CAN_2_CTRL1          CAN_2.CTRL1.R                 /* Control 1 register */
#define CAN_2_TIMER          CAN_2.TIMER.R                 /* Free Running Timer */
#define CAN_2_RXMGMASK       CAN_2.RXMGMASK.R              /* Rx Mailboxes Global Mask register */
#define CAN_2_RX14MASK       CAN_2.RX14MASK.R              /* Rx 14 Mask register */
#define CAN_2_RX15MASK       CAN_2.RX15MASK.R              /* Rx 15 Mask register */
#define CAN_2_ECR            CAN_2.ECR.R                   /* Error Counter */
#define CAN_2_ESR1           CAN_2.ESR1.R                  /* Error and Status 1 register */
#define CAN_2_IMASK2         CAN_2.IMASK2.R                /* Interrupt Masks 2 register */
#define CAN_2_IMASK1         CAN_2.IMASK1.R                /* Interrupt Masks 1 register */
#define CAN_2_IFLAG2         CAN_2.IFLAG2.R                /* Interrupt Flags 2 register */
#define CAN_2_IFLAG1         CAN_2.IFLAG1.R                /* Interrupt Flags 1 register */
#define CAN_2_CTRL2          CAN_2.CTRL2.R                 /* Control 2 register */
#define CAN_2_ESR2           CAN_2.ESR2.R                  /* Error and Status 2 register */
#define CAN_2_CRCR           CAN_2.CRCR.R                  /* CRC register */
#define CAN_2_RXFGMASK       CAN_2.RXFGMASK.R              /* Legacy Rx FIFO Global Mask register */
#define CAN_2_RXFIR          CAN_2.RXFIR.R                 /* Legacy Rx FIFO Information register */
#define CAN_2_CBT            CAN_2.CBT.R                   /* CAN Bit Timing register */
#define CAN_2_IMASK4         CAN_2.IMASK4.R                /* Interrupt Masks 4 register */
#define CAN_2_IMASK3         CAN_2.IMASK3.R                /* Interrupt Masks 3 register */
#define CAN_2_IFLAG4         CAN_2.IFLAG4.R                /* Interrupt Flags 4 register */
#define CAN_2_IFLAG3         CAN_2.IFLAG3.R                /* Interrupt Flags 3 register */
#define CAN_2_RXIMR0         CAN_2.RXIMR[0].R              /* Rx Individual Mask registers */
#define CAN_2_RXIMR1         CAN_2.RXIMR[1].R              /* Rx Individual Mask registers */
#define CAN_2_RXIMR2         CAN_2.RXIMR[2].R              /* Rx Individual Mask registers */
#define CAN_2_RXIMR3         CAN_2.RXIMR[3].R              /* Rx Individual Mask registers */
#define CAN_2_RXIMR4         CAN_2.RXIMR[4].R              /* Rx Individual Mask registers */
#define CAN_2_RXIMR5         CAN_2.RXIMR[5].R              /* Rx Individual Mask registers */
#define CAN_2_RXIMR6         CAN_2.RXIMR[6].R              /* Rx Individual Mask registers */
#define CAN_2_RXIMR7         CAN_2.RXIMR[7].R              /* Rx Individual Mask registers */
#define CAN_2_RXIMR8         CAN_2.RXIMR[8].R              /* Rx Individual Mask registers */
#define CAN_2_RXIMR9         CAN_2.RXIMR[9].R              /* Rx Individual Mask registers */
#define CAN_2_RXIMR10        CAN_2.RXIMR[10].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR11        CAN_2.RXIMR[11].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR12        CAN_2.RXIMR[12].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR13        CAN_2.RXIMR[13].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR14        CAN_2.RXIMR[14].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR15        CAN_2.RXIMR[15].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR16        CAN_2.RXIMR[16].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR17        CAN_2.RXIMR[17].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR18        CAN_2.RXIMR[18].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR19        CAN_2.RXIMR[19].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR20        CAN_2.RXIMR[20].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR21        CAN_2.RXIMR[21].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR22        CAN_2.RXIMR[22].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR23        CAN_2.RXIMR[23].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR24        CAN_2.RXIMR[24].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR25        CAN_2.RXIMR[25].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR26        CAN_2.RXIMR[26].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR27        CAN_2.RXIMR[27].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR28        CAN_2.RXIMR[28].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR29        CAN_2.RXIMR[29].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR30        CAN_2.RXIMR[30].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR31        CAN_2.RXIMR[31].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR32        CAN_2.RXIMR[32].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR33        CAN_2.RXIMR[33].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR34        CAN_2.RXIMR[34].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR35        CAN_2.RXIMR[35].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR36        CAN_2.RXIMR[36].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR37        CAN_2.RXIMR[37].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR38        CAN_2.RXIMR[38].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR39        CAN_2.RXIMR[39].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR40        CAN_2.RXIMR[40].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR41        CAN_2.RXIMR[41].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR42        CAN_2.RXIMR[42].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR43        CAN_2.RXIMR[43].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR44        CAN_2.RXIMR[44].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR45        CAN_2.RXIMR[45].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR46        CAN_2.RXIMR[46].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR47        CAN_2.RXIMR[47].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR48        CAN_2.RXIMR[48].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR49        CAN_2.RXIMR[49].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR50        CAN_2.RXIMR[50].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR51        CAN_2.RXIMR[51].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR52        CAN_2.RXIMR[52].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR53        CAN_2.RXIMR[53].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR54        CAN_2.RXIMR[54].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR55        CAN_2.RXIMR[55].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR56        CAN_2.RXIMR[56].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR57        CAN_2.RXIMR[57].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR58        CAN_2.RXIMR[58].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR59        CAN_2.RXIMR[59].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR60        CAN_2.RXIMR[60].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR61        CAN_2.RXIMR[61].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR62        CAN_2.RXIMR[62].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR63        CAN_2.RXIMR[63].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR64        CAN_2.RXIMR[64].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR65        CAN_2.RXIMR[65].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR66        CAN_2.RXIMR[66].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR67        CAN_2.RXIMR[67].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR68        CAN_2.RXIMR[68].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR69        CAN_2.RXIMR[69].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR70        CAN_2.RXIMR[70].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR71        CAN_2.RXIMR[71].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR72        CAN_2.RXIMR[72].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR73        CAN_2.RXIMR[73].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR74        CAN_2.RXIMR[74].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR75        CAN_2.RXIMR[75].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR76        CAN_2.RXIMR[76].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR77        CAN_2.RXIMR[77].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR78        CAN_2.RXIMR[78].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR79        CAN_2.RXIMR[79].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR80        CAN_2.RXIMR[80].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR81        CAN_2.RXIMR[81].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR82        CAN_2.RXIMR[82].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR83        CAN_2.RXIMR[83].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR84        CAN_2.RXIMR[84].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR85        CAN_2.RXIMR[85].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR86        CAN_2.RXIMR[86].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR87        CAN_2.RXIMR[87].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR88        CAN_2.RXIMR[88].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR89        CAN_2.RXIMR[89].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR90        CAN_2.RXIMR[90].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR91        CAN_2.RXIMR[91].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR92        CAN_2.RXIMR[92].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR93        CAN_2.RXIMR[93].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR94        CAN_2.RXIMR[94].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR95        CAN_2.RXIMR[95].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR96        CAN_2.RXIMR[96].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR97        CAN_2.RXIMR[97].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR98        CAN_2.RXIMR[98].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR99        CAN_2.RXIMR[99].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR100       CAN_2.RXIMR[100].R            /* Rx Individual Mask registers */
#define CAN_2_RXIMR101       CAN_2.RXIMR[101].R            /* Rx Individual Mask registers */
#define CAN_2_RXIMR102       CAN_2.RXIMR[102].R            /* Rx Individual Mask registers */
#define CAN_2_RXIMR103       CAN_2.RXIMR[103].R            /* Rx Individual Mask registers */
#define CAN_2_RXIMR104       CAN_2.RXIMR[104].R            /* Rx Individual Mask registers */
#define CAN_2_RXIMR105       CAN_2.RXIMR[105].R            /* Rx Individual Mask registers */
#define CAN_2_RXIMR106       CAN_2.RXIMR[106].R            /* Rx Individual Mask registers */
#define CAN_2_RXIMR107       CAN_2.RXIMR[107].R            /* Rx Individual Mask registers */
#define CAN_2_RXIMR108       CAN_2.RXIMR[108].R            /* Rx Individual Mask registers */
#define CAN_2_RXIMR109       CAN_2.RXIMR[109].R            /* Rx Individual Mask registers */
#define CAN_2_RXIMR110       CAN_2.RXIMR[110].R            /* Rx Individual Mask registers */
#define CAN_2_RXIMR111       CAN_2.RXIMR[111].R            /* Rx Individual Mask registers */
#define CAN_2_RXIMR112       CAN_2.RXIMR[112].R            /* Rx Individual Mask registers */
#define CAN_2_RXIMR113       CAN_2.RXIMR[113].R            /* Rx Individual Mask registers */
#define CAN_2_RXIMR114       CAN_2.RXIMR[114].R            /* Rx Individual Mask registers */
#define CAN_2_RXIMR115       CAN_2.RXIMR[115].R            /* Rx Individual Mask registers */
#define CAN_2_RXIMR116       CAN_2.RXIMR[116].R            /* Rx Individual Mask registers */
#define CAN_2_RXIMR117       CAN_2.RXIMR[117].R            /* Rx Individual Mask registers */
#define CAN_2_RXIMR118       CAN_2.RXIMR[118].R            /* Rx Individual Mask registers */
#define CAN_2_RXIMR119       CAN_2.RXIMR[119].R            /* Rx Individual Mask registers */
#define CAN_2_RXIMR120       CAN_2.RXIMR[120].R            /* Rx Individual Mask registers */
#define CAN_2_RXIMR121       CAN_2.RXIMR[121].R            /* Rx Individual Mask registers */
#define CAN_2_RXIMR122       CAN_2.RXIMR[122].R            /* Rx Individual Mask registers */
#define CAN_2_RXIMR123       CAN_2.RXIMR[123].R            /* Rx Individual Mask registers */
#define CAN_2_RXIMR124       CAN_2.RXIMR[124].R            /* Rx Individual Mask registers */
#define CAN_2_RXIMR125       CAN_2.RXIMR[125].R            /* Rx Individual Mask registers */
#define CAN_2_RXIMR126       CAN_2.RXIMR[126].R            /* Rx Individual Mask registers */
#define CAN_2_RXIMR127       CAN_2.RXIMR[127].R            /* Rx Individual Mask registers */
#define CAN_2_MECR           CAN_2.MECR.R                  /* Memory Error Control register */
#define CAN_2_ERRIAR         CAN_2.ERRIAR.R                /* Error Injection Address register */
#define CAN_2_ERRIDPR        CAN_2.ERRIDPR.R               /* Error Injection Data Pattern register */
#define CAN_2_ERRIPPR        CAN_2.ERRIPPR.R               /* Error Injection Parity Pattern register */
#define CAN_2_RERRAR         CAN_2.RERRAR.R                /* Error Report Address register */
#define CAN_2_RERRDR         CAN_2.RERRDR.R                /* Error Report Data register */
#define CAN_2_RERRSYNR       CAN_2.RERRSYNR.R              /* Error Report Syndrome register */
#define CAN_2_ERRSR          CAN_2.ERRSR.R                 /* Error Status register */
#define CAN_2_EPRS           CAN_2.EPRS.R                  /* Enhanced CAN Bit Timing Prescalers */
#define CAN_2_ENCBT          CAN_2.ENCBT.R                 /* Enhanced Nominal CAN Bit Timing */
#define CAN_2_EDCBT          CAN_2.EDCBT.R                 /* Enhanced Data Phase CAN bit Timing */
#define CAN_2_ETDC           CAN_2.ETDC.R                  /* Enhanced Transceiver Delay Compensation */
#define CAN_2_FDCTRL         CAN_2.FDCTRL.R                /* CAN FD Control register */
#define CAN_2_FDCBT          CAN_2.FDCBT.R                 /* CAN FD Bit Timing register */
#define CAN_2_FDCRC          CAN_2.FDCRC.R                 /* CAN FD CRC register */
#define CAN_2_ERFCR          CAN_2.ERFCR.R                 /* Enhanced Rx FIFO Control register */
#define CAN_2_ERFIER         CAN_2.ERFIER.R                /* Enhanced Rx FIFO Interrupt Enable register */
#define CAN_2_ERFSR          CAN_2.ERFSR.R                 /* Enhanced Rx FIFO Status register */
#define CAN_2_HR_TIME_STAMP0 CAN_2.HR_TIME_STAMP[0].R      /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP1 CAN_2.HR_TIME_STAMP[1].R      /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP2 CAN_2.HR_TIME_STAMP[2].R      /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP3 CAN_2.HR_TIME_STAMP[3].R      /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP4 CAN_2.HR_TIME_STAMP[4].R      /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP5 CAN_2.HR_TIME_STAMP[5].R      /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP6 CAN_2.HR_TIME_STAMP[6].R      /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP7 CAN_2.HR_TIME_STAMP[7].R      /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP8 CAN_2.HR_TIME_STAMP[8].R      /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP9 CAN_2.HR_TIME_STAMP[9].R      /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP10 CAN_2.HR_TIME_STAMP[10].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP11 CAN_2.HR_TIME_STAMP[11].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP12 CAN_2.HR_TIME_STAMP[12].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP13 CAN_2.HR_TIME_STAMP[13].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP14 CAN_2.HR_TIME_STAMP[14].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP15 CAN_2.HR_TIME_STAMP[15].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP16 CAN_2.HR_TIME_STAMP[16].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP17 CAN_2.HR_TIME_STAMP[17].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP18 CAN_2.HR_TIME_STAMP[18].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP19 CAN_2.HR_TIME_STAMP[19].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP20 CAN_2.HR_TIME_STAMP[20].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP21 CAN_2.HR_TIME_STAMP[21].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP22 CAN_2.HR_TIME_STAMP[22].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP23 CAN_2.HR_TIME_STAMP[23].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP24 CAN_2.HR_TIME_STAMP[24].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP25 CAN_2.HR_TIME_STAMP[25].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP26 CAN_2.HR_TIME_STAMP[26].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP27 CAN_2.HR_TIME_STAMP[27].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP28 CAN_2.HR_TIME_STAMP[28].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP29 CAN_2.HR_TIME_STAMP[29].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP30 CAN_2.HR_TIME_STAMP[30].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP31 CAN_2.HR_TIME_STAMP[31].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP32 CAN_2.HR_TIME_STAMP[32].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP33 CAN_2.HR_TIME_STAMP[33].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP34 CAN_2.HR_TIME_STAMP[34].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP35 CAN_2.HR_TIME_STAMP[35].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP36 CAN_2.HR_TIME_STAMP[36].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP37 CAN_2.HR_TIME_STAMP[37].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP38 CAN_2.HR_TIME_STAMP[38].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP39 CAN_2.HR_TIME_STAMP[39].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP40 CAN_2.HR_TIME_STAMP[40].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP41 CAN_2.HR_TIME_STAMP[41].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP42 CAN_2.HR_TIME_STAMP[42].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP43 CAN_2.HR_TIME_STAMP[43].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP44 CAN_2.HR_TIME_STAMP[44].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP45 CAN_2.HR_TIME_STAMP[45].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP46 CAN_2.HR_TIME_STAMP[46].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP47 CAN_2.HR_TIME_STAMP[47].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP48 CAN_2.HR_TIME_STAMP[48].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP49 CAN_2.HR_TIME_STAMP[49].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP50 CAN_2.HR_TIME_STAMP[50].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP51 CAN_2.HR_TIME_STAMP[51].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP52 CAN_2.HR_TIME_STAMP[52].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP53 CAN_2.HR_TIME_STAMP[53].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP54 CAN_2.HR_TIME_STAMP[54].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP55 CAN_2.HR_TIME_STAMP[55].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP56 CAN_2.HR_TIME_STAMP[56].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP57 CAN_2.HR_TIME_STAMP[57].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP58 CAN_2.HR_TIME_STAMP[58].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP59 CAN_2.HR_TIME_STAMP[59].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP60 CAN_2.HR_TIME_STAMP[60].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP61 CAN_2.HR_TIME_STAMP[61].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP62 CAN_2.HR_TIME_STAMP[62].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP63 CAN_2.HR_TIME_STAMP[63].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP64 CAN_2.HR_TIME_STAMP[64].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP65 CAN_2.HR_TIME_STAMP[65].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP66 CAN_2.HR_TIME_STAMP[66].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP67 CAN_2.HR_TIME_STAMP[67].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP68 CAN_2.HR_TIME_STAMP[68].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP69 CAN_2.HR_TIME_STAMP[69].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP70 CAN_2.HR_TIME_STAMP[70].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP71 CAN_2.HR_TIME_STAMP[71].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP72 CAN_2.HR_TIME_STAMP[72].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP73 CAN_2.HR_TIME_STAMP[73].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP74 CAN_2.HR_TIME_STAMP[74].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP75 CAN_2.HR_TIME_STAMP[75].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP76 CAN_2.HR_TIME_STAMP[76].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP77 CAN_2.HR_TIME_STAMP[77].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP78 CAN_2.HR_TIME_STAMP[78].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP79 CAN_2.HR_TIME_STAMP[79].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP80 CAN_2.HR_TIME_STAMP[80].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP81 CAN_2.HR_TIME_STAMP[81].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP82 CAN_2.HR_TIME_STAMP[82].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP83 CAN_2.HR_TIME_STAMP[83].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP84 CAN_2.HR_TIME_STAMP[84].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP85 CAN_2.HR_TIME_STAMP[85].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP86 CAN_2.HR_TIME_STAMP[86].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP87 CAN_2.HR_TIME_STAMP[87].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP88 CAN_2.HR_TIME_STAMP[88].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP89 CAN_2.HR_TIME_STAMP[89].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP90 CAN_2.HR_TIME_STAMP[90].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP91 CAN_2.HR_TIME_STAMP[91].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP92 CAN_2.HR_TIME_STAMP[92].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP93 CAN_2.HR_TIME_STAMP[93].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP94 CAN_2.HR_TIME_STAMP[94].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP95 CAN_2.HR_TIME_STAMP[95].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP96 CAN_2.HR_TIME_STAMP[96].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP97 CAN_2.HR_TIME_STAMP[97].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP98 CAN_2.HR_TIME_STAMP[98].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP99 CAN_2.HR_TIME_STAMP[99].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP100 CAN_2.HR_TIME_STAMP[100].R  /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP101 CAN_2.HR_TIME_STAMP[101].R  /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP102 CAN_2.HR_TIME_STAMP[102].R  /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP103 CAN_2.HR_TIME_STAMP[103].R  /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP104 CAN_2.HR_TIME_STAMP[104].R  /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP105 CAN_2.HR_TIME_STAMP[105].R  /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP106 CAN_2.HR_TIME_STAMP[106].R  /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP107 CAN_2.HR_TIME_STAMP[107].R  /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP108 CAN_2.HR_TIME_STAMP[108].R  /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP109 CAN_2.HR_TIME_STAMP[109].R  /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP110 CAN_2.HR_TIME_STAMP[110].R  /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP111 CAN_2.HR_TIME_STAMP[111].R  /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP112 CAN_2.HR_TIME_STAMP[112].R  /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP113 CAN_2.HR_TIME_STAMP[113].R  /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP114 CAN_2.HR_TIME_STAMP[114].R  /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP115 CAN_2.HR_TIME_STAMP[115].R  /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP116 CAN_2.HR_TIME_STAMP[116].R  /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP117 CAN_2.HR_TIME_STAMP[117].R  /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP118 CAN_2.HR_TIME_STAMP[118].R  /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP119 CAN_2.HR_TIME_STAMP[119].R  /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP120 CAN_2.HR_TIME_STAMP[120].R  /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP121 CAN_2.HR_TIME_STAMP[121].R  /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP122 CAN_2.HR_TIME_STAMP[122].R  /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP123 CAN_2.HR_TIME_STAMP[123].R  /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP124 CAN_2.HR_TIME_STAMP[124].R  /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP125 CAN_2.HR_TIME_STAMP[125].R  /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP126 CAN_2.HR_TIME_STAMP[126].R  /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP127 CAN_2.HR_TIME_STAMP[127].R  /* High Resolution Time Stamp */
#define CAN_2_ERFFEL0        CAN_2.ERFFEL[0].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL1        CAN_2.ERFFEL[1].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL2        CAN_2.ERFFEL[2].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL3        CAN_2.ERFFEL[3].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL4        CAN_2.ERFFEL[4].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL5        CAN_2.ERFFEL[5].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL6        CAN_2.ERFFEL[6].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL7        CAN_2.ERFFEL[7].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL8        CAN_2.ERFFEL[8].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL9        CAN_2.ERFFEL[9].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL10       CAN_2.ERFFEL[10].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL11       CAN_2.ERFFEL[11].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL12       CAN_2.ERFFEL[12].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL13       CAN_2.ERFFEL[13].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL14       CAN_2.ERFFEL[14].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL15       CAN_2.ERFFEL[15].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL16       CAN_2.ERFFEL[16].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL17       CAN_2.ERFFEL[17].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL18       CAN_2.ERFFEL[18].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL19       CAN_2.ERFFEL[19].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL20       CAN_2.ERFFEL[20].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL21       CAN_2.ERFFEL[21].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL22       CAN_2.ERFFEL[22].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL23       CAN_2.ERFFEL[23].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL24       CAN_2.ERFFEL[24].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL25       CAN_2.ERFFEL[25].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL26       CAN_2.ERFFEL[26].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL27       CAN_2.ERFFEL[27].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL28       CAN_2.ERFFEL[28].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL29       CAN_2.ERFFEL[29].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL30       CAN_2.ERFFEL[30].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL31       CAN_2.ERFFEL[31].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL32       CAN_2.ERFFEL[32].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL33       CAN_2.ERFFEL[33].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL34       CAN_2.ERFFEL[34].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL35       CAN_2.ERFFEL[35].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL36       CAN_2.ERFFEL[36].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL37       CAN_2.ERFFEL[37].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL38       CAN_2.ERFFEL[38].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL39       CAN_2.ERFFEL[39].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL40       CAN_2.ERFFEL[40].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL41       CAN_2.ERFFEL[41].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL42       CAN_2.ERFFEL[42].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL43       CAN_2.ERFFEL[43].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL44       CAN_2.ERFFEL[44].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL45       CAN_2.ERFFEL[45].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL46       CAN_2.ERFFEL[46].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL47       CAN_2.ERFFEL[47].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL48       CAN_2.ERFFEL[48].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL49       CAN_2.ERFFEL[49].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL50       CAN_2.ERFFEL[50].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL51       CAN_2.ERFFEL[51].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL52       CAN_2.ERFFEL[52].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL53       CAN_2.ERFFEL[53].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL54       CAN_2.ERFFEL[54].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL55       CAN_2.ERFFEL[55].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL56       CAN_2.ERFFEL[56].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL57       CAN_2.ERFFEL[57].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL58       CAN_2.ERFFEL[58].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL59       CAN_2.ERFFEL[59].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL60       CAN_2.ERFFEL[60].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL61       CAN_2.ERFFEL[61].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL62       CAN_2.ERFFEL[62].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL63       CAN_2.ERFFEL[63].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL64       CAN_2.ERFFEL[64].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL65       CAN_2.ERFFEL[65].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL66       CAN_2.ERFFEL[66].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL67       CAN_2.ERFFEL[67].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL68       CAN_2.ERFFEL[68].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL69       CAN_2.ERFFEL[69].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL70       CAN_2.ERFFEL[70].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL71       CAN_2.ERFFEL[71].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL72       CAN_2.ERFFEL[72].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL73       CAN_2.ERFFEL[73].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL74       CAN_2.ERFFEL[74].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL75       CAN_2.ERFFEL[75].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL76       CAN_2.ERFFEL[76].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL77       CAN_2.ERFFEL[77].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL78       CAN_2.ERFFEL[78].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL79       CAN_2.ERFFEL[79].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL80       CAN_2.ERFFEL[80].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL81       CAN_2.ERFFEL[81].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL82       CAN_2.ERFFEL[82].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL83       CAN_2.ERFFEL[83].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL84       CAN_2.ERFFEL[84].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL85       CAN_2.ERFFEL[85].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL86       CAN_2.ERFFEL[86].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL87       CAN_2.ERFFEL[87].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL88       CAN_2.ERFFEL[88].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL89       CAN_2.ERFFEL[89].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL90       CAN_2.ERFFEL[90].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL91       CAN_2.ERFFEL[91].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL92       CAN_2.ERFFEL[92].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL93       CAN_2.ERFFEL[93].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL94       CAN_2.ERFFEL[94].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL95       CAN_2.ERFFEL[95].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL96       CAN_2.ERFFEL[96].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL97       CAN_2.ERFFEL[97].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL98       CAN_2.ERFFEL[98].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL99       CAN_2.ERFFEL[99].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL100      CAN_2.ERFFEL[100].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL101      CAN_2.ERFFEL[101].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL102      CAN_2.ERFFEL[102].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL103      CAN_2.ERFFEL[103].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL104      CAN_2.ERFFEL[104].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL105      CAN_2.ERFFEL[105].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL106      CAN_2.ERFFEL[106].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL107      CAN_2.ERFFEL[107].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL108      CAN_2.ERFFEL[108].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL109      CAN_2.ERFFEL[109].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL110      CAN_2.ERFFEL[110].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL111      CAN_2.ERFFEL[111].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL112      CAN_2.ERFFEL[112].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL113      CAN_2.ERFFEL[113].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL114      CAN_2.ERFFEL[114].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL115      CAN_2.ERFFEL[115].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL116      CAN_2.ERFFEL[116].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL117      CAN_2.ERFFEL[117].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL118      CAN_2.ERFFEL[118].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL119      CAN_2.ERFFEL[119].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL120      CAN_2.ERFFEL[120].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL121      CAN_2.ERFFEL[121].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL122      CAN_2.ERFFEL[122].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL123      CAN_2.ERFFEL[123].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL124      CAN_2.ERFFEL[124].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL125      CAN_2.ERFFEL[125].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL126      CAN_2.ERFFEL[126].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_2_ERFFEL127      CAN_2.ERFFEL[127].R           /* Enhanced Rx FIFO Filter Element */

#define CAN_3_MCR            CAN_3.MCR.R                   /* Module Configuration register */
#define CAN_3_CTRL1          CAN_3.CTRL1.R                 /* Control 1 register */
#define CAN_3_TIMER          CAN_3.TIMER.R                 /* Free Running Timer */
#define CAN_3_RXMGMASK       CAN_3.RXMGMASK.R              /* Rx Mailboxes Global Mask register */
#define CAN_3_RX14MASK       CAN_3.RX14MASK.R              /* Rx 14 Mask register */
#define CAN_3_RX15MASK       CAN_3.RX15MASK.R              /* Rx 15 Mask register */
#define CAN_3_ECR            CAN_3.ECR.R                   /* Error Counter */
#define CAN_3_ESR1           CAN_3.ESR1.R                  /* Error and Status 1 register */
#define CAN_3_IMASK2         CAN_3.IMASK2.R                /* Interrupt Masks 2 register */
#define CAN_3_IMASK1         CAN_3.IMASK1.R                /* Interrupt Masks 1 register */
#define CAN_3_IFLAG2         CAN_3.IFLAG2.R                /* Interrupt Flags 2 register */
#define CAN_3_IFLAG1         CAN_3.IFLAG1.R                /* Interrupt Flags 1 register */
#define CAN_3_CTRL2          CAN_3.CTRL2.R                 /* Control 2 register */
#define CAN_3_ESR2           CAN_3.ESR2.R                  /* Error and Status 2 register */
#define CAN_3_CRCR           CAN_3.CRCR.R                  /* CRC register */
#define CAN_3_RXFGMASK       CAN_3.RXFGMASK.R              /* Legacy Rx FIFO Global Mask register */
#define CAN_3_RXFIR          CAN_3.RXFIR.R                 /* Legacy Rx FIFO Information register */
#define CAN_3_CBT            CAN_3.CBT.R                   /* CAN Bit Timing register */
#define CAN_3_IMASK4         CAN_3.IMASK4.R                /* Interrupt Masks 4 register */
#define CAN_3_IMASK3         CAN_3.IMASK3.R                /* Interrupt Masks 3 register */
#define CAN_3_IFLAG4         CAN_3.IFLAG4.R                /* Interrupt Flags 4 register */
#define CAN_3_IFLAG3         CAN_3.IFLAG3.R                /* Interrupt Flags 3 register */
#define CAN_3_RXIMR0         CAN_3.RXIMR[0].R              /* Rx Individual Mask registers */
#define CAN_3_RXIMR1         CAN_3.RXIMR[1].R              /* Rx Individual Mask registers */
#define CAN_3_RXIMR2         CAN_3.RXIMR[2].R              /* Rx Individual Mask registers */
#define CAN_3_RXIMR3         CAN_3.RXIMR[3].R              /* Rx Individual Mask registers */
#define CAN_3_RXIMR4         CAN_3.RXIMR[4].R              /* Rx Individual Mask registers */
#define CAN_3_RXIMR5         CAN_3.RXIMR[5].R              /* Rx Individual Mask registers */
#define CAN_3_RXIMR6         CAN_3.RXIMR[6].R              /* Rx Individual Mask registers */
#define CAN_3_RXIMR7         CAN_3.RXIMR[7].R              /* Rx Individual Mask registers */
#define CAN_3_RXIMR8         CAN_3.RXIMR[8].R              /* Rx Individual Mask registers */
#define CAN_3_RXIMR9         CAN_3.RXIMR[9].R              /* Rx Individual Mask registers */
#define CAN_3_RXIMR10        CAN_3.RXIMR[10].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR11        CAN_3.RXIMR[11].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR12        CAN_3.RXIMR[12].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR13        CAN_3.RXIMR[13].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR14        CAN_3.RXIMR[14].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR15        CAN_3.RXIMR[15].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR16        CAN_3.RXIMR[16].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR17        CAN_3.RXIMR[17].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR18        CAN_3.RXIMR[18].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR19        CAN_3.RXIMR[19].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR20        CAN_3.RXIMR[20].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR21        CAN_3.RXIMR[21].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR22        CAN_3.RXIMR[22].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR23        CAN_3.RXIMR[23].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR24        CAN_3.RXIMR[24].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR25        CAN_3.RXIMR[25].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR26        CAN_3.RXIMR[26].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR27        CAN_3.RXIMR[27].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR28        CAN_3.RXIMR[28].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR29        CAN_3.RXIMR[29].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR30        CAN_3.RXIMR[30].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR31        CAN_3.RXIMR[31].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR32        CAN_3.RXIMR[32].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR33        CAN_3.RXIMR[33].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR34        CAN_3.RXIMR[34].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR35        CAN_3.RXIMR[35].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR36        CAN_3.RXIMR[36].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR37        CAN_3.RXIMR[37].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR38        CAN_3.RXIMR[38].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR39        CAN_3.RXIMR[39].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR40        CAN_3.RXIMR[40].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR41        CAN_3.RXIMR[41].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR42        CAN_3.RXIMR[42].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR43        CAN_3.RXIMR[43].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR44        CAN_3.RXIMR[44].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR45        CAN_3.RXIMR[45].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR46        CAN_3.RXIMR[46].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR47        CAN_3.RXIMR[47].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR48        CAN_3.RXIMR[48].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR49        CAN_3.RXIMR[49].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR50        CAN_3.RXIMR[50].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR51        CAN_3.RXIMR[51].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR52        CAN_3.RXIMR[52].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR53        CAN_3.RXIMR[53].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR54        CAN_3.RXIMR[54].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR55        CAN_3.RXIMR[55].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR56        CAN_3.RXIMR[56].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR57        CAN_3.RXIMR[57].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR58        CAN_3.RXIMR[58].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR59        CAN_3.RXIMR[59].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR60        CAN_3.RXIMR[60].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR61        CAN_3.RXIMR[61].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR62        CAN_3.RXIMR[62].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR63        CAN_3.RXIMR[63].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR64        CAN_3.RXIMR[64].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR65        CAN_3.RXIMR[65].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR66        CAN_3.RXIMR[66].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR67        CAN_3.RXIMR[67].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR68        CAN_3.RXIMR[68].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR69        CAN_3.RXIMR[69].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR70        CAN_3.RXIMR[70].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR71        CAN_3.RXIMR[71].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR72        CAN_3.RXIMR[72].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR73        CAN_3.RXIMR[73].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR74        CAN_3.RXIMR[74].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR75        CAN_3.RXIMR[75].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR76        CAN_3.RXIMR[76].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR77        CAN_3.RXIMR[77].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR78        CAN_3.RXIMR[78].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR79        CAN_3.RXIMR[79].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR80        CAN_3.RXIMR[80].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR81        CAN_3.RXIMR[81].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR82        CAN_3.RXIMR[82].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR83        CAN_3.RXIMR[83].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR84        CAN_3.RXIMR[84].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR85        CAN_3.RXIMR[85].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR86        CAN_3.RXIMR[86].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR87        CAN_3.RXIMR[87].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR88        CAN_3.RXIMR[88].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR89        CAN_3.RXIMR[89].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR90        CAN_3.RXIMR[90].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR91        CAN_3.RXIMR[91].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR92        CAN_3.RXIMR[92].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR93        CAN_3.RXIMR[93].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR94        CAN_3.RXIMR[94].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR95        CAN_3.RXIMR[95].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR96        CAN_3.RXIMR[96].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR97        CAN_3.RXIMR[97].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR98        CAN_3.RXIMR[98].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR99        CAN_3.RXIMR[99].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR100       CAN_3.RXIMR[100].R            /* Rx Individual Mask registers */
#define CAN_3_RXIMR101       CAN_3.RXIMR[101].R            /* Rx Individual Mask registers */
#define CAN_3_RXIMR102       CAN_3.RXIMR[102].R            /* Rx Individual Mask registers */
#define CAN_3_RXIMR103       CAN_3.RXIMR[103].R            /* Rx Individual Mask registers */
#define CAN_3_RXIMR104       CAN_3.RXIMR[104].R            /* Rx Individual Mask registers */
#define CAN_3_RXIMR105       CAN_3.RXIMR[105].R            /* Rx Individual Mask registers */
#define CAN_3_RXIMR106       CAN_3.RXIMR[106].R            /* Rx Individual Mask registers */
#define CAN_3_RXIMR107       CAN_3.RXIMR[107].R            /* Rx Individual Mask registers */
#define CAN_3_RXIMR108       CAN_3.RXIMR[108].R            /* Rx Individual Mask registers */
#define CAN_3_RXIMR109       CAN_3.RXIMR[109].R            /* Rx Individual Mask registers */
#define CAN_3_RXIMR110       CAN_3.RXIMR[110].R            /* Rx Individual Mask registers */
#define CAN_3_RXIMR111       CAN_3.RXIMR[111].R            /* Rx Individual Mask registers */
#define CAN_3_RXIMR112       CAN_3.RXIMR[112].R            /* Rx Individual Mask registers */
#define CAN_3_RXIMR113       CAN_3.RXIMR[113].R            /* Rx Individual Mask registers */
#define CAN_3_RXIMR114       CAN_3.RXIMR[114].R            /* Rx Individual Mask registers */
#define CAN_3_RXIMR115       CAN_3.RXIMR[115].R            /* Rx Individual Mask registers */
#define CAN_3_RXIMR116       CAN_3.RXIMR[116].R            /* Rx Individual Mask registers */
#define CAN_3_RXIMR117       CAN_3.RXIMR[117].R            /* Rx Individual Mask registers */
#define CAN_3_RXIMR118       CAN_3.RXIMR[118].R            /* Rx Individual Mask registers */
#define CAN_3_RXIMR119       CAN_3.RXIMR[119].R            /* Rx Individual Mask registers */
#define CAN_3_RXIMR120       CAN_3.RXIMR[120].R            /* Rx Individual Mask registers */
#define CAN_3_RXIMR121       CAN_3.RXIMR[121].R            /* Rx Individual Mask registers */
#define CAN_3_RXIMR122       CAN_3.RXIMR[122].R            /* Rx Individual Mask registers */
#define CAN_3_RXIMR123       CAN_3.RXIMR[123].R            /* Rx Individual Mask registers */
#define CAN_3_RXIMR124       CAN_3.RXIMR[124].R            /* Rx Individual Mask registers */
#define CAN_3_RXIMR125       CAN_3.RXIMR[125].R            /* Rx Individual Mask registers */
#define CAN_3_RXIMR126       CAN_3.RXIMR[126].R            /* Rx Individual Mask registers */
#define CAN_3_RXIMR127       CAN_3.RXIMR[127].R            /* Rx Individual Mask registers */
#define CAN_3_MECR           CAN_3.MECR.R                  /* Memory Error Control register */
#define CAN_3_ERRIAR         CAN_3.ERRIAR.R                /* Error Injection Address register */
#define CAN_3_ERRIDPR        CAN_3.ERRIDPR.R               /* Error Injection Data Pattern register */
#define CAN_3_ERRIPPR        CAN_3.ERRIPPR.R               /* Error Injection Parity Pattern register */
#define CAN_3_RERRAR         CAN_3.RERRAR.R                /* Error Report Address register */
#define CAN_3_RERRDR         CAN_3.RERRDR.R                /* Error Report Data register */
#define CAN_3_RERRSYNR       CAN_3.RERRSYNR.R              /* Error Report Syndrome register */
#define CAN_3_ERRSR          CAN_3.ERRSR.R                 /* Error Status register */
#define CAN_3_EPRS           CAN_3.EPRS.R                  /* Enhanced CAN Bit Timing Prescalers */
#define CAN_3_ENCBT          CAN_3.ENCBT.R                 /* Enhanced Nominal CAN Bit Timing */
#define CAN_3_EDCBT          CAN_3.EDCBT.R                 /* Enhanced Data Phase CAN bit Timing */
#define CAN_3_ETDC           CAN_3.ETDC.R                  /* Enhanced Transceiver Delay Compensation */
#define CAN_3_FDCTRL         CAN_3.FDCTRL.R                /* CAN FD Control register */
#define CAN_3_FDCBT          CAN_3.FDCBT.R                 /* CAN FD Bit Timing register */
#define CAN_3_FDCRC          CAN_3.FDCRC.R                 /* CAN FD CRC register */
#define CAN_3_ERFCR          CAN_3.ERFCR.R                 /* Enhanced Rx FIFO Control register */
#define CAN_3_ERFIER         CAN_3.ERFIER.R                /* Enhanced Rx FIFO Interrupt Enable register */
#define CAN_3_ERFSR          CAN_3.ERFSR.R                 /* Enhanced Rx FIFO Status register */
#define CAN_3_HR_TIME_STAMP0 CAN_3.HR_TIME_STAMP[0].R      /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP1 CAN_3.HR_TIME_STAMP[1].R      /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP2 CAN_3.HR_TIME_STAMP[2].R      /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP3 CAN_3.HR_TIME_STAMP[3].R      /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP4 CAN_3.HR_TIME_STAMP[4].R      /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP5 CAN_3.HR_TIME_STAMP[5].R      /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP6 CAN_3.HR_TIME_STAMP[6].R      /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP7 CAN_3.HR_TIME_STAMP[7].R      /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP8 CAN_3.HR_TIME_STAMP[8].R      /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP9 CAN_3.HR_TIME_STAMP[9].R      /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP10 CAN_3.HR_TIME_STAMP[10].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP11 CAN_3.HR_TIME_STAMP[11].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP12 CAN_3.HR_TIME_STAMP[12].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP13 CAN_3.HR_TIME_STAMP[13].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP14 CAN_3.HR_TIME_STAMP[14].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP15 CAN_3.HR_TIME_STAMP[15].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP16 CAN_3.HR_TIME_STAMP[16].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP17 CAN_3.HR_TIME_STAMP[17].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP18 CAN_3.HR_TIME_STAMP[18].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP19 CAN_3.HR_TIME_STAMP[19].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP20 CAN_3.HR_TIME_STAMP[20].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP21 CAN_3.HR_TIME_STAMP[21].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP22 CAN_3.HR_TIME_STAMP[22].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP23 CAN_3.HR_TIME_STAMP[23].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP24 CAN_3.HR_TIME_STAMP[24].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP25 CAN_3.HR_TIME_STAMP[25].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP26 CAN_3.HR_TIME_STAMP[26].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP27 CAN_3.HR_TIME_STAMP[27].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP28 CAN_3.HR_TIME_STAMP[28].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP29 CAN_3.HR_TIME_STAMP[29].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP30 CAN_3.HR_TIME_STAMP[30].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP31 CAN_3.HR_TIME_STAMP[31].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP32 CAN_3.HR_TIME_STAMP[32].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP33 CAN_3.HR_TIME_STAMP[33].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP34 CAN_3.HR_TIME_STAMP[34].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP35 CAN_3.HR_TIME_STAMP[35].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP36 CAN_3.HR_TIME_STAMP[36].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP37 CAN_3.HR_TIME_STAMP[37].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP38 CAN_3.HR_TIME_STAMP[38].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP39 CAN_3.HR_TIME_STAMP[39].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP40 CAN_3.HR_TIME_STAMP[40].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP41 CAN_3.HR_TIME_STAMP[41].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP42 CAN_3.HR_TIME_STAMP[42].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP43 CAN_3.HR_TIME_STAMP[43].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP44 CAN_3.HR_TIME_STAMP[44].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP45 CAN_3.HR_TIME_STAMP[45].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP46 CAN_3.HR_TIME_STAMP[46].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP47 CAN_3.HR_TIME_STAMP[47].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP48 CAN_3.HR_TIME_STAMP[48].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP49 CAN_3.HR_TIME_STAMP[49].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP50 CAN_3.HR_TIME_STAMP[50].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP51 CAN_3.HR_TIME_STAMP[51].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP52 CAN_3.HR_TIME_STAMP[52].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP53 CAN_3.HR_TIME_STAMP[53].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP54 CAN_3.HR_TIME_STAMP[54].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP55 CAN_3.HR_TIME_STAMP[55].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP56 CAN_3.HR_TIME_STAMP[56].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP57 CAN_3.HR_TIME_STAMP[57].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP58 CAN_3.HR_TIME_STAMP[58].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP59 CAN_3.HR_TIME_STAMP[59].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP60 CAN_3.HR_TIME_STAMP[60].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP61 CAN_3.HR_TIME_STAMP[61].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP62 CAN_3.HR_TIME_STAMP[62].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP63 CAN_3.HR_TIME_STAMP[63].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP64 CAN_3.HR_TIME_STAMP[64].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP65 CAN_3.HR_TIME_STAMP[65].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP66 CAN_3.HR_TIME_STAMP[66].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP67 CAN_3.HR_TIME_STAMP[67].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP68 CAN_3.HR_TIME_STAMP[68].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP69 CAN_3.HR_TIME_STAMP[69].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP70 CAN_3.HR_TIME_STAMP[70].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP71 CAN_3.HR_TIME_STAMP[71].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP72 CAN_3.HR_TIME_STAMP[72].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP73 CAN_3.HR_TIME_STAMP[73].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP74 CAN_3.HR_TIME_STAMP[74].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP75 CAN_3.HR_TIME_STAMP[75].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP76 CAN_3.HR_TIME_STAMP[76].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP77 CAN_3.HR_TIME_STAMP[77].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP78 CAN_3.HR_TIME_STAMP[78].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP79 CAN_3.HR_TIME_STAMP[79].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP80 CAN_3.HR_TIME_STAMP[80].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP81 CAN_3.HR_TIME_STAMP[81].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP82 CAN_3.HR_TIME_STAMP[82].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP83 CAN_3.HR_TIME_STAMP[83].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP84 CAN_3.HR_TIME_STAMP[84].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP85 CAN_3.HR_TIME_STAMP[85].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP86 CAN_3.HR_TIME_STAMP[86].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP87 CAN_3.HR_TIME_STAMP[87].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP88 CAN_3.HR_TIME_STAMP[88].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP89 CAN_3.HR_TIME_STAMP[89].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP90 CAN_3.HR_TIME_STAMP[90].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP91 CAN_3.HR_TIME_STAMP[91].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP92 CAN_3.HR_TIME_STAMP[92].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP93 CAN_3.HR_TIME_STAMP[93].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP94 CAN_3.HR_TIME_STAMP[94].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP95 CAN_3.HR_TIME_STAMP[95].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP96 CAN_3.HR_TIME_STAMP[96].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP97 CAN_3.HR_TIME_STAMP[97].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP98 CAN_3.HR_TIME_STAMP[98].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP99 CAN_3.HR_TIME_STAMP[99].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP100 CAN_3.HR_TIME_STAMP[100].R  /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP101 CAN_3.HR_TIME_STAMP[101].R  /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP102 CAN_3.HR_TIME_STAMP[102].R  /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP103 CAN_3.HR_TIME_STAMP[103].R  /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP104 CAN_3.HR_TIME_STAMP[104].R  /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP105 CAN_3.HR_TIME_STAMP[105].R  /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP106 CAN_3.HR_TIME_STAMP[106].R  /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP107 CAN_3.HR_TIME_STAMP[107].R  /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP108 CAN_3.HR_TIME_STAMP[108].R  /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP109 CAN_3.HR_TIME_STAMP[109].R  /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP110 CAN_3.HR_TIME_STAMP[110].R  /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP111 CAN_3.HR_TIME_STAMP[111].R  /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP112 CAN_3.HR_TIME_STAMP[112].R  /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP113 CAN_3.HR_TIME_STAMP[113].R  /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP114 CAN_3.HR_TIME_STAMP[114].R  /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP115 CAN_3.HR_TIME_STAMP[115].R  /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP116 CAN_3.HR_TIME_STAMP[116].R  /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP117 CAN_3.HR_TIME_STAMP[117].R  /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP118 CAN_3.HR_TIME_STAMP[118].R  /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP119 CAN_3.HR_TIME_STAMP[119].R  /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP120 CAN_3.HR_TIME_STAMP[120].R  /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP121 CAN_3.HR_TIME_STAMP[121].R  /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP122 CAN_3.HR_TIME_STAMP[122].R  /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP123 CAN_3.HR_TIME_STAMP[123].R  /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP124 CAN_3.HR_TIME_STAMP[124].R  /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP125 CAN_3.HR_TIME_STAMP[125].R  /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP126 CAN_3.HR_TIME_STAMP[126].R  /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP127 CAN_3.HR_TIME_STAMP[127].R  /* High Resolution Time Stamp */
#define CAN_3_ERFFEL0        CAN_3.ERFFEL[0].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL1        CAN_3.ERFFEL[1].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL2        CAN_3.ERFFEL[2].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL3        CAN_3.ERFFEL[3].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL4        CAN_3.ERFFEL[4].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL5        CAN_3.ERFFEL[5].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL6        CAN_3.ERFFEL[6].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL7        CAN_3.ERFFEL[7].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL8        CAN_3.ERFFEL[8].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL9        CAN_3.ERFFEL[9].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL10       CAN_3.ERFFEL[10].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL11       CAN_3.ERFFEL[11].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL12       CAN_3.ERFFEL[12].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL13       CAN_3.ERFFEL[13].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL14       CAN_3.ERFFEL[14].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL15       CAN_3.ERFFEL[15].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL16       CAN_3.ERFFEL[16].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL17       CAN_3.ERFFEL[17].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL18       CAN_3.ERFFEL[18].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL19       CAN_3.ERFFEL[19].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL20       CAN_3.ERFFEL[20].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL21       CAN_3.ERFFEL[21].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL22       CAN_3.ERFFEL[22].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL23       CAN_3.ERFFEL[23].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL24       CAN_3.ERFFEL[24].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL25       CAN_3.ERFFEL[25].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL26       CAN_3.ERFFEL[26].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL27       CAN_3.ERFFEL[27].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL28       CAN_3.ERFFEL[28].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL29       CAN_3.ERFFEL[29].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL30       CAN_3.ERFFEL[30].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL31       CAN_3.ERFFEL[31].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL32       CAN_3.ERFFEL[32].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL33       CAN_3.ERFFEL[33].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL34       CAN_3.ERFFEL[34].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL35       CAN_3.ERFFEL[35].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL36       CAN_3.ERFFEL[36].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL37       CAN_3.ERFFEL[37].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL38       CAN_3.ERFFEL[38].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL39       CAN_3.ERFFEL[39].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL40       CAN_3.ERFFEL[40].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL41       CAN_3.ERFFEL[41].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL42       CAN_3.ERFFEL[42].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL43       CAN_3.ERFFEL[43].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL44       CAN_3.ERFFEL[44].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL45       CAN_3.ERFFEL[45].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL46       CAN_3.ERFFEL[46].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL47       CAN_3.ERFFEL[47].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL48       CAN_3.ERFFEL[48].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL49       CAN_3.ERFFEL[49].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL50       CAN_3.ERFFEL[50].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL51       CAN_3.ERFFEL[51].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL52       CAN_3.ERFFEL[52].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL53       CAN_3.ERFFEL[53].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL54       CAN_3.ERFFEL[54].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL55       CAN_3.ERFFEL[55].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL56       CAN_3.ERFFEL[56].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL57       CAN_3.ERFFEL[57].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL58       CAN_3.ERFFEL[58].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL59       CAN_3.ERFFEL[59].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL60       CAN_3.ERFFEL[60].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL61       CAN_3.ERFFEL[61].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL62       CAN_3.ERFFEL[62].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL63       CAN_3.ERFFEL[63].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL64       CAN_3.ERFFEL[64].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL65       CAN_3.ERFFEL[65].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL66       CAN_3.ERFFEL[66].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL67       CAN_3.ERFFEL[67].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL68       CAN_3.ERFFEL[68].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL69       CAN_3.ERFFEL[69].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL70       CAN_3.ERFFEL[70].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL71       CAN_3.ERFFEL[71].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL72       CAN_3.ERFFEL[72].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL73       CAN_3.ERFFEL[73].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL74       CAN_3.ERFFEL[74].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL75       CAN_3.ERFFEL[75].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL76       CAN_3.ERFFEL[76].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL77       CAN_3.ERFFEL[77].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL78       CAN_3.ERFFEL[78].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL79       CAN_3.ERFFEL[79].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL80       CAN_3.ERFFEL[80].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL81       CAN_3.ERFFEL[81].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL82       CAN_3.ERFFEL[82].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL83       CAN_3.ERFFEL[83].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL84       CAN_3.ERFFEL[84].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL85       CAN_3.ERFFEL[85].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL86       CAN_3.ERFFEL[86].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL87       CAN_3.ERFFEL[87].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL88       CAN_3.ERFFEL[88].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL89       CAN_3.ERFFEL[89].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL90       CAN_3.ERFFEL[90].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL91       CAN_3.ERFFEL[91].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL92       CAN_3.ERFFEL[92].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL93       CAN_3.ERFFEL[93].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL94       CAN_3.ERFFEL[94].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL95       CAN_3.ERFFEL[95].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL96       CAN_3.ERFFEL[96].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL97       CAN_3.ERFFEL[97].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL98       CAN_3.ERFFEL[98].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL99       CAN_3.ERFFEL[99].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL100      CAN_3.ERFFEL[100].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL101      CAN_3.ERFFEL[101].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL102      CAN_3.ERFFEL[102].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL103      CAN_3.ERFFEL[103].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL104      CAN_3.ERFFEL[104].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL105      CAN_3.ERFFEL[105].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL106      CAN_3.ERFFEL[106].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL107      CAN_3.ERFFEL[107].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL108      CAN_3.ERFFEL[108].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL109      CAN_3.ERFFEL[109].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL110      CAN_3.ERFFEL[110].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL111      CAN_3.ERFFEL[111].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL112      CAN_3.ERFFEL[112].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL113      CAN_3.ERFFEL[113].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL114      CAN_3.ERFFEL[114].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL115      CAN_3.ERFFEL[115].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL116      CAN_3.ERFFEL[116].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL117      CAN_3.ERFFEL[117].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL118      CAN_3.ERFFEL[118].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL119      CAN_3.ERFFEL[119].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL120      CAN_3.ERFFEL[120].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL121      CAN_3.ERFFEL[121].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL122      CAN_3.ERFFEL[122].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL123      CAN_3.ERFFEL[123].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL124      CAN_3.ERFFEL[124].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL125      CAN_3.ERFFEL[125].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL126      CAN_3.ERFFEL[126].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_3_ERFFEL127      CAN_3.ERFFEL[127].R           /* Enhanced Rx FIFO Filter Element */

#define CAN_0_MCR            CAN_0.MCR.R                   /* Module Configuration register */
#define CAN_0_CTRL1          CAN_0.CTRL1.R                 /* Control 1 register */
#define CAN_0_TIMER          CAN_0.TIMER.R                 /* Free Running Timer */
#define CAN_0_RXMGMASK       CAN_0.RXMGMASK.R              /* Rx Mailboxes Global Mask register */
#define CAN_0_RX14MASK       CAN_0.RX14MASK.R              /* Rx 14 Mask register */
#define CAN_0_RX15MASK       CAN_0.RX15MASK.R              /* Rx 15 Mask register */
#define CAN_0_ECR            CAN_0.ECR.R                   /* Error Counter */
#define CAN_0_ESR1           CAN_0.ESR1.R                  /* Error and Status 1 register */
#define CAN_0_IMASK2         CAN_0.IMASK2.R                /* Interrupt Masks 2 register */
#define CAN_0_IMASK1         CAN_0.IMASK1.R                /* Interrupt Masks 1 register */
#define CAN_0_IFLAG2         CAN_0.IFLAG2.R                /* Interrupt Flags 2 register */
#define CAN_0_IFLAG1         CAN_0.IFLAG1.R                /* Interrupt Flags 1 register */
#define CAN_0_CTRL2          CAN_0.CTRL2.R                 /* Control 2 register */
#define CAN_0_ESR2           CAN_0.ESR2.R                  /* Error and Status 2 register */
#define CAN_0_CRCR           CAN_0.CRCR.R                  /* CRC register */
#define CAN_0_RXFGMASK       CAN_0.RXFGMASK.R              /* Legacy Rx FIFO Global Mask register */
#define CAN_0_RXFIR          CAN_0.RXFIR.R                 /* Legacy Rx FIFO Information register */
#define CAN_0_CBT            CAN_0.CBT.R                   /* CAN Bit Timing register */
#define CAN_0_IMASK4         CAN_0.IMASK4.R                /* Interrupt Masks 4 register */
#define CAN_0_IMASK3         CAN_0.IMASK3.R                /* Interrupt Masks 3 register */
#define CAN_0_IFLAG4         CAN_0.IFLAG4.R                /* Interrupt Flags 4 register */
#define CAN_0_IFLAG3         CAN_0.IFLAG3.R                /* Interrupt Flags 3 register */
#define CAN_0_RXIMR0         CAN_0.RXIMR[0].R              /* Rx Individual Mask registers */
#define CAN_0_RXIMR1         CAN_0.RXIMR[1].R              /* Rx Individual Mask registers */
#define CAN_0_RXIMR2         CAN_0.RXIMR[2].R              /* Rx Individual Mask registers */
#define CAN_0_RXIMR3         CAN_0.RXIMR[3].R              /* Rx Individual Mask registers */
#define CAN_0_RXIMR4         CAN_0.RXIMR[4].R              /* Rx Individual Mask registers */
#define CAN_0_RXIMR5         CAN_0.RXIMR[5].R              /* Rx Individual Mask registers */
#define CAN_0_RXIMR6         CAN_0.RXIMR[6].R              /* Rx Individual Mask registers */
#define CAN_0_RXIMR7         CAN_0.RXIMR[7].R              /* Rx Individual Mask registers */
#define CAN_0_RXIMR8         CAN_0.RXIMR[8].R              /* Rx Individual Mask registers */
#define CAN_0_RXIMR9         CAN_0.RXIMR[9].R              /* Rx Individual Mask registers */
#define CAN_0_RXIMR10        CAN_0.RXIMR[10].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR11        CAN_0.RXIMR[11].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR12        CAN_0.RXIMR[12].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR13        CAN_0.RXIMR[13].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR14        CAN_0.RXIMR[14].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR15        CAN_0.RXIMR[15].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR16        CAN_0.RXIMR[16].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR17        CAN_0.RXIMR[17].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR18        CAN_0.RXIMR[18].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR19        CAN_0.RXIMR[19].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR20        CAN_0.RXIMR[20].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR21        CAN_0.RXIMR[21].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR22        CAN_0.RXIMR[22].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR23        CAN_0.RXIMR[23].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR24        CAN_0.RXIMR[24].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR25        CAN_0.RXIMR[25].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR26        CAN_0.RXIMR[26].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR27        CAN_0.RXIMR[27].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR28        CAN_0.RXIMR[28].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR29        CAN_0.RXIMR[29].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR30        CAN_0.RXIMR[30].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR31        CAN_0.RXIMR[31].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR32        CAN_0.RXIMR[32].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR33        CAN_0.RXIMR[33].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR34        CAN_0.RXIMR[34].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR35        CAN_0.RXIMR[35].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR36        CAN_0.RXIMR[36].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR37        CAN_0.RXIMR[37].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR38        CAN_0.RXIMR[38].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR39        CAN_0.RXIMR[39].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR40        CAN_0.RXIMR[40].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR41        CAN_0.RXIMR[41].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR42        CAN_0.RXIMR[42].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR43        CAN_0.RXIMR[43].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR44        CAN_0.RXIMR[44].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR45        CAN_0.RXIMR[45].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR46        CAN_0.RXIMR[46].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR47        CAN_0.RXIMR[47].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR48        CAN_0.RXIMR[48].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR49        CAN_0.RXIMR[49].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR50        CAN_0.RXIMR[50].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR51        CAN_0.RXIMR[51].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR52        CAN_0.RXIMR[52].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR53        CAN_0.RXIMR[53].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR54        CAN_0.RXIMR[54].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR55        CAN_0.RXIMR[55].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR56        CAN_0.RXIMR[56].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR57        CAN_0.RXIMR[57].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR58        CAN_0.RXIMR[58].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR59        CAN_0.RXIMR[59].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR60        CAN_0.RXIMR[60].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR61        CAN_0.RXIMR[61].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR62        CAN_0.RXIMR[62].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR63        CAN_0.RXIMR[63].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR64        CAN_0.RXIMR[64].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR65        CAN_0.RXIMR[65].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR66        CAN_0.RXIMR[66].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR67        CAN_0.RXIMR[67].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR68        CAN_0.RXIMR[68].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR69        CAN_0.RXIMR[69].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR70        CAN_0.RXIMR[70].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR71        CAN_0.RXIMR[71].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR72        CAN_0.RXIMR[72].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR73        CAN_0.RXIMR[73].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR74        CAN_0.RXIMR[74].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR75        CAN_0.RXIMR[75].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR76        CAN_0.RXIMR[76].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR77        CAN_0.RXIMR[77].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR78        CAN_0.RXIMR[78].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR79        CAN_0.RXIMR[79].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR80        CAN_0.RXIMR[80].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR81        CAN_0.RXIMR[81].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR82        CAN_0.RXIMR[82].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR83        CAN_0.RXIMR[83].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR84        CAN_0.RXIMR[84].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR85        CAN_0.RXIMR[85].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR86        CAN_0.RXIMR[86].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR87        CAN_0.RXIMR[87].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR88        CAN_0.RXIMR[88].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR89        CAN_0.RXIMR[89].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR90        CAN_0.RXIMR[90].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR91        CAN_0.RXIMR[91].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR92        CAN_0.RXIMR[92].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR93        CAN_0.RXIMR[93].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR94        CAN_0.RXIMR[94].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR95        CAN_0.RXIMR[95].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR96        CAN_0.RXIMR[96].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR97        CAN_0.RXIMR[97].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR98        CAN_0.RXIMR[98].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR99        CAN_0.RXIMR[99].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR100       CAN_0.RXIMR[100].R            /* Rx Individual Mask registers */
#define CAN_0_RXIMR101       CAN_0.RXIMR[101].R            /* Rx Individual Mask registers */
#define CAN_0_RXIMR102       CAN_0.RXIMR[102].R            /* Rx Individual Mask registers */
#define CAN_0_RXIMR103       CAN_0.RXIMR[103].R            /* Rx Individual Mask registers */
#define CAN_0_RXIMR104       CAN_0.RXIMR[104].R            /* Rx Individual Mask registers */
#define CAN_0_RXIMR105       CAN_0.RXIMR[105].R            /* Rx Individual Mask registers */
#define CAN_0_RXIMR106       CAN_0.RXIMR[106].R            /* Rx Individual Mask registers */
#define CAN_0_RXIMR107       CAN_0.RXIMR[107].R            /* Rx Individual Mask registers */
#define CAN_0_RXIMR108       CAN_0.RXIMR[108].R            /* Rx Individual Mask registers */
#define CAN_0_RXIMR109       CAN_0.RXIMR[109].R            /* Rx Individual Mask registers */
#define CAN_0_RXIMR110       CAN_0.RXIMR[110].R            /* Rx Individual Mask registers */
#define CAN_0_RXIMR111       CAN_0.RXIMR[111].R            /* Rx Individual Mask registers */
#define CAN_0_RXIMR112       CAN_0.RXIMR[112].R            /* Rx Individual Mask registers */
#define CAN_0_RXIMR113       CAN_0.RXIMR[113].R            /* Rx Individual Mask registers */
#define CAN_0_RXIMR114       CAN_0.RXIMR[114].R            /* Rx Individual Mask registers */
#define CAN_0_RXIMR115       CAN_0.RXIMR[115].R            /* Rx Individual Mask registers */
#define CAN_0_RXIMR116       CAN_0.RXIMR[116].R            /* Rx Individual Mask registers */
#define CAN_0_RXIMR117       CAN_0.RXIMR[117].R            /* Rx Individual Mask registers */
#define CAN_0_RXIMR118       CAN_0.RXIMR[118].R            /* Rx Individual Mask registers */
#define CAN_0_RXIMR119       CAN_0.RXIMR[119].R            /* Rx Individual Mask registers */
#define CAN_0_RXIMR120       CAN_0.RXIMR[120].R            /* Rx Individual Mask registers */
#define CAN_0_RXIMR121       CAN_0.RXIMR[121].R            /* Rx Individual Mask registers */
#define CAN_0_RXIMR122       CAN_0.RXIMR[122].R            /* Rx Individual Mask registers */
#define CAN_0_RXIMR123       CAN_0.RXIMR[123].R            /* Rx Individual Mask registers */
#define CAN_0_RXIMR124       CAN_0.RXIMR[124].R            /* Rx Individual Mask registers */
#define CAN_0_RXIMR125       CAN_0.RXIMR[125].R            /* Rx Individual Mask registers */
#define CAN_0_RXIMR126       CAN_0.RXIMR[126].R            /* Rx Individual Mask registers */
#define CAN_0_RXIMR127       CAN_0.RXIMR[127].R            /* Rx Individual Mask registers */
#define CAN_0_MECR           CAN_0.MECR.R                  /* Memory Error Control register */
#define CAN_0_ERRIAR         CAN_0.ERRIAR.R                /* Error Injection Address register */
#define CAN_0_ERRIDPR        CAN_0.ERRIDPR.R               /* Error Injection Data Pattern register */
#define CAN_0_ERRIPPR        CAN_0.ERRIPPR.R               /* Error Injection Parity Pattern register */
#define CAN_0_RERRAR         CAN_0.RERRAR.R                /* Error Report Address register */
#define CAN_0_RERRDR         CAN_0.RERRDR.R                /* Error Report Data register */
#define CAN_0_RERRSYNR       CAN_0.RERRSYNR.R              /* Error Report Syndrome register */
#define CAN_0_ERRSR          CAN_0.ERRSR.R                 /* Error Status register */
#define CAN_0_EPRS           CAN_0.EPRS.R                  /* Enhanced CAN Bit Timing Prescalers */
#define CAN_0_ENCBT          CAN_0.ENCBT.R                 /* Enhanced Nominal CAN Bit Timing */
#define CAN_0_EDCBT          CAN_0.EDCBT.R                 /* Enhanced Data Phase CAN bit Timing */
#define CAN_0_ETDC           CAN_0.ETDC.R                  /* Enhanced Transceiver Delay Compensation */
#define CAN_0_FDCTRL         CAN_0.FDCTRL.R                /* CAN FD Control register */
#define CAN_0_FDCBT          CAN_0.FDCBT.R                 /* CAN FD Bit Timing register */
#define CAN_0_FDCRC          CAN_0.FDCRC.R                 /* CAN FD CRC register */
#define CAN_0_ERFCR          CAN_0.ERFCR.R                 /* Enhanced Rx FIFO Control register */
#define CAN_0_ERFIER         CAN_0.ERFIER.R                /* Enhanced Rx FIFO Interrupt Enable register */
#define CAN_0_ERFSR          CAN_0.ERFSR.R                 /* Enhanced Rx FIFO Status register */
#define CAN_0_HR_TIME_STAMP0 CAN_0.HR_TIME_STAMP[0].R      /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP1 CAN_0.HR_TIME_STAMP[1].R      /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP2 CAN_0.HR_TIME_STAMP[2].R      /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP3 CAN_0.HR_TIME_STAMP[3].R      /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP4 CAN_0.HR_TIME_STAMP[4].R      /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP5 CAN_0.HR_TIME_STAMP[5].R      /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP6 CAN_0.HR_TIME_STAMP[6].R      /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP7 CAN_0.HR_TIME_STAMP[7].R      /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP8 CAN_0.HR_TIME_STAMP[8].R      /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP9 CAN_0.HR_TIME_STAMP[9].R      /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP10 CAN_0.HR_TIME_STAMP[10].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP11 CAN_0.HR_TIME_STAMP[11].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP12 CAN_0.HR_TIME_STAMP[12].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP13 CAN_0.HR_TIME_STAMP[13].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP14 CAN_0.HR_TIME_STAMP[14].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP15 CAN_0.HR_TIME_STAMP[15].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP16 CAN_0.HR_TIME_STAMP[16].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP17 CAN_0.HR_TIME_STAMP[17].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP18 CAN_0.HR_TIME_STAMP[18].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP19 CAN_0.HR_TIME_STAMP[19].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP20 CAN_0.HR_TIME_STAMP[20].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP21 CAN_0.HR_TIME_STAMP[21].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP22 CAN_0.HR_TIME_STAMP[22].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP23 CAN_0.HR_TIME_STAMP[23].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP24 CAN_0.HR_TIME_STAMP[24].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP25 CAN_0.HR_TIME_STAMP[25].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP26 CAN_0.HR_TIME_STAMP[26].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP27 CAN_0.HR_TIME_STAMP[27].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP28 CAN_0.HR_TIME_STAMP[28].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP29 CAN_0.HR_TIME_STAMP[29].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP30 CAN_0.HR_TIME_STAMP[30].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP31 CAN_0.HR_TIME_STAMP[31].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP32 CAN_0.HR_TIME_STAMP[32].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP33 CAN_0.HR_TIME_STAMP[33].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP34 CAN_0.HR_TIME_STAMP[34].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP35 CAN_0.HR_TIME_STAMP[35].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP36 CAN_0.HR_TIME_STAMP[36].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP37 CAN_0.HR_TIME_STAMP[37].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP38 CAN_0.HR_TIME_STAMP[38].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP39 CAN_0.HR_TIME_STAMP[39].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP40 CAN_0.HR_TIME_STAMP[40].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP41 CAN_0.HR_TIME_STAMP[41].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP42 CAN_0.HR_TIME_STAMP[42].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP43 CAN_0.HR_TIME_STAMP[43].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP44 CAN_0.HR_TIME_STAMP[44].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP45 CAN_0.HR_TIME_STAMP[45].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP46 CAN_0.HR_TIME_STAMP[46].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP47 CAN_0.HR_TIME_STAMP[47].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP48 CAN_0.HR_TIME_STAMP[48].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP49 CAN_0.HR_TIME_STAMP[49].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP50 CAN_0.HR_TIME_STAMP[50].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP51 CAN_0.HR_TIME_STAMP[51].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP52 CAN_0.HR_TIME_STAMP[52].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP53 CAN_0.HR_TIME_STAMP[53].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP54 CAN_0.HR_TIME_STAMP[54].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP55 CAN_0.HR_TIME_STAMP[55].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP56 CAN_0.HR_TIME_STAMP[56].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP57 CAN_0.HR_TIME_STAMP[57].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP58 CAN_0.HR_TIME_STAMP[58].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP59 CAN_0.HR_TIME_STAMP[59].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP60 CAN_0.HR_TIME_STAMP[60].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP61 CAN_0.HR_TIME_STAMP[61].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP62 CAN_0.HR_TIME_STAMP[62].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP63 CAN_0.HR_TIME_STAMP[63].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP64 CAN_0.HR_TIME_STAMP[64].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP65 CAN_0.HR_TIME_STAMP[65].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP66 CAN_0.HR_TIME_STAMP[66].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP67 CAN_0.HR_TIME_STAMP[67].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP68 CAN_0.HR_TIME_STAMP[68].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP69 CAN_0.HR_TIME_STAMP[69].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP70 CAN_0.HR_TIME_STAMP[70].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP71 CAN_0.HR_TIME_STAMP[71].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP72 CAN_0.HR_TIME_STAMP[72].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP73 CAN_0.HR_TIME_STAMP[73].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP74 CAN_0.HR_TIME_STAMP[74].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP75 CAN_0.HR_TIME_STAMP[75].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP76 CAN_0.HR_TIME_STAMP[76].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP77 CAN_0.HR_TIME_STAMP[77].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP78 CAN_0.HR_TIME_STAMP[78].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP79 CAN_0.HR_TIME_STAMP[79].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP80 CAN_0.HR_TIME_STAMP[80].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP81 CAN_0.HR_TIME_STAMP[81].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP82 CAN_0.HR_TIME_STAMP[82].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP83 CAN_0.HR_TIME_STAMP[83].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP84 CAN_0.HR_TIME_STAMP[84].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP85 CAN_0.HR_TIME_STAMP[85].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP86 CAN_0.HR_TIME_STAMP[86].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP87 CAN_0.HR_TIME_STAMP[87].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP88 CAN_0.HR_TIME_STAMP[88].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP89 CAN_0.HR_TIME_STAMP[89].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP90 CAN_0.HR_TIME_STAMP[90].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP91 CAN_0.HR_TIME_STAMP[91].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP92 CAN_0.HR_TIME_STAMP[92].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP93 CAN_0.HR_TIME_STAMP[93].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP94 CAN_0.HR_TIME_STAMP[94].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP95 CAN_0.HR_TIME_STAMP[95].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP96 CAN_0.HR_TIME_STAMP[96].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP97 CAN_0.HR_TIME_STAMP[97].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP98 CAN_0.HR_TIME_STAMP[98].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP99 CAN_0.HR_TIME_STAMP[99].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP100 CAN_0.HR_TIME_STAMP[100].R  /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP101 CAN_0.HR_TIME_STAMP[101].R  /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP102 CAN_0.HR_TIME_STAMP[102].R  /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP103 CAN_0.HR_TIME_STAMP[103].R  /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP104 CAN_0.HR_TIME_STAMP[104].R  /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP105 CAN_0.HR_TIME_STAMP[105].R  /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP106 CAN_0.HR_TIME_STAMP[106].R  /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP107 CAN_0.HR_TIME_STAMP[107].R  /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP108 CAN_0.HR_TIME_STAMP[108].R  /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP109 CAN_0.HR_TIME_STAMP[109].R  /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP110 CAN_0.HR_TIME_STAMP[110].R  /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP111 CAN_0.HR_TIME_STAMP[111].R  /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP112 CAN_0.HR_TIME_STAMP[112].R  /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP113 CAN_0.HR_TIME_STAMP[113].R  /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP114 CAN_0.HR_TIME_STAMP[114].R  /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP115 CAN_0.HR_TIME_STAMP[115].R  /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP116 CAN_0.HR_TIME_STAMP[116].R  /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP117 CAN_0.HR_TIME_STAMP[117].R  /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP118 CAN_0.HR_TIME_STAMP[118].R  /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP119 CAN_0.HR_TIME_STAMP[119].R  /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP120 CAN_0.HR_TIME_STAMP[120].R  /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP121 CAN_0.HR_TIME_STAMP[121].R  /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP122 CAN_0.HR_TIME_STAMP[122].R  /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP123 CAN_0.HR_TIME_STAMP[123].R  /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP124 CAN_0.HR_TIME_STAMP[124].R  /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP125 CAN_0.HR_TIME_STAMP[125].R  /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP126 CAN_0.HR_TIME_STAMP[126].R  /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP127 CAN_0.HR_TIME_STAMP[127].R  /* High Resolution Time Stamp */
#define CAN_0_ERFFEL0        CAN_0.ERFFEL[0].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL1        CAN_0.ERFFEL[1].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL2        CAN_0.ERFFEL[2].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL3        CAN_0.ERFFEL[3].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL4        CAN_0.ERFFEL[4].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL5        CAN_0.ERFFEL[5].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL6        CAN_0.ERFFEL[6].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL7        CAN_0.ERFFEL[7].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL8        CAN_0.ERFFEL[8].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL9        CAN_0.ERFFEL[9].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL10       CAN_0.ERFFEL[10].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL11       CAN_0.ERFFEL[11].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL12       CAN_0.ERFFEL[12].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL13       CAN_0.ERFFEL[13].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL14       CAN_0.ERFFEL[14].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL15       CAN_0.ERFFEL[15].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL16       CAN_0.ERFFEL[16].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL17       CAN_0.ERFFEL[17].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL18       CAN_0.ERFFEL[18].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL19       CAN_0.ERFFEL[19].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL20       CAN_0.ERFFEL[20].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL21       CAN_0.ERFFEL[21].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL22       CAN_0.ERFFEL[22].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL23       CAN_0.ERFFEL[23].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL24       CAN_0.ERFFEL[24].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL25       CAN_0.ERFFEL[25].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL26       CAN_0.ERFFEL[26].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL27       CAN_0.ERFFEL[27].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL28       CAN_0.ERFFEL[28].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL29       CAN_0.ERFFEL[29].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL30       CAN_0.ERFFEL[30].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL31       CAN_0.ERFFEL[31].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL32       CAN_0.ERFFEL[32].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL33       CAN_0.ERFFEL[33].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL34       CAN_0.ERFFEL[34].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL35       CAN_0.ERFFEL[35].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL36       CAN_0.ERFFEL[36].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL37       CAN_0.ERFFEL[37].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL38       CAN_0.ERFFEL[38].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL39       CAN_0.ERFFEL[39].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL40       CAN_0.ERFFEL[40].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL41       CAN_0.ERFFEL[41].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL42       CAN_0.ERFFEL[42].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL43       CAN_0.ERFFEL[43].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL44       CAN_0.ERFFEL[44].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL45       CAN_0.ERFFEL[45].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL46       CAN_0.ERFFEL[46].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL47       CAN_0.ERFFEL[47].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL48       CAN_0.ERFFEL[48].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL49       CAN_0.ERFFEL[49].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL50       CAN_0.ERFFEL[50].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL51       CAN_0.ERFFEL[51].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL52       CAN_0.ERFFEL[52].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL53       CAN_0.ERFFEL[53].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL54       CAN_0.ERFFEL[54].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL55       CAN_0.ERFFEL[55].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL56       CAN_0.ERFFEL[56].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL57       CAN_0.ERFFEL[57].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL58       CAN_0.ERFFEL[58].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL59       CAN_0.ERFFEL[59].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL60       CAN_0.ERFFEL[60].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL61       CAN_0.ERFFEL[61].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL62       CAN_0.ERFFEL[62].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL63       CAN_0.ERFFEL[63].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL64       CAN_0.ERFFEL[64].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL65       CAN_0.ERFFEL[65].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL66       CAN_0.ERFFEL[66].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL67       CAN_0.ERFFEL[67].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL68       CAN_0.ERFFEL[68].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL69       CAN_0.ERFFEL[69].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL70       CAN_0.ERFFEL[70].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL71       CAN_0.ERFFEL[71].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL72       CAN_0.ERFFEL[72].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL73       CAN_0.ERFFEL[73].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL74       CAN_0.ERFFEL[74].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL75       CAN_0.ERFFEL[75].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL76       CAN_0.ERFFEL[76].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL77       CAN_0.ERFFEL[77].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL78       CAN_0.ERFFEL[78].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL79       CAN_0.ERFFEL[79].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL80       CAN_0.ERFFEL[80].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL81       CAN_0.ERFFEL[81].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL82       CAN_0.ERFFEL[82].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL83       CAN_0.ERFFEL[83].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL84       CAN_0.ERFFEL[84].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL85       CAN_0.ERFFEL[85].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL86       CAN_0.ERFFEL[86].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL87       CAN_0.ERFFEL[87].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL88       CAN_0.ERFFEL[88].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL89       CAN_0.ERFFEL[89].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL90       CAN_0.ERFFEL[90].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL91       CAN_0.ERFFEL[91].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL92       CAN_0.ERFFEL[92].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL93       CAN_0.ERFFEL[93].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL94       CAN_0.ERFFEL[94].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL95       CAN_0.ERFFEL[95].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL96       CAN_0.ERFFEL[96].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL97       CAN_0.ERFFEL[97].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL98       CAN_0.ERFFEL[98].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL99       CAN_0.ERFFEL[99].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL100      CAN_0.ERFFEL[100].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL101      CAN_0.ERFFEL[101].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL102      CAN_0.ERFFEL[102].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL103      CAN_0.ERFFEL[103].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL104      CAN_0.ERFFEL[104].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL105      CAN_0.ERFFEL[105].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL106      CAN_0.ERFFEL[106].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL107      CAN_0.ERFFEL[107].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL108      CAN_0.ERFFEL[108].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL109      CAN_0.ERFFEL[109].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL110      CAN_0.ERFFEL[110].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL111      CAN_0.ERFFEL[111].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL112      CAN_0.ERFFEL[112].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL113      CAN_0.ERFFEL[113].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL114      CAN_0.ERFFEL[114].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL115      CAN_0.ERFFEL[115].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL116      CAN_0.ERFFEL[116].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL117      CAN_0.ERFFEL[117].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL118      CAN_0.ERFFEL[118].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL119      CAN_0.ERFFEL[119].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL120      CAN_0.ERFFEL[120].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL121      CAN_0.ERFFEL[121].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL122      CAN_0.ERFFEL[122].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL123      CAN_0.ERFFEL[123].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL124      CAN_0.ERFFEL[124].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL125      CAN_0.ERFFEL[125].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL126      CAN_0.ERFFEL[126].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL127      CAN_0.ERFFEL[127].R           /* Enhanced Rx FIFO Filter Element */

#define CAN_1_MCR            CAN_1.MCR.R                   /* Module Configuration register */
#define CAN_1_CTRL1          CAN_1.CTRL1.R                 /* Control 1 register */
#define CAN_1_TIMER          CAN_1.TIMER.R                 /* Free Running Timer */
#define CAN_1_RXMGMASK       CAN_1.RXMGMASK.R              /* Rx Mailboxes Global Mask register */
#define CAN_1_RX14MASK       CAN_1.RX14MASK.R              /* Rx 14 Mask register */
#define CAN_1_RX15MASK       CAN_1.RX15MASK.R              /* Rx 15 Mask register */
#define CAN_1_ECR            CAN_1.ECR.R                   /* Error Counter */
#define CAN_1_ESR1           CAN_1.ESR1.R                  /* Error and Status 1 register */
#define CAN_1_IMASK2         CAN_1.IMASK2.R                /* Interrupt Masks 2 register */
#define CAN_1_IMASK1         CAN_1.IMASK1.R                /* Interrupt Masks 1 register */
#define CAN_1_IFLAG2         CAN_1.IFLAG2.R                /* Interrupt Flags 2 register */
#define CAN_1_IFLAG1         CAN_1.IFLAG1.R                /* Interrupt Flags 1 register */
#define CAN_1_CTRL2          CAN_1.CTRL2.R                 /* Control 2 register */
#define CAN_1_ESR2           CAN_1.ESR2.R                  /* Error and Status 2 register */
#define CAN_1_CRCR           CAN_1.CRCR.R                  /* CRC register */
#define CAN_1_RXFGMASK       CAN_1.RXFGMASK.R              /* Legacy Rx FIFO Global Mask register */
#define CAN_1_RXFIR          CAN_1.RXFIR.R                 /* Legacy Rx FIFO Information register */
#define CAN_1_CBT            CAN_1.CBT.R                   /* CAN Bit Timing register */
#define CAN_1_IMASK4         CAN_1.IMASK4.R                /* Interrupt Masks 4 register */
#define CAN_1_IMASK3         CAN_1.IMASK3.R                /* Interrupt Masks 3 register */
#define CAN_1_IFLAG4         CAN_1.IFLAG4.R                /* Interrupt Flags 4 register */
#define CAN_1_IFLAG3         CAN_1.IFLAG3.R                /* Interrupt Flags 3 register */
#define CAN_1_RXIMR0         CAN_1.RXIMR[0].R              /* Rx Individual Mask registers */
#define CAN_1_RXIMR1         CAN_1.RXIMR[1].R              /* Rx Individual Mask registers */
#define CAN_1_RXIMR2         CAN_1.RXIMR[2].R              /* Rx Individual Mask registers */
#define CAN_1_RXIMR3         CAN_1.RXIMR[3].R              /* Rx Individual Mask registers */
#define CAN_1_RXIMR4         CAN_1.RXIMR[4].R              /* Rx Individual Mask registers */
#define CAN_1_RXIMR5         CAN_1.RXIMR[5].R              /* Rx Individual Mask registers */
#define CAN_1_RXIMR6         CAN_1.RXIMR[6].R              /* Rx Individual Mask registers */
#define CAN_1_RXIMR7         CAN_1.RXIMR[7].R              /* Rx Individual Mask registers */
#define CAN_1_RXIMR8         CAN_1.RXIMR[8].R              /* Rx Individual Mask registers */
#define CAN_1_RXIMR9         CAN_1.RXIMR[9].R              /* Rx Individual Mask registers */
#define CAN_1_RXIMR10        CAN_1.RXIMR[10].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR11        CAN_1.RXIMR[11].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR12        CAN_1.RXIMR[12].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR13        CAN_1.RXIMR[13].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR14        CAN_1.RXIMR[14].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR15        CAN_1.RXIMR[15].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR16        CAN_1.RXIMR[16].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR17        CAN_1.RXIMR[17].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR18        CAN_1.RXIMR[18].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR19        CAN_1.RXIMR[19].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR20        CAN_1.RXIMR[20].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR21        CAN_1.RXIMR[21].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR22        CAN_1.RXIMR[22].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR23        CAN_1.RXIMR[23].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR24        CAN_1.RXIMR[24].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR25        CAN_1.RXIMR[25].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR26        CAN_1.RXIMR[26].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR27        CAN_1.RXIMR[27].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR28        CAN_1.RXIMR[28].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR29        CAN_1.RXIMR[29].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR30        CAN_1.RXIMR[30].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR31        CAN_1.RXIMR[31].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR32        CAN_1.RXIMR[32].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR33        CAN_1.RXIMR[33].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR34        CAN_1.RXIMR[34].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR35        CAN_1.RXIMR[35].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR36        CAN_1.RXIMR[36].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR37        CAN_1.RXIMR[37].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR38        CAN_1.RXIMR[38].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR39        CAN_1.RXIMR[39].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR40        CAN_1.RXIMR[40].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR41        CAN_1.RXIMR[41].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR42        CAN_1.RXIMR[42].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR43        CAN_1.RXIMR[43].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR44        CAN_1.RXIMR[44].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR45        CAN_1.RXIMR[45].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR46        CAN_1.RXIMR[46].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR47        CAN_1.RXIMR[47].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR48        CAN_1.RXIMR[48].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR49        CAN_1.RXIMR[49].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR50        CAN_1.RXIMR[50].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR51        CAN_1.RXIMR[51].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR52        CAN_1.RXIMR[52].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR53        CAN_1.RXIMR[53].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR54        CAN_1.RXIMR[54].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR55        CAN_1.RXIMR[55].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR56        CAN_1.RXIMR[56].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR57        CAN_1.RXIMR[57].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR58        CAN_1.RXIMR[58].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR59        CAN_1.RXIMR[59].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR60        CAN_1.RXIMR[60].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR61        CAN_1.RXIMR[61].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR62        CAN_1.RXIMR[62].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR63        CAN_1.RXIMR[63].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR64        CAN_1.RXIMR[64].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR65        CAN_1.RXIMR[65].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR66        CAN_1.RXIMR[66].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR67        CAN_1.RXIMR[67].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR68        CAN_1.RXIMR[68].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR69        CAN_1.RXIMR[69].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR70        CAN_1.RXIMR[70].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR71        CAN_1.RXIMR[71].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR72        CAN_1.RXIMR[72].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR73        CAN_1.RXIMR[73].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR74        CAN_1.RXIMR[74].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR75        CAN_1.RXIMR[75].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR76        CAN_1.RXIMR[76].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR77        CAN_1.RXIMR[77].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR78        CAN_1.RXIMR[78].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR79        CAN_1.RXIMR[79].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR80        CAN_1.RXIMR[80].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR81        CAN_1.RXIMR[81].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR82        CAN_1.RXIMR[82].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR83        CAN_1.RXIMR[83].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR84        CAN_1.RXIMR[84].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR85        CAN_1.RXIMR[85].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR86        CAN_1.RXIMR[86].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR87        CAN_1.RXIMR[87].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR88        CAN_1.RXIMR[88].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR89        CAN_1.RXIMR[89].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR90        CAN_1.RXIMR[90].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR91        CAN_1.RXIMR[91].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR92        CAN_1.RXIMR[92].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR93        CAN_1.RXIMR[93].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR94        CAN_1.RXIMR[94].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR95        CAN_1.RXIMR[95].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR96        CAN_1.RXIMR[96].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR97        CAN_1.RXIMR[97].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR98        CAN_1.RXIMR[98].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR99        CAN_1.RXIMR[99].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR100       CAN_1.RXIMR[100].R            /* Rx Individual Mask registers */
#define CAN_1_RXIMR101       CAN_1.RXIMR[101].R            /* Rx Individual Mask registers */
#define CAN_1_RXIMR102       CAN_1.RXIMR[102].R            /* Rx Individual Mask registers */
#define CAN_1_RXIMR103       CAN_1.RXIMR[103].R            /* Rx Individual Mask registers */
#define CAN_1_RXIMR104       CAN_1.RXIMR[104].R            /* Rx Individual Mask registers */
#define CAN_1_RXIMR105       CAN_1.RXIMR[105].R            /* Rx Individual Mask registers */
#define CAN_1_RXIMR106       CAN_1.RXIMR[106].R            /* Rx Individual Mask registers */
#define CAN_1_RXIMR107       CAN_1.RXIMR[107].R            /* Rx Individual Mask registers */
#define CAN_1_RXIMR108       CAN_1.RXIMR[108].R            /* Rx Individual Mask registers */
#define CAN_1_RXIMR109       CAN_1.RXIMR[109].R            /* Rx Individual Mask registers */
#define CAN_1_RXIMR110       CAN_1.RXIMR[110].R            /* Rx Individual Mask registers */
#define CAN_1_RXIMR111       CAN_1.RXIMR[111].R            /* Rx Individual Mask registers */
#define CAN_1_RXIMR112       CAN_1.RXIMR[112].R            /* Rx Individual Mask registers */
#define CAN_1_RXIMR113       CAN_1.RXIMR[113].R            /* Rx Individual Mask registers */
#define CAN_1_RXIMR114       CAN_1.RXIMR[114].R            /* Rx Individual Mask registers */
#define CAN_1_RXIMR115       CAN_1.RXIMR[115].R            /* Rx Individual Mask registers */
#define CAN_1_RXIMR116       CAN_1.RXIMR[116].R            /* Rx Individual Mask registers */
#define CAN_1_RXIMR117       CAN_1.RXIMR[117].R            /* Rx Individual Mask registers */
#define CAN_1_RXIMR118       CAN_1.RXIMR[118].R            /* Rx Individual Mask registers */
#define CAN_1_RXIMR119       CAN_1.RXIMR[119].R            /* Rx Individual Mask registers */
#define CAN_1_RXIMR120       CAN_1.RXIMR[120].R            /* Rx Individual Mask registers */
#define CAN_1_RXIMR121       CAN_1.RXIMR[121].R            /* Rx Individual Mask registers */
#define CAN_1_RXIMR122       CAN_1.RXIMR[122].R            /* Rx Individual Mask registers */
#define CAN_1_RXIMR123       CAN_1.RXIMR[123].R            /* Rx Individual Mask registers */
#define CAN_1_RXIMR124       CAN_1.RXIMR[124].R            /* Rx Individual Mask registers */
#define CAN_1_RXIMR125       CAN_1.RXIMR[125].R            /* Rx Individual Mask registers */
#define CAN_1_RXIMR126       CAN_1.RXIMR[126].R            /* Rx Individual Mask registers */
#define CAN_1_RXIMR127       CAN_1.RXIMR[127].R            /* Rx Individual Mask registers */
#define CAN_1_MECR           CAN_1.MECR.R                  /* Memory Error Control register */
#define CAN_1_ERRIAR         CAN_1.ERRIAR.R                /* Error Injection Address register */
#define CAN_1_ERRIDPR        CAN_1.ERRIDPR.R               /* Error Injection Data Pattern register */
#define CAN_1_ERRIPPR        CAN_1.ERRIPPR.R               /* Error Injection Parity Pattern register */
#define CAN_1_RERRAR         CAN_1.RERRAR.R                /* Error Report Address register */
#define CAN_1_RERRDR         CAN_1.RERRDR.R                /* Error Report Data register */
#define CAN_1_RERRSYNR       CAN_1.RERRSYNR.R              /* Error Report Syndrome register */
#define CAN_1_ERRSR          CAN_1.ERRSR.R                 /* Error Status register */
#define CAN_1_EPRS           CAN_1.EPRS.R                  /* Enhanced CAN Bit Timing Prescalers */
#define CAN_1_ENCBT          CAN_1.ENCBT.R                 /* Enhanced Nominal CAN Bit Timing */
#define CAN_1_EDCBT          CAN_1.EDCBT.R                 /* Enhanced Data Phase CAN bit Timing */
#define CAN_1_ETDC           CAN_1.ETDC.R                  /* Enhanced Transceiver Delay Compensation */
#define CAN_1_FDCTRL         CAN_1.FDCTRL.R                /* CAN FD Control register */
#define CAN_1_FDCBT          CAN_1.FDCBT.R                 /* CAN FD Bit Timing register */
#define CAN_1_FDCRC          CAN_1.FDCRC.R                 /* CAN FD CRC register */
#define CAN_1_ERFCR          CAN_1.ERFCR.R                 /* Enhanced Rx FIFO Control register */
#define CAN_1_ERFIER         CAN_1.ERFIER.R                /* Enhanced Rx FIFO Interrupt Enable register */
#define CAN_1_ERFSR          CAN_1.ERFSR.R                 /* Enhanced Rx FIFO Status register */
#define CAN_1_HR_TIME_STAMP0 CAN_1.HR_TIME_STAMP[0].R      /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP1 CAN_1.HR_TIME_STAMP[1].R      /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP2 CAN_1.HR_TIME_STAMP[2].R      /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP3 CAN_1.HR_TIME_STAMP[3].R      /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP4 CAN_1.HR_TIME_STAMP[4].R      /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP5 CAN_1.HR_TIME_STAMP[5].R      /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP6 CAN_1.HR_TIME_STAMP[6].R      /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP7 CAN_1.HR_TIME_STAMP[7].R      /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP8 CAN_1.HR_TIME_STAMP[8].R      /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP9 CAN_1.HR_TIME_STAMP[9].R      /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP10 CAN_1.HR_TIME_STAMP[10].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP11 CAN_1.HR_TIME_STAMP[11].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP12 CAN_1.HR_TIME_STAMP[12].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP13 CAN_1.HR_TIME_STAMP[13].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP14 CAN_1.HR_TIME_STAMP[14].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP15 CAN_1.HR_TIME_STAMP[15].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP16 CAN_1.HR_TIME_STAMP[16].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP17 CAN_1.HR_TIME_STAMP[17].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP18 CAN_1.HR_TIME_STAMP[18].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP19 CAN_1.HR_TIME_STAMP[19].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP20 CAN_1.HR_TIME_STAMP[20].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP21 CAN_1.HR_TIME_STAMP[21].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP22 CAN_1.HR_TIME_STAMP[22].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP23 CAN_1.HR_TIME_STAMP[23].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP24 CAN_1.HR_TIME_STAMP[24].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP25 CAN_1.HR_TIME_STAMP[25].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP26 CAN_1.HR_TIME_STAMP[26].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP27 CAN_1.HR_TIME_STAMP[27].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP28 CAN_1.HR_TIME_STAMP[28].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP29 CAN_1.HR_TIME_STAMP[29].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP30 CAN_1.HR_TIME_STAMP[30].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP31 CAN_1.HR_TIME_STAMP[31].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP32 CAN_1.HR_TIME_STAMP[32].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP33 CAN_1.HR_TIME_STAMP[33].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP34 CAN_1.HR_TIME_STAMP[34].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP35 CAN_1.HR_TIME_STAMP[35].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP36 CAN_1.HR_TIME_STAMP[36].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP37 CAN_1.HR_TIME_STAMP[37].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP38 CAN_1.HR_TIME_STAMP[38].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP39 CAN_1.HR_TIME_STAMP[39].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP40 CAN_1.HR_TIME_STAMP[40].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP41 CAN_1.HR_TIME_STAMP[41].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP42 CAN_1.HR_TIME_STAMP[42].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP43 CAN_1.HR_TIME_STAMP[43].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP44 CAN_1.HR_TIME_STAMP[44].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP45 CAN_1.HR_TIME_STAMP[45].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP46 CAN_1.HR_TIME_STAMP[46].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP47 CAN_1.HR_TIME_STAMP[47].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP48 CAN_1.HR_TIME_STAMP[48].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP49 CAN_1.HR_TIME_STAMP[49].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP50 CAN_1.HR_TIME_STAMP[50].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP51 CAN_1.HR_TIME_STAMP[51].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP52 CAN_1.HR_TIME_STAMP[52].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP53 CAN_1.HR_TIME_STAMP[53].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP54 CAN_1.HR_TIME_STAMP[54].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP55 CAN_1.HR_TIME_STAMP[55].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP56 CAN_1.HR_TIME_STAMP[56].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP57 CAN_1.HR_TIME_STAMP[57].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP58 CAN_1.HR_TIME_STAMP[58].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP59 CAN_1.HR_TIME_STAMP[59].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP60 CAN_1.HR_TIME_STAMP[60].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP61 CAN_1.HR_TIME_STAMP[61].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP62 CAN_1.HR_TIME_STAMP[62].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP63 CAN_1.HR_TIME_STAMP[63].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP64 CAN_1.HR_TIME_STAMP[64].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP65 CAN_1.HR_TIME_STAMP[65].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP66 CAN_1.HR_TIME_STAMP[66].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP67 CAN_1.HR_TIME_STAMP[67].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP68 CAN_1.HR_TIME_STAMP[68].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP69 CAN_1.HR_TIME_STAMP[69].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP70 CAN_1.HR_TIME_STAMP[70].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP71 CAN_1.HR_TIME_STAMP[71].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP72 CAN_1.HR_TIME_STAMP[72].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP73 CAN_1.HR_TIME_STAMP[73].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP74 CAN_1.HR_TIME_STAMP[74].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP75 CAN_1.HR_TIME_STAMP[75].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP76 CAN_1.HR_TIME_STAMP[76].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP77 CAN_1.HR_TIME_STAMP[77].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP78 CAN_1.HR_TIME_STAMP[78].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP79 CAN_1.HR_TIME_STAMP[79].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP80 CAN_1.HR_TIME_STAMP[80].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP81 CAN_1.HR_TIME_STAMP[81].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP82 CAN_1.HR_TIME_STAMP[82].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP83 CAN_1.HR_TIME_STAMP[83].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP84 CAN_1.HR_TIME_STAMP[84].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP85 CAN_1.HR_TIME_STAMP[85].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP86 CAN_1.HR_TIME_STAMP[86].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP87 CAN_1.HR_TIME_STAMP[87].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP88 CAN_1.HR_TIME_STAMP[88].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP89 CAN_1.HR_TIME_STAMP[89].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP90 CAN_1.HR_TIME_STAMP[90].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP91 CAN_1.HR_TIME_STAMP[91].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP92 CAN_1.HR_TIME_STAMP[92].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP93 CAN_1.HR_TIME_STAMP[93].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP94 CAN_1.HR_TIME_STAMP[94].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP95 CAN_1.HR_TIME_STAMP[95].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP96 CAN_1.HR_TIME_STAMP[96].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP97 CAN_1.HR_TIME_STAMP[97].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP98 CAN_1.HR_TIME_STAMP[98].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP99 CAN_1.HR_TIME_STAMP[99].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP100 CAN_1.HR_TIME_STAMP[100].R  /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP101 CAN_1.HR_TIME_STAMP[101].R  /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP102 CAN_1.HR_TIME_STAMP[102].R  /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP103 CAN_1.HR_TIME_STAMP[103].R  /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP104 CAN_1.HR_TIME_STAMP[104].R  /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP105 CAN_1.HR_TIME_STAMP[105].R  /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP106 CAN_1.HR_TIME_STAMP[106].R  /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP107 CAN_1.HR_TIME_STAMP[107].R  /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP108 CAN_1.HR_TIME_STAMP[108].R  /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP109 CAN_1.HR_TIME_STAMP[109].R  /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP110 CAN_1.HR_TIME_STAMP[110].R  /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP111 CAN_1.HR_TIME_STAMP[111].R  /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP112 CAN_1.HR_TIME_STAMP[112].R  /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP113 CAN_1.HR_TIME_STAMP[113].R  /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP114 CAN_1.HR_TIME_STAMP[114].R  /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP115 CAN_1.HR_TIME_STAMP[115].R  /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP116 CAN_1.HR_TIME_STAMP[116].R  /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP117 CAN_1.HR_TIME_STAMP[117].R  /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP118 CAN_1.HR_TIME_STAMP[118].R  /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP119 CAN_1.HR_TIME_STAMP[119].R  /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP120 CAN_1.HR_TIME_STAMP[120].R  /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP121 CAN_1.HR_TIME_STAMP[121].R  /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP122 CAN_1.HR_TIME_STAMP[122].R  /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP123 CAN_1.HR_TIME_STAMP[123].R  /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP124 CAN_1.HR_TIME_STAMP[124].R  /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP125 CAN_1.HR_TIME_STAMP[125].R  /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP126 CAN_1.HR_TIME_STAMP[126].R  /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP127 CAN_1.HR_TIME_STAMP[127].R  /* High Resolution Time Stamp */
#define CAN_1_ERFFEL0        CAN_1.ERFFEL[0].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL1        CAN_1.ERFFEL[1].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL2        CAN_1.ERFFEL[2].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL3        CAN_1.ERFFEL[3].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL4        CAN_1.ERFFEL[4].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL5        CAN_1.ERFFEL[5].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL6        CAN_1.ERFFEL[6].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL7        CAN_1.ERFFEL[7].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL8        CAN_1.ERFFEL[8].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL9        CAN_1.ERFFEL[9].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL10       CAN_1.ERFFEL[10].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL11       CAN_1.ERFFEL[11].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL12       CAN_1.ERFFEL[12].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL13       CAN_1.ERFFEL[13].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL14       CAN_1.ERFFEL[14].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL15       CAN_1.ERFFEL[15].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL16       CAN_1.ERFFEL[16].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL17       CAN_1.ERFFEL[17].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL18       CAN_1.ERFFEL[18].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL19       CAN_1.ERFFEL[19].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL20       CAN_1.ERFFEL[20].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL21       CAN_1.ERFFEL[21].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL22       CAN_1.ERFFEL[22].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL23       CAN_1.ERFFEL[23].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL24       CAN_1.ERFFEL[24].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL25       CAN_1.ERFFEL[25].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL26       CAN_1.ERFFEL[26].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL27       CAN_1.ERFFEL[27].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL28       CAN_1.ERFFEL[28].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL29       CAN_1.ERFFEL[29].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL30       CAN_1.ERFFEL[30].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL31       CAN_1.ERFFEL[31].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL32       CAN_1.ERFFEL[32].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL33       CAN_1.ERFFEL[33].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL34       CAN_1.ERFFEL[34].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL35       CAN_1.ERFFEL[35].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL36       CAN_1.ERFFEL[36].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL37       CAN_1.ERFFEL[37].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL38       CAN_1.ERFFEL[38].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL39       CAN_1.ERFFEL[39].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL40       CAN_1.ERFFEL[40].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL41       CAN_1.ERFFEL[41].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL42       CAN_1.ERFFEL[42].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL43       CAN_1.ERFFEL[43].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL44       CAN_1.ERFFEL[44].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL45       CAN_1.ERFFEL[45].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL46       CAN_1.ERFFEL[46].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL47       CAN_1.ERFFEL[47].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL48       CAN_1.ERFFEL[48].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL49       CAN_1.ERFFEL[49].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL50       CAN_1.ERFFEL[50].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL51       CAN_1.ERFFEL[51].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL52       CAN_1.ERFFEL[52].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL53       CAN_1.ERFFEL[53].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL54       CAN_1.ERFFEL[54].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL55       CAN_1.ERFFEL[55].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL56       CAN_1.ERFFEL[56].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL57       CAN_1.ERFFEL[57].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL58       CAN_1.ERFFEL[58].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL59       CAN_1.ERFFEL[59].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL60       CAN_1.ERFFEL[60].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL61       CAN_1.ERFFEL[61].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL62       CAN_1.ERFFEL[62].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL63       CAN_1.ERFFEL[63].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL64       CAN_1.ERFFEL[64].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL65       CAN_1.ERFFEL[65].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL66       CAN_1.ERFFEL[66].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL67       CAN_1.ERFFEL[67].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL68       CAN_1.ERFFEL[68].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL69       CAN_1.ERFFEL[69].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL70       CAN_1.ERFFEL[70].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL71       CAN_1.ERFFEL[71].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL72       CAN_1.ERFFEL[72].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL73       CAN_1.ERFFEL[73].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL74       CAN_1.ERFFEL[74].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL75       CAN_1.ERFFEL[75].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL76       CAN_1.ERFFEL[76].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL77       CAN_1.ERFFEL[77].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL78       CAN_1.ERFFEL[78].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL79       CAN_1.ERFFEL[79].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL80       CAN_1.ERFFEL[80].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL81       CAN_1.ERFFEL[81].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL82       CAN_1.ERFFEL[82].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL83       CAN_1.ERFFEL[83].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL84       CAN_1.ERFFEL[84].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL85       CAN_1.ERFFEL[85].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL86       CAN_1.ERFFEL[86].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL87       CAN_1.ERFFEL[87].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL88       CAN_1.ERFFEL[88].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL89       CAN_1.ERFFEL[89].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL90       CAN_1.ERFFEL[90].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL91       CAN_1.ERFFEL[91].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL92       CAN_1.ERFFEL[92].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL93       CAN_1.ERFFEL[93].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL94       CAN_1.ERFFEL[94].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL95       CAN_1.ERFFEL[95].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL96       CAN_1.ERFFEL[96].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL97       CAN_1.ERFFEL[97].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL98       CAN_1.ERFFEL[98].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL99       CAN_1.ERFFEL[99].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL100      CAN_1.ERFFEL[100].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL101      CAN_1.ERFFEL[101].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL102      CAN_1.ERFFEL[102].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL103      CAN_1.ERFFEL[103].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL104      CAN_1.ERFFEL[104].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL105      CAN_1.ERFFEL[105].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL106      CAN_1.ERFFEL[106].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL107      CAN_1.ERFFEL[107].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL108      CAN_1.ERFFEL[108].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL109      CAN_1.ERFFEL[109].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL110      CAN_1.ERFFEL[110].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL111      CAN_1.ERFFEL[111].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL112      CAN_1.ERFFEL[112].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL113      CAN_1.ERFFEL[113].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL114      CAN_1.ERFFEL[114].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL115      CAN_1.ERFFEL[115].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL116      CAN_1.ERFFEL[116].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL117      CAN_1.ERFFEL[117].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL118      CAN_1.ERFFEL[118].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL119      CAN_1.ERFFEL[119].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL120      CAN_1.ERFFEL[120].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL121      CAN_1.ERFFEL[121].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL122      CAN_1.ERFFEL[122].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL123      CAN_1.ERFFEL[123].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL124      CAN_1.ERFFEL[124].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL125      CAN_1.ERFFEL[125].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL126      CAN_1.ERFFEL[126].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_1_ERFFEL127      CAN_1.ERFFEL[127].R           /* Enhanced Rx FIFO Filter Element */

/* FLEXRAY */
#define FR_0_MVR             FR_0.MVR.R                    /* Module Version Register */
#define FR_0_MCR             FR_0.MCR.R                    /* Module Configuration Register */
#define FR_0_SYMBADHR        FR_0.SYMBADHR.R               /* System Memory Base Address High Register */
#define FR_0_SYMBADLR        FR_0.SYMBADLR.R               /* System Memory Base Address Low Register */
#define FR_0_STBSCR          FR_0.STBSCR.R                 /* Strobe Signal Control Register */
#define FR_0_MBDSR           FR_0.MBDSR.R                  /* Message Buffer Data Size Register */
#define FR_0_MBSSUTR         FR_0.MBSSUTR.R                /* Message Buffer Segment Size and Utilization Register */
#define FR_0_PEDRAR          FR_0.PEDRAR.R                 /* PE DRAM Access Register */
#define FR_0_PEDRDR          FR_0.PEDRDR.R                 /* PE DRAM Data Register */
#define FR_0_POCR            FR_0.POCR.R                   /* Protocol Operation Control Register */
#define FR_0_GIFER           FR_0.GIFER.R                  /* Global Interrupt Flag and Enable Register */
#define FR_0_PIFR0           FR_0.PIFR0.R                  /* Protocol Interrupt Flag Register 0 */
#define FR_0_PIFR1           FR_0.PIFR1.R                  /* Protocol Interrupt Flag Register 1 */
#define FR_0_PIER0           FR_0.PIER0.R                  /* Protocol Interrupt Enable Register 0 */
#define FR_0_PIER1           FR_0.PIER1.R                  /* Protocol Interrupt Enable Register 1 */
#define FR_0_CHIERFR         FR_0.CHIERFR.R                /* CHI Error Flag Register */
#define FR_0_MBIVEC          FR_0.MBIVEC.R                 /* Message Buffer Interrupt Vector Register */
#define FR_0_CASERCR         FR_0.CASERCR.R                /* Channel A Status Error Counter Register */
#define FR_0_CBSERCR         FR_0.CBSERCR.R                /* Channel B Status Error Counter Register */
#define FR_0_PSR0            FR_0.PSR0.R                   /* Protocol Status Register 0 */
#define FR_0_PSR1            FR_0.PSR1.R                   /* Protocol Status Register 1 */
#define FR_0_PSR2            FR_0.PSR2.R                   /* Protocol Status Register 2 */
#define FR_0_PSR3            FR_0.PSR3.R                   /* Protocol Status Register 3 */
#define FR_0_MTCTR           FR_0.MTCTR.R                  /* Macrotick Counter Register */
#define FR_0_CYCTR           FR_0.CYCTR.R                  /* Cycle Counter Register */
#define FR_0_SLTCTAR         FR_0.SLTCTAR.R                /* Slot Counter Channel A Register */
#define FR_0_SLTCTBR         FR_0.SLTCTBR.R                /* Slot Counter Channel B Register */
#define FR_0_RTCORVR         FR_0.RTCORVR.R                /* Rate Correction Value Register */
#define FR_0_OFCORVR         FR_0.OFCORVR.R                /* Offset Correction Value Register */
#define FR_0_CIFR            FR_0.CIFR.R                   /* Combined Interrupt Flag Register */
#define FR_0_SYMATOR         FR_0.SYMATOR.R                /* System Memory Access Time-Out Register */
#define FR_0_SFCNTR          FR_0.SFCNTR.R                 /* Sync Frame Counter Register */
#define FR_0_SFTOR           FR_0.SFTOR.R                  /* Sync Frame Table Offset Register */
#define FR_0_SFTCCSR         FR_0.SFTCCSR.R                /* Sync Frame Table Configuration Control Status Register */
#define FR_0_SFIDRFR         FR_0.SFIDRFR.R                /* Sync Frame ID Rejection Filter Register */
#define FR_0_SFIDAFVR        FR_0.SFIDAFVR.R               /* Sync Frame ID Acceptance Filter Value Register */
#define FR_0_SFIDAFMR        FR_0.SFIDAFMR.R               /* Sync Frame ID Acceptance Filter Mask Register */
#define FR_0_NMVR0           FR_0.NMVR[0].R                /* Network Management Vector Register */
#define FR_0_NMVR1           FR_0.NMVR[1].R                /* Network Management Vector Register */
#define FR_0_NMVR2           FR_0.NMVR[2].R                /* Network Management Vector Register */
#define FR_0_NMVR3           FR_0.NMVR[3].R                /* Network Management Vector Register */
#define FR_0_NMVR4           FR_0.NMVR[4].R                /* Network Management Vector Register */
#define FR_0_NMVR5           FR_0.NMVR[5].R                /* Network Management Vector Register */
#define FR_0_NMVLR           FR_0.NMVLR.R                  /* Network Management Vector Length Register */
#define FR_0_TICCR           FR_0.TICCR.R                  /* Timer Configuration and Control Register */
#define FR_0_TI1CYSR         FR_0.TI1CYSR.R                /* Timer 1 Cycle Set Register */
#define FR_0_TI1MTOR         FR_0.TI1MTOR.R                /* Timer 1 Macrotick Offset Register */
#define FR_0_TI2CR0_ABS      FR_0.TI2CR0.ABS.R             /* Timer 2 Configuration Register 0 (Absolute Timer Configuration) */
#define FR_0_TI2CR0_REL      FR_0.TI2CR0.REL.R             /* Timer 2 Configuration Register 0 (Relative Timer Configuration) */
#define FR_0_TI2CR1_ABS      FR_0.TI2CR1.ABS.R             /* Timer 2 Configuration Register 1 (Absolute Timer Configuration) */
#define FR_0_TI2CR1_REL      FR_0.TI2CR1.REL.R             /* Timer 2 Configuration Register 1 (Relative Timer Configuration) */
#define FR_0_SSSR            FR_0.SSSR.R                   /* Slot Status Selection Register */
#define FR_0_SSCCR           FR_0.SSCCR.R                  /* Slot Status Counter Condition Register */
#define FR_0_SSR0            FR_0.SSR[0].R                 /* Slot Status Register */
#define FR_0_SSR1            FR_0.SSR[1].R                 /* Slot Status Register */
#define FR_0_SSR2            FR_0.SSR[2].R                 /* Slot Status Register */
#define FR_0_SSR3            FR_0.SSR[3].R                 /* Slot Status Register */
#define FR_0_SSR4            FR_0.SSR[4].R                 /* Slot Status Register */
#define FR_0_SSR5            FR_0.SSR[5].R                 /* Slot Status Register */
#define FR_0_SSR6            FR_0.SSR[6].R                 /* Slot Status Register */
#define FR_0_SSR7            FR_0.SSR[7].R                 /* Slot Status Register */
#define FR_0_SSCR0           FR_0.SSCR[0].R                /* Slot Status Counter Register */
#define FR_0_SSCR1           FR_0.SSCR[1].R                /* Slot Status Counter Register */
#define FR_0_SSCR2           FR_0.SSCR[2].R                /* Slot Status Counter Register */
#define FR_0_SSCR3           FR_0.SSCR[3].R                /* Slot Status Counter Register */
#define FR_0_MTSACFR         FR_0.MTSACFR.R                /* MTS A Configuration Register */
#define FR_0_MTSBCFR         FR_0.MTSBCFR.R                /* MTS B Configuration Register */
#define FR_0_RSBIR           FR_0.RSBIR.R                  /* Receive Shadow Buffer Index Register */
#define FR_0_RFWMSR          FR_0.RFWMSR.R                 /* Receive FIFO Watermark and Selection Register */
#define FR_0_RFSIR           FR_0.RFSIR.R                  /* Receive FIFO Start Index Register */
#define FR_0_RFDSR           FR_0.RFDSR.R                  /* Receive FIFO Depth and Size Register */
#define FR_0_RFARIR          FR_0.RFARIR.R                 /* Receive FIFO A Read Index Register */
#define FR_0_RFBRIR          FR_0.RFBRIR.R                 /* Receive FIFO B Read Index Register */
#define FR_0_RFMIDAFVR       FR_0.RFMIDAFVR.R              /* Receive FIFO Message ID Acceptance Filter Value Register */
#define FR_0_RFMIDAFMR       FR_0.RFMIDAFMR.R              /* Receive FIFO Message ID Acceptance Filter Mask Register */
#define FR_0_RFFIDRFVR       FR_0.RFFIDRFVR.R              /* Receive FIFO Frame ID Rejection Filter Value Register */
#define FR_0_RFFIDRFMR       FR_0.RFFIDRFMR.R              /* Receive FIFO Frame ID Rejection Filter Mask Register */
#define FR_0_RFRFCFR         FR_0.RFRFCFR.R                /* Receive FIFO Range Filter Configuration Register */
#define FR_0_RFRFCTR         FR_0.RFRFCTR.R                /* Receive FIFO Range Filter Control Register */
#define FR_0_LDTXSLAR        FR_0.LDTXSLAR.R               /* Last Dynamic Transmit Slot Channel A Register */
#define FR_0_LDTXSLBR        FR_0.LDTXSLBR.R               /* Last Dynamic Transmit Slot Channel B Register */
#define FR_0_PCR0            FR_0.PCR0.R                   /* Protocol Configuration Register 0 */
#define FR_0_PCR1            FR_0.PCR1.R                   /* Protocol Configuration Register 1 */
#define FR_0_PCR2            FR_0.PCR2.R                   /* Protocol Configuration Register 2 */
#define FR_0_PCR3            FR_0.PCR3.R                   /* Protocol Configuration Register 3 */
#define FR_0_PCR4            FR_0.PCR4.R                   /* Protocol Configuration Register 4 */
#define FR_0_PCR5            FR_0.PCR5.R                   /* Protocol Configuration Register 5 */
#define FR_0_PCR6            FR_0.PCR6.R                   /* Protocol Configuration Register 6 */
#define FR_0_PCR7            FR_0.PCR7.R                   /* Protocol Configuration Register 7 */
#define FR_0_PCR8            FR_0.PCR8.R                   /* Protocol Configuration Register 8 */
#define FR_0_PCR9            FR_0.PCR9.R                   /* Protocol Configuration Register 9 */
#define FR_0_PCR10           FR_0.PCR10.R                  /* Protocol Configuration Register 10 */
#define FR_0_PCR11           FR_0.PCR11.R                  /* Protocol Configuration Register 11 */
#define FR_0_PCR12           FR_0.PCR12.R                  /* Protocol Configuration Register 12 */
#define FR_0_PCR13           FR_0.PCR13.R                  /* Protocol Configuration Register 13 */
#define FR_0_PCR14           FR_0.PCR14.R                  /* Protocol Configuration Register 14 */
#define FR_0_PCR15           FR_0.PCR15.R                  /* Protocol Configuration Register 15 */
#define FR_0_PCR16           FR_0.PCR16.R                  /* Protocol Configuration Register 16 */
#define FR_0_PCR17           FR_0.PCR17.R                  /* Protocol Configuration Register 17 */
#define FR_0_PCR18           FR_0.PCR18.R                  /* Protocol Configuration Register 18 */
#define FR_0_PCR19           FR_0.PCR19.R                  /* Protocol Configuration Register 19 */
#define FR_0_PCR20           FR_0.PCR20.R                  /* Protocol Configuration Register 20 */
#define FR_0_PCR21           FR_0.PCR21.R                  /* Protocol Configuration Register 21 */
#define FR_0_PCR22           FR_0.PCR22.R                  /* Protocol Configuration Register 22 */
#define FR_0_PCR23           FR_0.PCR23.R                  /* Protocol Configuration Register 23 */
#define FR_0_PCR24           FR_0.PCR24.R                  /* Protocol Configuration Register 24 */
#define FR_0_PCR25           FR_0.PCR25.R                  /* Protocol Configuration Register 25 */
#define FR_0_PCR26           FR_0.PCR26.R                  /* Protocol Configuration Register 26 */
#define FR_0_PCR27           FR_0.PCR27.R                  /* Protocol Configuration Register 27 */
#define FR_0_PCR28           FR_0.PCR28.R                  /* Protocol Configuration Register 28 */
#define FR_0_PCR29           FR_0.PCR29.R                  /* Protocol Configuration Register 29 */
#define FR_0_PCR30           FR_0.PCR30.R                  /* Protocol Configuration Register 30 */
#define FR_0_STPWHR          FR_0.STPWHR.R                 /* StopWatch Count High Register */
#define FR_0_STPWLR          FR_0.STPWLR.R                 /* Stop Watch Count Low Register */
#define FR_0_PEOER           FR_0.PEOER.R                  /* Protocol Event Output Enable and StopWatch Control Register */
#define FR_0_RFSDOR          FR_0.RFSDOR.R                 /* Receive FIFO Start Data Offset Register */
#define FR_0_RFSYMBADHR      FR_0.RFSYMBADHR.R             /* Receive FIFO System Memory Base Address High Register */
#define FR_0_RFSYMBADLR      FR_0.RFSYMBADLR.R             /* Receive FIFO System Memory Base Address Low Register */
#define FR_0_RFPTR           FR_0.RFPTR.R                  /* Receive FIFO Periodic Timer Register */
#define FR_0_RFFLPCR         FR_0.RFFLPCR.R                /* Receive FIFO Fill Level and POP Count Register */
#define FR_0_EEIFER          FR_0.EEIFER.R                 /* ECC Error Interrupt Flag and Enable Register */
#define FR_0_EERICR          FR_0.EERICR.R                 /* ECC Error Report and Injection Control Register */
#define FR_0_EERAR           FR_0.EERAR.R                  /* ECC Error Report Address Register */
#define FR_0_EERDR           FR_0.EERDR.R                  /* ECC Error Report Data Register */
#define FR_0_EERCR           FR_0.EERCR.R                  /* ECC Error Report Code Register */
#define FR_0_EEIAR           FR_0.EEIAR.R                  /* ECC Error Injection Address Register */
#define FR_0_EEIDR           FR_0.EEIDR.R                  /* ECC Error Injection Data Register */
#define FR_0_EEICR           FR_0.EEICR.R                  /* ECC Error Injection Code Register */
#define FR_0_MBCCSR0         FR_0.MB[0].CCSR.R             /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR0         FR_0.MB[0].CCFR.R             /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR0         FR_0.MB[0].FIDR.R             /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR0         FR_0.MB[0].IDXR.R             /* Message Buffer Index Register */
#define FR_0_MBCCSR1         FR_0.MB[1].CCSR.R             /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR1         FR_0.MB[1].CCFR.R             /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR1         FR_0.MB[1].FIDR.R             /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR1         FR_0.MB[1].IDXR.R             /* Message Buffer Index Register */
#define FR_0_MBCCSR2         FR_0.MB[2].CCSR.R             /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR2         FR_0.MB[2].CCFR.R             /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR2         FR_0.MB[2].FIDR.R             /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR2         FR_0.MB[2].IDXR.R             /* Message Buffer Index Register */
#define FR_0_MBCCSR3         FR_0.MB[3].CCSR.R             /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR3         FR_0.MB[3].CCFR.R             /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR3         FR_0.MB[3].FIDR.R             /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR3         FR_0.MB[3].IDXR.R             /* Message Buffer Index Register */
#define FR_0_MBCCSR4         FR_0.MB[4].CCSR.R             /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR4         FR_0.MB[4].CCFR.R             /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR4         FR_0.MB[4].FIDR.R             /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR4         FR_0.MB[4].IDXR.R             /* Message Buffer Index Register */
#define FR_0_MBCCSR5         FR_0.MB[5].CCSR.R             /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR5         FR_0.MB[5].CCFR.R             /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR5         FR_0.MB[5].FIDR.R             /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR5         FR_0.MB[5].IDXR.R             /* Message Buffer Index Register */
#define FR_0_MBCCSR6         FR_0.MB[6].CCSR.R             /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR6         FR_0.MB[6].CCFR.R             /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR6         FR_0.MB[6].FIDR.R             /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR6         FR_0.MB[6].IDXR.R             /* Message Buffer Index Register */
#define FR_0_MBCCSR7         FR_0.MB[7].CCSR.R             /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR7         FR_0.MB[7].CCFR.R             /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR7         FR_0.MB[7].FIDR.R             /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR7         FR_0.MB[7].IDXR.R             /* Message Buffer Index Register */
#define FR_0_MBCCSR8         FR_0.MB[8].CCSR.R             /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR8         FR_0.MB[8].CCFR.R             /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR8         FR_0.MB[8].FIDR.R             /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR8         FR_0.MB[8].IDXR.R             /* Message Buffer Index Register */
#define FR_0_MBCCSR9         FR_0.MB[9].CCSR.R             /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR9         FR_0.MB[9].CCFR.R             /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR9         FR_0.MB[9].FIDR.R             /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR9         FR_0.MB[9].IDXR.R             /* Message Buffer Index Register */
#define FR_0_MBCCSR10        FR_0.MB[10].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR10        FR_0.MB[10].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR10        FR_0.MB[10].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR10        FR_0.MB[10].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR11        FR_0.MB[11].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR11        FR_0.MB[11].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR11        FR_0.MB[11].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR11        FR_0.MB[11].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR12        FR_0.MB[12].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR12        FR_0.MB[12].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR12        FR_0.MB[12].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR12        FR_0.MB[12].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR13        FR_0.MB[13].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR13        FR_0.MB[13].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR13        FR_0.MB[13].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR13        FR_0.MB[13].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR14        FR_0.MB[14].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR14        FR_0.MB[14].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR14        FR_0.MB[14].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR14        FR_0.MB[14].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR15        FR_0.MB[15].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR15        FR_0.MB[15].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR15        FR_0.MB[15].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR15        FR_0.MB[15].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR16        FR_0.MB[16].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR16        FR_0.MB[16].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR16        FR_0.MB[16].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR16        FR_0.MB[16].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR17        FR_0.MB[17].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR17        FR_0.MB[17].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR17        FR_0.MB[17].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR17        FR_0.MB[17].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR18        FR_0.MB[18].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR18        FR_0.MB[18].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR18        FR_0.MB[18].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR18        FR_0.MB[18].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR19        FR_0.MB[19].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR19        FR_0.MB[19].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR19        FR_0.MB[19].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR19        FR_0.MB[19].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR20        FR_0.MB[20].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR20        FR_0.MB[20].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR20        FR_0.MB[20].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR20        FR_0.MB[20].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR21        FR_0.MB[21].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR21        FR_0.MB[21].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR21        FR_0.MB[21].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR21        FR_0.MB[21].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR22        FR_0.MB[22].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR22        FR_0.MB[22].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR22        FR_0.MB[22].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR22        FR_0.MB[22].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR23        FR_0.MB[23].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR23        FR_0.MB[23].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR23        FR_0.MB[23].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR23        FR_0.MB[23].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR24        FR_0.MB[24].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR24        FR_0.MB[24].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR24        FR_0.MB[24].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR24        FR_0.MB[24].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR25        FR_0.MB[25].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR25        FR_0.MB[25].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR25        FR_0.MB[25].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR25        FR_0.MB[25].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR26        FR_0.MB[26].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR26        FR_0.MB[26].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR26        FR_0.MB[26].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR26        FR_0.MB[26].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR27        FR_0.MB[27].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR27        FR_0.MB[27].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR27        FR_0.MB[27].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR27        FR_0.MB[27].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR28        FR_0.MB[28].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR28        FR_0.MB[28].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR28        FR_0.MB[28].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR28        FR_0.MB[28].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR29        FR_0.MB[29].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR29        FR_0.MB[29].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR29        FR_0.MB[29].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR29        FR_0.MB[29].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR30        FR_0.MB[30].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR30        FR_0.MB[30].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR30        FR_0.MB[30].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR30        FR_0.MB[30].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR31        FR_0.MB[31].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR31        FR_0.MB[31].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR31        FR_0.MB[31].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR31        FR_0.MB[31].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR32        FR_0.MB[32].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR32        FR_0.MB[32].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR32        FR_0.MB[32].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR32        FR_0.MB[32].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR33        FR_0.MB[33].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR33        FR_0.MB[33].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR33        FR_0.MB[33].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR33        FR_0.MB[33].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR34        FR_0.MB[34].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR34        FR_0.MB[34].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR34        FR_0.MB[34].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR34        FR_0.MB[34].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR35        FR_0.MB[35].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR35        FR_0.MB[35].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR35        FR_0.MB[35].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR35        FR_0.MB[35].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR36        FR_0.MB[36].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR36        FR_0.MB[36].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR36        FR_0.MB[36].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR36        FR_0.MB[36].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR37        FR_0.MB[37].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR37        FR_0.MB[37].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR37        FR_0.MB[37].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR37        FR_0.MB[37].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR38        FR_0.MB[38].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR38        FR_0.MB[38].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR38        FR_0.MB[38].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR38        FR_0.MB[38].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR39        FR_0.MB[39].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR39        FR_0.MB[39].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR39        FR_0.MB[39].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR39        FR_0.MB[39].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR40        FR_0.MB[40].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR40        FR_0.MB[40].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR40        FR_0.MB[40].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR40        FR_0.MB[40].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR41        FR_0.MB[41].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR41        FR_0.MB[41].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR41        FR_0.MB[41].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR41        FR_0.MB[41].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR42        FR_0.MB[42].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR42        FR_0.MB[42].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR42        FR_0.MB[42].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR42        FR_0.MB[42].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR43        FR_0.MB[43].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR43        FR_0.MB[43].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR43        FR_0.MB[43].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR43        FR_0.MB[43].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR44        FR_0.MB[44].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR44        FR_0.MB[44].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR44        FR_0.MB[44].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR44        FR_0.MB[44].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR45        FR_0.MB[45].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR45        FR_0.MB[45].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR45        FR_0.MB[45].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR45        FR_0.MB[45].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR46        FR_0.MB[46].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR46        FR_0.MB[46].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR46        FR_0.MB[46].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR46        FR_0.MB[46].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR47        FR_0.MB[47].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR47        FR_0.MB[47].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR47        FR_0.MB[47].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR47        FR_0.MB[47].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR48        FR_0.MB[48].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR48        FR_0.MB[48].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR48        FR_0.MB[48].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR48        FR_0.MB[48].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR49        FR_0.MB[49].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR49        FR_0.MB[49].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR49        FR_0.MB[49].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR49        FR_0.MB[49].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR50        FR_0.MB[50].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR50        FR_0.MB[50].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR50        FR_0.MB[50].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR50        FR_0.MB[50].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR51        FR_0.MB[51].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR51        FR_0.MB[51].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR51        FR_0.MB[51].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR51        FR_0.MB[51].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR52        FR_0.MB[52].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR52        FR_0.MB[52].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR52        FR_0.MB[52].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR52        FR_0.MB[52].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR53        FR_0.MB[53].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR53        FR_0.MB[53].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR53        FR_0.MB[53].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR53        FR_0.MB[53].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR54        FR_0.MB[54].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR54        FR_0.MB[54].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR54        FR_0.MB[54].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR54        FR_0.MB[54].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR55        FR_0.MB[55].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR55        FR_0.MB[55].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR55        FR_0.MB[55].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR55        FR_0.MB[55].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR56        FR_0.MB[56].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR56        FR_0.MB[56].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR56        FR_0.MB[56].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR56        FR_0.MB[56].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR57        FR_0.MB[57].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR57        FR_0.MB[57].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR57        FR_0.MB[57].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR57        FR_0.MB[57].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR58        FR_0.MB[58].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR58        FR_0.MB[58].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR58        FR_0.MB[58].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR58        FR_0.MB[58].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR59        FR_0.MB[59].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR59        FR_0.MB[59].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR59        FR_0.MB[59].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR59        FR_0.MB[59].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR60        FR_0.MB[60].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR60        FR_0.MB[60].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR60        FR_0.MB[60].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR60        FR_0.MB[60].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR61        FR_0.MB[61].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR61        FR_0.MB[61].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR61        FR_0.MB[61].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR61        FR_0.MB[61].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR62        FR_0.MB[62].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR62        FR_0.MB[62].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR62        FR_0.MB[62].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR62        FR_0.MB[62].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR63        FR_0.MB[63].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR63        FR_0.MB[63].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR63        FR_0.MB[63].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR63        FR_0.MB[63].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR64        FR_0.MB[64].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR64        FR_0.MB[64].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR64        FR_0.MB[64].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR64        FR_0.MB[64].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR65        FR_0.MB[65].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR65        FR_0.MB[65].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR65        FR_0.MB[65].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR65        FR_0.MB[65].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR66        FR_0.MB[66].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR66        FR_0.MB[66].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR66        FR_0.MB[66].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR66        FR_0.MB[66].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR67        FR_0.MB[67].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR67        FR_0.MB[67].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR67        FR_0.MB[67].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR67        FR_0.MB[67].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR68        FR_0.MB[68].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR68        FR_0.MB[68].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR68        FR_0.MB[68].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR68        FR_0.MB[68].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR69        FR_0.MB[69].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR69        FR_0.MB[69].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR69        FR_0.MB[69].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR69        FR_0.MB[69].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR70        FR_0.MB[70].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR70        FR_0.MB[70].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR70        FR_0.MB[70].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR70        FR_0.MB[70].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR71        FR_0.MB[71].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR71        FR_0.MB[71].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR71        FR_0.MB[71].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR71        FR_0.MB[71].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR72        FR_0.MB[72].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR72        FR_0.MB[72].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR72        FR_0.MB[72].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR72        FR_0.MB[72].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR73        FR_0.MB[73].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR73        FR_0.MB[73].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR73        FR_0.MB[73].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR73        FR_0.MB[73].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR74        FR_0.MB[74].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR74        FR_0.MB[74].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR74        FR_0.MB[74].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR74        FR_0.MB[74].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR75        FR_0.MB[75].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR75        FR_0.MB[75].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR75        FR_0.MB[75].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR75        FR_0.MB[75].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR76        FR_0.MB[76].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR76        FR_0.MB[76].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR76        FR_0.MB[76].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR76        FR_0.MB[76].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR77        FR_0.MB[77].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR77        FR_0.MB[77].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR77        FR_0.MB[77].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR77        FR_0.MB[77].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR78        FR_0.MB[78].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR78        FR_0.MB[78].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR78        FR_0.MB[78].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR78        FR_0.MB[78].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR79        FR_0.MB[79].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR79        FR_0.MB[79].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR79        FR_0.MB[79].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR79        FR_0.MB[79].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR80        FR_0.MB[80].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR80        FR_0.MB[80].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR80        FR_0.MB[80].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR80        FR_0.MB[80].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR81        FR_0.MB[81].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR81        FR_0.MB[81].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR81        FR_0.MB[81].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR81        FR_0.MB[81].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR82        FR_0.MB[82].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR82        FR_0.MB[82].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR82        FR_0.MB[82].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR82        FR_0.MB[82].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR83        FR_0.MB[83].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR83        FR_0.MB[83].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR83        FR_0.MB[83].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR83        FR_0.MB[83].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR84        FR_0.MB[84].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR84        FR_0.MB[84].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR84        FR_0.MB[84].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR84        FR_0.MB[84].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR85        FR_0.MB[85].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR85        FR_0.MB[85].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR85        FR_0.MB[85].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR85        FR_0.MB[85].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR86        FR_0.MB[86].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR86        FR_0.MB[86].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR86        FR_0.MB[86].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR86        FR_0.MB[86].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR87        FR_0.MB[87].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR87        FR_0.MB[87].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR87        FR_0.MB[87].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR87        FR_0.MB[87].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR88        FR_0.MB[88].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR88        FR_0.MB[88].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR88        FR_0.MB[88].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR88        FR_0.MB[88].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR89        FR_0.MB[89].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR89        FR_0.MB[89].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR89        FR_0.MB[89].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR89        FR_0.MB[89].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR90        FR_0.MB[90].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR90        FR_0.MB[90].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR90        FR_0.MB[90].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR90        FR_0.MB[90].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR91        FR_0.MB[91].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR91        FR_0.MB[91].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR91        FR_0.MB[91].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR91        FR_0.MB[91].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR92        FR_0.MB[92].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR92        FR_0.MB[92].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR92        FR_0.MB[92].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR92        FR_0.MB[92].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR93        FR_0.MB[93].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR93        FR_0.MB[93].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR93        FR_0.MB[93].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR93        FR_0.MB[93].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR94        FR_0.MB[94].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR94        FR_0.MB[94].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR94        FR_0.MB[94].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR94        FR_0.MB[94].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR95        FR_0.MB[95].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR95        FR_0.MB[95].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR95        FR_0.MB[95].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR95        FR_0.MB[95].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR96        FR_0.MB[96].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR96        FR_0.MB[96].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR96        FR_0.MB[96].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR96        FR_0.MB[96].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR97        FR_0.MB[97].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR97        FR_0.MB[97].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR97        FR_0.MB[97].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR97        FR_0.MB[97].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR98        FR_0.MB[98].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR98        FR_0.MB[98].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR98        FR_0.MB[98].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR98        FR_0.MB[98].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR99        FR_0.MB[99].CCSR.R            /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR99        FR_0.MB[99].CCFR.R            /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR99        FR_0.MB[99].FIDR.R            /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR99        FR_0.MB[99].IDXR.R            /* Message Buffer Index Register */
#define FR_0_MBCCSR100       FR_0.MB[100].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR100       FR_0.MB[100].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR100       FR_0.MB[100].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR100       FR_0.MB[100].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR101       FR_0.MB[101].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR101       FR_0.MB[101].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR101       FR_0.MB[101].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR101       FR_0.MB[101].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR102       FR_0.MB[102].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR102       FR_0.MB[102].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR102       FR_0.MB[102].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR102       FR_0.MB[102].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR103       FR_0.MB[103].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR103       FR_0.MB[103].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR103       FR_0.MB[103].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR103       FR_0.MB[103].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR104       FR_0.MB[104].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR104       FR_0.MB[104].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR104       FR_0.MB[104].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR104       FR_0.MB[104].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR105       FR_0.MB[105].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR105       FR_0.MB[105].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR105       FR_0.MB[105].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR105       FR_0.MB[105].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR106       FR_0.MB[106].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR106       FR_0.MB[106].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR106       FR_0.MB[106].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR106       FR_0.MB[106].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR107       FR_0.MB[107].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR107       FR_0.MB[107].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR107       FR_0.MB[107].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR107       FR_0.MB[107].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR108       FR_0.MB[108].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR108       FR_0.MB[108].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR108       FR_0.MB[108].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR108       FR_0.MB[108].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR109       FR_0.MB[109].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR109       FR_0.MB[109].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR109       FR_0.MB[109].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR109       FR_0.MB[109].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR110       FR_0.MB[110].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR110       FR_0.MB[110].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR110       FR_0.MB[110].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR110       FR_0.MB[110].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR111       FR_0.MB[111].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR111       FR_0.MB[111].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR111       FR_0.MB[111].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR111       FR_0.MB[111].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR112       FR_0.MB[112].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR112       FR_0.MB[112].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR112       FR_0.MB[112].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR112       FR_0.MB[112].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR113       FR_0.MB[113].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR113       FR_0.MB[113].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR113       FR_0.MB[113].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR113       FR_0.MB[113].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR114       FR_0.MB[114].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR114       FR_0.MB[114].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR114       FR_0.MB[114].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR114       FR_0.MB[114].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR115       FR_0.MB[115].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR115       FR_0.MB[115].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR115       FR_0.MB[115].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR115       FR_0.MB[115].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR116       FR_0.MB[116].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR116       FR_0.MB[116].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR116       FR_0.MB[116].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR116       FR_0.MB[116].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR117       FR_0.MB[117].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR117       FR_0.MB[117].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR117       FR_0.MB[117].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR117       FR_0.MB[117].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR118       FR_0.MB[118].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR118       FR_0.MB[118].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR118       FR_0.MB[118].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR118       FR_0.MB[118].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR119       FR_0.MB[119].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR119       FR_0.MB[119].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR119       FR_0.MB[119].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR119       FR_0.MB[119].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR120       FR_0.MB[120].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR120       FR_0.MB[120].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR120       FR_0.MB[120].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR120       FR_0.MB[120].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR121       FR_0.MB[121].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR121       FR_0.MB[121].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR121       FR_0.MB[121].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR121       FR_0.MB[121].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR122       FR_0.MB[122].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR122       FR_0.MB[122].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR122       FR_0.MB[122].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR122       FR_0.MB[122].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR123       FR_0.MB[123].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR123       FR_0.MB[123].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR123       FR_0.MB[123].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR123       FR_0.MB[123].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR124       FR_0.MB[124].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR124       FR_0.MB[124].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR124       FR_0.MB[124].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR124       FR_0.MB[124].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR125       FR_0.MB[125].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR125       FR_0.MB[125].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR125       FR_0.MB[125].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR125       FR_0.MB[125].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR126       FR_0.MB[126].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR126       FR_0.MB[126].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR126       FR_0.MB[126].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR126       FR_0.MB[126].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR127       FR_0.MB[127].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR127       FR_0.MB[127].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR127       FR_0.MB[127].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR127       FR_0.MB[127].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR128       FR_0.MB[128].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR128       FR_0.MB[128].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR128       FR_0.MB[128].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR128       FR_0.MB[128].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR129       FR_0.MB[129].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR129       FR_0.MB[129].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR129       FR_0.MB[129].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR129       FR_0.MB[129].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR130       FR_0.MB[130].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR130       FR_0.MB[130].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR130       FR_0.MB[130].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR130       FR_0.MB[130].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR131       FR_0.MB[131].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR131       FR_0.MB[131].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR131       FR_0.MB[131].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR131       FR_0.MB[131].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR132       FR_0.MB[132].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR132       FR_0.MB[132].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR132       FR_0.MB[132].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR132       FR_0.MB[132].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR133       FR_0.MB[133].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR133       FR_0.MB[133].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR133       FR_0.MB[133].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR133       FR_0.MB[133].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR134       FR_0.MB[134].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR134       FR_0.MB[134].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR134       FR_0.MB[134].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR134       FR_0.MB[134].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR135       FR_0.MB[135].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR135       FR_0.MB[135].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR135       FR_0.MB[135].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR135       FR_0.MB[135].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR136       FR_0.MB[136].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR136       FR_0.MB[136].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR136       FR_0.MB[136].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR136       FR_0.MB[136].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR137       FR_0.MB[137].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR137       FR_0.MB[137].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR137       FR_0.MB[137].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR137       FR_0.MB[137].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR138       FR_0.MB[138].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR138       FR_0.MB[138].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR138       FR_0.MB[138].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR138       FR_0.MB[138].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR139       FR_0.MB[139].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR139       FR_0.MB[139].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR139       FR_0.MB[139].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR139       FR_0.MB[139].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR140       FR_0.MB[140].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR140       FR_0.MB[140].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR140       FR_0.MB[140].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR140       FR_0.MB[140].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR141       FR_0.MB[141].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR141       FR_0.MB[141].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR141       FR_0.MB[141].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR141       FR_0.MB[141].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR142       FR_0.MB[142].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR142       FR_0.MB[142].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR142       FR_0.MB[142].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR142       FR_0.MB[142].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR143       FR_0.MB[143].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR143       FR_0.MB[143].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR143       FR_0.MB[143].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR143       FR_0.MB[143].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR144       FR_0.MB[144].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR144       FR_0.MB[144].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR144       FR_0.MB[144].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR144       FR_0.MB[144].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR145       FR_0.MB[145].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR145       FR_0.MB[145].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR145       FR_0.MB[145].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR145       FR_0.MB[145].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR146       FR_0.MB[146].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR146       FR_0.MB[146].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR146       FR_0.MB[146].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR146       FR_0.MB[146].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR147       FR_0.MB[147].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR147       FR_0.MB[147].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR147       FR_0.MB[147].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR147       FR_0.MB[147].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR148       FR_0.MB[148].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR148       FR_0.MB[148].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR148       FR_0.MB[148].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR148       FR_0.MB[148].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR149       FR_0.MB[149].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR149       FR_0.MB[149].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR149       FR_0.MB[149].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR149       FR_0.MB[149].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR150       FR_0.MB[150].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR150       FR_0.MB[150].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR150       FR_0.MB[150].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR150       FR_0.MB[150].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR151       FR_0.MB[151].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR151       FR_0.MB[151].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR151       FR_0.MB[151].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR151       FR_0.MB[151].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR152       FR_0.MB[152].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR152       FR_0.MB[152].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR152       FR_0.MB[152].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR152       FR_0.MB[152].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR153       FR_0.MB[153].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR153       FR_0.MB[153].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR153       FR_0.MB[153].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR153       FR_0.MB[153].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR154       FR_0.MB[154].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR154       FR_0.MB[154].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR154       FR_0.MB[154].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR154       FR_0.MB[154].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR155       FR_0.MB[155].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR155       FR_0.MB[155].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR155       FR_0.MB[155].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR155       FR_0.MB[155].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR156       FR_0.MB[156].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR156       FR_0.MB[156].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR156       FR_0.MB[156].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR156       FR_0.MB[156].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR157       FR_0.MB[157].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR157       FR_0.MB[157].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR157       FR_0.MB[157].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR157       FR_0.MB[157].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR158       FR_0.MB[158].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR158       FR_0.MB[158].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR158       FR_0.MB[158].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR158       FR_0.MB[158].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR159       FR_0.MB[159].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR159       FR_0.MB[159].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR159       FR_0.MB[159].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR159       FR_0.MB[159].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR160       FR_0.MB[160].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR160       FR_0.MB[160].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR160       FR_0.MB[160].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR160       FR_0.MB[160].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR161       FR_0.MB[161].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR161       FR_0.MB[161].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR161       FR_0.MB[161].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR161       FR_0.MB[161].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR162       FR_0.MB[162].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR162       FR_0.MB[162].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR162       FR_0.MB[162].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR162       FR_0.MB[162].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR163       FR_0.MB[163].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR163       FR_0.MB[163].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR163       FR_0.MB[163].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR163       FR_0.MB[163].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR164       FR_0.MB[164].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR164       FR_0.MB[164].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR164       FR_0.MB[164].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR164       FR_0.MB[164].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR165       FR_0.MB[165].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR165       FR_0.MB[165].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR165       FR_0.MB[165].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR165       FR_0.MB[165].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR166       FR_0.MB[166].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR166       FR_0.MB[166].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR166       FR_0.MB[166].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR166       FR_0.MB[166].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR167       FR_0.MB[167].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR167       FR_0.MB[167].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR167       FR_0.MB[167].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR167       FR_0.MB[167].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR168       FR_0.MB[168].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR168       FR_0.MB[168].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR168       FR_0.MB[168].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR168       FR_0.MB[168].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR169       FR_0.MB[169].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR169       FR_0.MB[169].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR169       FR_0.MB[169].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR169       FR_0.MB[169].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR170       FR_0.MB[170].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR170       FR_0.MB[170].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR170       FR_0.MB[170].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR170       FR_0.MB[170].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR171       FR_0.MB[171].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR171       FR_0.MB[171].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR171       FR_0.MB[171].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR171       FR_0.MB[171].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR172       FR_0.MB[172].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR172       FR_0.MB[172].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR172       FR_0.MB[172].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR172       FR_0.MB[172].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR173       FR_0.MB[173].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR173       FR_0.MB[173].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR173       FR_0.MB[173].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR173       FR_0.MB[173].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR174       FR_0.MB[174].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR174       FR_0.MB[174].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR174       FR_0.MB[174].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR174       FR_0.MB[174].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR175       FR_0.MB[175].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR175       FR_0.MB[175].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR175       FR_0.MB[175].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR175       FR_0.MB[175].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR176       FR_0.MB[176].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR176       FR_0.MB[176].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR176       FR_0.MB[176].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR176       FR_0.MB[176].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR177       FR_0.MB[177].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR177       FR_0.MB[177].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR177       FR_0.MB[177].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR177       FR_0.MB[177].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR178       FR_0.MB[178].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR178       FR_0.MB[178].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR178       FR_0.MB[178].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR178       FR_0.MB[178].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR179       FR_0.MB[179].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR179       FR_0.MB[179].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR179       FR_0.MB[179].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR179       FR_0.MB[179].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR180       FR_0.MB[180].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR180       FR_0.MB[180].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR180       FR_0.MB[180].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR180       FR_0.MB[180].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR181       FR_0.MB[181].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR181       FR_0.MB[181].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR181       FR_0.MB[181].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR181       FR_0.MB[181].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR182       FR_0.MB[182].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR182       FR_0.MB[182].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR182       FR_0.MB[182].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR182       FR_0.MB[182].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR183       FR_0.MB[183].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR183       FR_0.MB[183].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR183       FR_0.MB[183].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR183       FR_0.MB[183].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR184       FR_0.MB[184].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR184       FR_0.MB[184].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR184       FR_0.MB[184].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR184       FR_0.MB[184].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR185       FR_0.MB[185].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR185       FR_0.MB[185].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR185       FR_0.MB[185].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR185       FR_0.MB[185].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR186       FR_0.MB[186].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR186       FR_0.MB[186].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR186       FR_0.MB[186].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR186       FR_0.MB[186].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR187       FR_0.MB[187].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR187       FR_0.MB[187].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR187       FR_0.MB[187].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR187       FR_0.MB[187].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR188       FR_0.MB[188].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR188       FR_0.MB[188].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR188       FR_0.MB[188].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR188       FR_0.MB[188].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR189       FR_0.MB[189].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR189       FR_0.MB[189].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR189       FR_0.MB[189].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR189       FR_0.MB[189].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR190       FR_0.MB[190].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR190       FR_0.MB[190].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR190       FR_0.MB[190].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR190       FR_0.MB[190].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR191       FR_0.MB[191].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR191       FR_0.MB[191].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR191       FR_0.MB[191].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR191       FR_0.MB[191].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR192       FR_0.MB[192].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR192       FR_0.MB[192].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR192       FR_0.MB[192].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR192       FR_0.MB[192].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR193       FR_0.MB[193].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR193       FR_0.MB[193].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR193       FR_0.MB[193].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR193       FR_0.MB[193].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR194       FR_0.MB[194].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR194       FR_0.MB[194].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR194       FR_0.MB[194].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR194       FR_0.MB[194].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR195       FR_0.MB[195].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR195       FR_0.MB[195].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR195       FR_0.MB[195].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR195       FR_0.MB[195].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR196       FR_0.MB[196].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR196       FR_0.MB[196].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR196       FR_0.MB[196].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR196       FR_0.MB[196].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR197       FR_0.MB[197].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR197       FR_0.MB[197].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR197       FR_0.MB[197].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR197       FR_0.MB[197].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR198       FR_0.MB[198].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR198       FR_0.MB[198].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR198       FR_0.MB[198].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR198       FR_0.MB[198].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR199       FR_0.MB[199].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR199       FR_0.MB[199].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR199       FR_0.MB[199].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR199       FR_0.MB[199].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR200       FR_0.MB[200].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR200       FR_0.MB[200].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR200       FR_0.MB[200].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR200       FR_0.MB[200].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR201       FR_0.MB[201].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR201       FR_0.MB[201].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR201       FR_0.MB[201].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR201       FR_0.MB[201].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR202       FR_0.MB[202].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR202       FR_0.MB[202].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR202       FR_0.MB[202].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR202       FR_0.MB[202].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR203       FR_0.MB[203].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR203       FR_0.MB[203].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR203       FR_0.MB[203].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR203       FR_0.MB[203].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR204       FR_0.MB[204].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR204       FR_0.MB[204].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR204       FR_0.MB[204].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR204       FR_0.MB[204].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR205       FR_0.MB[205].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR205       FR_0.MB[205].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR205       FR_0.MB[205].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR205       FR_0.MB[205].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR206       FR_0.MB[206].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR206       FR_0.MB[206].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR206       FR_0.MB[206].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR206       FR_0.MB[206].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR207       FR_0.MB[207].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR207       FR_0.MB[207].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR207       FR_0.MB[207].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR207       FR_0.MB[207].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR208       FR_0.MB[208].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR208       FR_0.MB[208].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR208       FR_0.MB[208].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR208       FR_0.MB[208].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR209       FR_0.MB[209].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR209       FR_0.MB[209].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR209       FR_0.MB[209].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR209       FR_0.MB[209].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR210       FR_0.MB[210].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR210       FR_0.MB[210].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR210       FR_0.MB[210].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR210       FR_0.MB[210].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR211       FR_0.MB[211].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR211       FR_0.MB[211].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR211       FR_0.MB[211].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR211       FR_0.MB[211].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR212       FR_0.MB[212].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR212       FR_0.MB[212].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR212       FR_0.MB[212].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR212       FR_0.MB[212].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR213       FR_0.MB[213].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR213       FR_0.MB[213].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR213       FR_0.MB[213].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR213       FR_0.MB[213].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR214       FR_0.MB[214].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR214       FR_0.MB[214].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR214       FR_0.MB[214].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR214       FR_0.MB[214].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR215       FR_0.MB[215].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR215       FR_0.MB[215].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR215       FR_0.MB[215].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR215       FR_0.MB[215].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR216       FR_0.MB[216].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR216       FR_0.MB[216].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR216       FR_0.MB[216].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR216       FR_0.MB[216].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR217       FR_0.MB[217].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR217       FR_0.MB[217].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR217       FR_0.MB[217].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR217       FR_0.MB[217].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR218       FR_0.MB[218].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR218       FR_0.MB[218].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR218       FR_0.MB[218].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR218       FR_0.MB[218].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR219       FR_0.MB[219].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR219       FR_0.MB[219].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR219       FR_0.MB[219].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR219       FR_0.MB[219].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR220       FR_0.MB[220].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR220       FR_0.MB[220].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR220       FR_0.MB[220].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR220       FR_0.MB[220].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR221       FR_0.MB[221].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR221       FR_0.MB[221].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR221       FR_0.MB[221].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR221       FR_0.MB[221].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR222       FR_0.MB[222].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR222       FR_0.MB[222].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR222       FR_0.MB[222].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR222       FR_0.MB[222].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR223       FR_0.MB[223].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR223       FR_0.MB[223].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR223       FR_0.MB[223].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR223       FR_0.MB[223].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR224       FR_0.MB[224].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR224       FR_0.MB[224].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR224       FR_0.MB[224].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR224       FR_0.MB[224].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR225       FR_0.MB[225].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR225       FR_0.MB[225].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR225       FR_0.MB[225].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR225       FR_0.MB[225].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR226       FR_0.MB[226].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR226       FR_0.MB[226].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR226       FR_0.MB[226].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR226       FR_0.MB[226].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR227       FR_0.MB[227].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR227       FR_0.MB[227].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR227       FR_0.MB[227].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR227       FR_0.MB[227].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR228       FR_0.MB[228].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR228       FR_0.MB[228].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR228       FR_0.MB[228].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR228       FR_0.MB[228].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR229       FR_0.MB[229].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR229       FR_0.MB[229].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR229       FR_0.MB[229].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR229       FR_0.MB[229].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR230       FR_0.MB[230].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR230       FR_0.MB[230].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR230       FR_0.MB[230].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR230       FR_0.MB[230].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR231       FR_0.MB[231].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR231       FR_0.MB[231].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR231       FR_0.MB[231].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR231       FR_0.MB[231].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR232       FR_0.MB[232].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR232       FR_0.MB[232].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR232       FR_0.MB[232].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR232       FR_0.MB[232].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR233       FR_0.MB[233].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR233       FR_0.MB[233].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR233       FR_0.MB[233].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR233       FR_0.MB[233].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR234       FR_0.MB[234].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR234       FR_0.MB[234].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR234       FR_0.MB[234].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR234       FR_0.MB[234].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR235       FR_0.MB[235].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR235       FR_0.MB[235].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR235       FR_0.MB[235].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR235       FR_0.MB[235].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR236       FR_0.MB[236].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR236       FR_0.MB[236].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR236       FR_0.MB[236].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR236       FR_0.MB[236].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR237       FR_0.MB[237].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR237       FR_0.MB[237].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR237       FR_0.MB[237].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR237       FR_0.MB[237].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR238       FR_0.MB[238].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR238       FR_0.MB[238].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR238       FR_0.MB[238].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR238       FR_0.MB[238].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR239       FR_0.MB[239].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR239       FR_0.MB[239].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR239       FR_0.MB[239].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR239       FR_0.MB[239].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR240       FR_0.MB[240].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR240       FR_0.MB[240].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR240       FR_0.MB[240].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR240       FR_0.MB[240].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR241       FR_0.MB[241].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR241       FR_0.MB[241].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR241       FR_0.MB[241].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR241       FR_0.MB[241].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR242       FR_0.MB[242].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR242       FR_0.MB[242].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR242       FR_0.MB[242].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR242       FR_0.MB[242].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR243       FR_0.MB[243].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR243       FR_0.MB[243].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR243       FR_0.MB[243].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR243       FR_0.MB[243].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR244       FR_0.MB[244].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR244       FR_0.MB[244].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR244       FR_0.MB[244].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR244       FR_0.MB[244].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR245       FR_0.MB[245].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR245       FR_0.MB[245].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR245       FR_0.MB[245].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR245       FR_0.MB[245].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR246       FR_0.MB[246].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR246       FR_0.MB[246].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR246       FR_0.MB[246].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR246       FR_0.MB[246].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR247       FR_0.MB[247].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR247       FR_0.MB[247].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR247       FR_0.MB[247].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR247       FR_0.MB[247].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR248       FR_0.MB[248].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR248       FR_0.MB[248].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR248       FR_0.MB[248].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR248       FR_0.MB[248].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR249       FR_0.MB[249].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR249       FR_0.MB[249].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR249       FR_0.MB[249].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR249       FR_0.MB[249].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR250       FR_0.MB[250].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR250       FR_0.MB[250].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR250       FR_0.MB[250].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR250       FR_0.MB[250].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR251       FR_0.MB[251].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR251       FR_0.MB[251].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR251       FR_0.MB[251].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR251       FR_0.MB[251].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR252       FR_0.MB[252].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR252       FR_0.MB[252].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR252       FR_0.MB[252].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR252       FR_0.MB[252].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR253       FR_0.MB[253].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR253       FR_0.MB[253].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR253       FR_0.MB[253].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR253       FR_0.MB[253].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR254       FR_0.MB[254].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR254       FR_0.MB[254].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR254       FR_0.MB[254].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR254       FR_0.MB[254].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBCCSR255       FR_0.MB[255].CCSR.R           /* Message Buffer Configuration Control Status Register */
#define FR_0_MBCCFR255       FR_0.MB[255].CCFR.R           /* Message Buffer Cycle Counter Filter Register */
#define FR_0_MBFIDR255       FR_0.MB[255].FIDR.R           /* Message Buffer Frame ID Register */
#define FR_0_MBIDXR255       FR_0.MB[255].IDXR.R           /* Message Buffer Index Register */
#define FR_0_MBDOR0          FR_0.MBDOR[0].R               /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR1          FR_0.MBDOR[1].R               /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR2          FR_0.MBDOR[2].R               /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR3          FR_0.MBDOR[3].R               /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR4          FR_0.MBDOR[4].R               /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR5          FR_0.MBDOR[5].R               /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR6          FR_0.MBDOR[6].R               /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR7          FR_0.MBDOR[7].R               /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR8          FR_0.MBDOR[8].R               /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR9          FR_0.MBDOR[9].R               /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR10         FR_0.MBDOR[10].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR11         FR_0.MBDOR[11].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR12         FR_0.MBDOR[12].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR13         FR_0.MBDOR[13].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR14         FR_0.MBDOR[14].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR15         FR_0.MBDOR[15].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR16         FR_0.MBDOR[16].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR17         FR_0.MBDOR[17].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR18         FR_0.MBDOR[18].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR19         FR_0.MBDOR[19].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR20         FR_0.MBDOR[20].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR21         FR_0.MBDOR[21].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR22         FR_0.MBDOR[22].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR23         FR_0.MBDOR[23].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR24         FR_0.MBDOR[24].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR25         FR_0.MBDOR[25].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR26         FR_0.MBDOR[26].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR27         FR_0.MBDOR[27].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR28         FR_0.MBDOR[28].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR29         FR_0.MBDOR[29].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR30         FR_0.MBDOR[30].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR31         FR_0.MBDOR[31].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR32         FR_0.MBDOR[32].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR33         FR_0.MBDOR[33].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR34         FR_0.MBDOR[34].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR35         FR_0.MBDOR[35].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR36         FR_0.MBDOR[36].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR37         FR_0.MBDOR[37].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR38         FR_0.MBDOR[38].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR39         FR_0.MBDOR[39].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR40         FR_0.MBDOR[40].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR41         FR_0.MBDOR[41].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR42         FR_0.MBDOR[42].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR43         FR_0.MBDOR[43].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR44         FR_0.MBDOR[44].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR45         FR_0.MBDOR[45].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR46         FR_0.MBDOR[46].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR47         FR_0.MBDOR[47].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR48         FR_0.MBDOR[48].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR49         FR_0.MBDOR[49].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR50         FR_0.MBDOR[50].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR51         FR_0.MBDOR[51].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR52         FR_0.MBDOR[52].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR53         FR_0.MBDOR[53].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR54         FR_0.MBDOR[54].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR55         FR_0.MBDOR[55].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR56         FR_0.MBDOR[56].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR57         FR_0.MBDOR[57].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR58         FR_0.MBDOR[58].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR59         FR_0.MBDOR[59].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR60         FR_0.MBDOR[60].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR61         FR_0.MBDOR[61].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR62         FR_0.MBDOR[62].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR63         FR_0.MBDOR[63].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR64         FR_0.MBDOR[64].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR65         FR_0.MBDOR[65].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR66         FR_0.MBDOR[66].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR67         FR_0.MBDOR[67].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR68         FR_0.MBDOR[68].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR69         FR_0.MBDOR[69].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR70         FR_0.MBDOR[70].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR71         FR_0.MBDOR[71].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR72         FR_0.MBDOR[72].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR73         FR_0.MBDOR[73].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR74         FR_0.MBDOR[74].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR75         FR_0.MBDOR[75].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR76         FR_0.MBDOR[76].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR77         FR_0.MBDOR[77].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR78         FR_0.MBDOR[78].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR79         FR_0.MBDOR[79].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR80         FR_0.MBDOR[80].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR81         FR_0.MBDOR[81].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR82         FR_0.MBDOR[82].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR83         FR_0.MBDOR[83].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR84         FR_0.MBDOR[84].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR85         FR_0.MBDOR[85].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR86         FR_0.MBDOR[86].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR87         FR_0.MBDOR[87].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR88         FR_0.MBDOR[88].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR89         FR_0.MBDOR[89].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR90         FR_0.MBDOR[90].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR91         FR_0.MBDOR[91].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR92         FR_0.MBDOR[92].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR93         FR_0.MBDOR[93].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR94         FR_0.MBDOR[94].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR95         FR_0.MBDOR[95].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR96         FR_0.MBDOR[96].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR97         FR_0.MBDOR[97].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR98         FR_0.MBDOR[98].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR99         FR_0.MBDOR[99].R              /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR100        FR_0.MBDOR[100].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR101        FR_0.MBDOR[101].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR102        FR_0.MBDOR[102].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR103        FR_0.MBDOR[103].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR104        FR_0.MBDOR[104].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR105        FR_0.MBDOR[105].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR106        FR_0.MBDOR[106].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR107        FR_0.MBDOR[107].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR108        FR_0.MBDOR[108].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR109        FR_0.MBDOR[109].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR110        FR_0.MBDOR[110].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR111        FR_0.MBDOR[111].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR112        FR_0.MBDOR[112].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR113        FR_0.MBDOR[113].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR114        FR_0.MBDOR[114].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR115        FR_0.MBDOR[115].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR116        FR_0.MBDOR[116].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR117        FR_0.MBDOR[117].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR118        FR_0.MBDOR[118].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR119        FR_0.MBDOR[119].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR120        FR_0.MBDOR[120].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR121        FR_0.MBDOR[121].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR122        FR_0.MBDOR[122].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR123        FR_0.MBDOR[123].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR124        FR_0.MBDOR[124].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR125        FR_0.MBDOR[125].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR126        FR_0.MBDOR[126].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR127        FR_0.MBDOR[127].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR128        FR_0.MBDOR[128].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR129        FR_0.MBDOR[129].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR130        FR_0.MBDOR[130].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR131        FR_0.MBDOR[131].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR132        FR_0.MBDOR[132].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR133        FR_0.MBDOR[133].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR134        FR_0.MBDOR[134].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR135        FR_0.MBDOR[135].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR136        FR_0.MBDOR[136].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR137        FR_0.MBDOR[137].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR138        FR_0.MBDOR[138].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR139        FR_0.MBDOR[139].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR140        FR_0.MBDOR[140].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR141        FR_0.MBDOR[141].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR142        FR_0.MBDOR[142].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR143        FR_0.MBDOR[143].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR144        FR_0.MBDOR[144].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR145        FR_0.MBDOR[145].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR146        FR_0.MBDOR[146].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR147        FR_0.MBDOR[147].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR148        FR_0.MBDOR[148].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR149        FR_0.MBDOR[149].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR150        FR_0.MBDOR[150].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR151        FR_0.MBDOR[151].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR152        FR_0.MBDOR[152].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR153        FR_0.MBDOR[153].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR154        FR_0.MBDOR[154].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR155        FR_0.MBDOR[155].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR156        FR_0.MBDOR[156].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR157        FR_0.MBDOR[157].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR158        FR_0.MBDOR[158].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR159        FR_0.MBDOR[159].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR160        FR_0.MBDOR[160].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR161        FR_0.MBDOR[161].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR162        FR_0.MBDOR[162].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR163        FR_0.MBDOR[163].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR164        FR_0.MBDOR[164].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR165        FR_0.MBDOR[165].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR166        FR_0.MBDOR[166].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR167        FR_0.MBDOR[167].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR168        FR_0.MBDOR[168].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR169        FR_0.MBDOR[169].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR170        FR_0.MBDOR[170].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR171        FR_0.MBDOR[171].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR172        FR_0.MBDOR[172].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR173        FR_0.MBDOR[173].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR174        FR_0.MBDOR[174].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR175        FR_0.MBDOR[175].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR176        FR_0.MBDOR[176].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR177        FR_0.MBDOR[177].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR178        FR_0.MBDOR[178].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR179        FR_0.MBDOR[179].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR180        FR_0.MBDOR[180].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR181        FR_0.MBDOR[181].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR182        FR_0.MBDOR[182].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR183        FR_0.MBDOR[183].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR184        FR_0.MBDOR[184].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR185        FR_0.MBDOR[185].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR186        FR_0.MBDOR[186].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR187        FR_0.MBDOR[187].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR188        FR_0.MBDOR[188].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR189        FR_0.MBDOR[189].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR190        FR_0.MBDOR[190].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR191        FR_0.MBDOR[191].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR192        FR_0.MBDOR[192].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR193        FR_0.MBDOR[193].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR194        FR_0.MBDOR[194].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR195        FR_0.MBDOR[195].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR196        FR_0.MBDOR[196].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR197        FR_0.MBDOR[197].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR198        FR_0.MBDOR[198].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR199        FR_0.MBDOR[199].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR200        FR_0.MBDOR[200].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR201        FR_0.MBDOR[201].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR202        FR_0.MBDOR[202].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR203        FR_0.MBDOR[203].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR204        FR_0.MBDOR[204].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR205        FR_0.MBDOR[205].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR206        FR_0.MBDOR[206].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR207        FR_0.MBDOR[207].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR208        FR_0.MBDOR[208].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR209        FR_0.MBDOR[209].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR210        FR_0.MBDOR[210].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR211        FR_0.MBDOR[211].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR212        FR_0.MBDOR[212].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR213        FR_0.MBDOR[213].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR214        FR_0.MBDOR[214].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR215        FR_0.MBDOR[215].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR216        FR_0.MBDOR[216].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR217        FR_0.MBDOR[217].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR218        FR_0.MBDOR[218].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR219        FR_0.MBDOR[219].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR220        FR_0.MBDOR[220].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR221        FR_0.MBDOR[221].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR222        FR_0.MBDOR[222].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR223        FR_0.MBDOR[223].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR224        FR_0.MBDOR[224].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR225        FR_0.MBDOR[225].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR226        FR_0.MBDOR[226].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR227        FR_0.MBDOR[227].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR228        FR_0.MBDOR[228].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR229        FR_0.MBDOR[229].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR230        FR_0.MBDOR[230].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR231        FR_0.MBDOR[231].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR232        FR_0.MBDOR[232].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR233        FR_0.MBDOR[233].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR234        FR_0.MBDOR[234].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR235        FR_0.MBDOR[235].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR236        FR_0.MBDOR[236].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR237        FR_0.MBDOR[237].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR238        FR_0.MBDOR[238].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR239        FR_0.MBDOR[239].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR240        FR_0.MBDOR[240].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR241        FR_0.MBDOR[241].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR242        FR_0.MBDOR[242].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR243        FR_0.MBDOR[243].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR244        FR_0.MBDOR[244].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR245        FR_0.MBDOR[245].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR246        FR_0.MBDOR[246].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR247        FR_0.MBDOR[247].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR248        FR_0.MBDOR[248].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR249        FR_0.MBDOR[249].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR250        FR_0.MBDOR[250].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR251        FR_0.MBDOR[251].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR252        FR_0.MBDOR[252].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR253        FR_0.MBDOR[253].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR254        FR_0.MBDOR[254].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR255        FR_0.MBDOR[255].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR256        FR_0.MBDOR[256].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR257        FR_0.MBDOR[257].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR258        FR_0.MBDOR[258].R             /* Message Buffer Data Field Offset Register */
#define FR_0_MBDOR259        FR_0.MBDOR[259].R             /* Message Buffer Data Field Offset Register */
#define FR_0_LEETR0          FR_0.LEETR[0].R               /* LRAM ECC Error Test Register */
#define FR_0_LEETR1          FR_0.LEETR[1].R               /* LRAM ECC Error Test Register */
#define FR_0_LEETR2          FR_0.LEETR[2].R               /* LRAM ECC Error Test Register */
#define FR_0_LEETR3          FR_0.LEETR[3].R               /* LRAM ECC Error Test Register */
#define FR_0_LEETR4          FR_0.LEETR[4].R               /* LRAM ECC Error Test Register */
#define FR_0_LEETR5          FR_0.LEETR[5].R               /* LRAM ECC Error Test Register */

/* FLEXTIMER */
#define FTM_1_SC             FTM_1.SC.R                    /* Status And Control */
#define FTM_1_CNT            FTM_1.CNT.R                   /* Counter */
#define FTM_1_MOD            FTM_1.MOD.R                   /* Modulo */
#define FTM_1_C0SC           FTM_1.CONTROLS[0].CSC.R       /* Channel (n) Status And Control */
#define FTM_1_C0V            FTM_1.CONTROLS[0].CV.R        /* Channel (n) Value */
#define FTM_1_C1SC           FTM_1.CONTROLS[1].CSC.R       /* Channel (n) Status And Control */
#define FTM_1_C1V            FTM_1.CONTROLS[1].CV.R        /* Channel (n) Value */
#define FTM_1_C2SC           FTM_1.CONTROLS[2].CSC.R       /* Channel (n) Status And Control */
#define FTM_1_C2V            FTM_1.CONTROLS[2].CV.R        /* Channel (n) Value */
#define FTM_1_C3SC           FTM_1.CONTROLS[3].CSC.R       /* Channel (n) Status And Control */
#define FTM_1_C3V            FTM_1.CONTROLS[3].CV.R        /* Channel (n) Value */
#define FTM_1_C4SC           FTM_1.CONTROLS[4].CSC.R       /* Channel (n) Status And Control */
#define FTM_1_C4V            FTM_1.CONTROLS[4].CV.R        /* Channel (n) Value */
#define FTM_1_C5SC           FTM_1.CONTROLS[5].CSC.R       /* Channel (n) Status And Control */
#define FTM_1_C5V            FTM_1.CONTROLS[5].CV.R        /* Channel (n) Value */
#define FTM_1_CNTIN          FTM_1.CNTIN.R                 /* Counter Initial Value */
#define FTM_1_STATUS         FTM_1.STATUS.R                /* Capture And Compare Status */
#define FTM_1_MODE           FTM_1.MODE.R                  /* Features Mode Selection */
#define FTM_1_SYNC           FTM_1.SYNC.R                  /* Synchronization */
#define FTM_1_OUTINIT        FTM_1.OUTINIT.R               /* Initial State For Channels Output */
#define FTM_1_OUTMASK        FTM_1.OUTMASK.R               /* Output Mask */
#define FTM_1_COMBINE        FTM_1.COMBINE.R               /* Function For Linked Channels */
#define FTM_1_DEADTIME       FTM_1.DEADTIME.R              /* Deadtime Configuration */
#define FTM_1_EXTTRIG        FTM_1.EXTTRIG.R               /* FTM External Trigger */
#define FTM_1_POL            FTM_1.POL.R                   /* Channels Polarity */
#define FTM_1_FMS            FTM_1.FMS.R                   /* Fault Mode Status */
#define FTM_1_FILTER         FTM_1.FILTER.R                /* Input Capture Filter Control */
#define FTM_1_QDCTRL         FTM_1.QDCTRL.R                /* Quadrature Decoder Control And Status */
#define FTM_1_CONF           FTM_1.CONF.R                  /* Configuration */
#define FTM_1_SYNCONF        FTM_1.SYNCONF.R               /* Synchronization Configuration */
#define FTM_1_INVCTRL        FTM_1.INVCTRL.R               /* FTM Inverting Control */
#define FTM_1_SWOCTRL        FTM_1.SWOCTRL.R               /* FTM Software Output Control */
#define FTM_1_PWMLOAD        FTM_1.PWMLOAD.R               /* FTM PWM Load */
#define FTM_1_HCR            FTM_1.HCR.R                   /* Half Cycle Register */
#define FTM_1_MOD_MIRROR     FTM_1.MOD_MIRROR.R            /* Mirror of Modulo Value */
#define FTM_1_C0V_MIRROR     FTM_1.CV_MIRROR[0].R          /* Mirror of Channel (n) Match Value */
#define FTM_1_C1V_MIRROR     FTM_1.CV_MIRROR[1].R          /* Mirror of Channel (n) Match Value */
#define FTM_1_C2V_MIRROR     FTM_1.CV_MIRROR[2].R          /* Mirror of Channel (n) Match Value */
#define FTM_1_C3V_MIRROR     FTM_1.CV_MIRROR[3].R          /* Mirror of Channel (n) Match Value */
#define FTM_1_C4V_MIRROR     FTM_1.CV_MIRROR[4].R          /* Mirror of Channel (n) Match Value */
#define FTM_1_C5V_MIRROR     FTM_1.CV_MIRROR[5].R          /* Mirror of Channel (n) Match Value */

#define FTM_0_SC             FTM_0.SC.R                    /* Status And Control */
#define FTM_0_CNT            FTM_0.CNT.R                   /* Counter */
#define FTM_0_MOD            FTM_0.MOD.R                   /* Modulo */
#define FTM_0_C0SC           FTM_0.CONTROLS[0].CSC.R       /* Channel (n) Status And Control */
#define FTM_0_C0V            FTM_0.CONTROLS[0].CV.R        /* Channel (n) Value */
#define FTM_0_C1SC           FTM_0.CONTROLS[1].CSC.R       /* Channel (n) Status And Control */
#define FTM_0_C1V            FTM_0.CONTROLS[1].CV.R        /* Channel (n) Value */
#define FTM_0_C2SC           FTM_0.CONTROLS[2].CSC.R       /* Channel (n) Status And Control */
#define FTM_0_C2V            FTM_0.CONTROLS[2].CV.R        /* Channel (n) Value */
#define FTM_0_C3SC           FTM_0.CONTROLS[3].CSC.R       /* Channel (n) Status And Control */
#define FTM_0_C3V            FTM_0.CONTROLS[3].CV.R        /* Channel (n) Value */
#define FTM_0_C4SC           FTM_0.CONTROLS[4].CSC.R       /* Channel (n) Status And Control */
#define FTM_0_C4V            FTM_0.CONTROLS[4].CV.R        /* Channel (n) Value */
#define FTM_0_C5SC           FTM_0.CONTROLS[5].CSC.R       /* Channel (n) Status And Control */
#define FTM_0_C5V            FTM_0.CONTROLS[5].CV.R        /* Channel (n) Value */
#define FTM_0_CNTIN          FTM_0.CNTIN.R                 /* Counter Initial Value */
#define FTM_0_STATUS         FTM_0.STATUS.R                /* Capture And Compare Status */
#define FTM_0_MODE           FTM_0.MODE.R                  /* Features Mode Selection */
#define FTM_0_SYNC           FTM_0.SYNC.R                  /* Synchronization */
#define FTM_0_OUTINIT        FTM_0.OUTINIT.R               /* Initial State For Channels Output */
#define FTM_0_OUTMASK        FTM_0.OUTMASK.R               /* Output Mask */
#define FTM_0_COMBINE        FTM_0.COMBINE.R               /* Function For Linked Channels */
#define FTM_0_DEADTIME       FTM_0.DEADTIME.R              /* Deadtime Configuration */
#define FTM_0_EXTTRIG        FTM_0.EXTTRIG.R               /* FTM External Trigger */
#define FTM_0_POL            FTM_0.POL.R                   /* Channels Polarity */
#define FTM_0_FMS            FTM_0.FMS.R                   /* Fault Mode Status */
#define FTM_0_FILTER         FTM_0.FILTER.R                /* Input Capture Filter Control */
#define FTM_0_QDCTRL         FTM_0.QDCTRL.R                /* Quadrature Decoder Control And Status */
#define FTM_0_CONF           FTM_0.CONF.R                  /* Configuration */
#define FTM_0_SYNCONF        FTM_0.SYNCONF.R               /* Synchronization Configuration */
#define FTM_0_INVCTRL        FTM_0.INVCTRL.R               /* FTM Inverting Control */
#define FTM_0_SWOCTRL        FTM_0.SWOCTRL.R               /* FTM Software Output Control */
#define FTM_0_PWMLOAD        FTM_0.PWMLOAD.R               /* FTM PWM Load */
#define FTM_0_HCR            FTM_0.HCR.R                   /* Half Cycle Register */
#define FTM_0_MOD_MIRROR     FTM_0.MOD_MIRROR.R            /* Mirror of Modulo Value */
#define FTM_0_C0V_MIRROR     FTM_0.CV_MIRROR[0].R          /* Mirror of Channel (n) Match Value */
#define FTM_0_C1V_MIRROR     FTM_0.CV_MIRROR[1].R          /* Mirror of Channel (n) Match Value */
#define FTM_0_C2V_MIRROR     FTM_0.CV_MIRROR[2].R          /* Mirror of Channel (n) Match Value */
#define FTM_0_C3V_MIRROR     FTM_0.CV_MIRROR[3].R          /* Mirror of Channel (n) Match Value */
#define FTM_0_C4V_MIRROR     FTM_0.CV_MIRROR[4].R          /* Mirror of Channel (n) Match Value */
#define FTM_0_C5V_MIRROR     FTM_0.CV_MIRROR[5].R          /* Mirror of Channel (n) Match Value */

/* FSC */
#define FSC_SCBISTC          FSC.SCBISTC.R                 /* FSC BIST Control */
#define FSC_SCBISTA          FSC.SCBISTA.R                 /* FSC BIST Activity */
#define FSC_SCCETH           FSC.SCCETH.R                  /* FSC Correctable Errors Threshold */
#define FSC_SCLF0            FSC.SCLF0.R                   /* FSC Latent Fault */
#define FSC_SCMF0            FSC.SCMF0.R                   /* FSC Mission Fault */
#define FSC_SCCETHF0         FSC.SCCETHF0.R                /* FSC Correctble Error Threshold Fault */

/* FXOSC */
#define FXOSC_CTRL           FXOSC.CTRL.R                  /* FXOSC Control Register */
#define FXOSC_STAT           FXOSC.STAT.R                  /* Oscillator Status Register */

/* GMAC */
#define GMAC_0_MAC_Configuration GMAC_0.MAC_CONFIGURATION.R /*  */
#define GMAC_0_MAC_Ext_Configuration GMAC_0.MAC_EXT_CONFIGURATION.R /*  */
#define GMAC_0_MAC_Packet_Filter GMAC_0.MAC_PACKET_FILTER.R /*  */
#define GMAC_0_MAC_Watchdog_Timeout GMAC_0.MAC_WATCHDOG_TIMEOUT.R /*  */
#define GMAC_0_MAC_Hash_Table_Reg0 GMAC_0.MAC_HASH_TABLE_REG0.R /*  */
#define GMAC_0_MAC_Hash_Table_Reg1 GMAC_0.MAC_HASH_TABLE_REG1.R /*  */
#define GMAC_0_MAC_Hash_Table_Reg2 GMAC_0.MAC_HASH_TABLE_REG2.R /*  */
#define GMAC_0_MAC_Hash_Table_Reg3 GMAC_0.MAC_HASH_TABLE_REG3.R /*  */
#define GMAC_0_MAC_Hash_Table_Reg4 GMAC_0.MAC_HASH_TABLE_REG4.R /*  */
#define GMAC_0_MAC_Hash_Table_Reg5 GMAC_0.MAC_HASH_TABLE_REG5.R /*  */
#define GMAC_0_MAC_Hash_Table_Reg6 GMAC_0.MAC_HASH_TABLE_REG6.R /*  */
#define GMAC_0_MAC_Hash_Table_Reg7 GMAC_0.MAC_HASH_TABLE_REG7.R /*  */
#define GMAC_0_MAC_VLAN_Tag_Ctrl GMAC_0.MAC_VLAN_TAG_CTRL.R /*  */
#define GMAC_0_MAC_VLAN_Tag_Data GMAC_0.MAC_VLAN_TAG_DATA.R /*  */
#define GMAC_0_MAC_VLAN_Hash_Table GMAC_0.MAC_VLAN_HASH_TABLE.R /*  */
#define GMAC_0_MAC_VLAN_Incl GMAC_0.MAC_VLAN_INCL.R        /*  */
#define GMAC_0_MAC_Inner_VLAN_Incl GMAC_0.MAC_INNER_VLAN_INCL.R /*  */
#define GMAC_0_MAC_Q0_Tx_Flow_Ctrl GMAC_0.MAC_Q0_TX_FLOW_CTRL.R /*  */
#define GMAC_0_MAC_Q1_Tx_Flow_Ctrl GMAC_0.MAC_Q1_TX_FLOW_CTRL.R /*  */
#define GMAC_0_MAC_Q2_Tx_Flow_Ctrl GMAC_0.MAC_Q2_TX_FLOW_CTRL.R /*  */
#define GMAC_0_MAC_Q3_Tx_Flow_Ctrl GMAC_0.MAC_Q3_TX_FLOW_CTRL.R /*  */
#define GMAC_0_MAC_Q4_Tx_Flow_Ctrl GMAC_0.MAC_Q4_TX_FLOW_CTRL.R /*  */
#define GMAC_0_MAC_Rx_Flow_Ctrl GMAC_0.MAC_RX_FLOW_CTRL.R  /*  */
#define GMAC_0_MAC_RxQ_Ctrl4 GMAC_0.MAC_RXQ_CTRL4.R        /*  */
#define GMAC_0_MAC_TxQ_Prty_Map0 GMAC_0.MAC_TXQ_PRTY_MAP0.R /*  */
#define GMAC_0_MAC_TxQ_Prty_Map1 GMAC_0.MAC_TXQ_PRTY_MAP1.R /*  */
#define GMAC_0_MAC_RxQ_Ctrl0 GMAC_0.MAC_RXQ_CTRL0.R        /*  */
#define GMAC_0_MAC_RxQ_Ctrl1 GMAC_0.MAC_RXQ_CTRL1.R        /*  */
#define GMAC_0_MAC_RxQ_Ctrl2 GMAC_0.MAC_RXQ_CTRL2.R        /*  */
#define GMAC_0_MAC_RxQ_Ctrl3 GMAC_0.MAC_RXQ_CTRL3.R        /*  */
#define GMAC_0_MAC_Interrupt_Status GMAC_0.MAC_INTERRUPT_STATUS.R /*  */
#define GMAC_0_MAC_Interrupt_Enable GMAC_0.MAC_INTERRUPT_ENABLE.R /*  */
#define GMAC_0_MAC_Rx_Tx_Status GMAC_0.MAC_RX_TX_STATUS.R  /*  */
#define GMAC_0_MAC_PMT_Control_Status GMAC_0.MAC_PMT_CONTROL_STATUS.R /*  */
#define GMAC_0_MAC_RWK_Packet_Filter GMAC_0.MAC_RWK_PACKET_FILTER.R /*  */
#define GMAC_0_MAC_PHYIF_Control_Status GMAC_0.MAC_PHYIF_CONTROL_STATUS.R /*  */
#define GMAC_0_MAC_Version   GMAC_0.MAC_VERSION.R          /*  */
#define GMAC_0_MAC_Debug     GMAC_0.MAC_DEBUG.R            /*  */
#define GMAC_0_MAC_HW_Feature0 GMAC_0.MAC_HW_FEATURE0.R    /*  */
#define GMAC_0_MAC_HW_Feature1 GMAC_0.MAC_HW_FEATURE1.R    /*  */
#define GMAC_0_MAC_HW_Feature2 GMAC_0.MAC_HW_FEATURE2.R    /*  */
#define GMAC_0_MAC_HW_Feature3 GMAC_0.MAC_HW_FEATURE3.R    /*  */
#define GMAC_0_MAC_DPP_FSM_Interrupt_Status GMAC_0.MAC_DPP_FSM_INTERRUPT_STATUS.R /*  */
#define GMAC_0_MAC_FSM_Control GMAC_0.MAC_FSM_CONTROL.R    /*  */
#define GMAC_0_MAC_FSM_ACT_Timer GMAC_0.MAC_FSM_ACT_TIMER.R /*  */
#define GMAC_0_SCS_REG1      GMAC_0.SCS_REG1.R             /*  */
#define GMAC_0_MAC_MDIO_Address GMAC_0.MAC_MDIO_ADDRESS.R  /*  */
#define GMAC_0_MAC_MDIO_Data GMAC_0.MAC_MDIO_DATA.R        /*  */
#define GMAC_0_MAC_ARP_Address GMAC_0.MAC_ARP_ADDRESS.R    /*  */
#define GMAC_0_MAC_CSR_SW_Ctrl GMAC_0.MAC_CSR_SW_CTRL.R    /*  */
#define GMAC_0_MAC_FPE_CTRL_STS GMAC_0.MAC_FPE_CTRL_STS.R  /*  */
#define GMAC_0_MAC_Ext_Cfg1  GMAC_0.MAC_EXT_CFG1.R         /*  */
#define GMAC_0_MAC_Presn_Time_ns GMAC_0.MAC_PRESN_TIME_NS.R /*  */
#define GMAC_0_MAC_Presn_Time_Updt GMAC_0.MAC_PRESN_TIME_UPDT.R /*  */
#define GMAC_0_MAC_Address0_High GMAC_0.MAC_ADDRESS0_HIGH.R /*  */
#define GMAC_0_MAC_Address0_Low GMAC_0.MAC_ADDRESS0_LOW.R  /*  */
#define GMAC_0_MAC_Address1_High GMAC_0.MAC_ADDRESS1_HIGH.R /*  */
#define GMAC_0_MAC_Address1_Low GMAC_0.MAC_ADDRESS1_LOW.R  /*  */
#define GMAC_0_MMC_Control   GMAC_0.MMC_CONTROL.R          /*  */
#define GMAC_0_MMC_Rx_Interrupt GMAC_0.MMC_RX_INTERRUPT.R  /*  */
#define GMAC_0_MMC_Tx_Interrupt GMAC_0.MMC_TX_INTERRUPT.R  /*  */
#define GMAC_0_MMC_Rx_Interrupt_Mask GMAC_0.MMC_RX_INTERRUPT_MASK.R /*  */
#define GMAC_0_MMC_Tx_Interrupt_Mask GMAC_0.MMC_TX_INTERRUPT_MASK.R /*  */
#define GMAC_0_Tx_Octet_Count_Good_Bad GMAC_0.TX_OCTET_COUNT_GOOD_BAD.R /*  */
#define GMAC_0_Tx_Packet_Count_Good_Bad GMAC_0.TX_PACKET_COUNT_GOOD_BAD.R /*  */
#define GMAC_0_Tx_Broadcast_Packets_Good GMAC_0.TX_BROADCAST_PACKETS_GOOD.R /*  */
#define GMAC_0_Tx_Multicast_Packets_Good GMAC_0.TX_MULTICAST_PACKETS_GOOD.R /*  */
#define GMAC_0_Tx_64Octets_Packets_Good_Bad GMAC_0.TX_64OCTETS_PACKETS_GOOD_BAD.R /*  */
#define GMAC_0_Tx_65To127Octets_Packets_Good_Bad GMAC_0.TX_65TO127OCTETS_PACKETS_GOOD_BAD.R /*  */
#define GMAC_0_Tx_128To255Octets_Packets_Good_Bad GMAC_0.TX_128TO255OCTETS_PACKETS_GOOD_BAD.R /*  */
#define GMAC_0_Tx_256To511Octets_Packets_Good_Bad GMAC_0.TX_256TO511OCTETS_PACKETS_GOOD_BAD.R /*  */
#define GMAC_0_Tx_512To1023Octets_Packets_Good_Bad GMAC_0.TX_512TO1023OCTETS_PACKETS_GOOD_BAD.R /*  */
#define GMAC_0_Tx_1024ToMaxOctets_Packets_Good_Bad GMAC_0.TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD.R /*  */
#define GMAC_0_Tx_Unicast_Packets_Good_Bad GMAC_0.TX_UNICAST_PACKETS_GOOD_BAD.R /*  */
#define GMAC_0_Tx_Multicast_Packets_Good_Bad GMAC_0.TX_MULTICAST_PACKETS_GOOD_BAD.R /*  */
#define GMAC_0_Tx_Broadcast_Packets_Good_Bad GMAC_0.TX_BROADCAST_PACKETS_GOOD_BAD.R /*  */
#define GMAC_0_Tx_Underflow_Error_Packets GMAC_0.TX_UNDERFLOW_ERROR_PACKETS.R /*  */
#define GMAC_0_Tx_Single_Collision_Good_Packets GMAC_0.TX_SINGLE_COLLISION_GOOD_PACKETS.R /*  */
#define GMAC_0_Tx_Multiple_Collision_Good_Packets GMAC_0.TX_MULTIPLE_COLLISION_GOOD_PACKETS.R /*  */
#define GMAC_0_Tx_Deferred_Packets GMAC_0.TX_DEFERRED_PACKETS.R /*  */
#define GMAC_0_Tx_Late_Collision_Packets GMAC_0.TX_LATE_COLLISION_PACKETS.R /*  */
#define GMAC_0_Tx_Excessive_Collision_Packets GMAC_0.TX_EXCESSIVE_COLLISION_PACKETS.R /*  */
#define GMAC_0_Tx_Carrier_Error_Packets GMAC_0.TX_CARRIER_ERROR_PACKETS.R /*  */
#define GMAC_0_Tx_Octet_Count_Good GMAC_0.TX_OCTET_COUNT_GOOD.R /*  */
#define GMAC_0_Tx_Packet_Count_Good GMAC_0.TX_PACKET_COUNT_GOOD.R /*  */
#define GMAC_0_Tx_Excessive_Deferral_Error GMAC_0.TX_EXCESSIVE_DEFERRAL_ERROR.R /*  */
#define GMAC_0_Tx_Pause_Packets GMAC_0.TX_PAUSE_PACKETS.R  /*  */
#define GMAC_0_Tx_VLAN_Packets_Good GMAC_0.TX_VLAN_PACKETS_GOOD.R /*  */
#define GMAC_0_Tx_OSize_Packets_Good GMAC_0.TX_OSIZE_PACKETS_GOOD.R /*  */
#define GMAC_0_Rx_Packets_Count_Good_Bad GMAC_0.RX_PACKETS_COUNT_GOOD_BAD.R /*  */
#define GMAC_0_Rx_Octet_Count_Good_Bad GMAC_0.RX_OCTET_COUNT_GOOD_BAD.R /*  */
#define GMAC_0_Rx_Octet_Count_Good GMAC_0.RX_OCTET_COUNT_GOOD.R /*  */
#define GMAC_0_Rx_Broadcast_Packets_Good GMAC_0.RX_BROADCAST_PACKETS_GOOD.R /*  */
#define GMAC_0_Rx_Multicast_Packets_Good GMAC_0.RX_MULTICAST_PACKETS_GOOD.R /*  */
#define GMAC_0_Rx_CRC_Error_Packets GMAC_0.RX_CRC_ERROR_PACKETS.R /*  */
#define GMAC_0_Rx_Alignment_Error_Packets GMAC_0.RX_ALIGNMENT_ERROR_PACKETS.R /*  */
#define GMAC_0_Rx_Runt_Error_Packets GMAC_0.RX_RUNT_ERROR_PACKETS.R /*  */
#define GMAC_0_Rx_Jabber_Error_Packets GMAC_0.RX_JABBER_ERROR_PACKETS.R /*  */
#define GMAC_0_Rx_Undersize_Packets_Good GMAC_0.RX_UNDERSIZE_PACKETS_GOOD.R /*  */
#define GMAC_0_Rx_Oversize_Packets_Good GMAC_0.RX_OVERSIZE_PACKETS_GOOD.R /*  */
#define GMAC_0_Rx_64Octets_Packets_Good_Bad GMAC_0.RX_64OCTETS_PACKETS_GOOD_BAD.R /*  */
#define GMAC_0_Rx_65To127Octets_Packets_Good_Bad GMAC_0.RX_65TO127OCTETS_PACKETS_GOOD_BAD.R /*  */
#define GMAC_0_Rx_128To255Octets_Packets_Good_Bad GMAC_0.RX_128TO255OCTETS_PACKETS_GOOD_BAD.R /*  */
#define GMAC_0_Rx_256To511Octets_Packets_Good_Bad GMAC_0.RX_256TO511OCTETS_PACKETS_GOOD_BAD.R /*  */
#define GMAC_0_Rx_512To1023Octets_Packets_Good_Bad GMAC_0.RX_512TO1023OCTETS_PACKETS_GOOD_BAD.R /*  */
#define GMAC_0_Rx_1024ToMaxOctets_Packets_Good_Bad GMAC_0.RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD.R /*  */
#define GMAC_0_Rx_Unicast_Packets_Good GMAC_0.RX_UNICAST_PACKETS_GOOD.R /*  */
#define GMAC_0_Rx_Length_Error_Packets GMAC_0.RX_LENGTH_ERROR_PACKETS.R /*  */
#define GMAC_0_Rx_Out_Of_Range_Type_Packets GMAC_0.RX_OUT_OF_RANGE_TYPE_PACKETS.R /*  */
#define GMAC_0_Rx_Pause_Packets GMAC_0.RX_PAUSE_PACKETS.R  /*  */
#define GMAC_0_Rx_FIFO_Overflow_Packets GMAC_0.RX_FIFO_OVERFLOW_PACKETS.R /*  */
#define GMAC_0_Rx_VLAN_Packets_Good_Bad GMAC_0.RX_VLAN_PACKETS_GOOD_BAD.R /*  */
#define GMAC_0_Rx_Watchdog_Error_Packets GMAC_0.RX_WATCHDOG_ERROR_PACKETS.R /*  */
#define GMAC_0_Rx_Receive_Error_Packets GMAC_0.RX_RECEIVE_ERROR_PACKETS.R /*  */
#define GMAC_0_Rx_Control_Packets_Good GMAC_0.RX_CONTROL_PACKETS_GOOD.R /*  */
#define GMAC_0_MMC_FPE_Tx_Interrupt GMAC_0.MMC_FPE_TX_INTERRUPT.R /*  */
#define GMAC_0_MMC_FPE_Tx_Interrupt_Mask GMAC_0.MMC_FPE_TX_INTERRUPT_MASK.R /*  */
#define GMAC_0_MMC_Tx_FPE_Fragment_Cntr GMAC_0.MMC_TX_FPE_FRAGMENT_CNTR.R /*  */
#define GMAC_0_MMC_Tx_Hold_Req_Cntr GMAC_0.MMC_TX_HOLD_REQ_CNTR.R /*  */
#define GMAC_0_MMC_FPE_Rx_Interrupt GMAC_0.MMC_FPE_RX_INTERRUPT.R /*  */
#define GMAC_0_MMC_FPE_Rx_Interrupt_Mask GMAC_0.MMC_FPE_RX_INTERRUPT_MASK.R /*  */
#define GMAC_0_MMC_Rx_Packet_Assembly_Err_Cntr GMAC_0.MMC_RX_PACKET_ASSEMBLY_ERR_CNTR.R /*  */
#define GMAC_0_MMC_Rx_Packet_SMD_Err_Cntr GMAC_0.MMC_RX_PACKET_SMD_ERR_CNTR.R /*  */
#define GMAC_0_MMC_Rx_Packet_Assembly_OK_Cntr GMAC_0.MMC_RX_PACKET_ASSEMBLY_OK_CNTR.R /*  */
#define GMAC_0_MMC_Rx_FPE_Fragment_Cntr GMAC_0.MMC_RX_FPE_FRAGMENT_CNTR.R /*  */
#define GMAC_0_MAC_L3_L4_Control0 GMAC_0.MAC_L3_L4_CONTROL0.R /*  */
#define GMAC_0_MAC_Layer4_Address0 GMAC_0.MAC_LAYER4_ADDRESS0.R /*  */
#define GMAC_0_MAC_Layer3_Addr0_Reg0 GMAC_0.MAC_LAYER3_ADDR0_REG0.R /*  */
#define GMAC_0_MAC_Layer3_Addr1_Reg0 GMAC_0.MAC_LAYER3_ADDR1_REG0.R /*  */
#define GMAC_0_MAC_Layer3_Addr2_Reg0 GMAC_0.MAC_LAYER3_ADDR2_REG0.R /*  */
#define GMAC_0_MAC_Layer3_Addr3_Reg0 GMAC_0.MAC_LAYER3_ADDR3_REG0.R /*  */
#define GMAC_0_MAC_L3_L4_Control1 GMAC_0.MAC_L3_L4_CONTROL1.R /*  */
#define GMAC_0_MAC_Layer4_Address1 GMAC_0.MAC_LAYER4_ADDRESS1.R /*  */
#define GMAC_0_MAC_Layer3_Addr0_Reg1 GMAC_0.MAC_LAYER3_ADDR0_REG1.R /*  */
#define GMAC_0_MAC_Layer3_Addr1_Reg1 GMAC_0.MAC_LAYER3_ADDR1_REG1.R /*  */
#define GMAC_0_MAC_Layer3_Addr2_Reg1 GMAC_0.MAC_LAYER3_ADDR2_REG1.R /*  */
#define GMAC_0_MAC_Layer3_Addr3_Reg1 GMAC_0.MAC_LAYER3_ADDR3_REG1.R /*  */
#define GMAC_0_MAC_L3_L4_Control2 GMAC_0.MAC_L3_L4_CONTROL2.R /*  */
#define GMAC_0_MAC_Layer4_Address2 GMAC_0.MAC_LAYER4_ADDRESS2.R /*  */
#define GMAC_0_MAC_Layer3_Addr0_Reg2 GMAC_0.MAC_LAYER3_ADDR0_REG2.R /*  */
#define GMAC_0_MAC_Layer3_Addr1_Reg2 GMAC_0.MAC_LAYER3_ADDR1_REG2.R /*  */
#define GMAC_0_MAC_Layer3_Addr2_Reg2 GMAC_0.MAC_LAYER3_ADDR2_REG2.R /*  */
#define GMAC_0_MAC_Layer3_Addr3_Reg2 GMAC_0.MAC_LAYER3_ADDR3_REG2.R /*  */
#define GMAC_0_MAC_L3_L4_Control3 GMAC_0.MAC_L3_L4_CONTROL3.R /*  */
#define GMAC_0_MAC_Layer4_Address3 GMAC_0.MAC_LAYER4_ADDRESS3.R /*  */
#define GMAC_0_MAC_Layer3_Addr0_Reg3 GMAC_0.MAC_LAYER3_ADDR0_REG3.R /*  */
#define GMAC_0_MAC_Layer3_Addr1_Reg3 GMAC_0.MAC_LAYER3_ADDR1_REG3.R /*  */
#define GMAC_0_MAC_Layer3_Addr2_Reg3 GMAC_0.MAC_LAYER3_ADDR2_REG3.R /*  */
#define GMAC_0_MAC_Layer3_Addr3_Reg3 GMAC_0.MAC_LAYER3_ADDR3_REG3.R /*  */
#define GMAC_0_MAC_L3_L4_Control4 GMAC_0.MAC_L3_L4_CONTROL4.R /*  */
#define GMAC_0_MAC_Layer4_Address4 GMAC_0.MAC_LAYER4_ADDRESS4.R /*  */
#define GMAC_0_MAC_Layer3_Addr0_Reg4 GMAC_0.MAC_LAYER3_ADDR0_REG4.R /*  */
#define GMAC_0_MAC_Layer3_Addr1_Reg4 GMAC_0.MAC_LAYER3_ADDR1_REG4.R /*  */
#define GMAC_0_MAC_Layer3_Addr2_Reg4 GMAC_0.MAC_LAYER3_ADDR2_REG4.R /*  */
#define GMAC_0_MAC_Layer3_Addr3_Reg4 GMAC_0.MAC_LAYER3_ADDR3_REG4.R /*  */
#define GMAC_0_MAC_L3_L4_Control5 GMAC_0.MAC_L3_L4_CONTROL5.R /*  */
#define GMAC_0_MAC_Layer4_Address5 GMAC_0.MAC_LAYER4_ADDRESS5.R /*  */
#define GMAC_0_MAC_Layer3_Addr0_Reg5 GMAC_0.MAC_LAYER3_ADDR0_REG5.R /*  */
#define GMAC_0_MAC_Layer3_Addr1_Reg5 GMAC_0.MAC_LAYER3_ADDR1_REG5.R /*  */
#define GMAC_0_MAC_Layer3_Addr2_Reg5 GMAC_0.MAC_LAYER3_ADDR2_REG5.R /*  */
#define GMAC_0_MAC_Layer3_Addr3_Reg5 GMAC_0.MAC_LAYER3_ADDR3_REG5.R /*  */
#define GMAC_0_MAC_L3_L4_Control6 GMAC_0.MAC_L3_L4_CONTROL6.R /*  */
#define GMAC_0_MAC_Layer4_Address6 GMAC_0.MAC_LAYER4_ADDRESS6.R /*  */
#define GMAC_0_MAC_Layer3_Addr0_Reg6 GMAC_0.MAC_LAYER3_ADDR0_REG6.R /*  */
#define GMAC_0_MAC_Layer3_Addr1_Reg6 GMAC_0.MAC_LAYER3_ADDR1_REG6.R /*  */
#define GMAC_0_MAC_Layer3_Addr2_Reg6 GMAC_0.MAC_LAYER3_ADDR2_REG6.R /*  */
#define GMAC_0_MAC_Layer3_Addr3_Reg6 GMAC_0.MAC_LAYER3_ADDR3_REG6.R /*  */
#define GMAC_0_MAC_L3_L4_Control7 GMAC_0.MAC_L3_L4_CONTROL7.R /*  */
#define GMAC_0_MAC_Layer4_Address7 GMAC_0.MAC_LAYER4_ADDRESS7.R /*  */
#define GMAC_0_MAC_Layer3_Addr0_Reg7 GMAC_0.MAC_LAYER3_ADDR0_REG7.R /*  */
#define GMAC_0_MAC_Layer3_Addr1_Reg7 GMAC_0.MAC_LAYER3_ADDR1_REG7.R /*  */
#define GMAC_0_MAC_Layer3_Addr2_Reg7 GMAC_0.MAC_LAYER3_ADDR2_REG7.R /*  */
#define GMAC_0_MAC_Layer3_Addr3_Reg7 GMAC_0.MAC_LAYER3_ADDR3_REG7.R /*  */
#define GMAC_0_MAC_Timestamp_Control GMAC_0.MAC_TIMESTAMP_CONTROL.R /*  */
#define GMAC_0_MAC_Sub_Second_Increment GMAC_0.MAC_SUB_SECOND_INCREMENT.R /*  */
#define GMAC_0_MAC_System_Time_Seconds GMAC_0.MAC_SYSTEM_TIME_SECONDS.R /*  */
#define GMAC_0_MAC_System_Time_Nanoseconds GMAC_0.MAC_SYSTEM_TIME_NANOSECONDS.R /*  */
#define GMAC_0_MAC_System_Time_Seconds_Update GMAC_0.MAC_SYSTEM_TIME_SECONDS_UPDATE.R /*  */
#define GMAC_0_MAC_System_Time_Nanoseconds_Update GMAC_0.MAC_SYSTEM_TIME_NANOSECONDS_UPDATE.R /*  */
#define GMAC_0_MAC_Timestamp_Addend GMAC_0.MAC_TIMESTAMP_ADDEND.R /*  */
#define GMAC_0_MAC_System_Time_Higher_Word_Seconds GMAC_0.MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS.R /*  */
#define GMAC_0_MAC_Timestamp_Status GMAC_0.MAC_TIMESTAMP_STATUS.R /*  */
#define GMAC_0_MAC_Tx_Timestamp_Status_Nanoseconds GMAC_0.MAC_TX_TIMESTAMP_STATUS_NANOSECONDS.R /*  */
#define GMAC_0_MAC_Tx_Timestamp_Status_Seconds GMAC_0.MAC_TX_TIMESTAMP_STATUS_SECONDS.R /*  */
#define GMAC_0_MAC_Auxiliary_Control GMAC_0.MAC_AUXILIARY_CONTROL.R /*  */
#define GMAC_0_MAC_Auxiliary_Timestamp_Nanoseconds GMAC_0.MAC_AUXILIARY_TIMESTAMP_NANOSECONDS.R /*  */
#define GMAC_0_MAC_Auxiliary_Timestamp_Seconds GMAC_0.MAC_AUXILIARY_TIMESTAMP_SECONDS.R /*  */
#define GMAC_0_MAC_Timestamp_Ingress_Asym_Corr GMAC_0.MAC_TIMESTAMP_INGRESS_ASYM_CORR.R /*  */
#define GMAC_0_MAC_Timestamp_Egress_Asym_Corr GMAC_0.MAC_TIMESTAMP_EGRESS_ASYM_CORR.R /*  */
#define GMAC_0_MAC_Timestamp_Ingress_Corr_Nanosecond GMAC_0.MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND.R /*  */
#define GMAC_0_MAC_Timestamp_Egress_Corr_Nanosecond GMAC_0.MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND.R /*  */
#define GMAC_0_MAC_Timestamp_Ingress_Corr_Subnanosec GMAC_0.MAC_TIMESTAMP_INGRESS_CORR_SUBNANOSEC.R /*  */
#define GMAC_0_MAC_Timestamp_Egress_Corr_Subnanosec GMAC_0.MAC_TIMESTAMP_EGRESS_CORR_SUBNANOSEC.R /*  */
#define GMAC_0_MAC_Timestamp_Ingress_Latency GMAC_0.MAC_TIMESTAMP_INGRESS_LATENCY.R /*  */
#define GMAC_0_MAC_Timestamp_Egress_Latency GMAC_0.MAC_TIMESTAMP_EGRESS_LATENCY.R /*  */
#define GMAC_0_MAC_PPS_Control GMAC_0.MAC_PPS_CONTROL.R    /*  */
#define GMAC_0_MAC_PPS0_Target_Time_Seconds GMAC_0.MAC_PPS0_TARGET_TIME_SECONDS.R /*  */
#define GMAC_0_MAC_PPS0_Target_Time_Nanoseconds GMAC_0.MAC_PPS0_TARGET_TIME_NANOSECONDS.R /*  */
#define GMAC_0_MAC_PPS0_Interval GMAC_0.MAC_PPS0_INTERVAL.R /*  */
#define GMAC_0_MAC_PPS0_Width GMAC_0.MAC_PPS0_WIDTH.R      /*  */
#define GMAC_0_MAC_PPS1_Target_Time_Seconds GMAC_0.MAC_PPS1_TARGET_TIME_SECONDS.R /*  */
#define GMAC_0_MAC_PPS1_Target_Time_Nanoseconds GMAC_0.MAC_PPS1_TARGET_TIME_NANOSECONDS.R /*  */
#define GMAC_0_MAC_PPS1_Interval GMAC_0.MAC_PPS1_INTERVAL.R /*  */
#define GMAC_0_MAC_PPS1_Width GMAC_0.MAC_PPS1_WIDTH.R      /*  */
#define GMAC_0_MAC_PPS2_Target_Time_Seconds GMAC_0.MAC_PPS2_TARGET_TIME_SECONDS.R /*  */
#define GMAC_0_MAC_PPS2_Target_Time_Nanoseconds GMAC_0.MAC_PPS2_TARGET_TIME_NANOSECONDS.R /*  */
#define GMAC_0_MAC_PPS2_Interval GMAC_0.MAC_PPS2_INTERVAL.R /*  */
#define GMAC_0_MAC_PPS2_Width GMAC_0.MAC_PPS2_WIDTH.R      /*  */
#define GMAC_0_MAC_PPS3_Target_Time_Seconds GMAC_0.MAC_PPS3_TARGET_TIME_SECONDS.R /*  */
#define GMAC_0_MAC_PPS3_Target_Time_Nanoseconds GMAC_0.MAC_PPS3_TARGET_TIME_NANOSECONDS.R /*  */
#define GMAC_0_MAC_PPS3_Interval GMAC_0.MAC_PPS3_INTERVAL.R /*  */
#define GMAC_0_MAC_PPS3_Width GMAC_0.MAC_PPS3_WIDTH.R      /*  */
#define GMAC_0_MAC_PTO_Control GMAC_0.MAC_PTO_CONTROL.R    /*  */
#define GMAC_0_MAC_Source_Port_Identity0 GMAC_0.MAC_SOURCE_PORT_IDENTITY0.R /*  */
#define GMAC_0_MAC_Source_Port_Identity1 GMAC_0.MAC_SOURCE_PORT_IDENTITY1.R /*  */
#define GMAC_0_MAC_Source_Port_Identity2 GMAC_0.MAC_SOURCE_PORT_IDENTITY2.R /*  */
#define GMAC_0_MAC_Log_Message_Interval GMAC_0.MAC_LOG_MESSAGE_INTERVAL.R /*  */
#define GMAC_0_MTL_Operation_Mode GMAC_0.MTL_OPERATION_MODE.R /*  */
#define GMAC_0_MTL_DBG_CTL   GMAC_0.MTL_DBG_CTL.R          /*  */
#define GMAC_0_MTL_DBG_STS   GMAC_0.MTL_DBG_STS.R          /*  */
#define GMAC_0_MTL_FIFO_Debug_Data GMAC_0.MTL_FIFO_DEBUG_DATA.R /*  */
#define GMAC_0_MTL_Interrupt_Status GMAC_0.MTL_INTERRUPT_STATUS.R /*  */
#define GMAC_0_MTL_RxQ_DMA_Map0 GMAC_0.MTL_RXQ_DMA_MAP0.R  /*  */
#define GMAC_0_MTL_RxQ_DMA_Map1 GMAC_0.MTL_RXQ_DMA_MAP1.R  /*  */
#define GMAC_0_MTL_TBS_CTRL  GMAC_0.MTL_TBS_CTRL.R         /*  */
#define GMAC_0_MTL_EST_Control GMAC_0.MTL_EST_CONTROL.R    /*  */
#define GMAC_0_MTL_EST_Status GMAC_0.MTL_EST_STATUS.R      /*  */
#define GMAC_0_MTL_EST_Sch_Error GMAC_0.MTL_EST_SCH_ERROR.R /*  */
#define GMAC_0_MTL_EST_Frm_Size_Error GMAC_0.MTL_EST_FRM_SIZE_ERROR.R /*  */
#define GMAC_0_MTL_EST_Frm_Size_Capture GMAC_0.MTL_EST_FRM_SIZE_CAPTURE.R /*  */
#define GMAC_0_MTL_EST_Intr_Enable GMAC_0.MTL_EST_INTR_ENABLE.R /*  */
#define GMAC_0_MTL_EST_GCL_Control GMAC_0.MTL_EST_GCL_CONTROL.R /*  */
#define GMAC_0_MTL_EST_GCL_Data GMAC_0.MTL_EST_GCL_DATA.R  /*  */
#define GMAC_0_MTL_FPE_CTRL_STS GMAC_0.MTL_FPE_CTRL_STS.R  /*  */
#define GMAC_0_MTL_FPE_Advance GMAC_0.MTL_FPE_ADVANCE.R    /*  */
#define GMAC_0_MTL_RXP_Control_Status GMAC_0.MTL_RXP_CONTROL_STATUS.R /*  */
#define GMAC_0_MTL_RXP_Interrupt_Control_Status GMAC_0.MTL_RXP_INTERRUPT_CONTROL_STATUS.R /*  */
#define GMAC_0_MTL_RXP_Drop_Cnt GMAC_0.MTL_RXP_DROP_CNT.R  /*  */
#define GMAC_0_MTL_RXP_Error_Cnt GMAC_0.MTL_RXP_ERROR_CNT.R /*  */
#define GMAC_0_MTL_RXP_Indirect_Acc_Control_Status GMAC_0.MTL_RXP_INDIRECT_ACC_CONTROL_STATUS.R /*  */
#define GMAC_0_MTL_RXP_Indirect_Acc_Data GMAC_0.MTL_RXP_INDIRECT_ACC_DATA.R /*  */
#define GMAC_0_MTL_ECC_Control GMAC_0.MTL_ECC_CONTROL.R    /*  */
#define GMAC_0_MTL_Safety_Interrupt_Status GMAC_0.MTL_SAFETY_INTERRUPT_STATUS.R /*  */
#define GMAC_0_MTL_ECC_Interrupt_Enable GMAC_0.MTL_ECC_INTERRUPT_ENABLE.R /*  */
#define GMAC_0_MTL_ECC_Interrupt_Status GMAC_0.MTL_ECC_INTERRUPT_STATUS.R /*  */
#define GMAC_0_MTL_ECC_Err_Sts_Rctl GMAC_0.MTL_ECC_ERR_STS_RCTL.R /*  */
#define GMAC_0_MTL_ECC_Err_Addr_Status GMAC_0.MTL_ECC_ERR_ADDR_STATUS.R /*  */
#define GMAC_0_MTL_ECC_Err_Cntr_Status GMAC_0.MTL_ECC_ERR_CNTR_STATUS.R /*  */
#define GMAC_0_MTL_DPP_Control GMAC_0.MTL_DPP_CONTROL.R    /*  */
#define GMAC_0_MTL_TxQ0_Operation_Mode GMAC_0.MTL_TXQ0_OPERATION_MODE.R /*  */
#define GMAC_0_MTL_TxQ0_Underflow GMAC_0.MTL_TXQ0_UNDERFLOW.R /*  */
#define GMAC_0_MTL_TxQ0_Debug GMAC_0.MTL_TXQ0_DEBUG.R      /*  */
#define GMAC_0_MTL_TxQ0_ETS_Status GMAC_0.MTL_TXQ0_ETS_STATUS.R /*  */
#define GMAC_0_MTL_TxQ0_Quantum_Weight GMAC_0.MTL_TXQ0_QUANTUM_WEIGHT.R /*  */
#define GMAC_0_MTL_Q0_Interrupt_Control_Status GMAC_0.MTL_Q0_INTERRUPT_CONTROL_STATUS.R /*  */
#define GMAC_0_MTL_RxQ0_Operation_Mode GMAC_0.MTL_RXQ0_OPERATION_MODE.R /*  */
#define GMAC_0_MTL_RxQ0_Missed_Packet_Overflow_Cnt GMAC_0.MTL_RXQ0_MISSED_PACKET_OVERFLOW_CNT.R /*  */
#define GMAC_0_MTL_RxQ0_Debug GMAC_0.MTL_RXQ0_DEBUG.R      /*  */
#define GMAC_0_MTL_RxQ0_Control GMAC_0.MTL_RXQ0_CONTROL.R  /*  */
#define GMAC_0_MTL_TxQ1_Operation_Mode GMAC_0.MTL_TXQ1_OPERATION_MODE.R /*  */
#define GMAC_0_MTL_TxQ1_Underflow GMAC_0.MTL_TXQ1_UNDERFLOW.R /*  */
#define GMAC_0_MTL_TxQ1_Debug GMAC_0.MTL_TXQ1_DEBUG.R      /*  */
#define GMAC_0_MTL_TxQ1_ETS_Control GMAC_0.MTL_TXQ1_ETS_CONTROL.R /*  */
#define GMAC_0_MTL_TxQ1_ETS_Status GMAC_0.MTL_TXQ1_ETS_STATUS.R /*  */
#define GMAC_0_MTL_TxQ1_Quantum_Weight GMAC_0.MTL_TXQ1_QUANTUM_WEIGHT.R /*  */
#define GMAC_0_MTL_TxQ1_SendSlopeCredit GMAC_0.MTL_TXQ1_SENDSLOPECREDIT.R /*  */
#define GMAC_0_MTL_TxQ1_HiCredit GMAC_0.MTL_TXQ1_HICREDIT.R /*  */
#define GMAC_0_MTL_TxQ1_LoCredit GMAC_0.MTL_TXQ1_LOCREDIT.R /*  */
#define GMAC_0_MTL_Q1_Interrupt_Control_Status GMAC_0.MTL_Q1_INTERRUPT_CONTROL_STATUS.R /*  */
#define GMAC_0_MTL_RxQ1_Operation_Mode GMAC_0.MTL_RXQ1_OPERATION_MODE.R /*  */
#define GMAC_0_MTL_RxQ1_Missed_Packet_Overflow_Cnt GMAC_0.MTL_RXQ1_MISSED_PACKET_OVERFLOW_CNT.R /*  */
#define GMAC_0_MTL_RxQ1_Debug GMAC_0.MTL_RXQ1_DEBUG.R      /*  */
#define GMAC_0_MTL_RxQ1_Control GMAC_0.MTL_RXQ1_CONTROL.R  /*  */
#define GMAC_0_MTL_TxQ2_Operation_Mode GMAC_0.MTL_TXQ2_OPERATION_MODE.R /*  */
#define GMAC_0_MTL_TxQ2_Underflow GMAC_0.MTL_TXQ2_UNDERFLOW.R /*  */
#define GMAC_0_MTL_TxQ2_Debug GMAC_0.MTL_TXQ2_DEBUG.R      /*  */
#define GMAC_0_MTL_TxQ2_ETS_Control GMAC_0.MTL_TXQ2_ETS_CONTROL.R /*  */
#define GMAC_0_MTL_TxQ2_ETS_Status GMAC_0.MTL_TXQ2_ETS_STATUS.R /*  */
#define GMAC_0_MTL_TxQ2_Quantum_Weight GMAC_0.MTL_TXQ2_QUANTUM_WEIGHT.R /*  */
#define GMAC_0_MTL_TxQ2_SendSlopeCredit GMAC_0.MTL_TXQ2_SENDSLOPECREDIT.R /*  */
#define GMAC_0_MTL_TxQ2_HiCredit GMAC_0.MTL_TXQ2_HICREDIT.R /*  */
#define GMAC_0_MTL_TxQ2_LoCredit GMAC_0.MTL_TXQ2_LOCREDIT.R /*  */
#define GMAC_0_MTL_Q2_Interrupt_Control_Status GMAC_0.MTL_Q2_INTERRUPT_CONTROL_STATUS.R /*  */
#define GMAC_0_MTL_RxQ2_Operation_Mode GMAC_0.MTL_RXQ2_OPERATION_MODE.R /*  */
#define GMAC_0_MTL_RxQ2_Missed_Packet_Overflow_Cnt GMAC_0.MTL_RXQ2_MISSED_PACKET_OVERFLOW_CNT.R /*  */
#define GMAC_0_MTL_RxQ2_Debug GMAC_0.MTL_RXQ2_DEBUG.R      /*  */
#define GMAC_0_MTL_RxQ2_Control GMAC_0.MTL_RXQ2_CONTROL.R  /*  */
#define GMAC_0_MTL_TxQ3_Operation_Mode GMAC_0.MTL_TXQ3_OPERATION_MODE.R /*  */
#define GMAC_0_MTL_TxQ3_Underflow GMAC_0.MTL_TXQ3_UNDERFLOW.R /*  */
#define GMAC_0_MTL_TxQ3_Debug GMAC_0.MTL_TXQ3_DEBUG.R      /*  */
#define GMAC_0_MTL_TxQ3_ETS_Control GMAC_0.MTL_TXQ3_ETS_CONTROL.R /*  */
#define GMAC_0_MTL_TxQ3_ETS_Status GMAC_0.MTL_TXQ3_ETS_STATUS.R /*  */
#define GMAC_0_MTL_TxQ3_Quantum_Weight GMAC_0.MTL_TXQ3_QUANTUM_WEIGHT.R /*  */
#define GMAC_0_MTL_TxQ3_SendSlopeCredit GMAC_0.MTL_TXQ3_SENDSLOPECREDIT.R /*  */
#define GMAC_0_MTL_TxQ3_HiCredit GMAC_0.MTL_TXQ3_HICREDIT.R /*  */
#define GMAC_0_MTL_TxQ3_LoCredit GMAC_0.MTL_TXQ3_LOCREDIT.R /*  */
#define GMAC_0_MTL_Q3_Interrupt_Control_Status GMAC_0.MTL_Q3_INTERRUPT_CONTROL_STATUS.R /*  */
#define GMAC_0_MTL_RxQ3_Operation_Mode GMAC_0.MTL_RXQ3_OPERATION_MODE.R /*  */
#define GMAC_0_MTL_RxQ3_Missed_Packet_Overflow_Cnt GMAC_0.MTL_RXQ3_MISSED_PACKET_OVERFLOW_CNT.R /*  */
#define GMAC_0_MTL_RxQ3_Debug GMAC_0.MTL_RXQ3_DEBUG.R      /*  */
#define GMAC_0_MTL_RxQ3_Control GMAC_0.MTL_RXQ3_CONTROL.R  /*  */
#define GMAC_0_MTL_TxQ4_Operation_Mode GMAC_0.MTL_TXQ4_OPERATION_MODE.R /*  */
#define GMAC_0_MTL_TxQ4_Underflow GMAC_0.MTL_TXQ4_UNDERFLOW.R /*  */
#define GMAC_0_MTL_TxQ4_Debug GMAC_0.MTL_TXQ4_DEBUG.R      /*  */
#define GMAC_0_MTL_TxQ4_ETS_Control GMAC_0.MTL_TXQ4_ETS_CONTROL.R /*  */
#define GMAC_0_MTL_TxQ4_ETS_Status GMAC_0.MTL_TXQ4_ETS_STATUS.R /*  */
#define GMAC_0_MTL_TxQ4_Quantum_Weight GMAC_0.MTL_TXQ4_QUANTUM_WEIGHT.R /*  */
#define GMAC_0_MTL_TxQ4_SendSlopeCredit GMAC_0.MTL_TXQ4_SENDSLOPECREDIT.R /*  */
#define GMAC_0_MTL_TxQ4_HiCredit GMAC_0.MTL_TXQ4_HICREDIT.R /*  */
#define GMAC_0_MTL_TxQ4_LoCredit GMAC_0.MTL_TXQ4_LOCREDIT.R /*  */
#define GMAC_0_MTL_Q4_Interrupt_Control_Status GMAC_0.MTL_Q4_INTERRUPT_CONTROL_STATUS.R /*  */
#define GMAC_0_MTL_RxQ4_Operation_Mode GMAC_0.MTL_RXQ4_OPERATION_MODE.R /*  */
#define GMAC_0_MTL_RxQ4_Missed_Packet_Overflow_Cnt GMAC_0.MTL_RXQ4_MISSED_PACKET_OVERFLOW_CNT.R /*  */
#define GMAC_0_MTL_RxQ4_Debug GMAC_0.MTL_RXQ4_DEBUG.R      /*  */
#define GMAC_0_MTL_RxQ4_Control GMAC_0.MTL_RXQ4_CONTROL.R  /*  */
#define GMAC_0_DMA_Mode      GMAC_0.DMA_MODE.R             /*  */
#define GMAC_0_DMA_SysBus_Mode GMAC_0.DMA_SYSBUS_MODE.R    /*  */
#define GMAC_0_DMA_Interrupt_Status GMAC_0.DMA_INTERRUPT_STATUS.R /*  */
#define GMAC_0_DMA_Debug_Status0 GMAC_0.DMA_DEBUG_STATUS0.R /*  */
#define GMAC_0_DMA_Debug_Status1 GMAC_0.DMA_DEBUG_STATUS1.R /*  */
#define GMAC_0_AXI4_Tx_AR_ACE_Control GMAC_0.AXI4_TX_AR_ACE_CONTROL.R /*  */
#define GMAC_0_AXI4_Rx_AW_ACE_Control GMAC_0.AXI4_RX_AW_ACE_CONTROL.R /*  */
#define GMAC_0_AXI4_TxRx_AWAR_ACE_Control GMAC_0.AXI4_TXRX_AWAR_ACE_CONTROL.R /*  */
#define GMAC_0_AXI_LPI_Entry_Interval GMAC_0.AXI_LPI_ENTRY_INTERVAL.R /*  */
#define GMAC_0_DMA_TBS_CTRL  GMAC_0.DMA_TBS_CTRL.R         /*  */
#define GMAC_0_DMA_Safety_Interrupt_Status GMAC_0.DMA_SAFETY_INTERRUPT_STATUS.R /*  */
#define GMAC_0_DMA_CH0_Control GMAC_0.DMA_CH0_CONTROL.R    /*  */
#define GMAC_0_DMA_CH0_Tx_Control GMAC_0.DMA_CH0_TX_CONTROL.R /*  */
#define GMAC_0_DMA_CH0_Rx_Control GMAC_0.DMA_CH0_RX_CONTROL.R /*  */
#define GMAC_0_DMA_CH0_TxDesc_List_Address GMAC_0.DMA_CH0_TXDESC_LIST_ADDRESS.R /*  */
#define GMAC_0_DMA_CH0_RxDesc_List_Address GMAC_0.DMA_CH0_RXDESC_LIST_ADDRESS.R /*  */
#define GMAC_0_DMA_CH0_TxDesc_Tail_Pointer GMAC_0.DMA_CH0_TXDESC_TAIL_POINTER.R /*  */
#define GMAC_0_DMA_CH0_RxDesc_Tail_Pointer GMAC_0.DMA_CH0_RXDESC_TAIL_POINTER.R /*  */
#define GMAC_0_DMA_CH0_TxDesc_Ring_Length GMAC_0.DMA_CH0_TXDESC_RING_LENGTH.R /*  */
#define GMAC_0_DMA_CH0_RxDesc_Ring_Length GMAC_0.DMA_CH0_RXDESC_RING_LENGTH.R /*  */
#define GMAC_0_DMA_CH0_Interrupt_Enable GMAC_0.DMA_CH0_INTERRUPT_ENABLE.R /*  */
#define GMAC_0_DMA_CH0_Rx_Interrupt_Watchdog_Timer GMAC_0.DMA_CH0_RX_INTERRUPT_WATCHDOG_TIMER.R /*  */
#define GMAC_0_DMA_CH0_Slot_Function_Control_Status GMAC_0.DMA_CH0_SLOT_FUNCTION_CONTROL_STATUS.R /*  */
#define GMAC_0_DMA_CH0_Current_App_TxDesc GMAC_0.DMA_CH0_CURRENT_APP_TXDESC.R /*  */
#define GMAC_0_DMA_CH0_Current_App_RxDesc GMAC_0.DMA_CH0_CURRENT_APP_RXDESC.R /*  */
#define GMAC_0_DMA_CH0_Current_App_TxBuffer GMAC_0.DMA_CH0_CURRENT_APP_TXBUFFER.R /*  */
#define GMAC_0_DMA_CH0_Current_App_RxBuffer GMAC_0.DMA_CH0_CURRENT_APP_RXBUFFER.R /*  */
#define GMAC_0_DMA_CH0_Status GMAC_0.DMA_CH0_STATUS.R      /*  */
#define GMAC_0_DMA_CH0_Miss_Frame_Cnt GMAC_0.DMA_CH0_MISS_FRAME_CNT.R /*  */
#define GMAC_0_DMA_CH0_RXP_Accept_Cnt GMAC_0.DMA_CH0_RXP_ACCEPT_CNT.R /*  */
#define GMAC_0_DMA_CH0_RX_ERI_Cnt GMAC_0.DMA_CH0_RX_ERI_CNT.R /*  */
#define GMAC_0_DMA_CH1_Control GMAC_0.DMA_CH1_CONTROL.R    /*  */
#define GMAC_0_DMA_CH1_Tx_Control GMAC_0.DMA_CH1_TX_CONTROL.R /*  */
#define GMAC_0_DMA_CH1_Rx_Control GMAC_0.DMA_CH1_RX_CONTROL.R /*  */
#define GMAC_0_DMA_CH1_TxDesc_List_Address GMAC_0.DMA_CH1_TXDESC_LIST_ADDRESS.R /*  */
#define GMAC_0_DMA_CH1_RxDesc_List_Address GMAC_0.DMA_CH1_RXDESC_LIST_ADDRESS.R /*  */
#define GMAC_0_DMA_CH1_TxDesc_Tail_Pointer GMAC_0.DMA_CH1_TXDESC_TAIL_POINTER.R /*  */
#define GMAC_0_DMA_CH1_RxDesc_Tail_Pointer GMAC_0.DMA_CH1_RXDESC_TAIL_POINTER.R /*  */
#define GMAC_0_DMA_CH1_TxDesc_Ring_Length GMAC_0.DMA_CH1_TXDESC_RING_LENGTH.R /*  */
#define GMAC_0_DMA_CH1_RxDesc_Ring_Length GMAC_0.DMA_CH1_RXDESC_RING_LENGTH.R /*  */
#define GMAC_0_DMA_CH1_Interrupt_Enable GMAC_0.DMA_CH1_INTERRUPT_ENABLE.R /*  */
#define GMAC_0_DMA_CH1_Rx_Interrupt_Watchdog_Timer GMAC_0.DMA_CH1_RX_INTERRUPT_WATCHDOG_TIMER.R /*  */
#define GMAC_0_DMA_CH1_Slot_Function_Control_Status GMAC_0.DMA_CH1_SLOT_FUNCTION_CONTROL_STATUS.R /*  */
#define GMAC_0_DMA_CH1_Current_App_TxDesc GMAC_0.DMA_CH1_CURRENT_APP_TXDESC.R /*  */
#define GMAC_0_DMA_CH1_Current_App_RxDesc GMAC_0.DMA_CH1_CURRENT_APP_RXDESC.R /*  */
#define GMAC_0_DMA_CH1_Current_App_TxBuffer GMAC_0.DMA_CH1_CURRENT_APP_TXBUFFER.R /*  */
#define GMAC_0_DMA_CH1_Current_App_RxBuffer GMAC_0.DMA_CH1_CURRENT_APP_RXBUFFER.R /*  */
#define GMAC_0_DMA_CH1_Status GMAC_0.DMA_CH1_STATUS.R      /*  */
#define GMAC_0_DMA_CH1_Miss_Frame_Cnt GMAC_0.DMA_CH1_MISS_FRAME_CNT.R /*  */
#define GMAC_0_DMA_CH1_RXP_Accept_Cnt GMAC_0.DMA_CH1_RXP_ACCEPT_CNT.R /*  */
#define GMAC_0_DMA_CH1_RX_ERI_Cnt GMAC_0.DMA_CH1_RX_ERI_CNT.R /*  */
#define GMAC_0_DMA_CH2_Control GMAC_0.DMA_CH2_CONTROL.R    /*  */
#define GMAC_0_DMA_CH2_Tx_Control GMAC_0.DMA_CH2_TX_CONTROL.R /*  */
#define GMAC_0_DMA_CH2_Rx_Control GMAC_0.DMA_CH2_RX_CONTROL.R /*  */
#define GMAC_0_DMA_CH2_TxDesc_List_Address GMAC_0.DMA_CH2_TXDESC_LIST_ADDRESS.R /*  */
#define GMAC_0_DMA_CH2_RxDesc_List_Address GMAC_0.DMA_CH2_RXDESC_LIST_ADDRESS.R /*  */
#define GMAC_0_DMA_CH2_TxDesc_Tail_Pointer GMAC_0.DMA_CH2_TXDESC_TAIL_POINTER.R /*  */
#define GMAC_0_DMA_CH2_RxDesc_Tail_Pointer GMAC_0.DMA_CH2_RXDESC_TAIL_POINTER.R /*  */
#define GMAC_0_DMA_CH2_TxDesc_Ring_Length GMAC_0.DMA_CH2_TXDESC_RING_LENGTH.R /*  */
#define GMAC_0_DMA_CH2_RxDesc_Ring_Length GMAC_0.DMA_CH2_RXDESC_RING_LENGTH.R /*  */
#define GMAC_0_DMA_CH2_Interrupt_Enable GMAC_0.DMA_CH2_INTERRUPT_ENABLE.R /*  */
#define GMAC_0_DMA_CH2_Rx_Interrupt_Watchdog_Timer GMAC_0.DMA_CH2_RX_INTERRUPT_WATCHDOG_TIMER.R /*  */
#define GMAC_0_DMA_CH2_Slot_Function_Control_Status GMAC_0.DMA_CH2_SLOT_FUNCTION_CONTROL_STATUS.R /*  */
#define GMAC_0_DMA_CH2_Current_App_TxDesc GMAC_0.DMA_CH2_CURRENT_APP_TXDESC.R /*  */
#define GMAC_0_DMA_CH2_Current_App_RxDesc GMAC_0.DMA_CH2_CURRENT_APP_RXDESC.R /*  */
#define GMAC_0_DMA_CH2_Current_App_TxBuffer GMAC_0.DMA_CH2_CURRENT_APP_TXBUFFER.R /*  */
#define GMAC_0_DMA_CH2_Current_App_RxBuffer GMAC_0.DMA_CH2_CURRENT_APP_RXBUFFER.R /*  */
#define GMAC_0_DMA_CH2_Status GMAC_0.DMA_CH2_STATUS.R      /*  */
#define GMAC_0_DMA_CH2_Miss_Frame_Cnt GMAC_0.DMA_CH2_MISS_FRAME_CNT.R /*  */
#define GMAC_0_DMA_CH2_RXP_Accept_Cnt GMAC_0.DMA_CH2_RXP_ACCEPT_CNT.R /*  */
#define GMAC_0_DMA_CH2_RX_ERI_Cnt GMAC_0.DMA_CH2_RX_ERI_CNT.R /*  */
#define GMAC_0_DMA_CH3_Control GMAC_0.DMA_CH3_CONTROL.R    /*  */
#define GMAC_0_DMA_CH3_Tx_Control GMAC_0.DMA_CH3_TX_CONTROL.R /*  */
#define GMAC_0_DMA_CH3_Rx_Control GMAC_0.DMA_CH3_RX_CONTROL.R /*  */
#define GMAC_0_DMA_CH3_TxDesc_List_Address GMAC_0.DMA_CH3_TXDESC_LIST_ADDRESS.R /*  */
#define GMAC_0_DMA_CH3_RxDesc_List_Address GMAC_0.DMA_CH3_RXDESC_LIST_ADDRESS.R /*  */
#define GMAC_0_DMA_CH3_TxDesc_Tail_Pointer GMAC_0.DMA_CH3_TXDESC_TAIL_POINTER.R /*  */
#define GMAC_0_DMA_CH3_RxDesc_Tail_Pointer GMAC_0.DMA_CH3_RXDESC_TAIL_POINTER.R /*  */
#define GMAC_0_DMA_CH3_TxDesc_Ring_Length GMAC_0.DMA_CH3_TXDESC_RING_LENGTH.R /*  */
#define GMAC_0_DMA_CH3_RxDesc_Ring_Length GMAC_0.DMA_CH3_RXDESC_RING_LENGTH.R /*  */
#define GMAC_0_DMA_CH3_Interrupt_Enable GMAC_0.DMA_CH3_INTERRUPT_ENABLE.R /*  */
#define GMAC_0_DMA_CH3_Rx_Interrupt_Watchdog_Timer GMAC_0.DMA_CH3_RX_INTERRUPT_WATCHDOG_TIMER.R /*  */
#define GMAC_0_DMA_CH3_Slot_Function_Control_Status GMAC_0.DMA_CH3_SLOT_FUNCTION_CONTROL_STATUS.R /*  */
#define GMAC_0_DMA_CH3_Current_App_TxDesc GMAC_0.DMA_CH3_CURRENT_APP_TXDESC.R /*  */
#define GMAC_0_DMA_CH3_Current_App_RxDesc GMAC_0.DMA_CH3_CURRENT_APP_RXDESC.R /*  */
#define GMAC_0_DMA_CH3_Current_App_TxBuffer GMAC_0.DMA_CH3_CURRENT_APP_TXBUFFER.R /*  */
#define GMAC_0_DMA_CH3_Current_App_RxBuffer GMAC_0.DMA_CH3_CURRENT_APP_RXBUFFER.R /*  */
#define GMAC_0_DMA_CH3_Status GMAC_0.DMA_CH3_STATUS.R      /*  */
#define GMAC_0_DMA_CH3_Miss_Frame_Cnt GMAC_0.DMA_CH3_MISS_FRAME_CNT.R /*  */
#define GMAC_0_DMA_CH3_RXP_Accept_Cnt GMAC_0.DMA_CH3_RXP_ACCEPT_CNT.R /*  */
#define GMAC_0_DMA_CH3_RX_ERI_Cnt GMAC_0.DMA_CH3_RX_ERI_CNT.R /*  */
#define GMAC_0_DMA_CH4_Control GMAC_0.DMA_CH4_CONTROL.R    /*  */
#define GMAC_0_DMA_CH4_Tx_Control GMAC_0.DMA_CH4_TX_CONTROL.R /*  */
#define GMAC_0_DMA_CH4_Rx_Control GMAC_0.DMA_CH4_RX_CONTROL.R /*  */
#define GMAC_0_DMA_CH4_TxDesc_List_Address GMAC_0.DMA_CH4_TXDESC_LIST_ADDRESS.R /*  */
#define GMAC_0_DMA_CH4_RxDesc_List_Address GMAC_0.DMA_CH4_RXDESC_LIST_ADDRESS.R /*  */
#define GMAC_0_DMA_CH4_TxDesc_Tail_Pointer GMAC_0.DMA_CH4_TXDESC_TAIL_POINTER.R /*  */
#define GMAC_0_DMA_CH4_RxDesc_Tail_Pointer GMAC_0.DMA_CH4_RXDESC_TAIL_POINTER.R /*  */
#define GMAC_0_DMA_CH4_TxDesc_Ring_Length GMAC_0.DMA_CH4_TXDESC_RING_LENGTH.R /*  */
#define GMAC_0_DMA_CH4_RxDesc_Ring_Length GMAC_0.DMA_CH4_RXDESC_RING_LENGTH.R /*  */
#define GMAC_0_DMA_CH4_Interrupt_Enable GMAC_0.DMA_CH4_INTERRUPT_ENABLE.R /*  */
#define GMAC_0_DMA_CH4_Rx_Interrupt_Watchdog_Timer GMAC_0.DMA_CH4_RX_INTERRUPT_WATCHDOG_TIMER.R /*  */
#define GMAC_0_DMA_CH4_Slot_Function_Control_Status GMAC_0.DMA_CH4_SLOT_FUNCTION_CONTROL_STATUS.R /*  */
#define GMAC_0_DMA_CH4_Current_App_TxDesc GMAC_0.DMA_CH4_CURRENT_APP_TXDESC.R /*  */
#define GMAC_0_DMA_CH4_Current_App_RxDesc GMAC_0.DMA_CH4_CURRENT_APP_RXDESC.R /*  */
#define GMAC_0_DMA_CH4_Current_App_TxBuffer GMAC_0.DMA_CH4_CURRENT_APP_TXBUFFER.R /*  */
#define GMAC_0_DMA_CH4_Current_App_RxBuffer GMAC_0.DMA_CH4_CURRENT_APP_RXBUFFER.R /*  */
#define GMAC_0_DMA_CH4_Status GMAC_0.DMA_CH4_STATUS.R      /*  */
#define GMAC_0_DMA_CH4_Miss_Frame_Cnt GMAC_0.DMA_CH4_MISS_FRAME_CNT.R /*  */
#define GMAC_0_DMA_CH4_RXP_Accept_Cnt GMAC_0.DMA_CH4_RXP_ACCEPT_CNT.R /*  */
#define GMAC_0_DMA_CH4_RX_ERI_Cnt GMAC_0.DMA_CH4_RX_ERI_CNT.R /*  */

/* I2C */
#define I2C_3_IBAD           I2C_3.IBAD.R                  /* I2C Bus Address Register */
#define I2C_3_IBFD           I2C_3.IBFD.R                  /* I2C Bus Frequency Divider Register */
#define I2C_3_IBCR           I2C_3.IBCR.R                  /* I2C Bus Control Register */
#define I2C_3_IBSR           I2C_3.IBSR.R                  /* I2C Bus Status Register */
#define I2C_3_IBDR           I2C_3.IBDR.R                  /* I2C Bus Data I/O Register */
#define I2C_3_IBIC           I2C_3.IBIC.R                  /* I2C Bus Interrupt Config Register */
#define I2C_3_IBDBG          I2C_3.IBDBG.R                 /* I2C Bus Debug Register */

#define I2C_4_IBAD           I2C_4.IBAD.R                  /* I2C Bus Address Register */
#define I2C_4_IBFD           I2C_4.IBFD.R                  /* I2C Bus Frequency Divider Register */
#define I2C_4_IBCR           I2C_4.IBCR.R                  /* I2C Bus Control Register */
#define I2C_4_IBSR           I2C_4.IBSR.R                  /* I2C Bus Status Register */
#define I2C_4_IBDR           I2C_4.IBDR.R                  /* I2C Bus Data I/O Register */
#define I2C_4_IBIC           I2C_4.IBIC.R                  /* I2C Bus Interrupt Config Register */
#define I2C_4_IBDBG          I2C_4.IBDBG.R                 /* I2C Bus Debug Register */

#define I2C_0_IBAD           I2C_0.IBAD.R                  /* I2C Bus Address Register */
#define I2C_0_IBFD           I2C_0.IBFD.R                  /* I2C Bus Frequency Divider Register */
#define I2C_0_IBCR           I2C_0.IBCR.R                  /* I2C Bus Control Register */
#define I2C_0_IBSR           I2C_0.IBSR.R                  /* I2C Bus Status Register */
#define I2C_0_IBDR           I2C_0.IBDR.R                  /* I2C Bus Data I/O Register */
#define I2C_0_IBIC           I2C_0.IBIC.R                  /* I2C Bus Interrupt Config Register */
#define I2C_0_IBDBG          I2C_0.IBDBG.R                 /* I2C Bus Debug Register */

#define I2C_1_IBAD           I2C_1.IBAD.R                  /* I2C Bus Address Register */
#define I2C_1_IBFD           I2C_1.IBFD.R                  /* I2C Bus Frequency Divider Register */
#define I2C_1_IBCR           I2C_1.IBCR.R                  /* I2C Bus Control Register */
#define I2C_1_IBSR           I2C_1.IBSR.R                  /* I2C Bus Status Register */
#define I2C_1_IBDR           I2C_1.IBDR.R                  /* I2C Bus Data I/O Register */
#define I2C_1_IBIC           I2C_1.IBIC.R                  /* I2C Bus Interrupt Config Register */
#define I2C_1_IBDBG          I2C_1.IBDBG.R                 /* I2C Bus Debug Register */

#define I2C_2_IBAD           I2C_2.IBAD.R                  /* I2C Bus Address Register */
#define I2C_2_IBFD           I2C_2.IBFD.R                  /* I2C Bus Frequency Divider Register */
#define I2C_2_IBCR           I2C_2.IBCR.R                  /* I2C Bus Control Register */
#define I2C_2_IBSR           I2C_2.IBSR.R                  /* I2C Bus Status Register */
#define I2C_2_IBDR           I2C_2.IBDR.R                  /* I2C Bus Data I/O Register */
#define I2C_2_IBIC           I2C_2.IBIC.R                  /* I2C Bus Interrupt Config Register */
#define I2C_2_IBDBG          I2C_2.IBDBG.R                 /* I2C Bus Debug Register */

/* JDC */
#define JDC_MCR              JDC.MCR.R                     /* Module Configuration Register */
#define JDC_MSR              JDC.MSR.R                     /* Module Status Register */
#define JDC_JOUT_IPS         JDC.JOUT_IPS.R                /* JTAG Output Data Register */
#define JDC_JIN_IPS          JDC.JIN_IPS.R                 /* JTAG Input Data Register */

/* LINFLEXD */
#define LINFLEXD_2_LINCR1    LINFLEXD_2.LINCR1.R           /* LIN Control Register 1 */
#define LINFLEXD_2_LINIER    LINFLEXD_2.LINIER.R           /* LIN Interrupt Enable Register */
#define LINFLEXD_2_LINSR     LINFLEXD_2.LINSR.R            /* LIN Status Register */
#define LINFLEXD_2_LINESR    LINFLEXD_2.LINESR.R           /* LIN Error Status Register */
#define LINFLEXD_2_UARTCR    LINFLEXD_2.UARTCR.R           /* UART Mode Control Register */
#define LINFLEXD_2_UARTSR    LINFLEXD_2.UARTSR.R           /* UART Mode Status Register */
#define LINFLEXD_2_LINTCSR   LINFLEXD_2.LINTCSR.R          /* LIN Time-Out Control Status Register */
#define LINFLEXD_2_LINOCR    LINFLEXD_2.LINOCR.R           /* LIN Output Compare Register */
#define LINFLEXD_2_LINTOCR   LINFLEXD_2.LINTOCR.R          /* LIN Time-Out Control Register */
#define LINFLEXD_2_LINFBRR   LINFLEXD_2.LINFBRR.R          /* LIN Fractional Baud Rate Register */
#define LINFLEXD_2_LINIBRR   LINFLEXD_2.LINIBRR.R          /* LIN Integer Baud Rate Register */
#define LINFLEXD_2_LINCFR    LINFLEXD_2.LINCFR.R           /* LIN Checksum Field Register */
#define LINFLEXD_2_LINCR2    LINFLEXD_2.LINCR2.R           /* LIN Control Register 2 */
#define LINFLEXD_2_BIDR      LINFLEXD_2.BIDR.R             /* Buffer Identifier Register */
#define LINFLEXD_2_BDRL      LINFLEXD_2.BDRL.R             /* Buffer Data Register Least Significant */
#define LINFLEXD_2_BDRM      LINFLEXD_2.BDRM.R             /* Buffer Data Register Most Significant */
#define LINFLEXD_2_GCR       LINFLEXD_2.GCR.R              /* Global Control Register */
#define LINFLEXD_2_UARTPTO   LINFLEXD_2.UARTPTO.R          /* UART Preset Timeout Register */
#define LINFLEXD_2_UARTCTO   LINFLEXD_2.UARTCTO.R          /* UART Current Timeout Register */
#define LINFLEXD_2_DMATXE    LINFLEXD_2.DMATXE.R           /* DMA Tx Enable Register */
#define LINFLEXD_2_DMARXE    LINFLEXD_2.DMARXE.R           /* DMA Rx Enable Register */

#define LINFLEXD_0_LINCR1    LINFLEXD_0.LINCR1.R           /* LIN Control Register 1 */
#define LINFLEXD_0_LINIER    LINFLEXD_0.LINIER.R           /* LIN Interrupt Enable Register */
#define LINFLEXD_0_LINSR     LINFLEXD_0.LINSR.R            /* LIN Status Register */
#define LINFLEXD_0_LINESR    LINFLEXD_0.LINESR.R           /* LIN Error Status Register */
#define LINFLEXD_0_UARTCR    LINFLEXD_0.UARTCR.R           /* UART Mode Control Register */
#define LINFLEXD_0_UARTSR    LINFLEXD_0.UARTSR.R           /* UART Mode Status Register */
#define LINFLEXD_0_LINTCSR   LINFLEXD_0.LINTCSR.R          /* LIN Time-Out Control Status Register */
#define LINFLEXD_0_LINOCR    LINFLEXD_0.LINOCR.R           /* LIN Output Compare Register */
#define LINFLEXD_0_LINTOCR   LINFLEXD_0.LINTOCR.R          /* LIN Time-Out Control Register */
#define LINFLEXD_0_LINFBRR   LINFLEXD_0.LINFBRR.R          /* LIN Fractional Baud Rate Register */
#define LINFLEXD_0_LINIBRR   LINFLEXD_0.LINIBRR.R          /* LIN Integer Baud Rate Register */
#define LINFLEXD_0_LINCFR    LINFLEXD_0.LINCFR.R           /* LIN Checksum Field Register */
#define LINFLEXD_0_LINCR2    LINFLEXD_0.LINCR2.R           /* LIN Control Register 2 */
#define LINFLEXD_0_BIDR      LINFLEXD_0.BIDR.R             /* Buffer Identifier Register */
#define LINFLEXD_0_BDRL      LINFLEXD_0.BDRL.R             /* Buffer Data Register Least Significant */
#define LINFLEXD_0_BDRM      LINFLEXD_0.BDRM.R             /* Buffer Data Register Most Significant */
#define LINFLEXD_0_GCR       LINFLEXD_0.GCR.R              /* Global Control Register */
#define LINFLEXD_0_UARTPTO   LINFLEXD_0.UARTPTO.R          /* UART Preset Timeout Register */
#define LINFLEXD_0_UARTCTO   LINFLEXD_0.UARTCTO.R          /* UART Current Timeout Register */
#define LINFLEXD_0_DMATXE    LINFLEXD_0.DMATXE.R           /* DMA Tx Enable Register */
#define LINFLEXD_0_DMARXE    LINFLEXD_0.DMARXE.R           /* DMA Rx Enable Register */

#define LINFLEXD_1_LINCR1    LINFLEXD_1.LINCR1.R           /* LIN Control Register 1 */
#define LINFLEXD_1_LINIER    LINFLEXD_1.LINIER.R           /* LIN Interrupt Enable Register */
#define LINFLEXD_1_LINSR     LINFLEXD_1.LINSR.R            /* LIN Status Register */
#define LINFLEXD_1_LINESR    LINFLEXD_1.LINESR.R           /* LIN Error Status Register */
#define LINFLEXD_1_UARTCR    LINFLEXD_1.UARTCR.R           /* UART Mode Control Register */
#define LINFLEXD_1_UARTSR    LINFLEXD_1.UARTSR.R           /* UART Mode Status Register */
#define LINFLEXD_1_LINTCSR   LINFLEXD_1.LINTCSR.R          /* LIN Time-Out Control Status Register */
#define LINFLEXD_1_LINOCR    LINFLEXD_1.LINOCR.R           /* LIN Output Compare Register */
#define LINFLEXD_1_LINTOCR   LINFLEXD_1.LINTOCR.R          /* LIN Time-Out Control Register */
#define LINFLEXD_1_LINFBRR   LINFLEXD_1.LINFBRR.R          /* LIN Fractional Baud Rate Register */
#define LINFLEXD_1_LINIBRR   LINFLEXD_1.LINIBRR.R          /* LIN Integer Baud Rate Register */
#define LINFLEXD_1_LINCFR    LINFLEXD_1.LINCFR.R           /* LIN Checksum Field Register */
#define LINFLEXD_1_LINCR2    LINFLEXD_1.LINCR2.R           /* LIN Control Register 2 */
#define LINFLEXD_1_BIDR      LINFLEXD_1.BIDR.R             /* Buffer Identifier Register */
#define LINFLEXD_1_BDRL      LINFLEXD_1.BDRL.R             /* Buffer Data Register Least Significant */
#define LINFLEXD_1_BDRM      LINFLEXD_1.BDRM.R             /* Buffer Data Register Most Significant */
#define LINFLEXD_1_GCR       LINFLEXD_1.GCR.R              /* Global Control Register */
#define LINFLEXD_1_UARTPTO   LINFLEXD_1.UARTPTO.R          /* UART Preset Timeout Register */
#define LINFLEXD_1_UARTCTO   LINFLEXD_1.UARTCTO.R          /* UART Current Timeout Register */
#define LINFLEXD_1_DMATXE    LINFLEXD_1.DMATXE.R           /* DMA Tx Enable Register */
#define LINFLEXD_1_DMARXE    LINFLEXD_1.DMARXE.R           /* DMA Rx Enable Register */

/* MCM */
#define MCM_PLREV            MCM.PLREV.R                   /* SoC-defined platform revision */
#define MCM_PCT              MCM.PCT.R                     /* Processor core type */
#define MCM_CPCR             MCM.CPCR.R                    /* Core Platform Control Register */
#define MCM_ISCR             MCM.ISCR.R                    /* Interrupt Status and Control Register */
#define MCM_LMEM_DESC_0      MCM.LMEM_DESC[0].R            /* Local Memory Descriptor Register0 */
#define MCM_LMEM_DESC_1      MCM.LMEM_DESC[1].R            /* Local Memory Descriptor Register1 */
#define MCM_LMEM_DESC_2      MCM.LMEM_DESC[2].R            /* Local Memory Descriptor Register2 */
#define MCM_LMEM_DESC_3      MCM.LMEM_DESC[3].R            /* Local Memory Descriptor Register3 */
#define MCM_LMEM_DESC_4      MCM.LMEM_DESC[4].R            /* Local Memory Descriptor Register4 */

/* MCT */
#define MTR_MCT_ALGOSEL      MTR_MCT.ALGOSEL.R             /* Algorithm Select register */
#define MTR_MCT_UDPR         MTR_MCT.UDPR.R                /* User Diagnostic Port Register */
#define MTR_MCT_BSTART       MTR_MCT.BSTART.R              /* BIST Start Register */
#define MTR_MCT_BISTALL      MTR_MCT.BISTALL.R             /* BIST All Register */
#define MTR_MCT_BISTSEL      MTR_MCT.BISTSEL.R             /* BIST Select Register */
#define MTR_MCT_BISTSTAT     MTR_MCT.BISTSTAT.R            /* BIST Status Register */

/* MC_CGM */
#define MC_CGM_0_PCFS_SDUR   MC_CGM_0.PCFS_SDUR.R          /* PCFS Step Duration */
#define MC_CGM_0_PCFS_DIVC12 MC_CGM_0.PCFS_DIVC12.R        /* PCFS Divider Change 12 Register */
#define MC_CGM_0_PCFS_DIVE12 MC_CGM_0.PCFS_DIVE12.R        /* PCFS Divider End 12 Register */
#define MC_CGM_0_PCFS_DIVS12 MC_CGM_0.PCFS_DIVS12.R        /* PCFS Divider Start 12 Register */
#define MC_CGM_0_MUX_0_CSC   MC_CGM_0.MUX_0_CSC.R          /* Clock Mux 0 Select Control Register */
#define MC_CGM_0_MUX_0_CSS   MC_CGM_0.MUX_0_CSS.R          /* Clock Mux 0 Select Status Register */
#define MC_CGM_0_MUX_0_DC_0  MC_CGM_0.MUX_0_DC_0.R         /* Clock Mux 0 Divider 0 Control Register */
#define MC_CGM_0_MUX_0_DC_1  MC_CGM_0.MUX_0_DC_1.R         /* Clock Mux 0 Divider 1 Control Register */
#define MC_CGM_0_MUX_0_DIV_UPD_STAT MC_CGM_0.MUX_0_DIV_UPD_STAT.R /* CGM Mux 0 Divider Update Status Register */
#define MC_CGM_0_MUX_1_CSC   MC_CGM_0.MUX_1_CSC.R          /* Clock Mux 1 Select Control Register */
#define MC_CGM_0_MUX_1_CSS   MC_CGM_0.MUX_1_CSS.R          /* Clock Mux 1 Select Status Register */
#define MC_CGM_0_MUX_1_DC_0  MC_CGM_0.MUX_1_DC_0.R         /* Clock Mux 1 Divider 0 Control Register */
#define MC_CGM_0_MUX_1_DIV_UPD_STAT MC_CGM_0.MUX_1_DIV_UPD_STAT.R /* CGM Mux 1 Divider Update Status Register */
#define MC_CGM_0_MUX_2_CSC   MC_CGM_0.MUX_2_CSC.R          /* Clock Mux 2 Select Control Register */
#define MC_CGM_0_MUX_2_CSS   MC_CGM_0.MUX_2_CSS.R          /* Clock Mux 2 Select Status Register */
#define MC_CGM_0_MUX_2_DC_0  MC_CGM_0.MUX_2_DC_0.R         /* Clock Mux 2 Divider 0 Control Register */
#define MC_CGM_0_MUX_2_DIV_UPD_STAT MC_CGM_0.MUX_2_DIV_UPD_STAT.R /* CGM Mux 2 Divider Update Status Register */
#define MC_CGM_0_MUX_3_CSC   MC_CGM_0.MUX_3_CSC.R          /* Clock Mux 3 Select Control Register */
#define MC_CGM_0_MUX_3_CSS   MC_CGM_0.MUX_3_CSS.R          /* Clock Mux 3 Select Status Register */
#define MC_CGM_0_MUX_3_DC_0  MC_CGM_0.MUX_3_DC_0.R         /* Clock Mux 3 Divider 0 Control Register */
#define MC_CGM_0_MUX_3_DIV_UPD_STAT MC_CGM_0.MUX_3_DIV_UPD_STAT.R /* CGM Mux 3 Divider Update Status Register */
#define MC_CGM_0_MUX_4_CSC   MC_CGM_0.MUX_4_CSC.R          /* Clock Mux 4 Select Control Register */
#define MC_CGM_0_MUX_4_CSS   MC_CGM_0.MUX_4_CSS.R          /* Clock Mux 4 Select Status Register */
#define MC_CGM_0_MUX_4_DC_0  MC_CGM_0.MUX_4_DC_0.R         /* Clock Mux 4 Divider 0 Control Register */
#define MC_CGM_0_MUX_4_DIV_UPD_STAT MC_CGM_0.MUX_4_DIV_UPD_STAT.R /* CGM Mux 4 Divider Update Status Register */
#define MC_CGM_0_MUX_5_CSC   MC_CGM_0.MUX_5_CSC.R          /* Clock Mux 5 Select Control Register */
#define MC_CGM_0_MUX_5_CSS   MC_CGM_0.MUX_5_CSS.R          /* Clock Mux 5 Select Status Register */
#define MC_CGM_0_MUX_5_DC_0  MC_CGM_0.MUX_5_DC_0.R         /* Clock Mux 5 Divider 0 Control Register */
#define MC_CGM_0_MUX_5_DIV_UPD_STAT MC_CGM_0.MUX_5_DIV_UPD_STAT.R /* CGM Mux 5 Divider Update Status Register */
#define MC_CGM_0_MUX_6_CSC   MC_CGM_0.MUX_6_CSC.R          /* Clock Mux 6 Select Control Register */
#define MC_CGM_0_MUX_6_CSS   MC_CGM_0.MUX_6_CSS.R          /* Clock Mux 6 Select Status Register */
#define MC_CGM_0_MUX_6_DC_0  MC_CGM_0.MUX_6_DC_0.R         /* Clock Mux 6 Divider 0 Control Register */
#define MC_CGM_0_MUX_6_DIV_UPD_STAT MC_CGM_0.MUX_6_DIV_UPD_STAT.R /* CGM Mux 6 Divider Update Status Register */
#define MC_CGM_0_MUX_7_CSC   MC_CGM_0.MUX_7_CSC.R          /* Clock Mux 7 Select Control Register */
#define MC_CGM_0_MUX_7_CSS   MC_CGM_0.MUX_7_CSS.R          /* Clock Mux 7 Select Status Register */
#define MC_CGM_0_MUX_8_CSC   MC_CGM_0.MUX_8_CSC.R          /* Clock Mux 8 Select Control Register */
#define MC_CGM_0_MUX_8_CSS   MC_CGM_0.MUX_8_CSS.R          /* Clock Mux 8 Select Status Register */
#define MC_CGM_0_MUX_9_CSC   MC_CGM_0.MUX_9_CSC.R          /* Clock Mux 9 Select Control Register */
#define MC_CGM_0_MUX_9_CSS   MC_CGM_0.MUX_9_CSS.R          /* Clock Mux 9 Select Status Register */
#define MC_CGM_0_MUX_9_DC_0  MC_CGM_0.MUX_9_DC_0.R         /* Clock Mux 9 Divider 0 Control Register */
#define MC_CGM_0_MUX_9_DIV_UPD_STAT MC_CGM_0.MUX_9_DIV_UPD_STAT.R /* CGM Mux 9 Divider Update Status Register */
#define MC_CGM_0_MUX_10_CSC  MC_CGM_0.MUX_10_CSC.R         /* Clock Mux 10 Select Control Register */
#define MC_CGM_0_MUX_10_CSS  MC_CGM_0.MUX_10_CSS.R         /* Clock Mux 10 Select Status Register */
#define MC_CGM_0_MUX_10_DC_0 MC_CGM_0.MUX_10_DC_0.R        /* Clock Mux 10 Divider 0 Control Register */
#define MC_CGM_0_MUX_10_DIV_UPD_STAT MC_CGM_0.MUX_10_DIV_UPD_STAT.R /* CGM Mux 10 Divider Update Status Register */
#define MC_CGM_0_MUX_11_CSC  MC_CGM_0.MUX_11_CSC.R         /* Clock Mux 11 Select Control Register */
#define MC_CGM_0_MUX_11_CSS  MC_CGM_0.MUX_11_CSS.R         /* Clock Mux 11 Select Status Register */
#define MC_CGM_0_MUX_12_CSC  MC_CGM_0.MUX_12_CSC.R         /* Clock Mux 12 Select Control Register */
#define MC_CGM_0_MUX_12_CSS  MC_CGM_0.MUX_12_CSS.R         /* Clock Mux 12 Select Status Register */
#define MC_CGM_0_MUX_12_DC_0 MC_CGM_0.MUX_12_DC_0.R        /* Clock Mux 12 Divider 0 Control Register */
#define MC_CGM_0_MUX_12_DIV_UPD_STAT MC_CGM_0.MUX_12_DIV_UPD_STAT.R /* CGM Mux 12 Divider Update Status Register */
#define MC_CGM_0_MUX_13_CSC  MC_CGM_0.MUX_13_CSC.R         /* Clock Mux 13 Select Control Register */
#define MC_CGM_0_MUX_13_CSS  MC_CGM_0.MUX_13_CSS.R         /* Clock Mux 13 Select Status Register */
#define MC_CGM_0_MUX_14_CSC  MC_CGM_0.MUX_14_CSC.R         /* Clock Mux 14 Select Control Register */
#define MC_CGM_0_MUX_14_CSS  MC_CGM_0.MUX_14_CSS.R         /* Clock Mux 14 Select Status Register */
#define MC_CGM_0_MUX_14_DC_0 MC_CGM_0.MUX_14_DC_0.R        /* Clock Mux 14 Divider 0 Control Register */
#define MC_CGM_0_MUX_14_DIV_UPD_STAT MC_CGM_0.MUX_14_DIV_UPD_STAT.R /* CGM Mux 14 Divider Update Status Register */
#define MC_CGM_0_MUX_15_CSC  MC_CGM_0.MUX_15_CSC.R         /* Clock Mux 15 Select Control Register */
#define MC_CGM_0_MUX_15_CSS  MC_CGM_0.MUX_15_CSS.R         /* Clock Mux 15 Select Status Register */
#define MC_CGM_0_MUX_15_DC_0 MC_CGM_0.MUX_15_DC_0.R        /* Clock Mux 15 Divider 0 Control Register */
#define MC_CGM_0_MUX_15_DIV_UPD_STAT MC_CGM_0.MUX_15_DIV_UPD_STAT.R /* CGM Mux 15 Divider Update Status Register */
#define MC_CGM_0_MUX_16_CSC  MC_CGM_0.MUX_16_CSC.R         /* Clock Mux 16 Select Control Register */
#define MC_CGM_0_MUX_16_CSS  MC_CGM_0.MUX_16_CSS.R         /* Clock Mux 16 Select Status Register */

#define MC_CGM_5_MUX_0_CSC   MC_CGM_5.MUX_0_CSC.R          /* Clock Mux 0 Select Control Register */
#define MC_CGM_5_MUX_0_CSS   MC_CGM_5.MUX_0_CSS.R          /* Clock Mux 0 Select Status Register */

/* MC_CGM_1 */
#define MC_CGM_1_PCFS_SDUR   MC_CGM_1.PCFS_SDUR.R          /* PCFS Step Duration */
#define MC_CGM_1_PCFS_DIVC4  MC_CGM_1.PCFS_DIVC4.R         /* PCFS Divider Change 4 Register */
#define MC_CGM_1_PCFS_DIVE4  MC_CGM_1.PCFS_DIVE4.R         /* PCFS Divider End 4 Register */
#define MC_CGM_1_PCFS_DIVS4  MC_CGM_1.PCFS_DIVS4.R         /* PCFS Divider Start 4 Register */
#define MC_CGM_1_MUX_0_CSC   MC_CGM_1.MUX_0_CSC.R          /* Clock Mux 0 Select Control Register */
#define MC_CGM_1_MUX_0_CSS   MC_CGM_1.MUX_0_CSS.R          /* Clock Mux 0 Select Status Register */

/* MC_CGM_2 */
#define MC_CGM_2_PCFS_SDUR   MC_CGM_2.PCFS_SDUR.R          /* PCFS Step Duration */
#define MC_CGM_2_PCFS_DIVC33 MC_CGM_2.PCFS_DIVC33.R        /* PCFS Divider Change 33 Register */
#define MC_CGM_2_PCFS_DIVE33 MC_CGM_2.PCFS_DIVE33.R        /* PCFS Divider End 33 Register */
#define MC_CGM_2_PCFS_DIVS33 MC_CGM_2.PCFS_DIVS33.R        /* PCFS Divider Start 33 Register */
#define MC_CGM_2_MUX_0_CSC   MC_CGM_2.MUX_0_CSC.R          /* Clock Mux 0 Select Control Register */
#define MC_CGM_2_MUX_0_CSS   MC_CGM_2.MUX_0_CSS.R          /* Clock Mux 0 Select Status Register */
#define MC_CGM_2_MUX_0_DC_0  MC_CGM_2.MUX_0_DC_0.R         /* Clock Mux 0 Divider 0 Control Register */
#define MC_CGM_2_MUX_0_DIV_TRIG_CTRL MC_CGM_2.MUX_0_DIV_TRIG_CTRL.R /* CGM Mux 0 Divider Trigger Control Register */
#define MC_CGM_2_MUX_0_DIV_TRIG MC_CGM_2.MUX_0_DIV_TRIG.R  /* CGM Mux 0 Divider Trigger Register */
#define MC_CGM_2_MUX_0_DIV_UPD_STAT MC_CGM_2.MUX_0_DIV_UPD_STAT.R /* CGM Mux 0 Divider Update Status Register */
#define MC_CGM_2_MUX_1_CSC   MC_CGM_2.MUX_1_CSC.R          /* Clock Mux 1 Select Control Register */
#define MC_CGM_2_MUX_1_CSS   MC_CGM_2.MUX_1_CSS.R          /* Clock Mux 1 Select Status Register */
#define MC_CGM_2_MUX_1_DC_0  MC_CGM_2.MUX_1_DC_0.R         /* Clock Mux 1 Divider 0 Control Register */
#define MC_CGM_2_MUX_1_DC_1  MC_CGM_2.MUX_1_DC_1.R         /* Clock Mux 1 Divider 1 Control Register */
#define MC_CGM_2_MUX_1_DIV_TRIG_CTRL MC_CGM_2.MUX_1_DIV_TRIG_CTRL.R /* CGM Mux 1 Divider Trigger Control Register */
#define MC_CGM_2_MUX_1_DIV_TRIG MC_CGM_2.MUX_1_DIV_TRIG.R  /* CGM Mux 1 Divider Trigger Register */
#define MC_CGM_2_MUX_1_DIV_UPD_STAT MC_CGM_2.MUX_1_DIV_UPD_STAT.R /* CGM Mux 1 Divider Update Status Register */
#define MC_CGM_2_MUX_2_CSC   MC_CGM_2.MUX_2_CSC.R          /* Clock Mux 2 Select Control Register */
#define MC_CGM_2_MUX_2_CSS   MC_CGM_2.MUX_2_CSS.R          /* Clock Mux 2 Select Status Register */
#define MC_CGM_2_MUX_2_DC_0  MC_CGM_2.MUX_2_DC_0.R         /* Clock Mux 2 Divider 0 Control Register */
#define MC_CGM_2_MUX_2_DC_1  MC_CGM_2.MUX_2_DC_1.R         /* Clock Mux 2 Divider 1 Control Register */
#define MC_CGM_2_MUX_2_DIV_TRIG_CTRL MC_CGM_2.MUX_2_DIV_TRIG_CTRL.R /* CGM Mux 2 Divider Trigger Control Register */
#define MC_CGM_2_MUX_2_DIV_TRIG MC_CGM_2.MUX_2_DIV_TRIG.R  /* CGM Mux 2 Divider Trigger Register */
#define MC_CGM_2_MUX_2_DIV_UPD_STAT MC_CGM_2.MUX_2_DIV_UPD_STAT.R /* CGM Mux 2 Divider Update Status Register */
#define MC_CGM_2_MUX_3_CSC   MC_CGM_2.MUX_3_CSC.R          /* Clock Mux 3 Select Control Register */
#define MC_CGM_2_MUX_3_CSS   MC_CGM_2.MUX_3_CSS.R          /* Clock Mux 3 Select Status Register */
#define MC_CGM_2_MUX_3_DC_0  MC_CGM_2.MUX_3_DC_0.R         /* Clock Mux 3 Divider 0 Control Register */
#define MC_CGM_2_MUX_3_DC_1  MC_CGM_2.MUX_3_DC_1.R         /* Clock Mux 3 Divider 1 Control Register */
#define MC_CGM_2_MUX_3_DIV_TRIG_CTRL MC_CGM_2.MUX_3_DIV_TRIG_CTRL.R /* CGM Mux 3 Divider Trigger Control Register */
#define MC_CGM_2_MUX_3_DIV_TRIG MC_CGM_2.MUX_3_DIV_TRIG.R  /* CGM Mux 3 Divider Trigger Register */
#define MC_CGM_2_MUX_3_DIV_UPD_STAT MC_CGM_2.MUX_3_DIV_UPD_STAT.R /* CGM Mux 3 Divider Update Status Register */
#define MC_CGM_2_MUX_4_CSC   MC_CGM_2.MUX_4_CSC.R          /* Clock Mux 4 Select Control Register */
#define MC_CGM_2_MUX_4_CSS   MC_CGM_2.MUX_4_CSS.R          /* Clock Mux 4 Select Status Register */
#define MC_CGM_2_MUX_5_CSC   MC_CGM_2.MUX_5_CSC.R          /* Clock Mux 5 Select Control Register */
#define MC_CGM_2_MUX_5_CSS   MC_CGM_2.MUX_5_CSS.R          /* Clock Mux 5 Select Status Register */
#define MC_CGM_2_MUX_6_CSC   MC_CGM_2.MUX_6_CSC.R          /* Clock Mux 6 Select Control Register */
#define MC_CGM_2_MUX_6_CSS   MC_CGM_2.MUX_6_CSS.R          /* Clock Mux 6 Select Status Register */
#define MC_CGM_2_MUX_7_CSC   MC_CGM_2.MUX_7_CSC.R          /* Clock Mux 7 Select Control Register */
#define MC_CGM_2_MUX_7_CSS   MC_CGM_2.MUX_7_CSS.R          /* Clock Mux 7 Select Status Register */
#define MC_CGM_2_MUX_7_DC_0  MC_CGM_2.MUX_7_DC_0.R         /* Clock Mux 7 Divider 0 Control Register */
#define MC_CGM_2_MUX_7_DIV_TRIG_CTRL MC_CGM_2.MUX_7_DIV_TRIG_CTRL.R /* CGM Mux 7 Divider Trigger Control Register */
#define MC_CGM_2_MUX_7_DIV_TRIG MC_CGM_2.MUX_7_DIV_TRIG.R  /* CGM Mux 7 Divider Trigger Register */
#define MC_CGM_2_MUX_7_DIV_UPD_STAT MC_CGM_2.MUX_7_DIV_UPD_STAT.R /* CGM Mux 7 Divider Update Status Register */
#define MC_CGM_2_MUX_8_CSC   MC_CGM_2.MUX_8_CSC.R          /* Clock Mux 8 Select Control Register */
#define MC_CGM_2_MUX_8_CSS   MC_CGM_2.MUX_8_CSS.R          /* Clock Mux 8 Select Status Register */
#define MC_CGM_2_MUX_8_DC_0  MC_CGM_2.MUX_8_DC_0.R         /* Clock Mux 8 Divider 0 Control Register */
#define MC_CGM_2_MUX_8_DIV_TRIG_CTRL MC_CGM_2.MUX_8_DIV_TRIG_CTRL.R /* CGM Mux 8 Divider Trigger Control Register */
#define MC_CGM_2_MUX_8_DIV_TRIG MC_CGM_2.MUX_8_DIV_TRIG.R  /* CGM Mux 8 Divider Trigger Register */
#define MC_CGM_2_MUX_8_DIV_UPD_STAT MC_CGM_2.MUX_8_DIV_UPD_STAT.R /* CGM Mux 8 Divider Update Status Register */
#define MC_CGM_2_MUX_9_CSC   MC_CGM_2.MUX_9_CSC.R          /* Clock Mux 9 Select Control Register */
#define MC_CGM_2_MUX_9_CSS   MC_CGM_2.MUX_9_CSS.R          /* Clock Mux 9 Select Status Register */
#define MC_CGM_2_MUX_9_DC_0  MC_CGM_2.MUX_9_DC_0.R         /* Clock Mux 9 Divider 0 Control Register */
#define MC_CGM_2_MUX_9_DIV_TRIG_CTRL MC_CGM_2.MUX_9_DIV_TRIG_CTRL.R /* CGM Mux 9 Divider Trigger Control Register */
#define MC_CGM_2_MUX_9_DIV_TRIG MC_CGM_2.MUX_9_DIV_TRIG.R  /* CGM Mux 9 Divider Trigger Register */
#define MC_CGM_2_MUX_9_DIV_UPD_STAT MC_CGM_2.MUX_9_DIV_UPD_STAT.R /* CGM Mux 9 Divider Update Status Register */

/* MC_ME */
#define MC_ME_CTL_KEY        MC_ME.CTL_KEY.R               /* Control Key Register */
#define MC_ME_MODE_CONF      MC_ME.MODE_CONF.R             /* Mode Configuration Register */
#define MC_ME_MODE_UPD       MC_ME.MODE_UPD.R              /* Mode Update Register */
#define MC_ME_MODE_STAT      MC_ME.MODE_STAT.R             /* Mode Status Register */
#define MC_ME_MAIN_COREID    MC_ME.MAIN_COREID.R           /* Main Core ID Register */
#define MC_ME_PRTN0_PCONF    MC_ME.PRTN0_PCONF.R           /* Partition 0 Process Configuration Register */
#define MC_ME_PRTN0_PUPD     MC_ME.PRTN0_PUPD.R            /* Partition 0 Process Update Register */
#define MC_ME_PRTN0_STAT     MC_ME.PRTN0_STAT.R            /* Partition 0 Status Register */
#define MC_ME_PRTN0_COFB0_STAT MC_ME.PRTN0_COFB0_STAT.R    /* Partition 0 COFB Set 0 Clock Status Register */
#define MC_ME_PRTN0_COFB0_CLKEN MC_ME.PRTN0_COFB0_CLKEN.R  /* Partition 0 COFB Set 0 Clock Enable Register */
#define MC_ME_PRTN0_CORE0_PCONF MC_ME.PRTN0_CORE0_PCONF.R  /* Partition 0 Core 0 Process Configuration Register */
#define MC_ME_PRTN0_CORE0_PUPD MC_ME.PRTN0_CORE0_PUPD.R    /* Partition 0 Core 0 Process Update Register */
#define MC_ME_PRTN0_CORE0_STAT MC_ME.PRTN0_CORE0_STAT.R    /* Partition 0 Core 0 Status Register */
#define MC_ME_PRTN0_CORE0_ADDR MC_ME.PRTN0_CORE0_ADDR.R    /* Partition 0 Core 0 Address Register */
#define MC_ME_PRTN0_CORE1_PCONF MC_ME.PRTN0_CORE1_PCONF.R  /* Partition 0 Core 1 Process Configuration Register */
#define MC_ME_PRTN0_CORE1_PUPD MC_ME.PRTN0_CORE1_PUPD.R    /* Partition 0 Core 1 Process Update Register */
#define MC_ME_PRTN0_CORE1_STAT MC_ME.PRTN0_CORE1_STAT.R    /* Partition 0 Core 1 Status Register */
#define MC_ME_PRTN0_CORE1_ADDR MC_ME.PRTN0_CORE1_ADDR.R    /* Partition 0 Core 1 Address Register */
#define MC_ME_PRTN0_CORE2_PCONF MC_ME.PRTN0_CORE2_PCONF.R  /* Partition 0 Core 2 Process Configuration Register */
#define MC_ME_PRTN0_CORE2_PUPD MC_ME.PRTN0_CORE2_PUPD.R    /* Partition 0 Core 2 Process Update Register */
#define MC_ME_PRTN0_CORE2_STAT MC_ME.PRTN0_CORE2_STAT.R    /* Partition 0 Core 2 Status Register */
#define MC_ME_PRTN0_CORE2_ADDR MC_ME.PRTN0_CORE2_ADDR.R    /* Partition 0 Core 2 Address Register */
#define MC_ME_PRTN0_CORE3_PCONF MC_ME.PRTN0_CORE3_PCONF.R  /* Partition 0 Core 3 Process Configuration Register */
#define MC_ME_PRTN0_CORE3_PUPD MC_ME.PRTN0_CORE3_PUPD.R    /* Partition 0 Core 3 Process Update Register */
#define MC_ME_PRTN0_CORE3_STAT MC_ME.PRTN0_CORE3_STAT.R    /* Partition 0 Core 3 Status Register */
#define MC_ME_PRTN0_CORE3_ADDR MC_ME.PRTN0_CORE3_ADDR.R    /* Partition 0 Core 3 Address Register */
#define MC_ME_PRTN1_PCONF    MC_ME.PRTN1_PCONF.R           /* Partition 1 Process Configuration Register */
#define MC_ME_PRTN1_PUPD     MC_ME.PRTN1_PUPD.R            /* Partition 1 Process Update Register */
#define MC_ME_PRTN1_STAT     MC_ME.PRTN1_STAT.R            /* Partition 1 Status Register */
#define MC_ME_PRTN1_CORE0_PCONF MC_ME.PRTN1_CORE0_PCONF.R  /* Partition 1 Core 0 Process Configuration Register */
#define MC_ME_PRTN1_CORE0_PUPD MC_ME.PRTN1_CORE0_PUPD.R    /* Partition 1 Core 0 Process Update Register */
#define MC_ME_PRTN1_CORE0_STAT MC_ME.PRTN1_CORE0_STAT.R    /* Partition 1 Core 0 Status Register */
#define MC_ME_PRTN1_CORE0_ADDR MC_ME.PRTN1_CORE0_ADDR.R    /* Partition 1 Core 0 Address Register */
#define MC_ME_PRTN1_CORE1_PCONF MC_ME.PRTN1_CORE1_PCONF.R  /* Partition 1 Core 1 Process Configuration Register */
#define MC_ME_PRTN1_CORE1_PUPD MC_ME.PRTN1_CORE1_PUPD.R    /* Partition 1 Core 1 Process Update Register */
#define MC_ME_PRTN1_CORE1_STAT MC_ME.PRTN1_CORE1_STAT.R    /* Partition 1 Core 1 Status Register */
#define MC_ME_PRTN1_CORE1_ADDR MC_ME.PRTN1_CORE1_ADDR.R    /* Partition 1 Core 1 Address Register */
#define MC_ME_PRTN1_CORE2_PCONF MC_ME.PRTN1_CORE2_PCONF.R  /* Partition 1 Core 2 Process Configuration Register */
#define MC_ME_PRTN1_CORE2_PUPD MC_ME.PRTN1_CORE2_PUPD.R    /* Partition 1 Core 2 Process Update Register */
#define MC_ME_PRTN1_CORE2_STAT MC_ME.PRTN1_CORE2_STAT.R    /* Partition 1 Core 2 Status Register */
#define MC_ME_PRTN1_CORE2_ADDR MC_ME.PRTN1_CORE2_ADDR.R    /* Partition 1 Core 2 Address Register */
#define MC_ME_PRTN1_CORE3_PCONF MC_ME.PRTN1_CORE3_PCONF.R  /* Partition 1 Core 3 Process Configuration Register */
#define MC_ME_PRTN1_CORE3_PUPD MC_ME.PRTN1_CORE3_PUPD.R    /* Partition 1 Core 3 Process Update Register */
#define MC_ME_PRTN1_CORE3_STAT MC_ME.PRTN1_CORE3_STAT.R    /* Partition 1 Core 3 Status Register */
#define MC_ME_PRTN1_CORE3_ADDR MC_ME.PRTN1_CORE3_ADDR.R    /* Partition 1 Core 3 Address Register */
#define MC_ME_PRTN2_PCONF    MC_ME.PRTN2_PCONF.R           /* Partition 2 Process Configuration Register */
#define MC_ME_PRTN2_PUPD     MC_ME.PRTN2_PUPD.R            /* Partition 2 Process Update Register */
#define MC_ME_PRTN2_STAT     MC_ME.PRTN2_STAT.R            /* Partition 2 Status Register */
#define MC_ME_PRTN2_COFB0_STAT MC_ME.PRTN2_COFB0_STAT.R    /* Partition 2 COFB Set 0 Clock Status Register */
#define MC_ME_PRTN2_COFB0_CLKEN MC_ME.PRTN2_COFB0_CLKEN.R  /* Partition 2 COFB Set 0 Clock Enable Register */
#define MC_ME_PRTN3_PCONF    MC_ME.PRTN3_PCONF.R           /* Partition 3 Process Configuration Register */
#define MC_ME_PRTN3_PUPD     MC_ME.PRTN3_PUPD.R            /* Partition 3 Process Update Register */
#define MC_ME_PRTN3_STAT     MC_ME.PRTN3_STAT.R            /* Partition 3 Status Register */
#define MC_ME_PRTN3_COFB0_STAT MC_ME.PRTN3_COFB0_STAT.R    /* Partition 3 COFB Set 0 Clock Status Register */
#define MC_ME_PRTN3_COFB0_CLKEN MC_ME.PRTN3_COFB0_CLKEN.R  /* Partition 3 COFB Set 0 Clock Enable Register */

/* MC_RGM */
#define MC_RGM_DES           MC_RGM.DES.R                  /* Destructive Event Status Register */
#define MC_RGM_FES           MC_RGM.FES.R                  /* Functional /External Reset Status Register */
#define MC_RGM_FREC          MC_RGM.FREC.R                 /* Functional Reset Escalation Counter Register */
#define MC_RGM_FRET          MC_RGM.FRET.R                 /* Functional Reset Escalation Threshold Register */
#define MC_RGM_DRET          MC_RGM.DRET.R                 /* Destructive Reset Escalation Threshold Register */
#define MC_RGM_ERCTRL        MC_RGM.ERCTRL.R               /* External Reset Control Register */
#define MC_RGM_RDSS          MC_RGM.RDSS.R                 /* Reset During Standby Status Register */
#define MC_RGM_PRST0_0       MC_RGM.PRST_0[0].PRST_0.R     /* Peripheral Reset */
#define MC_RGM_PRST1_0       MC_RGM.PRST_0[1].PRST_0.R     /* Peripheral Reset */
#define MC_RGM_PRST2_0       MC_RGM.PRST_0[2].PRST_0.R     /* Peripheral Reset */
#define MC_RGM_PRST3_0       MC_RGM.PRST_0[3].PRST_0.R     /* Peripheral Reset */
#define MC_RGM_PRST4_0       MC_RGM.PRST_0[4].PRST_0.R     /* Peripheral Reset */
#define MC_RGM_PRST5_0       MC_RGM.PRST_0[5].PRST_0.R     /* Peripheral Reset */
#define MC_RGM_PRST6_0       MC_RGM.PRST_0[6].PRST_0.R     /* Peripheral Reset */
#define MC_RGM_PRST7_0       MC_RGM.PRST_0[7].PRST_0.R     /* Peripheral Reset */
#define MC_RGM_PSTAT0_0      MC_RGM.PSTAT_0[0].PSTAT_0.R   /* Peripheral Reset Status Register */
#define MC_RGM_PSTAT1_0      MC_RGM.PSTAT_0[1].PSTAT_0.R   /* Peripheral Reset Status Register */
#define MC_RGM_PSTAT2_0      MC_RGM.PSTAT_0[2].PSTAT_0.R   /* Peripheral Reset Status Register */
#define MC_RGM_PSTAT3_0      MC_RGM.PSTAT_0[3].PSTAT_0.R   /* Peripheral Reset Status Register */
#define MC_RGM_PSTAT4_0      MC_RGM.PSTAT_0[4].PSTAT_0.R   /* Peripheral Reset Status Register */
#define MC_RGM_PSTAT5_0      MC_RGM.PSTAT_0[5].PSTAT_0.R   /* Peripheral Reset Status Register */
#define MC_RGM_PSTAT6_0      MC_RGM.PSTAT_0[6].PSTAT_0.R   /* Peripheral Reset Status Register */
#define MC_RGM_PSTAT7_0      MC_RGM.PSTAT_0[7].PSTAT_0.R   /* Peripheral Reset Status Register */

/* MDM_AP */
#define MDM_AP_STATUS        MDM_AP.STATUS.R               /* MDM_AP status */
#define MDM_AP_CONTROL       MDM_AP.CONTROL.R              /* MDM_AP control */
#define MDM_AP_WIR_EN        MDM_AP.WIR_EN.R               /* WIR enable */
#define MDM_AP_WIR_REL       MDM_AP.WIR_REL.R              /* WIR release */
#define MDM_AP_STATUS2       MDM_AP.STATUS2.R              /* MDM_AP status 2 */
#define MDM_AP_CORTEX_A53_A0_IP_DBG MDM_AP.CORTEX_A53_A0_IP_DBG.R /* Cortex-A53 A0 debug */
#define MDM_AP_CONTROL2      MDM_AP.CONTROL2.R             /* MDM_AP control 2 */
#define MDM_AP_CA53_A1_IP_DBG MDM_AP.CA53_A1_IP_DBG.R      /* Cortex-A53 A1 debug */
#define MDM_AP_CORTEX_A53_B0_IP_DBG MDM_AP.CORTEX_A53_B0_IP_DBG.R /* Cortex-A53 B0 debug */
#define MDM_AP_CORTEX_A53_B1_IP_DBG MDM_AP.CORTEX_A53_B1_IP_DBG.R /* Cortex-A53 B1 debug */
#define MDM_AP_CORTEX_M7_0_IP_DBG MDM_AP.CORTEX_M7_0_IP_DBG.R /* Cortex M7_0 debug */
#define MDM_AP_CORTEX_M7_1_IP_DBG MDM_AP.CORTEX_M7_1_IP_DBG.R /* Cortex M7_1 debug */
#define MDM_AP_CORTEX_M7_2_IP_DBG MDM_AP.CORTEX_M7_2_IP_DBG.R /* Cortex M7_2 debug */
#define MDM_AP_DAP_EN_CTRL   MDM_AP.DAP_EN_CTRL.R          /* DAP enable control */

/* MSCM */
#define MSCM_CPXTYPE         MSCM.CPXTYPE.R                /* Processor x Type Register */
#define MSCM_CPXNUM          MSCM.CPXNUM.R                 /* Processor x Number Register */
#define MSCM_CPXREV          MSCM.CPXREV.R                 /* Processor x Revision */
#define MSCM_CPXCFG0         MSCM.CPXCFG0.R                /* Processor x Configuration 0 Register */
#define MSCM_CPXCFG1         MSCM.CPXCFG1.R                /* Processor x Configuration 1 Register */
#define MSCM_CPXCFG2         MSCM.CPXCFG2.R                /* Processor x Configuration 2 Register */
#define MSCM_CPXCFG3         MSCM.CPXCFG3.R                /* Processor x Configuration 3 Register */
#define MSCM_CP0TYPE         MSCM.CP0TYPE.R                /* Processor 0 Type Register */
#define MSCM_CP0NUM          MSCM.CP0NUM.R                 /* Processor 0 Number Register */
#define MSCM_CP0REV          MSCM.CP0REV.R                 /* Processor 0 Count Register */
#define MSCM_CP0CFG0         MSCM.CP0CFG0.R                /* Processor 0 Configuration 0 Register */
#define MSCM_CP0CFG1         MSCM.CP0CFG1.R                /* Processor 0 Configuration 1 Register */
#define MSCM_CP0CFG2         MSCM.CP0CFG2.R                /* Processor 0 Configuration 2 Register */
#define MSCM_CP0CFG3         MSCM.CP0CFG3.R                /* Processor 0 Configuration 3 Register */
#define MSCM_CP1TYPE         MSCM.CP1TYPE.R                /* Processor 1 Type Register */
#define MSCM_CP1NUM          MSCM.CP1NUM.R                 /* Processor 1 Number Register */
#define MSCM_CP1REV          MSCM.CP1REV.R                 /* Processor 1 Count Register */
#define MSCM_CP1CFG0         MSCM.CP1CFG0.R                /* Processor 1 Configuration 0 Register */
#define MSCM_CP1CFG1         MSCM.CP1CFG1.R                /* Processor 1 Configuration 1 Register */
#define MSCM_CP1CFG2         MSCM.CP1CFG2.R                /* Processor 1 Configuration 2 Register */
#define MSCM_CP1CFG3         MSCM.CP1CFG3.R                /* Processor 1 Configuration 3 Register */
#define MSCM_CP2TYPE         MSCM.CP2TYPE.R                /* Processor 2 Type Register */
#define MSCM_CP2NUM          MSCM.CP2NUM.R                 /* Processor 2 Number Register */
#define MSCM_CP2REV          MSCM.CP2REV.R                 /* Processor 1 Count Register */
#define MSCM_CP2CFG0         MSCM.CP2CFG0.R                /* Processor 2 Configuration 0 Register */
#define MSCM_CP2CFG1         MSCM.CP2CFG1.R                /* Processor 2 Configuration 1 Register */
#define MSCM_CP2CFG2         MSCM.CP2CFG2.R                /* Processor 2 Configuration 2 Register */
#define MSCM_CP2CFG3         MSCM.CP2CFG3.R                /* Processor 2 Configuration 3 Register */
#define MSCM_CP3TYPE         MSCM.CP3TYPE.R                /* Processor 3 Type Register */
#define MSCM_CP3NUM          MSCM.CP3NUM.R                 /* Processor 3 Number Register */
#define MSCM_CP3REV          MSCM.CP3REV.R                 /* Processor 1 Count Register */
#define MSCM_CP3CFG0         MSCM.CP3CFG0.R                /* Processor 3 Configuration 0 Register */
#define MSCM_CP3CFG1         MSCM.CP3CFG1.R                /* Processor 3 Configuration 1 Register */
#define MSCM_CP3CFG2         MSCM.CP3CFG2.R                /* Processor 3 Configuration 2 Register */
#define MSCM_CP3CFG3         MSCM.CP3CFG3.R                /* Processor 3 Configuration 3 Register */
#define MSCM_CP4TYPE         MSCM.CP4TYPE.R                /* Processor 4 Type Register */
#define MSCM_CP4NUM          MSCM.CP4NUM.R                 /* Processor 4 Number Register */
#define MSCM_CP4REV          MSCM.CP4REV.R                 /* Processor 4 Count Register */
#define MSCM_CP4CFG0         MSCM.CP4CFG0.R                /* Processor 3 Configuration 0 Register */
#define MSCM_CP4CFG1         MSCM.CP4CFG1.R                /* Processor 4 Configuration 1 Register */
#define MSCM_CP4CFG2         MSCM.CP4CFG2.R                /* Processor 3 Configuration 2 Register */
#define MSCM_CP4CFG3         MSCM.CP4CFG3.R                /* Processor 3 Configuration 3 Register */
#define MSCM_CP5TYPE         MSCM.CP5TYPE.R                /* Processor 4 Type Register */
#define MSCM_CP5NUM          MSCM.CP5NUM.R                 /* Processor 5 Number Register */
#define MSCM_CP5REV          MSCM.CP5REV.R                 /* Processor 5 Count Register */
#define MSCM_CP5CFG0         MSCM.CP5CFG0.R                /* Processor 5 Configuration 0 Register */
#define MSCM_CP5CFG1         MSCM.CP5CFG1.R                /* Processor 5 Configuration 1 Register */
#define MSCM_CP5CFG2         MSCM.CP5CFG2.R                /* Processor 5 Configuration 2 Register */
#define MSCM_CP5CFG3         MSCM.CP5CFG3.R                /* Processor 5 Configuration 3 Register */
#define MSCM_CP6TYPE         MSCM.CP6TYPE.R                /* Processor 6 Type Register */
#define MSCM_CP6NUM          MSCM.CP6NUM.R                 /* Processor 6 Number Register */
#define MSCM_CP6REV          MSCM.CP6REV.R                 /* Processor 6 Count Register */
#define MSCM_CP6CFG0         MSCM.CP6CFG0.R                /* Processor 6 Configuration 0 Register */
#define MSCM_CP6CFG1         MSCM.CP6CFG1.R                /* Processor 6 Configuration 1 Register */
#define MSCM_CP6CFG2         MSCM.CP6CFG2.R                /* Processor 6 Configuration 2 Register */
#define MSCM_CP6CFG3         MSCM.CP6CFG3.R                /* Processor 6 Configuration 3 Register */
#define MSCM_IRCP0ISR0       MSCM.IRCP0ISR0.R              /* Interrupt Router CP0 Interrupt0 Status Register */
#define MSCM_IRCP0IGR0       MSCM.IRCP0IGR0.R              /* Interrupt Router CP0 Interrupt0 Generation Register */
#define MSCM_IRCP0ISR1       MSCM.IRCP0ISR1.R              /* Interrupt Router CP0 Interrupt1 Status Register */
#define MSCM_IRCP0IGR1       MSCM.IRCP0IGR1.R              /* Interrupt Router CP0 Interrupt1 Generation Register */
#define MSCM_IRCP0ISR2       MSCM.IRCP0ISR2.R              /* Interrupt Router CP0 Interrupt2 Status Register */
#define MSCM_IRCP0IGR2       MSCM.IRCP0IGR2.R              /* Interrupt Router CP0 Interrupt2 Generation Register */
#define MSCM_IRCP0ISR3       MSCM.IRCP0ISR3.R              /* Interrupt Router CPn Interruptx Status Register */
#define MSCM_IRCP0IGR3       MSCM.IRCP0IGR3.R              /* Interrupt Router CPn Interruptx Generation Register */
#define MSCM_IRCP1ISR0       MSCM.IRCP1ISR0.R              /* Interrupt Router CP1 Interrupt0 Status Register */
#define MSCM_IRCP1IGR0       MSCM.IRCP1IGR0.R              /* Interrupt Router CP1 Interrupt0 Generation Register */
#define MSCM_IRCP1ISR1       MSCM.IRCP1ISR1.R              /* Interrupt Router CP1 Interrupt1 Status Register */
#define MSCM_IRCP1IGR1       MSCM.IRCP1IGR1.R              /* Interrupt Router CP1 Interrupt1 Generation Register */
#define MSCM_IRCP1ISR2       MSCM.IRCP1ISR2.R              /* Interrupt Router CP1 Interrupt2 Status Register */
#define MSCM_IRCP1IGR2       MSCM.IRCP1IGR2.R              /* Interrupt Router CP1 Interrupt2 Generation Register */
#define MSCM_IRCP1ISR3       MSCM.IRCP1ISR3.R              /* Interrupt Router CPn Interruptx Status Register */
#define MSCM_IRCP1IGR3       MSCM.IRCP1IGR3.R              /* Interrupt Router CPn Interruptx Generation Register */
#define MSCM_IRCP2ISR0       MSCM.IRCP2ISR0.R              /* Interrupt Router CP2 Interrupt0 Status Register */
#define MSCM_IRCP2IGR0       MSCM.IRCP2IGR0.R              /* Interrupt Router CP2 Interrupt0 Generation Register */
#define MSCM_IRCP2ISR1       MSCM.IRCP2ISR1.R              /* Interrupt Router CP2 Interrupt1 Status Register */
#define MSCM_IRCP2IGR1       MSCM.IRCP2IGR1.R              /* Interrupt Router CP2 Interrupt1 Generation Register */
#define MSCM_IRCP2ISR2       MSCM.IRCP2ISR2.R              /* Interrupt Router CP2 Interrupt2 Status Register */
#define MSCM_IRCP2IGR2       MSCM.IRCP2IGR2.R              /* Interrupt Router CP2 Interrupt2 Generation Register */
#define MSCM_IRCP2ISR3       MSCM.IRCP2ISR3.R              /* Interrupt Router CPn Interruptx Status Register */
#define MSCM_IRCP2IGR3       MSCM.IRCP2IGR3.R              /* Interrupt Router CPn Interruptx Generation Register */
#define MSCM_IRCP3ISR0       MSCM.IRCP3ISR0.R              /* Interrupt Router CP3 Interrupt0 Status Register */
#define MSCM_IRCP3IGR0       MSCM.IRCP3IGR0.R              /* Interrupt Router CP3 Interrupt0 Generation Register */
#define MSCM_IRCP3ISR1       MSCM.IRCP3ISR1.R              /* Interrupt Router CP3 Interrupt1 Status Register */
#define MSCM_IRCP3IGR1       MSCM.IRCP3IGR1.R              /* Interrupt Router CP3 Interrupt1 Generation Register */
#define MSCM_IRCP3ISR2       MSCM.IRCP3ISR2.R              /* Interrupt Router CP3 Interrupt2 Status Register */
#define MSCM_IRCP3IGR2       MSCM.IRCP3IGR2.R              /* Interrupt Router CP3 Interrupt2 Generation Register */
#define MSCM_IRCP3ISR3       MSCM.IRCP3ISR3.R              /* Interrupt Router CPn Interruptx Status Register */
#define MSCM_IRCP3IGR3       MSCM.IRCP3IGR3.R              /* Interrupt Router CPn Interruptx Generation Register */
#define MSCM_IRCP4ISR0       MSCM.IRCP4ISR0.R              /* Interrupt Router CP4 Interrupt0 Status Register */
#define MSCM_IRCP4IGR0       MSCM.IRCP4IGR0.R              /* Interrupt Router CP4 Interrupt0 Generation Register */
#define MSCM_IRCP4ISR1       MSCM.IRCP4ISR1.R              /* Interrupt Router CP4 Interrupt1 Status Register */
#define MSCM_IRCP4IGR1       MSCM.IRCP4IGR1.R              /* Interrupt Router CP4 Interrupt1 Generation Register */
#define MSCM_IRCP4ISR2       MSCM.IRCP4ISR2.R              /* Interrupt Router CP4 Interrupt2 Status Register */
#define MSCM_IRCP4IGR2       MSCM.IRCP4IGR2.R              /* Interrupt Router CP4 Interrupt2 Generation Register */
#define MSCM_IRCP4ISR3       MSCM.IRCP4ISR3.R              /* Interrupt Router CPn Interruptx Status Register */
#define MSCM_IRCP4IGR3       MSCM.IRCP4IGR3.R              /* Interrupt Router CPn Interruptx Generation Register */
#define MSCM_IRCP5ISR0       MSCM.IRCP5ISR0.R              /* Interrupt Router CP5 Interrupt0 Status Register */
#define MSCM_IRCP5IGR0       MSCM.IRCP5IGR0.R              /* Interrupt Router CP5 Interrupt0 Generation Register */
#define MSCM_IRCP5ISR1       MSCM.IRCP5ISR1.R              /* Interrupt Router CP5 Interrupt1 Status Register */
#define MSCM_IRCP5IGR1       MSCM.IRCP5IGR1.R              /* Interrupt Router CP5 Interrupt1 Generation Register */
#define MSCM_IRCP5ISR2       MSCM.IRCP5ISR2.R              /* Interrupt Router CP5 Interrupt2 Status Register */
#define MSCM_IRCP5IGR2       MSCM.IRCP5IGR2.R              /* Interrupt Router CP5 Interrupt2 Generation Register */
#define MSCM_IRCP5ISR3       MSCM.IRCP5ISR3.R              /* Interrupt Router CPn Interruptx Status Register */
#define MSCM_IRCP5IGR3       MSCM.IRCP5IGR3.R              /* Interrupt Router CPn Interruptx Generation Register */
#define MSCM_IRCP6ISR0       MSCM.IRCP6ISR0.R              /* Interrupt Router CP6 Interrupt0 Status Register */
#define MSCM_IRCP6IGR0       MSCM.IRCP6IGR0.R              /* Interrupt Router CP6 Interrupt0 Generation Register */
#define MSCM_IRCP6ISR1       MSCM.IRCP6ISR1.R              /* Interrupt Router CP6 Interrupt1 Status Register */
#define MSCM_IRCP6IGR1       MSCM.IRCP6IGR1.R              /* Interrupt Router CP6 Interrupt1 Generation Register */
#define MSCM_IRCP6ISR2       MSCM.IRCP6ISR2.R              /* Interrupt Router CP6 Interrupt2 Status Register */
#define MSCM_IRCP6IGR2       MSCM.IRCP6IGR2.R              /* Interrupt Router CP6 Interrupt2 Generation Register */
#define MSCM_IRCP6ISR3       MSCM.IRCP6ISR3.R              /* Interrupt Router CPn Interruptx Status Register */
#define MSCM_IRCP6IGR3       MSCM.IRCP6IGR3.R              /* Interrupt Router CPn Interruptx Generation Register */
#define MSCM_IRCP0ISR4       MSCM.IRCP0ISR4.R              /* Interrupt Router CPn Interruptx Status Register */
#define MSCM_IRCP0IGR4       MSCM.IRCP0IGR4.R              /* Interrupt Router CPn Interruptx Generation Register */
#define MSCM_IRCP1ISR4       MSCM.IRCP1ISR4.R              /* Interrupt Router CPn Interruptx Status Register */
#define MSCM_IRCP1IGR4       MSCM.IRCP1IGR4.R              /* Interrupt Router CPn Interruptx Generation Register */
#define MSCM_IRCP2ISR4       MSCM.IRCP2ISR4.R              /* Interrupt Router CPn Interruptx Status Register */
#define MSCM_IRCP2IGR4       MSCM.IRCP2IGR4.R              /* Interrupt Router CPn Interruptx Generation Register */
#define MSCM_IRCP3ISR4       MSCM.IRCP3ISR4.R              /* Interrupt Router CPn Interruptx Status Register */
#define MSCM_IRCP3IGR4       MSCM.IRCP3IGR4.R              /* Interrupt Router CPn Interruptx Generation Register */
#define MSCM_IRCP4ISR4       MSCM.IRCP4ISR4.R              /* Interrupt Router CPn Interruptx Status Register */
#define MSCM_IRCP4IGR4       MSCM.IRCP4IGR4.R              /* Interrupt Router CPn Interruptx Generation Register */
#define MSCM_IRCP5ISR4       MSCM.IRCP5ISR4.R              /* Interrupt Router CPn Interruptx Status Register */
#define MSCM_IRCP5IGR4       MSCM.IRCP5IGR4.R              /* Interrupt Router CPn Interruptx Generation Register */
#define MSCM_IRCP6ISR4       MSCM.IRCP6ISR4.R              /* Interrupt Router CPn Interruptx Status Register */
#define MSCM_IRCP6IGR4       MSCM.IRCP6IGR4.R              /* Interrupt Router CPn Interruptx Generation Register */
#define MSCM_IRCPCFG         MSCM.IRCPCFG.R                /* Interrupt Router Configuration Register */
#define MSCM_IRNMIC          MSCM.IRNMIC.R                 /* Interrupt Router Non-Maskable Interrupt Control Register */
#define MSCM_IRSPRC0         MSCM.IRSPRC[0].R              /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC1         MSCM.IRSPRC[1].R              /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC2         MSCM.IRSPRC[2].R              /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC3         MSCM.IRSPRC[3].R              /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC4         MSCM.IRSPRC[4].R              /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC5         MSCM.IRSPRC[5].R              /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC6         MSCM.IRSPRC[6].R              /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC7         MSCM.IRSPRC[7].R              /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC8         MSCM.IRSPRC[8].R              /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC9         MSCM.IRSPRC[9].R              /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC10        MSCM.IRSPRC[10].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC11        MSCM.IRSPRC[11].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC12        MSCM.IRSPRC[12].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC13        MSCM.IRSPRC[13].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC14        MSCM.IRSPRC[14].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC15        MSCM.IRSPRC[15].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC16        MSCM.IRSPRC[16].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC17        MSCM.IRSPRC[17].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC18        MSCM.IRSPRC[18].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC19        MSCM.IRSPRC[19].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC20        MSCM.IRSPRC[20].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC21        MSCM.IRSPRC[21].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC22        MSCM.IRSPRC[22].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC23        MSCM.IRSPRC[23].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC24        MSCM.IRSPRC[24].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC25        MSCM.IRSPRC[25].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC26        MSCM.IRSPRC[26].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC27        MSCM.IRSPRC[27].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC28        MSCM.IRSPRC[28].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC29        MSCM.IRSPRC[29].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC30        MSCM.IRSPRC[30].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC31        MSCM.IRSPRC[31].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC32        MSCM.IRSPRC[32].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC33        MSCM.IRSPRC[33].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC34        MSCM.IRSPRC[34].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC35        MSCM.IRSPRC[35].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC36        MSCM.IRSPRC[36].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC37        MSCM.IRSPRC[37].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC38        MSCM.IRSPRC[38].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC39        MSCM.IRSPRC[39].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC40        MSCM.IRSPRC[40].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC41        MSCM.IRSPRC[41].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC42        MSCM.IRSPRC[42].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC43        MSCM.IRSPRC[43].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC44        MSCM.IRSPRC[44].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC45        MSCM.IRSPRC[45].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC46        MSCM.IRSPRC[46].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC47        MSCM.IRSPRC[47].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC48        MSCM.IRSPRC[48].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC49        MSCM.IRSPRC[49].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC50        MSCM.IRSPRC[50].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC51        MSCM.IRSPRC[51].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC52        MSCM.IRSPRC[52].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC53        MSCM.IRSPRC[53].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC54        MSCM.IRSPRC[54].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC55        MSCM.IRSPRC[55].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC56        MSCM.IRSPRC[56].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC57        MSCM.IRSPRC[57].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC58        MSCM.IRSPRC[58].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC59        MSCM.IRSPRC[59].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC60        MSCM.IRSPRC[60].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC61        MSCM.IRSPRC[61].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC62        MSCM.IRSPRC[62].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC63        MSCM.IRSPRC[63].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC64        MSCM.IRSPRC[64].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC65        MSCM.IRSPRC[65].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC66        MSCM.IRSPRC[66].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC67        MSCM.IRSPRC[67].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC68        MSCM.IRSPRC[68].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC69        MSCM.IRSPRC[69].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC70        MSCM.IRSPRC[70].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC71        MSCM.IRSPRC[71].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC72        MSCM.IRSPRC[72].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC73        MSCM.IRSPRC[73].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC74        MSCM.IRSPRC[74].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC75        MSCM.IRSPRC[75].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC76        MSCM.IRSPRC[76].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC77        MSCM.IRSPRC[77].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC78        MSCM.IRSPRC[78].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC79        MSCM.IRSPRC[79].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC80        MSCM.IRSPRC[80].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC81        MSCM.IRSPRC[81].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC82        MSCM.IRSPRC[82].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC83        MSCM.IRSPRC[83].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC84        MSCM.IRSPRC[84].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC85        MSCM.IRSPRC[85].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC86        MSCM.IRSPRC[86].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC87        MSCM.IRSPRC[87].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC88        MSCM.IRSPRC[88].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC89        MSCM.IRSPRC[89].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC90        MSCM.IRSPRC[90].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC91        MSCM.IRSPRC[91].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC92        MSCM.IRSPRC[92].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC93        MSCM.IRSPRC[93].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC94        MSCM.IRSPRC[94].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC95        MSCM.IRSPRC[95].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC96        MSCM.IRSPRC[96].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC97        MSCM.IRSPRC[97].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC98        MSCM.IRSPRC[98].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC99        MSCM.IRSPRC[99].R             /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC100       MSCM.IRSPRC[100].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC101       MSCM.IRSPRC[101].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC102       MSCM.IRSPRC[102].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC103       MSCM.IRSPRC[103].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC104       MSCM.IRSPRC[104].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC105       MSCM.IRSPRC[105].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC106       MSCM.IRSPRC[106].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC107       MSCM.IRSPRC[107].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC108       MSCM.IRSPRC[108].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC109       MSCM.IRSPRC[109].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC110       MSCM.IRSPRC[110].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC111       MSCM.IRSPRC[111].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC112       MSCM.IRSPRC[112].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC113       MSCM.IRSPRC[113].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC114       MSCM.IRSPRC[114].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC115       MSCM.IRSPRC[115].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC116       MSCM.IRSPRC[116].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC117       MSCM.IRSPRC[117].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC118       MSCM.IRSPRC[118].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC119       MSCM.IRSPRC[119].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC120       MSCM.IRSPRC[120].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC121       MSCM.IRSPRC[121].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC122       MSCM.IRSPRC[122].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC123       MSCM.IRSPRC[123].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC124       MSCM.IRSPRC[124].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC125       MSCM.IRSPRC[125].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC126       MSCM.IRSPRC[126].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC127       MSCM.IRSPRC[127].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC128       MSCM.IRSPRC[128].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC129       MSCM.IRSPRC[129].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC130       MSCM.IRSPRC[130].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC131       MSCM.IRSPRC[131].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC132       MSCM.IRSPRC[132].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC133       MSCM.IRSPRC[133].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC134       MSCM.IRSPRC[134].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC135       MSCM.IRSPRC[135].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC136       MSCM.IRSPRC[136].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC137       MSCM.IRSPRC[137].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC138       MSCM.IRSPRC[138].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC139       MSCM.IRSPRC[139].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC140       MSCM.IRSPRC[140].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC141       MSCM.IRSPRC[141].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC142       MSCM.IRSPRC[142].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC143       MSCM.IRSPRC[143].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC144       MSCM.IRSPRC[144].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC145       MSCM.IRSPRC[145].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC146       MSCM.IRSPRC[146].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC147       MSCM.IRSPRC[147].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC148       MSCM.IRSPRC[148].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC149       MSCM.IRSPRC[149].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC150       MSCM.IRSPRC[150].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC151       MSCM.IRSPRC[151].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC152       MSCM.IRSPRC[152].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC153       MSCM.IRSPRC[153].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC154       MSCM.IRSPRC[154].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC155       MSCM.IRSPRC[155].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC156       MSCM.IRSPRC[156].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC157       MSCM.IRSPRC[157].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC158       MSCM.IRSPRC[158].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC159       MSCM.IRSPRC[159].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC160       MSCM.IRSPRC[160].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC161       MSCM.IRSPRC[161].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC162       MSCM.IRSPRC[162].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC163       MSCM.IRSPRC[163].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC164       MSCM.IRSPRC[164].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC165       MSCM.IRSPRC[165].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC166       MSCM.IRSPRC[166].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC167       MSCM.IRSPRC[167].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC168       MSCM.IRSPRC[168].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC169       MSCM.IRSPRC[169].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC170       MSCM.IRSPRC[170].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC171       MSCM.IRSPRC[171].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC172       MSCM.IRSPRC[172].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC173       MSCM.IRSPRC[173].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC174       MSCM.IRSPRC[174].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC175       MSCM.IRSPRC[175].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC176       MSCM.IRSPRC[176].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC177       MSCM.IRSPRC[177].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC178       MSCM.IRSPRC[178].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC179       MSCM.IRSPRC[179].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC180       MSCM.IRSPRC[180].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC181       MSCM.IRSPRC[181].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC182       MSCM.IRSPRC[182].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC183       MSCM.IRSPRC[183].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC184       MSCM.IRSPRC[184].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC185       MSCM.IRSPRC[185].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC186       MSCM.IRSPRC[186].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC187       MSCM.IRSPRC[187].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC188       MSCM.IRSPRC[188].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC189       MSCM.IRSPRC[189].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC190       MSCM.IRSPRC[190].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC191       MSCM.IRSPRC[191].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC192       MSCM.IRSPRC[192].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC193       MSCM.IRSPRC[193].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC194       MSCM.IRSPRC[194].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC195       MSCM.IRSPRC[195].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC196       MSCM.IRSPRC[196].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC197       MSCM.IRSPRC[197].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC198       MSCM.IRSPRC[198].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC199       MSCM.IRSPRC[199].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC200       MSCM.IRSPRC[200].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC201       MSCM.IRSPRC[201].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC202       MSCM.IRSPRC[202].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC203       MSCM.IRSPRC[203].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC204       MSCM.IRSPRC[204].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC205       MSCM.IRSPRC[205].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC206       MSCM.IRSPRC[206].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC207       MSCM.IRSPRC[207].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC208       MSCM.IRSPRC[208].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC209       MSCM.IRSPRC[209].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC210       MSCM.IRSPRC[210].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC211       MSCM.IRSPRC[211].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC212       MSCM.IRSPRC[212].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC213       MSCM.IRSPRC[213].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC214       MSCM.IRSPRC[214].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC215       MSCM.IRSPRC[215].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC216       MSCM.IRSPRC[216].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC217       MSCM.IRSPRC[217].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC218       MSCM.IRSPRC[218].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC219       MSCM.IRSPRC[219].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC220       MSCM.IRSPRC[220].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC221       MSCM.IRSPRC[221].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC222       MSCM.IRSPRC[222].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC223       MSCM.IRSPRC[223].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC224       MSCM.IRSPRC[224].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC225       MSCM.IRSPRC[225].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC226       MSCM.IRSPRC[226].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC227       MSCM.IRSPRC[227].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC228       MSCM.IRSPRC[228].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC229       MSCM.IRSPRC[229].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC230       MSCM.IRSPRC[230].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC231       MSCM.IRSPRC[231].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC232       MSCM.IRSPRC[232].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC233       MSCM.IRSPRC[233].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC234       MSCM.IRSPRC[234].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC235       MSCM.IRSPRC[235].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC236       MSCM.IRSPRC[236].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC237       MSCM.IRSPRC[237].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC238       MSCM.IRSPRC[238].R            /* Interrupt Router Shared Peripheral Routing Control Register */
#define MSCM_IRSPRC239       MSCM.IRSPRC[239].R            /* Interrupt Router Shared Peripheral Routing Control Register */

/* MTR */
#define MTR_BIST_EFD         MTR_BIST.EFD.R                /* ECC Fail Detection Register */
#define MTR_BIST_BSTAT       MTR_BIST.BSTAT.R              /* BIST Status Register */

/* MU */
#define MU0__MUA_VER         MU0__MUA.VER.R                /* Version ID Register */
#define MU0__MUA_PAR         MU0__MUA.PAR.R                /* Parameter Register */
#define MU0__MUA_CR          MU0__MUA.CR.R                 /* Control Register */
#define MU0__MUA_SR          MU0__MUA.SR.R                 /* Status Register */
#define MU0__MUA_CCR0        MU0__MUA.CCR0.R               /* Core Control Register 0 */
#define MU0__MUA_CSSR0       MU0__MUA.CSSR0.R              /* Core Sticky Status Register 0 */
#define MU0__MUA_FCR         MU0__MUA.FCR.R                /* Flag Control Register */
#define MU0__MUA_FSR         MU0__MUA.FSR.R                /* Flag Status Register */
#define MU0__MUA_GIER        MU0__MUA.GIER.R               /* General Interrupt Enable Register */
#define MU0__MUA_GCR         MU0__MUA.GCR.R                /* General Control Register */
#define MU0__MUA_GSR         MU0__MUA.GSR.R                /* General Status Register */
#define MU0__MUA_TCR         MU0__MUA.TCR.R                /* Transmit Control Register */
#define MU0__MUA_TSR         MU0__MUA.TSR.R                /* Transmit Status Register */
#define MU0__MUA_RCR         MU0__MUA.RCR.R                /* Receive Control Register */
#define MU0__MUA_RSR         MU0__MUA.RSR.R                /* Receive Status Register */
#define MU0__MUA_TR0         MU0__MUA.TR[0].R              /* Transmit Register */
#define MU0__MUA_TR1         MU0__MUA.TR[1].R              /* Transmit Register */
#define MU0__MUA_TR2         MU0__MUA.TR[2].R              /* Transmit Register */
#define MU0__MUA_TR3         MU0__MUA.TR[3].R              /* Transmit Register */
#define MU0__MUA_TR4         MU0__MUA.TR[4].R              /* Transmit Register */
#define MU0__MUA_TR5         MU0__MUA.TR[5].R              /* Transmit Register */
#define MU0__MUA_TR6         MU0__MUA.TR[6].R              /* Transmit Register */
#define MU0__MUA_TR7         MU0__MUA.TR[7].R              /* Transmit Register */
#define MU0__MUA_TR8         MU0__MUA.TR[8].R              /* Transmit Register */
#define MU0__MUA_TR9         MU0__MUA.TR[9].R              /* Transmit Register */
#define MU0__MUA_TR10        MU0__MUA.TR[10].R             /* Transmit Register */
#define MU0__MUA_TR11        MU0__MUA.TR[11].R             /* Transmit Register */
#define MU0__MUA_TR12        MU0__MUA.TR[12].R             /* Transmit Register */
#define MU0__MUA_TR13        MU0__MUA.TR[13].R             /* Transmit Register */
#define MU0__MUA_TR14        MU0__MUA.TR[14].R             /* Transmit Register */
#define MU0__MUA_TR15        MU0__MUA.TR[15].R             /* Transmit Register */
#define MU0__MUA_RR0         MU0__MUA.RR[0].R              /* Receive Register */
#define MU0__MUA_RR1         MU0__MUA.RR[1].R              /* Receive Register */
#define MU0__MUA_RR2         MU0__MUA.RR[2].R              /* Receive Register */
#define MU0__MUA_RR3         MU0__MUA.RR[3].R              /* Receive Register */
#define MU0__MUA_RR4         MU0__MUA.RR[4].R              /* Receive Register */
#define MU0__MUA_RR5         MU0__MUA.RR[5].R              /* Receive Register */
#define MU0__MUA_RR6         MU0__MUA.RR[6].R              /* Receive Register */
#define MU0__MUA_RR7         MU0__MUA.RR[7].R              /* Receive Register */
#define MU0__MUA_RR8         MU0__MUA.RR[8].R              /* Receive Register */
#define MU0__MUA_RR9         MU0__MUA.RR[9].R              /* Receive Register */
#define MU0__MUA_RR10        MU0__MUA.RR[10].R             /* Receive Register */
#define MU0__MUA_RR11        MU0__MUA.RR[11].R             /* Receive Register */
#define MU0__MUA_RR12        MU0__MUA.RR[12].R             /* Receive Register */
#define MU0__MUA_RR13        MU0__MUA.RR[13].R             /* Receive Register */
#define MU0__MUA_RR14        MU0__MUA.RR[14].R             /* Receive Register */
#define MU0__MUA_RR15        MU0__MUA.RR[15].R             /* Receive Register */

#define MU1__MUA_VER         MU1__MUA.VER.R                /* Version ID Register */
#define MU1__MUA_PAR         MU1__MUA.PAR.R                /* Parameter Register */
#define MU1__MUA_CR          MU1__MUA.CR.R                 /* Control Register */
#define MU1__MUA_SR          MU1__MUA.SR.R                 /* Status Register */
#define MU1__MUA_CCR0        MU1__MUA.CCR0.R               /* Core Control Register 0 */
#define MU1__MUA_CSSR0       MU1__MUA.CSSR0.R              /* Core Sticky Status Register 0 */
#define MU1__MUA_FCR         MU1__MUA.FCR.R                /* Flag Control Register */
#define MU1__MUA_FSR         MU1__MUA.FSR.R                /* Flag Status Register */
#define MU1__MUA_GIER        MU1__MUA.GIER.R               /* General Interrupt Enable Register */
#define MU1__MUA_GCR         MU1__MUA.GCR.R                /* General Control Register */
#define MU1__MUA_GSR         MU1__MUA.GSR.R                /* General Status Register */
#define MU1__MUA_TCR         MU1__MUA.TCR.R                /* Transmit Control Register */
#define MU1__MUA_TSR         MU1__MUA.TSR.R                /* Transmit Status Register */
#define MU1__MUA_RCR         MU1__MUA.RCR.R                /* Receive Control Register */
#define MU1__MUA_RSR         MU1__MUA.RSR.R                /* Receive Status Register */
#define MU1__MUA_TR0         MU1__MUA.TR[0].R              /* Transmit Register */
#define MU1__MUA_TR1         MU1__MUA.TR[1].R              /* Transmit Register */
#define MU1__MUA_TR2         MU1__MUA.TR[2].R              /* Transmit Register */
#define MU1__MUA_TR3         MU1__MUA.TR[3].R              /* Transmit Register */
#define MU1__MUA_TR4         MU1__MUA.TR[4].R              /* Transmit Register */
#define MU1__MUA_TR5         MU1__MUA.TR[5].R              /* Transmit Register */
#define MU1__MUA_TR6         MU1__MUA.TR[6].R              /* Transmit Register */
#define MU1__MUA_TR7         MU1__MUA.TR[7].R              /* Transmit Register */
#define MU1__MUA_TR8         MU1__MUA.TR[8].R              /* Transmit Register */
#define MU1__MUA_TR9         MU1__MUA.TR[9].R              /* Transmit Register */
#define MU1__MUA_TR10        MU1__MUA.TR[10].R             /* Transmit Register */
#define MU1__MUA_TR11        MU1__MUA.TR[11].R             /* Transmit Register */
#define MU1__MUA_TR12        MU1__MUA.TR[12].R             /* Transmit Register */
#define MU1__MUA_TR13        MU1__MUA.TR[13].R             /* Transmit Register */
#define MU1__MUA_TR14        MU1__MUA.TR[14].R             /* Transmit Register */
#define MU1__MUA_TR15        MU1__MUA.TR[15].R             /* Transmit Register */
#define MU1__MUA_RR0         MU1__MUA.RR[0].R              /* Receive Register */
#define MU1__MUA_RR1         MU1__MUA.RR[1].R              /* Receive Register */
#define MU1__MUA_RR2         MU1__MUA.RR[2].R              /* Receive Register */
#define MU1__MUA_RR3         MU1__MUA.RR[3].R              /* Receive Register */
#define MU1__MUA_RR4         MU1__MUA.RR[4].R              /* Receive Register */
#define MU1__MUA_RR5         MU1__MUA.RR[5].R              /* Receive Register */
#define MU1__MUA_RR6         MU1__MUA.RR[6].R              /* Receive Register */
#define MU1__MUA_RR7         MU1__MUA.RR[7].R              /* Receive Register */
#define MU1__MUA_RR8         MU1__MUA.RR[8].R              /* Receive Register */
#define MU1__MUA_RR9         MU1__MUA.RR[9].R              /* Receive Register */
#define MU1__MUA_RR10        MU1__MUA.RR[10].R             /* Receive Register */
#define MU1__MUA_RR11        MU1__MUA.RR[11].R             /* Receive Register */
#define MU1__MUA_RR12        MU1__MUA.RR[12].R             /* Receive Register */
#define MU1__MUA_RR13        MU1__MUA.RR[13].R             /* Receive Register */
#define MU1__MUA_RR14        MU1__MUA.RR[14].R             /* Receive Register */
#define MU1__MUA_RR15        MU1__MUA.RR[15].R             /* Receive Register */

#define MU2__MUA_VER         MU2__MUA.VER.R                /* Version ID Register */
#define MU2__MUA_PAR         MU2__MUA.PAR.R                /* Parameter Register */
#define MU2__MUA_CR          MU2__MUA.CR.R                 /* Control Register */
#define MU2__MUA_SR          MU2__MUA.SR.R                 /* Status Register */
#define MU2__MUA_CCR0        MU2__MUA.CCR0.R               /* Core Control Register 0 */
#define MU2__MUA_CSSR0       MU2__MUA.CSSR0.R              /* Core Sticky Status Register 0 */
#define MU2__MUA_FCR         MU2__MUA.FCR.R                /* Flag Control Register */
#define MU2__MUA_FSR         MU2__MUA.FSR.R                /* Flag Status Register */
#define MU2__MUA_GIER        MU2__MUA.GIER.R               /* General Interrupt Enable Register */
#define MU2__MUA_GCR         MU2__MUA.GCR.R                /* General Control Register */
#define MU2__MUA_GSR         MU2__MUA.GSR.R                /* General Status Register */
#define MU2__MUA_TCR         MU2__MUA.TCR.R                /* Transmit Control Register */
#define MU2__MUA_TSR         MU2__MUA.TSR.R                /* Transmit Status Register */
#define MU2__MUA_RCR         MU2__MUA.RCR.R                /* Receive Control Register */
#define MU2__MUA_RSR         MU2__MUA.RSR.R                /* Receive Status Register */
#define MU2__MUA_TR0         MU2__MUA.TR[0].R              /* Transmit Register */
#define MU2__MUA_TR1         MU2__MUA.TR[1].R              /* Transmit Register */
#define MU2__MUA_TR2         MU2__MUA.TR[2].R              /* Transmit Register */
#define MU2__MUA_TR3         MU2__MUA.TR[3].R              /* Transmit Register */
#define MU2__MUA_TR4         MU2__MUA.TR[4].R              /* Transmit Register */
#define MU2__MUA_TR5         MU2__MUA.TR[5].R              /* Transmit Register */
#define MU2__MUA_TR6         MU2__MUA.TR[6].R              /* Transmit Register */
#define MU2__MUA_TR7         MU2__MUA.TR[7].R              /* Transmit Register */
#define MU2__MUA_TR8         MU2__MUA.TR[8].R              /* Transmit Register */
#define MU2__MUA_TR9         MU2__MUA.TR[9].R              /* Transmit Register */
#define MU2__MUA_TR10        MU2__MUA.TR[10].R             /* Transmit Register */
#define MU2__MUA_TR11        MU2__MUA.TR[11].R             /* Transmit Register */
#define MU2__MUA_TR12        MU2__MUA.TR[12].R             /* Transmit Register */
#define MU2__MUA_TR13        MU2__MUA.TR[13].R             /* Transmit Register */
#define MU2__MUA_TR14        MU2__MUA.TR[14].R             /* Transmit Register */
#define MU2__MUA_TR15        MU2__MUA.TR[15].R             /* Transmit Register */
#define MU2__MUA_RR0         MU2__MUA.RR[0].R              /* Receive Register */
#define MU2__MUA_RR1         MU2__MUA.RR[1].R              /* Receive Register */
#define MU2__MUA_RR2         MU2__MUA.RR[2].R              /* Receive Register */
#define MU2__MUA_RR3         MU2__MUA.RR[3].R              /* Receive Register */
#define MU2__MUA_RR4         MU2__MUA.RR[4].R              /* Receive Register */
#define MU2__MUA_RR5         MU2__MUA.RR[5].R              /* Receive Register */
#define MU2__MUA_RR6         MU2__MUA.RR[6].R              /* Receive Register */
#define MU2__MUA_RR7         MU2__MUA.RR[7].R              /* Receive Register */
#define MU2__MUA_RR8         MU2__MUA.RR[8].R              /* Receive Register */
#define MU2__MUA_RR9         MU2__MUA.RR[9].R              /* Receive Register */
#define MU2__MUA_RR10        MU2__MUA.RR[10].R             /* Receive Register */
#define MU2__MUA_RR11        MU2__MUA.RR[11].R             /* Receive Register */
#define MU2__MUA_RR12        MU2__MUA.RR[12].R             /* Receive Register */
#define MU2__MUA_RR13        MU2__MUA.RR[13].R             /* Receive Register */
#define MU2__MUA_RR14        MU2__MUA.RR[14].R             /* Receive Register */
#define MU2__MUA_RR15        MU2__MUA.RR[15].R             /* Receive Register */

#define MU3__MUA_VER         MU3__MUA.VER.R                /* Version ID Register */
#define MU3__MUA_PAR         MU3__MUA.PAR.R                /* Parameter Register */
#define MU3__MUA_CR          MU3__MUA.CR.R                 /* Control Register */
#define MU3__MUA_SR          MU3__MUA.SR.R                 /* Status Register */
#define MU3__MUA_CCR0        MU3__MUA.CCR0.R               /* Core Control Register 0 */
#define MU3__MUA_CSSR0       MU3__MUA.CSSR0.R              /* Core Sticky Status Register 0 */
#define MU3__MUA_FCR         MU3__MUA.FCR.R                /* Flag Control Register */
#define MU3__MUA_FSR         MU3__MUA.FSR.R                /* Flag Status Register */
#define MU3__MUA_GIER        MU3__MUA.GIER.R               /* General Interrupt Enable Register */
#define MU3__MUA_GCR         MU3__MUA.GCR.R                /* General Control Register */
#define MU3__MUA_GSR         MU3__MUA.GSR.R                /* General Status Register */
#define MU3__MUA_TCR         MU3__MUA.TCR.R                /* Transmit Control Register */
#define MU3__MUA_TSR         MU3__MUA.TSR.R                /* Transmit Status Register */
#define MU3__MUA_RCR         MU3__MUA.RCR.R                /* Receive Control Register */
#define MU3__MUA_RSR         MU3__MUA.RSR.R                /* Receive Status Register */
#define MU3__MUA_TR0         MU3__MUA.TR[0].R              /* Transmit Register */
#define MU3__MUA_TR1         MU3__MUA.TR[1].R              /* Transmit Register */
#define MU3__MUA_TR2         MU3__MUA.TR[2].R              /* Transmit Register */
#define MU3__MUA_TR3         MU3__MUA.TR[3].R              /* Transmit Register */
#define MU3__MUA_TR4         MU3__MUA.TR[4].R              /* Transmit Register */
#define MU3__MUA_TR5         MU3__MUA.TR[5].R              /* Transmit Register */
#define MU3__MUA_TR6         MU3__MUA.TR[6].R              /* Transmit Register */
#define MU3__MUA_TR7         MU3__MUA.TR[7].R              /* Transmit Register */
#define MU3__MUA_TR8         MU3__MUA.TR[8].R              /* Transmit Register */
#define MU3__MUA_TR9         MU3__MUA.TR[9].R              /* Transmit Register */
#define MU3__MUA_TR10        MU3__MUA.TR[10].R             /* Transmit Register */
#define MU3__MUA_TR11        MU3__MUA.TR[11].R             /* Transmit Register */
#define MU3__MUA_TR12        MU3__MUA.TR[12].R             /* Transmit Register */
#define MU3__MUA_TR13        MU3__MUA.TR[13].R             /* Transmit Register */
#define MU3__MUA_TR14        MU3__MUA.TR[14].R             /* Transmit Register */
#define MU3__MUA_TR15        MU3__MUA.TR[15].R             /* Transmit Register */
#define MU3__MUA_RR0         MU3__MUA.RR[0].R              /* Receive Register */
#define MU3__MUA_RR1         MU3__MUA.RR[1].R              /* Receive Register */
#define MU3__MUA_RR2         MU3__MUA.RR[2].R              /* Receive Register */
#define MU3__MUA_RR3         MU3__MUA.RR[3].R              /* Receive Register */
#define MU3__MUA_RR4         MU3__MUA.RR[4].R              /* Receive Register */
#define MU3__MUA_RR5         MU3__MUA.RR[5].R              /* Receive Register */
#define MU3__MUA_RR6         MU3__MUA.RR[6].R              /* Receive Register */
#define MU3__MUA_RR7         MU3__MUA.RR[7].R              /* Receive Register */
#define MU3__MUA_RR8         MU3__MUA.RR[8].R              /* Receive Register */
#define MU3__MUA_RR9         MU3__MUA.RR[9].R              /* Receive Register */
#define MU3__MUA_RR10        MU3__MUA.RR[10].R             /* Receive Register */
#define MU3__MUA_RR11        MU3__MUA.RR[11].R             /* Receive Register */
#define MU3__MUA_RR12        MU3__MUA.RR[12].R             /* Receive Register */
#define MU3__MUA_RR13        MU3__MUA.RR[13].R             /* Receive Register */
#define MU3__MUA_RR14        MU3__MUA.RR[14].R             /* Receive Register */
#define MU3__MUA_RR15        MU3__MUA.RR[15].R             /* Receive Register */

#define MU0__MUB_VER         MU0__MUB.VER.R                /* Version ID Register */
#define MU0__MUB_PAR         MU0__MUB.PAR.R                /* Parameter Register */
#define MU0__MUB_CR          MU0__MUB.CR.R                 /* Control Register */
#define MU0__MUB_SR          MU0__MUB.SR.R                 /* Status Register */
#define MU0__MUB_CCR0        MU0__MUB.CCR0.R               /* Core Control Register 0 */
#define MU0__MUB_CSSR0       MU0__MUB.CSSR0.R              /* Core Sticky Status Register 0 */
#define MU0__MUB_FCR         MU0__MUB.FCR.R                /* Flag Control Register */
#define MU0__MUB_FSR         MU0__MUB.FSR.R                /* Flag Status Register */
#define MU0__MUB_GIER        MU0__MUB.GIER.R               /* General Interrupt Enable Register */
#define MU0__MUB_GCR         MU0__MUB.GCR.R                /* General Control Register */
#define MU0__MUB_GSR         MU0__MUB.GSR.R                /* General Status Register */
#define MU0__MUB_TCR         MU0__MUB.TCR.R                /* Transmit Control Register */
#define MU0__MUB_TSR         MU0__MUB.TSR.R                /* Transmit Status Register */
#define MU0__MUB_RCR         MU0__MUB.RCR.R                /* Receive Control Register */
#define MU0__MUB_RSR         MU0__MUB.RSR.R                /* Receive Status Register */
#define MU0__MUB_TR0         MU0__MUB.TR[0].R              /* Transmit Register */
#define MU0__MUB_TR1         MU0__MUB.TR[1].R              /* Transmit Register */
#define MU0__MUB_TR2         MU0__MUB.TR[2].R              /* Transmit Register */
#define MU0__MUB_TR3         MU0__MUB.TR[3].R              /* Transmit Register */
#define MU0__MUB_TR4         MU0__MUB.TR[4].R              /* Transmit Register */
#define MU0__MUB_TR5         MU0__MUB.TR[5].R              /* Transmit Register */
#define MU0__MUB_TR6         MU0__MUB.TR[6].R              /* Transmit Register */
#define MU0__MUB_TR7         MU0__MUB.TR[7].R              /* Transmit Register */
#define MU0__MUB_TR8         MU0__MUB.TR[8].R              /* Transmit Register */
#define MU0__MUB_TR9         MU0__MUB.TR[9].R              /* Transmit Register */
#define MU0__MUB_TR10        MU0__MUB.TR[10].R             /* Transmit Register */
#define MU0__MUB_TR11        MU0__MUB.TR[11].R             /* Transmit Register */
#define MU0__MUB_TR12        MU0__MUB.TR[12].R             /* Transmit Register */
#define MU0__MUB_TR13        MU0__MUB.TR[13].R             /* Transmit Register */
#define MU0__MUB_TR14        MU0__MUB.TR[14].R             /* Transmit Register */
#define MU0__MUB_TR15        MU0__MUB.TR[15].R             /* Transmit Register */
#define MU0__MUB_RR0         MU0__MUB.RR[0].R              /* Receive Register */
#define MU0__MUB_RR1         MU0__MUB.RR[1].R              /* Receive Register */
#define MU0__MUB_RR2         MU0__MUB.RR[2].R              /* Receive Register */
#define MU0__MUB_RR3         MU0__MUB.RR[3].R              /* Receive Register */
#define MU0__MUB_RR4         MU0__MUB.RR[4].R              /* Receive Register */
#define MU0__MUB_RR5         MU0__MUB.RR[5].R              /* Receive Register */
#define MU0__MUB_RR6         MU0__MUB.RR[6].R              /* Receive Register */
#define MU0__MUB_RR7         MU0__MUB.RR[7].R              /* Receive Register */
#define MU0__MUB_RR8         MU0__MUB.RR[8].R              /* Receive Register */
#define MU0__MUB_RR9         MU0__MUB.RR[9].R              /* Receive Register */
#define MU0__MUB_RR10        MU0__MUB.RR[10].R             /* Receive Register */
#define MU0__MUB_RR11        MU0__MUB.RR[11].R             /* Receive Register */
#define MU0__MUB_RR12        MU0__MUB.RR[12].R             /* Receive Register */
#define MU0__MUB_RR13        MU0__MUB.RR[13].R             /* Receive Register */
#define MU0__MUB_RR14        MU0__MUB.RR[14].R             /* Receive Register */
#define MU0__MUB_RR15        MU0__MUB.RR[15].R             /* Receive Register */

#define MU1__MUB_VER         MU1__MUB.VER.R                /* Version ID Register */
#define MU1__MUB_PAR         MU1__MUB.PAR.R                /* Parameter Register */
#define MU1__MUB_CR          MU1__MUB.CR.R                 /* Control Register */
#define MU1__MUB_SR          MU1__MUB.SR.R                 /* Status Register */
#define MU1__MUB_CCR0        MU1__MUB.CCR0.R               /* Core Control Register 0 */
#define MU1__MUB_CSSR0       MU1__MUB.CSSR0.R              /* Core Sticky Status Register 0 */
#define MU1__MUB_FCR         MU1__MUB.FCR.R                /* Flag Control Register */
#define MU1__MUB_FSR         MU1__MUB.FSR.R                /* Flag Status Register */
#define MU1__MUB_GIER        MU1__MUB.GIER.R               /* General Interrupt Enable Register */
#define MU1__MUB_GCR         MU1__MUB.GCR.R                /* General Control Register */
#define MU1__MUB_GSR         MU1__MUB.GSR.R                /* General Status Register */
#define MU1__MUB_TCR         MU1__MUB.TCR.R                /* Transmit Control Register */
#define MU1__MUB_TSR         MU1__MUB.TSR.R                /* Transmit Status Register */
#define MU1__MUB_RCR         MU1__MUB.RCR.R                /* Receive Control Register */
#define MU1__MUB_RSR         MU1__MUB.RSR.R                /* Receive Status Register */
#define MU1__MUB_TR0         MU1__MUB.TR[0].R              /* Transmit Register */
#define MU1__MUB_TR1         MU1__MUB.TR[1].R              /* Transmit Register */
#define MU1__MUB_TR2         MU1__MUB.TR[2].R              /* Transmit Register */
#define MU1__MUB_TR3         MU1__MUB.TR[3].R              /* Transmit Register */
#define MU1__MUB_TR4         MU1__MUB.TR[4].R              /* Transmit Register */
#define MU1__MUB_TR5         MU1__MUB.TR[5].R              /* Transmit Register */
#define MU1__MUB_TR6         MU1__MUB.TR[6].R              /* Transmit Register */
#define MU1__MUB_TR7         MU1__MUB.TR[7].R              /* Transmit Register */
#define MU1__MUB_TR8         MU1__MUB.TR[8].R              /* Transmit Register */
#define MU1__MUB_TR9         MU1__MUB.TR[9].R              /* Transmit Register */
#define MU1__MUB_TR10        MU1__MUB.TR[10].R             /* Transmit Register */
#define MU1__MUB_TR11        MU1__MUB.TR[11].R             /* Transmit Register */
#define MU1__MUB_TR12        MU1__MUB.TR[12].R             /* Transmit Register */
#define MU1__MUB_TR13        MU1__MUB.TR[13].R             /* Transmit Register */
#define MU1__MUB_TR14        MU1__MUB.TR[14].R             /* Transmit Register */
#define MU1__MUB_TR15        MU1__MUB.TR[15].R             /* Transmit Register */
#define MU1__MUB_RR0         MU1__MUB.RR[0].R              /* Receive Register */
#define MU1__MUB_RR1         MU1__MUB.RR[1].R              /* Receive Register */
#define MU1__MUB_RR2         MU1__MUB.RR[2].R              /* Receive Register */
#define MU1__MUB_RR3         MU1__MUB.RR[3].R              /* Receive Register */
#define MU1__MUB_RR4         MU1__MUB.RR[4].R              /* Receive Register */
#define MU1__MUB_RR5         MU1__MUB.RR[5].R              /* Receive Register */
#define MU1__MUB_RR6         MU1__MUB.RR[6].R              /* Receive Register */
#define MU1__MUB_RR7         MU1__MUB.RR[7].R              /* Receive Register */
#define MU1__MUB_RR8         MU1__MUB.RR[8].R              /* Receive Register */
#define MU1__MUB_RR9         MU1__MUB.RR[9].R              /* Receive Register */
#define MU1__MUB_RR10        MU1__MUB.RR[10].R             /* Receive Register */
#define MU1__MUB_RR11        MU1__MUB.RR[11].R             /* Receive Register */
#define MU1__MUB_RR12        MU1__MUB.RR[12].R             /* Receive Register */
#define MU1__MUB_RR13        MU1__MUB.RR[13].R             /* Receive Register */
#define MU1__MUB_RR14        MU1__MUB.RR[14].R             /* Receive Register */
#define MU1__MUB_RR15        MU1__MUB.RR[15].R             /* Receive Register */

#define MU2__MUB_VER         MU2__MUB.VER.R                /* Version ID Register */
#define MU2__MUB_PAR         MU2__MUB.PAR.R                /* Parameter Register */
#define MU2__MUB_CR          MU2__MUB.CR.R                 /* Control Register */
#define MU2__MUB_SR          MU2__MUB.SR.R                 /* Status Register */
#define MU2__MUB_CCR0        MU2__MUB.CCR0.R               /* Core Control Register 0 */
#define MU2__MUB_CSSR0       MU2__MUB.CSSR0.R              /* Core Sticky Status Register 0 */
#define MU2__MUB_FCR         MU2__MUB.FCR.R                /* Flag Control Register */
#define MU2__MUB_FSR         MU2__MUB.FSR.R                /* Flag Status Register */
#define MU2__MUB_GIER        MU2__MUB.GIER.R               /* General Interrupt Enable Register */
#define MU2__MUB_GCR         MU2__MUB.GCR.R                /* General Control Register */
#define MU2__MUB_GSR         MU2__MUB.GSR.R                /* General Status Register */
#define MU2__MUB_TCR         MU2__MUB.TCR.R                /* Transmit Control Register */
#define MU2__MUB_TSR         MU2__MUB.TSR.R                /* Transmit Status Register */
#define MU2__MUB_RCR         MU2__MUB.RCR.R                /* Receive Control Register */
#define MU2__MUB_RSR         MU2__MUB.RSR.R                /* Receive Status Register */
#define MU2__MUB_TR0         MU2__MUB.TR[0].R              /* Transmit Register */
#define MU2__MUB_TR1         MU2__MUB.TR[1].R              /* Transmit Register */
#define MU2__MUB_TR2         MU2__MUB.TR[2].R              /* Transmit Register */
#define MU2__MUB_TR3         MU2__MUB.TR[3].R              /* Transmit Register */
#define MU2__MUB_TR4         MU2__MUB.TR[4].R              /* Transmit Register */
#define MU2__MUB_TR5         MU2__MUB.TR[5].R              /* Transmit Register */
#define MU2__MUB_TR6         MU2__MUB.TR[6].R              /* Transmit Register */
#define MU2__MUB_TR7         MU2__MUB.TR[7].R              /* Transmit Register */
#define MU2__MUB_TR8         MU2__MUB.TR[8].R              /* Transmit Register */
#define MU2__MUB_TR9         MU2__MUB.TR[9].R              /* Transmit Register */
#define MU2__MUB_TR10        MU2__MUB.TR[10].R             /* Transmit Register */
#define MU2__MUB_TR11        MU2__MUB.TR[11].R             /* Transmit Register */
#define MU2__MUB_TR12        MU2__MUB.TR[12].R             /* Transmit Register */
#define MU2__MUB_TR13        MU2__MUB.TR[13].R             /* Transmit Register */
#define MU2__MUB_TR14        MU2__MUB.TR[14].R             /* Transmit Register */
#define MU2__MUB_TR15        MU2__MUB.TR[15].R             /* Transmit Register */
#define MU2__MUB_RR0         MU2__MUB.RR[0].R              /* Receive Register */
#define MU2__MUB_RR1         MU2__MUB.RR[1].R              /* Receive Register */
#define MU2__MUB_RR2         MU2__MUB.RR[2].R              /* Receive Register */
#define MU2__MUB_RR3         MU2__MUB.RR[3].R              /* Receive Register */
#define MU2__MUB_RR4         MU2__MUB.RR[4].R              /* Receive Register */
#define MU2__MUB_RR5         MU2__MUB.RR[5].R              /* Receive Register */
#define MU2__MUB_RR6         MU2__MUB.RR[6].R              /* Receive Register */
#define MU2__MUB_RR7         MU2__MUB.RR[7].R              /* Receive Register */
#define MU2__MUB_RR8         MU2__MUB.RR[8].R              /* Receive Register */
#define MU2__MUB_RR9         MU2__MUB.RR[9].R              /* Receive Register */
#define MU2__MUB_RR10        MU2__MUB.RR[10].R             /* Receive Register */
#define MU2__MUB_RR11        MU2__MUB.RR[11].R             /* Receive Register */
#define MU2__MUB_RR12        MU2__MUB.RR[12].R             /* Receive Register */
#define MU2__MUB_RR13        MU2__MUB.RR[13].R             /* Receive Register */
#define MU2__MUB_RR14        MU2__MUB.RR[14].R             /* Receive Register */
#define MU2__MUB_RR15        MU2__MUB.RR[15].R             /* Receive Register */

#define MU3__MUB_VER         MU3__MUB.VER.R                /* Version ID Register */
#define MU3__MUB_PAR         MU3__MUB.PAR.R                /* Parameter Register */
#define MU3__MUB_CR          MU3__MUB.CR.R                 /* Control Register */
#define MU3__MUB_SR          MU3__MUB.SR.R                 /* Status Register */
#define MU3__MUB_CCR0        MU3__MUB.CCR0.R               /* Core Control Register 0 */
#define MU3__MUB_CSSR0       MU3__MUB.CSSR0.R              /* Core Sticky Status Register 0 */
#define MU3__MUB_FCR         MU3__MUB.FCR.R                /* Flag Control Register */
#define MU3__MUB_FSR         MU3__MUB.FSR.R                /* Flag Status Register */
#define MU3__MUB_GIER        MU3__MUB.GIER.R               /* General Interrupt Enable Register */
#define MU3__MUB_GCR         MU3__MUB.GCR.R                /* General Control Register */
#define MU3__MUB_GSR         MU3__MUB.GSR.R                /* General Status Register */
#define MU3__MUB_TCR         MU3__MUB.TCR.R                /* Transmit Control Register */
#define MU3__MUB_TSR         MU3__MUB.TSR.R                /* Transmit Status Register */
#define MU3__MUB_RCR         MU3__MUB.RCR.R                /* Receive Control Register */
#define MU3__MUB_RSR         MU3__MUB.RSR.R                /* Receive Status Register */
#define MU3__MUB_TR0         MU3__MUB.TR[0].R              /* Transmit Register */
#define MU3__MUB_TR1         MU3__MUB.TR[1].R              /* Transmit Register */
#define MU3__MUB_TR2         MU3__MUB.TR[2].R              /* Transmit Register */
#define MU3__MUB_TR3         MU3__MUB.TR[3].R              /* Transmit Register */
#define MU3__MUB_TR4         MU3__MUB.TR[4].R              /* Transmit Register */
#define MU3__MUB_TR5         MU3__MUB.TR[5].R              /* Transmit Register */
#define MU3__MUB_TR6         MU3__MUB.TR[6].R              /* Transmit Register */
#define MU3__MUB_TR7         MU3__MUB.TR[7].R              /* Transmit Register */
#define MU3__MUB_TR8         MU3__MUB.TR[8].R              /* Transmit Register */
#define MU3__MUB_TR9         MU3__MUB.TR[9].R              /* Transmit Register */
#define MU3__MUB_TR10        MU3__MUB.TR[10].R             /* Transmit Register */
#define MU3__MUB_TR11        MU3__MUB.TR[11].R             /* Transmit Register */
#define MU3__MUB_TR12        MU3__MUB.TR[12].R             /* Transmit Register */
#define MU3__MUB_TR13        MU3__MUB.TR[13].R             /* Transmit Register */
#define MU3__MUB_TR14        MU3__MUB.TR[14].R             /* Transmit Register */
#define MU3__MUB_TR15        MU3__MUB.TR[15].R             /* Transmit Register */
#define MU3__MUB_RR0         MU3__MUB.RR[0].R              /* Receive Register */
#define MU3__MUB_RR1         MU3__MUB.RR[1].R              /* Receive Register */
#define MU3__MUB_RR2         MU3__MUB.RR[2].R              /* Receive Register */
#define MU3__MUB_RR3         MU3__MUB.RR[3].R              /* Receive Register */
#define MU3__MUB_RR4         MU3__MUB.RR[4].R              /* Receive Register */
#define MU3__MUB_RR5         MU3__MUB.RR[5].R              /* Receive Register */
#define MU3__MUB_RR6         MU3__MUB.RR[6].R              /* Receive Register */
#define MU3__MUB_RR7         MU3__MUB.RR[7].R              /* Receive Register */
#define MU3__MUB_RR8         MU3__MUB.RR[8].R              /* Receive Register */
#define MU3__MUB_RR9         MU3__MUB.RR[9].R              /* Receive Register */
#define MU3__MUB_RR10        MU3__MUB.RR[10].R             /* Receive Register */
#define MU3__MUB_RR11        MU3__MUB.RR[11].R             /* Receive Register */
#define MU3__MUB_RR12        MU3__MUB.RR[12].R             /* Receive Register */
#define MU3__MUB_RR13        MU3__MUB.RR[13].R             /* Receive Register */
#define MU3__MUB_RR14        MU3__MUB.RR[14].R             /* Receive Register */
#define MU3__MUB_RR15        MU3__MUB.RR[15].R             /* Receive Register */

/* NCBUID_reset_value */
#define NCBU0_NCBUTC         NCBU0.NCBUTC.R                /* NCBU Transaction Control */
#define NCBU0_NCBUTA         NCBU0.NCBUTA.R                /* NCBU Transaction Activity */
#define NCBU0_NCBUCEC        NCBU0.NCBUCEC.R               /* NCBU Correctable Error Control */
#define NCBU0_NCBUCES        NCBU0.NCBUCES.R               /* NCBU Correctable Error Status */
#define NCBU0_NCBUCELR0      NCBU0.NCBUCELR0.R             /* NCBU Correctable Error Location Register 0 */
#define NCBU0_NCBUCELR1      NCBU0.NCBUCELR1.R             /* NCBU Correctable Error Location Register 1 */
#define NCBU0_NCBUCESA       NCBU0.NCBUCESA.R              /* NCBU Correctable Error Status Alias */
#define NCBU0_NCBUUEC        NCBU0.NCBUUEC.R               /* NCBU Uncorrectable Error Control */
#define NCBU0_NCBUUES        NCBU0.NCBUUES.R               /* NCBU Uncorrectable Error Status */
#define NCBU0_NCBUUELR0      NCBU0.NCBUUELR0.R             /* NCBU Uncorrectable Error Location Register 0 */
#define NCBU0_NCBUUELR1      NCBU0.NCBUUELR1.R             /* NCBU Uncorrectable Error Location Register 1 */
#define NCBU0_NCBUUESA       NCBU0.NCBUUESA.R              /* NCBU Uncorrectable Error Status Alias */
#define NCBU0_NCBUID         NCBU0.NCBUID.R                /* NCBU Identification Register */

#define NCBU1_NCBUTC         NCBU1.NCBUTC.R                /* NCBU Transaction Control */
#define NCBU1_NCBUTA         NCBU1.NCBUTA.R                /* NCBU Transaction Activity */
#define NCBU1_NCBUCEC        NCBU1.NCBUCEC.R               /* NCBU Correctable Error Control */
#define NCBU1_NCBUCES        NCBU1.NCBUCES.R               /* NCBU Correctable Error Status */
#define NCBU1_NCBUCELR0      NCBU1.NCBUCELR0.R             /* NCBU Correctable Error Location Register 0 */
#define NCBU1_NCBUCELR1      NCBU1.NCBUCELR1.R             /* NCBU Correctable Error Location Register 1 */
#define NCBU1_NCBUCESA       NCBU1.NCBUCESA.R              /* NCBU Correctable Error Status Alias */
#define NCBU1_NCBUUEC        NCBU1.NCBUUEC.R               /* NCBU Uncorrectable Error Control */
#define NCBU1_NCBUUES        NCBU1.NCBUUES.R               /* NCBU Uncorrectable Error Status */
#define NCBU1_NCBUUELR0      NCBU1.NCBUUELR0.R             /* NCBU Uncorrectable Error Location Register 0 */
#define NCBU1_NCBUUELR1      NCBU1.NCBUUELR1.R             /* NCBU Uncorrectable Error Location Register 1 */
#define NCBU1_NCBUUESA       NCBU1.NCBUUESA.R              /* NCBU Uncorrectable Error Status Alias */
#define NCBU1_NCBUID         NCBU1.NCBUID.R                /* NCBU Identification Register */

/* OCOTP */
#define OCOTP_CTRL_SYS       OCOTP.CTRL_SYS.R              /* System master's control */
#define OCOTP_ADDR_SYS       OCOTP.ADDR_SYS.R              /* System master's eFuse address for read or write operation */
#define OCOTP_WRDATA_SYS     OCOTP.WRDATA_SYS.R            /* System master's eFuse write data */
#define OCOTP_RDATA_SYS      OCOTP.RDATA_SYS.R             /* System master's eFuse read data */
#define OCOTP_CTRL_FBX       OCOTP.CTRL_FBX.R              /* FBXC control */
#define OCOTP_CRC_RGN_SYS    OCOTP.CRC_RGN_SYS.R           /* eFuse region for CRC validation */
#define OCOTP_CRC_ADDR_SYS   OCOTP.CRC_ADDR_SYS.R          /* Pre-calculated CRC eFuse address for comparision */
#define OCOTP_CRC_VALUE_SYS  OCOTP.CRC_VALUE_SYS.R         /* CRC calculated from the eFuses */
#define OCOTP_GPR0           OCOTP.GPR[0].R                /* General purpose */
#define OCOTP_GPR1           OCOTP.GPR[1].R                /* General purpose */
#define OCOTP_STATUS_SYS     OCOTP.STATUS_SYS.R            /* System master's access status */
#define OCOTP_VERSION        OCOTP.VERSION.R               /* OCOTP design version */
#define OCOTP_SEC0           OCOTP.SEC[0].R                /* ECC status for single-bit ECC error */
#define OCOTP_SEC1           OCOTP.SEC[1].R                /* ECC status for single-bit ECC error */
#define OCOTP_SEC2           OCOTP.SEC[2].R                /* ECC status for single-bit ECC error */
#define OCOTP_SEC3           OCOTP.SEC[3].R                /* ECC status for single-bit ECC error */
#define OCOTP_DED0           OCOTP.DED[0].R                /* ECC status for double-bit ECC error */
#define OCOTP_DED1           OCOTP.DED[1].R                /* ECC status for double-bit ECC error */
#define OCOTP_DED2           OCOTP.DED[2].R                /* ECC status for double-bit ECC error */
#define OCOTP_DED3           OCOTP.DED[3].R                /* ECC status for double-bit ECC error */
#define OCOTP_ERR_INJCTR     OCOTP.ERR_INJCTR.R            /* ECC error injector */
#define OCOTP_SHADOWS0       OCOTP.SHADOWS[0].R            /* Shadow */
#define OCOTP_SHADOWS1       OCOTP.SHADOWS[1].R            /* Shadow */
#define OCOTP_SHADOWS2       OCOTP.SHADOWS[2].R            /* Shadow */
#define OCOTP_SHADOWS3       OCOTP.SHADOWS[3].R            /* Shadow */
#define OCOTP_SHADOWS4       OCOTP.SHADOWS[4].R            /* Shadow */
#define OCOTP_SHADOWS5       OCOTP.SHADOWS[5].R            /* Shadow */
#define OCOTP_SHADOWS6       OCOTP.SHADOWS[6].R            /* Shadow */
#define OCOTP_SHADOWS7       OCOTP.SHADOWS[7].R            /* Shadow */
#define OCOTP_SHADOWS8       OCOTP.SHADOWS[8].R            /* Shadow */
#define OCOTP_SHADOWS9       OCOTP.SHADOWS[9].R            /* Shadow */
#define OCOTP_SHADOWS10      OCOTP.SHADOWS[10].R           /* Shadow */
#define OCOTP_SHADOWS11      OCOTP.SHADOWS[11].R           /* Shadow */
#define OCOTP_SHADOWS12      OCOTP.SHADOWS[12].R           /* Shadow */
#define OCOTP_SHADOWS13      OCOTP.SHADOWS[13].R           /* Shadow */
#define OCOTP_SHADOWS14      OCOTP.SHADOWS[14].R           /* Shadow */
#define OCOTP_SHADOWS15      OCOTP.SHADOWS[15].R           /* Shadow */
#define OCOTP_SHADOWS16      OCOTP.SHADOWS[16].R           /* Shadow */
#define OCOTP_SHADOWS17      OCOTP.SHADOWS[17].R           /* Shadow */
#define OCOTP_SHADOWS18      OCOTP.SHADOWS[18].R           /* Shadow */
#define OCOTP_SHADOWS19      OCOTP.SHADOWS[19].R           /* Shadow */
#define OCOTP_SHADOWS20      OCOTP.SHADOWS[20].R           /* Shadow */
#define OCOTP_SHADOWS21      OCOTP.SHADOWS[21].R           /* Shadow */
#define OCOTP_SHADOWS22      OCOTP.SHADOWS[22].R           /* Shadow */
#define OCOTP_SHADOWS23      OCOTP.SHADOWS[23].R           /* Shadow */
#define OCOTP_SHADOWS24      OCOTP.SHADOWS[24].R           /* Shadow */
#define OCOTP_SHADOWS25      OCOTP.SHADOWS[25].R           /* Shadow */
#define OCOTP_SHADOWS26      OCOTP.SHADOWS[26].R           /* Shadow */
#define OCOTP_SHADOWS27      OCOTP.SHADOWS[27].R           /* Shadow */
#define OCOTP_SHADOWS28      OCOTP.SHADOWS[28].R           /* Shadow */
#define OCOTP_SHADOWS29      OCOTP.SHADOWS[29].R           /* Shadow */
#define OCOTP_SHADOWS30      OCOTP.SHADOWS[30].R           /* Shadow */
#define OCOTP_SHADOWS31      OCOTP.SHADOWS[31].R           /* Shadow */
#define OCOTP_SHADOWS32      OCOTP.SHADOWS[32].R           /* Shadow */
#define OCOTP_SHADOWS33      OCOTP.SHADOWS[33].R           /* Shadow */
#define OCOTP_SHADOWS34      OCOTP.SHADOWS[34].R           /* Shadow */
#define OCOTP_SHADOWS35      OCOTP.SHADOWS[35].R           /* Shadow */
#define OCOTP_SHADOWS36      OCOTP.SHADOWS[36].R           /* Shadow */
#define OCOTP_SHADOWS37      OCOTP.SHADOWS[37].R           /* Shadow */
#define OCOTP_SHADOWS38      OCOTP.SHADOWS[38].R           /* Shadow */
#define OCOTP_SHADOWS39      OCOTP.SHADOWS[39].R           /* Shadow */
#define OCOTP_SHADOWS40      OCOTP.SHADOWS[40].R           /* Shadow */
#define OCOTP_SHADOWS41      OCOTP.SHADOWS[41].R           /* Shadow */
#define OCOTP_SHADOWS42      OCOTP.SHADOWS[42].R           /* Shadow */
#define OCOTP_SHADOWS43      OCOTP.SHADOWS[43].R           /* Shadow */
#define OCOTP_SHADOWS44      OCOTP.SHADOWS[44].R           /* Shadow */
#define OCOTP_SHADOWS45      OCOTP.SHADOWS[45].R           /* Shadow */
#define OCOTP_SHADOWS46      OCOTP.SHADOWS[46].R           /* Shadow */
#define OCOTP_SHADOWS47      OCOTP.SHADOWS[47].R           /* Shadow */
#define OCOTP_SHADOWS48      OCOTP.SHADOWS[48].R           /* Shadow */
#define OCOTP_SHADOWS49      OCOTP.SHADOWS[49].R           /* Shadow */
#define OCOTP_SHADOWS50      OCOTP.SHADOWS[50].R           /* Shadow */
#define OCOTP_SHADOWS51      OCOTP.SHADOWS[51].R           /* Shadow */
#define OCOTP_SHADOWS52      OCOTP.SHADOWS[52].R           /* Shadow */
#define OCOTP_SHADOWS53      OCOTP.SHADOWS[53].R           /* Shadow */
#define OCOTP_SHADOWS54      OCOTP.SHADOWS[54].R           /* Shadow */
#define OCOTP_SHADOWS55      OCOTP.SHADOWS[55].R           /* Shadow */
#define OCOTP_SHADOWS56      OCOTP.SHADOWS[56].R           /* Shadow */
#define OCOTP_SHADOWS57      OCOTP.SHADOWS[57].R           /* Shadow */
#define OCOTP_SHADOWS58      OCOTP.SHADOWS[58].R           /* Shadow */
#define OCOTP_SHADOWS59      OCOTP.SHADOWS[59].R           /* Shadow */
#define OCOTP_SHADOWS60      OCOTP.SHADOWS[60].R           /* Shadow */
#define OCOTP_SHADOWS61      OCOTP.SHADOWS[61].R           /* Shadow */
#define OCOTP_SHADOWS62      OCOTP.SHADOWS[62].R           /* Shadow */
#define OCOTP_SHADOWS63      OCOTP.SHADOWS[63].R           /* Shadow */
#define OCOTP_SHADOWS64      OCOTP.SHADOWS[64].R           /* Shadow */
#define OCOTP_SHADOWS65      OCOTP.SHADOWS[65].R           /* Shadow */
#define OCOTP_SHADOWS66      OCOTP.SHADOWS[66].R           /* Shadow */
#define OCOTP_SHADOWS67      OCOTP.SHADOWS[67].R           /* Shadow */
#define OCOTP_SHADOWS68      OCOTP.SHADOWS[68].R           /* Shadow */
#define OCOTP_SHADOWS69      OCOTP.SHADOWS[69].R           /* Shadow */
#define OCOTP_SHADOWS70      OCOTP.SHADOWS[70].R           /* Shadow */
#define OCOTP_SHADOWS71      OCOTP.SHADOWS[71].R           /* Shadow */
#define OCOTP_SHADOWS72      OCOTP.SHADOWS[72].R           /* Shadow */
#define OCOTP_SHADOWS73      OCOTP.SHADOWS[73].R           /* Shadow */
#define OCOTP_SHADOWS74      OCOTP.SHADOWS[74].R           /* Shadow */
#define OCOTP_SHADOWS75      OCOTP.SHADOWS[75].R           /* Shadow */
#define OCOTP_SHADOWS76      OCOTP.SHADOWS[76].R           /* Shadow */
#define OCOTP_SHADOWS77      OCOTP.SHADOWS[77].R           /* Shadow */
#define OCOTP_SHADOWS78      OCOTP.SHADOWS[78].R           /* Shadow */
#define OCOTP_SHADOWS79      OCOTP.SHADOWS[79].R           /* Shadow */
#define OCOTP_SHADOWS80      OCOTP.SHADOWS[80].R           /* Shadow */
#define OCOTP_SHADOWS81      OCOTP.SHADOWS[81].R           /* Shadow */
#define OCOTP_SHADOWS82      OCOTP.SHADOWS[82].R           /* Shadow */
#define OCOTP_SHADOWS83      OCOTP.SHADOWS[83].R           /* Shadow */
#define OCOTP_SHADOWS84      OCOTP.SHADOWS[84].R           /* Shadow */
#define OCOTP_SHADOWS85      OCOTP.SHADOWS[85].R           /* Shadow */
#define OCOTP_SHADOWS86      OCOTP.SHADOWS[86].R           /* Shadow */
#define OCOTP_SHADOWS87      OCOTP.SHADOWS[87].R           /* Shadow */
#define OCOTP_SHADOWS88      OCOTP.SHADOWS[88].R           /* Shadow */
#define OCOTP_SHADOWS89      OCOTP.SHADOWS[89].R           /* Shadow */
#define OCOTP_SHADOWS90      OCOTP.SHADOWS[90].R           /* Shadow */
#define OCOTP_SHADOWS91      OCOTP.SHADOWS[91].R           /* Shadow */
#define OCOTP_SHADOWS92      OCOTP.SHADOWS[92].R           /* Shadow */
#define OCOTP_SHADOWS93      OCOTP.SHADOWS[93].R           /* Shadow */
#define OCOTP_SHADOWS94      OCOTP.SHADOWS[94].R           /* Shadow */
#define OCOTP_SHADOWS95      OCOTP.SHADOWS[95].R           /* Shadow */
#define OCOTP_SHADOWS96      OCOTP.SHADOWS[96].R           /* Shadow */
#define OCOTP_SHADOWS97      OCOTP.SHADOWS[97].R           /* Shadow */
#define OCOTP_SHADOWS98      OCOTP.SHADOWS[98].R           /* Shadow */
#define OCOTP_SHADOWS99      OCOTP.SHADOWS[99].R           /* Shadow */
#define OCOTP_SHADOWS100     OCOTP.SHADOWS[100].R          /* Shadow */
#define OCOTP_SHADOWS101     OCOTP.SHADOWS[101].R          /* Shadow */
#define OCOTP_SHADOWS102     OCOTP.SHADOWS[102].R          /* Shadow */
#define OCOTP_SHADOWS103     OCOTP.SHADOWS[103].R          /* Shadow */
#define OCOTP_SHADOWS104     OCOTP.SHADOWS[104].R          /* Shadow */
#define OCOTP_SHADOWS105     OCOTP.SHADOWS[105].R          /* Shadow */
#define OCOTP_SHADOWS106     OCOTP.SHADOWS[106].R          /* Shadow */
#define OCOTP_SHADOWS107     OCOTP.SHADOWS[107].R          /* Shadow */
#define OCOTP_SHADOWS108     OCOTP.SHADOWS[108].R          /* Shadow */
#define OCOTP_SHADOWS109     OCOTP.SHADOWS[109].R          /* Shadow */
#define OCOTP_SHADOWS110     OCOTP.SHADOWS[110].R          /* Shadow */
#define OCOTP_SHADOWS111     OCOTP.SHADOWS[111].R          /* Shadow */
#define OCOTP_SHADOWS112     OCOTP.SHADOWS[112].R          /* Shadow */
#define OCOTP_SHADOWS113     OCOTP.SHADOWS[113].R          /* Shadow */
#define OCOTP_SHADOWS114     OCOTP.SHADOWS[114].R          /* Shadow */
#define OCOTP_SHADOWS115     OCOTP.SHADOWS[115].R          /* Shadow */
#define OCOTP_SHADOWS116     OCOTP.SHADOWS[116].R          /* Shadow */
#define OCOTP_SHADOWS117     OCOTP.SHADOWS[117].R          /* Shadow */
#define OCOTP_SHADOWS118     OCOTP.SHADOWS[118].R          /* Shadow */
#define OCOTP_SHADOWS119     OCOTP.SHADOWS[119].R          /* Shadow */
#define OCOTP_SHADOWS120     OCOTP.SHADOWS[120].R          /* Shadow */
#define OCOTP_SHADOWS121     OCOTP.SHADOWS[121].R          /* Shadow */
#define OCOTP_SHADOWS122     OCOTP.SHADOWS[122].R          /* Shadow */
#define OCOTP_SHADOWS123     OCOTP.SHADOWS[123].R          /* Shadow */
#define OCOTP_SHADOWS124     OCOTP.SHADOWS[124].R          /* Shadow */
#define OCOTP_SHADOWS125     OCOTP.SHADOWS[125].R          /* Shadow */
#define OCOTP_SHADOWS126     OCOTP.SHADOWS[126].R          /* Shadow */
#define OCOTP_SHADOWS127     OCOTP.SHADOWS[127].R          /* Shadow */

/* PERIPH_PLL */
#define PERIPH_PLL_PLLCR     PERIPH_PLL.PLLCR.R            /* PLL Control Register */
#define PERIPH_PLL_PLLSR     PERIPH_PLL.PLLSR.R            /* PLL status register */
#define PERIPH_PLL_PLLDV     PERIPH_PLL.PLLDV.R            /* PLL Divider */
#define PERIPH_PLL_PLLFD     PERIPH_PLL.PLLFD.R            /* PLL Fractional Divider */
#define PERIPH_PLL_PLLCLKMUX PERIPH_PLL.PLLCLKMUX.R        /* PLL Clock Multiplexer */
#define PERIPH_PLL_PLLODIV_0 PERIPH_PLL.PLLODIV[0].R       /* PLL Output Divider */
#define PERIPH_PLL_PLLODIV_1 PERIPH_PLL.PLLODIV[1].R       /* PLL Output Divider */
#define PERIPH_PLL_PLLODIV_2 PERIPH_PLL.PLLODIV[2].R       /* PLL Output Divider */
#define PERIPH_PLL_PLLODIV_3 PERIPH_PLL.PLLODIV[3].R       /* PLL Output Divider */
#define PERIPH_PLL_PLLODIV_4 PERIPH_PLL.PLLODIV[4].R       /* PLL Output Divider */
#define PERIPH_PLL_PLLODIV_5 PERIPH_PLL.PLLODIV[5].R       /* PLL Output Divider */
#define PERIPH_PLL_PLLODIV_6 PERIPH_PLL.PLLODIV[6].R       /* PLL Output Divider */
#define PERIPH_PLL_PLLODIV_7 PERIPH_PLL.PLLODIV[7].R       /* PLL Output Divider */

/* PIT */
#define PIT_1_MCR            PIT_1.MCR.R                   /* PIT Module Control Register */
#define PIT_1_LTMR64H        PIT_1.LTMR64H.R               /* PIT Upper Lifetime Timer Register */
#define PIT_1_LTMR64L        PIT_1.LTMR64L.R               /* PIT Lower Lifetime Timer Register */
#define PIT_1_LDVAL0         PIT_1.TIMER[0].LDVAL.R        /* Timer Load Value Register */
#define PIT_1_CVAL0          PIT_1.TIMER[0].CVAL.R         /* Current Timer Value Register */
#define PIT_1_TCTRL0         PIT_1.TIMER[0].TCTRL.R        /* Timer Control Register */
#define PIT_1_TFLG0          PIT_1.TIMER[0].TFLG.R         /* Timer Flag Register */
#define PIT_1_LDVAL1         PIT_1.TIMER[1].LDVAL.R        /* Timer Load Value Register */
#define PIT_1_CVAL1          PIT_1.TIMER[1].CVAL.R         /* Current Timer Value Register */
#define PIT_1_TCTRL1         PIT_1.TIMER[1].TCTRL.R        /* Timer Control Register */
#define PIT_1_TFLG1          PIT_1.TIMER[1].TFLG.R         /* Timer Flag Register */
#define PIT_1_LDVAL2         PIT_1.TIMER[2].LDVAL.R        /* Timer Load Value Register */
#define PIT_1_CVAL2          PIT_1.TIMER[2].CVAL.R         /* Current Timer Value Register */
#define PIT_1_TCTRL2         PIT_1.TIMER[2].TCTRL.R        /* Timer Control Register */
#define PIT_1_TFLG2          PIT_1.TIMER[2].TFLG.R         /* Timer Flag Register */
#define PIT_1_LDVAL3         PIT_1.TIMER[3].LDVAL.R        /* Timer Load Value Register */
#define PIT_1_CVAL3          PIT_1.TIMER[3].CVAL.R         /* Current Timer Value Register */
#define PIT_1_TCTRL3         PIT_1.TIMER[3].TCTRL.R        /* Timer Control Register */
#define PIT_1_TFLG3          PIT_1.TIMER[3].TFLG.R         /* Timer Flag Register */
#define PIT_1_LDVAL4         PIT_1.TIMER[4].LDVAL.R        /* Timer Load Value Register */
#define PIT_1_CVAL4          PIT_1.TIMER[4].CVAL.R         /* Current Timer Value Register */
#define PIT_1_TCTRL4         PIT_1.TIMER[4].TCTRL.R        /* Timer Control Register */
#define PIT_1_TFLG4          PIT_1.TIMER[4].TFLG.R         /* Timer Flag Register */
#define PIT_1_LDVAL5         PIT_1.TIMER[5].LDVAL.R        /* Timer Load Value Register */
#define PIT_1_CVAL5          PIT_1.TIMER[5].CVAL.R         /* Current Timer Value Register */
#define PIT_1_TCTRL5         PIT_1.TIMER[5].TCTRL.R        /* Timer Control Register */
#define PIT_1_TFLG5          PIT_1.TIMER[5].TFLG.R         /* Timer Flag Register */

#define PIT_0_MCR            PIT_0.MCR.R                   /* PIT Module Control Register */
#define PIT_0_LTMR64H        PIT_0.LTMR64H.R               /* PIT Upper Lifetime Timer Register */
#define PIT_0_LTMR64L        PIT_0.LTMR64L.R               /* PIT Lower Lifetime Timer Register */
#define PIT_0_LDVAL0         PIT_0.TIMER[0].LDVAL.R        /* Timer Load Value Register */
#define PIT_0_CVAL0          PIT_0.TIMER[0].CVAL.R         /* Current Timer Value Register */
#define PIT_0_TCTRL0         PIT_0.TIMER[0].TCTRL.R        /* Timer Control Register */
#define PIT_0_TFLG0          PIT_0.TIMER[0].TFLG.R         /* Timer Flag Register */
#define PIT_0_LDVAL1         PIT_0.TIMER[1].LDVAL.R        /* Timer Load Value Register */
#define PIT_0_CVAL1          PIT_0.TIMER[1].CVAL.R         /* Current Timer Value Register */
#define PIT_0_TCTRL1         PIT_0.TIMER[1].TCTRL.R        /* Timer Control Register */
#define PIT_0_TFLG1          PIT_0.TIMER[1].TFLG.R         /* Timer Flag Register */
#define PIT_0_LDVAL2         PIT_0.TIMER[2].LDVAL.R        /* Timer Load Value Register */
#define PIT_0_CVAL2          PIT_0.TIMER[2].CVAL.R         /* Current Timer Value Register */
#define PIT_0_TCTRL2         PIT_0.TIMER[2].TCTRL.R        /* Timer Control Register */
#define PIT_0_TFLG2          PIT_0.TIMER[2].TFLG.R         /* Timer Flag Register */
#define PIT_0_LDVAL3         PIT_0.TIMER[3].LDVAL.R        /* Timer Load Value Register */
#define PIT_0_CVAL3          PIT_0.TIMER[3].CVAL.R         /* Current Timer Value Register */
#define PIT_0_TCTRL3         PIT_0.TIMER[3].TCTRL.R        /* Timer Control Register */
#define PIT_0_TFLG3          PIT_0.TIMER[3].TFLG.R         /* Timer Flag Register */
#define PIT_0_LDVAL4         PIT_0.TIMER[4].LDVAL.R        /* Timer Load Value Register */
#define PIT_0_CVAL4          PIT_0.TIMER[4].CVAL.R         /* Current Timer Value Register */
#define PIT_0_TCTRL4         PIT_0.TIMER[4].TCTRL.R        /* Timer Control Register */
#define PIT_0_TFLG4          PIT_0.TIMER[4].TFLG.R         /* Timer Flag Register */
#define PIT_0_LDVAL5         PIT_0.TIMER[5].LDVAL.R        /* Timer Load Value Register */
#define PIT_0_CVAL5          PIT_0.TIMER[5].CVAL.R         /* Current Timer Value Register */
#define PIT_0_TCTRL5         PIT_0.TIMER[5].TCTRL.R        /* Timer Control Register */
#define PIT_0_TFLG5          PIT_0.TIMER[5].TFLG.R         /* Timer Flag Register */
#define PIT_0_LDVAL6         PIT_0.TIMER[6].LDVAL.R        /* Timer Load Value Register */
#define PIT_0_CVAL6          PIT_0.TIMER[6].CVAL.R         /* Current Timer Value Register */
#define PIT_0_TCTRL6         PIT_0.TIMER[6].TCTRL.R        /* Timer Control Register */
#define PIT_0_TFLG6          PIT_0.TIMER[6].TFLG.R         /* Timer Flag Register */

/* PMC */
#define PMC_SSR              PMC.SSR.R                     /* Source of System Reset */
#define PMC_NCSPD_CTL        PMC.NCSPD_CTL.R               /* Non-Critical Supply Presence Detector Control */
#define PMC_NCSPD_STAT       PMC.NCSPD_STAT.R              /* Non-Critical Supply Presence Detector Status Flag */
#define PMC_CSPD_EVENT_CAPTURE PMC.CSPD_EVENT_CAPTURE.R    /* Critical Supply Presence Detector Event Flag (CSPDEF) */
#define PMC_NCSPD_EVENT_CAPTURE PMC.NCSPD_EVENT_CAPTURE.R  /* Non-Critical Supply Presence Detector Event Flag (NCSPDEF) */
#define PMC_POR_WDOG_EVENT_CAPTURE0 PMC.POR_WDOG_EVENT_CAPTURE[0].R /* Device Status Flag (DSF0) */
#define PMC_POR_WDOG_EVENT_CAPTURE1 PMC.POR_WDOG_EVENT_CAPTURE[1].R /* Device Status Flag (DSF1) */
#define PMC_POR_WDOG_EVENT_CAPTURE2 PMC.POR_WDOG_EVENT_CAPTURE[2].R /* Device Status Flag (DSF2) */

/* PMUEVENTOBSERVER */
#define PMUEVENTOBSERVER_CTL0 PMUEVENTOBSERVER.CTL[0].R    /* PMUEVENT Observer Control Register */
#define PMUEVENTOBSERVER_CTL1 PMUEVENTOBSERVER.CTL[1].R    /* PMUEVENT Observer Control Register */
#define PMUEVENTOBSERVER_CTL2 PMUEVENTOBSERVER.CTL[2].R    /* PMUEVENT Observer Control Register */
#define PMUEVENTOBSERVER_CTL3 PMUEVENTOBSERVER.CTL[3].R    /* PMUEVENT Observer Control Register */
#define PMUEVENTOBSERVER_CTL4 PMUEVENTOBSERVER.CTL[4].R    /* PMUEVENT Observer Control Register */
#define PMUEVENTOBSERVER_CTL5 PMUEVENTOBSERVER.CTL[5].R    /* PMUEVENT Observer Control Register */
#define PMUEVENTOBSERVER_CTL6 PMUEVENTOBSERVER.CTL[6].R    /* PMUEVENT Observer Control Register */
#define PMUEVENTOBSERVER_CTL7 PMUEVENTOBSERVER.CTL[7].R    /* PMUEVENT Observer Control Register */
#define PMUEVENTOBSERVER_CTL8 PMUEVENTOBSERVER.CTL[8].R    /* PMUEVENT Observer Control Register */
#define PMUEVENTOBSERVER_CTL9 PMUEVENTOBSERVER.CTL[9].R    /* PMUEVENT Observer Control Register */
#define PMUEVENTOBSERVER_CTL10 PMUEVENTOBSERVER.CTL[10].R  /* PMUEVENT Observer Control Register */
#define PMUEVENTOBSERVER_CTL11 PMUEVENTOBSERVER.CTL[11].R  /* PMUEVENT Observer Control Register */
#define PMUEVENTOBSERVER_CTL12 PMUEVENTOBSERVER.CTL[12].R  /* PMUEVENT Observer Control Register */
#define PMUEVENTOBSERVER_CTL13 PMUEVENTOBSERVER.CTL[13].R  /* PMUEVENT Observer Control Register */
#define PMUEVENTOBSERVER_CTL14 PMUEVENTOBSERVER.CTL[14].R  /* PMUEVENT Observer Control Register */
#define PMUEVENTOBSERVER_CTL15 PMUEVENTOBSERVER.CTL[15].R  /* PMUEVENT Observer Control Register */
#define PMUEVENTOBSERVER_CTL16 PMUEVENTOBSERVER.CTL[16].R  /* PMUEVENT Observer Control Register */
#define PMUEVENTOBSERVER_CTL17 PMUEVENTOBSERVER.CTL[17].R  /* PMUEVENT Observer Control Register */
#define PMUEVENTOBSERVER_CTL18 PMUEVENTOBSERVER.CTL[18].R  /* PMUEVENT Observer Control Register */
#define PMUEVENTOBSERVER_CTL19 PMUEVENTOBSERVER.CTL[19].R  /* PMUEVENT Observer Control Register */
#define PMUEVENTOBSERVER_CTL20 PMUEVENTOBSERVER.CTL[20].R  /* PMUEVENT Observer Control Register */
#define PMUEVENTOBSERVER_CTL21 PMUEVENTOBSERVER.CTL[21].R  /* PMUEVENT Observer Control Register */
#define PMUEVENTOBSERVER_CTL22 PMUEVENTOBSERVER.CTL[22].R  /* PMUEVENT Observer Control Register */
#define PMUEVENTOBSERVER_CTL23 PMUEVENTOBSERVER.CTL[23].R  /* PMUEVENT Observer Control Register */
#define PMUEVENTOBSERVER_CTL24 PMUEVENTOBSERVER.CTL[24].R  /* PMUEVENT Observer Control Register */
#define PMUEVENTOBSERVER_CTL25 PMUEVENTOBSERVER.CTL[25].R  /* PMUEVENT Observer Control Register */
#define PMUEVENTOBSERVER_CTL26 PMUEVENTOBSERVER.CTL[26].R  /* PMUEVENT Observer Control Register */
#define PMUEVENTOBSERVER_CTL27 PMUEVENTOBSERVER.CTL[27].R  /* PMUEVENT Observer Control Register */
#define PMUEVENTOBSERVER_CTL28 PMUEVENTOBSERVER.CTL[28].R  /* PMUEVENT Observer Control Register */
#define PMUEVENTOBSERVER_CTL29 PMUEVENTOBSERVER.CTL[29].R  /* PMUEVENT Observer Control Register */
#define PMUEVENTOBSERVER_STAT0 PMUEVENTOBSERVER.STAT[0].R  /* PMUEVENT Observer Status Register */
#define PMUEVENTOBSERVER_STAT1 PMUEVENTOBSERVER.STAT[1].R  /* PMUEVENT Observer Status Register */
#define PMUEVENTOBSERVER_STAT2 PMUEVENTOBSERVER.STAT[2].R  /* PMUEVENT Observer Status Register */
#define PMUEVENTOBSERVER_STAT3 PMUEVENTOBSERVER.STAT[3].R  /* PMUEVENT Observer Status Register */
#define PMUEVENTOBSERVER_STAT4 PMUEVENTOBSERVER.STAT[4].R  /* PMUEVENT Observer Status Register */
#define PMUEVENTOBSERVER_STAT5 PMUEVENTOBSERVER.STAT[5].R  /* PMUEVENT Observer Status Register */
#define PMUEVENTOBSERVER_STAT6 PMUEVENTOBSERVER.STAT[6].R  /* PMUEVENT Observer Status Register */
#define PMUEVENTOBSERVER_STAT7 PMUEVENTOBSERVER.STAT[7].R  /* PMUEVENT Observer Status Register */
#define PMUEVENTOBSERVER_STAT8 PMUEVENTOBSERVER.STAT[8].R  /* PMUEVENT Observer Status Register */
#define PMUEVENTOBSERVER_STAT9 PMUEVENTOBSERVER.STAT[9].R  /* PMUEVENT Observer Status Register */
#define PMUEVENTOBSERVER_STAT10 PMUEVENTOBSERVER.STAT[10].R /* PMUEVENT Observer Status Register */
#define PMUEVENTOBSERVER_STAT11 PMUEVENTOBSERVER.STAT[11].R /* PMUEVENT Observer Status Register */
#define PMUEVENTOBSERVER_STAT12 PMUEVENTOBSERVER.STAT[12].R /* PMUEVENT Observer Status Register */
#define PMUEVENTOBSERVER_STAT13 PMUEVENTOBSERVER.STAT[13].R /* PMUEVENT Observer Status Register */
#define PMUEVENTOBSERVER_STAT14 PMUEVENTOBSERVER.STAT[14].R /* PMUEVENT Observer Status Register */
#define PMUEVENTOBSERVER_STAT15 PMUEVENTOBSERVER.STAT[15].R /* PMUEVENT Observer Status Register */
#define PMUEVENTOBSERVER_STAT16 PMUEVENTOBSERVER.STAT[16].R /* PMUEVENT Observer Status Register */
#define PMUEVENTOBSERVER_STAT17 PMUEVENTOBSERVER.STAT[17].R /* PMUEVENT Observer Status Register */
#define PMUEVENTOBSERVER_STAT18 PMUEVENTOBSERVER.STAT[18].R /* PMUEVENT Observer Status Register */
#define PMUEVENTOBSERVER_STAT19 PMUEVENTOBSERVER.STAT[19].R /* PMUEVENT Observer Status Register */
#define PMUEVENTOBSERVER_STAT20 PMUEVENTOBSERVER.STAT[20].R /* PMUEVENT Observer Status Register */
#define PMUEVENTOBSERVER_STAT21 PMUEVENTOBSERVER.STAT[21].R /* PMUEVENT Observer Status Register */
#define PMUEVENTOBSERVER_STAT22 PMUEVENTOBSERVER.STAT[22].R /* PMUEVENT Observer Status Register */
#define PMUEVENTOBSERVER_STAT23 PMUEVENTOBSERVER.STAT[23].R /* PMUEVENT Observer Status Register */
#define PMUEVENTOBSERVER_STAT24 PMUEVENTOBSERVER.STAT[24].R /* PMUEVENT Observer Status Register */
#define PMUEVENTOBSERVER_STAT25 PMUEVENTOBSERVER.STAT[25].R /* PMUEVENT Observer Status Register */
#define PMUEVENTOBSERVER_STAT26 PMUEVENTOBSERVER.STAT[26].R /* PMUEVENT Observer Status Register */
#define PMUEVENTOBSERVER_STAT27 PMUEVENTOBSERVER.STAT[27].R /* PMUEVENT Observer Status Register */
#define PMUEVENTOBSERVER_STAT28 PMUEVENTOBSERVER.STAT[28].R /* PMUEVENT Observer Status Register */
#define PMUEVENTOBSERVER_STAT29 PMUEVENTOBSERVER.STAT[29].R /* PMUEVENT Observer Status Register */

/* Perf_Registers */
#define PERF_REGISTERS_COUNTER_0_CTRL_REG_ADDR PERF_REGISTERS.COUNTER_0_CTRL_REG_ADDR.R /* Counter control 0 */
#define PERF_REGISTERS_COUNTER_1_CTRL_REG_ADDR PERF_REGISTERS.COUNTER_1_CTRL_REG_ADDR.R /* Counter control 1 */
#define PERF_REGISTERS_COUNTER_2_CTRL_REG_ADDR PERF_REGISTERS.COUNTER_2_CTRL_REG_ADDR.R /* Counter control 2 */
#define PERF_REGISTERS_COUNTER_3_CTRL_REG_ADDR PERF_REGISTERS.COUNTER_3_CTRL_REG_ADDR.R /* Counter control 3 */
#define PERF_REGISTERS_COUNTER_0_DATA_REG_ADDR PERF_REGISTERS.COUNTER_DATA_REG_ADDR[0].R /* Counter Data */
#define PERF_REGISTERS_COUNTER_1_DATA_REG_ADDR PERF_REGISTERS.COUNTER_DATA_REG_ADDR[1].R /* Counter Data */
#define PERF_REGISTERS_COUNTER_2_DATA_REG_ADDR PERF_REGISTERS.COUNTER_DATA_REG_ADDR[2].R /* Counter Data */
#define PERF_REGISTERS_COUNTER_3_DATA_REG_ADDR PERF_REGISTERS.COUNTER_DATA_REG_ADDR[3].R /* Counter Data */
#define PERF_REGISTERS_MRR_0_DATA_REG_ADDR PERF_REGISTERS.MRR_0_DATA_REG_ADDR.R /* Mode Register Read 0 Data */
#define PERF_REGISTERS_MRR_1_DATA_REG_ADDR PERF_REGISTERS.MRR_1_DATA_REG_ADDR.R /* Mode Register Read 1 Data */

/* QuadSPI */
#define QUADSPI_MCR          QUADSPI.MCR.R                 /* Module Configuration Register */
#define QUADSPI_IPCR         QUADSPI.IPCR.R                /* IP Configuration Register */
#define QUADSPI_FLSHCR       QUADSPI.FLSHCR.R              /* Flash Memory Configuration Register */
#define QUADSPI_BUF0CR       QUADSPI.BUF0CR.R              /* Buffer 0 Configuration Register */
#define QUADSPI_BUF1CR       QUADSPI.BUF1CR.R              /* Buffer 1 Configuration Register */
#define QUADSPI_BUF2CR       QUADSPI.BUF2CR.R              /* Buffer 2 Configuration Register */
#define QUADSPI_BUF3CR       QUADSPI.BUF3CR.R              /* Buffer 3 Configuration Register */
#define QUADSPI_BFGENCR      QUADSPI.BFGENCR.R             /* Buffer Generic Configuration Register */
#define QUADSPI_BUF0IND      QUADSPI.BUF0IND.R             /* Buffer 0 Top Index Register */
#define QUADSPI_BUF1IND      QUADSPI.BUF1IND.R             /* Buffer 1 Top Index Register */
#define QUADSPI_BUF2IND      QUADSPI.BUF2IND.R             /* Buffer 2 Top Index Register */
#define QUADSPI_AWRCR        QUADSPI.AWRCR.R               /* AHB Write Configuration Register */
#define QUADSPI_DLLCRA       QUADSPI.DLLCRA.R              /* DLL Flash Memory A Configuration Register */
#define QUADSPI_DLLCRB       QUADSPI.DLLCRB.R              /* DLL Flash Memory B Configuration Register */
#define QUADSPI_PARITYCR     QUADSPI.PARITYCR.R            /* Parity Configuration Register */
#define QUADSPI_SFAR         QUADSPI.SFAR.R                /* Serial Flash Memory Address Register */
#define QUADSPI_SFACR        QUADSPI.SFACR.R               /* Serial Flash Memory Address Configuration Register */
#define QUADSPI_SMPR         QUADSPI.SMPR.R                /* Sampling Register */
#define QUADSPI_RBSR         QUADSPI.RBSR.R                /* RX Buffer Status Register */
#define QUADSPI_RBCT         QUADSPI.RBCT.R                /* RX Buffer Control Register */
#define QUADSPI_AWRSR        QUADSPI.AWRSR.R               /* AHB Write Status Register */
#define QUADSPI_DLLSR        QUADSPI.DLLSR.R               /* DLL Status Register */
#define QUADSPI_DLCR         QUADSPI.DLCR.R                /* Data Learning Configuration Register */
#define QUADSPI_DLSR_FA      QUADSPI.DLSR_FA.R             /* Data Learning Status Flash Memory A Register */
#define QUADSPI_DLSR_FB      QUADSPI.DLSR_FB.R             /* Data Learning Status Flash Memory B Register */
#define QUADSPI_TBSR         QUADSPI.TBSR.R                /* TX Buffer Status Register */
#define QUADSPI_TBDR         QUADSPI.TBDR.R                /* TX Buffer Data Register */
#define QUADSPI_TBCT         QUADSPI.TBCT.R                /* TX Buffer Control Register */
#define QUADSPI_SR           QUADSPI.SR.R                  /* Status Register */
#define QUADSPI_FR           QUADSPI.FR.R                  /* Flag Register */
#define QUADSPI_RSER         QUADSPI.RSER.R                /* Interrupt and DMA Request Select and Enable Register */
#define QUADSPI_SPTRCLR      QUADSPI.SPTRCLR.R             /* Sequence Pointer Clear Register */
#define QUADSPI_SFA1AD       QUADSPI.SFA1AD.R              /* Serial Flash Memory A1 Top Address Register */
#define QUADSPI_SFA2AD       QUADSPI.SFA2AD.R              /* Serial Flash Memory A2 Top Address Register */
#define QUADSPI_SFB1AD       QUADSPI.SFB1AD.R              /* Serial Flash Memory B1 Top Address Register */
#define QUADSPI_SFB2AD       QUADSPI.SFB2AD.R              /* Serial Flash Memory B2 Top Address Register */
#define QUADSPI_DLPR         QUADSPI.DLPR.R                /* Data Learn Pattern Register */
#define QUADSPI_RBDR0        QUADSPI.RBDR[0].R             /* RX Buffer Data Register */
#define QUADSPI_RBDR1        QUADSPI.RBDR[1].R             /* RX Buffer Data Register */
#define QUADSPI_RBDR2        QUADSPI.RBDR[2].R             /* RX Buffer Data Register */
#define QUADSPI_RBDR3        QUADSPI.RBDR[3].R             /* RX Buffer Data Register */
#define QUADSPI_RBDR4        QUADSPI.RBDR[4].R             /* RX Buffer Data Register */
#define QUADSPI_RBDR5        QUADSPI.RBDR[5].R             /* RX Buffer Data Register */
#define QUADSPI_RBDR6        QUADSPI.RBDR[6].R             /* RX Buffer Data Register */
#define QUADSPI_RBDR7        QUADSPI.RBDR[7].R             /* RX Buffer Data Register */
#define QUADSPI_RBDR8        QUADSPI.RBDR[8].R             /* RX Buffer Data Register */
#define QUADSPI_RBDR9        QUADSPI.RBDR[9].R             /* RX Buffer Data Register */
#define QUADSPI_RBDR10       QUADSPI.RBDR[10].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR11       QUADSPI.RBDR[11].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR12       QUADSPI.RBDR[12].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR13       QUADSPI.RBDR[13].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR14       QUADSPI.RBDR[14].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR15       QUADSPI.RBDR[15].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR16       QUADSPI.RBDR[16].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR17       QUADSPI.RBDR[17].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR18       QUADSPI.RBDR[18].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR19       QUADSPI.RBDR[19].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR20       QUADSPI.RBDR[20].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR21       QUADSPI.RBDR[21].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR22       QUADSPI.RBDR[22].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR23       QUADSPI.RBDR[23].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR24       QUADSPI.RBDR[24].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR25       QUADSPI.RBDR[25].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR26       QUADSPI.RBDR[26].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR27       QUADSPI.RBDR[27].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR28       QUADSPI.RBDR[28].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR29       QUADSPI.RBDR[29].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR30       QUADSPI.RBDR[30].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR31       QUADSPI.RBDR[31].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR32       QUADSPI.RBDR[32].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR33       QUADSPI.RBDR[33].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR34       QUADSPI.RBDR[34].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR35       QUADSPI.RBDR[35].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR36       QUADSPI.RBDR[36].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR37       QUADSPI.RBDR[37].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR38       QUADSPI.RBDR[38].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR39       QUADSPI.RBDR[39].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR40       QUADSPI.RBDR[40].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR41       QUADSPI.RBDR[41].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR42       QUADSPI.RBDR[42].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR43       QUADSPI.RBDR[43].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR44       QUADSPI.RBDR[44].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR45       QUADSPI.RBDR[45].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR46       QUADSPI.RBDR[46].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR47       QUADSPI.RBDR[47].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR48       QUADSPI.RBDR[48].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR49       QUADSPI.RBDR[49].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR50       QUADSPI.RBDR[50].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR51       QUADSPI.RBDR[51].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR52       QUADSPI.RBDR[52].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR53       QUADSPI.RBDR[53].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR54       QUADSPI.RBDR[54].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR55       QUADSPI.RBDR[55].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR56       QUADSPI.RBDR[56].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR57       QUADSPI.RBDR[57].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR58       QUADSPI.RBDR[58].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR59       QUADSPI.RBDR[59].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR60       QUADSPI.RBDR[60].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR61       QUADSPI.RBDR[61].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR62       QUADSPI.RBDR[62].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR63       QUADSPI.RBDR[63].R            /* RX Buffer Data Register */
#define QUADSPI_LUTKEY       QUADSPI.LUTKEY.R              /* LUT Key Register */
#define QUADSPI_LCKCR        QUADSPI.LCKCR.R               /* LUT Lock Configuration Register */
#define QUADSPI_LUT0         QUADSPI.LUT[0].R              /* LUT Register */
#define QUADSPI_LUT1         QUADSPI.LUT[1].R              /* LUT Register */
#define QUADSPI_LUT2         QUADSPI.LUT[2].R              /* LUT Register */
#define QUADSPI_LUT3         QUADSPI.LUT[3].R              /* LUT Register */
#define QUADSPI_LUT4         QUADSPI.LUT[4].R              /* LUT Register */
#define QUADSPI_LUT5         QUADSPI.LUT[5].R              /* LUT Register */
#define QUADSPI_LUT6         QUADSPI.LUT[6].R              /* LUT Register */
#define QUADSPI_LUT7         QUADSPI.LUT[7].R              /* LUT Register */
#define QUADSPI_LUT8         QUADSPI.LUT[8].R              /* LUT Register */
#define QUADSPI_LUT9         QUADSPI.LUT[9].R              /* LUT Register */
#define QUADSPI_LUT10        QUADSPI.LUT[10].R             /* LUT Register */
#define QUADSPI_LUT11        QUADSPI.LUT[11].R             /* LUT Register */
#define QUADSPI_LUT12        QUADSPI.LUT[12].R             /* LUT Register */
#define QUADSPI_LUT13        QUADSPI.LUT[13].R             /* LUT Register */
#define QUADSPI_LUT14        QUADSPI.LUT[14].R             /* LUT Register */
#define QUADSPI_LUT15        QUADSPI.LUT[15].R             /* LUT Register */
#define QUADSPI_LUT16        QUADSPI.LUT[16].R             /* LUT Register */
#define QUADSPI_LUT17        QUADSPI.LUT[17].R             /* LUT Register */
#define QUADSPI_LUT18        QUADSPI.LUT[18].R             /* LUT Register */
#define QUADSPI_LUT19        QUADSPI.LUT[19].R             /* LUT Register */
#define QUADSPI_LUT20        QUADSPI.LUT[20].R             /* LUT Register */
#define QUADSPI_LUT21        QUADSPI.LUT[21].R             /* LUT Register */
#define QUADSPI_LUT22        QUADSPI.LUT[22].R             /* LUT Register */
#define QUADSPI_LUT23        QUADSPI.LUT[23].R             /* LUT Register */
#define QUADSPI_LUT24        QUADSPI.LUT[24].R             /* LUT Register */
#define QUADSPI_LUT25        QUADSPI.LUT[25].R             /* LUT Register */
#define QUADSPI_LUT26        QUADSPI.LUT[26].R             /* LUT Register */
#define QUADSPI_LUT27        QUADSPI.LUT[27].R             /* LUT Register */
#define QUADSPI_LUT28        QUADSPI.LUT[28].R             /* LUT Register */
#define QUADSPI_LUT29        QUADSPI.LUT[29].R             /* LUT Register */
#define QUADSPI_LUT30        QUADSPI.LUT[30].R             /* LUT Register */
#define QUADSPI_LUT31        QUADSPI.LUT[31].R             /* LUT Register */
#define QUADSPI_LUT32        QUADSPI.LUT[32].R             /* LUT Register */
#define QUADSPI_LUT33        QUADSPI.LUT[33].R             /* LUT Register */
#define QUADSPI_LUT34        QUADSPI.LUT[34].R             /* LUT Register */
#define QUADSPI_LUT35        QUADSPI.LUT[35].R             /* LUT Register */
#define QUADSPI_LUT36        QUADSPI.LUT[36].R             /* LUT Register */
#define QUADSPI_LUT37        QUADSPI.LUT[37].R             /* LUT Register */
#define QUADSPI_LUT38        QUADSPI.LUT[38].R             /* LUT Register */
#define QUADSPI_LUT39        QUADSPI.LUT[39].R             /* LUT Register */
#define QUADSPI_LUT40        QUADSPI.LUT[40].R             /* LUT Register */
#define QUADSPI_LUT41        QUADSPI.LUT[41].R             /* LUT Register */
#define QUADSPI_LUT42        QUADSPI.LUT[42].R             /* LUT Register */
#define QUADSPI_LUT43        QUADSPI.LUT[43].R             /* LUT Register */
#define QUADSPI_LUT44        QUADSPI.LUT[44].R             /* LUT Register */
#define QUADSPI_LUT45        QUADSPI.LUT[45].R             /* LUT Register */
#define QUADSPI_LUT46        QUADSPI.LUT[46].R             /* LUT Register */
#define QUADSPI_LUT47        QUADSPI.LUT[47].R             /* LUT Register */
#define QUADSPI_LUT48        QUADSPI.LUT[48].R             /* LUT Register */
#define QUADSPI_LUT49        QUADSPI.LUT[49].R             /* LUT Register */
#define QUADSPI_LUT50        QUADSPI.LUT[50].R             /* LUT Register */
#define QUADSPI_LUT51        QUADSPI.LUT[51].R             /* LUT Register */
#define QUADSPI_LUT52        QUADSPI.LUT[52].R             /* LUT Register */
#define QUADSPI_LUT53        QUADSPI.LUT[53].R             /* LUT Register */
#define QUADSPI_LUT54        QUADSPI.LUT[54].R             /* LUT Register */
#define QUADSPI_LUT55        QUADSPI.LUT[55].R             /* LUT Register */
#define QUADSPI_LUT56        QUADSPI.LUT[56].R             /* LUT Register */
#define QUADSPI_LUT57        QUADSPI.LUT[57].R             /* LUT Register */
#define QUADSPI_LUT58        QUADSPI.LUT[58].R             /* LUT Register */
#define QUADSPI_LUT59        QUADSPI.LUT[59].R             /* LUT Register */
#define QUADSPI_LUT60        QUADSPI.LUT[60].R             /* LUT Register */
#define QUADSPI_LUT61        QUADSPI.LUT[61].R             /* LUT Register */
#define QUADSPI_LUT62        QUADSPI.LUT[62].R             /* LUT Register */
#define QUADSPI_LUT63        QUADSPI.LUT[63].R             /* LUT Register */
#define QUADSPI_LUT64        QUADSPI.LUT[64].R             /* LUT Register */
#define QUADSPI_LUT65        QUADSPI.LUT[65].R             /* LUT Register */
#define QUADSPI_LUT66        QUADSPI.LUT[66].R             /* LUT Register */
#define QUADSPI_LUT67        QUADSPI.LUT[67].R             /* LUT Register */
#define QUADSPI_LUT68        QUADSPI.LUT[68].R             /* LUT Register */
#define QUADSPI_LUT69        QUADSPI.LUT[69].R             /* LUT Register */
#define QUADSPI_LUT70        QUADSPI.LUT[70].R             /* LUT Register */
#define QUADSPI_LUT71        QUADSPI.LUT[71].R             /* LUT Register */
#define QUADSPI_LUT72        QUADSPI.LUT[72].R             /* LUT Register */
#define QUADSPI_LUT73        QUADSPI.LUT[73].R             /* LUT Register */
#define QUADSPI_LUT74        QUADSPI.LUT[74].R             /* LUT Register */
#define QUADSPI_LUT75        QUADSPI.LUT[75].R             /* LUT Register */
#define QUADSPI_LUT76        QUADSPI.LUT[76].R             /* LUT Register */
#define QUADSPI_LUT77        QUADSPI.LUT[77].R             /* LUT Register */
#define QUADSPI_LUT78        QUADSPI.LUT[78].R             /* LUT Register */
#define QUADSPI_LUT79        QUADSPI.LUT[79].R             /* LUT Register */

/* QuadSPI_ARDB */
#define QUADSPI_ARDB_ARDB0   QUADSPI_ARDB.ARDB[0].R        /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB1   QUADSPI_ARDB.ARDB[1].R        /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB2   QUADSPI_ARDB.ARDB[2].R        /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB3   QUADSPI_ARDB.ARDB[3].R        /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB4   QUADSPI_ARDB.ARDB[4].R        /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB5   QUADSPI_ARDB.ARDB[5].R        /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB6   QUADSPI_ARDB.ARDB[6].R        /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB7   QUADSPI_ARDB.ARDB[7].R        /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB8   QUADSPI_ARDB.ARDB[8].R        /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB9   QUADSPI_ARDB.ARDB[9].R        /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB10  QUADSPI_ARDB.ARDB[10].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB11  QUADSPI_ARDB.ARDB[11].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB12  QUADSPI_ARDB.ARDB[12].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB13  QUADSPI_ARDB.ARDB[13].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB14  QUADSPI_ARDB.ARDB[14].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB15  QUADSPI_ARDB.ARDB[15].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB16  QUADSPI_ARDB.ARDB[16].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB17  QUADSPI_ARDB.ARDB[17].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB18  QUADSPI_ARDB.ARDB[18].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB19  QUADSPI_ARDB.ARDB[19].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB20  QUADSPI_ARDB.ARDB[20].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB21  QUADSPI_ARDB.ARDB[21].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB22  QUADSPI_ARDB.ARDB[22].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB23  QUADSPI_ARDB.ARDB[23].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB24  QUADSPI_ARDB.ARDB[24].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB25  QUADSPI_ARDB.ARDB[25].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB26  QUADSPI_ARDB.ARDB[26].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB27  QUADSPI_ARDB.ARDB[27].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB28  QUADSPI_ARDB.ARDB[28].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB29  QUADSPI_ARDB.ARDB[29].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB30  QUADSPI_ARDB.ARDB[30].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB31  QUADSPI_ARDB.ARDB[31].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB32  QUADSPI_ARDB.ARDB[32].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB33  QUADSPI_ARDB.ARDB[33].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB34  QUADSPI_ARDB.ARDB[34].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB35  QUADSPI_ARDB.ARDB[35].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB36  QUADSPI_ARDB.ARDB[36].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB37  QUADSPI_ARDB.ARDB[37].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB38  QUADSPI_ARDB.ARDB[38].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB39  QUADSPI_ARDB.ARDB[39].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB40  QUADSPI_ARDB.ARDB[40].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB41  QUADSPI_ARDB.ARDB[41].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB42  QUADSPI_ARDB.ARDB[42].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB43  QUADSPI_ARDB.ARDB[43].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB44  QUADSPI_ARDB.ARDB[44].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB45  QUADSPI_ARDB.ARDB[45].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB46  QUADSPI_ARDB.ARDB[46].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB47  QUADSPI_ARDB.ARDB[47].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB48  QUADSPI_ARDB.ARDB[48].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB49  QUADSPI_ARDB.ARDB[49].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB50  QUADSPI_ARDB.ARDB[50].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB51  QUADSPI_ARDB.ARDB[51].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB52  QUADSPI_ARDB.ARDB[52].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB53  QUADSPI_ARDB.ARDB[53].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB54  QUADSPI_ARDB.ARDB[54].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB55  QUADSPI_ARDB.ARDB[55].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB56  QUADSPI_ARDB.ARDB[56].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB57  QUADSPI_ARDB.ARDB[57].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB58  QUADSPI_ARDB.ARDB[58].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB59  QUADSPI_ARDB.ARDB[59].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB60  QUADSPI_ARDB.ARDB[60].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB61  QUADSPI_ARDB.ARDB[61].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB62  QUADSPI_ARDB.ARDB[62].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB63  QUADSPI_ARDB.ARDB[63].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB64  QUADSPI_ARDB.ARDB[64].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB65  QUADSPI_ARDB.ARDB[65].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB66  QUADSPI_ARDB.ARDB[66].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB67  QUADSPI_ARDB.ARDB[67].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB68  QUADSPI_ARDB.ARDB[68].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB69  QUADSPI_ARDB.ARDB[69].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB70  QUADSPI_ARDB.ARDB[70].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB71  QUADSPI_ARDB.ARDB[71].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB72  QUADSPI_ARDB.ARDB[72].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB73  QUADSPI_ARDB.ARDB[73].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB74  QUADSPI_ARDB.ARDB[74].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB75  QUADSPI_ARDB.ARDB[75].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB76  QUADSPI_ARDB.ARDB[76].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB77  QUADSPI_ARDB.ARDB[77].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB78  QUADSPI_ARDB.ARDB[78].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB79  QUADSPI_ARDB.ARDB[79].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB80  QUADSPI_ARDB.ARDB[80].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB81  QUADSPI_ARDB.ARDB[81].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB82  QUADSPI_ARDB.ARDB[82].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB83  QUADSPI_ARDB.ARDB[83].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB84  QUADSPI_ARDB.ARDB[84].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB85  QUADSPI_ARDB.ARDB[85].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB86  QUADSPI_ARDB.ARDB[86].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB87  QUADSPI_ARDB.ARDB[87].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB88  QUADSPI_ARDB.ARDB[88].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB89  QUADSPI_ARDB.ARDB[89].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB90  QUADSPI_ARDB.ARDB[90].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB91  QUADSPI_ARDB.ARDB[91].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB92  QUADSPI_ARDB.ARDB[92].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB93  QUADSPI_ARDB.ARDB[93].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB94  QUADSPI_ARDB.ARDB[94].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB95  QUADSPI_ARDB.ARDB[95].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB96  QUADSPI_ARDB.ARDB[96].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB97  QUADSPI_ARDB.ARDB[97].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB98  QUADSPI_ARDB.ARDB[98].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB99  QUADSPI_ARDB.ARDB[99].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB100 QUADSPI_ARDB.ARDB[100].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB101 QUADSPI_ARDB.ARDB[101].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB102 QUADSPI_ARDB.ARDB[102].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB103 QUADSPI_ARDB.ARDB[103].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB104 QUADSPI_ARDB.ARDB[104].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB105 QUADSPI_ARDB.ARDB[105].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB106 QUADSPI_ARDB.ARDB[106].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB107 QUADSPI_ARDB.ARDB[107].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB108 QUADSPI_ARDB.ARDB[108].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB109 QUADSPI_ARDB.ARDB[109].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB110 QUADSPI_ARDB.ARDB[110].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB111 QUADSPI_ARDB.ARDB[111].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB112 QUADSPI_ARDB.ARDB[112].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB113 QUADSPI_ARDB.ARDB[113].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB114 QUADSPI_ARDB.ARDB[114].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB115 QUADSPI_ARDB.ARDB[115].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB116 QUADSPI_ARDB.ARDB[116].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB117 QUADSPI_ARDB.ARDB[117].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB118 QUADSPI_ARDB.ARDB[118].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB119 QUADSPI_ARDB.ARDB[119].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB120 QUADSPI_ARDB.ARDB[120].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB121 QUADSPI_ARDB.ARDB[121].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB122 QUADSPI_ARDB.ARDB[122].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB123 QUADSPI_ARDB.ARDB[123].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB124 QUADSPI_ARDB.ARDB[124].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB125 QUADSPI_ARDB.ARDB[125].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB126 QUADSPI_ARDB.ARDB[126].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB127 QUADSPI_ARDB.ARDB[127].R      /* AHB RX Data Buffer Register */

/* REGISTER_PROTECTION */
#define REG_PROT_SLBRn       REG_PROT.SLBRN.R              /* Soft Lock Bit Register */
#define REG_PROT_GCR         REG_PROT.GCR.R                /* Global Configuration Register */

/* RESET */
#define RDC_RD1_CTRL_REG     RDC.RD1_CTRL_REG.R            /* Software Reset Domain 1 control register */
#define RDC_RD2_CTRL_REG     RDC.RD2_CTRL_REG.R            /* Software Reset Domain 2 control register */
#define RDC_RD3_CTRL_REG     RDC.RD3_CTRL_REG.R            /* Software Reset Domain 3 control register */
#define RDC_RD1_STAT_REG     RDC.RD1_STAT_REG.R            /* Software Reset Domain 1 status register */
#define RDC_RD2_STAT_REG     RDC.RD2_STAT_REG.R            /* Software Reset Domain 2 status register */
#define RDC_RD3_STAT_REG     RDC.RD3_STAT_REG.R            /* Software Reset Domain 3 status register */

/* RTC */
#define RTC_RTCSUPV          RTC.RTCSUPV.R                 /* RTC Supervisor Control register */
#define RTC_RTCC             RTC.RTCC.R                    /* RTC Control register */
#define RTC_RTCS             RTC.RTCS.R                    /* RTC Status register */
#define RTC_RTCCNT           RTC.RTCCNT.R                  /* RTC Counter register */
#define RTC_APIVAL           RTC.APIVAL.R                  /* API Compare Value register */
#define RTC_RTCVAL           RTC.RTCVAL.R                  /* RTC Compare Value register */

/* S32G_GPR */
#define S32G_GPR_PFE_COH_EN  S32G_GPR.PFE_COH_EN.R         /* PFE Port Coherency Enable */
#define S32G_GPR_PFE_EMACX_INTF_SEL S32G_GPR.PFE_EMACX_INTF_SEL.R /* PFE EMAC Interface Mode */
#define S32G_GPR_PFE_SYS_GEN0 S32G_GPR.PFE_SYS_GEN0.R      /* PFE Generic System Status 0 */
#define S32G_GPR_PFE_SYS_GEN1 S32G_GPR.PFE_SYS_GEN1.R      /* PFE Generic System Status 1 */
#define S32G_GPR_PFE_SYS_GEN2 S32G_GPR.PFE_SYS_GEN2.R      /* PFE Generic System Status 2 */
#define S32G_GPR_PFE_SYS_GEN3 S32G_GPR.PFE_SYS_GEN3.R      /* PFE Generic System Status 3 */
#define S32G_GPR_PFE_PWR_CTRL S32G_GPR.PFE_PWR_CTRL.R      /* PFE EMACX Power Control */
#define S32G_GPR_LLCE_STAT   S32G_GPR.LLCE_STAT.R          /* LLCE Subsystem Status */
#define S32G_GPR_LLCE_CTRL   S32G_GPR.LLCE_CTRL.R          /* LLCE Power Control */
#define S32G_GPR_DDR_URGENT_CTRL S32G_GPR.DDR_URGENT_CTRL.R /* DDR Urgent Control */
#define S32G_GPR_FLXTIM_CTRL S32G_GPR.FLXTIM_CTRL.R        /* FlexTimer Global Load Control */
#define S32G_GPR_FLXTIM_STAT S32G_GPR.FLXTIM_STAT.R        /* FlexTimer LDOK Status */
#define S32G_GPR_CMU_STAT    S32G_GPR.CMU_STAT.R           /* Top CMU_FC Status */
#define S32G_GPR_NOC_NOPEND_TRANS S32G_GPR.NOC_NOPEND_TRANS.R /* Accelerator NoC NoPendingTrans Status */
#define S32G_GPR_CLKOUT_PAD_CTRL S32G_GPR.CLKOUT_PAD_CTRL.R /* CLKOUT PAD Control */
#define S32G_GPR_PCIE_TOGGLE S32G_GPR.PCIE_TOGGLE.R        /* PCIe RD/WD Toggle Control */
#define S32G_GPR_PCIE_TOGGLEDONE_STAT S32G_GPR.PCIE_TOGGLEDONE_STAT.R /* PCIe Toggle Done Status */
#define S32G_GPR_GENCTRL0    S32G_GPR.GENCTRL0.R           /* Generic Control 0 */
#define S32G_GPR_GENCTRL1    S32G_GPR.GENCTRL1.R           /* Generic Control 1 */
#define S32G_GPR_GENCTRL2    S32G_GPR.GENCTRL2.R           /* Generic Control 2 */
#define S32G_GPR_GENCTRL3    S32G_GPR.GENCTRL3.R           /* Generic Control 3 */
#define S32G_GPR_GENSTAT0    S32G_GPR.GENSTAT0.R           /* Generic Status 0 */
#define S32G_GPR_GENSTAT1    S32G_GPR.GENSTAT1.R           /* Generic Status 1 */
#define S32G_GPR_GENSTAT2    S32G_GPR.GENSTAT2.R           /* Generic Status 2 */
#define S32G_GPR_GENSTAT3    S32G_GPR.GENSTAT3.R           /* Generic Status 3 */

/* S32G_STDBY_GPR */
#define S32G_STDBY_GPR_WKUP_PUS S32G_STDBY_GPR.WKUP_PUS.R  /* WKUP Pad Pullup/Pulldown Select */

/* SBSW */
#define D_IP_SAFETY_BY_SW_SYN_TMC_CONFIG_UNLOCK D_IP_SAFETY_BY_SW_SYN.TMC_CONFIG_UNLOCK.R /* TMC Configuration Unlock */
#define D_IP_SAFETY_BY_SW_SYN_TMWDP_CONFIG_UNLOCK D_IP_SAFETY_BY_SW_SYN.TMWDP_CONFIG_UNLOCK.R /* TMWDP Configuration Unlock */
#define D_IP_SAFETY_BY_SW_SYN_TMC_CONFIG_STATUS D_IP_SAFETY_BY_SW_SYN.TMC_CONFIG_STATUS.R /* TMC Configuration Status */
#define D_IP_SAFETY_BY_SW_SYN_TMWDP_CONFIG_STATUS D_IP_SAFETY_BY_SW_SYN.TMWDP_CONFIG_STATUS.R /* TMWDP Configuration Status */
#define D_IP_SAFETY_BY_SW_SYN_DEBUG_MODE D_IP_SAFETY_BY_SW_SYN.DEBUG_MODE.R /* Debug Mode */
#define D_IP_SAFETY_BY_SW_SYN_TMC_FAULT_STATUS D_IP_SAFETY_BY_SW_SYN.TMC_FAULT_STATUS.R /* TMC Fault Status */
#define D_IP_SAFETY_BY_SW_SYN_TMWDP_FAULT_STATUS D_IP_SAFETY_BY_SW_SYN.TMWDP_FAULT_STATUS.R /* TMWDP Fault Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_0_CONFIG D_IP_SAFETY_BY_SW_SYN.TMC[0].CONFIG.R /* TMC Configuration */
#define D_IP_SAFETY_BY_SW_SYN_TMC_0_DISTANCE D_IP_SAFETY_BY_SW_SYN.TMC[0].DISTANCE.R /* TMC Distance */
#define D_IP_SAFETY_BY_SW_SYN_TMC_0_TIMEOUT D_IP_SAFETY_BY_SW_SYN.TMC[0].TIMEOUT.R /* TMC Timeout */
#define D_IP_SAFETY_BY_SW_SYN_TMC_0_CONTROL D_IP_SAFETY_BY_SW_SYN.TMC[0].CONTROL.R /* TMC Control */
#define D_IP_SAFETY_BY_SW_SYN_TMC_0_R0 D_IP_SAFETY_BY_SW_SYN.TMC[0].R0.R /* TMC R0 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_0_R1 D_IP_SAFETY_BY_SW_SYN.TMC[0].R1.R /* TMC R1 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_0_STATUS D_IP_SAFETY_BY_SW_SYN.TMC[0].STATUS.R /* TMC Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_0_TIMER D_IP_SAFETY_BY_SW_SYN.TMC[0].TIMER.R /* TMC Timer */
#define D_IP_SAFETY_BY_SW_SYN_TMC_1_CONFIG D_IP_SAFETY_BY_SW_SYN.TMC[1].CONFIG.R /* TMC Configuration */
#define D_IP_SAFETY_BY_SW_SYN_TMC_1_DISTANCE D_IP_SAFETY_BY_SW_SYN.TMC[1].DISTANCE.R /* TMC Distance */
#define D_IP_SAFETY_BY_SW_SYN_TMC_1_TIMEOUT D_IP_SAFETY_BY_SW_SYN.TMC[1].TIMEOUT.R /* TMC Timeout */
#define D_IP_SAFETY_BY_SW_SYN_TMC_1_CONTROL D_IP_SAFETY_BY_SW_SYN.TMC[1].CONTROL.R /* TMC Control */
#define D_IP_SAFETY_BY_SW_SYN_TMC_1_R0 D_IP_SAFETY_BY_SW_SYN.TMC[1].R0.R /* TMC R0 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_1_R1 D_IP_SAFETY_BY_SW_SYN.TMC[1].R1.R /* TMC R1 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_1_STATUS D_IP_SAFETY_BY_SW_SYN.TMC[1].STATUS.R /* TMC Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_1_TIMER D_IP_SAFETY_BY_SW_SYN.TMC[1].TIMER.R /* TMC Timer */
#define D_IP_SAFETY_BY_SW_SYN_TMC_2_CONFIG D_IP_SAFETY_BY_SW_SYN.TMC[2].CONFIG.R /* TMC Configuration */
#define D_IP_SAFETY_BY_SW_SYN_TMC_2_DISTANCE D_IP_SAFETY_BY_SW_SYN.TMC[2].DISTANCE.R /* TMC Distance */
#define D_IP_SAFETY_BY_SW_SYN_TMC_2_TIMEOUT D_IP_SAFETY_BY_SW_SYN.TMC[2].TIMEOUT.R /* TMC Timeout */
#define D_IP_SAFETY_BY_SW_SYN_TMC_2_CONTROL D_IP_SAFETY_BY_SW_SYN.TMC[2].CONTROL.R /* TMC Control */
#define D_IP_SAFETY_BY_SW_SYN_TMC_2_R0 D_IP_SAFETY_BY_SW_SYN.TMC[2].R0.R /* TMC R0 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_2_R1 D_IP_SAFETY_BY_SW_SYN.TMC[2].R1.R /* TMC R1 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_2_STATUS D_IP_SAFETY_BY_SW_SYN.TMC[2].STATUS.R /* TMC Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_2_TIMER D_IP_SAFETY_BY_SW_SYN.TMC[2].TIMER.R /* TMC Timer */
#define D_IP_SAFETY_BY_SW_SYN_TMC_3_CONFIG D_IP_SAFETY_BY_SW_SYN.TMC[3].CONFIG.R /* TMC Configuration */
#define D_IP_SAFETY_BY_SW_SYN_TMC_3_DISTANCE D_IP_SAFETY_BY_SW_SYN.TMC[3].DISTANCE.R /* TMC Distance */
#define D_IP_SAFETY_BY_SW_SYN_TMC_3_TIMEOUT D_IP_SAFETY_BY_SW_SYN.TMC[3].TIMEOUT.R /* TMC Timeout */
#define D_IP_SAFETY_BY_SW_SYN_TMC_3_CONTROL D_IP_SAFETY_BY_SW_SYN.TMC[3].CONTROL.R /* TMC Control */
#define D_IP_SAFETY_BY_SW_SYN_TMC_3_R0 D_IP_SAFETY_BY_SW_SYN.TMC[3].R0.R /* TMC R0 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_3_R1 D_IP_SAFETY_BY_SW_SYN.TMC[3].R1.R /* TMC R1 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_3_STATUS D_IP_SAFETY_BY_SW_SYN.TMC[3].STATUS.R /* TMC Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_3_TIMER D_IP_SAFETY_BY_SW_SYN.TMC[3].TIMER.R /* TMC Timer */
#define D_IP_SAFETY_BY_SW_SYN_TMC_4_CONFIG D_IP_SAFETY_BY_SW_SYN.TMC[4].CONFIG.R /* TMC Configuration */
#define D_IP_SAFETY_BY_SW_SYN_TMC_4_DISTANCE D_IP_SAFETY_BY_SW_SYN.TMC[4].DISTANCE.R /* TMC Distance */
#define D_IP_SAFETY_BY_SW_SYN_TMC_4_TIMEOUT D_IP_SAFETY_BY_SW_SYN.TMC[4].TIMEOUT.R /* TMC Timeout */
#define D_IP_SAFETY_BY_SW_SYN_TMC_4_CONTROL D_IP_SAFETY_BY_SW_SYN.TMC[4].CONTROL.R /* TMC Control */
#define D_IP_SAFETY_BY_SW_SYN_TMC_4_R0 D_IP_SAFETY_BY_SW_SYN.TMC[4].R0.R /* TMC R0 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_4_R1 D_IP_SAFETY_BY_SW_SYN.TMC[4].R1.R /* TMC R1 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_4_STATUS D_IP_SAFETY_BY_SW_SYN.TMC[4].STATUS.R /* TMC Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_4_TIMER D_IP_SAFETY_BY_SW_SYN.TMC[4].TIMER.R /* TMC Timer */
#define D_IP_SAFETY_BY_SW_SYN_TMC_5_CONFIG D_IP_SAFETY_BY_SW_SYN.TMC[5].CONFIG.R /* TMC Configuration */
#define D_IP_SAFETY_BY_SW_SYN_TMC_5_DISTANCE D_IP_SAFETY_BY_SW_SYN.TMC[5].DISTANCE.R /* TMC Distance */
#define D_IP_SAFETY_BY_SW_SYN_TMC_5_TIMEOUT D_IP_SAFETY_BY_SW_SYN.TMC[5].TIMEOUT.R /* TMC Timeout */
#define D_IP_SAFETY_BY_SW_SYN_TMC_5_CONTROL D_IP_SAFETY_BY_SW_SYN.TMC[5].CONTROL.R /* TMC Control */
#define D_IP_SAFETY_BY_SW_SYN_TMC_5_R0 D_IP_SAFETY_BY_SW_SYN.TMC[5].R0.R /* TMC R0 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_5_R1 D_IP_SAFETY_BY_SW_SYN.TMC[5].R1.R /* TMC R1 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_5_STATUS D_IP_SAFETY_BY_SW_SYN.TMC[5].STATUS.R /* TMC Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_5_TIMER D_IP_SAFETY_BY_SW_SYN.TMC[5].TIMER.R /* TMC Timer */
#define D_IP_SAFETY_BY_SW_SYN_TMC_6_CONFIG D_IP_SAFETY_BY_SW_SYN.TMC[6].CONFIG.R /* TMC Configuration */
#define D_IP_SAFETY_BY_SW_SYN_TMC_6_DISTANCE D_IP_SAFETY_BY_SW_SYN.TMC[6].DISTANCE.R /* TMC Distance */
#define D_IP_SAFETY_BY_SW_SYN_TMC_6_TIMEOUT D_IP_SAFETY_BY_SW_SYN.TMC[6].TIMEOUT.R /* TMC Timeout */
#define D_IP_SAFETY_BY_SW_SYN_TMC_6_CONTROL D_IP_SAFETY_BY_SW_SYN.TMC[6].CONTROL.R /* TMC Control */
#define D_IP_SAFETY_BY_SW_SYN_TMC_6_R0 D_IP_SAFETY_BY_SW_SYN.TMC[6].R0.R /* TMC R0 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_6_R1 D_IP_SAFETY_BY_SW_SYN.TMC[6].R1.R /* TMC R1 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_6_STATUS D_IP_SAFETY_BY_SW_SYN.TMC[6].STATUS.R /* TMC Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_6_TIMER D_IP_SAFETY_BY_SW_SYN.TMC[6].TIMER.R /* TMC Timer */
#define D_IP_SAFETY_BY_SW_SYN_TMC_7_CONFIG D_IP_SAFETY_BY_SW_SYN.TMC[7].CONFIG.R /* TMC Configuration */
#define D_IP_SAFETY_BY_SW_SYN_TMC_7_DISTANCE D_IP_SAFETY_BY_SW_SYN.TMC[7].DISTANCE.R /* TMC Distance */
#define D_IP_SAFETY_BY_SW_SYN_TMC_7_TIMEOUT D_IP_SAFETY_BY_SW_SYN.TMC[7].TIMEOUT.R /* TMC Timeout */
#define D_IP_SAFETY_BY_SW_SYN_TMC_7_CONTROL D_IP_SAFETY_BY_SW_SYN.TMC[7].CONTROL.R /* TMC Control */
#define D_IP_SAFETY_BY_SW_SYN_TMC_7_R0 D_IP_SAFETY_BY_SW_SYN.TMC[7].R0.R /* TMC R0 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_7_R1 D_IP_SAFETY_BY_SW_SYN.TMC[7].R1.R /* TMC R1 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_7_STATUS D_IP_SAFETY_BY_SW_SYN.TMC[7].STATUS.R /* TMC Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_7_TIMER D_IP_SAFETY_BY_SW_SYN.TMC[7].TIMER.R /* TMC Timer */
#define D_IP_SAFETY_BY_SW_SYN_TMC_8_CONFIG D_IP_SAFETY_BY_SW_SYN.TMC[8].CONFIG.R /* TMC Configuration */
#define D_IP_SAFETY_BY_SW_SYN_TMC_8_DISTANCE D_IP_SAFETY_BY_SW_SYN.TMC[8].DISTANCE.R /* TMC Distance */
#define D_IP_SAFETY_BY_SW_SYN_TMC_8_TIMEOUT D_IP_SAFETY_BY_SW_SYN.TMC[8].TIMEOUT.R /* TMC Timeout */
#define D_IP_SAFETY_BY_SW_SYN_TMC_8_CONTROL D_IP_SAFETY_BY_SW_SYN.TMC[8].CONTROL.R /* TMC Control */
#define D_IP_SAFETY_BY_SW_SYN_TMC_8_R0 D_IP_SAFETY_BY_SW_SYN.TMC[8].R0.R /* TMC R0 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_8_R1 D_IP_SAFETY_BY_SW_SYN.TMC[8].R1.R /* TMC R1 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_8_STATUS D_IP_SAFETY_BY_SW_SYN.TMC[8].STATUS.R /* TMC Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_8_TIMER D_IP_SAFETY_BY_SW_SYN.TMC[8].TIMER.R /* TMC Timer */
#define D_IP_SAFETY_BY_SW_SYN_TMC_9_CONFIG D_IP_SAFETY_BY_SW_SYN.TMC[9].CONFIG.R /* TMC Configuration */
#define D_IP_SAFETY_BY_SW_SYN_TMC_9_DISTANCE D_IP_SAFETY_BY_SW_SYN.TMC[9].DISTANCE.R /* TMC Distance */
#define D_IP_SAFETY_BY_SW_SYN_TMC_9_TIMEOUT D_IP_SAFETY_BY_SW_SYN.TMC[9].TIMEOUT.R /* TMC Timeout */
#define D_IP_SAFETY_BY_SW_SYN_TMC_9_CONTROL D_IP_SAFETY_BY_SW_SYN.TMC[9].CONTROL.R /* TMC Control */
#define D_IP_SAFETY_BY_SW_SYN_TMC_9_R0 D_IP_SAFETY_BY_SW_SYN.TMC[9].R0.R /* TMC R0 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_9_R1 D_IP_SAFETY_BY_SW_SYN.TMC[9].R1.R /* TMC R1 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_9_STATUS D_IP_SAFETY_BY_SW_SYN.TMC[9].STATUS.R /* TMC Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_9_TIMER D_IP_SAFETY_BY_SW_SYN.TMC[9].TIMER.R /* TMC Timer */
#define D_IP_SAFETY_BY_SW_SYN_TMC_10_CONFIG D_IP_SAFETY_BY_SW_SYN.TMC[10].CONFIG.R /* TMC Configuration */
#define D_IP_SAFETY_BY_SW_SYN_TMC_10_DISTANCE D_IP_SAFETY_BY_SW_SYN.TMC[10].DISTANCE.R /* TMC Distance */
#define D_IP_SAFETY_BY_SW_SYN_TMC_10_TIMEOUT D_IP_SAFETY_BY_SW_SYN.TMC[10].TIMEOUT.R /* TMC Timeout */
#define D_IP_SAFETY_BY_SW_SYN_TMC_10_CONTROL D_IP_SAFETY_BY_SW_SYN.TMC[10].CONTROL.R /* TMC Control */
#define D_IP_SAFETY_BY_SW_SYN_TMC_10_R0 D_IP_SAFETY_BY_SW_SYN.TMC[10].R0.R /* TMC R0 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_10_R1 D_IP_SAFETY_BY_SW_SYN.TMC[10].R1.R /* TMC R1 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_10_STATUS D_IP_SAFETY_BY_SW_SYN.TMC[10].STATUS.R /* TMC Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_10_TIMER D_IP_SAFETY_BY_SW_SYN.TMC[10].TIMER.R /* TMC Timer */
#define D_IP_SAFETY_BY_SW_SYN_TMC_11_CONFIG D_IP_SAFETY_BY_SW_SYN.TMC[11].CONFIG.R /* TMC Configuration */
#define D_IP_SAFETY_BY_SW_SYN_TMC_11_DISTANCE D_IP_SAFETY_BY_SW_SYN.TMC[11].DISTANCE.R /* TMC Distance */
#define D_IP_SAFETY_BY_SW_SYN_TMC_11_TIMEOUT D_IP_SAFETY_BY_SW_SYN.TMC[11].TIMEOUT.R /* TMC Timeout */
#define D_IP_SAFETY_BY_SW_SYN_TMC_11_CONTROL D_IP_SAFETY_BY_SW_SYN.TMC[11].CONTROL.R /* TMC Control */
#define D_IP_SAFETY_BY_SW_SYN_TMC_11_R0 D_IP_SAFETY_BY_SW_SYN.TMC[11].R0.R /* TMC R0 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_11_R1 D_IP_SAFETY_BY_SW_SYN.TMC[11].R1.R /* TMC R1 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_11_STATUS D_IP_SAFETY_BY_SW_SYN.TMC[11].STATUS.R /* TMC Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_11_TIMER D_IP_SAFETY_BY_SW_SYN.TMC[11].TIMER.R /* TMC Timer */
#define D_IP_SAFETY_BY_SW_SYN_TMC_12_CONFIG D_IP_SAFETY_BY_SW_SYN.TMC[12].CONFIG.R /* TMC Configuration */
#define D_IP_SAFETY_BY_SW_SYN_TMC_12_DISTANCE D_IP_SAFETY_BY_SW_SYN.TMC[12].DISTANCE.R /* TMC Distance */
#define D_IP_SAFETY_BY_SW_SYN_TMC_12_TIMEOUT D_IP_SAFETY_BY_SW_SYN.TMC[12].TIMEOUT.R /* TMC Timeout */
#define D_IP_SAFETY_BY_SW_SYN_TMC_12_CONTROL D_IP_SAFETY_BY_SW_SYN.TMC[12].CONTROL.R /* TMC Control */
#define D_IP_SAFETY_BY_SW_SYN_TMC_12_R0 D_IP_SAFETY_BY_SW_SYN.TMC[12].R0.R /* TMC R0 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_12_R1 D_IP_SAFETY_BY_SW_SYN.TMC[12].R1.R /* TMC R1 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_12_STATUS D_IP_SAFETY_BY_SW_SYN.TMC[12].STATUS.R /* TMC Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_12_TIMER D_IP_SAFETY_BY_SW_SYN.TMC[12].TIMER.R /* TMC Timer */
#define D_IP_SAFETY_BY_SW_SYN_TMC_13_CONFIG D_IP_SAFETY_BY_SW_SYN.TMC[13].CONFIG.R /* TMC Configuration */
#define D_IP_SAFETY_BY_SW_SYN_TMC_13_DISTANCE D_IP_SAFETY_BY_SW_SYN.TMC[13].DISTANCE.R /* TMC Distance */
#define D_IP_SAFETY_BY_SW_SYN_TMC_13_TIMEOUT D_IP_SAFETY_BY_SW_SYN.TMC[13].TIMEOUT.R /* TMC Timeout */
#define D_IP_SAFETY_BY_SW_SYN_TMC_13_CONTROL D_IP_SAFETY_BY_SW_SYN.TMC[13].CONTROL.R /* TMC Control */
#define D_IP_SAFETY_BY_SW_SYN_TMC_13_R0 D_IP_SAFETY_BY_SW_SYN.TMC[13].R0.R /* TMC R0 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_13_R1 D_IP_SAFETY_BY_SW_SYN.TMC[13].R1.R /* TMC R1 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_13_STATUS D_IP_SAFETY_BY_SW_SYN.TMC[13].STATUS.R /* TMC Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_13_TIMER D_IP_SAFETY_BY_SW_SYN.TMC[13].TIMER.R /* TMC Timer */
#define D_IP_SAFETY_BY_SW_SYN_TMC_14_CONFIG D_IP_SAFETY_BY_SW_SYN.TMC[14].CONFIG.R /* TMC Configuration */
#define D_IP_SAFETY_BY_SW_SYN_TMC_14_DISTANCE D_IP_SAFETY_BY_SW_SYN.TMC[14].DISTANCE.R /* TMC Distance */
#define D_IP_SAFETY_BY_SW_SYN_TMC_14_TIMEOUT D_IP_SAFETY_BY_SW_SYN.TMC[14].TIMEOUT.R /* TMC Timeout */
#define D_IP_SAFETY_BY_SW_SYN_TMC_14_CONTROL D_IP_SAFETY_BY_SW_SYN.TMC[14].CONTROL.R /* TMC Control */
#define D_IP_SAFETY_BY_SW_SYN_TMC_14_R0 D_IP_SAFETY_BY_SW_SYN.TMC[14].R0.R /* TMC R0 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_14_R1 D_IP_SAFETY_BY_SW_SYN.TMC[14].R1.R /* TMC R1 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_14_STATUS D_IP_SAFETY_BY_SW_SYN.TMC[14].STATUS.R /* TMC Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_14_TIMER D_IP_SAFETY_BY_SW_SYN.TMC[14].TIMER.R /* TMC Timer */
#define D_IP_SAFETY_BY_SW_SYN_TMC_15_CONFIG D_IP_SAFETY_BY_SW_SYN.TMC[15].CONFIG.R /* TMC Configuration */
#define D_IP_SAFETY_BY_SW_SYN_TMC_15_DISTANCE D_IP_SAFETY_BY_SW_SYN.TMC[15].DISTANCE.R /* TMC Distance */
#define D_IP_SAFETY_BY_SW_SYN_TMC_15_TIMEOUT D_IP_SAFETY_BY_SW_SYN.TMC[15].TIMEOUT.R /* TMC Timeout */
#define D_IP_SAFETY_BY_SW_SYN_TMC_15_CONTROL D_IP_SAFETY_BY_SW_SYN.TMC[15].CONTROL.R /* TMC Control */
#define D_IP_SAFETY_BY_SW_SYN_TMC_15_R0 D_IP_SAFETY_BY_SW_SYN.TMC[15].R0.R /* TMC R0 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_15_R1 D_IP_SAFETY_BY_SW_SYN.TMC[15].R1.R /* TMC R1 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_15_STATUS D_IP_SAFETY_BY_SW_SYN.TMC[15].STATUS.R /* TMC Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_15_TIMER D_IP_SAFETY_BY_SW_SYN.TMC[15].TIMER.R /* TMC Timer */
#define D_IP_SAFETY_BY_SW_SYN_TMC_16_CONFIG D_IP_SAFETY_BY_SW_SYN.TMC[16].CONFIG.R /* TMC Configuration */
#define D_IP_SAFETY_BY_SW_SYN_TMC_16_DISTANCE D_IP_SAFETY_BY_SW_SYN.TMC[16].DISTANCE.R /* TMC Distance */
#define D_IP_SAFETY_BY_SW_SYN_TMC_16_TIMEOUT D_IP_SAFETY_BY_SW_SYN.TMC[16].TIMEOUT.R /* TMC Timeout */
#define D_IP_SAFETY_BY_SW_SYN_TMC_16_CONTROL D_IP_SAFETY_BY_SW_SYN.TMC[16].CONTROL.R /* TMC Control */
#define D_IP_SAFETY_BY_SW_SYN_TMC_16_R0 D_IP_SAFETY_BY_SW_SYN.TMC[16].R0.R /* TMC R0 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_16_R1 D_IP_SAFETY_BY_SW_SYN.TMC[16].R1.R /* TMC R1 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_16_STATUS D_IP_SAFETY_BY_SW_SYN.TMC[16].STATUS.R /* TMC Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_16_TIMER D_IP_SAFETY_BY_SW_SYN.TMC[16].TIMER.R /* TMC Timer */
#define D_IP_SAFETY_BY_SW_SYN_TMC_17_CONFIG D_IP_SAFETY_BY_SW_SYN.TMC[17].CONFIG.R /* TMC Configuration */
#define D_IP_SAFETY_BY_SW_SYN_TMC_17_DISTANCE D_IP_SAFETY_BY_SW_SYN.TMC[17].DISTANCE.R /* TMC Distance */
#define D_IP_SAFETY_BY_SW_SYN_TMC_17_TIMEOUT D_IP_SAFETY_BY_SW_SYN.TMC[17].TIMEOUT.R /* TMC Timeout */
#define D_IP_SAFETY_BY_SW_SYN_TMC_17_CONTROL D_IP_SAFETY_BY_SW_SYN.TMC[17].CONTROL.R /* TMC Control */
#define D_IP_SAFETY_BY_SW_SYN_TMC_17_R0 D_IP_SAFETY_BY_SW_SYN.TMC[17].R0.R /* TMC R0 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_17_R1 D_IP_SAFETY_BY_SW_SYN.TMC[17].R1.R /* TMC R1 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_17_STATUS D_IP_SAFETY_BY_SW_SYN.TMC[17].STATUS.R /* TMC Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_17_TIMER D_IP_SAFETY_BY_SW_SYN.TMC[17].TIMER.R /* TMC Timer */
#define D_IP_SAFETY_BY_SW_SYN_TMC_18_CONFIG D_IP_SAFETY_BY_SW_SYN.TMC[18].CONFIG.R /* TMC Configuration */
#define D_IP_SAFETY_BY_SW_SYN_TMC_18_DISTANCE D_IP_SAFETY_BY_SW_SYN.TMC[18].DISTANCE.R /* TMC Distance */
#define D_IP_SAFETY_BY_SW_SYN_TMC_18_TIMEOUT D_IP_SAFETY_BY_SW_SYN.TMC[18].TIMEOUT.R /* TMC Timeout */
#define D_IP_SAFETY_BY_SW_SYN_TMC_18_CONTROL D_IP_SAFETY_BY_SW_SYN.TMC[18].CONTROL.R /* TMC Control */
#define D_IP_SAFETY_BY_SW_SYN_TMC_18_R0 D_IP_SAFETY_BY_SW_SYN.TMC[18].R0.R /* TMC R0 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_18_R1 D_IP_SAFETY_BY_SW_SYN.TMC[18].R1.R /* TMC R1 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_18_STATUS D_IP_SAFETY_BY_SW_SYN.TMC[18].STATUS.R /* TMC Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_18_TIMER D_IP_SAFETY_BY_SW_SYN.TMC[18].TIMER.R /* TMC Timer */
#define D_IP_SAFETY_BY_SW_SYN_TMC_19_CONFIG D_IP_SAFETY_BY_SW_SYN.TMC[19].CONFIG.R /* TMC Configuration */
#define D_IP_SAFETY_BY_SW_SYN_TMC_19_DISTANCE D_IP_SAFETY_BY_SW_SYN.TMC[19].DISTANCE.R /* TMC Distance */
#define D_IP_SAFETY_BY_SW_SYN_TMC_19_TIMEOUT D_IP_SAFETY_BY_SW_SYN.TMC[19].TIMEOUT.R /* TMC Timeout */
#define D_IP_SAFETY_BY_SW_SYN_TMC_19_CONTROL D_IP_SAFETY_BY_SW_SYN.TMC[19].CONTROL.R /* TMC Control */
#define D_IP_SAFETY_BY_SW_SYN_TMC_19_R0 D_IP_SAFETY_BY_SW_SYN.TMC[19].R0.R /* TMC R0 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_19_R1 D_IP_SAFETY_BY_SW_SYN.TMC[19].R1.R /* TMC R1 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_19_STATUS D_IP_SAFETY_BY_SW_SYN.TMC[19].STATUS.R /* TMC Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_19_TIMER D_IP_SAFETY_BY_SW_SYN.TMC[19].TIMER.R /* TMC Timer */
#define D_IP_SAFETY_BY_SW_SYN_TMC_20_CONFIG D_IP_SAFETY_BY_SW_SYN.TMC[20].CONFIG.R /* TMC Configuration */
#define D_IP_SAFETY_BY_SW_SYN_TMC_20_DISTANCE D_IP_SAFETY_BY_SW_SYN.TMC[20].DISTANCE.R /* TMC Distance */
#define D_IP_SAFETY_BY_SW_SYN_TMC_20_TIMEOUT D_IP_SAFETY_BY_SW_SYN.TMC[20].TIMEOUT.R /* TMC Timeout */
#define D_IP_SAFETY_BY_SW_SYN_TMC_20_CONTROL D_IP_SAFETY_BY_SW_SYN.TMC[20].CONTROL.R /* TMC Control */
#define D_IP_SAFETY_BY_SW_SYN_TMC_20_R0 D_IP_SAFETY_BY_SW_SYN.TMC[20].R0.R /* TMC R0 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_20_R1 D_IP_SAFETY_BY_SW_SYN.TMC[20].R1.R /* TMC R1 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_20_STATUS D_IP_SAFETY_BY_SW_SYN.TMC[20].STATUS.R /* TMC Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_20_TIMER D_IP_SAFETY_BY_SW_SYN.TMC[20].TIMER.R /* TMC Timer */
#define D_IP_SAFETY_BY_SW_SYN_TMC_21_CONFIG D_IP_SAFETY_BY_SW_SYN.TMC[21].CONFIG.R /* TMC Configuration */
#define D_IP_SAFETY_BY_SW_SYN_TMC_21_DISTANCE D_IP_SAFETY_BY_SW_SYN.TMC[21].DISTANCE.R /* TMC Distance */
#define D_IP_SAFETY_BY_SW_SYN_TMC_21_TIMEOUT D_IP_SAFETY_BY_SW_SYN.TMC[21].TIMEOUT.R /* TMC Timeout */
#define D_IP_SAFETY_BY_SW_SYN_TMC_21_CONTROL D_IP_SAFETY_BY_SW_SYN.TMC[21].CONTROL.R /* TMC Control */
#define D_IP_SAFETY_BY_SW_SYN_TMC_21_R0 D_IP_SAFETY_BY_SW_SYN.TMC[21].R0.R /* TMC R0 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_21_R1 D_IP_SAFETY_BY_SW_SYN.TMC[21].R1.R /* TMC R1 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_21_STATUS D_IP_SAFETY_BY_SW_SYN.TMC[21].STATUS.R /* TMC Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_21_TIMER D_IP_SAFETY_BY_SW_SYN.TMC[21].TIMER.R /* TMC Timer */
#define D_IP_SAFETY_BY_SW_SYN_TMC_22_CONFIG D_IP_SAFETY_BY_SW_SYN.TMC[22].CONFIG.R /* TMC Configuration */
#define D_IP_SAFETY_BY_SW_SYN_TMC_22_DISTANCE D_IP_SAFETY_BY_SW_SYN.TMC[22].DISTANCE.R /* TMC Distance */
#define D_IP_SAFETY_BY_SW_SYN_TMC_22_TIMEOUT D_IP_SAFETY_BY_SW_SYN.TMC[22].TIMEOUT.R /* TMC Timeout */
#define D_IP_SAFETY_BY_SW_SYN_TMC_22_CONTROL D_IP_SAFETY_BY_SW_SYN.TMC[22].CONTROL.R /* TMC Control */
#define D_IP_SAFETY_BY_SW_SYN_TMC_22_R0 D_IP_SAFETY_BY_SW_SYN.TMC[22].R0.R /* TMC R0 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_22_R1 D_IP_SAFETY_BY_SW_SYN.TMC[22].R1.R /* TMC R1 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_22_STATUS D_IP_SAFETY_BY_SW_SYN.TMC[22].STATUS.R /* TMC Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_22_TIMER D_IP_SAFETY_BY_SW_SYN.TMC[22].TIMER.R /* TMC Timer */
#define D_IP_SAFETY_BY_SW_SYN_TMC_23_CONFIG D_IP_SAFETY_BY_SW_SYN.TMC[23].CONFIG.R /* TMC Configuration */
#define D_IP_SAFETY_BY_SW_SYN_TMC_23_DISTANCE D_IP_SAFETY_BY_SW_SYN.TMC[23].DISTANCE.R /* TMC Distance */
#define D_IP_SAFETY_BY_SW_SYN_TMC_23_TIMEOUT D_IP_SAFETY_BY_SW_SYN.TMC[23].TIMEOUT.R /* TMC Timeout */
#define D_IP_SAFETY_BY_SW_SYN_TMC_23_CONTROL D_IP_SAFETY_BY_SW_SYN.TMC[23].CONTROL.R /* TMC Control */
#define D_IP_SAFETY_BY_SW_SYN_TMC_23_R0 D_IP_SAFETY_BY_SW_SYN.TMC[23].R0.R /* TMC R0 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_23_R1 D_IP_SAFETY_BY_SW_SYN.TMC[23].R1.R /* TMC R1 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_23_STATUS D_IP_SAFETY_BY_SW_SYN.TMC[23].STATUS.R /* TMC Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_23_TIMER D_IP_SAFETY_BY_SW_SYN.TMC[23].TIMER.R /* TMC Timer */
#define D_IP_SAFETY_BY_SW_SYN_TMC_24_CONFIG D_IP_SAFETY_BY_SW_SYN.TMC[24].CONFIG.R /* TMC Configuration */
#define D_IP_SAFETY_BY_SW_SYN_TMC_24_DISTANCE D_IP_SAFETY_BY_SW_SYN.TMC[24].DISTANCE.R /* TMC Distance */
#define D_IP_SAFETY_BY_SW_SYN_TMC_24_TIMEOUT D_IP_SAFETY_BY_SW_SYN.TMC[24].TIMEOUT.R /* TMC Timeout */
#define D_IP_SAFETY_BY_SW_SYN_TMC_24_CONTROL D_IP_SAFETY_BY_SW_SYN.TMC[24].CONTROL.R /* TMC Control */
#define D_IP_SAFETY_BY_SW_SYN_TMC_24_R0 D_IP_SAFETY_BY_SW_SYN.TMC[24].R0.R /* TMC R0 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_24_R1 D_IP_SAFETY_BY_SW_SYN.TMC[24].R1.R /* TMC R1 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_24_STATUS D_IP_SAFETY_BY_SW_SYN.TMC[24].STATUS.R /* TMC Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_24_TIMER D_IP_SAFETY_BY_SW_SYN.TMC[24].TIMER.R /* TMC Timer */
#define D_IP_SAFETY_BY_SW_SYN_TMC_25_CONFIG D_IP_SAFETY_BY_SW_SYN.TMC[25].CONFIG.R /* TMC Configuration */
#define D_IP_SAFETY_BY_SW_SYN_TMC_25_DISTANCE D_IP_SAFETY_BY_SW_SYN.TMC[25].DISTANCE.R /* TMC Distance */
#define D_IP_SAFETY_BY_SW_SYN_TMC_25_TIMEOUT D_IP_SAFETY_BY_SW_SYN.TMC[25].TIMEOUT.R /* TMC Timeout */
#define D_IP_SAFETY_BY_SW_SYN_TMC_25_CONTROL D_IP_SAFETY_BY_SW_SYN.TMC[25].CONTROL.R /* TMC Control */
#define D_IP_SAFETY_BY_SW_SYN_TMC_25_R0 D_IP_SAFETY_BY_SW_SYN.TMC[25].R0.R /* TMC R0 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_25_R1 D_IP_SAFETY_BY_SW_SYN.TMC[25].R1.R /* TMC R1 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_25_STATUS D_IP_SAFETY_BY_SW_SYN.TMC[25].STATUS.R /* TMC Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_25_TIMER D_IP_SAFETY_BY_SW_SYN.TMC[25].TIMER.R /* TMC Timer */
#define D_IP_SAFETY_BY_SW_SYN_TMC_26_CONFIG D_IP_SAFETY_BY_SW_SYN.TMC[26].CONFIG.R /* TMC Configuration */
#define D_IP_SAFETY_BY_SW_SYN_TMC_26_DISTANCE D_IP_SAFETY_BY_SW_SYN.TMC[26].DISTANCE.R /* TMC Distance */
#define D_IP_SAFETY_BY_SW_SYN_TMC_26_TIMEOUT D_IP_SAFETY_BY_SW_SYN.TMC[26].TIMEOUT.R /* TMC Timeout */
#define D_IP_SAFETY_BY_SW_SYN_TMC_26_CONTROL D_IP_SAFETY_BY_SW_SYN.TMC[26].CONTROL.R /* TMC Control */
#define D_IP_SAFETY_BY_SW_SYN_TMC_26_R0 D_IP_SAFETY_BY_SW_SYN.TMC[26].R0.R /* TMC R0 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_26_R1 D_IP_SAFETY_BY_SW_SYN.TMC[26].R1.R /* TMC R1 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_26_STATUS D_IP_SAFETY_BY_SW_SYN.TMC[26].STATUS.R /* TMC Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_26_TIMER D_IP_SAFETY_BY_SW_SYN.TMC[26].TIMER.R /* TMC Timer */
#define D_IP_SAFETY_BY_SW_SYN_TMC_27_CONFIG D_IP_SAFETY_BY_SW_SYN.TMC[27].CONFIG.R /* TMC Configuration */
#define D_IP_SAFETY_BY_SW_SYN_TMC_27_DISTANCE D_IP_SAFETY_BY_SW_SYN.TMC[27].DISTANCE.R /* TMC Distance */
#define D_IP_SAFETY_BY_SW_SYN_TMC_27_TIMEOUT D_IP_SAFETY_BY_SW_SYN.TMC[27].TIMEOUT.R /* TMC Timeout */
#define D_IP_SAFETY_BY_SW_SYN_TMC_27_CONTROL D_IP_SAFETY_BY_SW_SYN.TMC[27].CONTROL.R /* TMC Control */
#define D_IP_SAFETY_BY_SW_SYN_TMC_27_R0 D_IP_SAFETY_BY_SW_SYN.TMC[27].R0.R /* TMC R0 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_27_R1 D_IP_SAFETY_BY_SW_SYN.TMC[27].R1.R /* TMC R1 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_27_STATUS D_IP_SAFETY_BY_SW_SYN.TMC[27].STATUS.R /* TMC Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_27_TIMER D_IP_SAFETY_BY_SW_SYN.TMC[27].TIMER.R /* TMC Timer */
#define D_IP_SAFETY_BY_SW_SYN_TMC_28_CONFIG D_IP_SAFETY_BY_SW_SYN.TMC[28].CONFIG.R /* TMC Configuration */
#define D_IP_SAFETY_BY_SW_SYN_TMC_28_DISTANCE D_IP_SAFETY_BY_SW_SYN.TMC[28].DISTANCE.R /* TMC Distance */
#define D_IP_SAFETY_BY_SW_SYN_TMC_28_TIMEOUT D_IP_SAFETY_BY_SW_SYN.TMC[28].TIMEOUT.R /* TMC Timeout */
#define D_IP_SAFETY_BY_SW_SYN_TMC_28_CONTROL D_IP_SAFETY_BY_SW_SYN.TMC[28].CONTROL.R /* TMC Control */
#define D_IP_SAFETY_BY_SW_SYN_TMC_28_R0 D_IP_SAFETY_BY_SW_SYN.TMC[28].R0.R /* TMC R0 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_28_R1 D_IP_SAFETY_BY_SW_SYN.TMC[28].R1.R /* TMC R1 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_28_STATUS D_IP_SAFETY_BY_SW_SYN.TMC[28].STATUS.R /* TMC Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_28_TIMER D_IP_SAFETY_BY_SW_SYN.TMC[28].TIMER.R /* TMC Timer */
#define D_IP_SAFETY_BY_SW_SYN_TMC_29_CONFIG D_IP_SAFETY_BY_SW_SYN.TMC[29].CONFIG.R /* TMC Configuration */
#define D_IP_SAFETY_BY_SW_SYN_TMC_29_DISTANCE D_IP_SAFETY_BY_SW_SYN.TMC[29].DISTANCE.R /* TMC Distance */
#define D_IP_SAFETY_BY_SW_SYN_TMC_29_TIMEOUT D_IP_SAFETY_BY_SW_SYN.TMC[29].TIMEOUT.R /* TMC Timeout */
#define D_IP_SAFETY_BY_SW_SYN_TMC_29_CONTROL D_IP_SAFETY_BY_SW_SYN.TMC[29].CONTROL.R /* TMC Control */
#define D_IP_SAFETY_BY_SW_SYN_TMC_29_R0 D_IP_SAFETY_BY_SW_SYN.TMC[29].R0.R /* TMC R0 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_29_R1 D_IP_SAFETY_BY_SW_SYN.TMC[29].R1.R /* TMC R1 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_29_STATUS D_IP_SAFETY_BY_SW_SYN.TMC[29].STATUS.R /* TMC Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_29_TIMER D_IP_SAFETY_BY_SW_SYN.TMC[29].TIMER.R /* TMC Timer */
#define D_IP_SAFETY_BY_SW_SYN_TMC_30_CONFIG D_IP_SAFETY_BY_SW_SYN.TMC[30].CONFIG.R /* TMC Configuration */
#define D_IP_SAFETY_BY_SW_SYN_TMC_30_DISTANCE D_IP_SAFETY_BY_SW_SYN.TMC[30].DISTANCE.R /* TMC Distance */
#define D_IP_SAFETY_BY_SW_SYN_TMC_30_TIMEOUT D_IP_SAFETY_BY_SW_SYN.TMC[30].TIMEOUT.R /* TMC Timeout */
#define D_IP_SAFETY_BY_SW_SYN_TMC_30_CONTROL D_IP_SAFETY_BY_SW_SYN.TMC[30].CONTROL.R /* TMC Control */
#define D_IP_SAFETY_BY_SW_SYN_TMC_30_R0 D_IP_SAFETY_BY_SW_SYN.TMC[30].R0.R /* TMC R0 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_30_R1 D_IP_SAFETY_BY_SW_SYN.TMC[30].R1.R /* TMC R1 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_30_STATUS D_IP_SAFETY_BY_SW_SYN.TMC[30].STATUS.R /* TMC Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_30_TIMER D_IP_SAFETY_BY_SW_SYN.TMC[30].TIMER.R /* TMC Timer */
#define D_IP_SAFETY_BY_SW_SYN_TMC_31_CONFIG D_IP_SAFETY_BY_SW_SYN.TMC[31].CONFIG.R /* TMC Configuration */
#define D_IP_SAFETY_BY_SW_SYN_TMC_31_DISTANCE D_IP_SAFETY_BY_SW_SYN.TMC[31].DISTANCE.R /* TMC Distance */
#define D_IP_SAFETY_BY_SW_SYN_TMC_31_TIMEOUT D_IP_SAFETY_BY_SW_SYN.TMC[31].TIMEOUT.R /* TMC Timeout */
#define D_IP_SAFETY_BY_SW_SYN_TMC_31_CONTROL D_IP_SAFETY_BY_SW_SYN.TMC[31].CONTROL.R /* TMC Control */
#define D_IP_SAFETY_BY_SW_SYN_TMC_31_R0 D_IP_SAFETY_BY_SW_SYN.TMC[31].R0.R /* TMC R0 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_31_R1 D_IP_SAFETY_BY_SW_SYN.TMC[31].R1.R /* TMC R1 Data */
#define D_IP_SAFETY_BY_SW_SYN_TMC_31_STATUS D_IP_SAFETY_BY_SW_SYN.TMC[31].STATUS.R /* TMC Status */
#define D_IP_SAFETY_BY_SW_SYN_TMC_31_TIMER D_IP_SAFETY_BY_SW_SYN.TMC[31].TIMER.R /* TMC Timer */
#define D_IP_SAFETY_BY_SW_SYN_TMWDP_CONFIG_ADDR D_IP_SAFETY_BY_SW_SYN.TMWDP_CONFIG_ADDR.R /* TMWDP Configuration Address */
#define D_IP_SAFETY_BY_SW_SYN_TMWDP_CONTROL D_IP_SAFETY_BY_SW_SYN.TMWDP_CONTROL.R /* TMWDP Control */
#define D_IP_SAFETY_BY_SW_SYN_TMWDP_STATUS D_IP_SAFETY_BY_SW_SYN.TMWDP_STATUS.R /* TMWDP Status */
#define D_IP_SAFETY_BY_SW_SYN_TMWDP_AUTOMATA_STATUS D_IP_SAFETY_BY_SW_SYN.TMWDP_AUTOMATA_STATUS.R /* TMWDP Automata Status */
#define D_IP_SAFETY_BY_SW_SYN_TMWDP_AUTOMATA_ILLGL_TRANS D_IP_SAFETY_BY_SW_SYN.TMWDP_AUTOMATA_ILLGL_TRANS.R /* TMWDP Automata Illegal Transition */
#define D_IP_SAFETY_BY_SW_SYN_TMWDP_AUTOMATA_TIME_VIOLATION D_IP_SAFETY_BY_SW_SYN.TMWDP_AUTOMATA_TIME_VIOLATION.R /* TMWDP Automata Time Violation */
#define D_IP_SAFETY_BY_SW_SYN_AUT_0_STATUS D_IP_SAFETY_BY_SW_SYN.AUT[0].STATUS.R /* TMWDP Automaton Status */
#define D_IP_SAFETY_BY_SW_SYN_AUT_0_PRGS_REQ D_IP_SAFETY_BY_SW_SYN.AUT[0].PRGS_REQ.R /* TMWDP Automaton Progress Request */
#define D_IP_SAFETY_BY_SW_SYN_AUT_1_STATUS D_IP_SAFETY_BY_SW_SYN.AUT[1].STATUS.R /* TMWDP Automaton Status */
#define D_IP_SAFETY_BY_SW_SYN_AUT_1_PRGS_REQ D_IP_SAFETY_BY_SW_SYN.AUT[1].PRGS_REQ.R /* TMWDP Automaton Progress Request */
#define D_IP_SAFETY_BY_SW_SYN_AUT_2_STATUS D_IP_SAFETY_BY_SW_SYN.AUT[2].STATUS.R /* TMWDP Automaton Status */
#define D_IP_SAFETY_BY_SW_SYN_AUT_2_PRGS_REQ D_IP_SAFETY_BY_SW_SYN.AUT[2].PRGS_REQ.R /* TMWDP Automaton Progress Request */
#define D_IP_SAFETY_BY_SW_SYN_AUT_3_STATUS D_IP_SAFETY_BY_SW_SYN.AUT[3].STATUS.R /* TMWDP Automaton Status */
#define D_IP_SAFETY_BY_SW_SYN_AUT_3_PRGS_REQ D_IP_SAFETY_BY_SW_SYN.AUT[3].PRGS_REQ.R /* TMWDP Automaton Progress Request */
#define D_IP_SAFETY_BY_SW_SYN_AUT_4_STATUS D_IP_SAFETY_BY_SW_SYN.AUT[4].STATUS.R /* TMWDP Automaton Status */
#define D_IP_SAFETY_BY_SW_SYN_AUT_4_PRGS_REQ D_IP_SAFETY_BY_SW_SYN.AUT[4].PRGS_REQ.R /* TMWDP Automaton Progress Request */
#define D_IP_SAFETY_BY_SW_SYN_AUT_5_STATUS D_IP_SAFETY_BY_SW_SYN.AUT[5].STATUS.R /* TMWDP Automaton Status */
#define D_IP_SAFETY_BY_SW_SYN_AUT_5_PRGS_REQ D_IP_SAFETY_BY_SW_SYN.AUT[5].PRGS_REQ.R /* TMWDP Automaton Progress Request */
#define D_IP_SAFETY_BY_SW_SYN_AUT_6_STATUS D_IP_SAFETY_BY_SW_SYN.AUT[6].STATUS.R /* TMWDP Automaton Status */
#define D_IP_SAFETY_BY_SW_SYN_AUT_6_PRGS_REQ D_IP_SAFETY_BY_SW_SYN.AUT[6].PRGS_REQ.R /* TMWDP Automaton Progress Request */
#define D_IP_SAFETY_BY_SW_SYN_AUT_7_STATUS D_IP_SAFETY_BY_SW_SYN.AUT[7].STATUS.R /* TMWDP Automaton Status */
#define D_IP_SAFETY_BY_SW_SYN_AUT_7_PRGS_REQ D_IP_SAFETY_BY_SW_SYN.AUT[7].PRGS_REQ.R /* TMWDP Automaton Progress Request */
#define D_IP_SAFETY_BY_SW_SYN_AUT_8_STATUS D_IP_SAFETY_BY_SW_SYN.AUT[8].STATUS.R /* TMWDP Automaton Status */
#define D_IP_SAFETY_BY_SW_SYN_AUT_8_PRGS_REQ D_IP_SAFETY_BY_SW_SYN.AUT[8].PRGS_REQ.R /* TMWDP Automaton Progress Request */
#define D_IP_SAFETY_BY_SW_SYN_AUT_9_STATUS D_IP_SAFETY_BY_SW_SYN.AUT[9].STATUS.R /* TMWDP Automaton Status */
#define D_IP_SAFETY_BY_SW_SYN_AUT_9_PRGS_REQ D_IP_SAFETY_BY_SW_SYN.AUT[9].PRGS_REQ.R /* TMWDP Automaton Progress Request */
#define D_IP_SAFETY_BY_SW_SYN_AUT_10_STATUS D_IP_SAFETY_BY_SW_SYN.AUT[10].STATUS.R /* TMWDP Automaton Status */
#define D_IP_SAFETY_BY_SW_SYN_AUT_10_PRGS_REQ D_IP_SAFETY_BY_SW_SYN.AUT[10].PRGS_REQ.R /* TMWDP Automaton Progress Request */
#define D_IP_SAFETY_BY_SW_SYN_AUT_11_STATUS D_IP_SAFETY_BY_SW_SYN.AUT[11].STATUS.R /* TMWDP Automaton Status */
#define D_IP_SAFETY_BY_SW_SYN_AUT_11_PRGS_REQ D_IP_SAFETY_BY_SW_SYN.AUT[11].PRGS_REQ.R /* TMWDP Automaton Progress Request */
#define D_IP_SAFETY_BY_SW_SYN_AUT_12_STATUS D_IP_SAFETY_BY_SW_SYN.AUT[12].STATUS.R /* TMWDP Automaton Status */
#define D_IP_SAFETY_BY_SW_SYN_AUT_12_PRGS_REQ D_IP_SAFETY_BY_SW_SYN.AUT[12].PRGS_REQ.R /* TMWDP Automaton Progress Request */
#define D_IP_SAFETY_BY_SW_SYN_AUT_13_STATUS D_IP_SAFETY_BY_SW_SYN.AUT[13].STATUS.R /* TMWDP Automaton Status */
#define D_IP_SAFETY_BY_SW_SYN_AUT_13_PRGS_REQ D_IP_SAFETY_BY_SW_SYN.AUT[13].PRGS_REQ.R /* TMWDP Automaton Progress Request */
#define D_IP_SAFETY_BY_SW_SYN_AUT_14_STATUS D_IP_SAFETY_BY_SW_SYN.AUT[14].STATUS.R /* TMWDP Automaton Status */
#define D_IP_SAFETY_BY_SW_SYN_AUT_14_PRGS_REQ D_IP_SAFETY_BY_SW_SYN.AUT[14].PRGS_REQ.R /* TMWDP Automaton Progress Request */
#define D_IP_SAFETY_BY_SW_SYN_AUT_15_STATUS D_IP_SAFETY_BY_SW_SYN.AUT[15].STATUS.R /* TMWDP Automaton Status */
#define D_IP_SAFETY_BY_SW_SYN_AUT_15_PRGS_REQ D_IP_SAFETY_BY_SW_SYN.AUT[15].PRGS_REQ.R /* TMWDP Automaton Progress Request */
#define D_IP_SAFETY_BY_SW_SYN_AUT_16_STATUS D_IP_SAFETY_BY_SW_SYN.AUT[16].STATUS.R /* TMWDP Automaton Status */
#define D_IP_SAFETY_BY_SW_SYN_AUT_16_PRGS_REQ D_IP_SAFETY_BY_SW_SYN.AUT[16].PRGS_REQ.R /* TMWDP Automaton Progress Request */
#define D_IP_SAFETY_BY_SW_SYN_AUT_17_STATUS D_IP_SAFETY_BY_SW_SYN.AUT[17].STATUS.R /* TMWDP Automaton Status */
#define D_IP_SAFETY_BY_SW_SYN_AUT_17_PRGS_REQ D_IP_SAFETY_BY_SW_SYN.AUT[17].PRGS_REQ.R /* TMWDP Automaton Progress Request */
#define D_IP_SAFETY_BY_SW_SYN_AUT_18_STATUS D_IP_SAFETY_BY_SW_SYN.AUT[18].STATUS.R /* TMWDP Automaton Status */
#define D_IP_SAFETY_BY_SW_SYN_AUT_18_PRGS_REQ D_IP_SAFETY_BY_SW_SYN.AUT[18].PRGS_REQ.R /* TMWDP Automaton Progress Request */
#define D_IP_SAFETY_BY_SW_SYN_AUT_19_STATUS D_IP_SAFETY_BY_SW_SYN.AUT[19].STATUS.R /* TMWDP Automaton Status */
#define D_IP_SAFETY_BY_SW_SYN_AUT_19_PRGS_REQ D_IP_SAFETY_BY_SW_SYN.AUT[19].PRGS_REQ.R /* TMWDP Automaton Progress Request */
#define D_IP_SAFETY_BY_SW_SYN_AUT_20_STATUS D_IP_SAFETY_BY_SW_SYN.AUT[20].STATUS.R /* TMWDP Automaton Status */
#define D_IP_SAFETY_BY_SW_SYN_AUT_20_PRGS_REQ D_IP_SAFETY_BY_SW_SYN.AUT[20].PRGS_REQ.R /* TMWDP Automaton Progress Request */
#define D_IP_SAFETY_BY_SW_SYN_AUT_21_STATUS D_IP_SAFETY_BY_SW_SYN.AUT[21].STATUS.R /* TMWDP Automaton Status */
#define D_IP_SAFETY_BY_SW_SYN_AUT_21_PRGS_REQ D_IP_SAFETY_BY_SW_SYN.AUT[21].PRGS_REQ.R /* TMWDP Automaton Progress Request */
#define D_IP_SAFETY_BY_SW_SYN_AUT_22_STATUS D_IP_SAFETY_BY_SW_SYN.AUT[22].STATUS.R /* TMWDP Automaton Status */
#define D_IP_SAFETY_BY_SW_SYN_AUT_22_PRGS_REQ D_IP_SAFETY_BY_SW_SYN.AUT[22].PRGS_REQ.R /* TMWDP Automaton Progress Request */
#define D_IP_SAFETY_BY_SW_SYN_AUT_23_STATUS D_IP_SAFETY_BY_SW_SYN.AUT[23].STATUS.R /* TMWDP Automaton Status */
#define D_IP_SAFETY_BY_SW_SYN_AUT_23_PRGS_REQ D_IP_SAFETY_BY_SW_SYN.AUT[23].PRGS_REQ.R /* TMWDP Automaton Progress Request */
#define D_IP_SAFETY_BY_SW_SYN_AUT_24_STATUS D_IP_SAFETY_BY_SW_SYN.AUT[24].STATUS.R /* TMWDP Automaton Status */
#define D_IP_SAFETY_BY_SW_SYN_AUT_24_PRGS_REQ D_IP_SAFETY_BY_SW_SYN.AUT[24].PRGS_REQ.R /* TMWDP Automaton Progress Request */
#define D_IP_SAFETY_BY_SW_SYN_AUT_25_STATUS D_IP_SAFETY_BY_SW_SYN.AUT[25].STATUS.R /* TMWDP Automaton Status */
#define D_IP_SAFETY_BY_SW_SYN_AUT_25_PRGS_REQ D_IP_SAFETY_BY_SW_SYN.AUT[25].PRGS_REQ.R /* TMWDP Automaton Progress Request */
#define D_IP_SAFETY_BY_SW_SYN_AUT_26_STATUS D_IP_SAFETY_BY_SW_SYN.AUT[26].STATUS.R /* TMWDP Automaton Status */
#define D_IP_SAFETY_BY_SW_SYN_AUT_26_PRGS_REQ D_IP_SAFETY_BY_SW_SYN.AUT[26].PRGS_REQ.R /* TMWDP Automaton Progress Request */
#define D_IP_SAFETY_BY_SW_SYN_AUT_27_STATUS D_IP_SAFETY_BY_SW_SYN.AUT[27].STATUS.R /* TMWDP Automaton Status */
#define D_IP_SAFETY_BY_SW_SYN_AUT_27_PRGS_REQ D_IP_SAFETY_BY_SW_SYN.AUT[27].PRGS_REQ.R /* TMWDP Automaton Progress Request */
#define D_IP_SAFETY_BY_SW_SYN_AUT_28_STATUS D_IP_SAFETY_BY_SW_SYN.AUT[28].STATUS.R /* TMWDP Automaton Status */
#define D_IP_SAFETY_BY_SW_SYN_AUT_28_PRGS_REQ D_IP_SAFETY_BY_SW_SYN.AUT[28].PRGS_REQ.R /* TMWDP Automaton Progress Request */
#define D_IP_SAFETY_BY_SW_SYN_AUT_29_STATUS D_IP_SAFETY_BY_SW_SYN.AUT[29].STATUS.R /* TMWDP Automaton Status */
#define D_IP_SAFETY_BY_SW_SYN_AUT_29_PRGS_REQ D_IP_SAFETY_BY_SW_SYN.AUT[29].PRGS_REQ.R /* TMWDP Automaton Progress Request */
#define D_IP_SAFETY_BY_SW_SYN_AUT_30_STATUS D_IP_SAFETY_BY_SW_SYN.AUT[30].STATUS.R /* TMWDP Automaton Status */
#define D_IP_SAFETY_BY_SW_SYN_AUT_30_PRGS_REQ D_IP_SAFETY_BY_SW_SYN.AUT[30].PRGS_REQ.R /* TMWDP Automaton Progress Request */
#define D_IP_SAFETY_BY_SW_SYN_AUT_31_STATUS D_IP_SAFETY_BY_SW_SYN.AUT[31].STATUS.R /* TMWDP Automaton Status */
#define D_IP_SAFETY_BY_SW_SYN_AUT_31_PRGS_REQ D_IP_SAFETY_BY_SW_SYN.AUT[31].PRGS_REQ.R /* TMWDP Automaton Progress Request */
#define D_IP_SAFETY_BY_SW_SYN_TC_ID D_IP_SAFETY_BY_SW_SYN.TC_ID.R /* TMWDP Core Domain ID */

/* SECURITY */
#define SECURITY_CC_EXT_DBGSTAT SECURITY_CC.EXT_DBGSTAT.R  /* External Debugger Status */
#define SECURITY_CC_HSE_GPR0 SECURITY_CC.HSE_GPR0.R        /* HSE GPR 0 */
#define SECURITY_CC_HSE_GPR1 SECURITY_CC.HSE_GPR1.R        /* HSE GPR n */
#define SECURITY_CC_HSE_GPR2 SECURITY_CC.HSE_GPR2.R        /* HSE GPR n */
#define SECURITY_CC_HSE_GPR3 SECURITY_CC.HSE_GPR[0].R      /* HSE GPR n */
#define SECURITY_CC_HSE_GPR4 SECURITY_CC.HSE_GPR[1].R      /* HSE GPR n */
#define SECURITY_CC_HSE_GPR5 SECURITY_CC.HSE_GPR[2].R      /* HSE GPR n */
#define SECURITY_CC_HSE_GPR6 SECURITY_CC.HSE_GPR[3].R      /* HSE GPR n */
#define SECURITY_CC_HSE_GPR7 SECURITY_CC.HSE_GPR[4].R      /* HSE GPR n */
#define SECURITY_CC_HSE_GPR8 SECURITY_CC.HSE_GPR[5].R      /* HSE GPR n */
#define SECURITY_CC_HSE_GPR9 SECURITY_CC.HSE_GPR[6].R      /* HSE GPR n */
#define SECURITY_CC_HSE_GPR10 SECURITY_CC.HSE_GPR[7].R     /* HSE GPR n */
#define SECURITY_CC_HSE_GPR11 SECURITY_CC.HSE_GPR[8].R     /* HSE GPR n */

/* SELFTEST_GPR */
#define SELFTEST_GPR_LBIST_Prog_Reg SELFTEST_GPR.LBIST_PROG_REG.R /* LBIST Program */

/* SELFTEST_GPR_TOP */
#define SELFTEST_GPR_TOP_Reset_Domain_Selftest_Enable_Register SELFTEST_GPR_TOP.RESET_DOMAIN_SELFTEST_ENABLE_REGISTER.R /* Reset Domain Self-test Enable */
#define SELFTEST_GPR_TOP_Reset_Domain_Selftest_Enable_Status_Register SELFTEST_GPR_TOP.RESET_DOMAIN_SELFTEST_ENABLE_STATUS_REGISTER.R /* Reset Domain Self-test Enable Status */

/* SEMA42 */
#define SEMA42_GATE3         SEMA42.GATE[0].R              /* Gate Register */
#define SEMA42_GATE2         SEMA42.GATE[1].R              /* Gate Register */
#define SEMA42_GATE1         SEMA42.GATE[2].R              /* Gate Register */
#define SEMA42_GATE0         SEMA42.GATE[3].R              /* Gate Register */
#define SEMA42_GATE7         SEMA42.GATE[4].R              /* Gate Register */
#define SEMA42_GATE6         SEMA42.GATE[5].R              /* Gate Register */
#define SEMA42_GATE5         SEMA42.GATE[6].R              /* Gate Register */
#define SEMA42_GATE4         SEMA42.GATE[7].R              /* Gate Register */
#define SEMA42_GATE11        SEMA42.GATE[8].R              /* Gate Register */
#define SEMA42_GATE10        SEMA42.GATE[9].R              /* Gate Register */
#define SEMA42_GATE9         SEMA42.GATE[10].R             /* Gate Register */
#define SEMA42_GATE8         SEMA42.GATE[11].R             /* Gate Register */
#define SEMA42_GATE15        SEMA42.GATE[12].R             /* Gate Register */
#define SEMA42_GATE14        SEMA42.GATE[13].R             /* Gate Register */
#define SEMA42_GATE13        SEMA42.GATE[14].R             /* Gate Register */
#define SEMA42_GATE12        SEMA42.GATE[15].R             /* Gate Register */
#define SEMA42_RSTGT_R       SEMA42.RSTGT.R.R              /* Reset Gate Read */
#define SEMA42_RSTGT_W       SEMA42.RSTGT.W.R              /* Reset Gate Write */

/* SERDES_0_GPR */
#define SERDES_0_GPR_PCIE_Config_0 SERDES_0_GPR.PCIE_CONFIG_0.R /* Config_0_Register */

/* SIUL2_0 */
#define SIUL2_0_MIDR1        SIUL2_0.MIDR1.R               /* SIUL2 MCU ID Register #1 */
#define SIUL2_0_MIDR2        SIUL2_0.MIDR2.R               /* SIUL2 MCU ID Register #2 */
#define SIUL2_0_DISR0        SIUL2_0.DISR0.R               /* SIUL2 DMA/Interrupt Status Flag Register0 */
#define SIUL2_0_DIRER0       SIUL2_0.DIRER0.R              /* SIUL2 DMA/Interrupt Request Enable Register0 */
#define SIUL2_0_DIRSR0       SIUL2_0.DIRSR0.R              /* SIUL2 DMA/Interrupt Request Select Register0 */
#define SIUL2_0_IREER0       SIUL2_0.IREER0.R              /* SIUL2 Interrupt Rising-Edge Event Enable Register 0 */
#define SIUL2_0_IFEER0       SIUL2_0.IFEER0.R              /* SIUL2 Interrupt Falling-Edge Event Enable Register 0 */
#define SIUL2_0_IFER0        SIUL2_0.IFER0.R               /* SIUL2 Interrupt Filter Enable Register 0 */
#define SIUL2_0_IFMCR0       SIUL2_0.IFMCR[0].R            /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_0_IFMCR1       SIUL2_0.IFMCR[1].R            /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_0_IFMCR2       SIUL2_0.IFMCR[2].R            /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_0_IFMCR3       SIUL2_0.IFMCR[3].R            /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_0_IFMCR4       SIUL2_0.IFMCR[4].R            /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_0_IFMCR5       SIUL2_0.IFMCR[5].R            /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_0_IFMCR6       SIUL2_0.IFMCR[6].R            /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_0_IFMCR7       SIUL2_0.IFMCR[7].R            /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_0_IFMCR8       SIUL2_0.IFMCR[8].R            /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_0_IFMCR9       SIUL2_0.IFMCR[9].R            /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_0_IFMCR10      SIUL2_0.IFMCR[10].R           /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_0_IFMCR11      SIUL2_0.IFMCR[11].R           /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_0_IFCPR        SIUL2_0.IFCPR.R               /* SIUL2 Interrupt Filter Clock Prescaler Register */
#define SIUL2_0_MSCR0        SIUL2_0.MSCR[0].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR1        SIUL2_0.MSCR[1].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR2        SIUL2_0.MSCR[2].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR3        SIUL2_0.MSCR[3].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR4        SIUL2_0.MSCR[4].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR5        SIUL2_0.MSCR[5].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR6        SIUL2_0.MSCR[6].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR7        SIUL2_0.MSCR[7].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR8        SIUL2_0.MSCR[8].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR9        SIUL2_0.MSCR[9].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR10       SIUL2_0.MSCR[10].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR11       SIUL2_0.MSCR[11].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR12       SIUL2_0.MSCR[12].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR13       SIUL2_0.MSCR[13].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR14       SIUL2_0.MSCR[14].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR15       SIUL2_0.MSCR[15].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR16       SIUL2_0.MSCR[16].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR17       SIUL2_0.MSCR[17].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR18       SIUL2_0.MSCR[18].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR19       SIUL2_0.MSCR[19].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR20       SIUL2_0.MSCR[20].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR21       SIUL2_0.MSCR[21].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR22       SIUL2_0.MSCR[22].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR23       SIUL2_0.MSCR[23].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR24       SIUL2_0.MSCR[24].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR25       SIUL2_0.MSCR[25].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR26       SIUL2_0.MSCR[26].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR27       SIUL2_0.MSCR[27].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR28       SIUL2_0.MSCR[28].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR29       SIUL2_0.MSCR[29].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR30       SIUL2_0.MSCR[30].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR31       SIUL2_0.MSCR[31].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR32       SIUL2_0.MSCR[32].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR33       SIUL2_0.MSCR[33].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR34       SIUL2_0.MSCR[34].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR35       SIUL2_0.MSCR[35].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR36       SIUL2_0.MSCR[36].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR37       SIUL2_0.MSCR[37].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR38       SIUL2_0.MSCR[38].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR39       SIUL2_0.MSCR[39].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR40       SIUL2_0.MSCR[40].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR41       SIUL2_0.MSCR[41].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR42       SIUL2_0.MSCR[42].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR43       SIUL2_0.MSCR[43].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR44       SIUL2_0.MSCR[44].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR45       SIUL2_0.MSCR[45].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR46       SIUL2_0.MSCR[46].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR47       SIUL2_0.MSCR[47].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR48       SIUL2_0.MSCR[48].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR49       SIUL2_0.MSCR[49].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR50       SIUL2_0.MSCR[50].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR51       SIUL2_0.MSCR[51].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR52       SIUL2_0.MSCR[52].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR53       SIUL2_0.MSCR[53].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR54       SIUL2_0.MSCR[54].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR55       SIUL2_0.MSCR[55].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR56       SIUL2_0.MSCR[56].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR57       SIUL2_0.MSCR[57].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR58       SIUL2_0.MSCR[58].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR59       SIUL2_0.MSCR[59].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR60       SIUL2_0.MSCR[60].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR61       SIUL2_0.MSCR[61].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR62       SIUL2_0.MSCR[62].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR63       SIUL2_0.MSCR[63].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR64       SIUL2_0.MSCR[64].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR65       SIUL2_0.MSCR[65].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR66       SIUL2_0.MSCR[66].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR67       SIUL2_0.MSCR[67].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR68       SIUL2_0.MSCR[68].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR69       SIUL2_0.MSCR[69].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR70       SIUL2_0.MSCR[70].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR71       SIUL2_0.MSCR[71].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR72       SIUL2_0.MSCR[72].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR73       SIUL2_0.MSCR[73].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR74       SIUL2_0.MSCR[74].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR75       SIUL2_0.MSCR[75].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR76       SIUL2_0.MSCR[76].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR77       SIUL2_0.MSCR[77].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR78       SIUL2_0.MSCR[78].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR79       SIUL2_0.MSCR[79].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR80       SIUL2_0.MSCR[80].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR81       SIUL2_0.MSCR[81].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR82       SIUL2_0.MSCR[82].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR83       SIUL2_0.MSCR[83].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR84       SIUL2_0.MSCR[84].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR85       SIUL2_0.MSCR[85].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR86       SIUL2_0.MSCR[86].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR87       SIUL2_0.MSCR[87].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR88       SIUL2_0.MSCR[88].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR89       SIUL2_0.MSCR[89].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR90       SIUL2_0.MSCR[90].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR91       SIUL2_0.MSCR[91].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR92       SIUL2_0.MSCR[92].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR93       SIUL2_0.MSCR[93].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR94       SIUL2_0.MSCR[94].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR95       SIUL2_0.MSCR[95].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR96       SIUL2_0.MSCR[96].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR97       SIUL2_0.MSCR[97].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR98       SIUL2_0.MSCR[98].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR99       SIUL2_0.MSCR[99].R            /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR100      SIUL2_0.MSCR[100].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_MSCR101      SIUL2_0.MSCR[101].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR0        SIUL2_0.IMCR[0].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR1        SIUL2_0.IMCR[1].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR3        SIUL2_0.IMCR[3].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR4        SIUL2_0.IMCR[4].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR5        SIUL2_0.IMCR[5].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR6        SIUL2_0.IMCR[6].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR7        SIUL2_0.IMCR[7].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR8        SIUL2_0.IMCR[8].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR9        SIUL2_0.IMCR[9].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR10       SIUL2_0.IMCR[10].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR11       SIUL2_0.IMCR[11].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR12       SIUL2_0.IMCR[12].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR13       SIUL2_0.IMCR[13].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR14       SIUL2_0.IMCR[14].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR15       SIUL2_0.IMCR[15].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR16       SIUL2_0.IMCR[16].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR17       SIUL2_0.IMCR[17].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR18       SIUL2_0.IMCR[18].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR19       SIUL2_0.IMCR[19].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR20       SIUL2_0.IMCR[20].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR21       SIUL2_0.IMCR[21].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR22       SIUL2_0.IMCR[22].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR23       SIUL2_0.IMCR[23].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR24       SIUL2_0.IMCR[24].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR25       SIUL2_0.IMCR[25].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR26       SIUL2_0.IMCR[26].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR27       SIUL2_0.IMCR[27].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR28       SIUL2_0.IMCR[28].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR29       SIUL2_0.IMCR[29].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR30       SIUL2_0.IMCR[30].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR31       SIUL2_0.IMCR[31].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR32       SIUL2_0.IMCR[32].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR33       SIUL2_0.IMCR[33].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR34       SIUL2_0.IMCR[34].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR35       SIUL2_0.IMCR[35].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR36       SIUL2_0.IMCR[36].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR37       SIUL2_0.IMCR[37].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR38       SIUL2_0.IMCR[38].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR39       SIUL2_0.IMCR[39].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR40       SIUL2_0.IMCR[40].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR41       SIUL2_0.IMCR[41].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR42       SIUL2_0.IMCR[42].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR43       SIUL2_0.IMCR[43].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR44       SIUL2_0.IMCR[44].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR45       SIUL2_0.IMCR[45].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR46       SIUL2_0.IMCR[46].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR47       SIUL2_0.IMCR[47].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR48       SIUL2_0.IMCR[48].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR49       SIUL2_0.IMCR[49].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR50       SIUL2_0.IMCR[50].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR51       SIUL2_0.IMCR[51].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR52       SIUL2_0.IMCR[52].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR53       SIUL2_0.IMCR[53].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR54       SIUL2_0.IMCR[54].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR55       SIUL2_0.IMCR[55].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR56       SIUL2_0.IMCR[56].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR57       SIUL2_0.IMCR[57].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR58       SIUL2_0.IMCR[58].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR59       SIUL2_0.IMCR[59].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR60       SIUL2_0.IMCR[60].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR61       SIUL2_0.IMCR[61].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR68       SIUL2_0.IMCR[68].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR69       SIUL2_0.IMCR[69].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR70       SIUL2_0.IMCR[70].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR71       SIUL2_0.IMCR[71].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR72       SIUL2_0.IMCR[72].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR73       SIUL2_0.IMCR[73].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR74       SIUL2_0.IMCR[74].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR75       SIUL2_0.IMCR[75].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR76       SIUL2_0.IMCR[76].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR77       SIUL2_0.IMCR[77].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR78       SIUL2_0.IMCR[78].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR79       SIUL2_0.IMCR[79].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR80       SIUL2_0.IMCR[80].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR81       SIUL2_0.IMCR[81].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR82       SIUL2_0.IMCR[82].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_IMCR83       SIUL2_0.IMCR[83].R            /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_0_GPDO3        SIUL2_0.GPDO3.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO2        SIUL2_0.GPDO2.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO1        SIUL2_0.GPDO1.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO0        SIUL2_0.GPDO0.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO7        SIUL2_0.GPDO7.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO6        SIUL2_0.GPDO6.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO5        SIUL2_0.GPDO5.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO4        SIUL2_0.GPDO4.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO11       SIUL2_0.GPDO11.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO10       SIUL2_0.GPDO10.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO9        SIUL2_0.GPDO9.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO8        SIUL2_0.GPDO8.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO15       SIUL2_0.GPDO15.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO14       SIUL2_0.GPDO14.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO13       SIUL2_0.GPDO13.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO12       SIUL2_0.GPDO12.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO19       SIUL2_0.GPDO19.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO18       SIUL2_0.GPDO18.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO17       SIUL2_0.GPDO17.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO16       SIUL2_0.GPDO16.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO23       SIUL2_0.GPDO23.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO22       SIUL2_0.GPDO22.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO21       SIUL2_0.GPDO21.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO20       SIUL2_0.GPDO20.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO27       SIUL2_0.GPDO27.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO26       SIUL2_0.GPDO26.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO25       SIUL2_0.GPDO25.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO24       SIUL2_0.GPDO24.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO31       SIUL2_0.GPDO31.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO30       SIUL2_0.GPDO30.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO29       SIUL2_0.GPDO29.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO28       SIUL2_0.GPDO28.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO35       SIUL2_0.GPDO35.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO34       SIUL2_0.GPDO34.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO33       SIUL2_0.GPDO33.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO32       SIUL2_0.GPDO32.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO39       SIUL2_0.GPDO39.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO38       SIUL2_0.GPDO38.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO37       SIUL2_0.GPDO37.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO36       SIUL2_0.GPDO36.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO43       SIUL2_0.GPDO43.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO42       SIUL2_0.GPDO42.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO41       SIUL2_0.GPDO41.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO40       SIUL2_0.GPDO40.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO47       SIUL2_0.GPDO47.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO46       SIUL2_0.GPDO46.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO45       SIUL2_0.GPDO45.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO44       SIUL2_0.GPDO44.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO51       SIUL2_0.GPDO51.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO50       SIUL2_0.GPDO50.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO49       SIUL2_0.GPDO49.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO48       SIUL2_0.GPDO48.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO55       SIUL2_0.GPDO55.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO54       SIUL2_0.GPDO54.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO53       SIUL2_0.GPDO53.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO52       SIUL2_0.GPDO52.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO59       SIUL2_0.GPDO59.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO58       SIUL2_0.GPDO58.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO57       SIUL2_0.GPDO57.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO56       SIUL2_0.GPDO56.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO63       SIUL2_0.GPDO63.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO62       SIUL2_0.GPDO62.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO61       SIUL2_0.GPDO61.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO60       SIUL2_0.GPDO60.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO67       SIUL2_0.GPDO67.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO66       SIUL2_0.GPDO66.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO65       SIUL2_0.GPDO65.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO64       SIUL2_0.GPDO64.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO71       SIUL2_0.GPDO71.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO70       SIUL2_0.GPDO70.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO69       SIUL2_0.GPDO69.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO68       SIUL2_0.GPDO68.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO75       SIUL2_0.GPDO75.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO74       SIUL2_0.GPDO74.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO73       SIUL2_0.GPDO73.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO72       SIUL2_0.GPDO72.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO79       SIUL2_0.GPDO79.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO78       SIUL2_0.GPDO78.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO77       SIUL2_0.GPDO77.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO76       SIUL2_0.GPDO76.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO83       SIUL2_0.GPDO83.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO82       SIUL2_0.GPDO82.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO81       SIUL2_0.GPDO81.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO80       SIUL2_0.GPDO80.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO87       SIUL2_0.GPDO87.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO86       SIUL2_0.GPDO86.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO85       SIUL2_0.GPDO85.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO84       SIUL2_0.GPDO84.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO91       SIUL2_0.GPDO91.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO90       SIUL2_0.GPDO90.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO89       SIUL2_0.GPDO89.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO88       SIUL2_0.GPDO88.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO95       SIUL2_0.GPDO95.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO94       SIUL2_0.GPDO94.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO93       SIUL2_0.GPDO93.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO92       SIUL2_0.GPDO92.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO99       SIUL2_0.GPDO99.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO98       SIUL2_0.GPDO98.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO97       SIUL2_0.GPDO97.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO96       SIUL2_0.GPDO96.R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO101      SIUL2_0.GPDO101.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDO100      SIUL2_0.GPDO100.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_0_GPDI3        SIUL2_0.GPDI3.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI2        SIUL2_0.GPDI2.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI1        SIUL2_0.GPDI1.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI0        SIUL2_0.GPDI0.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI7        SIUL2_0.GPDI7.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI6        SIUL2_0.GPDI6.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI5        SIUL2_0.GPDI5.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI4        SIUL2_0.GPDI4.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI11       SIUL2_0.GPDI11.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI10       SIUL2_0.GPDI10.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI9        SIUL2_0.GPDI9.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI8        SIUL2_0.GPDI8.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI15       SIUL2_0.GPDI15.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI14       SIUL2_0.GPDI14.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI13       SIUL2_0.GPDI13.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI12       SIUL2_0.GPDI12.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI19       SIUL2_0.GPDI19.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI18       SIUL2_0.GPDI18.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI17       SIUL2_0.GPDI17.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI16       SIUL2_0.GPDI16.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI23       SIUL2_0.GPDI23.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI22       SIUL2_0.GPDI22.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI21       SIUL2_0.GPDI21.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI20       SIUL2_0.GPDI20.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI27       SIUL2_0.GPDI27.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI26       SIUL2_0.GPDI26.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI25       SIUL2_0.GPDI25.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI24       SIUL2_0.GPDI24.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI31       SIUL2_0.GPDI31.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI30       SIUL2_0.GPDI30.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI29       SIUL2_0.GPDI29.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI28       SIUL2_0.GPDI28.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI35       SIUL2_0.GPDI35.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI34       SIUL2_0.GPDI34.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI33       SIUL2_0.GPDI33.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI32       SIUL2_0.GPDI32.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI39       SIUL2_0.GPDI39.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI38       SIUL2_0.GPDI38.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI37       SIUL2_0.GPDI37.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI36       SIUL2_0.GPDI36.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI43       SIUL2_0.GPDI43.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI42       SIUL2_0.GPDI42.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI41       SIUL2_0.GPDI41.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI40       SIUL2_0.GPDI40.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI47       SIUL2_0.GPDI47.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI46       SIUL2_0.GPDI46.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI45       SIUL2_0.GPDI45.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI44       SIUL2_0.GPDI44.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI51       SIUL2_0.GPDI51.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI50       SIUL2_0.GPDI50.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI49       SIUL2_0.GPDI49.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI48       SIUL2_0.GPDI48.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI55       SIUL2_0.GPDI55.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI54       SIUL2_0.GPDI54.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI53       SIUL2_0.GPDI53.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI52       SIUL2_0.GPDI52.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI59       SIUL2_0.GPDI59.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI58       SIUL2_0.GPDI58.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI57       SIUL2_0.GPDI57.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI56       SIUL2_0.GPDI56.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI63       SIUL2_0.GPDI63.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI62       SIUL2_0.GPDI62.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI61       SIUL2_0.GPDI61.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI60       SIUL2_0.GPDI60.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI67       SIUL2_0.GPDI67.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI66       SIUL2_0.GPDI66.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI65       SIUL2_0.GPDI65.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI64       SIUL2_0.GPDI64.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI71       SIUL2_0.GPDI71.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI70       SIUL2_0.GPDI70.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI69       SIUL2_0.GPDI69.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI68       SIUL2_0.GPDI68.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI75       SIUL2_0.GPDI75.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI74       SIUL2_0.GPDI74.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI73       SIUL2_0.GPDI73.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI72       SIUL2_0.GPDI72.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI79       SIUL2_0.GPDI79.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI78       SIUL2_0.GPDI78.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI77       SIUL2_0.GPDI77.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI76       SIUL2_0.GPDI76.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI83       SIUL2_0.GPDI83.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI82       SIUL2_0.GPDI82.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI81       SIUL2_0.GPDI81.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI80       SIUL2_0.GPDI80.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI87       SIUL2_0.GPDI87.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI86       SIUL2_0.GPDI86.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI85       SIUL2_0.GPDI85.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI84       SIUL2_0.GPDI84.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI91       SIUL2_0.GPDI91.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI90       SIUL2_0.GPDI90.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI89       SIUL2_0.GPDI89.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI88       SIUL2_0.GPDI88.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI95       SIUL2_0.GPDI95.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI94       SIUL2_0.GPDI94.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI93       SIUL2_0.GPDI93.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI92       SIUL2_0.GPDI92.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI99       SIUL2_0.GPDI99.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI98       SIUL2_0.GPDI98.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI97       SIUL2_0.GPDI97.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI96       SIUL2_0.GPDI96.R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI101      SIUL2_0.GPDI101.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_GPDI100      SIUL2_0.GPDI100.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_0_PGPDO1       SIUL2_0.PGPDO1.R              /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_0_PGPDO0       SIUL2_0.PGPDO0.R              /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_0_PGPDO3       SIUL2_0.PGPDO3.R              /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_0_PGPDO2       SIUL2_0.PGPDO2.R              /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_0_PGPDO5       SIUL2_0.PGPDO5.R              /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_0_PGPDO4       SIUL2_0.PGPDO4.R              /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_0_PGPDO6       SIUL2_0.PGPDO6.R              /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_0_PGPDI1       SIUL2_0.PGPDI1.R              /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_0_PGPDI0       SIUL2_0.PGPDI0.R              /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_0_PGPDI3       SIUL2_0.PGPDI3.R              /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_0_PGPDI2       SIUL2_0.PGPDI2.R              /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_0_PGPDI5       SIUL2_0.PGPDI5.R              /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_0_PGPDI4       SIUL2_0.PGPDI4.R              /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_0_PGPDI6       SIUL2_0.PGPDI6.R              /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_0_MPGPDO0      SIUL2_0.MPGPDO[0].R           /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_0_MPGPDO1      SIUL2_0.MPGPDO[1].R           /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_0_MPGPDO2      SIUL2_0.MPGPDO[2].R           /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_0_MPGPDO3      SIUL2_0.MPGPDO[3].R           /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_0_MPGPDO4      SIUL2_0.MPGPDO[4].R           /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_0_MPGPDO5      SIUL2_0.MPGPDO[5].R           /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_0_MPGPDO6      SIUL2_0.MPGPDO[6].R           /* SIUL2 Masked Parallel GPIO Pad Data Out Register */

/* SIUL2_1 */
#define SIUL2_1_MIDR1        SIUL2_1.MIDR1.R               /* SIUL2 MCU ID Register #1 */
#define SIUL2_1_MIDR2        SIUL2_1.MIDR2.R               /* SIUL2 MCU ID Register #2 */
#define SIUL2_1_DISR0        SIUL2_1.DISR0.R               /* SIUL2 DMA/Interrupt Status Flag Register0 */
#define SIUL2_1_DIRER0       SIUL2_1.DIRER0.R              /* SIUL2 DMA/Interrupt Request Enable Register0 */
#define SIUL2_1_DIRSR0       SIUL2_1.DIRSR0.R              /* SIUL2 DMA/Interrupt Request Select Register0 */
#define SIUL2_1_IREER0       SIUL2_1.IREER0.R              /* SIUL2 Interrupt Rising-Edge Event Enable Register 0 */
#define SIUL2_1_IFEER0       SIUL2_1.IFEER0.R              /* SIUL2 Interrupt Falling-Edge Event Enable Register 0 */
#define SIUL2_1_IFER0        SIUL2_1.IFER0.R               /* SIUL2 Interrupt Filter Enable Register 0 */
#define SIUL2_1_IFMCR0       SIUL2_1.IFMCR[0].R            /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_1_IFMCR1       SIUL2_1.IFMCR[1].R            /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_1_IFMCR2       SIUL2_1.IFMCR[2].R            /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_1_IFMCR3       SIUL2_1.IFMCR[3].R            /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_1_IFMCR4       SIUL2_1.IFMCR[4].R            /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_1_IFMCR5       SIUL2_1.IFMCR[5].R            /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_1_IFMCR6       SIUL2_1.IFMCR[6].R            /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_1_IFMCR7       SIUL2_1.IFMCR[7].R            /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_1_IFMCR8       SIUL2_1.IFMCR[8].R            /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_1_IFMCR9       SIUL2_1.IFMCR[9].R            /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_1_IFMCR10      SIUL2_1.IFMCR[10].R           /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_1_IFMCR11      SIUL2_1.IFMCR[11].R           /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_1_IFMCR12      SIUL2_1.IFMCR[12].R           /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_1_IFMCR13      SIUL2_1.IFMCR[13].R           /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_1_IFMCR14      SIUL2_1.IFMCR[14].R           /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_1_IFMCR15      SIUL2_1.IFMCR[15].R           /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_1_IFMCR16      SIUL2_1.IFMCR[16].R           /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_1_IFMCR17      SIUL2_1.IFMCR[17].R           /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_1_IFMCR18      SIUL2_1.IFMCR[18].R           /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_1_IFMCR19      SIUL2_1.IFMCR[19].R           /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_1_IFMCR20      SIUL2_1.IFMCR[20].R           /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_1_IFMCR21      SIUL2_1.IFMCR[21].R           /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_1_IFMCR22      SIUL2_1.IFMCR[22].R           /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_1_IFMCR23      SIUL2_1.IFMCR[23].R           /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_1_IFMCR24      SIUL2_1.IFMCR[24].R           /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_1_IFMCR25      SIUL2_1.IFMCR[25].R           /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_1_IFMCR26      SIUL2_1.IFMCR[26].R           /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_1_IFMCR27      SIUL2_1.IFMCR[27].R           /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_1_IFMCR28      SIUL2_1.IFMCR[28].R           /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_1_IFMCR29      SIUL2_1.IFMCR[29].R           /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_1_IFMCR30      SIUL2_1.IFMCR[30].R           /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_1_IFMCR31      SIUL2_1.IFMCR[31].R           /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_1_IFCPR        SIUL2_1.IFCPR.R               /* SIUL2 Interrupt Filter Clock Prescaler Register */
#define SIUL2_1_MSCR112      SIUL2_1.MSCR[112].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR113      SIUL2_1.MSCR[113].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR114      SIUL2_1.MSCR[114].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR115      SIUL2_1.MSCR[115].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR116      SIUL2_1.MSCR[116].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR117      SIUL2_1.MSCR[117].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR118      SIUL2_1.MSCR[118].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR119      SIUL2_1.MSCR[119].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR120      SIUL2_1.MSCR[120].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR121      SIUL2_1.MSCR[121].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR122      SIUL2_1.MSCR[122].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR144      SIUL2_1.MSCR[144].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR145      SIUL2_1.MSCR[145].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR146      SIUL2_1.MSCR[146].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR147      SIUL2_1.MSCR[147].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR148      SIUL2_1.MSCR[148].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR149      SIUL2_1.MSCR[149].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR150      SIUL2_1.MSCR[150].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR151      SIUL2_1.MSCR[151].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR152      SIUL2_1.MSCR[152].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR153      SIUL2_1.MSCR[153].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR154      SIUL2_1.MSCR[154].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR155      SIUL2_1.MSCR[155].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR156      SIUL2_1.MSCR[156].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR157      SIUL2_1.MSCR[157].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR158      SIUL2_1.MSCR[158].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR159      SIUL2_1.MSCR[159].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR160      SIUL2_1.MSCR[160].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR161      SIUL2_1.MSCR[161].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR162      SIUL2_1.MSCR[162].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR163      SIUL2_1.MSCR[163].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR164      SIUL2_1.MSCR[164].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR165      SIUL2_1.MSCR[165].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR166      SIUL2_1.MSCR[166].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR167      SIUL2_1.MSCR[167].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR168      SIUL2_1.MSCR[168].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR169      SIUL2_1.MSCR[169].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR170      SIUL2_1.MSCR[170].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR171      SIUL2_1.MSCR[171].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR172      SIUL2_1.MSCR[172].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR173      SIUL2_1.MSCR[173].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR174      SIUL2_1.MSCR[174].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR175      SIUL2_1.MSCR[175].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR176      SIUL2_1.MSCR[176].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR177      SIUL2_1.MSCR[177].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR178      SIUL2_1.MSCR[178].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR179      SIUL2_1.MSCR[179].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR180      SIUL2_1.MSCR[180].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR181      SIUL2_1.MSCR[181].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR182      SIUL2_1.MSCR[182].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR183      SIUL2_1.MSCR[183].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR184      SIUL2_1.MSCR[184].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR185      SIUL2_1.MSCR[185].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR186      SIUL2_1.MSCR[186].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR187      SIUL2_1.MSCR[187].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR188      SIUL2_1.MSCR[188].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR189      SIUL2_1.MSCR[189].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_MSCR190      SIUL2_1.MSCR[190].R           /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR119      SIUL2_1.IMCR[119].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR120      SIUL2_1.IMCR[120].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR121      SIUL2_1.IMCR[121].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR128      SIUL2_1.IMCR[128].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR129      SIUL2_1.IMCR[129].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR143      SIUL2_1.IMCR[143].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR144      SIUL2_1.IMCR[144].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR145      SIUL2_1.IMCR[145].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR146      SIUL2_1.IMCR[146].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR147      SIUL2_1.IMCR[147].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR148      SIUL2_1.IMCR[148].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR149      SIUL2_1.IMCR[149].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR150      SIUL2_1.IMCR[150].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR151      SIUL2_1.IMCR[151].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR153      SIUL2_1.IMCR[153].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR154      SIUL2_1.IMCR[154].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR155      SIUL2_1.IMCR[155].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR156      SIUL2_1.IMCR[156].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR157      SIUL2_1.IMCR[157].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR158      SIUL2_1.IMCR[158].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR159      SIUL2_1.IMCR[159].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR160      SIUL2_1.IMCR[160].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR161      SIUL2_1.IMCR[161].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR205      SIUL2_1.IMCR[205].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR206      SIUL2_1.IMCR[206].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR207      SIUL2_1.IMCR[207].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR208      SIUL2_1.IMCR[208].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR209      SIUL2_1.IMCR[209].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR210      SIUL2_1.IMCR[210].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR211      SIUL2_1.IMCR[211].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR212      SIUL2_1.IMCR[212].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR224      SIUL2_1.IMCR[224].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR225      SIUL2_1.IMCR[225].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR233      SIUL2_1.IMCR[233].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR234      SIUL2_1.IMCR[234].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR235      SIUL2_1.IMCR[235].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR236      SIUL2_1.IMCR[236].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR237      SIUL2_1.IMCR[237].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR238      SIUL2_1.IMCR[238].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR239      SIUL2_1.IMCR[239].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR240      SIUL2_1.IMCR[240].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR241      SIUL2_1.IMCR[241].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR242      SIUL2_1.IMCR[242].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR243      SIUL2_1.IMCR[243].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR244      SIUL2_1.IMCR[244].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR245      SIUL2_1.IMCR[245].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR246      SIUL2_1.IMCR[246].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR247      SIUL2_1.IMCR[247].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR248      SIUL2_1.IMCR[248].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR273      SIUL2_1.IMCR[273].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR274      SIUL2_1.IMCR[274].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR278      SIUL2_1.IMCR[278].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR279      SIUL2_1.IMCR[279].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR280      SIUL2_1.IMCR[280].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR281      SIUL2_1.IMCR[281].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR283      SIUL2_1.IMCR[283].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR284      SIUL2_1.IMCR[284].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR285      SIUL2_1.IMCR[285].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR286      SIUL2_1.IMCR[286].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR288      SIUL2_1.IMCR[288].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR289      SIUL2_1.IMCR[289].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR290      SIUL2_1.IMCR[290].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR291      SIUL2_1.IMCR[291].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR292      SIUL2_1.IMCR[292].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR293      SIUL2_1.IMCR[293].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR294      SIUL2_1.IMCR[294].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR296      SIUL2_1.IMCR[296].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR297      SIUL2_1.IMCR[297].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR298      SIUL2_1.IMCR[298].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR299      SIUL2_1.IMCR[299].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR300      SIUL2_1.IMCR[300].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR301      SIUL2_1.IMCR[301].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR302      SIUL2_1.IMCR[302].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR304      SIUL2_1.IMCR[304].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR305      SIUL2_1.IMCR[305].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR306      SIUL2_1.IMCR[306].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR307      SIUL2_1.IMCR[307].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR308      SIUL2_1.IMCR[308].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR309      SIUL2_1.IMCR[309].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR310      SIUL2_1.IMCR[310].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR312      SIUL2_1.IMCR[312].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR313      SIUL2_1.IMCR[313].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR314      SIUL2_1.IMCR[314].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR316      SIUL2_1.IMCR[316].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR318      SIUL2_1.IMCR[318].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR322      SIUL2_1.IMCR[322].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR323      SIUL2_1.IMCR[323].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR324      SIUL2_1.IMCR[324].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR325      SIUL2_1.IMCR[325].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR326      SIUL2_1.IMCR[326].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR327      SIUL2_1.IMCR[327].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR328      SIUL2_1.IMCR[328].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR329      SIUL2_1.IMCR[329].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR330      SIUL2_1.IMCR[330].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR331      SIUL2_1.IMCR[331].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR332      SIUL2_1.IMCR[332].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR333      SIUL2_1.IMCR[333].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR334      SIUL2_1.IMCR[334].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR335      SIUL2_1.IMCR[335].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR336      SIUL2_1.IMCR[336].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR337      SIUL2_1.IMCR[337].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR338      SIUL2_1.IMCR[338].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR339      SIUL2_1.IMCR[339].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR340      SIUL2_1.IMCR[340].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR343      SIUL2_1.IMCR[343].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR344      SIUL2_1.IMCR[344].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR345      SIUL2_1.IMCR[345].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR346      SIUL2_1.IMCR[346].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR347      SIUL2_1.IMCR[347].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR348      SIUL2_1.IMCR[348].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR349      SIUL2_1.IMCR[349].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR350      SIUL2_1.IMCR[350].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR351      SIUL2_1.IMCR[351].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR352      SIUL2_1.IMCR[352].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR353      SIUL2_1.IMCR[353].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR354      SIUL2_1.IMCR[354].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR355      SIUL2_1.IMCR[355].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR356      SIUL2_1.IMCR[356].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR357      SIUL2_1.IMCR[357].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR358      SIUL2_1.IMCR[358].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR359      SIUL2_1.IMCR[359].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR360      SIUL2_1.IMCR[360].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR363      SIUL2_1.IMCR[363].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR364      SIUL2_1.IMCR[364].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR365      SIUL2_1.IMCR[365].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR366      SIUL2_1.IMCR[366].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR367      SIUL2_1.IMCR[367].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR368      SIUL2_1.IMCR[368].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR369      SIUL2_1.IMCR[369].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR370      SIUL2_1.IMCR[370].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR371      SIUL2_1.IMCR[371].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR372      SIUL2_1.IMCR[372].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR373      SIUL2_1.IMCR[373].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR374      SIUL2_1.IMCR[374].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR375      SIUL2_1.IMCR[375].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR376      SIUL2_1.IMCR[376].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR377      SIUL2_1.IMCR[377].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR378      SIUL2_1.IMCR[378].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR379      SIUL2_1.IMCR[379].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR380      SIUL2_1.IMCR[380].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR383      SIUL2_1.IMCR[383].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR384      SIUL2_1.IMCR[384].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR385      SIUL2_1.IMCR[385].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR386      SIUL2_1.IMCR[386].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR387      SIUL2_1.IMCR[387].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR388      SIUL2_1.IMCR[388].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR389      SIUL2_1.IMCR[389].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR390      SIUL2_1.IMCR[390].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR391      SIUL2_1.IMCR[391].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR392      SIUL2_1.IMCR[392].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR393      SIUL2_1.IMCR[393].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR398      SIUL2_1.IMCR[398].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR399      SIUL2_1.IMCR[399].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR400      SIUL2_1.IMCR[400].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR401      SIUL2_1.IMCR[401].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR402      SIUL2_1.IMCR[402].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR403      SIUL2_1.IMCR[403].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR404      SIUL2_1.IMCR[404].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR405      SIUL2_1.IMCR[405].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR406      SIUL2_1.IMCR[406].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR407      SIUL2_1.IMCR[407].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR408      SIUL2_1.IMCR[408].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR409      SIUL2_1.IMCR[409].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR410      SIUL2_1.IMCR[410].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR411      SIUL2_1.IMCR[411].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR412      SIUL2_1.IMCR[412].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR413      SIUL2_1.IMCR[413].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR414      SIUL2_1.IMCR[414].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR415      SIUL2_1.IMCR[415].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR416      SIUL2_1.IMCR[416].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR417      SIUL2_1.IMCR[417].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR418      SIUL2_1.IMCR[418].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR419      SIUL2_1.IMCR[419].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR420      SIUL2_1.IMCR[420].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR421      SIUL2_1.IMCR[421].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR422      SIUL2_1.IMCR[422].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR423      SIUL2_1.IMCR[423].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR424      SIUL2_1.IMCR[424].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR425      SIUL2_1.IMCR[425].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR426      SIUL2_1.IMCR[426].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR427      SIUL2_1.IMCR[427].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR428      SIUL2_1.IMCR[428].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR429      SIUL2_1.IMCR[429].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR430      SIUL2_1.IMCR[430].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR431      SIUL2_1.IMCR[431].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR432      SIUL2_1.IMCR[432].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR433      SIUL2_1.IMCR[433].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR467      SIUL2_1.IMCR[467].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR468      SIUL2_1.IMCR[468].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR469      SIUL2_1.IMCR[469].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR470      SIUL2_1.IMCR[470].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR473      SIUL2_1.IMCR[473].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR474      SIUL2_1.IMCR[474].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR475      SIUL2_1.IMCR[475].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR478      SIUL2_1.IMCR[478].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR479      SIUL2_1.IMCR[479].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR480      SIUL2_1.IMCR[480].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR483      SIUL2_1.IMCR[483].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR484      SIUL2_1.IMCR[484].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR485      SIUL2_1.IMCR[485].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR488      SIUL2_1.IMCR[488].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR489      SIUL2_1.IMCR[489].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR490      SIUL2_1.IMCR[490].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR493      SIUL2_1.IMCR[493].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR494      SIUL2_1.IMCR[494].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_IMCR495      SIUL2_1.IMCR[495].R           /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_1_GPDO115      SIUL2_1.GPDO115.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO114      SIUL2_1.GPDO114.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO113      SIUL2_1.GPDO113.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO112      SIUL2_1.GPDO112.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO119      SIUL2_1.GPDO119.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO118      SIUL2_1.GPDO118.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO117      SIUL2_1.GPDO117.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO116      SIUL2_1.GPDO116.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO122      SIUL2_1.GPDO122.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO121      SIUL2_1.GPDO121.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO120      SIUL2_1.GPDO120.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO147      SIUL2_1.GPDO147.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO146      SIUL2_1.GPDO146.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO145      SIUL2_1.GPDO145.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO144      SIUL2_1.GPDO144.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO151      SIUL2_1.GPDO151.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO150      SIUL2_1.GPDO150.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO149      SIUL2_1.GPDO149.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO148      SIUL2_1.GPDO148.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO155      SIUL2_1.GPDO155.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO154      SIUL2_1.GPDO154.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO153      SIUL2_1.GPDO153.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO152      SIUL2_1.GPDO152.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO159      SIUL2_1.GPDO159.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO158      SIUL2_1.GPDO158.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO157      SIUL2_1.GPDO157.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO156      SIUL2_1.GPDO156.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO163      SIUL2_1.GPDO163.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO162      SIUL2_1.GPDO162.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO161      SIUL2_1.GPDO161.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO160      SIUL2_1.GPDO160.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO167      SIUL2_1.GPDO167.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO166      SIUL2_1.GPDO166.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO165      SIUL2_1.GPDO165.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO164      SIUL2_1.GPDO164.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO171      SIUL2_1.GPDO171.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO170      SIUL2_1.GPDO170.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO169      SIUL2_1.GPDO169.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO168      SIUL2_1.GPDO168.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO175      SIUL2_1.GPDO175.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO174      SIUL2_1.GPDO174.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO173      SIUL2_1.GPDO173.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO172      SIUL2_1.GPDO172.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO179      SIUL2_1.GPDO179.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO178      SIUL2_1.GPDO178.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO177      SIUL2_1.GPDO177.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO176      SIUL2_1.GPDO176.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO183      SIUL2_1.GPDO183.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO182      SIUL2_1.GPDO182.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO181      SIUL2_1.GPDO181.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO180      SIUL2_1.GPDO180.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO187      SIUL2_1.GPDO187.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO186      SIUL2_1.GPDO186.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO185      SIUL2_1.GPDO185.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO184      SIUL2_1.GPDO184.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO190      SIUL2_1.GPDO190.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO189      SIUL2_1.GPDO189.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDO188      SIUL2_1.GPDO188.R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_1_GPDI115      SIUL2_1.GPDI115.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI114      SIUL2_1.GPDI114.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI113      SIUL2_1.GPDI113.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI112      SIUL2_1.GPDI112.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI119      SIUL2_1.GPDI119.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI118      SIUL2_1.GPDI118.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI117      SIUL2_1.GPDI117.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI116      SIUL2_1.GPDI116.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI122      SIUL2_1.GPDI122.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI121      SIUL2_1.GPDI121.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI120      SIUL2_1.GPDI120.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI147      SIUL2_1.GPDI147.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI146      SIUL2_1.GPDI146.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI145      SIUL2_1.GPDI145.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI144      SIUL2_1.GPDI144.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI151      SIUL2_1.GPDI151.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI150      SIUL2_1.GPDI150.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI149      SIUL2_1.GPDI149.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI148      SIUL2_1.GPDI148.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI155      SIUL2_1.GPDI155.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI154      SIUL2_1.GPDI154.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI153      SIUL2_1.GPDI153.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI152      SIUL2_1.GPDI152.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI159      SIUL2_1.GPDI159.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI158      SIUL2_1.GPDI158.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI157      SIUL2_1.GPDI157.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI156      SIUL2_1.GPDI156.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI163      SIUL2_1.GPDI163.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI162      SIUL2_1.GPDI162.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI161      SIUL2_1.GPDI161.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI160      SIUL2_1.GPDI160.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI167      SIUL2_1.GPDI167.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI166      SIUL2_1.GPDI166.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI165      SIUL2_1.GPDI165.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI164      SIUL2_1.GPDI164.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI171      SIUL2_1.GPDI171.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI170      SIUL2_1.GPDI170.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI169      SIUL2_1.GPDI169.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI168      SIUL2_1.GPDI168.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI175      SIUL2_1.GPDI175.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI174      SIUL2_1.GPDI174.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI173      SIUL2_1.GPDI173.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI172      SIUL2_1.GPDI172.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI179      SIUL2_1.GPDI179.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI178      SIUL2_1.GPDI178.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI177      SIUL2_1.GPDI177.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI176      SIUL2_1.GPDI176.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI183      SIUL2_1.GPDI183.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI182      SIUL2_1.GPDI182.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI181      SIUL2_1.GPDI181.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI180      SIUL2_1.GPDI180.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI187      SIUL2_1.GPDI187.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI186      SIUL2_1.GPDI186.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI185      SIUL2_1.GPDI185.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI184      SIUL2_1.GPDI184.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI190      SIUL2_1.GPDI190.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI189      SIUL2_1.GPDI189.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_GPDI188      SIUL2_1.GPDI188.R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_1_PGPDO7       SIUL2_1.PGPDO7.R              /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_1_PGPDO9       SIUL2_1.PGPDO9.R              /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_1_PGPDO11      SIUL2_1.PGPDO11.R             /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_1_PGPDO10      SIUL2_1.PGPDO10.R             /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_1_PGPDI7       SIUL2_1.PGPDI7.R              /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_1_PGPDI9       SIUL2_1.PGPDI9.R              /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_1_PGPDI11      SIUL2_1.PGPDI11.R             /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_1_PGPDI10      SIUL2_1.PGPDI10.R             /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_1_MPGPDO7      SIUL2_1.MPGPDO[7].R           /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_1_MPGPDO9      SIUL2_1.MPGPDO[9].R           /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_1_MPGPDO10     SIUL2_1.MPGPDO[10].R          /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_1_MPGPDO11     SIUL2_1.MPGPDO[11].R          /* SIUL2 Masked Parallel GPIO Pad Data Out Register */

/* SPI */
#define SPI_3_MCR            SPI_3.MCR.R                   /* Module Configuration Register */
#define SPI_3_TCR            SPI_3.TCR.R                   /* Transfer Count Register */
#define SPI_3_CTAR0          SPI_3.MODE.CTAR[0].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_3_CTAR1          SPI_3.MODE.CTAR[1].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_3_CTAR2          SPI_3.MODE.CTAR[2].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_3_CTAR3          SPI_3.MODE.CTAR[3].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_3_CTAR4          SPI_3.MODE.CTAR[4].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_3_CTAR5          SPI_3.MODE.CTAR[5].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_3_CTAR0_SLAVE    SPI_3.MODE.CTAR_SLAVE[0].R    /* Clock and Transfer Attributes Register (in Slave mode) */
#define SPI_3_SR             SPI_3.SR.R                    /* Status Register */
#define SPI_3_RSER           SPI_3.RSER.R                  /* DMA/Interrupt Request Select and Enable Register */
#define SPI_3_PUSHR          SPI_3.PUSHR.PUSHR.R           /* PUSH TX FIFO Register In Master Mode */
#define SPI_3_PUSHR_SLAVE    SPI_3.PUSHR.PUSHR_SLAVE.R     /* PUSH TX FIFO Register In Slave Mode */
#define SPI_3_POPR           SPI_3.POPR.R                  /* POP RX FIFO Register */
#define SPI_3_TXFR0          SPI_3.TXFR[0].R               /* Transmit FIFO Registers */
#define SPI_3_TXFR1          SPI_3.TXFR[1].R               /* Transmit FIFO Registers */
#define SPI_3_TXFR2          SPI_3.TXFR[2].R               /* Transmit FIFO Registers */
#define SPI_3_TXFR3          SPI_3.TXFR[3].R               /* Transmit FIFO Registers */
#define SPI_3_TXFR4          SPI_3.TXFR[4].R               /* Transmit FIFO Registers */
#define SPI_3_RXFR0          SPI_3.RXFR[0].R               /* Receive FIFO Registers */
#define SPI_3_RXFR1          SPI_3.RXFR[1].R               /* Receive FIFO Registers */
#define SPI_3_RXFR2          SPI_3.RXFR[2].R               /* Receive FIFO Registers */
#define SPI_3_RXFR3          SPI_3.RXFR[3].R               /* Receive FIFO Registers */
#define SPI_3_RXFR4          SPI_3.RXFR[4].R               /* Receive FIFO Registers */
#define SPI_3_CTARE0         SPI_3.CTARE[0].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_3_CTARE1         SPI_3.CTARE[1].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_3_CTARE2         SPI_3.CTARE[2].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_3_CTARE3         SPI_3.CTARE[3].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_3_CTARE4         SPI_3.CTARE[4].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_3_CTARE5         SPI_3.CTARE[5].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_3_SREX           SPI_3.SREX.R                  /* Status Register Extended */

#define SPI_4_MCR            SPI_4.MCR.R                   /* Module Configuration Register */
#define SPI_4_TCR            SPI_4.TCR.R                   /* Transfer Count Register */
#define SPI_4_CTAR0          SPI_4.MODE.CTAR[0].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_4_CTAR1          SPI_4.MODE.CTAR[1].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_4_CTAR2          SPI_4.MODE.CTAR[2].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_4_CTAR3          SPI_4.MODE.CTAR[3].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_4_CTAR4          SPI_4.MODE.CTAR[4].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_4_CTAR5          SPI_4.MODE.CTAR[5].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_4_CTAR0_SLAVE    SPI_4.MODE.CTAR_SLAVE[0].R    /* Clock and Transfer Attributes Register (in Slave mode) */
#define SPI_4_SR             SPI_4.SR.R                    /* Status Register */
#define SPI_4_RSER           SPI_4.RSER.R                  /* DMA/Interrupt Request Select and Enable Register */
#define SPI_4_PUSHR          SPI_4.PUSHR.PUSHR.R           /* PUSH TX FIFO Register In Master Mode */
#define SPI_4_PUSHR_SLAVE    SPI_4.PUSHR.PUSHR_SLAVE.R     /* PUSH TX FIFO Register In Slave Mode */
#define SPI_4_POPR           SPI_4.POPR.R                  /* POP RX FIFO Register */
#define SPI_4_TXFR0          SPI_4.TXFR[0].R               /* Transmit FIFO Registers */
#define SPI_4_TXFR1          SPI_4.TXFR[1].R               /* Transmit FIFO Registers */
#define SPI_4_TXFR2          SPI_4.TXFR[2].R               /* Transmit FIFO Registers */
#define SPI_4_TXFR3          SPI_4.TXFR[3].R               /* Transmit FIFO Registers */
#define SPI_4_TXFR4          SPI_4.TXFR[4].R               /* Transmit FIFO Registers */
#define SPI_4_RXFR0          SPI_4.RXFR[0].R               /* Receive FIFO Registers */
#define SPI_4_RXFR1          SPI_4.RXFR[1].R               /* Receive FIFO Registers */
#define SPI_4_RXFR2          SPI_4.RXFR[2].R               /* Receive FIFO Registers */
#define SPI_4_RXFR3          SPI_4.RXFR[3].R               /* Receive FIFO Registers */
#define SPI_4_RXFR4          SPI_4.RXFR[4].R               /* Receive FIFO Registers */
#define SPI_4_CTARE0         SPI_4.CTARE[0].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_4_CTARE1         SPI_4.CTARE[1].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_4_CTARE2         SPI_4.CTARE[2].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_4_CTARE3         SPI_4.CTARE[3].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_4_CTARE4         SPI_4.CTARE[4].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_4_CTARE5         SPI_4.CTARE[5].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_4_SREX           SPI_4.SREX.R                  /* Status Register Extended */

#define SPI_5_MCR            SPI_5.MCR.R                   /* Module Configuration Register */
#define SPI_5_TCR            SPI_5.TCR.R                   /* Transfer Count Register */
#define SPI_5_CTAR0          SPI_5.MODE.CTAR[0].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_5_CTAR1          SPI_5.MODE.CTAR[1].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_5_CTAR2          SPI_5.MODE.CTAR[2].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_5_CTAR3          SPI_5.MODE.CTAR[3].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_5_CTAR4          SPI_5.MODE.CTAR[4].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_5_CTAR5          SPI_5.MODE.CTAR[5].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_5_CTAR0_SLAVE    SPI_5.MODE.CTAR_SLAVE[0].R    /* Clock and Transfer Attributes Register (in Slave mode) */
#define SPI_5_SR             SPI_5.SR.R                    /* Status Register */
#define SPI_5_RSER           SPI_5.RSER.R                  /* DMA/Interrupt Request Select and Enable Register */
#define SPI_5_PUSHR          SPI_5.PUSHR.PUSHR.R           /* PUSH TX FIFO Register In Master Mode */
#define SPI_5_PUSHR_SLAVE    SPI_5.PUSHR.PUSHR_SLAVE.R     /* PUSH TX FIFO Register In Slave Mode */
#define SPI_5_POPR           SPI_5.POPR.R                  /* POP RX FIFO Register */
#define SPI_5_TXFR0          SPI_5.TXFR[0].R               /* Transmit FIFO Registers */
#define SPI_5_TXFR1          SPI_5.TXFR[1].R               /* Transmit FIFO Registers */
#define SPI_5_TXFR2          SPI_5.TXFR[2].R               /* Transmit FIFO Registers */
#define SPI_5_TXFR3          SPI_5.TXFR[3].R               /* Transmit FIFO Registers */
#define SPI_5_TXFR4          SPI_5.TXFR[4].R               /* Transmit FIFO Registers */
#define SPI_5_RXFR0          SPI_5.RXFR[0].R               /* Receive FIFO Registers */
#define SPI_5_RXFR1          SPI_5.RXFR[1].R               /* Receive FIFO Registers */
#define SPI_5_RXFR2          SPI_5.RXFR[2].R               /* Receive FIFO Registers */
#define SPI_5_RXFR3          SPI_5.RXFR[3].R               /* Receive FIFO Registers */
#define SPI_5_RXFR4          SPI_5.RXFR[4].R               /* Receive FIFO Registers */
#define SPI_5_CTARE0         SPI_5.CTARE[0].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_5_CTARE1         SPI_5.CTARE[1].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_5_CTARE2         SPI_5.CTARE[2].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_5_CTARE3         SPI_5.CTARE[3].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_5_CTARE4         SPI_5.CTARE[4].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_5_CTARE5         SPI_5.CTARE[5].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_5_SREX           SPI_5.SREX.R                  /* Status Register Extended */

#define SPI_0_MCR            SPI_0.MCR.R                   /* Module Configuration Register */
#define SPI_0_TCR            SPI_0.TCR.R                   /* Transfer Count Register */
#define SPI_0_CTAR0          SPI_0.MODE.CTAR[0].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_0_CTAR1          SPI_0.MODE.CTAR[1].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_0_CTAR2          SPI_0.MODE.CTAR[2].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_0_CTAR3          SPI_0.MODE.CTAR[3].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_0_CTAR4          SPI_0.MODE.CTAR[4].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_0_CTAR5          SPI_0.MODE.CTAR[5].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_0_CTAR0_SLAVE    SPI_0.MODE.CTAR_SLAVE[0].R    /* Clock and Transfer Attributes Register (in Slave mode) */
#define SPI_0_SR             SPI_0.SR.R                    /* Status Register */
#define SPI_0_RSER           SPI_0.RSER.R                  /* DMA/Interrupt Request Select and Enable Register */
#define SPI_0_PUSHR          SPI_0.PUSHR.PUSHR.R           /* PUSH TX FIFO Register In Master Mode */
#define SPI_0_PUSHR_SLAVE    SPI_0.PUSHR.PUSHR_SLAVE.R     /* PUSH TX FIFO Register In Slave Mode */
#define SPI_0_POPR           SPI_0.POPR.R                  /* POP RX FIFO Register */
#define SPI_0_TXFR0          SPI_0.TXFR[0].R               /* Transmit FIFO Registers */
#define SPI_0_TXFR1          SPI_0.TXFR[1].R               /* Transmit FIFO Registers */
#define SPI_0_TXFR2          SPI_0.TXFR[2].R               /* Transmit FIFO Registers */
#define SPI_0_TXFR3          SPI_0.TXFR[3].R               /* Transmit FIFO Registers */
#define SPI_0_TXFR4          SPI_0.TXFR[4].R               /* Transmit FIFO Registers */
#define SPI_0_RXFR0          SPI_0.RXFR[0].R               /* Receive FIFO Registers */
#define SPI_0_RXFR1          SPI_0.RXFR[1].R               /* Receive FIFO Registers */
#define SPI_0_RXFR2          SPI_0.RXFR[2].R               /* Receive FIFO Registers */
#define SPI_0_RXFR3          SPI_0.RXFR[3].R               /* Receive FIFO Registers */
#define SPI_0_RXFR4          SPI_0.RXFR[4].R               /* Receive FIFO Registers */
#define SPI_0_CTARE0         SPI_0.CTARE[0].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_0_CTARE1         SPI_0.CTARE[1].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_0_CTARE2         SPI_0.CTARE[2].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_0_CTARE3         SPI_0.CTARE[3].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_0_CTARE4         SPI_0.CTARE[4].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_0_CTARE5         SPI_0.CTARE[5].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_0_SREX           SPI_0.SREX.R                  /* Status Register Extended */

#define SPI_1_MCR            SPI_1.MCR.R                   /* Module Configuration Register */
#define SPI_1_TCR            SPI_1.TCR.R                   /* Transfer Count Register */
#define SPI_1_CTAR0          SPI_1.MODE.CTAR[0].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_1_CTAR1          SPI_1.MODE.CTAR[1].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_1_CTAR2          SPI_1.MODE.CTAR[2].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_1_CTAR3          SPI_1.MODE.CTAR[3].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_1_CTAR4          SPI_1.MODE.CTAR[4].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_1_CTAR5          SPI_1.MODE.CTAR[5].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_1_CTAR0_SLAVE    SPI_1.MODE.CTAR_SLAVE[0].R    /* Clock and Transfer Attributes Register (in Slave mode) */
#define SPI_1_SR             SPI_1.SR.R                    /* Status Register */
#define SPI_1_RSER           SPI_1.RSER.R                  /* DMA/Interrupt Request Select and Enable Register */
#define SPI_1_PUSHR          SPI_1.PUSHR.PUSHR.R           /* PUSH TX FIFO Register In Master Mode */
#define SPI_1_PUSHR_SLAVE    SPI_1.PUSHR.PUSHR_SLAVE.R     /* PUSH TX FIFO Register In Slave Mode */
#define SPI_1_POPR           SPI_1.POPR.R                  /* POP RX FIFO Register */
#define SPI_1_TXFR0          SPI_1.TXFR[0].R               /* Transmit FIFO Registers */
#define SPI_1_TXFR1          SPI_1.TXFR[1].R               /* Transmit FIFO Registers */
#define SPI_1_TXFR2          SPI_1.TXFR[2].R               /* Transmit FIFO Registers */
#define SPI_1_TXFR3          SPI_1.TXFR[3].R               /* Transmit FIFO Registers */
#define SPI_1_TXFR4          SPI_1.TXFR[4].R               /* Transmit FIFO Registers */
#define SPI_1_RXFR0          SPI_1.RXFR[0].R               /* Receive FIFO Registers */
#define SPI_1_RXFR1          SPI_1.RXFR[1].R               /* Receive FIFO Registers */
#define SPI_1_RXFR2          SPI_1.RXFR[2].R               /* Receive FIFO Registers */
#define SPI_1_RXFR3          SPI_1.RXFR[3].R               /* Receive FIFO Registers */
#define SPI_1_RXFR4          SPI_1.RXFR[4].R               /* Receive FIFO Registers */
#define SPI_1_CTARE0         SPI_1.CTARE[0].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_1_CTARE1         SPI_1.CTARE[1].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_1_CTARE2         SPI_1.CTARE[2].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_1_CTARE3         SPI_1.CTARE[3].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_1_CTARE4         SPI_1.CTARE[4].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_1_CTARE5         SPI_1.CTARE[5].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_1_SREX           SPI_1.SREX.R                  /* Status Register Extended */

#define SPI_2_MCR            SPI_2.MCR.R                   /* Module Configuration Register */
#define SPI_2_TCR            SPI_2.TCR.R                   /* Transfer Count Register */
#define SPI_2_CTAR0          SPI_2.MODE.CTAR[0].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_2_CTAR1          SPI_2.MODE.CTAR[1].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_2_CTAR2          SPI_2.MODE.CTAR[2].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_2_CTAR3          SPI_2.MODE.CTAR[3].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_2_CTAR4          SPI_2.MODE.CTAR[4].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_2_CTAR5          SPI_2.MODE.CTAR[5].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_2_CTAR0_SLAVE    SPI_2.MODE.CTAR_SLAVE[0].R    /* Clock and Transfer Attributes Register (in Slave mode) */
#define SPI_2_SR             SPI_2.SR.R                    /* Status Register */
#define SPI_2_RSER           SPI_2.RSER.R                  /* DMA/Interrupt Request Select and Enable Register */
#define SPI_2_PUSHR          SPI_2.PUSHR.PUSHR.R           /* PUSH TX FIFO Register In Master Mode */
#define SPI_2_PUSHR_SLAVE    SPI_2.PUSHR.PUSHR_SLAVE.R     /* PUSH TX FIFO Register In Slave Mode */
#define SPI_2_POPR           SPI_2.POPR.R                  /* POP RX FIFO Register */
#define SPI_2_TXFR0          SPI_2.TXFR[0].R               /* Transmit FIFO Registers */
#define SPI_2_TXFR1          SPI_2.TXFR[1].R               /* Transmit FIFO Registers */
#define SPI_2_TXFR2          SPI_2.TXFR[2].R               /* Transmit FIFO Registers */
#define SPI_2_TXFR3          SPI_2.TXFR[3].R               /* Transmit FIFO Registers */
#define SPI_2_TXFR4          SPI_2.TXFR[4].R               /* Transmit FIFO Registers */
#define SPI_2_RXFR0          SPI_2.RXFR[0].R               /* Receive FIFO Registers */
#define SPI_2_RXFR1          SPI_2.RXFR[1].R               /* Receive FIFO Registers */
#define SPI_2_RXFR2          SPI_2.RXFR[2].R               /* Receive FIFO Registers */
#define SPI_2_RXFR3          SPI_2.RXFR[3].R               /* Receive FIFO Registers */
#define SPI_2_RXFR4          SPI_2.RXFR[4].R               /* Receive FIFO Registers */
#define SPI_2_CTARE0         SPI_2.CTARE[0].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_2_CTARE1         SPI_2.CTARE[1].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_2_CTARE2         SPI_2.CTARE[2].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_2_CTARE3         SPI_2.CTARE[3].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_2_CTARE4         SPI_2.CTARE[4].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_2_CTARE5         SPI_2.CTARE[5].R              /* Clock and Transfer Attributes Register Extended */
#define SPI_2_SREX           SPI_2.SREX.R                  /* Status Register Extended */

/* SRAMC */
#define SRAMC_PRAMCR         SRAMC.PRAMCR.R                /* Platform RAM Control Register */
#define SRAMC_PRAMIAS        SRAMC.PRAMIAS.R               /* Platform RAM Initialization Address Register Start */
#define SRAMC_PRAMIAE        SRAMC.PRAMIAE.R               /* Platform RAM Initialization Address Register End */
#define SRAMC_PRAMSR         SRAMC.PRAMSR.R                /* Platform RAM Status Register */
#define SRAMC_PRAMECCA       SRAMC.PRAMECCA.R              /* Platform RAM ECC Address */

#define SRAMC_1_PRAMCR       SRAMC_1.PRAMCR.R              /* Platform RAM Control Register */
#define SRAMC_1_PRAMIAS      SRAMC_1.PRAMIAS.R             /* Platform RAM Initialization Address Register Start */
#define SRAMC_1_PRAMIAE      SRAMC_1.PRAMIAE.R             /* Platform RAM Initialization Address Register End */
#define SRAMC_1_PRAMSR       SRAMC_1.PRAMSR.R              /* Platform RAM Status Register */
#define SRAMC_1_PRAMECCA     SRAMC_1.PRAMECCA.R            /* Platform RAM ECC Address */

#define SRAM_STDBY_CFG_PRAMCR SRAM_STDBY_CFG.PRAMCR.R      /* Platform RAM Control Register */
#define SRAM_STDBY_CFG_PRAMIAS SRAM_STDBY_CFG.PRAMIAS.R    /* Platform RAM Initialization Address Register Start */
#define SRAM_STDBY_CFG_PRAMIAE SRAM_STDBY_CFG.PRAMIAE.R    /* Platform RAM Initialization Address Register End */
#define SRAM_STDBY_CFG_PRAMSR SRAM_STDBY_CFG.PRAMSR.R      /* Platform RAM Status Register */
#define SRAM_STDBY_CFG_PRAMECCA SRAM_STDBY_CFG.PRAMECCA.R  /* Platform RAM ECC Address */

/* SRC */
#define SRC_SW_NCF           SRC.SW_NCF.R                  /* Software Triggered Faults Register */
#define SRC_GMAC_0_CTRL_STS  SRC.GMAC_0_CTRL_STS.R         /* GMAC Control Register */
#define SRC_HSE_CM7_STATUS_REG SRC.HSE_CM7_STATUS_REG.R    /* HSE CM7 status register */
#define SRC_CMU_STATUS_REG1  SRC.CMU_STATUS_REG1.R         /* CMUs status register 1 */
#define SRC_CMU_STATUS_REG2  SRC.CMU_STATUS_REG2.R         /* CMUs status register 2 */
#define SRC_FCCU_EOUT_OVERRIDE_CLEAR_REG SRC.FCCU_EOUT_OVERRIDE_CLEAR_REG.R /* FCCU EOUT override clear register */
#define SRC_GPR21            SRC.GPR21.R                   /* GPR21 Register */
#define SRC_DEBUG_CONTROL    SRC.DEBUG_CONTROL.R           /* Debug Control Register */
#define SRC_TIMESTAMP_CONTROL_REGISTER SRC.TIMESTAMP_CONTROL_REGISTER.R /* Time Stamp Control Register */
#define SRC_FLEXRAY_OS_TICK_INPUT_SELECT_REG SRC.FLEXRAY_OS_TICK_INPUT_SELECT_REG.R /* FlexRay OS Tick input select register */

/* STCU2 */
#define STCU2_RUNSW          STCU2.RUNSW.R                 /* STCU2 Run Software */
#define STCU2_SKC            STCU2.SKC.R                   /* STCU2 SK Code */
#define STCU2_CFG            STCU2.CFG.R                   /* STCU2 Configuration */
#define STCU2_WDG            STCU2.WDG.R                   /* STCU2 Watchdog Granularity */
#define STCU2_INT_FLG        STCU2.INT_FLG.R               /* STCU2 Interrupt Flag */
#define STCU2_ERR_STAT       STCU2.ERR_STAT.R              /* STCU2 Error */
#define STCU2_ERR_FM         STCU2.ERR_FM.R                /* STCU2 Error FM */
#define STCU2_LBSSW0         STCU2.LBSSW[0].R              /* STCU2 Online LBIST Status */
#define STCU2_LBSSW1         STCU2.LBSSW1.R                /* STCU2 Online LBIST Status */
#define STCU2_LBESW0         STCU2.LBESW[0].R              /* STCU2 Online LBIST End Flag */
#define STCU2_LBESW1         STCU2.LBESW1.R                /* STCU2 Online LBIST End Flag */
#define STCU2_LBRMSW1        STCU2.LBRMSW1.R               /* STCU2 Online LBIST Reset Management */
#define STCU2_LBUFM0         STCU2.LBUFM[0].R              /* STCU2 Online LBIST Unrecoverable FM */
#define STCU2_LBUFM1         STCU2.LBUFM1.R                /* STCU2 Online LBIST Unrecoverable FM */
#define STCU2_MBSSW0         STCU2.MBSSW[0].R              /* STCU2 Online MBIST Status */
#define STCU2_MBSSW1         STCU2.MBSSW[1].R              /* STCU2 Online MBIST Status */
#define STCU2_MBSSW2         STCU2.MBSSW[2].R              /* STCU2 Online MBIST Status */
#define STCU2_MBSSW3         STCU2.MBSSW3.R                /* STCU2 Online MBIST Status */
#define STCU2_MBESW0         STCU2.MBESW[0].R              /* STCU2 Online MBIST End Flag */
#define STCU2_MBESW1         STCU2.MBESW[1].R              /* STCU2 Online MBIST End Flag */
#define STCU2_MBESW2         STCU2.MBESW[2].R              /* STCU2 Online MBIST End Flag */
#define STCU2_MBESW3         STCU2.MBESW3.R                /* STCU2 Online MBIST End Flag */
#define STCU2_MBUFM0         STCU2.MBUFM[0].R              /* STCU2 MBIST Unrecoverable FM */
#define STCU2_MBUFM1         STCU2.MBUFM[1].R              /* STCU2 MBIST Unrecoverable FM */
#define STCU2_MBUFM2         STCU2.MBUFM[2].R              /* STCU2 MBIST Unrecoverable FM */
#define STCU2_MBUFM3         STCU2.MBUFM3.R                /* STCU2 MBIST Unrecoverable FM */
#define STCU2_LB_CTRL0       STCU2.LB[0].CTRL.R            /* STCU2 LBIST Control */
#define STCU2_LB_PCS0        STCU2.LB[0].PCS.R             /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW0   STCU2.LB[0].MISRELSW.R        /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW0   STCU2.LB[0].MISREHSW.R        /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW0   STCU2.LB[0].MISRRLSW.R        /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW0   STCU2.LB[0].MISRRHSW.R        /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL1       STCU2.LB[1].CTRL.R            /* STCU2 LBIST Control */
#define STCU2_LB_PCS1        STCU2.LB[1].PCS.R             /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW1   STCU2.LB[1].MISRELSW.R        /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW1   STCU2.LB[1].MISREHSW.R        /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW1   STCU2.LB[1].MISRRLSW.R        /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW1   STCU2.LB[1].MISRRHSW.R        /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL2       STCU2.LB[2].CTRL.R            /* STCU2 LBIST Control */
#define STCU2_LB_PCS2        STCU2.LB[2].PCS.R             /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW2   STCU2.LB[2].MISRELSW.R        /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW2   STCU2.LB[2].MISREHSW.R        /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW2   STCU2.LB[2].MISRRLSW.R        /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW2   STCU2.LB[2].MISRRHSW.R        /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL3       STCU2.LB[3].CTRL.R            /* STCU2 LBIST Control */
#define STCU2_LB_PCS3        STCU2.LB[3].PCS.R             /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW3   STCU2.LB[3].MISRELSW.R        /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW3   STCU2.LB[3].MISREHSW.R        /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW3   STCU2.LB[3].MISRRLSW.R        /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW3   STCU2.LB[3].MISRRHSW.R        /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL4       STCU2.LB[4].CTRL.R            /* STCU2 LBIST Control */
#define STCU2_LB_PCS4        STCU2.LB[4].PCS.R             /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW4   STCU2.LB[4].MISRELSW.R        /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW4   STCU2.LB[4].MISREHSW.R        /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW4   STCU2.LB[4].MISRRLSW.R        /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW4   STCU2.LB[4].MISRRHSW.R        /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL5       STCU2.LB[5].CTRL.R            /* STCU2 LBIST Control */
#define STCU2_LB_PCS5        STCU2.LB[5].PCS.R             /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW5   STCU2.LB[5].MISRELSW.R        /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW5   STCU2.LB[5].MISREHSW.R        /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW5   STCU2.LB[5].MISRRLSW.R        /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW5   STCU2.LB[5].MISRRHSW.R        /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL6       STCU2.LB[6].CTRL.R            /* STCU2 LBIST Control */
#define STCU2_LB_PCS6        STCU2.LB[6].PCS.R             /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW6   STCU2.LB[6].MISRELSW.R        /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW6   STCU2.LB[6].MISREHSW.R        /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW6   STCU2.LB[6].MISRRLSW.R        /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW6   STCU2.LB[6].MISRRHSW.R        /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL7       STCU2.LB[7].CTRL.R            /* STCU2 LBIST Control */
#define STCU2_LB_PCS7        STCU2.LB[7].PCS.R             /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW7   STCU2.LB[7].MISRELSW.R        /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW7   STCU2.LB[7].MISREHSW.R        /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW7   STCU2.LB[7].MISRRLSW.R        /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW7   STCU2.LB[7].MISRRHSW.R        /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL8       STCU2.LB[8].CTRL.R            /* STCU2 LBIST Control */
#define STCU2_LB_PCS8        STCU2.LB[8].PCS.R             /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW8   STCU2.LB[8].MISRELSW.R        /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW8   STCU2.LB[8].MISREHSW.R        /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW8   STCU2.LB[8].MISRRLSW.R        /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW8   STCU2.LB[8].MISRRHSW.R        /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL9       STCU2.LB[9].CTRL.R            /* STCU2 LBIST Control */
#define STCU2_LB_PCS9        STCU2.LB[9].PCS.R             /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW9   STCU2.LB[9].MISRELSW.R        /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW9   STCU2.LB[9].MISREHSW.R        /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW9   STCU2.LB[9].MISRRLSW.R        /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW9   STCU2.LB[9].MISRRHSW.R        /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL10      STCU2.LB[10].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS10       STCU2.LB[10].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW10  STCU2.LB[10].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW10  STCU2.LB[10].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW10  STCU2.LB[10].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW10  STCU2.LB[10].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL11      STCU2.LB[11].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS11       STCU2.LB[11].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW11  STCU2.LB[11].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW11  STCU2.LB[11].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW11  STCU2.LB[11].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW11  STCU2.LB[11].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL12      STCU2.LB[12].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS12       STCU2.LB[12].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW12  STCU2.LB[12].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW12  STCU2.LB[12].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW12  STCU2.LB[12].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW12  STCU2.LB[12].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL13      STCU2.LB[13].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS13       STCU2.LB[13].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW13  STCU2.LB[13].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW13  STCU2.LB[13].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW13  STCU2.LB[13].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW13  STCU2.LB[13].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL14      STCU2.LB[14].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS14       STCU2.LB[14].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW14  STCU2.LB[14].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW14  STCU2.LB[14].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW14  STCU2.LB[14].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW14  STCU2.LB[14].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL15      STCU2.LB[15].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS15       STCU2.LB[15].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW15  STCU2.LB[15].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW15  STCU2.LB[15].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW15  STCU2.LB[15].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW15  STCU2.LB[15].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL16      STCU2.LB[16].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS16       STCU2.LB[16].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW16  STCU2.LB[16].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW16  STCU2.LB[16].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW16  STCU2.LB[16].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW16  STCU2.LB[16].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL17      STCU2.LB[17].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS17       STCU2.LB[17].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW17  STCU2.LB[17].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW17  STCU2.LB[17].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW17  STCU2.LB[17].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW17  STCU2.LB[17].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL18      STCU2.LB[18].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS18       STCU2.LB[18].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW18  STCU2.LB[18].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW18  STCU2.LB[18].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW18  STCU2.LB[18].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW18  STCU2.LB[18].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL19      STCU2.LB[19].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS19       STCU2.LB[19].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW19  STCU2.LB[19].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW19  STCU2.LB[19].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW19  STCU2.LB[19].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW19  STCU2.LB[19].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL20      STCU2.LB[20].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS20       STCU2.LB[20].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW20  STCU2.LB[20].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW20  STCU2.LB[20].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW20  STCU2.LB[20].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW20  STCU2.LB[20].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL21      STCU2.LB[21].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS21       STCU2.LB[21].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW21  STCU2.LB[21].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW21  STCU2.LB[21].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW21  STCU2.LB[21].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW21  STCU2.LB[21].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL22      STCU2.LB[22].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS22       STCU2.LB[22].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW22  STCU2.LB[22].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW22  STCU2.LB[22].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW22  STCU2.LB[22].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW22  STCU2.LB[22].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL23      STCU2.LB[23].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS23       STCU2.LB[23].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW23  STCU2.LB[23].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW23  STCU2.LB[23].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW23  STCU2.LB[23].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW23  STCU2.LB[23].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL24      STCU2.LB[24].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS24       STCU2.LB[24].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW24  STCU2.LB[24].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW24  STCU2.LB[24].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW24  STCU2.LB[24].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW24  STCU2.LB[24].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL25      STCU2.LB[25].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS25       STCU2.LB[25].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW25  STCU2.LB[25].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW25  STCU2.LB[25].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW25  STCU2.LB[25].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW25  STCU2.LB[25].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL26      STCU2.LB[26].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS26       STCU2.LB[26].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW26  STCU2.LB[26].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW26  STCU2.LB[26].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW26  STCU2.LB[26].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW26  STCU2.LB[26].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL27      STCU2.LB[27].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS27       STCU2.LB[27].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW27  STCU2.LB[27].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW27  STCU2.LB[27].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW27  STCU2.LB[27].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW27  STCU2.LB[27].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL28      STCU2.LB[28].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS28       STCU2.LB[28].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW28  STCU2.LB[28].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW28  STCU2.LB[28].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW28  STCU2.LB[28].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW28  STCU2.LB[28].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL29      STCU2.LB[29].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS29       STCU2.LB[29].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW29  STCU2.LB[29].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW29  STCU2.LB[29].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW29  STCU2.LB[29].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW29  STCU2.LB[29].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL30      STCU2.LB[30].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS30       STCU2.LB[30].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW30  STCU2.LB[30].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW30  STCU2.LB[30].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW30  STCU2.LB[30].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW30  STCU2.LB[30].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL31      STCU2.LB[31].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS31       STCU2.LB[31].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW31  STCU2.LB[31].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW31  STCU2.LB[31].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW31  STCU2.LB[31].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW31  STCU2.LB[31].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL32      STCU2.LB[32].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS32       STCU2.LB[32].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW32  STCU2.LB[32].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW32  STCU2.LB[32].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW32  STCU2.LB[32].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW32  STCU2.LB[32].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL33      STCU2.LB[33].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS33       STCU2.LB[33].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW33  STCU2.LB[33].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW33  STCU2.LB[33].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW33  STCU2.LB[33].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW33  STCU2.LB[33].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL34      STCU2.LB[34].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS34       STCU2.LB[34].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW34  STCU2.LB[34].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW34  STCU2.LB[34].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW34  STCU2.LB[34].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW34  STCU2.LB[34].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL35      STCU2.LB[35].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS35       STCU2.LB[35].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW35  STCU2.LB[35].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW35  STCU2.LB[35].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW35  STCU2.LB[35].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW35  STCU2.LB[35].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL36      STCU2.LB[36].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS36       STCU2.LB[36].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW36  STCU2.LB[36].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW36  STCU2.LB[36].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW36  STCU2.LB[36].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW36  STCU2.LB[36].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL37      STCU2.LB[37].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS37       STCU2.LB[37].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW37  STCU2.LB[37].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW37  STCU2.LB[37].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW37  STCU2.LB[37].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW37  STCU2.LB[37].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL38      STCU2.LB[38].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS38       STCU2.LB[38].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW38  STCU2.LB[38].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW38  STCU2.LB[38].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW38  STCU2.LB[38].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW38  STCU2.LB[38].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL39      STCU2.LB[39].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS39       STCU2.LB[39].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW39  STCU2.LB[39].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW39  STCU2.LB[39].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW39  STCU2.LB[39].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW39  STCU2.LB[39].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL40      STCU2.LB[40].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS40       STCU2.LB[40].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW40  STCU2.LB[40].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW40  STCU2.LB[40].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW40  STCU2.LB[40].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW40  STCU2.LB[40].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL41      STCU2.LB[41].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS41       STCU2.LB[41].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW41  STCU2.LB[41].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW41  STCU2.LB[41].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW41  STCU2.LB[41].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW41  STCU2.LB[41].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL42      STCU2.LB[42].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS42       STCU2.LB[42].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW42  STCU2.LB[42].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW42  STCU2.LB[42].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW42  STCU2.LB[42].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW42  STCU2.LB[42].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL43      STCU2.LB[43].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS43       STCU2.LB[43].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW43  STCU2.LB[43].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW43  STCU2.LB[43].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW43  STCU2.LB[43].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW43  STCU2.LB[43].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL44      STCU2.LB[44].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS44       STCU2.LB[44].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW44  STCU2.LB[44].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW44  STCU2.LB[44].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW44  STCU2.LB[44].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW44  STCU2.LB[44].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL45      STCU2.LB[45].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS45       STCU2.LB[45].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW45  STCU2.LB[45].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW45  STCU2.LB[45].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW45  STCU2.LB[45].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW45  STCU2.LB[45].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL46      STCU2.LB[46].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS46       STCU2.LB[46].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW46  STCU2.LB[46].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW46  STCU2.LB[46].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW46  STCU2.LB[46].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW46  STCU2.LB[46].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL47      STCU2.LB[47].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS47       STCU2.LB[47].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW47  STCU2.LB[47].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW47  STCU2.LB[47].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW47  STCU2.LB[47].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW47  STCU2.LB[47].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL48      STCU2.LB[48].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS48       STCU2.LB[48].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW48  STCU2.LB[48].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW48  STCU2.LB[48].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW48  STCU2.LB[48].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW48  STCU2.LB[48].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL49      STCU2.LB[49].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS49       STCU2.LB[49].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW49  STCU2.LB[49].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW49  STCU2.LB[49].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW49  STCU2.LB[49].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW49  STCU2.LB[49].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL50      STCU2.LB[50].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS50       STCU2.LB[50].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW50  STCU2.LB[50].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW50  STCU2.LB[50].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW50  STCU2.LB[50].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW50  STCU2.LB[50].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL51      STCU2.LB[51].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS51       STCU2.LB[51].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW51  STCU2.LB[51].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW51  STCU2.LB[51].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW51  STCU2.LB[51].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW51  STCU2.LB[51].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL52      STCU2.LB[52].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS52       STCU2.LB[52].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW52  STCU2.LB[52].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW52  STCU2.LB[52].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW52  STCU2.LB[52].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW52  STCU2.LB[52].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL53      STCU2.LB[53].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS53       STCU2.LB[53].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW53  STCU2.LB[53].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW53  STCU2.LB[53].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW53  STCU2.LB[53].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW53  STCU2.LB[53].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL54      STCU2.LB[54].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS54       STCU2.LB[54].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW54  STCU2.LB[54].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW54  STCU2.LB[54].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW54  STCU2.LB[54].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW54  STCU2.LB[54].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL55      STCU2.LB[55].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS55       STCU2.LB[55].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW55  STCU2.LB[55].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW55  STCU2.LB[55].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW55  STCU2.LB[55].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW55  STCU2.LB[55].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL56      STCU2.LB[56].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS56       STCU2.LB[56].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW56  STCU2.LB[56].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW56  STCU2.LB[56].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW56  STCU2.LB[56].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW56  STCU2.LB[56].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL57      STCU2.LB[57].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS57       STCU2.LB[57].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW57  STCU2.LB[57].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW57  STCU2.LB[57].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW57  STCU2.LB[57].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW57  STCU2.LB[57].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL58      STCU2.LB[58].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS58       STCU2.LB[58].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW58  STCU2.LB[58].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW58  STCU2.LB[58].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW58  STCU2.LB[58].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW58  STCU2.LB[58].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL59      STCU2.LB[59].CTRL.R           /* STCU2 LBIST Control */
#define STCU2_LB_PCS59       STCU2.LB[59].PCS.R            /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW59  STCU2.LB[59].MISRELSW.R       /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW59  STCU2.LB[59].MISREHSW.R       /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW59  STCU2.LB[59].MISRRLSW.R       /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW59  STCU2.LB[59].MISRRHSW.R       /* STCU2 Online LBIST MISR Read High */
#define STCU2_ALGOSEL        STCU2.ALGOSEL.R               /* STCU2 Algorithm Select */
#define STCU2_STGGR          STCU2.STGGR.R                 /* STCU2 MBIST Stagger */
#define STCU2_BSTART         STCU2.BSTART.R                /* STCU2 BIST Start */
#define STCU2_MB_CTRL0       STCU2.MB_CTRL[0].R            /* STCU2 MBIST Control */
#define STCU2_MB_CTRL1       STCU2.MB_CTRL[1].R            /* STCU2 MBIST Control */
#define STCU2_MB_CTRL2       STCU2.MB_CTRL[2].R            /* STCU2 MBIST Control */
#define STCU2_MB_CTRL3       STCU2.MB_CTRL[3].R            /* STCU2 MBIST Control */
#define STCU2_MB_CTRL4       STCU2.MB_CTRL[4].R            /* STCU2 MBIST Control */
#define STCU2_MB_CTRL5       STCU2.MB_CTRL[5].R            /* STCU2 MBIST Control */
#define STCU2_MB_CTRL6       STCU2.MB_CTRL[6].R            /* STCU2 MBIST Control */
#define STCU2_MB_CTRL7       STCU2.MB_CTRL[7].R            /* STCU2 MBIST Control */
#define STCU2_MB_CTRL8       STCU2.MB_CTRL[8].R            /* STCU2 MBIST Control */
#define STCU2_MB_CTRL9       STCU2.MB_CTRL[9].R            /* STCU2 MBIST Control */
#define STCU2_MB_CTRL10      STCU2.MB_CTRL[10].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL11      STCU2.MB_CTRL[11].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL12      STCU2.MB_CTRL[12].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL13      STCU2.MB_CTRL[13].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL14      STCU2.MB_CTRL[14].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL15      STCU2.MB_CTRL[15].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL16      STCU2.MB_CTRL[16].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL17      STCU2.MB_CTRL[17].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL18      STCU2.MB_CTRL[18].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL19      STCU2.MB_CTRL[19].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL20      STCU2.MB_CTRL[20].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL21      STCU2.MB_CTRL[21].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL22      STCU2.MB_CTRL[22].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL23      STCU2.MB_CTRL[23].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL24      STCU2.MB_CTRL[24].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL25      STCU2.MB_CTRL[25].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL26      STCU2.MB_CTRL[26].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL27      STCU2.MB_CTRL[27].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL28      STCU2.MB_CTRL[28].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL29      STCU2.MB_CTRL[29].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL30      STCU2.MB_CTRL[30].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL31      STCU2.MB_CTRL[31].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL32      STCU2.MB_CTRL[32].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL33      STCU2.MB_CTRL[33].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL34      STCU2.MB_CTRL[34].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL35      STCU2.MB_CTRL[35].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL36      STCU2.MB_CTRL[36].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL37      STCU2.MB_CTRL[37].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL38      STCU2.MB_CTRL[38].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL39      STCU2.MB_CTRL[39].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL40      STCU2.MB_CTRL[40].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL41      STCU2.MB_CTRL[41].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL42      STCU2.MB_CTRL[42].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL43      STCU2.MB_CTRL[43].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL44      STCU2.MB_CTRL[44].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL45      STCU2.MB_CTRL[45].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL46      STCU2.MB_CTRL[46].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL47      STCU2.MB_CTRL[47].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL48      STCU2.MB_CTRL[48].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL49      STCU2.MB_CTRL[49].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL50      STCU2.MB_CTRL[50].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL51      STCU2.MB_CTRL[51].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL52      STCU2.MB_CTRL[52].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL53      STCU2.MB_CTRL[53].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL54      STCU2.MB_CTRL[54].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL55      STCU2.MB_CTRL[55].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL56      STCU2.MB_CTRL[56].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL57      STCU2.MB_CTRL[57].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL58      STCU2.MB_CTRL[58].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL59      STCU2.MB_CTRL[59].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL60      STCU2.MB_CTRL[60].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL61      STCU2.MB_CTRL[61].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL62      STCU2.MB_CTRL[62].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL63      STCU2.MB_CTRL[63].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL64      STCU2.MB_CTRL[64].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL65      STCU2.MB_CTRL[65].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL66      STCU2.MB_CTRL[66].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL67      STCU2.MB_CTRL[67].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL68      STCU2.MB_CTRL[68].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL69      STCU2.MB_CTRL[69].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL70      STCU2.MB_CTRL[70].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL71      STCU2.MB_CTRL[71].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL72      STCU2.MB_CTRL[72].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL73      STCU2.MB_CTRL[73].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL74      STCU2.MB_CTRL[74].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL75      STCU2.MB_CTRL[75].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL76      STCU2.MB_CTRL[76].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL77      STCU2.MB_CTRL[77].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL78      STCU2.MB_CTRL[78].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL79      STCU2.MB_CTRL[79].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL80      STCU2.MB_CTRL[80].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL81      STCU2.MB_CTRL[81].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL82      STCU2.MB_CTRL[82].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL83      STCU2.MB_CTRL[83].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL84      STCU2.MB_CTRL[84].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL85      STCU2.MB_CTRL[85].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL86      STCU2.MB_CTRL[86].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL87      STCU2.MB_CTRL[87].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL88      STCU2.MB_CTRL[88].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL89      STCU2.MB_CTRL[89].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL90      STCU2.MB_CTRL[90].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL91      STCU2.MB_CTRL[91].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL92      STCU2.MB_CTRL[92].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL93      STCU2.MB_CTRL[93].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL94      STCU2.MB_CTRL[94].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL95      STCU2.MB_CTRL[95].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL96      STCU2.MB_CTRL[96].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL97      STCU2.MB_CTRL[97].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL98      STCU2.MB_CTRL[98].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL99      STCU2.MB_CTRL[99].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL100     STCU2.MB_CTRL[100].R          /* STCU2 MBIST Control */
#define STCU2_MB_CTRL101     STCU2.MB_CTRL[101].R          /* STCU2 MBIST Control */
#define STCU2_MB_CTRL102     STCU2.MB_CTRL[102].R          /* STCU2 MBIST Control */
#define STCU2_MB_CTRL103     STCU2.MB_CTRL[103].R          /* STCU2 MBIST Control */
#define STCU2_MB_CTRL104     STCU2.MB_CTRL[104].R          /* STCU2 MBIST Control */
#define STCU2_MB_CTRL105     STCU2.MB_CTRL[105].R          /* STCU2 MBIST Control */
#define STCU2_MB_CTRL106     STCU2.MB_CTRL[106].R          /* STCU2 MBIST Control */
#define STCU2_MB_CTRL107     STCU2.MB_CTRL[107].R          /* STCU2 MBIST Control */
#define STCU2_MB_CTRL108     STCU2.MB_CTRL[108].R          /* STCU2 MBIST Control */
#define STCU2_MB_CTRL109     STCU2.MB_CTRL[109].R          /* STCU2 MBIST Control */

/* STM */
#define STM_4_CR             STM_4.CR.R                    /* Control */
#define STM_4_CNT            STM_4.CNT.R                   /* Count */
#define STM_4_CCR0           STM_4.CHANNEL[0].CCR.R        /* Channel Control */
#define STM_4_CIR0           STM_4.CHANNEL[0].CIR.R        /* Channel Interrupt */
#define STM_4_CMP0           STM_4.CHANNEL[0].CMP.R        /* Channel Compare */
#define STM_4_CCR1           STM_4.CHANNEL[1].CCR.R        /* Channel Control */
#define STM_4_CIR1           STM_4.CHANNEL[1].CIR.R        /* Channel Interrupt */
#define STM_4_CMP1           STM_4.CHANNEL[1].CMP.R        /* Channel Compare */
#define STM_4_CCR2           STM_4.CHANNEL[2].CCR.R        /* Channel Control */
#define STM_4_CIR2           STM_4.CHANNEL[2].CIR.R        /* Channel Interrupt */
#define STM_4_CMP2           STM_4.CHANNEL[2].CMP.R        /* Channel Compare */
#define STM_4_CCR3           STM_4.CHANNEL[3].CCR.R        /* Channel Control */
#define STM_4_CIR3           STM_4.CHANNEL[3].CIR.R        /* Channel Interrupt */
#define STM_4_CMP3           STM_4.CHANNEL[3].CMP.R        /* Channel Compare */

#define STM_5_CR             STM_5.CR.R                    /* Control */
#define STM_5_CNT            STM_5.CNT.R                   /* Count */
#define STM_5_CCR0           STM_5.CHANNEL[0].CCR.R        /* Channel Control */
#define STM_5_CIR0           STM_5.CHANNEL[0].CIR.R        /* Channel Interrupt */
#define STM_5_CMP0           STM_5.CHANNEL[0].CMP.R        /* Channel Compare */
#define STM_5_CCR1           STM_5.CHANNEL[1].CCR.R        /* Channel Control */
#define STM_5_CIR1           STM_5.CHANNEL[1].CIR.R        /* Channel Interrupt */
#define STM_5_CMP1           STM_5.CHANNEL[1].CMP.R        /* Channel Compare */
#define STM_5_CCR2           STM_5.CHANNEL[2].CCR.R        /* Channel Control */
#define STM_5_CIR2           STM_5.CHANNEL[2].CIR.R        /* Channel Interrupt */
#define STM_5_CMP2           STM_5.CHANNEL[2].CMP.R        /* Channel Compare */
#define STM_5_CCR3           STM_5.CHANNEL[3].CCR.R        /* Channel Control */
#define STM_5_CIR3           STM_5.CHANNEL[3].CIR.R        /* Channel Interrupt */
#define STM_5_CMP3           STM_5.CHANNEL[3].CMP.R        /* Channel Compare */

#define STM_6_CR             STM_6.CR.R                    /* Control */
#define STM_6_CNT            STM_6.CNT.R                   /* Count */
#define STM_6_CCR0           STM_6.CHANNEL[0].CCR.R        /* Channel Control */
#define STM_6_CIR0           STM_6.CHANNEL[0].CIR.R        /* Channel Interrupt */
#define STM_6_CMP0           STM_6.CHANNEL[0].CMP.R        /* Channel Compare */
#define STM_6_CCR1           STM_6.CHANNEL[1].CCR.R        /* Channel Control */
#define STM_6_CIR1           STM_6.CHANNEL[1].CIR.R        /* Channel Interrupt */
#define STM_6_CMP1           STM_6.CHANNEL[1].CMP.R        /* Channel Compare */
#define STM_6_CCR2           STM_6.CHANNEL[2].CCR.R        /* Channel Control */
#define STM_6_CIR2           STM_6.CHANNEL[2].CIR.R        /* Channel Interrupt */
#define STM_6_CMP2           STM_6.CHANNEL[2].CMP.R        /* Channel Compare */
#define STM_6_CCR3           STM_6.CHANNEL[3].CCR.R        /* Channel Control */
#define STM_6_CIR3           STM_6.CHANNEL[3].CIR.R        /* Channel Interrupt */
#define STM_6_CMP3           STM_6.CHANNEL[3].CMP.R        /* Channel Compare */

#define STM_7_CR             STM_7.CR.R                    /* Control */
#define STM_7_CNT            STM_7.CNT.R                   /* Count */
#define STM_7_CCR0           STM_7.CHANNEL[0].CCR.R        /* Channel Control */
#define STM_7_CIR0           STM_7.CHANNEL[0].CIR.R        /* Channel Interrupt */
#define STM_7_CMP0           STM_7.CHANNEL[0].CMP.R        /* Channel Compare */
#define STM_7_CCR1           STM_7.CHANNEL[1].CCR.R        /* Channel Control */
#define STM_7_CIR1           STM_7.CHANNEL[1].CIR.R        /* Channel Interrupt */
#define STM_7_CMP1           STM_7.CHANNEL[1].CMP.R        /* Channel Compare */
#define STM_7_CCR2           STM_7.CHANNEL[2].CCR.R        /* Channel Control */
#define STM_7_CIR2           STM_7.CHANNEL[2].CIR.R        /* Channel Interrupt */
#define STM_7_CMP2           STM_7.CHANNEL[2].CMP.R        /* Channel Compare */
#define STM_7_CCR3           STM_7.CHANNEL[3].CCR.R        /* Channel Control */
#define STM_7_CIR3           STM_7.CHANNEL[3].CIR.R        /* Channel Interrupt */
#define STM_7_CMP3           STM_7.CHANNEL[3].CMP.R        /* Channel Compare */

#define STM_0_CR             STM_0.CR.R                    /* Control */
#define STM_0_CNT            STM_0.CNT.R                   /* Count */
#define STM_0_CCR0           STM_0.CHANNEL[0].CCR.R        /* Channel Control */
#define STM_0_CIR0           STM_0.CHANNEL[0].CIR.R        /* Channel Interrupt */
#define STM_0_CMP0           STM_0.CHANNEL[0].CMP.R        /* Channel Compare */
#define STM_0_CCR1           STM_0.CHANNEL[1].CCR.R        /* Channel Control */
#define STM_0_CIR1           STM_0.CHANNEL[1].CIR.R        /* Channel Interrupt */
#define STM_0_CMP1           STM_0.CHANNEL[1].CMP.R        /* Channel Compare */
#define STM_0_CCR2           STM_0.CHANNEL[2].CCR.R        /* Channel Control */
#define STM_0_CIR2           STM_0.CHANNEL[2].CIR.R        /* Channel Interrupt */
#define STM_0_CMP2           STM_0.CHANNEL[2].CMP.R        /* Channel Compare */
#define STM_0_CCR3           STM_0.CHANNEL[3].CCR.R        /* Channel Control */
#define STM_0_CIR3           STM_0.CHANNEL[3].CIR.R        /* Channel Interrupt */
#define STM_0_CMP3           STM_0.CHANNEL[3].CMP.R        /* Channel Compare */

#define STM_1_CR             STM_1.CR.R                    /* Control */
#define STM_1_CNT            STM_1.CNT.R                   /* Count */
#define STM_1_CCR0           STM_1.CHANNEL[0].CCR.R        /* Channel Control */
#define STM_1_CIR0           STM_1.CHANNEL[0].CIR.R        /* Channel Interrupt */
#define STM_1_CMP0           STM_1.CHANNEL[0].CMP.R        /* Channel Compare */
#define STM_1_CCR1           STM_1.CHANNEL[1].CCR.R        /* Channel Control */
#define STM_1_CIR1           STM_1.CHANNEL[1].CIR.R        /* Channel Interrupt */
#define STM_1_CMP1           STM_1.CHANNEL[1].CMP.R        /* Channel Compare */
#define STM_1_CCR2           STM_1.CHANNEL[2].CCR.R        /* Channel Control */
#define STM_1_CIR2           STM_1.CHANNEL[2].CIR.R        /* Channel Interrupt */
#define STM_1_CMP2           STM_1.CHANNEL[2].CMP.R        /* Channel Compare */
#define STM_1_CCR3           STM_1.CHANNEL[3].CCR.R        /* Channel Control */
#define STM_1_CIR3           STM_1.CHANNEL[3].CIR.R        /* Channel Interrupt */
#define STM_1_CMP3           STM_1.CHANNEL[3].CMP.R        /* Channel Compare */

#define STM_2_CR             STM_2.CR.R                    /* Control */
#define STM_2_CNT            STM_2.CNT.R                   /* Count */
#define STM_2_CCR0           STM_2.CHANNEL[0].CCR.R        /* Channel Control */
#define STM_2_CIR0           STM_2.CHANNEL[0].CIR.R        /* Channel Interrupt */
#define STM_2_CMP0           STM_2.CHANNEL[0].CMP.R        /* Channel Compare */
#define STM_2_CCR1           STM_2.CHANNEL[1].CCR.R        /* Channel Control */
#define STM_2_CIR1           STM_2.CHANNEL[1].CIR.R        /* Channel Interrupt */
#define STM_2_CMP1           STM_2.CHANNEL[1].CMP.R        /* Channel Compare */
#define STM_2_CCR2           STM_2.CHANNEL[2].CCR.R        /* Channel Control */
#define STM_2_CIR2           STM_2.CHANNEL[2].CIR.R        /* Channel Interrupt */
#define STM_2_CMP2           STM_2.CHANNEL[2].CMP.R        /* Channel Compare */
#define STM_2_CCR3           STM_2.CHANNEL[3].CCR.R        /* Channel Control */
#define STM_2_CIR3           STM_2.CHANNEL[3].CIR.R        /* Channel Interrupt */
#define STM_2_CMP3           STM_2.CHANNEL[3].CMP.R        /* Channel Compare */

#define STM_3_CR             STM_3.CR.R                    /* Control */
#define STM_3_CNT            STM_3.CNT.R                   /* Count */
#define STM_3_CCR0           STM_3.CHANNEL[0].CCR.R        /* Channel Control */
#define STM_3_CIR0           STM_3.CHANNEL[0].CIR.R        /* Channel Interrupt */
#define STM_3_CMP0           STM_3.CHANNEL[0].CMP.R        /* Channel Compare */
#define STM_3_CCR1           STM_3.CHANNEL[1].CCR.R        /* Channel Control */
#define STM_3_CIR1           STM_3.CHANNEL[1].CIR.R        /* Channel Interrupt */
#define STM_3_CMP1           STM_3.CHANNEL[1].CMP.R        /* Channel Compare */
#define STM_3_CCR2           STM_3.CHANNEL[2].CCR.R        /* Channel Control */
#define STM_3_CIR2           STM_3.CHANNEL[2].CIR.R        /* Channel Interrupt */
#define STM_3_CMP2           STM_3.CHANNEL[2].CMP.R        /* Channel Compare */
#define STM_3_CCR3           STM_3.CHANNEL[3].CCR.R        /* Channel Control */
#define STM_3_CIR3           STM_3.CHANNEL[3].CIR.R        /* Channel Interrupt */
#define STM_3_CMP3           STM_3.CHANNEL[3].CMP.R        /* Channel Compare */

/* STM_TS */
#define STM_TS_CR            STM_TS.CR.R                   /* Control */
#define STM_TS_CNT           STM_TS.CNT.R                  /* Count */
#define STM_TS_CCR0          STM_TS.CHANNEL[0].CCR.R       /* Channel Control */
#define STM_TS_CIR0          STM_TS.CHANNEL[0].CIR.R       /* Channel Interrupt */
#define STM_TS_CMP0          STM_TS.CHANNEL[0].CMP.R       /* Channel Compare */
#define STM_TS_CCR1          STM_TS.CHANNEL[1].CCR.R       /* Channel Control */
#define STM_TS_CIR1          STM_TS.CHANNEL[1].CIR.R       /* Channel Interrupt */
#define STM_TS_CMP1          STM_TS.CHANNEL[1].CMP.R       /* Channel Compare */
#define STM_TS_CCR2          STM_TS.CHANNEL[2].CCR.R       /* Channel Control */
#define STM_TS_CIR2          STM_TS.CHANNEL[2].CIR.R       /* Channel Interrupt */
#define STM_TS_CMP2          STM_TS.CHANNEL[2].CMP.R       /* Channel Compare */
#define STM_TS_CCR3          STM_TS.CHANNEL[3].CCR.R       /* Channel Control */
#define STM_TS_CIR3          STM_TS.CHANNEL[3].CIR.R       /* Channel Interrupt */
#define STM_TS_CMP3          STM_TS.CHANNEL[3].CMP.R       /* Channel Compare */

/* SWT */
#define SWT_4_CR             SWT_4.CR.R                    /* Control */
#define SWT_4_IR             SWT_4.IR.R                    /* Interrupt */
#define SWT_4_TO             SWT_4.TO.R                    /* Timeout */
#define SWT_4_WN             SWT_4.WN.R                    /* Window */
#define SWT_4_SR             SWT_4.SR.R                    /* Service */
#define SWT_4_CO             SWT_4.CO.R                    /* Counter Output */
#define SWT_4_SK             SWT_4.SK.R                    /* Service Key */
#define SWT_4_RRR            SWT_4.RRR.R                   /* Reset Request */

#define SWT_5_CR             SWT_5.CR.R                    /* Control */
#define SWT_5_IR             SWT_5.IR.R                    /* Interrupt */
#define SWT_5_TO             SWT_5.TO.R                    /* Timeout */
#define SWT_5_WN             SWT_5.WN.R                    /* Window */
#define SWT_5_SR             SWT_5.SR.R                    /* Service */
#define SWT_5_CO             SWT_5.CO.R                    /* Counter Output */
#define SWT_5_SK             SWT_5.SK.R                    /* Service Key */
#define SWT_5_RRR            SWT_5.RRR.R                   /* Reset Request */

#define SWT_6_CR             SWT_6.CR.R                    /* Control */
#define SWT_6_IR             SWT_6.IR.R                    /* Interrupt */
#define SWT_6_TO             SWT_6.TO.R                    /* Timeout */
#define SWT_6_WN             SWT_6.WN.R                    /* Window */
#define SWT_6_SR             SWT_6.SR.R                    /* Service */
#define SWT_6_CO             SWT_6.CO.R                    /* Counter Output */
#define SWT_6_SK             SWT_6.SK.R                    /* Service Key */
#define SWT_6_RRR            SWT_6.RRR.R                   /* Reset Request */

#define SWT_0_CR             SWT_0.CR.R                    /* Control */
#define SWT_0_IR             SWT_0.IR.R                    /* Interrupt */
#define SWT_0_TO             SWT_0.TO.R                    /* Timeout */
#define SWT_0_WN             SWT_0.WN.R                    /* Window */
#define SWT_0_SR             SWT_0.SR.R                    /* Service */
#define SWT_0_CO             SWT_0.CO.R                    /* Counter Output */
#define SWT_0_SK             SWT_0.SK.R                    /* Service Key */
#define SWT_0_RRR            SWT_0.RRR.R                   /* Reset Request */

#define SWT_1_CR             SWT_1.CR.R                    /* Control */
#define SWT_1_IR             SWT_1.IR.R                    /* Interrupt */
#define SWT_1_TO             SWT_1.TO.R                    /* Timeout */
#define SWT_1_WN             SWT_1.WN.R                    /* Window */
#define SWT_1_SR             SWT_1.SR.R                    /* Service */
#define SWT_1_CO             SWT_1.CO.R                    /* Counter Output */
#define SWT_1_SK             SWT_1.SK.R                    /* Service Key */
#define SWT_1_RRR            SWT_1.RRR.R                   /* Reset Request */

#define SWT_2_CR             SWT_2.CR.R                    /* Control */
#define SWT_2_IR             SWT_2.IR.R                    /* Interrupt */
#define SWT_2_TO             SWT_2.TO.R                    /* Timeout */
#define SWT_2_WN             SWT_2.WN.R                    /* Window */
#define SWT_2_SR             SWT_2.SR.R                    /* Service */
#define SWT_2_CO             SWT_2.CO.R                    /* Counter Output */
#define SWT_2_SK             SWT_2.SK.R                    /* Service Key */
#define SWT_2_RRR            SWT_2.RRR.R                   /* Reset Request */

#define SWT_3_CR             SWT_3.CR.R                    /* Control */
#define SWT_3_IR             SWT_3.IR.R                    /* Interrupt */
#define SWT_3_TO             SWT_3.TO.R                    /* Timeout */
#define SWT_3_WN             SWT_3.WN.R                    /* Window */
#define SWT_3_SR             SWT_3.SR.R                    /* Service */
#define SWT_3_CO             SWT_3.CO.R                    /* Counter Output */
#define SWT_3_SK             SWT_3.SK.R                    /* Service Key */
#define SWT_3_RRR            SWT_3.RRR.R                   /* Reset Request */

/* SerDes_1_GPR */
#define SERDES_1_GPR_PCIE_Config_0 SERDES_1_GPR.PCIE_CONFIG_0.R /* Config_0_Register */

/* TMU */
#define TMU_TMR              TMU.TMR.R                     /* Mode */
#define TMU_TSR              TMU.TSR.R                     /* Status */
#define TMU_TMSR             TMU.TMSR.R                    /* Monitor Site */
#define TMU_TMTMIR           TMU.TMTMIR.R                  /* Monitor Temperature Measurement Interval */
#define TMU_TIER             TMU.TIER.R                    /* Interrupt Enable */
#define TMU_TIDR             TMU.TIDR.R                    /* Interrupt Detect */
#define TMU_TIISCR           TMU.TIISCR.R                  /* Interrupt Immediate Site Capture */
#define TMU_TIASCR           TMU.TIASCR.R                  /* Interrupt Average Site Capture */
#define TMU_TICSCR           TMU.TICSCR.R                  /* Interrupt Critical Site Capture */
#define TMU_TMHTCR           TMU.TMHTCR.R                  /* Monitor High Temperature Capture */
#define TMU_TMLTCR           TMU.TMLTCR.R                  /* Monitor Low Temperature Capture */
#define TMU_TMRTRCR          TMU.TMRTRCR.R                 /* Monitor Rising Temperature Rate Capture */
#define TMU_TMFTRCR          TMU.TMFTRCR.R                 /* Monitor Falling Temperature Rate Capture */
#define TMU_TMHTITR          TMU.TMHTITR.R                 /* Monitor High Temperature Immediate Threshold */
#define TMU_TMHTATR          TMU.TMHTATR.R                 /* Monitor High Temperature Average Threshold */
#define TMU_TMHTACTR         TMU.TMHTACTR.R                /* Monitor High Temperature Average Critical Threshold */
#define TMU_TMLTITR          TMU.TMLTITR.R                 /* Monitor Low Temperature Immediate Threshold */
#define TMU_TMLTATR          TMU.TMLTATR.R                 /* Monitor Low Temperature Average Threshold */
#define TMU_TMLTACTR         TMU.TMLTACTR.R                /* Monitor Low Temperature Average Critical Threshold */
#define TMU_TMRTRCTR         TMU.TMRTRCTR.R                /* Monitor Rising Temperature Rate Critical Threshold */
#define TMU_TMFTRCTR         TMU.TMFTRCTR.R                /* Monitor Falling Temperature Rate Critical Threshold */
#define TMU_TTCFGR           TMU.TTCFGR.R                  /* Temperature Configuration */
#define TMU_TSCFGR           TMU.TSCFGR.R                  /* Sensor Configuration */
#define TMU_TRITSR0          TMU.TRITRATSR[0].TRITSR.R     /* Report Immediate Temperature at Site */
#define TMU_TRATSR0          TMU.TRITRATSR[0].TRATSR.R     /* Report Average Temperature at Site */
#define TMU_TRITSR1          TMU.TRITRATSR[1].TRITSR.R     /* Report Immediate Temperature at Site */
#define TMU_TRATSR1          TMU.TRITRATSR[1].TRATSR.R     /* Report Average Temperature at Site */
#define TMU_TRITSR2          TMU.TRITRATSR[2].TRITSR.R     /* Report Immediate Temperature at Site */
#define TMU_TRATSR2          TMU.TRITRATSR[2].TRATSR.R     /* Report Average Temperature at Site */
#define TMU_TCMCFG           TMU.TCMCFG.R                  /* Central Module Configuration */
#define TMU_TTRCR0           TMU.TTRCR[0].R                /* Temperature Range Control 0 */
#define TMU_TTRCR1           TMU.TTRCR[1].R                /* Temperature Range Control 1 */
#define TMU_TTRCR2           TMU.TTRCR[2].R                /* Temperature Range Control 2 */
#define TMU_TTRCR3           TMU.TTRCR[3].R                /* Temperature Range Control 3 */
#define TMU_TTRCR4           TMU.TTRCR[4].R                /* Temperature Range Control 4 */
#define TMU_TTRCR5           TMU.TTRCR[5].R                /* Temperature Range Control 5 */
#define TMU_TTRCR6           TMU.TTRCR[6].R                /* Temperature Range Control 6 */
#define TMU_TTRCR7           TMU.TTRCR[7].R                /* Temperature Range Control 7 */
#define TMU_TTRCR8           TMU.TTRCR[8].R                /* Temperature Range Control 8 */
#define TMU_TTRCR9           TMU.TTRCR[9].R                /* Temperature Range Control 9 */
#define TMU_TTRCR10          TMU.TTRCR[10].R               /* Temperature Range Control 10 */
#define TMU_TTRCR11          TMU.TTRCR[11].R               /* Temperature Range Control 11 */
#define TMU_TTRCR12          TMU.TTRCR[12].R               /* Temperature Range Control 12 */
#define TMU_TTRCR13          TMU.TTRCR[13].R               /* Temperature Range Control 13 */
#define TMU_TTRCR14          TMU.TTRCR[14].R               /* Temperature Range Control 14 */
#define TMU_TTRCR15          TMU.TTRCR[15].R               /* Temperature Range Control 15 */

/* UMCTL2_MP */
#define UMCTL2_MP_PSTAT      UMCTL2_MP.PSTAT.R             /* Port Status */
#define UMCTL2_MP_PCCFG      UMCTL2_MP.PCCFG.R             /* Port Common Configuration */
#define UMCTL2_MP_PCFGR_0    UMCTL2_MP.PCFGR_0.R           /* Port n Configuration Read */
#define UMCTL2_MP_PCFGW_0    UMCTL2_MP.PCFGW_0.R           /* Port n Configuration Write */
#define UMCTL2_MP_PCTRL_0    UMCTL2_MP.PCTRL_0.R           /* Port n Control */
#define UMCTL2_MP_PCFGQOS0_0 UMCTL2_MP.PCFGQOS0_0.R        /* Port n Read QoS Configuration Register 0 */
#define UMCTL2_MP_PCFGQOS1_0 UMCTL2_MP.PCFGQOS1_0.R        /* Port n Read QoS Configuration Register 1 */
#define UMCTL2_MP_PCFGWQOS0_0 UMCTL2_MP.PCFGWQOS0_0.R      /* Port n Write QoS Configuration Register 0 */
#define UMCTL2_MP_PCFGWQOS1_0 UMCTL2_MP.PCFGWQOS1_0.R      /* Port n Write QoS Configuration Register 1 */
#define UMCTL2_MP_PCFGR_1    UMCTL2_MP.PCFGR_1.R           /* Port n Configuration Read */
#define UMCTL2_MP_PCFGW_1    UMCTL2_MP.PCFGW_1.R           /* Port n Configuration Write */
#define UMCTL2_MP_PCTRL_1    UMCTL2_MP.PCTRL_1.R           /* Port n Control */
#define UMCTL2_MP_PCFGQOS0_1 UMCTL2_MP.PCFGQOS0_1.R        /* Port n Read QoS Configuration Register 0 */
#define UMCTL2_MP_PCFGQOS1_1 UMCTL2_MP.PCFGQOS1_1.R        /* Port n Read QoS Configuration Register 1 */
#define UMCTL2_MP_PCFGWQOS0_1 UMCTL2_MP.PCFGWQOS0_1.R      /* Port n Write QoS Configuration Register 0 */
#define UMCTL2_MP_PCFGWQOS1_1 UMCTL2_MP.PCFGWQOS1_1.R      /* Port n Write QoS Configuration Register 1 */
#define UMCTL2_MP_PCFGR_2    UMCTL2_MP.PCFGR_2.R           /* Port n Configuration Read */
#define UMCTL2_MP_PCFGW_2    UMCTL2_MP.PCFGW_2.R           /* Port n Configuration Write */
#define UMCTL2_MP_PCTRL_2    UMCTL2_MP.PCTRL_2.R           /* Port n Control */
#define UMCTL2_MP_PCFGQOS0_2 UMCTL2_MP.PCFGQOS0_2.R        /* Port n Read QoS Configuration Register 0 */
#define UMCTL2_MP_PCFGQOS1_2 UMCTL2_MP.PCFGQOS1_2.R        /* Port n Read QoS Configuration Register 1 */
#define UMCTL2_MP_PCFGWQOS0_2 UMCTL2_MP.PCFGWQOS0_2.R      /* Port n Write QoS Configuration Register 0 */
#define UMCTL2_MP_PCFGWQOS1_2 UMCTL2_MP.PCFGWQOS1_2.R      /* Port n Write QoS Configuration Register 1 */
#define UMCTL2_MP_SBRCTL     UMCTL2_MP.SBRCTL.R            /* Scrubber Control */
#define UMCTL2_MP_SBRSTAT    UMCTL2_MP.SBRSTAT.R           /* Scrubber Status */
#define UMCTL2_MP_SBRWDATA0  UMCTL2_MP.SBRWDATA0.R         /* Scrubber Write Data Pattern0 */

/* UMCTL2_REGS */
#define UMCTL2_REGS_MSTR     UMCTL2_REGS.MSTR.R            /* Master */
#define UMCTL2_REGS_STAT     UMCTL2_REGS.STAT.R            /* Operating mode status */
#define UMCTL2_REGS_MRCTRL0  UMCTL2_REGS.MRCTRL0.R         /* Mode Register read/write control 0 */
#define UMCTL2_REGS_MRCTRL1  UMCTL2_REGS.MRCTRL1.R         /* Mode Register Read/Write Control 1 */
#define UMCTL2_REGS_MRSTAT   UMCTL2_REGS.MRSTAT.R          /* Mode Register Read/Write Status */
#define UMCTL2_REGS_MRCTRL2  UMCTL2_REGS.MRCTRL2.R         /* Mode Register Read/Write Control 2 */
#define UMCTL2_REGS_DERATEEN UMCTL2_REGS.DERATEEN.R        /* Temperature derate enable */
#define UMCTL2_REGS_DERATEINT UMCTL2_REGS.DERATEINT.R      /* Temperature derate interval */
#define UMCTL2_REGS_DERATECTL UMCTL2_REGS.DERATECTL.R      /* Temperature derate control */
#define UMCTL2_REGS_PWRCTL   UMCTL2_REGS.PWRCTL.R          /* Low power control */
#define UMCTL2_REGS_PWRTMG   UMCTL2_REGS.PWRTMG.R          /* Low Power Timing */
#define UMCTL2_REGS_HWLPCTL  UMCTL2_REGS.HWLPCTL.R         /* Hardware low power control */
#define UMCTL2_REGS_RFSHCTL0 UMCTL2_REGS.RFSHCTL0.R        /* Refresh Control 0 */
#define UMCTL2_REGS_RFSHCTL1 UMCTL2_REGS.RFSHCTL1.R        /* Refresh control 1 */
#define UMCTL2_REGS_RFSHCTL3 UMCTL2_REGS.RFSHCTL3.R        /* Refresh Control 3 */
#define UMCTL2_REGS_RFSHTMG  UMCTL2_REGS.RFSHTMG.R         /* Refresh Timing */
#define UMCTL2_REGS_RFSHTMG1 UMCTL2_REGS.RFSHTMG1.R        /* Refresh timing 1 */
#define UMCTL2_REGS_ECCCFG0  UMCTL2_REGS.ECCCFG0.R         /* ECC Configuration 0 */
#define UMCTL2_REGS_ECCCFG1  UMCTL2_REGS.ECCCFG1.R         /* ECC Configuration 1 */
#define UMCTL2_REGS_ECCSTAT  UMCTL2_REGS.ECCSTAT.R         /* SECDED ECC Status */
#define UMCTL2_REGS_ECCCTL   UMCTL2_REGS.ECCCTL.R          /* ECC Control */
#define UMCTL2_REGS_ECCERRCNT UMCTL2_REGS.ECCERRCNT.R      /* ECC Error Counter */
#define UMCTL2_REGS_ECCCADDR0 UMCTL2_REGS.ECCCADDR0.R      /* ECC Corrected Error Address 0 */
#define UMCTL2_REGS_ECCCADDR1 UMCTL2_REGS.ECCCADDR1.R      /* ECC Corrected Error Address 1 */
#define UMCTL2_REGS_ECCCSYN0 UMCTL2_REGS.ECCCSYN0.R        /* ECC Corrected Syndrome 0 */
#define UMCTL2_REGS_ECCCSYN1 UMCTL2_REGS.ECCCSYN1.R        /* ECC Corrected Syndrome 1 */
#define UMCTL2_REGS_ECCCSYN2 UMCTL2_REGS.ECCCSYN2.R        /* ECC Corrected Syndrome 2 */
#define UMCTL2_REGS_ECCBITMASK0 UMCTL2_REGS.ECCBITMASK0.R  /* ECC Corrected Data Bit Mask 0 */
#define UMCTL2_REGS_ECCBITMASK1 UMCTL2_REGS.ECCBITMASK1.R  /* ECC Corrected Data Bit Mask 1 */
#define UMCTL2_REGS_ECCBITMASK2 UMCTL2_REGS.ECCBITMASK2.R  /* ECC Corrected Data Bit Mask 2 */
#define UMCTL2_REGS_ECCUADDR0 UMCTL2_REGS.ECCUADDR0.R      /* ECC Uncorrected Error Address 0 */
#define UMCTL2_REGS_ECCUADDR1 UMCTL2_REGS.ECCUADDR1.R      /* ECC Uncorrected Error Address 1 */
#define UMCTL2_REGS_ECCUSYN0 UMCTL2_REGS.ECCUSYN0.R        /* ECC Uncorrected Syndrome 0 */
#define UMCTL2_REGS_ECCUSYN1 UMCTL2_REGS.ECCUSYN1.R        /* ECC Uncorrected Syndrome 1 */
#define UMCTL2_REGS_ECCUSYN2 UMCTL2_REGS.ECCUSYN2.R        /* ECC Uncorrected Syndrome 2 */
#define UMCTL2_REGS_ECCPOISONADDR0 UMCTL2_REGS.ECCPOISONADDR0.R /* ECC Data Poisoning Address 0 */
#define UMCTL2_REGS_ECCPOISONADDR1 UMCTL2_REGS.ECCPOISONADDR1.R /* ECC Data Poisoning Address 1 */
#define UMCTL2_REGS_CRCPARCTL0 UMCTL2_REGS.CRCPARCTL0.R    /* CRC Parity Control 0 */
#define UMCTL2_REGS_CRCPARCTL1 UMCTL2_REGS.CRCPARCTL1.R    /* CRC Parity Control 1 */
#define UMCTL2_REGS_CRCPARSTAT UMCTL2_REGS.CRCPARSTAT.R    /* CRC Parity Status */
#define UMCTL2_REGS_INIT0    UMCTL2_REGS.INIT0.R           /* DRAM Initialization 0 */
#define UMCTL2_REGS_INIT1    UMCTL2_REGS.INIT1.R           /* DRAM Initialization 1 */
#define UMCTL2_REGS_INIT2    UMCTL2_REGS.INIT2.R           /* DRAM Initialization 2 */
#define UMCTL2_REGS_INIT3    UMCTL2_REGS.INIT3.R           /* DRAM Initialization 3 */
#define UMCTL2_REGS_INIT4    UMCTL2_REGS.INIT4.R           /* DRAM Initialization 4 */
#define UMCTL2_REGS_INIT5    UMCTL2_REGS.INIT5.R           /* DRAM Initialization 5 */
#define UMCTL2_REGS_INIT6    UMCTL2_REGS.INIT6.R           /* DRAM Initialization 6 */
#define UMCTL2_REGS_INIT7    UMCTL2_REGS.INIT7.R           /* DRAM Initialization 7 */
#define UMCTL2_REGS_DIMMCTL  UMCTL2_REGS.DIMMCTL.R         /* DIMM Control */
#define UMCTL2_REGS_RANKCTL  UMCTL2_REGS.RANKCTL.R         /* Rank Control */
#define UMCTL2_REGS_DRAMTMG0 UMCTL2_REGS.DRAMTMG0.R        /* DRAM Timing 0 */
#define UMCTL2_REGS_DRAMTMG1 UMCTL2_REGS.DRAMTMG1.R        /* DRAM Timing 1 */
#define UMCTL2_REGS_DRAMTMG2 UMCTL2_REGS.DRAMTMG2.R        /* DRAM Timing 2 */
#define UMCTL2_REGS_DRAMTMG3 UMCTL2_REGS.DRAMTMG3.R        /* DRAM Timing 3 */
#define UMCTL2_REGS_DRAMTMG4 UMCTL2_REGS.DRAMTMG4.R        /* DRAM Timing 4 */
#define UMCTL2_REGS_DRAMTMG5 UMCTL2_REGS.DRAMTMG5.R        /* DRAM Timing 5 */
#define UMCTL2_REGS_DRAMTMG6 UMCTL2_REGS.DRAMTMG6.R        /* DRAM Timing 6 */
#define UMCTL2_REGS_DRAMTMG7 UMCTL2_REGS.DRAMTMG7.R        /* DRAM Timing 7 */
#define UMCTL2_REGS_DRAMTMG8 UMCTL2_REGS.DRAMTMG8.R        /* DRAM Timing 8 */
#define UMCTL2_REGS_DRAMTMG9 UMCTL2_REGS.DRAMTMG9.R        /* DRAM Timing 9 */
#define UMCTL2_REGS_DRAMTMG10 UMCTL2_REGS.DRAMTMG10.R      /* DRAM Timing 10 */
#define UMCTL2_REGS_DRAMTMG11 UMCTL2_REGS.DRAMTMG11.R      /* DRAM Timing 11 */
#define UMCTL2_REGS_DRAMTMG12 UMCTL2_REGS.DRAMTMG12.R      /* DRAM Timing 12 */
#define UMCTL2_REGS_DRAMTMG13 UMCTL2_REGS.DRAMTMG13.R      /* DRAM Timing 13 */
#define UMCTL2_REGS_DRAMTMG14 UMCTL2_REGS.DRAMTMG14.R      /* DRAM Timing 14 */
#define UMCTL2_REGS_DRAMTMG15 UMCTL2_REGS.DRAMTMG15.R      /* DRAM Timing 15 */
#define UMCTL2_REGS_ZQCTL0   UMCTL2_REGS.ZQCTL0.R          /* ZQ Control 0 */
#define UMCTL2_REGS_ZQCTL1   UMCTL2_REGS.ZQCTL1.R          /* ZQ Control 1 */
#define UMCTL2_REGS_ZQCTL2   UMCTL2_REGS.ZQCTL2.R          /* ZQ Control 2 */
#define UMCTL2_REGS_ZQSTAT   UMCTL2_REGS.ZQSTAT.R          /* ZQ Status */
#define UMCTL2_REGS_DFITMG0  UMCTL2_REGS.DFITMG0.R         /* DFI Timing 0 */
#define UMCTL2_REGS_DFITMG1  UMCTL2_REGS.DFITMG1.R         /* DFI Timing 1 */
#define UMCTL2_REGS_DFILPCFG0 UMCTL2_REGS.DFILPCFG0.R      /* DFI Low Power Configuration 0 */
#define UMCTL2_REGS_DFILPCFG1 UMCTL2_REGS.DFILPCFG1.R      /* DFI Low Power Configuration 1 */
#define UMCTL2_REGS_DFIUPD0  UMCTL2_REGS.DFIUPD0.R         /* DFI Update 0 */
#define UMCTL2_REGS_DFIUPD1  UMCTL2_REGS.DFIUPD1.R         /* DFI Update 1 */
#define UMCTL2_REGS_DFIUPD2  UMCTL2_REGS.DFIUPD2.R         /* DFI Update 2 */
#define UMCTL2_REGS_DFIMISC  UMCTL2_REGS.DFIMISC.R         /* DFI Miscellaneous Control */
#define UMCTL2_REGS_DFITMG2  UMCTL2_REGS.DFITMG2.R         /* DFI Timing 2 */
#define UMCTL2_REGS_DFITMG3  UMCTL2_REGS.DFITMG3.R         /* DFI Timing 3 */
#define UMCTL2_REGS_DFISTAT  UMCTL2_REGS.DFISTAT.R         /* DFI Status */
#define UMCTL2_REGS_DBICTL   UMCTL2_REGS.DBICTL.R          /* DM/DBI Control */
#define UMCTL2_REGS_DFIPHYMSTR UMCTL2_REGS.DFIPHYMSTR.R    /* DFI PHY Master */
#define UMCTL2_REGS_ADDRMAP0 UMCTL2_REGS.ADDRMAP0.R        /* Address Map 0 */
#define UMCTL2_REGS_ADDRMAP1 UMCTL2_REGS.ADDRMAP1.R        /* Address Map 1 */
#define UMCTL2_REGS_ADDRMAP2 UMCTL2_REGS.ADDRMAP2.R        /* Address Map 2 */
#define UMCTL2_REGS_ADDRMAP3 UMCTL2_REGS.ADDRMAP3.R        /* Address Map 3 */
#define UMCTL2_REGS_ADDRMAP4 UMCTL2_REGS.ADDRMAP4.R        /* Address Map 4 */
#define UMCTL2_REGS_ADDRMAP5 UMCTL2_REGS.ADDRMAP5.R        /* Address Map 5 */
#define UMCTL2_REGS_ADDRMAP6 UMCTL2_REGS.ADDRMAP6.R        /* Address Map 6 */
#define UMCTL2_REGS_ADDRMAP7 UMCTL2_REGS.ADDRMAP7.R        /* Address Map 7 */
#define UMCTL2_REGS_ADDRMAP8 UMCTL2_REGS.ADDRMAP8.R        /* Address Map 8 */
#define UMCTL2_REGS_ADDRMAP9 UMCTL2_REGS.ADDRMAP9.R        /* Address Map 9 */
#define UMCTL2_REGS_ADDRMAP10 UMCTL2_REGS.ADDRMAP10.R      /* Address Map 10 */
#define UMCTL2_REGS_ADDRMAP11 UMCTL2_REGS.ADDRMAP11.R      /* Address Map 11 */
#define UMCTL2_REGS_ODTCFG   UMCTL2_REGS.ODTCFG.R          /* ODT Configuration */
#define UMCTL2_REGS_ODTMAP   UMCTL2_REGS.ODTMAP.R          /* ODT/Rank Map */
#define UMCTL2_REGS_SCHED    UMCTL2_REGS.SCHED.R           /* Scheduler Control */
#define UMCTL2_REGS_SCHED1   UMCTL2_REGS.SCHED1.R          /* Scheduler Control 1 */
#define UMCTL2_REGS_PERFHPR1 UMCTL2_REGS.PERFHPR1.R        /* High Priority Read CAM 1 */
#define UMCTL2_REGS_PERFLPR1 UMCTL2_REGS.PERFLPR1.R        /* Low Priority Read CAM 1 */
#define UMCTL2_REGS_PERFWR1  UMCTL2_REGS.PERFWR1.R         /* Write CAM 1 */
#define UMCTL2_REGS_DBG0     UMCTL2_REGS.DBG0.R            /* Debug 0 */
#define UMCTL2_REGS_DBG1     UMCTL2_REGS.DBG1.R            /* Debug 1 */
#define UMCTL2_REGS_DBGCAM   UMCTL2_REGS.DBGCAM.R          /* CAM Debug */
#define UMCTL2_REGS_DBGCMD   UMCTL2_REGS.DBGCMD.R          /* Command Debug */
#define UMCTL2_REGS_DBGSTAT  UMCTL2_REGS.DBGSTAT.R         /* Status Debug */
#define UMCTL2_REGS_DBGCAM1  UMCTL2_REGS.DBGCAM1.R         /* CAM Debug 1 */
#define UMCTL2_REGS_SWCTL    UMCTL2_REGS.SWCTL.R           /* Software Register Programming Control Enable */
#define UMCTL2_REGS_SWSTAT   UMCTL2_REGS.SWSTAT.R          /* Software Register Programming Control Status */
#define UMCTL2_REGS_OCPARCFG0 UMCTL2_REGS.OCPARCFG0.R      /* On-Chip Parity Configuration 0 */
#define UMCTL2_REGS_OCPARCFG1 UMCTL2_REGS.OCPARCFG1.R      /* On-Chip Parity Configuration 1 */
#define UMCTL2_REGS_OCPARSTAT0 UMCTL2_REGS.OCPARSTAT0.R    /* On-Chip Parity Status 0 */
#define UMCTL2_REGS_OCPARSTAT1 UMCTL2_REGS.OCPARSTAT1.R    /* On-Chip Parity Status 1 */
#define UMCTL2_REGS_OCPARSTAT2 UMCTL2_REGS.OCPARSTAT2.R    /* On-Chip Parity Status 2 */
#define UMCTL2_REGS_POISONCFG UMCTL2_REGS.POISONCFG.R      /* AXI Poison Configuration */
#define UMCTL2_REGS_POISONSTAT UMCTL2_REGS.POISONSTAT.R    /* AXI Poison Status */
#define UMCTL2_REGS_ADVECCINDEX UMCTL2_REGS.ADVECCINDEX.R  /* Advanced ECC Index */
#define UMCTL2_REGS_ECCPOISONPAT0 UMCTL2_REGS.ECCPOISONPAT0.R /* ECC Poison Pattern 0 */
#define UMCTL2_REGS_ECCPOISONPAT2 UMCTL2_REGS.ECCPOISONPAT2.R /* ECC Poison Pattern 2 */
#define UMCTL2_REGS_ECCAPSTAT UMCTL2_REGS.ECCAPSTAT.R      /* Address protection within ECC Status */
#define UMCTL2_REGS_REGPARCFG UMCTL2_REGS.REGPARCFG.R      /* Register Parity Configuration */
#define UMCTL2_REGS_REGPARSTAT UMCTL2_REGS.REGPARSTAT.R    /* Register Parity Status */
#define UMCTL2_REGS_OCCAPCFG UMCTL2_REGS.OCCAPCFG.R        /* On-Chip command/Address Protection Configuration */
#define UMCTL2_REGS_OCCAPSTAT UMCTL2_REGS.OCCAPSTAT.R      /* On-Chip command/Address Protection Status */
#define UMCTL2_REGS_OCCAPCFG1 UMCTL2_REGS.OCCAPCFG1.R      /* On-Chip command/Address Protection Configuration 1 */
#define UMCTL2_REGS_OCCAPSTAT1 UMCTL2_REGS.OCCAPSTAT1.R    /* On-Chip command/Address Protection Status 1 */
#define UMCTL2_REGS_DERATESTAT UMCTL2_REGS.DERATESTAT.R    /* Temperature Derate Status */

/* UOTG */
#define UOTG_ID              UOTG.ID.R                     /* Identification Register */
#define UOTG_HWGENERAL       UOTG.HWGENERAL.R              /* General Hardware Parameters */
#define UOTG_HWHOST          UOTG.HWHOST.R                 /* Host Hardware Parameters */
#define UOTG_HWDEVICE        UOTG.HWDEVICE.R               /* Device Hardware Parameters */
#define UOTG_HWTXBUF         UOTG.HWTXBUF.R                /* TX Buffer Hardware Parameters */
#define UOTG_HWRXBUF         UOTG.HWRXBUF.R                /* RX Buffer Hardware Parameters */
#define UOTG_GPTIMER0LD      UOTG.GPTIMER[0].GPTIMERLD.R   /* General Purpose Timer Load */
#define UOTG_GPTIMER0CTRL    UOTG.GPTIMER[0].GPTIMERCTRL.R /* General Purpose Timer Controller */
#define UOTG_GPTIMER1LD      UOTG.GPTIMER[1].GPTIMERLD.R   /* General Purpose Timer Load */
#define UOTG_GPTIMER1CTRL    UOTG.GPTIMER[1].GPTIMERCTRL.R /* General Purpose Timer Controller */
#define UOTG_SBUSCFG         UOTG.SBUSCFG.R                /* System Bus Configuration */
#define UOTG_CAPLENGTH       UOTG.CAPLENGTH.R              /* Capability Register Length */
#define UOTG_HCIVERSION      UOTG.HCIVERSION.R             /* Host Controller Interface Version */
#define UOTG_HCSPARAMS       UOTG.HCSPARAMS.R              /* Host Controller Structural Parameters */
#define UOTG_HCCPARAMS       UOTG.HCCPARAMS.R              /* Host Controller Capability Parameters */
#define UOTG_DCIVERSION      UOTG.DCIVERSION.R             /* Device Controller Interface Version */
#define UOTG_DCCPARAMS       UOTG.DCCPARAMS.R              /* Device Controller Capability Parameters */
#define UOTG_USBCMD          UOTG.USBCMD.R                 /* USB Command Register */
#define UOTG_USBSTS          UOTG.USBSTS.R                 /* USB Status Register */
#define UOTG_USBINTR         UOTG.USBINTR.R                /* Interrupt Enable Register */
#define UOTG_FRINDEX         UOTG.FRINDEX.R                /* USB Frame Index */
#define UOTG_PERIODICLISTBASE_or_DEVICEADDR UOTG.PERIODICLISTBASE_OR_DEVICEADDR.R /* Frame List Base Address or Device Address */
#define UOTG_ASYNCLISTADDR_or_ENDPOINTLISTADDR UOTG.ASYNCLISTADDR_OR_ENDPOINTLISTADDR.R /* Next Asynch. Address or Endpoint List Address) */
#define UOTG_BURSTSIZE       UOTG.BURSTSIZE.R              /* Programmable Burst Size */
#define UOTG_TXFILLTUNING    UOTG.TXFILLTUNING.R           /* TX FIFO Fill Tuning */
#define UOTG_IC_USB          UOTG.IC_USB.R                 /* IC_USB enable and voltage negotiation */
#define UOTG_ULPI_VIEWPORT   UOTG.ULPI_VIEWPORT.R          /* ULPI Register Access */
#define UOTG_ENDPTNAK        UOTG.ENDPTNAK.R               /* Endpoint NAK */
#define UOTG_ENDPTNAKEN      UOTG.ENDPTNAKEN.R             /* Endpoint NAK Enable */
#define UOTG_CONFIGFLAG      UOTG.CONFIGFLAG.R             /* Configure Flag Register */
#define UOTG_PORTSC1         UOTG.PORTSC1.R                /* Port Status and Control */
#define UOTG_OTGSC           UOTG.OTGSC.R                  /* On-The-Go Status Control */
#define UOTG_USBMODE         UOTG.USBMODE.R                /* USB Device Mode */
#define UOTG_ENDPTSETUPSTAT  UOTG.ENDPTSETUPSTAT.R         /* Endpoint Setup Status */
#define UOTG_ENDPTPRIME      UOTG.ENDPTPRIME.R             /* Endpoint Initialization */
#define UOTG_ENDPTFLUSH      UOTG.ENDPTFLUSH.R             /* Endpoint De-Initialize */
#define UOTG_ENDPTSTAT       UOTG.ENDPTSTAT.R              /* Endpoint Status */
#define UOTG_ENDPTCOMPLETE   UOTG.ENDPTCOMPLETE.R          /* Endpoint Complete */
#define UOTG_ENDPTCTRL0      UOTG.ENDPTCTRL0.R             /* Endpoint Control 0 */
#define UOTG_ENDPTCTRL1      UOTG.ENDPTCTRL1.R             /* Endpoint Control */
#define UOTG_ENDPTCTRL2      UOTG.ENDPTCTRL2.R             /* Endpoint Control */
#define UOTG_ENDPTCTRL3      UOTG.ENDPTCTRL3.R             /* Endpoint Control */
#define UOTG_ENDPTCTRL4      UOTG.ENDPTCTRL4.R             /* Endpoint Control */
#define UOTG_ENDPTCTRL5      UOTG.ENDPTCTRL5.R             /* Endpoint Control */

/* UOTGNC */
#define UOTGNC_CR            UOTGNC.CR.R                   /* Control register */

/* USDHC */
#define USDHC_DS_ADDR        USDHC.DS_ADDR.R               /* DMA System Address */
#define USDHC_BLK_ATT        USDHC.BLK_ATT.R               /* Block Attributes */
#define USDHC_CMD_ARG        USDHC.CMD_ARG.R               /* Command Argument */
#define USDHC_CMD_XFR_TYP    USDHC.CMD_XFR_TYP.R           /* Command Transfer Type */
#define USDHC_CMD_RSP0       USDHC.CMD_RSP0.R              /* Command Response0 */
#define USDHC_CMD_RSP1       USDHC.CMD_RSP1.R              /* Command Response1 */
#define USDHC_CMD_RSP2       USDHC.CMD_RSP2.R              /* Command Response2 */
#define USDHC_CMD_RSP3       USDHC.CMD_RSP3.R              /* Command Response3 */
#define USDHC_DATA_BUFF_ACC_PORT USDHC.DATA_BUFF_ACC_PORT.R /* Data Buffer Access Port */
#define USDHC_PRES_STATE     USDHC.PRES_STATE.R            /* Present State */
#define USDHC_PROT_CTRL      USDHC.PROT_CTRL.R             /* Protocol Control */
#define USDHC_SYS_CTRL       USDHC.SYS_CTRL.R              /* System Control */
#define USDHC_INT_STATUS     USDHC.INT_STATUS.R            /* Interrupt Status */
#define USDHC_INT_STATUS_EN  USDHC.INT_STATUS_EN.R         /* Interrupt Status Enable */
#define USDHC_INT_SIGNAL_EN  USDHC.INT_SIGNAL_EN.R         /* Interrupt Signal Enable */
#define USDHC_AUTOCMD12_ERR_STATUS USDHC.AUTOCMD12_ERR_STATUS.R /* Auto CMD12 Error Status */
#define USDHC_HOST_CTRL_CAP  USDHC.HOST_CTRL_CAP.R         /* Host Controller Capabilities */
#define USDHC_WTMK_LVL       USDHC.WTMK_LVL.R              /* Watermark Level */
#define USDHC_MIX_CTRL       USDHC.MIX_CTRL.R              /* Mixer Control */
#define USDHC_FORCE_EVENT    USDHC.FORCE_EVENT.R           /* Force Event */
#define USDHC_ADMA_ERR_STATUS USDHC.ADMA_ERR_STATUS.R      /* ADMA Error Status */
#define USDHC_ADMA_SYS_ADDR  USDHC.ADMA_SYS_ADDR.R         /* ADMA System Address */
#define USDHC_DLL_CTRL       USDHC.DLL_CTRL.R              /* DLL (Delay Line) Control */
#define USDHC_DLL_STATUS     USDHC.DLL_STATUS.R            /* DLL Status */
#define USDHC_CLK_TUNE_CTRL_STATUS USDHC.CLK_TUNE_CTRL_STATUS.R /* CLK Tuning Control and Status */
#define USDHC_STROBE_DLL_CTRL USDHC.STROBE_DLL_CTRL.R      /* Strobe DLL control */
#define USDHC_STROBE_DLL_STATUS USDHC.STROBE_DLL_STATUS.R  /* Strobe DLL status */
#define USDHC_VEND_SPEC      USDHC.VEND_SPEC.R             /* Vendor Specific Register */
#define USDHC_MMC_BOOT       USDHC.MMC_BOOT.R              /* MMC Boot */
#define USDHC_VEND_SPEC2     USDHC.VEND_SPEC2.R            /* Vendor Specific 2 Register */
#define USDHC_TUNING_CTRL    USDHC.TUNING_CTRL.R           /* Tuning Control */
#define USDHC_CQE            USDHC.CQE.R                   /* Command Queue */

/* WKPU */
#define WKPU_NSR             WKPU.NSR.R                    /* NMI Status Flag Register */
#define WKPU_NCR             WKPU.NCR.R                    /* NMI Configuration Register */
#define WKPU_WBMSR           WKPU.WBMSR.R                  /* Wakeup Boot Mode Select Register */
#define WKPU_WISR            WKPU.WISR.R                   /* Wakeup/Interrupt Status Flag Register */
#define WKPU_IRER            WKPU.IRER.R                   /* Interrupt Request Enable Register */
#define WKPU_WRER            WKPU.WRER.R                   /* Wakeup Request Enable Register */
#define WKPU_WIREER          WKPU.WIREER.R                 /* Wakeup/Interrupt Rising-Edge Event Enable Register */
#define WKPU_WIFEER          WKPU.WIFEER.R                 /* Wakeup/Interrupt Falling-Edge Event Enable Register */
#define WKPU_WIFER           WKPU.WIFER.R                  /* Wakeup/Interrupt Filter Enable Register */
#define WKPU_WIPUER_WIPDER   WKPU.WIPUER_WIPDER.R          /* Wakeup/Interrupt Pull Enable Register */

/* XRDC */
#define XRDC_1_CR            XRDC_1.CR.R                   /* Control */
#define XRDC_1_HWCFG0        XRDC_1.HWCFG0.R               /* Hardware Configuration 0 */
#define XRDC_1_HWCFG1        XRDC_1.HWCFG1.R               /* Hardware Configuration 1 */
#define XRDC_1_HWCFG2        XRDC_1.HWCFG2.R               /* Hardware Configuration 2 */
#define XRDC_1_MDACFG0       XRDC_1.MDACFG[0].R            /* Master Domain Assignment Configuration */
#define XRDC_1_MDACFG1       XRDC_1.MDACFG[1].R            /* Master Domain Assignment Configuration */
#define XRDC_1_MDACFG2       XRDC_1.MDACFG[2].R            /* Master Domain Assignment Configuration */
#define XRDC_1_MDACFG3       XRDC_1.MDACFG[3].R            /* Master Domain Assignment Configuration */
#define XRDC_1_MDACFG4       XRDC_1.MDACFG[4].R            /* Master Domain Assignment Configuration */
#define XRDC_1_MDACFG5       XRDC_1.MDACFG[5].R            /* Master Domain Assignment Configuration */
#define XRDC_1_MDACFG6       XRDC_1.MDACFG[6].R            /* Master Domain Assignment Configuration */
#define XRDC_1_MDACFG7       XRDC_1.MDACFG[7].R            /* Master Domain Assignment Configuration */
#define XRDC_1_MRCFG0        XRDC_1.MRCFG[0].R             /* Memory Region Configuration */
#define XRDC_1_MRCFG1        XRDC_1.MRCFG[1].R             /* Memory Region Configuration */
#define XRDC_1_MRCFG2        XRDC_1.MRCFG[2].R             /* Memory Region Configuration */
#define XRDC_1_MRCFG3        XRDC_1.MRCFG[3].R             /* Memory Region Configuration */
#define XRDC_1_MRCFG4        XRDC_1.MRCFG[4].R             /* Memory Region Configuration */
#define XRDC_1_MRCFG5        XRDC_1.MRCFG[5].R             /* Memory Region Configuration */
#define XRDC_1_DERRLOC0      XRDC_1.DERRLOC[0].R           /* Domain Error Location */
#define XRDC_1_DERRLOC1      XRDC_1.DERRLOC[1].R           /* Domain Error Location */
#define XRDC_1_DERRLOC2      XRDC_1.DERRLOC[2].R           /* Domain Error Location */
#define XRDC_1_DERRLOC3      XRDC_1.DERRLOC[3].R           /* Domain Error Location */
#define XRDC_1_DERRLOC4      XRDC_1.DERRLOC[4].R           /* Domain Error Location */
#define XRDC_1_DERRLOC5      XRDC_1.DERRLOC[5].R           /* Domain Error Location */
#define XRDC_1_DERRLOC6      XRDC_1.DERRLOC[6].R           /* Domain Error Location */
#define XRDC_1_DERRLOC7      XRDC_1.DERRLOC[7].R           /* Domain Error Location */
#define XRDC_1_DERR_W0_0     XRDC_1.DERRW0[0].DERR_W0.R    /* Domain Error Word0 */
#define XRDC_1_DERR_W1_0     XRDC_1.DERRW0[0].DERR_W1.R    /* Domain Error Word1 */
#define XRDC_1_DERR_W2_0     XRDC_1.DERRW0[0].DERR_W2.R    /* Domain Error Word2 */
#define XRDC_1_DERR_W3_0     XRDC_1.DERRW0[0].DERR_W3.R    /* Domain Error Word3 */
#define XRDC_1_DERR_W0_1     XRDC_1.DERRW0[1].DERR_W0.R    /* Domain Error Word0 */
#define XRDC_1_DERR_W1_1     XRDC_1.DERRW0[1].DERR_W1.R    /* Domain Error Word1 */
#define XRDC_1_DERR_W2_1     XRDC_1.DERRW0[1].DERR_W2.R    /* Domain Error Word2 */
#define XRDC_1_DERR_W3_1     XRDC_1.DERRW0[1].DERR_W3.R    /* Domain Error Word3 */
#define XRDC_1_DERR_W0_2     XRDC_1.DERRW0[2].DERR_W0.R    /* Domain Error Word0 */
#define XRDC_1_DERR_W1_2     XRDC_1.DERRW0[2].DERR_W1.R    /* Domain Error Word1 */
#define XRDC_1_DERR_W2_2     XRDC_1.DERRW0[2].DERR_W2.R    /* Domain Error Word2 */
#define XRDC_1_DERR_W3_2     XRDC_1.DERRW0[2].DERR_W3.R    /* Domain Error Word3 */
#define XRDC_1_DERR_W0_3     XRDC_1.DERRW0[3].DERR_W0.R    /* Domain Error Word0 */
#define XRDC_1_DERR_W1_3     XRDC_1.DERRW0[3].DERR_W1.R    /* Domain Error Word1 */
#define XRDC_1_DERR_W2_3     XRDC_1.DERRW0[3].DERR_W2.R    /* Domain Error Word2 */
#define XRDC_1_DERR_W3_3     XRDC_1.DERRW0[3].DERR_W3.R    /* Domain Error Word3 */
#define XRDC_1_DERR_W0_4     XRDC_1.DERRW0[4].DERR_W0.R    /* Domain Error Word0 */
#define XRDC_1_DERR_W1_4     XRDC_1.DERRW0[4].DERR_W1.R    /* Domain Error Word1 */
#define XRDC_1_DERR_W2_4     XRDC_1.DERRW0[4].DERR_W2.R    /* Domain Error Word2 */
#define XRDC_1_DERR_W3_4     XRDC_1.DERRW0[4].DERR_W3.R    /* Domain Error Word3 */
#define XRDC_1_DERR_W0_5     XRDC_1.DERRW0[5].DERR_W0.R    /* Domain Error Word0 */
#define XRDC_1_DERR_W1_5     XRDC_1.DERRW0[5].DERR_W1.R    /* Domain Error Word1 */
#define XRDC_1_DERR_W2_5     XRDC_1.DERRW0[5].DERR_W2.R    /* Domain Error Word2 */
#define XRDC_1_DERR_W3_5     XRDC_1.DERRW0[5].DERR_W3.R    /* Domain Error Word3 */
#define XRDC_1_DERR_W0_16    XRDC_1.DERRW0[16].DERR_W0.R   /* Domain Error Word0 */
#define XRDC_1_DERR_W1_16    XRDC_1.DERRW0[16].DERR_W1.R   /* Domain Error Word1 */
#define XRDC_1_DERR_W2_16    XRDC_1.DERRW0[16].DERR_W2.R   /* Domain Error Word2 */
#define XRDC_1_DERR_W3_16    XRDC_1.DERRW0[16].DERR_W3.R   /* Domain Error Word3 */
#define XRDC_1_MDA_W0_0_DFMT1 XRDC_1.MDA_W0_0_DFMT1.R      /* Master Domain Assignment */
#define XRDC_1_MDA_W0_1_DFMT1 XRDC_1.MDA_W0_1_DFMT1.R      /* Master Domain Assignment */
#define XRDC_1_MDA_W0_2_DFMT1 XRDC_1.MDA_W0_2_DFMT1.R      /* Master Domain Assignment */
#define XRDC_1_MDA_W0_3_DFMT1 XRDC_1.MDA_W0_3_DFMT1.R      /* Master Domain Assignment */
#define XRDC_1_MDA_W0_4_DFMT1 XRDC_1.MDA_W0_4_DFMT1.R      /* Master Domain Assignment */
#define XRDC_1_MDA_W0_5_DFMT1 XRDC_1.MDA_W0_5_DFMT1.R      /* Master Domain Assignment */
#define XRDC_1_MDA_W0_6_DFMT1 XRDC_1.MDA_W0_6_DFMT1.R      /* Master Domain Assignment */
#define XRDC_1_MDA_W0_7_DFMT1 XRDC_1.MDA_W0_7_DFMT1.R      /* Master Domain Assignment */
#define XRDC_1_PDAC_W0_0     XRDC_1.PDACN[0][0].PDAC_W0.R  /* Peripheral Domain Access Control */
#define XRDC_1_PDAC_W1_0     XRDC_1.PDACN[0][0].PDAC_W1.R  /* Peripheral Domain Access Control */
#define XRDC_1_PDAC_W0_1     XRDC_1.PDACN[0][1].PDAC_W0.R  /* Peripheral Domain Access Control */
#define XRDC_1_PDAC_W1_1     XRDC_1.PDACN[0][1].PDAC_W1.R  /* Peripheral Domain Access Control */
#define XRDC_1_PDAC_W0_2     XRDC_1.PDACN[0][2].PDAC_W0.R  /* Peripheral Domain Access Control */
#define XRDC_1_PDAC_W1_2     XRDC_1.PDACN[0][2].PDAC_W1.R  /* Peripheral Domain Access Control */
#define XRDC_1_PDAC_W0_3     XRDC_1.PDACN[0][3].PDAC_W0.R  /* Peripheral Domain Access Control */
#define XRDC_1_PDAC_W1_3     XRDC_1.PDACN[0][3].PDAC_W1.R  /* Peripheral Domain Access Control */
#define XRDC_1_PDAC_W0_4     XRDC_1.PDACN[0][4].PDAC_W0.R  /* Peripheral Domain Access Control */
#define XRDC_1_PDAC_W1_4     XRDC_1.PDACN[0][4].PDAC_W1.R  /* Peripheral Domain Access Control */
#define XRDC_1_PDAC_W0_5     XRDC_1.PDACN[0][5].PDAC_W0.R  /* Peripheral Domain Access Control */
#define XRDC_1_PDAC_W1_5     XRDC_1.PDACN[0][5].PDAC_W1.R  /* Peripheral Domain Access Control */
#define XRDC_1_PDAC_W0_6     XRDC_1.PDACN[0][6].PDAC_W0.R  /* Peripheral Domain Access Control */
#define XRDC_1_PDAC_W1_6     XRDC_1.PDACN[0][6].PDAC_W1.R  /* Peripheral Domain Access Control */
#define XRDC_1_PDAC_W0_7     XRDC_1.PDACN[0][7].PDAC_W0.R  /* Peripheral Domain Access Control */
#define XRDC_1_PDAC_W1_7     XRDC_1.PDACN[0][7].PDAC_W1.R  /* Peripheral Domain Access Control */
#define XRDC_1_PDAC_W0_8     XRDC_1.PDACN[0][8].PDAC_W0.R  /* Peripheral Domain Access Control */
#define XRDC_1_PDAC_W1_8     XRDC_1.PDACN[0][8].PDAC_W1.R  /* Peripheral Domain Access Control */
#define XRDC_1_PDAC_W0_9     XRDC_1.PDACN[0][9].PDAC_W0.R  /* Peripheral Domain Access Control */
#define XRDC_1_PDAC_W1_9     XRDC_1.PDACN[0][9].PDAC_W1.R  /* Peripheral Domain Access Control */
#define XRDC_1_PDAC_W0_10    XRDC_1.PDACN[0][10].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_1_PDAC_W1_10    XRDC_1.PDACN[0][10].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_1_PDAC_W0_11    XRDC_1.PDACN[0][11].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_1_PDAC_W1_11    XRDC_1.PDACN[0][11].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_1_PDAC_W0_12    XRDC_1.PDACN[0][12].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_1_PDAC_W1_12    XRDC_1.PDACN[0][12].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_1_PDAC_W0_13    XRDC_1.PDACN[0][13].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_1_PDAC_W1_13    XRDC_1.PDACN[0][13].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_1_PDAC_W0_14    XRDC_1.PDACN[0][14].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_1_PDAC_W1_14    XRDC_1.PDACN[0][14].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_1_PDAC_W0_15    XRDC_1.PDACN[0][15].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_1_PDAC_W1_15    XRDC_1.PDACN[0][15].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_1_MRGD_W0_0     XRDC_1.MRGDN[0][0].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_0     XRDC_1.MRGDN[0][0].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_0     XRDC_1.MRGDN[0][0].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_0     XRDC_1.MRGDN[0][0].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_1     XRDC_1.MRGDN[0][1].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_1     XRDC_1.MRGDN[0][1].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_1     XRDC_1.MRGDN[0][1].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_1     XRDC_1.MRGDN[0][1].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_2     XRDC_1.MRGDN[0][2].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_2     XRDC_1.MRGDN[0][2].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_2     XRDC_1.MRGDN[0][2].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_2     XRDC_1.MRGDN[0][2].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_3     XRDC_1.MRGDN[0][3].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_3     XRDC_1.MRGDN[0][3].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_3     XRDC_1.MRGDN[0][3].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_3     XRDC_1.MRGDN[0][3].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_16    XRDC_1.MRGDN[1][0].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_16    XRDC_1.MRGDN[1][0].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_16    XRDC_1.MRGDN[1][0].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_16    XRDC_1.MRGDN[1][0].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_17    XRDC_1.MRGDN[1][1].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_17    XRDC_1.MRGDN[1][1].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_17    XRDC_1.MRGDN[1][1].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_17    XRDC_1.MRGDN[1][1].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_18    XRDC_1.MRGDN[1][2].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_18    XRDC_1.MRGDN[1][2].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_18    XRDC_1.MRGDN[1][2].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_18    XRDC_1.MRGDN[1][2].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_19    XRDC_1.MRGDN[1][3].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_19    XRDC_1.MRGDN[1][3].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_19    XRDC_1.MRGDN[1][3].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_19    XRDC_1.MRGDN[1][3].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_32    XRDC_1.MRGDN[2][0].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_32    XRDC_1.MRGDN[2][0].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_32    XRDC_1.MRGDN[2][0].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_32    XRDC_1.MRGDN[2][0].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_33    XRDC_1.MRGDN[2][1].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_33    XRDC_1.MRGDN[2][1].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_33    XRDC_1.MRGDN[2][1].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_33    XRDC_1.MRGDN[2][1].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_34    XRDC_1.MRGDN[2][2].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_34    XRDC_1.MRGDN[2][2].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_34    XRDC_1.MRGDN[2][2].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_34    XRDC_1.MRGDN[2][2].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_35    XRDC_1.MRGDN[2][3].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_35    XRDC_1.MRGDN[2][3].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_35    XRDC_1.MRGDN[2][3].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_35    XRDC_1.MRGDN[2][3].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_36    XRDC_1.MRGDN[2][4].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_36    XRDC_1.MRGDN[2][4].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_36    XRDC_1.MRGDN[2][4].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_36    XRDC_1.MRGDN[2][4].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_37    XRDC_1.MRGDN[2][5].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_37    XRDC_1.MRGDN[2][5].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_37    XRDC_1.MRGDN[2][5].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_37    XRDC_1.MRGDN[2][5].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_38    XRDC_1.MRGDN[2][6].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_38    XRDC_1.MRGDN[2][6].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_38    XRDC_1.MRGDN[2][6].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_38    XRDC_1.MRGDN[2][6].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_39    XRDC_1.MRGDN[2][7].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_39    XRDC_1.MRGDN[2][7].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_39    XRDC_1.MRGDN[2][7].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_39    XRDC_1.MRGDN[2][7].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_40    XRDC_1.MRGDN[2][8].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_40    XRDC_1.MRGDN[2][8].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_40    XRDC_1.MRGDN[2][8].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_40    XRDC_1.MRGDN[2][8].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_41    XRDC_1.MRGDN[2][9].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_41    XRDC_1.MRGDN[2][9].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_41    XRDC_1.MRGDN[2][9].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_41    XRDC_1.MRGDN[2][9].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_42    XRDC_1.MRGDN[2][10].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_42    XRDC_1.MRGDN[2][10].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_42    XRDC_1.MRGDN[2][10].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_42    XRDC_1.MRGDN[2][10].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_43    XRDC_1.MRGDN[2][11].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_43    XRDC_1.MRGDN[2][11].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_43    XRDC_1.MRGDN[2][11].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_43    XRDC_1.MRGDN[2][11].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_44    XRDC_1.MRGDN[2][12].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_44    XRDC_1.MRGDN[2][12].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_44    XRDC_1.MRGDN[2][12].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_44    XRDC_1.MRGDN[2][12].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_45    XRDC_1.MRGDN[2][13].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_45    XRDC_1.MRGDN[2][13].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_45    XRDC_1.MRGDN[2][13].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_45    XRDC_1.MRGDN[2][13].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_46    XRDC_1.MRGDN[2][14].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_46    XRDC_1.MRGDN[2][14].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_46    XRDC_1.MRGDN[2][14].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_46    XRDC_1.MRGDN[2][14].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_47    XRDC_1.MRGDN[2][15].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_47    XRDC_1.MRGDN[2][15].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_47    XRDC_1.MRGDN[2][15].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_47    XRDC_1.MRGDN[2][15].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_48    XRDC_1.MRGDN[3][0].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_48    XRDC_1.MRGDN[3][0].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_48    XRDC_1.MRGDN[3][0].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_48    XRDC_1.MRGDN[3][0].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_49    XRDC_1.MRGDN[3][1].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_49    XRDC_1.MRGDN[3][1].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_49    XRDC_1.MRGDN[3][1].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_49    XRDC_1.MRGDN[3][1].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_50    XRDC_1.MRGDN[3][2].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_50    XRDC_1.MRGDN[3][2].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_50    XRDC_1.MRGDN[3][2].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_50    XRDC_1.MRGDN[3][2].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_51    XRDC_1.MRGDN[3][3].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_51    XRDC_1.MRGDN[3][3].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_51    XRDC_1.MRGDN[3][3].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_51    XRDC_1.MRGDN[3][3].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_64    XRDC_1.MRGDN[4][0].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_64    XRDC_1.MRGDN[4][0].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_64    XRDC_1.MRGDN[4][0].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_64    XRDC_1.MRGDN[4][0].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_65    XRDC_1.MRGDN[4][1].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_65    XRDC_1.MRGDN[4][1].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_65    XRDC_1.MRGDN[4][1].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_65    XRDC_1.MRGDN[4][1].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_66    XRDC_1.MRGDN[4][2].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_66    XRDC_1.MRGDN[4][2].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_66    XRDC_1.MRGDN[4][2].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_66    XRDC_1.MRGDN[4][2].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_67    XRDC_1.MRGDN[4][3].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_67    XRDC_1.MRGDN[4][3].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_67    XRDC_1.MRGDN[4][3].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_67    XRDC_1.MRGDN[4][3].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_80    XRDC_1.MRGDN[5][0].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_80    XRDC_1.MRGDN[5][0].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_80    XRDC_1.MRGDN[5][0].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_80    XRDC_1.MRGDN[5][0].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_81    XRDC_1.MRGDN[5][1].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_81    XRDC_1.MRGDN[5][1].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_81    XRDC_1.MRGDN[5][1].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_81    XRDC_1.MRGDN[5][1].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_82    XRDC_1.MRGDN[5][2].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_82    XRDC_1.MRGDN[5][2].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_82    XRDC_1.MRGDN[5][2].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_82    XRDC_1.MRGDN[5][2].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W0_83    XRDC_1.MRGDN[5][3].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W1_83    XRDC_1.MRGDN[5][3].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W2_83    XRDC_1.MRGDN[5][3].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_1_MRGD_W3_83    XRDC_1.MRGDN[5][3].XRDC_MRGD_W3.R /* Memory Region Descriptor */

/* XRDC_0 */
#define XRDC_0_CR            XRDC_0.CR.R                   /* Control */
#define XRDC_0_HWCFG0        XRDC_0.HWCFG0.R               /* Hardware Configuration 0 */
#define XRDC_0_HWCFG1        XRDC_0.HWCFG1.R               /* Hardware Configuration 1 */
#define XRDC_0_HWCFG2        XRDC_0.HWCFG2.R               /* Hardware Configuration 2 */
#define XRDC_0_MDACFG0       XRDC_0.MDACFG[0].R            /* Master Domain Assignment Configuration */
#define XRDC_0_MDACFG1       XRDC_0.MDACFG[1].R            /* Master Domain Assignment Configuration */
#define XRDC_0_MDACFG2       XRDC_0.MDACFG[2].R            /* Master Domain Assignment Configuration */
#define XRDC_0_MDACFG3       XRDC_0.MDACFG[3].R            /* Master Domain Assignment Configuration */
#define XRDC_0_MDACFG4       XRDC_0.MDACFG[4].R            /* Master Domain Assignment Configuration */
#define XRDC_0_MDACFG5       XRDC_0.MDACFG[5].R            /* Master Domain Assignment Configuration */
#define XRDC_0_MDACFG6       XRDC_0.MDACFG[6].R            /* Master Domain Assignment Configuration */
#define XRDC_0_MDACFG7       XRDC_0.MDACFG[7].R            /* Master Domain Assignment Configuration */
#define XRDC_0_MDACFG8       XRDC_0.MDACFG[8].R            /* Master Domain Assignment Configuration */
#define XRDC_0_MDACFG9       XRDC_0.MDACFG[9].R            /* Master Domain Assignment Configuration */
#define XRDC_0_MDACFG10      XRDC_0.MDACFG[10].R           /* Master Domain Assignment Configuration */
#define XRDC_0_MDACFG11      XRDC_0.MDACFG[11].R           /* Master Domain Assignment Configuration */
#define XRDC_0_MDACFG12      XRDC_0.MDACFG[12].R           /* Master Domain Assignment Configuration */
#define XRDC_0_MDACFG15      XRDC_0.MDACFG[15].R           /* Master Domain Assignment Configuration */
#define XRDC_0_MDACFG16      XRDC_0.MDACFG[16].R           /* Master Domain Assignment Configuration */
#define XRDC_0_MDACFG17      XRDC_0.MDACFG[17].R           /* Master Domain Assignment Configuration */
#define XRDC_0_MDACFG18      XRDC_0.MDACFG[18].R           /* Master Domain Assignment Configuration */
#define XRDC_0_MDACFG19      XRDC_0.MDACFG[19].R           /* Master Domain Assignment Configuration */
#define XRDC_0_MDACFG20      XRDC_0.MDACFG[20].R           /* Master Domain Assignment Configuration */
#define XRDC_0_MDACFG21      XRDC_0.MDACFG[21].R           /* Master Domain Assignment Configuration */
#define XRDC_0_MRCFG0        XRDC_0.MRCFG[0].R             /* Memory Region Configuration */
#define XRDC_0_MRCFG2        XRDC_0.MRCFG[2].R             /* Memory Region Configuration */
#define XRDC_0_MRCFG3        XRDC_0.MRCFG[3].R             /* Memory Region Configuration */
#define XRDC_0_MRCFG4        XRDC_0.MRCFG[4].R             /* Memory Region Configuration */
#define XRDC_0_MRCFG5        XRDC_0.MRCFG[5].R             /* Memory Region Configuration */
#define XRDC_0_MRCFG6        XRDC_0.MRCFG[6].R             /* Memory Region Configuration */
#define XRDC_0_MRCFG7        XRDC_0.MRCFG[7].R             /* Memory Region Configuration */
#define XRDC_0_MRCFG8        XRDC_0.MRCFG[8].R             /* Memory Region Configuration */
#define XRDC_0_MRCFG9        XRDC_0.MRCFG[9].R             /* Memory Region Configuration */
#define XRDC_0_MRCFG10       XRDC_0.MRCFG[10].R            /* Memory Region Configuration */
#define XRDC_0_MRCFG11       XRDC_0.MRCFG[11].R            /* Memory Region Configuration */
#define XRDC_0_MRCFG12       XRDC_0.MRCFG[12].R            /* Memory Region Configuration */
#define XRDC_0_MRCFG13       XRDC_0.MRCFG[13].R            /* Memory Region Configuration */
#define XRDC_0_DERRLOC0      XRDC_0.DERRLOC[0].R           /* Domain Error Location */
#define XRDC_0_DERRLOC1      XRDC_0.DERRLOC[1].R           /* Domain Error Location */
#define XRDC_0_DERRLOC2      XRDC_0.DERRLOC[2].R           /* Domain Error Location */
#define XRDC_0_DERRLOC3      XRDC_0.DERRLOC[3].R           /* Domain Error Location */
#define XRDC_0_DERRLOC4      XRDC_0.DERRLOC[4].R           /* Domain Error Location */
#define XRDC_0_DERRLOC5      XRDC_0.DERRLOC[5].R           /* Domain Error Location */
#define XRDC_0_DERRLOC6      XRDC_0.DERRLOC[6].R           /* Domain Error Location */
#define XRDC_0_DERRLOC7      XRDC_0.DERRLOC[7].R           /* Domain Error Location */
#define XRDC_0_DERR_W0_0     XRDC_0.DERRW0[0].DERR_W0.R    /* Domain Error Word0 */
#define XRDC_0_DERR_W1_0     XRDC_0.DERRW0[0].DERR_W1.R    /* Domain Error Word1 */
#define XRDC_0_DERR_W2_0     XRDC_0.DERRW0[0].DERR_W2.R    /* Domain Error Word2 */
#define XRDC_0_DERR_W3_0     XRDC_0.DERRW0[0].DERR_W3.R    /* Domain Error Word3 */
#define XRDC_0_DERR_W0_2     XRDC_0.DERRW0[2].DERR_W0.R    /* Domain Error Word0 */
#define XRDC_0_DERR_W1_2     XRDC_0.DERRW0[2].DERR_W1.R    /* Domain Error Word1 */
#define XRDC_0_DERR_W2_2     XRDC_0.DERRW0[2].DERR_W2.R    /* Domain Error Word2 */
#define XRDC_0_DERR_W3_2     XRDC_0.DERRW0[2].DERR_W3.R    /* Domain Error Word3 */
#define XRDC_0_DERR_W0_3     XRDC_0.DERRW0[3].DERR_W0.R    /* Domain Error Word0 */
#define XRDC_0_DERR_W1_3     XRDC_0.DERRW0[3].DERR_W1.R    /* Domain Error Word1 */
#define XRDC_0_DERR_W2_3     XRDC_0.DERRW0[3].DERR_W2.R    /* Domain Error Word2 */
#define XRDC_0_DERR_W3_3     XRDC_0.DERRW0[3].DERR_W3.R    /* Domain Error Word3 */
#define XRDC_0_DERR_W0_4     XRDC_0.DERRW0[4].DERR_W0.R    /* Domain Error Word0 */
#define XRDC_0_DERR_W1_4     XRDC_0.DERRW0[4].DERR_W1.R    /* Domain Error Word1 */
#define XRDC_0_DERR_W2_4     XRDC_0.DERRW0[4].DERR_W2.R    /* Domain Error Word2 */
#define XRDC_0_DERR_W3_4     XRDC_0.DERRW0[4].DERR_W3.R    /* Domain Error Word3 */
#define XRDC_0_DERR_W0_5     XRDC_0.DERRW0[5].DERR_W0.R    /* Domain Error Word0 */
#define XRDC_0_DERR_W1_5     XRDC_0.DERRW0[5].DERR_W1.R    /* Domain Error Word1 */
#define XRDC_0_DERR_W2_5     XRDC_0.DERRW0[5].DERR_W2.R    /* Domain Error Word2 */
#define XRDC_0_DERR_W3_5     XRDC_0.DERRW0[5].DERR_W3.R    /* Domain Error Word3 */
#define XRDC_0_DERR_W0_6     XRDC_0.DERRW0[6].DERR_W0.R    /* Domain Error Word0 */
#define XRDC_0_DERR_W1_6     XRDC_0.DERRW0[6].DERR_W1.R    /* Domain Error Word1 */
#define XRDC_0_DERR_W2_6     XRDC_0.DERRW0[6].DERR_W2.R    /* Domain Error Word2 */
#define XRDC_0_DERR_W3_6     XRDC_0.DERRW0[6].DERR_W3.R    /* Domain Error Word3 */
#define XRDC_0_DERR_W0_7     XRDC_0.DERRW0[7].DERR_W0.R    /* Domain Error Word0 */
#define XRDC_0_DERR_W1_7     XRDC_0.DERRW0[7].DERR_W1.R    /* Domain Error Word1 */
#define XRDC_0_DERR_W2_7     XRDC_0.DERRW0[7].DERR_W2.R    /* Domain Error Word2 */
#define XRDC_0_DERR_W3_7     XRDC_0.DERRW0[7].DERR_W3.R    /* Domain Error Word3 */
#define XRDC_0_DERR_W0_8     XRDC_0.DERRW0[8].DERR_W0.R    /* Domain Error Word0 */
#define XRDC_0_DERR_W1_8     XRDC_0.DERRW0[8].DERR_W1.R    /* Domain Error Word1 */
#define XRDC_0_DERR_W2_8     XRDC_0.DERRW0[8].DERR_W2.R    /* Domain Error Word2 */
#define XRDC_0_DERR_W3_8     XRDC_0.DERRW0[8].DERR_W3.R    /* Domain Error Word3 */
#define XRDC_0_DERR_W0_9     XRDC_0.DERRW0[9].DERR_W0.R    /* Domain Error Word0 */
#define XRDC_0_DERR_W1_9     XRDC_0.DERRW0[9].DERR_W1.R    /* Domain Error Word1 */
#define XRDC_0_DERR_W2_9     XRDC_0.DERRW0[9].DERR_W2.R    /* Domain Error Word2 */
#define XRDC_0_DERR_W3_9     XRDC_0.DERRW0[9].DERR_W3.R    /* Domain Error Word3 */
#define XRDC_0_DERR_W0_10    XRDC_0.DERRW0[10].DERR_W0.R   /* Domain Error Word0 */
#define XRDC_0_DERR_W1_10    XRDC_0.DERRW0[10].DERR_W1.R   /* Domain Error Word1 */
#define XRDC_0_DERR_W2_10    XRDC_0.DERRW0[10].DERR_W2.R   /* Domain Error Word2 */
#define XRDC_0_DERR_W3_10    XRDC_0.DERRW0[10].DERR_W3.R   /* Domain Error Word3 */
#define XRDC_0_DERR_W0_11    XRDC_0.DERRW0[11].DERR_W0.R   /* Domain Error Word0 */
#define XRDC_0_DERR_W1_11    XRDC_0.DERRW0[11].DERR_W1.R   /* Domain Error Word1 */
#define XRDC_0_DERR_W2_11    XRDC_0.DERRW0[11].DERR_W2.R   /* Domain Error Word2 */
#define XRDC_0_DERR_W3_11    XRDC_0.DERRW0[11].DERR_W3.R   /* Domain Error Word3 */
#define XRDC_0_DERR_W0_12    XRDC_0.DERRW0[12].DERR_W0.R   /* Domain Error Word0 */
#define XRDC_0_DERR_W1_12    XRDC_0.DERRW0[12].DERR_W1.R   /* Domain Error Word1 */
#define XRDC_0_DERR_W2_12    XRDC_0.DERRW0[12].DERR_W2.R   /* Domain Error Word2 */
#define XRDC_0_DERR_W3_12    XRDC_0.DERRW0[12].DERR_W3.R   /* Domain Error Word3 */
#define XRDC_0_DERR_W0_13    XRDC_0.DERRW0[13].DERR_W0.R   /* Domain Error Word0 */
#define XRDC_0_DERR_W1_13    XRDC_0.DERRW0[13].DERR_W1.R   /* Domain Error Word1 */
#define XRDC_0_DERR_W2_13    XRDC_0.DERRW0[13].DERR_W2.R   /* Domain Error Word2 */
#define XRDC_0_DERR_W3_13    XRDC_0.DERRW0[13].DERR_W3.R   /* Domain Error Word3 */
#define XRDC_0_DERR_W0_16    XRDC_0.DERRW0[16].DERR_W0.R   /* Domain Error Word0 */
#define XRDC_0_DERR_W1_16    XRDC_0.DERRW0[16].DERR_W1.R   /* Domain Error Word1 */
#define XRDC_0_DERR_W2_16    XRDC_0.DERRW0[16].DERR_W2.R   /* Domain Error Word2 */
#define XRDC_0_DERR_W3_16    XRDC_0.DERRW0[16].DERR_W3.R   /* Domain Error Word3 */
#define XRDC_0_DERR_W0_17    XRDC_0.DERRW0[17].DERR_W0.R   /* Domain Error Word0 */
#define XRDC_0_DERR_W1_17    XRDC_0.DERRW0[17].DERR_W1.R   /* Domain Error Word1 */
#define XRDC_0_DERR_W2_17    XRDC_0.DERRW0[17].DERR_W2.R   /* Domain Error Word2 */
#define XRDC_0_DERR_W3_17    XRDC_0.DERRW0[17].DERR_W3.R   /* Domain Error Word3 */
#define XRDC_0_DERR_W0_18    XRDC_0.DERRW0[18].DERR_W0.R   /* Domain Error Word0 */
#define XRDC_0_DERR_W1_18    XRDC_0.DERRW0[18].DERR_W1.R   /* Domain Error Word1 */
#define XRDC_0_DERR_W2_18    XRDC_0.DERRW0[18].DERR_W2.R   /* Domain Error Word2 */
#define XRDC_0_DERR_W3_18    XRDC_0.DERRW0[18].DERR_W3.R   /* Domain Error Word3 */
#define XRDC_0_DERR_W0_19    XRDC_0.DERRW0[19].DERR_W0.R   /* Domain Error Word0 */
#define XRDC_0_DERR_W1_19    XRDC_0.DERRW0[19].DERR_W1.R   /* Domain Error Word1 */
#define XRDC_0_DERR_W2_19    XRDC_0.DERRW0[19].DERR_W2.R   /* Domain Error Word2 */
#define XRDC_0_DERR_W3_19    XRDC_0.DERRW0[19].DERR_W3.R   /* Domain Error Word3 */
#define XRDC_0_PID0          XRDC_0.PID[0].R               /* Process Identifier */
#define XRDC_0_PID1          XRDC_0.PID[1].R               /* Process Identifier */
#define XRDC_0_PID8          XRDC_0.PID[8].R               /* Process Identifier */
#define XRDC_0_PID9          XRDC_0.PID[9].R               /* Process Identifier */
#define XRDC_0_PID10         XRDC_0.PID[10].R              /* Process Identifier */
#define XRDC_0_PID16         XRDC_0.PID[16].R              /* Process Identifier */
#define XRDC_0_PID17         XRDC_0.PID[17].R              /* Process Identifier */
#define XRDC_0_PID18         XRDC_0.PID[18].R              /* Process Identifier */
#define XRDC_0_MDA_W0_0_DFMT0 XRDC_0.MDA_W0_0_DFMT0.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W1_0_DFMT0 XRDC_0.MDA_W1_0_DFMT0.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W2_0_DFMT0 XRDC_0.MDA_W2_0_DFMT0.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W3_0_DFMT0 XRDC_0.MDA_W3_0_DFMT0.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W4_0_DFMT0 XRDC_0.MDA_W4_0_DFMT0.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W5_0_DFMT0 XRDC_0.MDA_W5_0_DFMT0.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W6_0_DFMT0 XRDC_0.MDA_W6_0_DFMT0.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W7_0_DFMT0 XRDC_0.MDA_W7_0_DFMT0.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W0_1_DFMT0 XRDC_0.MDA_W0_1_DFMT0.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W1_1_DFMT0 XRDC_0.MDA_W1_1_DFMT0.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W2_1_DFMT0 XRDC_0.MDA_W2_1_DFMT0.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W3_1_DFMT0 XRDC_0.MDA_W3_1_DFMT0.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W4_1_DFMT0 XRDC_0.MDA_W4_1_DFMT0.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W5_1_DFMT0 XRDC_0.MDA_W5_1_DFMT0.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W6_1_DFMT0 XRDC_0.MDA_W6_1_DFMT0.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W7_1_DFMT0 XRDC_0.MDA_W7_1_DFMT0.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W0_2_DFMT1 XRDC_0.MDA_W0_2_DFMT1.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W0_3_DFMT1 XRDC_0.MDA_W0_3_DFMT1.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W0_4_DFMT1 XRDC_0.MDA_W0_4_DFMT1.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W0_5_DFMT1 XRDC_0.MDA_W0_5_DFMT1.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W0_6_DFMT1 XRDC_0.MDA_W0_6_DFMT1.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W0_7_DFMT1 XRDC_0.MDA_W0_7_DFMT1.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W0_8_DFMT0 XRDC_0.MDA_W0_8_DFMT0.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W1_8_DFMT0 XRDC_0.MDA_W1_8_DFMT0.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W2_8_DFMT0 XRDC_0.MDA_W2_8_DFMT0.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W3_8_DFMT0 XRDC_0.MDA_W3_8_DFMT0.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W4_8_DFMT0 XRDC_0.MDA_W4_8_DFMT0.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W5_8_DFMT0 XRDC_0.MDA_W5_8_DFMT0.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W6_8_DFMT0 XRDC_0.MDA_W6_8_DFMT0.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W7_8_DFMT0 XRDC_0.MDA_W7_8_DFMT0.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W0_9_DFMT0 XRDC_0.MDA_W0_9_DFMT0.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W1_9_DFMT0 XRDC_0.MDA_W1_9_DFMT0.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W2_9_DFMT0 XRDC_0.MDA_W2_9_DFMT0.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W3_9_DFMT0 XRDC_0.MDA_W3_9_DFMT0.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W4_9_DFMT0 XRDC_0.MDA_W4_9_DFMT0.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W5_9_DFMT0 XRDC_0.MDA_W5_9_DFMT0.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W6_9_DFMT0 XRDC_0.MDA_W6_9_DFMT0.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W7_9_DFMT0 XRDC_0.MDA_W7_9_DFMT0.R      /* Master Domain Assignment */
#define XRDC_0_MDA_W0_10_DFMT0 XRDC_0.MDA_W0_10_DFMT0.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W1_10_DFMT0 XRDC_0.MDA_W1_10_DFMT0.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W2_10_DFMT0 XRDC_0.MDA_W2_10_DFMT0.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W3_10_DFMT0 XRDC_0.MDA_W3_10_DFMT0.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W4_10_DFMT0 XRDC_0.MDA_W4_10_DFMT0.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W5_10_DFMT0 XRDC_0.MDA_W5_10_DFMT0.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W6_10_DFMT0 XRDC_0.MDA_W6_10_DFMT0.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W7_10_DFMT0 XRDC_0.MDA_W7_10_DFMT0.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W0_11_DFMT1 XRDC_0.MDA_W0_11_DFMT1.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W0_12_DFMT1 XRDC_0.MDA_W0_12_DFMT1.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W0_15_DFMT1 XRDC_0.MDA_W0_15_DFMT1.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W0_16_DFMT0 XRDC_0.MDA_W0_16_DFMT0.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W1_16_DFMT0 XRDC_0.MDA_W1_16_DFMT0.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W2_16_DFMT0 XRDC_0.MDA_W2_16_DFMT0.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W3_16_DFMT0 XRDC_0.MDA_W3_16_DFMT0.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W4_16_DFMT0 XRDC_0.MDA_W4_16_DFMT0.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W5_16_DFMT0 XRDC_0.MDA_W5_16_DFMT0.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W6_16_DFMT0 XRDC_0.MDA_W6_16_DFMT0.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W7_16_DFMT0 XRDC_0.MDA_W7_16_DFMT0.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W0_17_DFMT0 XRDC_0.MDA_W0_17_DFMT0.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W1_17_DFMT0 XRDC_0.MDA_W1_17_DFMT0.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W2_17_DFMT0 XRDC_0.MDA_W2_17_DFMT0.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W3_17_DFMT0 XRDC_0.MDA_W3_17_DFMT0.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W4_17_DFMT0 XRDC_0.MDA_W4_17_DFMT0.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W5_17_DFMT0 XRDC_0.MDA_W5_17_DFMT0.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W6_17_DFMT0 XRDC_0.MDA_W6_17_DFMT0.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W7_17_DFMT0 XRDC_0.MDA_W7_17_DFMT0.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W0_18_DFMT0 XRDC_0.MDA_W0_18_DFMT0.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W1_18_DFMT0 XRDC_0.MDA_W1_18_DFMT0.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W2_18_DFMT0 XRDC_0.MDA_W2_18_DFMT0.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W3_18_DFMT0 XRDC_0.MDA_W3_18_DFMT0.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W4_18_DFMT0 XRDC_0.MDA_W4_18_DFMT0.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W5_18_DFMT0 XRDC_0.MDA_W5_18_DFMT0.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W6_18_DFMT0 XRDC_0.MDA_W6_18_DFMT0.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W7_18_DFMT0 XRDC_0.MDA_W7_18_DFMT0.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W0_19_DFMT1 XRDC_0.MDA_W0_19_DFMT1.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W0_20_DFMT1 XRDC_0.MDA_W0_20_DFMT1.R    /* Master Domain Assignment */
#define XRDC_0_MDA_W0_21_DFMT1 XRDC_0.MDA_W0_21_DFMT1.R    /* Master Domain Assignment */
#define XRDC_0_PDAC_W0_0     XRDC_0.PDAC_SLOT[0].PDACN[0].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_0     XRDC_0.PDAC_SLOT[0].PDACN[0].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_1     XRDC_0.PDAC_SLOT[0].PDACN[1].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_1     XRDC_0.PDAC_SLOT[0].PDACN[1].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_2     XRDC_0.PDAC_SLOT[0].PDACN[2].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_2     XRDC_0.PDAC_SLOT[0].PDACN[2].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_3     XRDC_0.PDAC_SLOT[0].PDACN[3].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_3     XRDC_0.PDAC_SLOT[0].PDACN[3].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_4     XRDC_0.PDAC_SLOT[0].PDACN[4].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_4     XRDC_0.PDAC_SLOT[0].PDACN[4].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_5     XRDC_0.PDAC_SLOT[0].PDACN[5].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_5     XRDC_0.PDAC_SLOT[0].PDACN[5].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_6     XRDC_0.PDAC_SLOT[0].PDACN[6].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_6     XRDC_0.PDAC_SLOT[0].PDACN[6].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_7     XRDC_0.PDAC_SLOT[0].PDACN[7].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_7     XRDC_0.PDAC_SLOT[0].PDACN[7].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_8     XRDC_0.PDAC_SLOT[0].PDACN[8].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_8     XRDC_0.PDAC_SLOT[0].PDACN[8].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_9     XRDC_0.PDAC_SLOT[0].PDACN[9].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_9     XRDC_0.PDAC_SLOT[0].PDACN[9].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_10    XRDC_0.PDAC_SLOT[0].PDACN[10].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_10    XRDC_0.PDAC_SLOT[0].PDACN[10].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_11    XRDC_0.PDAC_SLOT[0].PDACN[11].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_11    XRDC_0.PDAC_SLOT[0].PDACN[11].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_12    XRDC_0.PDAC_SLOT[0].PDACN[12].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_12    XRDC_0.PDAC_SLOT[0].PDACN[12].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_13    XRDC_0.PDAC_SLOT[0].PDACN[13].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_13    XRDC_0.PDAC_SLOT[0].PDACN[13].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_14    XRDC_0.PDAC_SLOT[0].PDACN[14].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_14    XRDC_0.PDAC_SLOT[0].PDACN[14].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_15    XRDC_0.PDAC_SLOT[0].PDACN[15].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_15    XRDC_0.PDAC_SLOT[0].PDACN[15].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_16    XRDC_0.PDAC_SLOT[0].PDACN[16].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_16    XRDC_0.PDAC_SLOT[0].PDACN[16].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_17    XRDC_0.PDAC_SLOT[0].PDACN[17].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_17    XRDC_0.PDAC_SLOT[0].PDACN[17].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_18    XRDC_0.PDAC_SLOT[0].PDACN[18].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_18    XRDC_0.PDAC_SLOT[0].PDACN[18].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_19    XRDC_0.PDAC_SLOT[0].PDACN[19].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_19    XRDC_0.PDAC_SLOT[0].PDACN[19].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_20    XRDC_0.PDAC_SLOT[0].PDACN[20].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_20    XRDC_0.PDAC_SLOT[0].PDACN[20].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_21    XRDC_0.PDAC_SLOT[0].PDACN[21].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_21    XRDC_0.PDAC_SLOT[0].PDACN[21].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_22    XRDC_0.PDAC_SLOT[0].PDACN[22].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_22    XRDC_0.PDAC_SLOT[0].PDACN[22].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_23    XRDC_0.PDAC_SLOT[0].PDACN[23].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_23    XRDC_0.PDAC_SLOT[0].PDACN[23].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_24    XRDC_0.PDAC_SLOT[0].PDACN[24].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_24    XRDC_0.PDAC_SLOT[0].PDACN[24].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_25    XRDC_0.PDAC_SLOT[0].PDACN[25].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_25    XRDC_0.PDAC_SLOT[0].PDACN[25].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_26    XRDC_0.PDAC_SLOT[0].PDACN[26].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_26    XRDC_0.PDAC_SLOT[0].PDACN[26].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_27    XRDC_0.PDAC_SLOT[0].PDACN[27].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_27    XRDC_0.PDAC_SLOT[0].PDACN[27].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_28    XRDC_0.PDAC_SLOT[0].PDACN[28].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_28    XRDC_0.PDAC_SLOT[0].PDACN[28].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_29    XRDC_0.PDAC_SLOT[0].PDACN[29].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_29    XRDC_0.PDAC_SLOT[0].PDACN[29].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_30    XRDC_0.PDAC_SLOT[0].PDACN[30].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_30    XRDC_0.PDAC_SLOT[0].PDACN[30].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_31    XRDC_0.PDAC_SLOT[0].PDACN[31].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_31    XRDC_0.PDAC_SLOT[0].PDACN[31].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_128   XRDC_0.PDAC_SLOT[1].PDACN[0].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_128   XRDC_0.PDAC_SLOT[1].PDACN[0].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_129   XRDC_0.PDAC_SLOT[1].PDACN[1].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_129   XRDC_0.PDAC_SLOT[1].PDACN[1].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_130   XRDC_0.PDAC_SLOT[1].PDACN[2].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_130   XRDC_0.PDAC_SLOT[1].PDACN[2].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_131   XRDC_0.PDAC_SLOT[1].PDACN[3].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_131   XRDC_0.PDAC_SLOT[1].PDACN[3].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_132   XRDC_0.PDAC_SLOT[1].PDACN[4].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_132   XRDC_0.PDAC_SLOT[1].PDACN[4].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_133   XRDC_0.PDAC_SLOT[1].PDACN[5].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_133   XRDC_0.PDAC_SLOT[1].PDACN[5].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_134   XRDC_0.PDAC_SLOT[1].PDACN[6].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_134   XRDC_0.PDAC_SLOT[1].PDACN[6].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_135   XRDC_0.PDAC_SLOT[1].PDACN[7].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_135   XRDC_0.PDAC_SLOT[1].PDACN[7].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_136   XRDC_0.PDAC_SLOT[1].PDACN[8].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_136   XRDC_0.PDAC_SLOT[1].PDACN[8].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_137   XRDC_0.PDAC_SLOT[1].PDACN[9].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_137   XRDC_0.PDAC_SLOT[1].PDACN[9].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_138   XRDC_0.PDAC_SLOT[1].PDACN[10].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_138   XRDC_0.PDAC_SLOT[1].PDACN[10].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_139   XRDC_0.PDAC_SLOT[1].PDACN[11].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_139   XRDC_0.PDAC_SLOT[1].PDACN[11].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_140   XRDC_0.PDAC_SLOT[1].PDACN[12].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_140   XRDC_0.PDAC_SLOT[1].PDACN[12].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_141   XRDC_0.PDAC_SLOT[1].PDACN[13].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_141   XRDC_0.PDAC_SLOT[1].PDACN[13].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_142   XRDC_0.PDAC_SLOT[1].PDACN[14].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_142   XRDC_0.PDAC_SLOT[1].PDACN[14].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_143   XRDC_0.PDAC_SLOT[1].PDACN[15].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_143   XRDC_0.PDAC_SLOT[1].PDACN[15].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_144   XRDC_0.PDAC_SLOT[1].PDACN[16].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_144   XRDC_0.PDAC_SLOT[1].PDACN[16].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_145   XRDC_0.PDAC_SLOT[1].PDACN[17].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_145   XRDC_0.PDAC_SLOT[1].PDACN[17].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_146   XRDC_0.PDAC_SLOT[1].PDACN[18].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_146   XRDC_0.PDAC_SLOT[1].PDACN[18].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_147   XRDC_0.PDAC_SLOT[1].PDACN[19].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_147   XRDC_0.PDAC_SLOT[1].PDACN[19].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_148   XRDC_0.PDAC_SLOT[1].PDACN[20].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_148   XRDC_0.PDAC_SLOT[1].PDACN[20].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_149   XRDC_0.PDAC_SLOT[1].PDACN[21].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_149   XRDC_0.PDAC_SLOT[1].PDACN[21].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_150   XRDC_0.PDAC_SLOT[1].PDACN[22].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_150   XRDC_0.PDAC_SLOT[1].PDACN[22].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_151   XRDC_0.PDAC_SLOT[1].PDACN[23].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_151   XRDC_0.PDAC_SLOT[1].PDACN[23].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_152   XRDC_0.PDAC_SLOT[1].PDACN[24].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_152   XRDC_0.PDAC_SLOT[1].PDACN[24].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_153   XRDC_0.PDAC_SLOT[1].PDACN[25].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_153   XRDC_0.PDAC_SLOT[1].PDACN[25].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_154   XRDC_0.PDAC_SLOT[1].PDACN[26].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_154   XRDC_0.PDAC_SLOT[1].PDACN[26].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_155   XRDC_0.PDAC_SLOT[1].PDACN[27].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_155   XRDC_0.PDAC_SLOT[1].PDACN[27].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_156   XRDC_0.PDAC_SLOT[1].PDACN[28].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_156   XRDC_0.PDAC_SLOT[1].PDACN[28].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_157   XRDC_0.PDAC_SLOT[1].PDACN[29].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_157   XRDC_0.PDAC_SLOT[1].PDACN[29].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_158   XRDC_0.PDAC_SLOT[1].PDACN[30].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_158   XRDC_0.PDAC_SLOT[1].PDACN[30].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_159   XRDC_0.PDAC_SLOT[1].PDACN[31].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_159   XRDC_0.PDAC_SLOT[1].PDACN[31].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_256   XRDC_0.PDAC_SLOT[2].PDACN[0].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_256   XRDC_0.PDAC_SLOT[2].PDACN[0].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_257   XRDC_0.PDAC_SLOT[2].PDACN[1].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_257   XRDC_0.PDAC_SLOT[2].PDACN[1].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_258   XRDC_0.PDAC_SLOT[2].PDACN[2].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_258   XRDC_0.PDAC_SLOT[2].PDACN[2].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_259   XRDC_0.PDAC_SLOT[2].PDACN[3].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_259   XRDC_0.PDAC_SLOT[2].PDACN[3].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_260   XRDC_0.PDAC_SLOT[2].PDACN[4].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_260   XRDC_0.PDAC_SLOT[2].PDACN[4].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_261   XRDC_0.PDAC_SLOT[2].PDACN[5].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_261   XRDC_0.PDAC_SLOT[2].PDACN[5].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_262   XRDC_0.PDAC_SLOT[2].PDACN[6].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_262   XRDC_0.PDAC_SLOT[2].PDACN[6].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_263   XRDC_0.PDAC_SLOT[2].PDACN[7].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_263   XRDC_0.PDAC_SLOT[2].PDACN[7].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_264   XRDC_0.PDAC_SLOT[2].PDACN[8].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_264   XRDC_0.PDAC_SLOT[2].PDACN[8].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_265   XRDC_0.PDAC_SLOT[2].PDACN[9].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_265   XRDC_0.PDAC_SLOT[2].PDACN[9].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_266   XRDC_0.PDAC_SLOT[2].PDACN[10].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_266   XRDC_0.PDAC_SLOT[2].PDACN[10].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_267   XRDC_0.PDAC_SLOT[2].PDACN[11].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_267   XRDC_0.PDAC_SLOT[2].PDACN[11].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_268   XRDC_0.PDAC_SLOT[2].PDACN[12].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_268   XRDC_0.PDAC_SLOT[2].PDACN[12].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_269   XRDC_0.PDAC_SLOT[2].PDACN[13].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_269   XRDC_0.PDAC_SLOT[2].PDACN[13].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_270   XRDC_0.PDAC_SLOT[2].PDACN[14].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_270   XRDC_0.PDAC_SLOT[2].PDACN[14].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_271   XRDC_0.PDAC_SLOT[2].PDACN[15].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_271   XRDC_0.PDAC_SLOT[2].PDACN[15].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_272   XRDC_0.PDAC_SLOT[2].PDACN[16].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_272   XRDC_0.PDAC_SLOT[2].PDACN[16].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_273   XRDC_0.PDAC_SLOT[2].PDACN[17].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_273   XRDC_0.PDAC_SLOT[2].PDACN[17].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_274   XRDC_0.PDAC_SLOT[2].PDACN[18].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_274   XRDC_0.PDAC_SLOT[2].PDACN[18].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_275   XRDC_0.PDAC_SLOT[2].PDACN[19].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_275   XRDC_0.PDAC_SLOT[2].PDACN[19].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_276   XRDC_0.PDAC_SLOT[2].PDACN[20].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_276   XRDC_0.PDAC_SLOT[2].PDACN[20].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_277   XRDC_0.PDAC_SLOT[2].PDACN[21].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_277   XRDC_0.PDAC_SLOT[2].PDACN[21].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_278   XRDC_0.PDAC_SLOT[2].PDACN[22].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_278   XRDC_0.PDAC_SLOT[2].PDACN[22].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_279   XRDC_0.PDAC_SLOT[2].PDACN[23].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_279   XRDC_0.PDAC_SLOT[2].PDACN[23].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_280   XRDC_0.PDAC_SLOT[2].PDACN[24].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_280   XRDC_0.PDAC_SLOT[2].PDACN[24].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_281   XRDC_0.PDAC_SLOT[2].PDACN[25].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_281   XRDC_0.PDAC_SLOT[2].PDACN[25].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_282   XRDC_0.PDAC_SLOT[2].PDACN[26].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_282   XRDC_0.PDAC_SLOT[2].PDACN[26].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_283   XRDC_0.PDAC_SLOT[2].PDACN[27].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_283   XRDC_0.PDAC_SLOT[2].PDACN[27].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_284   XRDC_0.PDAC_SLOT[2].PDACN[28].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_284   XRDC_0.PDAC_SLOT[2].PDACN[28].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_285   XRDC_0.PDAC_SLOT[2].PDACN[29].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_285   XRDC_0.PDAC_SLOT[2].PDACN[29].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_286   XRDC_0.PDAC_SLOT[2].PDACN[30].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_286   XRDC_0.PDAC_SLOT[2].PDACN[30].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_287   XRDC_0.PDAC_SLOT[2].PDACN[31].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_287   XRDC_0.PDAC_SLOT[2].PDACN[31].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_384   XRDC_0.PDAC_SLOT[3].PDACN[0].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_384   XRDC_0.PDAC_SLOT[3].PDACN[0].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_385   XRDC_0.PDAC_SLOT[3].PDACN[1].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_385   XRDC_0.PDAC_SLOT[3].PDACN[1].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_386   XRDC_0.PDAC_SLOT[3].PDACN[2].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_386   XRDC_0.PDAC_SLOT[3].PDACN[2].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_387   XRDC_0.PDAC_SLOT[3].PDACN[3].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_387   XRDC_0.PDAC_SLOT[3].PDACN[3].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_388   XRDC_0.PDAC_SLOT[3].PDACN[4].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_388   XRDC_0.PDAC_SLOT[3].PDACN[4].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_389   XRDC_0.PDAC_SLOT[3].PDACN[5].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_389   XRDC_0.PDAC_SLOT[3].PDACN[5].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_390   XRDC_0.PDAC_SLOT[3].PDACN[6].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_390   XRDC_0.PDAC_SLOT[3].PDACN[6].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_391   XRDC_0.PDAC_SLOT[3].PDACN[7].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_391   XRDC_0.PDAC_SLOT[3].PDACN[7].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_392   XRDC_0.PDAC_SLOT[3].PDACN[8].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_392   XRDC_0.PDAC_SLOT[3].PDACN[8].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_393   XRDC_0.PDAC_SLOT[3].PDACN[9].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_393   XRDC_0.PDAC_SLOT[3].PDACN[9].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_394   XRDC_0.PDAC_SLOT[3].PDACN[10].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_394   XRDC_0.PDAC_SLOT[3].PDACN[10].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_395   XRDC_0.PDAC_SLOT[3].PDACN[11].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_395   XRDC_0.PDAC_SLOT[3].PDACN[11].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_396   XRDC_0.PDAC_SLOT[3].PDACN[12].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_396   XRDC_0.PDAC_SLOT[3].PDACN[12].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_397   XRDC_0.PDAC_SLOT[3].PDACN[13].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_397   XRDC_0.PDAC_SLOT[3].PDACN[13].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_398   XRDC_0.PDAC_SLOT[3].PDACN[14].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_398   XRDC_0.PDAC_SLOT[3].PDACN[14].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_400   XRDC_0.PDAC_SLOT[3].PDACN[16].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_400   XRDC_0.PDAC_SLOT[3].PDACN[16].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_401   XRDC_0.PDAC_SLOT[3].PDACN[17].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_401   XRDC_0.PDAC_SLOT[3].PDACN[17].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_406   XRDC_0.PDAC_SLOT[3].PDACN[22].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_406   XRDC_0.PDAC_SLOT[3].PDACN[22].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_407   XRDC_0.PDAC_SLOT[3].PDACN[23].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_407   XRDC_0.PDAC_SLOT[3].PDACN[23].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W0_408   XRDC_0.PDAC_SLOT[3].PDACN[24].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_0_PDAC_W1_408   XRDC_0.PDAC_SLOT[3].PDACN[24].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_0_MRGD_W0_0     XRDC_0.MRGDN[0][0].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_0     XRDC_0.MRGDN[0][0].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_0     XRDC_0.MRGDN[0][0].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_0     XRDC_0.MRGDN[0][0].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_1     XRDC_0.MRGDN[0][1].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_1     XRDC_0.MRGDN[0][1].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_1     XRDC_0.MRGDN[0][1].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_1     XRDC_0.MRGDN[0][1].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_2     XRDC_0.MRGDN[0][2].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_2     XRDC_0.MRGDN[0][2].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_2     XRDC_0.MRGDN[0][2].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_2     XRDC_0.MRGDN[0][2].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_3     XRDC_0.MRGDN[0][3].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_3     XRDC_0.MRGDN[0][3].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_3     XRDC_0.MRGDN[0][3].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_3     XRDC_0.MRGDN[0][3].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_4     XRDC_0.MRGDN[0][4].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_4     XRDC_0.MRGDN[0][4].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_4     XRDC_0.MRGDN[0][4].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_4     XRDC_0.MRGDN[0][4].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_5     XRDC_0.MRGDN[0][5].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_5     XRDC_0.MRGDN[0][5].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_5     XRDC_0.MRGDN[0][5].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_5     XRDC_0.MRGDN[0][5].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_6     XRDC_0.MRGDN[0][6].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_6     XRDC_0.MRGDN[0][6].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_6     XRDC_0.MRGDN[0][6].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_6     XRDC_0.MRGDN[0][6].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_7     XRDC_0.MRGDN[0][7].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_7     XRDC_0.MRGDN[0][7].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_7     XRDC_0.MRGDN[0][7].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_7     XRDC_0.MRGDN[0][7].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_8     XRDC_0.MRGDN[0][8].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_8     XRDC_0.MRGDN[0][8].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_8     XRDC_0.MRGDN[0][8].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_8     XRDC_0.MRGDN[0][8].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_9     XRDC_0.MRGDN[0][9].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_9     XRDC_0.MRGDN[0][9].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_9     XRDC_0.MRGDN[0][9].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_9     XRDC_0.MRGDN[0][9].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_10    XRDC_0.MRGDN[0][10].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_10    XRDC_0.MRGDN[0][10].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_10    XRDC_0.MRGDN[0][10].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_10    XRDC_0.MRGDN[0][10].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_11    XRDC_0.MRGDN[0][11].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_11    XRDC_0.MRGDN[0][11].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_11    XRDC_0.MRGDN[0][11].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_11    XRDC_0.MRGDN[0][11].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_12    XRDC_0.MRGDN[0][12].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_12    XRDC_0.MRGDN[0][12].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_12    XRDC_0.MRGDN[0][12].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_12    XRDC_0.MRGDN[0][12].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_13    XRDC_0.MRGDN[0][13].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_13    XRDC_0.MRGDN[0][13].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_13    XRDC_0.MRGDN[0][13].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_13    XRDC_0.MRGDN[0][13].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_14    XRDC_0.MRGDN[0][14].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_14    XRDC_0.MRGDN[0][14].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_14    XRDC_0.MRGDN[0][14].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_14    XRDC_0.MRGDN[0][14].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_15    XRDC_0.MRGDN[0][15].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_15    XRDC_0.MRGDN[0][15].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_15    XRDC_0.MRGDN[0][15].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_15    XRDC_0.MRGDN[0][15].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_32    XRDC_0.MRGDN[2][0].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_32    XRDC_0.MRGDN[2][0].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_32    XRDC_0.MRGDN[2][0].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_32    XRDC_0.MRGDN[2][0].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_33    XRDC_0.MRGDN[2][1].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_33    XRDC_0.MRGDN[2][1].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_33    XRDC_0.MRGDN[2][1].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_33    XRDC_0.MRGDN[2][1].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_34    XRDC_0.MRGDN[2][2].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_34    XRDC_0.MRGDN[2][2].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_34    XRDC_0.MRGDN[2][2].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_34    XRDC_0.MRGDN[2][2].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_35    XRDC_0.MRGDN[2][3].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_35    XRDC_0.MRGDN[2][3].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_35    XRDC_0.MRGDN[2][3].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_35    XRDC_0.MRGDN[2][3].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_36    XRDC_0.MRGDN[2][4].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_36    XRDC_0.MRGDN[2][4].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_36    XRDC_0.MRGDN[2][4].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_36    XRDC_0.MRGDN[2][4].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_37    XRDC_0.MRGDN[2][5].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_37    XRDC_0.MRGDN[2][5].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_37    XRDC_0.MRGDN[2][5].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_37    XRDC_0.MRGDN[2][5].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_38    XRDC_0.MRGDN[2][6].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_38    XRDC_0.MRGDN[2][6].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_38    XRDC_0.MRGDN[2][6].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_38    XRDC_0.MRGDN[2][6].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_39    XRDC_0.MRGDN[2][7].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_39    XRDC_0.MRGDN[2][7].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_39    XRDC_0.MRGDN[2][7].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_39    XRDC_0.MRGDN[2][7].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_40    XRDC_0.MRGDN[2][8].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_40    XRDC_0.MRGDN[2][8].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_40    XRDC_0.MRGDN[2][8].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_40    XRDC_0.MRGDN[2][8].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_41    XRDC_0.MRGDN[2][9].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_41    XRDC_0.MRGDN[2][9].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_41    XRDC_0.MRGDN[2][9].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_41    XRDC_0.MRGDN[2][9].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_42    XRDC_0.MRGDN[2][10].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_42    XRDC_0.MRGDN[2][10].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_42    XRDC_0.MRGDN[2][10].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_42    XRDC_0.MRGDN[2][10].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_43    XRDC_0.MRGDN[2][11].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_43    XRDC_0.MRGDN[2][11].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_43    XRDC_0.MRGDN[2][11].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_43    XRDC_0.MRGDN[2][11].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_44    XRDC_0.MRGDN[2][12].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_44    XRDC_0.MRGDN[2][12].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_44    XRDC_0.MRGDN[2][12].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_44    XRDC_0.MRGDN[2][12].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_45    XRDC_0.MRGDN[2][13].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_45    XRDC_0.MRGDN[2][13].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_45    XRDC_0.MRGDN[2][13].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_45    XRDC_0.MRGDN[2][13].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_46    XRDC_0.MRGDN[2][14].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_46    XRDC_0.MRGDN[2][14].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_46    XRDC_0.MRGDN[2][14].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_46    XRDC_0.MRGDN[2][14].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_47    XRDC_0.MRGDN[2][15].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_47    XRDC_0.MRGDN[2][15].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_47    XRDC_0.MRGDN[2][15].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_47    XRDC_0.MRGDN[2][15].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_48    XRDC_0.MRGDN[3][0].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_48    XRDC_0.MRGDN[3][0].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_48    XRDC_0.MRGDN[3][0].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_48    XRDC_0.MRGDN[3][0].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_49    XRDC_0.MRGDN[3][1].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_49    XRDC_0.MRGDN[3][1].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_49    XRDC_0.MRGDN[3][1].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_49    XRDC_0.MRGDN[3][1].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_50    XRDC_0.MRGDN[3][2].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_50    XRDC_0.MRGDN[3][2].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_50    XRDC_0.MRGDN[3][2].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_50    XRDC_0.MRGDN[3][2].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_51    XRDC_0.MRGDN[3][3].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_51    XRDC_0.MRGDN[3][3].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_51    XRDC_0.MRGDN[3][3].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_51    XRDC_0.MRGDN[3][3].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_52    XRDC_0.MRGDN[3][4].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_52    XRDC_0.MRGDN[3][4].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_52    XRDC_0.MRGDN[3][4].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_52    XRDC_0.MRGDN[3][4].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_53    XRDC_0.MRGDN[3][5].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_53    XRDC_0.MRGDN[3][5].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_53    XRDC_0.MRGDN[3][5].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_53    XRDC_0.MRGDN[3][5].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_54    XRDC_0.MRGDN[3][6].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_54    XRDC_0.MRGDN[3][6].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_54    XRDC_0.MRGDN[3][6].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_54    XRDC_0.MRGDN[3][6].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_55    XRDC_0.MRGDN[3][7].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_55    XRDC_0.MRGDN[3][7].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_55    XRDC_0.MRGDN[3][7].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_55    XRDC_0.MRGDN[3][7].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_56    XRDC_0.MRGDN[3][8].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_56    XRDC_0.MRGDN[3][8].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_56    XRDC_0.MRGDN[3][8].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_56    XRDC_0.MRGDN[3][8].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_57    XRDC_0.MRGDN[3][9].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_57    XRDC_0.MRGDN[3][9].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_57    XRDC_0.MRGDN[3][9].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_57    XRDC_0.MRGDN[3][9].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_58    XRDC_0.MRGDN[3][10].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_58    XRDC_0.MRGDN[3][10].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_58    XRDC_0.MRGDN[3][10].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_58    XRDC_0.MRGDN[3][10].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_59    XRDC_0.MRGDN[3][11].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_59    XRDC_0.MRGDN[3][11].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_59    XRDC_0.MRGDN[3][11].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_59    XRDC_0.MRGDN[3][11].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_60    XRDC_0.MRGDN[3][12].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_60    XRDC_0.MRGDN[3][12].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_60    XRDC_0.MRGDN[3][12].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_60    XRDC_0.MRGDN[3][12].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_61    XRDC_0.MRGDN[3][13].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_61    XRDC_0.MRGDN[3][13].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_61    XRDC_0.MRGDN[3][13].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_61    XRDC_0.MRGDN[3][13].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_62    XRDC_0.MRGDN[3][14].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_62    XRDC_0.MRGDN[3][14].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_62    XRDC_0.MRGDN[3][14].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_62    XRDC_0.MRGDN[3][14].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_63    XRDC_0.MRGDN[3][15].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_63    XRDC_0.MRGDN[3][15].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_63    XRDC_0.MRGDN[3][15].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_63    XRDC_0.MRGDN[3][15].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_64    XRDC_0.MRGDN[4][0].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_64    XRDC_0.MRGDN[4][0].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_64    XRDC_0.MRGDN[4][0].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_64    XRDC_0.MRGDN[4][0].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_65    XRDC_0.MRGDN[4][1].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_65    XRDC_0.MRGDN[4][1].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_65    XRDC_0.MRGDN[4][1].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_65    XRDC_0.MRGDN[4][1].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_66    XRDC_0.MRGDN[4][2].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_66    XRDC_0.MRGDN[4][2].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_66    XRDC_0.MRGDN[4][2].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_66    XRDC_0.MRGDN[4][2].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_67    XRDC_0.MRGDN[4][3].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_67    XRDC_0.MRGDN[4][3].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_67    XRDC_0.MRGDN[4][3].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_67    XRDC_0.MRGDN[4][3].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_68    XRDC_0.MRGDN[4][4].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_68    XRDC_0.MRGDN[4][4].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_68    XRDC_0.MRGDN[4][4].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_68    XRDC_0.MRGDN[4][4].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_69    XRDC_0.MRGDN[4][5].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_69    XRDC_0.MRGDN[4][5].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_69    XRDC_0.MRGDN[4][5].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_69    XRDC_0.MRGDN[4][5].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_70    XRDC_0.MRGDN[4][6].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_70    XRDC_0.MRGDN[4][6].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_70    XRDC_0.MRGDN[4][6].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_70    XRDC_0.MRGDN[4][6].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_71    XRDC_0.MRGDN[4][7].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_71    XRDC_0.MRGDN[4][7].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_71    XRDC_0.MRGDN[4][7].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_71    XRDC_0.MRGDN[4][7].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_72    XRDC_0.MRGDN[4][8].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_72    XRDC_0.MRGDN[4][8].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_72    XRDC_0.MRGDN[4][8].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_72    XRDC_0.MRGDN[4][8].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_73    XRDC_0.MRGDN[4][9].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_73    XRDC_0.MRGDN[4][9].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_73    XRDC_0.MRGDN[4][9].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_73    XRDC_0.MRGDN[4][9].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_74    XRDC_0.MRGDN[4][10].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_74    XRDC_0.MRGDN[4][10].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_74    XRDC_0.MRGDN[4][10].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_74    XRDC_0.MRGDN[4][10].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_75    XRDC_0.MRGDN[4][11].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_75    XRDC_0.MRGDN[4][11].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_75    XRDC_0.MRGDN[4][11].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_75    XRDC_0.MRGDN[4][11].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_76    XRDC_0.MRGDN[4][12].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_76    XRDC_0.MRGDN[4][12].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_76    XRDC_0.MRGDN[4][12].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_76    XRDC_0.MRGDN[4][12].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_77    XRDC_0.MRGDN[4][13].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_77    XRDC_0.MRGDN[4][13].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_77    XRDC_0.MRGDN[4][13].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_77    XRDC_0.MRGDN[4][13].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_78    XRDC_0.MRGDN[4][14].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_78    XRDC_0.MRGDN[4][14].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_78    XRDC_0.MRGDN[4][14].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_78    XRDC_0.MRGDN[4][14].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_79    XRDC_0.MRGDN[4][15].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_79    XRDC_0.MRGDN[4][15].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_79    XRDC_0.MRGDN[4][15].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_79    XRDC_0.MRGDN[4][15].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_80    XRDC_0.MRGDN[5][0].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_80    XRDC_0.MRGDN[5][0].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_80    XRDC_0.MRGDN[5][0].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_80    XRDC_0.MRGDN[5][0].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_81    XRDC_0.MRGDN[5][1].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_81    XRDC_0.MRGDN[5][1].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_81    XRDC_0.MRGDN[5][1].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_81    XRDC_0.MRGDN[5][1].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_82    XRDC_0.MRGDN[5][2].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_82    XRDC_0.MRGDN[5][2].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_82    XRDC_0.MRGDN[5][2].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_82    XRDC_0.MRGDN[5][2].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_83    XRDC_0.MRGDN[5][3].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_83    XRDC_0.MRGDN[5][3].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_83    XRDC_0.MRGDN[5][3].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_83    XRDC_0.MRGDN[5][3].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_84    XRDC_0.MRGDN[5][4].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_84    XRDC_0.MRGDN[5][4].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_84    XRDC_0.MRGDN[5][4].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_84    XRDC_0.MRGDN[5][4].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_85    XRDC_0.MRGDN[5][5].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_85    XRDC_0.MRGDN[5][5].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_85    XRDC_0.MRGDN[5][5].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_85    XRDC_0.MRGDN[5][5].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_86    XRDC_0.MRGDN[5][6].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_86    XRDC_0.MRGDN[5][6].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_86    XRDC_0.MRGDN[5][6].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_86    XRDC_0.MRGDN[5][6].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_87    XRDC_0.MRGDN[5][7].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_87    XRDC_0.MRGDN[5][7].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_87    XRDC_0.MRGDN[5][7].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_87    XRDC_0.MRGDN[5][7].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_88    XRDC_0.MRGDN[5][8].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_88    XRDC_0.MRGDN[5][8].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_88    XRDC_0.MRGDN[5][8].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_88    XRDC_0.MRGDN[5][8].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_89    XRDC_0.MRGDN[5][9].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_89    XRDC_0.MRGDN[5][9].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_89    XRDC_0.MRGDN[5][9].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_89    XRDC_0.MRGDN[5][9].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_90    XRDC_0.MRGDN[5][10].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_90    XRDC_0.MRGDN[5][10].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_90    XRDC_0.MRGDN[5][10].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_90    XRDC_0.MRGDN[5][10].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_91    XRDC_0.MRGDN[5][11].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_91    XRDC_0.MRGDN[5][11].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_91    XRDC_0.MRGDN[5][11].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_91    XRDC_0.MRGDN[5][11].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_92    XRDC_0.MRGDN[5][12].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_92    XRDC_0.MRGDN[5][12].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_92    XRDC_0.MRGDN[5][12].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_92    XRDC_0.MRGDN[5][12].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_93    XRDC_0.MRGDN[5][13].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_93    XRDC_0.MRGDN[5][13].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_93    XRDC_0.MRGDN[5][13].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_93    XRDC_0.MRGDN[5][13].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_94    XRDC_0.MRGDN[5][14].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_94    XRDC_0.MRGDN[5][14].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_94    XRDC_0.MRGDN[5][14].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_94    XRDC_0.MRGDN[5][14].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_95    XRDC_0.MRGDN[5][15].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_95    XRDC_0.MRGDN[5][15].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_95    XRDC_0.MRGDN[5][15].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_95    XRDC_0.MRGDN[5][15].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_96    XRDC_0.MRGDN[6][0].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_96    XRDC_0.MRGDN[6][0].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_96    XRDC_0.MRGDN[6][0].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_96    XRDC_0.MRGDN[6][0].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_97    XRDC_0.MRGDN[6][1].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_97    XRDC_0.MRGDN[6][1].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_97    XRDC_0.MRGDN[6][1].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_97    XRDC_0.MRGDN[6][1].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_98    XRDC_0.MRGDN[6][2].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_98    XRDC_0.MRGDN[6][2].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_98    XRDC_0.MRGDN[6][2].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_98    XRDC_0.MRGDN[6][2].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_99    XRDC_0.MRGDN[6][3].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_99    XRDC_0.MRGDN[6][3].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_99    XRDC_0.MRGDN[6][3].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_99    XRDC_0.MRGDN[6][3].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_100   XRDC_0.MRGDN[6][4].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_100   XRDC_0.MRGDN[6][4].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_100   XRDC_0.MRGDN[6][4].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_100   XRDC_0.MRGDN[6][4].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_101   XRDC_0.MRGDN[6][5].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_101   XRDC_0.MRGDN[6][5].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_101   XRDC_0.MRGDN[6][5].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_101   XRDC_0.MRGDN[6][5].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_102   XRDC_0.MRGDN[6][6].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_102   XRDC_0.MRGDN[6][6].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_102   XRDC_0.MRGDN[6][6].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_102   XRDC_0.MRGDN[6][6].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_103   XRDC_0.MRGDN[6][7].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_103   XRDC_0.MRGDN[6][7].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_103   XRDC_0.MRGDN[6][7].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_103   XRDC_0.MRGDN[6][7].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_104   XRDC_0.MRGDN[6][8].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_104   XRDC_0.MRGDN[6][8].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_104   XRDC_0.MRGDN[6][8].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_104   XRDC_0.MRGDN[6][8].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_105   XRDC_0.MRGDN[6][9].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_105   XRDC_0.MRGDN[6][9].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_105   XRDC_0.MRGDN[6][9].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_105   XRDC_0.MRGDN[6][9].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_106   XRDC_0.MRGDN[6][10].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_106   XRDC_0.MRGDN[6][10].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_106   XRDC_0.MRGDN[6][10].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_106   XRDC_0.MRGDN[6][10].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_107   XRDC_0.MRGDN[6][11].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_107   XRDC_0.MRGDN[6][11].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_107   XRDC_0.MRGDN[6][11].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_107   XRDC_0.MRGDN[6][11].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_108   XRDC_0.MRGDN[6][12].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_108   XRDC_0.MRGDN[6][12].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_108   XRDC_0.MRGDN[6][12].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_108   XRDC_0.MRGDN[6][12].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_109   XRDC_0.MRGDN[6][13].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_109   XRDC_0.MRGDN[6][13].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_109   XRDC_0.MRGDN[6][13].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_109   XRDC_0.MRGDN[6][13].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_110   XRDC_0.MRGDN[6][14].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_110   XRDC_0.MRGDN[6][14].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_110   XRDC_0.MRGDN[6][14].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_110   XRDC_0.MRGDN[6][14].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_111   XRDC_0.MRGDN[6][15].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_111   XRDC_0.MRGDN[6][15].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_111   XRDC_0.MRGDN[6][15].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_111   XRDC_0.MRGDN[6][15].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_112   XRDC_0.MRGDN[7][0].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_112   XRDC_0.MRGDN[7][0].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_112   XRDC_0.MRGDN[7][0].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_112   XRDC_0.MRGDN[7][0].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_113   XRDC_0.MRGDN[7][1].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_113   XRDC_0.MRGDN[7][1].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_113   XRDC_0.MRGDN[7][1].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_113   XRDC_0.MRGDN[7][1].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_114   XRDC_0.MRGDN[7][2].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_114   XRDC_0.MRGDN[7][2].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_114   XRDC_0.MRGDN[7][2].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_114   XRDC_0.MRGDN[7][2].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_115   XRDC_0.MRGDN[7][3].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_115   XRDC_0.MRGDN[7][3].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_115   XRDC_0.MRGDN[7][3].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_115   XRDC_0.MRGDN[7][3].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_116   XRDC_0.MRGDN[7][4].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_116   XRDC_0.MRGDN[7][4].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_116   XRDC_0.MRGDN[7][4].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_116   XRDC_0.MRGDN[7][4].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_117   XRDC_0.MRGDN[7][5].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_117   XRDC_0.MRGDN[7][5].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_117   XRDC_0.MRGDN[7][5].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_117   XRDC_0.MRGDN[7][5].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_118   XRDC_0.MRGDN[7][6].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_118   XRDC_0.MRGDN[7][6].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_118   XRDC_0.MRGDN[7][6].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_118   XRDC_0.MRGDN[7][6].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_119   XRDC_0.MRGDN[7][7].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_119   XRDC_0.MRGDN[7][7].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_119   XRDC_0.MRGDN[7][7].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_119   XRDC_0.MRGDN[7][7].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_120   XRDC_0.MRGDN[7][8].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_120   XRDC_0.MRGDN[7][8].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_120   XRDC_0.MRGDN[7][8].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_120   XRDC_0.MRGDN[7][8].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_121   XRDC_0.MRGDN[7][9].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_121   XRDC_0.MRGDN[7][9].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_121   XRDC_0.MRGDN[7][9].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_121   XRDC_0.MRGDN[7][9].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_122   XRDC_0.MRGDN[7][10].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_122   XRDC_0.MRGDN[7][10].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_122   XRDC_0.MRGDN[7][10].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_122   XRDC_0.MRGDN[7][10].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_123   XRDC_0.MRGDN[7][11].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_123   XRDC_0.MRGDN[7][11].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_123   XRDC_0.MRGDN[7][11].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_123   XRDC_0.MRGDN[7][11].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_124   XRDC_0.MRGDN[7][12].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_124   XRDC_0.MRGDN[7][12].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_124   XRDC_0.MRGDN[7][12].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_124   XRDC_0.MRGDN[7][12].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_125   XRDC_0.MRGDN[7][13].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_125   XRDC_0.MRGDN[7][13].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_125   XRDC_0.MRGDN[7][13].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_125   XRDC_0.MRGDN[7][13].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_126   XRDC_0.MRGDN[7][14].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_126   XRDC_0.MRGDN[7][14].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_126   XRDC_0.MRGDN[7][14].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_126   XRDC_0.MRGDN[7][14].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_127   XRDC_0.MRGDN[7][15].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_127   XRDC_0.MRGDN[7][15].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_127   XRDC_0.MRGDN[7][15].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_127   XRDC_0.MRGDN[7][15].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_128   XRDC_0.MRGDN[8][0].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_128   XRDC_0.MRGDN[8][0].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_128   XRDC_0.MRGDN[8][0].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_128   XRDC_0.MRGDN[8][0].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_129   XRDC_0.MRGDN[8][1].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_129   XRDC_0.MRGDN[8][1].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_129   XRDC_0.MRGDN[8][1].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_129   XRDC_0.MRGDN[8][1].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_130   XRDC_0.MRGDN[8][2].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_130   XRDC_0.MRGDN[8][2].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_130   XRDC_0.MRGDN[8][2].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_130   XRDC_0.MRGDN[8][2].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_131   XRDC_0.MRGDN[8][3].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_131   XRDC_0.MRGDN[8][3].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_131   XRDC_0.MRGDN[8][3].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_131   XRDC_0.MRGDN[8][3].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_132   XRDC_0.MRGDN[8][4].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_132   XRDC_0.MRGDN[8][4].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_132   XRDC_0.MRGDN[8][4].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_132   XRDC_0.MRGDN[8][4].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_133   XRDC_0.MRGDN[8][5].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_133   XRDC_0.MRGDN[8][5].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_133   XRDC_0.MRGDN[8][5].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_133   XRDC_0.MRGDN[8][5].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_134   XRDC_0.MRGDN[8][6].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_134   XRDC_0.MRGDN[8][6].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_134   XRDC_0.MRGDN[8][6].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_134   XRDC_0.MRGDN[8][6].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_135   XRDC_0.MRGDN[8][7].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_135   XRDC_0.MRGDN[8][7].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_135   XRDC_0.MRGDN[8][7].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_135   XRDC_0.MRGDN[8][7].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_136   XRDC_0.MRGDN[8][8].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_136   XRDC_0.MRGDN[8][8].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_136   XRDC_0.MRGDN[8][8].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_136   XRDC_0.MRGDN[8][8].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_137   XRDC_0.MRGDN[8][9].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_137   XRDC_0.MRGDN[8][9].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_137   XRDC_0.MRGDN[8][9].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_137   XRDC_0.MRGDN[8][9].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_138   XRDC_0.MRGDN[8][10].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_138   XRDC_0.MRGDN[8][10].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_138   XRDC_0.MRGDN[8][10].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_138   XRDC_0.MRGDN[8][10].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_139   XRDC_0.MRGDN[8][11].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_139   XRDC_0.MRGDN[8][11].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_139   XRDC_0.MRGDN[8][11].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_139   XRDC_0.MRGDN[8][11].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_140   XRDC_0.MRGDN[8][12].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_140   XRDC_0.MRGDN[8][12].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_140   XRDC_0.MRGDN[8][12].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_140   XRDC_0.MRGDN[8][12].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_141   XRDC_0.MRGDN[8][13].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_141   XRDC_0.MRGDN[8][13].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_141   XRDC_0.MRGDN[8][13].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_141   XRDC_0.MRGDN[8][13].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_142   XRDC_0.MRGDN[8][14].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_142   XRDC_0.MRGDN[8][14].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_142   XRDC_0.MRGDN[8][14].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_142   XRDC_0.MRGDN[8][14].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_143   XRDC_0.MRGDN[8][15].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_143   XRDC_0.MRGDN[8][15].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_143   XRDC_0.MRGDN[8][15].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_143   XRDC_0.MRGDN[8][15].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_144   XRDC_0.MRGDN[9][0].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_144   XRDC_0.MRGDN[9][0].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_144   XRDC_0.MRGDN[9][0].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_144   XRDC_0.MRGDN[9][0].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_145   XRDC_0.MRGDN[9][1].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_145   XRDC_0.MRGDN[9][1].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_145   XRDC_0.MRGDN[9][1].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_145   XRDC_0.MRGDN[9][1].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_146   XRDC_0.MRGDN[9][2].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_146   XRDC_0.MRGDN[9][2].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_146   XRDC_0.MRGDN[9][2].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_146   XRDC_0.MRGDN[9][2].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_147   XRDC_0.MRGDN[9][3].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_147   XRDC_0.MRGDN[9][3].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_147   XRDC_0.MRGDN[9][3].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_147   XRDC_0.MRGDN[9][3].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_148   XRDC_0.MRGDN[9][4].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_148   XRDC_0.MRGDN[9][4].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_148   XRDC_0.MRGDN[9][4].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_148   XRDC_0.MRGDN[9][4].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_149   XRDC_0.MRGDN[9][5].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_149   XRDC_0.MRGDN[9][5].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_149   XRDC_0.MRGDN[9][5].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_149   XRDC_0.MRGDN[9][5].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_150   XRDC_0.MRGDN[9][6].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_150   XRDC_0.MRGDN[9][6].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_150   XRDC_0.MRGDN[9][6].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_150   XRDC_0.MRGDN[9][6].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_151   XRDC_0.MRGDN[9][7].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_151   XRDC_0.MRGDN[9][7].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_151   XRDC_0.MRGDN[9][7].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_151   XRDC_0.MRGDN[9][7].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_152   XRDC_0.MRGDN[9][8].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_152   XRDC_0.MRGDN[9][8].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_152   XRDC_0.MRGDN[9][8].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_152   XRDC_0.MRGDN[9][8].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_153   XRDC_0.MRGDN[9][9].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_153   XRDC_0.MRGDN[9][9].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_153   XRDC_0.MRGDN[9][9].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_153   XRDC_0.MRGDN[9][9].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_154   XRDC_0.MRGDN[9][10].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_154   XRDC_0.MRGDN[9][10].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_154   XRDC_0.MRGDN[9][10].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_154   XRDC_0.MRGDN[9][10].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_155   XRDC_0.MRGDN[9][11].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_155   XRDC_0.MRGDN[9][11].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_155   XRDC_0.MRGDN[9][11].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_155   XRDC_0.MRGDN[9][11].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_156   XRDC_0.MRGDN[9][12].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_156   XRDC_0.MRGDN[9][12].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_156   XRDC_0.MRGDN[9][12].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_156   XRDC_0.MRGDN[9][12].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_157   XRDC_0.MRGDN[9][13].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_157   XRDC_0.MRGDN[9][13].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_157   XRDC_0.MRGDN[9][13].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_157   XRDC_0.MRGDN[9][13].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_158   XRDC_0.MRGDN[9][14].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_158   XRDC_0.MRGDN[9][14].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_158   XRDC_0.MRGDN[9][14].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_158   XRDC_0.MRGDN[9][14].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_159   XRDC_0.MRGDN[9][15].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_159   XRDC_0.MRGDN[9][15].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_159   XRDC_0.MRGDN[9][15].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_159   XRDC_0.MRGDN[9][15].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_160   XRDC_0.MRGDN[10][0].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_160   XRDC_0.MRGDN[10][0].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_160   XRDC_0.MRGDN[10][0].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_160   XRDC_0.MRGDN[10][0].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_161   XRDC_0.MRGDN[10][1].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_161   XRDC_0.MRGDN[10][1].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_161   XRDC_0.MRGDN[10][1].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_161   XRDC_0.MRGDN[10][1].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_162   XRDC_0.MRGDN[10][2].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_162   XRDC_0.MRGDN[10][2].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_162   XRDC_0.MRGDN[10][2].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_162   XRDC_0.MRGDN[10][2].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_163   XRDC_0.MRGDN[10][3].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_163   XRDC_0.MRGDN[10][3].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_163   XRDC_0.MRGDN[10][3].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_163   XRDC_0.MRGDN[10][3].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_164   XRDC_0.MRGDN[10][4].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_164   XRDC_0.MRGDN[10][4].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_164   XRDC_0.MRGDN[10][4].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_164   XRDC_0.MRGDN[10][4].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_165   XRDC_0.MRGDN[10][5].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_165   XRDC_0.MRGDN[10][5].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_165   XRDC_0.MRGDN[10][5].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_165   XRDC_0.MRGDN[10][5].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_166   XRDC_0.MRGDN[10][6].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_166   XRDC_0.MRGDN[10][6].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_166   XRDC_0.MRGDN[10][6].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_166   XRDC_0.MRGDN[10][6].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_167   XRDC_0.MRGDN[10][7].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_167   XRDC_0.MRGDN[10][7].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_167   XRDC_0.MRGDN[10][7].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_167   XRDC_0.MRGDN[10][7].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_168   XRDC_0.MRGDN[10][8].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_168   XRDC_0.MRGDN[10][8].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_168   XRDC_0.MRGDN[10][8].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_168   XRDC_0.MRGDN[10][8].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_169   XRDC_0.MRGDN[10][9].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_169   XRDC_0.MRGDN[10][9].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_169   XRDC_0.MRGDN[10][9].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_169   XRDC_0.MRGDN[10][9].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_170   XRDC_0.MRGDN[10][10].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_170   XRDC_0.MRGDN[10][10].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_170   XRDC_0.MRGDN[10][10].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_170   XRDC_0.MRGDN[10][10].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_171   XRDC_0.MRGDN[10][11].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_171   XRDC_0.MRGDN[10][11].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_171   XRDC_0.MRGDN[10][11].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_171   XRDC_0.MRGDN[10][11].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_172   XRDC_0.MRGDN[10][12].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_172   XRDC_0.MRGDN[10][12].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_172   XRDC_0.MRGDN[10][12].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_172   XRDC_0.MRGDN[10][12].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_173   XRDC_0.MRGDN[10][13].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_173   XRDC_0.MRGDN[10][13].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_173   XRDC_0.MRGDN[10][13].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_173   XRDC_0.MRGDN[10][13].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_174   XRDC_0.MRGDN[10][14].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_174   XRDC_0.MRGDN[10][14].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_174   XRDC_0.MRGDN[10][14].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_174   XRDC_0.MRGDN[10][14].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_175   XRDC_0.MRGDN[10][15].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_175   XRDC_0.MRGDN[10][15].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_175   XRDC_0.MRGDN[10][15].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_175   XRDC_0.MRGDN[10][15].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_176   XRDC_0.MRGDN[11][0].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_176   XRDC_0.MRGDN[11][0].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_176   XRDC_0.MRGDN[11][0].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_176   XRDC_0.MRGDN[11][0].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_177   XRDC_0.MRGDN[11][1].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_177   XRDC_0.MRGDN[11][1].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_177   XRDC_0.MRGDN[11][1].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_177   XRDC_0.MRGDN[11][1].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_178   XRDC_0.MRGDN[11][2].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_178   XRDC_0.MRGDN[11][2].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_178   XRDC_0.MRGDN[11][2].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_178   XRDC_0.MRGDN[11][2].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_179   XRDC_0.MRGDN[11][3].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_179   XRDC_0.MRGDN[11][3].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_179   XRDC_0.MRGDN[11][3].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_179   XRDC_0.MRGDN[11][3].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_180   XRDC_0.MRGDN[11][4].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_180   XRDC_0.MRGDN[11][4].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_180   XRDC_0.MRGDN[11][4].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_180   XRDC_0.MRGDN[11][4].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_181   XRDC_0.MRGDN[11][5].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_181   XRDC_0.MRGDN[11][5].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_181   XRDC_0.MRGDN[11][5].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_181   XRDC_0.MRGDN[11][5].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_182   XRDC_0.MRGDN[11][6].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_182   XRDC_0.MRGDN[11][6].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_182   XRDC_0.MRGDN[11][6].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_182   XRDC_0.MRGDN[11][6].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_183   XRDC_0.MRGDN[11][7].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_183   XRDC_0.MRGDN[11][7].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_183   XRDC_0.MRGDN[11][7].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_183   XRDC_0.MRGDN[11][7].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_184   XRDC_0.MRGDN[11][8].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_184   XRDC_0.MRGDN[11][8].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_184   XRDC_0.MRGDN[11][8].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_184   XRDC_0.MRGDN[11][8].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_185   XRDC_0.MRGDN[11][9].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_185   XRDC_0.MRGDN[11][9].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_185   XRDC_0.MRGDN[11][9].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_185   XRDC_0.MRGDN[11][9].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_186   XRDC_0.MRGDN[11][10].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_186   XRDC_0.MRGDN[11][10].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_186   XRDC_0.MRGDN[11][10].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_186   XRDC_0.MRGDN[11][10].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_187   XRDC_0.MRGDN[11][11].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_187   XRDC_0.MRGDN[11][11].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_187   XRDC_0.MRGDN[11][11].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_187   XRDC_0.MRGDN[11][11].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_192   XRDC_0.MRGDN[12][0].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_192   XRDC_0.MRGDN[12][0].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_192   XRDC_0.MRGDN[12][0].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_192   XRDC_0.MRGDN[12][0].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_193   XRDC_0.MRGDN[12][1].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_193   XRDC_0.MRGDN[12][1].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_193   XRDC_0.MRGDN[12][1].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_193   XRDC_0.MRGDN[12][1].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_194   XRDC_0.MRGDN[12][2].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_194   XRDC_0.MRGDN[12][2].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_194   XRDC_0.MRGDN[12][2].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_194   XRDC_0.MRGDN[12][2].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_195   XRDC_0.MRGDN[12][3].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_195   XRDC_0.MRGDN[12][3].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_195   XRDC_0.MRGDN[12][3].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_195   XRDC_0.MRGDN[12][3].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_208   XRDC_0.MRGDN[13][0].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_208   XRDC_0.MRGDN[13][0].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_208   XRDC_0.MRGDN[13][0].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_208   XRDC_0.MRGDN[13][0].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_209   XRDC_0.MRGDN[13][1].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_209   XRDC_0.MRGDN[13][1].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_209   XRDC_0.MRGDN[13][1].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_209   XRDC_0.MRGDN[13][1].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_210   XRDC_0.MRGDN[13][2].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_210   XRDC_0.MRGDN[13][2].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_210   XRDC_0.MRGDN[13][2].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_210   XRDC_0.MRGDN[13][2].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_211   XRDC_0.MRGDN[13][3].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_211   XRDC_0.MRGDN[13][3].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_211   XRDC_0.MRGDN[13][3].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_211   XRDC_0.MRGDN[13][3].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_212   XRDC_0.MRGDN[13][4].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_212   XRDC_0.MRGDN[13][4].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_212   XRDC_0.MRGDN[13][4].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_212   XRDC_0.MRGDN[13][4].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_213   XRDC_0.MRGDN[13][5].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_213   XRDC_0.MRGDN[13][5].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_213   XRDC_0.MRGDN[13][5].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_213   XRDC_0.MRGDN[13][5].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_214   XRDC_0.MRGDN[13][6].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_214   XRDC_0.MRGDN[13][6].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_214   XRDC_0.MRGDN[13][6].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_214   XRDC_0.MRGDN[13][6].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_215   XRDC_0.MRGDN[13][7].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_215   XRDC_0.MRGDN[13][7].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_215   XRDC_0.MRGDN[13][7].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_215   XRDC_0.MRGDN[13][7].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_216   XRDC_0.MRGDN[13][8].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_216   XRDC_0.MRGDN[13][8].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_216   XRDC_0.MRGDN[13][8].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_216   XRDC_0.MRGDN[13][8].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_217   XRDC_0.MRGDN[13][9].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_217   XRDC_0.MRGDN[13][9].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_217   XRDC_0.MRGDN[13][9].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_217   XRDC_0.MRGDN[13][9].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_218   XRDC_0.MRGDN[13][10].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_218   XRDC_0.MRGDN[13][10].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_218   XRDC_0.MRGDN[13][10].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_218   XRDC_0.MRGDN[13][10].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_219   XRDC_0.MRGDN[13][11].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_219   XRDC_0.MRGDN[13][11].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_219   XRDC_0.MRGDN[13][11].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_219   XRDC_0.MRGDN[13][11].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_220   XRDC_0.MRGDN[13][12].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_220   XRDC_0.MRGDN[13][12].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_220   XRDC_0.MRGDN[13][12].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_220   XRDC_0.MRGDN[13][12].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_221   XRDC_0.MRGDN[13][13].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_221   XRDC_0.MRGDN[13][13].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_221   XRDC_0.MRGDN[13][13].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_221   XRDC_0.MRGDN[13][13].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_222   XRDC_0.MRGDN[13][14].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_222   XRDC_0.MRGDN[13][14].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_222   XRDC_0.MRGDN[13][14].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_222   XRDC_0.MRGDN[13][14].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W0_223   XRDC_0.MRGDN[13][15].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W1_223   XRDC_0.MRGDN[13][15].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W2_223   XRDC_0.MRGDN[13][15].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_0_MRGD_W3_223   XRDC_0.MRGDN[13][15].XRDC_MRGD_W3.R /* Memory Region Descriptor */

/* ddr_subsystem */
#define DDR_SUBSYSTEM_reg_grp0 DDR_SUBSYSTEM.REG_GRP0.R    /* DDR SS Reg */

/* eDMA_0_MP */
#define EDMA_0_MP_CSR        EDMA_0_MP.CSR.R               /* Management Page Control */
#define EDMA_0_MP_ES         EDMA_0_MP.ES.R                /* Management Page Error Status */
#define EDMA_0_MP_INT        EDMA_0_MP.INT.R               /* Management Page Interrupt Request Status */
#define EDMA_0_MP_HRS        EDMA_0_MP.HRS.R               /* Management Page Hardware Request Status */
#define EDMA_0_MP_CH0_GRPRI  EDMA_0_MP.CH_GRPRI[0].R       /* Channel Arbitration Group */
#define EDMA_0_MP_CH1_GRPRI  EDMA_0_MP.CH_GRPRI[1].R       /* Channel Arbitration Group */
#define EDMA_0_MP_CH2_GRPRI  EDMA_0_MP.CH_GRPRI[2].R       /* Channel Arbitration Group */
#define EDMA_0_MP_CH3_GRPRI  EDMA_0_MP.CH_GRPRI[3].R       /* Channel Arbitration Group */
#define EDMA_0_MP_CH4_GRPRI  EDMA_0_MP.CH_GRPRI[4].R       /* Channel Arbitration Group */
#define EDMA_0_MP_CH5_GRPRI  EDMA_0_MP.CH_GRPRI[5].R       /* Channel Arbitration Group */
#define EDMA_0_MP_CH6_GRPRI  EDMA_0_MP.CH_GRPRI[6].R       /* Channel Arbitration Group */
#define EDMA_0_MP_CH7_GRPRI  EDMA_0_MP.CH_GRPRI[7].R       /* Channel Arbitration Group */
#define EDMA_0_MP_CH8_GRPRI  EDMA_0_MP.CH_GRPRI[8].R       /* Channel Arbitration Group */
#define EDMA_0_MP_CH9_GRPRI  EDMA_0_MP.CH_GRPRI[9].R       /* Channel Arbitration Group */
#define EDMA_0_MP_CH10_GRPRI EDMA_0_MP.CH_GRPRI[10].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH11_GRPRI EDMA_0_MP.CH_GRPRI[11].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH12_GRPRI EDMA_0_MP.CH_GRPRI[12].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH13_GRPRI EDMA_0_MP.CH_GRPRI[13].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH14_GRPRI EDMA_0_MP.CH_GRPRI[14].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH15_GRPRI EDMA_0_MP.CH_GRPRI[15].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH16_GRPRI EDMA_0_MP.CH_GRPRI[16].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH17_GRPRI EDMA_0_MP.CH_GRPRI[17].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH18_GRPRI EDMA_0_MP.CH_GRPRI[18].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH19_GRPRI EDMA_0_MP.CH_GRPRI[19].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH20_GRPRI EDMA_0_MP.CH_GRPRI[20].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH21_GRPRI EDMA_0_MP.CH_GRPRI[21].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH22_GRPRI EDMA_0_MP.CH_GRPRI[22].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH23_GRPRI EDMA_0_MP.CH_GRPRI[23].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH24_GRPRI EDMA_0_MP.CH_GRPRI[24].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH25_GRPRI EDMA_0_MP.CH_GRPRI[25].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH26_GRPRI EDMA_0_MP.CH_GRPRI[26].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH27_GRPRI EDMA_0_MP.CH_GRPRI[27].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH28_GRPRI EDMA_0_MP.CH_GRPRI[28].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH29_GRPRI EDMA_0_MP.CH_GRPRI[29].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH30_GRPRI EDMA_0_MP.CH_GRPRI[30].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH31_GRPRI EDMA_0_MP.CH_GRPRI[31].R      /* Channel Arbitration Group */

/* eDMA_0_TCD */
#define EDMA_0_TCD_CH0_CSR   EDMA_0_TCD.TCD[0].CH_CSR.R    /* Channel Control and Status */
#define EDMA_0_TCD_CH0_ES    EDMA_0_TCD.TCD[0].CH_ES.R     /* Channel Error Status */
#define EDMA_0_TCD_CH0_INT   EDMA_0_TCD.TCD[0].CH_INT.R    /* Channel Interrupt Status */
#define EDMA_0_TCD_CH0_SBR   EDMA_0_TCD.TCD[0].CH_SBR.R    /* Channel System Bus */
#define EDMA_0_TCD_CH0_PRI   EDMA_0_TCD.TCD[0].CH_PRI.R    /* Channel Priority */
#define EDMA_0_TCD_TCD0_SADDR EDMA_0_TCD.TCD[0].SADDR.R    /* TCD Source Address */
#define EDMA_0_TCD_TCD0_SOFF EDMA_0_TCD.TCD[0].SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD0_ATTR EDMA_0_TCD.TCD[0].ATTR.R      /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD0_NBYTES_MLOFFNO EDMA_0_TCD.TCD[0].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD0_NBYTES_MLOFFYES EDMA_0_TCD.TCD[0].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD0_SLAST_SDA EDMA_0_TCD.TCD[0].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD0_DADDR EDMA_0_TCD.TCD[0].DADDR.R    /* TCD Destination Address */
#define EDMA_0_TCD_TCD0_DOFF EDMA_0_TCD.TCD[0].DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD0_CITER_ELINKNO EDMA_0_TCD.TCD[0].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD0_CITER_ELINKYES EDMA_0_TCD.TCD[0].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD0_DLAST_SGA EDMA_0_TCD.TCD[0].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD0_CSR  EDMA_0_TCD.TCD[0].CSR.R       /* TCD Control and Status */
#define EDMA_0_TCD_TCD0_BITER_ELINKNO EDMA_0_TCD.TCD[0].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD0_BITER_ELINKYES EDMA_0_TCD.TCD[0].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_CH1_CSR   EDMA_0_TCD.TCD[1].CH_CSR.R    /* Channel Control and Status */
#define EDMA_0_TCD_CH1_ES    EDMA_0_TCD.TCD[1].CH_ES.R     /* Channel Error Status */
#define EDMA_0_TCD_CH1_INT   EDMA_0_TCD.TCD[1].CH_INT.R    /* Channel Interrupt Status */
#define EDMA_0_TCD_CH1_SBR   EDMA_0_TCD.TCD[1].CH_SBR.R    /* Channel System Bus */
#define EDMA_0_TCD_CH1_PRI   EDMA_0_TCD.TCD[1].CH_PRI.R    /* Channel Priority */
#define EDMA_0_TCD_TCD1_SADDR EDMA_0_TCD.TCD[1].SADDR.R    /* TCD Source Address */
#define EDMA_0_TCD_TCD1_SOFF EDMA_0_TCD.TCD[1].SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD1_ATTR EDMA_0_TCD.TCD[1].ATTR.R      /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD1_NBYTES_MLOFFNO EDMA_0_TCD.TCD[1].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD1_NBYTES_MLOFFYES EDMA_0_TCD.TCD[1].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD1_SLAST_SDA EDMA_0_TCD.TCD[1].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD1_DADDR EDMA_0_TCD.TCD[1].DADDR.R    /* TCD Destination Address */
#define EDMA_0_TCD_TCD1_DOFF EDMA_0_TCD.TCD[1].DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD1_CITER_ELINKNO EDMA_0_TCD.TCD[1].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD1_CITER_ELINKYES EDMA_0_TCD.TCD[1].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD1_DLAST_SGA EDMA_0_TCD.TCD[1].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD1_CSR  EDMA_0_TCD.TCD[1].CSR.R       /* TCD Control and Status */
#define EDMA_0_TCD_TCD1_BITER_ELINKNO EDMA_0_TCD.TCD[1].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD1_BITER_ELINKYES EDMA_0_TCD.TCD[1].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_CH2_CSR   EDMA_0_TCD.TCD[2].CH_CSR.R    /* Channel Control and Status */
#define EDMA_0_TCD_CH2_ES    EDMA_0_TCD.TCD[2].CH_ES.R     /* Channel Error Status */
#define EDMA_0_TCD_CH2_INT   EDMA_0_TCD.TCD[2].CH_INT.R    /* Channel Interrupt Status */
#define EDMA_0_TCD_CH2_SBR   EDMA_0_TCD.TCD[2].CH_SBR.R    /* Channel System Bus */
#define EDMA_0_TCD_CH2_PRI   EDMA_0_TCD.TCD[2].CH_PRI.R    /* Channel Priority */
#define EDMA_0_TCD_TCD2_SADDR EDMA_0_TCD.TCD[2].SADDR.R    /* TCD Source Address */
#define EDMA_0_TCD_TCD2_SOFF EDMA_0_TCD.TCD[2].SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD2_ATTR EDMA_0_TCD.TCD[2].ATTR.R      /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD2_NBYTES_MLOFFNO EDMA_0_TCD.TCD[2].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD2_NBYTES_MLOFFYES EDMA_0_TCD.TCD[2].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD2_SLAST_SDA EDMA_0_TCD.TCD[2].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD2_DADDR EDMA_0_TCD.TCD[2].DADDR.R    /* TCD Destination Address */
#define EDMA_0_TCD_TCD2_DOFF EDMA_0_TCD.TCD[2].DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD2_CITER_ELINKNO EDMA_0_TCD.TCD[2].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD2_CITER_ELINKYES EDMA_0_TCD.TCD[2].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD2_DLAST_SGA EDMA_0_TCD.TCD[2].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD2_CSR  EDMA_0_TCD.TCD[2].CSR.R       /* TCD Control and Status */
#define EDMA_0_TCD_TCD2_BITER_ELINKNO EDMA_0_TCD.TCD[2].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD2_BITER_ELINKYES EDMA_0_TCD.TCD[2].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_CH3_CSR   EDMA_0_TCD.TCD[3].CH_CSR.R    /* Channel Control and Status */
#define EDMA_0_TCD_CH3_ES    EDMA_0_TCD.TCD[3].CH_ES.R     /* Channel Error Status */
#define EDMA_0_TCD_CH3_INT   EDMA_0_TCD.TCD[3].CH_INT.R    /* Channel Interrupt Status */
#define EDMA_0_TCD_CH3_SBR   EDMA_0_TCD.TCD[3].CH_SBR.R    /* Channel System Bus */
#define EDMA_0_TCD_CH3_PRI   EDMA_0_TCD.TCD[3].CH_PRI.R    /* Channel Priority */
#define EDMA_0_TCD_TCD3_SADDR EDMA_0_TCD.TCD[3].SADDR.R    /* TCD Source Address */
#define EDMA_0_TCD_TCD3_SOFF EDMA_0_TCD.TCD[3].SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD3_ATTR EDMA_0_TCD.TCD[3].ATTR.R      /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD3_NBYTES_MLOFFNO EDMA_0_TCD.TCD[3].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD3_NBYTES_MLOFFYES EDMA_0_TCD.TCD[3].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD3_SLAST_SDA EDMA_0_TCD.TCD[3].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD3_DADDR EDMA_0_TCD.TCD[3].DADDR.R    /* TCD Destination Address */
#define EDMA_0_TCD_TCD3_DOFF EDMA_0_TCD.TCD[3].DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD3_CITER_ELINKNO EDMA_0_TCD.TCD[3].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD3_CITER_ELINKYES EDMA_0_TCD.TCD[3].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD3_DLAST_SGA EDMA_0_TCD.TCD[3].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD3_CSR  EDMA_0_TCD.TCD[3].CSR.R       /* TCD Control and Status */
#define EDMA_0_TCD_TCD3_BITER_ELINKNO EDMA_0_TCD.TCD[3].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD3_BITER_ELINKYES EDMA_0_TCD.TCD[3].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_CH4_CSR   EDMA_0_TCD.TCD[4].CH_CSR.R    /* Channel Control and Status */
#define EDMA_0_TCD_CH4_ES    EDMA_0_TCD.TCD[4].CH_ES.R     /* Channel Error Status */
#define EDMA_0_TCD_CH4_INT   EDMA_0_TCD.TCD[4].CH_INT.R    /* Channel Interrupt Status */
#define EDMA_0_TCD_CH4_SBR   EDMA_0_TCD.TCD[4].CH_SBR.R    /* Channel System Bus */
#define EDMA_0_TCD_CH4_PRI   EDMA_0_TCD.TCD[4].CH_PRI.R    /* Channel Priority */
#define EDMA_0_TCD_TCD4_SADDR EDMA_0_TCD.TCD[4].SADDR.R    /* TCD Source Address */
#define EDMA_0_TCD_TCD4_SOFF EDMA_0_TCD.TCD[4].SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD4_ATTR EDMA_0_TCD.TCD[4].ATTR.R      /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD4_NBYTES_MLOFFNO EDMA_0_TCD.TCD[4].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD4_NBYTES_MLOFFYES EDMA_0_TCD.TCD[4].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD4_SLAST_SDA EDMA_0_TCD.TCD[4].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD4_DADDR EDMA_0_TCD.TCD[4].DADDR.R    /* TCD Destination Address */
#define EDMA_0_TCD_TCD4_DOFF EDMA_0_TCD.TCD[4].DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD4_CITER_ELINKNO EDMA_0_TCD.TCD[4].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD4_CITER_ELINKYES EDMA_0_TCD.TCD[4].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD4_DLAST_SGA EDMA_0_TCD.TCD[4].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD4_CSR  EDMA_0_TCD.TCD[4].CSR.R       /* TCD Control and Status */
#define EDMA_0_TCD_TCD4_BITER_ELINKNO EDMA_0_TCD.TCD[4].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD4_BITER_ELINKYES EDMA_0_TCD.TCD[4].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_CH5_CSR   EDMA_0_TCD.TCD[5].CH_CSR.R    /* Channel Control and Status */
#define EDMA_0_TCD_CH5_ES    EDMA_0_TCD.TCD[5].CH_ES.R     /* Channel Error Status */
#define EDMA_0_TCD_CH5_INT   EDMA_0_TCD.TCD[5].CH_INT.R    /* Channel Interrupt Status */
#define EDMA_0_TCD_CH5_SBR   EDMA_0_TCD.TCD[5].CH_SBR.R    /* Channel System Bus */
#define EDMA_0_TCD_CH5_PRI   EDMA_0_TCD.TCD[5].CH_PRI.R    /* Channel Priority */
#define EDMA_0_TCD_TCD5_SADDR EDMA_0_TCD.TCD[5].SADDR.R    /* TCD Source Address */
#define EDMA_0_TCD_TCD5_SOFF EDMA_0_TCD.TCD[5].SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD5_ATTR EDMA_0_TCD.TCD[5].ATTR.R      /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD5_NBYTES_MLOFFNO EDMA_0_TCD.TCD[5].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD5_NBYTES_MLOFFYES EDMA_0_TCD.TCD[5].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD5_SLAST_SDA EDMA_0_TCD.TCD[5].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD5_DADDR EDMA_0_TCD.TCD[5].DADDR.R    /* TCD Destination Address */
#define EDMA_0_TCD_TCD5_DOFF EDMA_0_TCD.TCD[5].DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD5_CITER_ELINKNO EDMA_0_TCD.TCD[5].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD5_CITER_ELINKYES EDMA_0_TCD.TCD[5].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD5_DLAST_SGA EDMA_0_TCD.TCD[5].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD5_CSR  EDMA_0_TCD.TCD[5].CSR.R       /* TCD Control and Status */
#define EDMA_0_TCD_TCD5_BITER_ELINKNO EDMA_0_TCD.TCD[5].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD5_BITER_ELINKYES EDMA_0_TCD.TCD[5].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_CH6_CSR   EDMA_0_TCD.TCD[6].CH_CSR.R    /* Channel Control and Status */
#define EDMA_0_TCD_CH6_ES    EDMA_0_TCD.TCD[6].CH_ES.R     /* Channel Error Status */
#define EDMA_0_TCD_CH6_INT   EDMA_0_TCD.TCD[6].CH_INT.R    /* Channel Interrupt Status */
#define EDMA_0_TCD_CH6_SBR   EDMA_0_TCD.TCD[6].CH_SBR.R    /* Channel System Bus */
#define EDMA_0_TCD_CH6_PRI   EDMA_0_TCD.TCD[6].CH_PRI.R    /* Channel Priority */
#define EDMA_0_TCD_TCD6_SADDR EDMA_0_TCD.TCD[6].SADDR.R    /* TCD Source Address */
#define EDMA_0_TCD_TCD6_SOFF EDMA_0_TCD.TCD[6].SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD6_ATTR EDMA_0_TCD.TCD[6].ATTR.R      /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD6_NBYTES_MLOFFNO EDMA_0_TCD.TCD[6].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD6_NBYTES_MLOFFYES EDMA_0_TCD.TCD[6].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD6_SLAST_SDA EDMA_0_TCD.TCD[6].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD6_DADDR EDMA_0_TCD.TCD[6].DADDR.R    /* TCD Destination Address */
#define EDMA_0_TCD_TCD6_DOFF EDMA_0_TCD.TCD[6].DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD6_CITER_ELINKNO EDMA_0_TCD.TCD[6].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD6_CITER_ELINKYES EDMA_0_TCD.TCD[6].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD6_DLAST_SGA EDMA_0_TCD.TCD[6].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD6_CSR  EDMA_0_TCD.TCD[6].CSR.R       /* TCD Control and Status */
#define EDMA_0_TCD_TCD6_BITER_ELINKNO EDMA_0_TCD.TCD[6].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD6_BITER_ELINKYES EDMA_0_TCD.TCD[6].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_CH7_CSR   EDMA_0_TCD.TCD[7].CH_CSR.R    /* Channel Control and Status */
#define EDMA_0_TCD_CH7_ES    EDMA_0_TCD.TCD[7].CH_ES.R     /* Channel Error Status */
#define EDMA_0_TCD_CH7_INT   EDMA_0_TCD.TCD[7].CH_INT.R    /* Channel Interrupt Status */
#define EDMA_0_TCD_CH7_SBR   EDMA_0_TCD.TCD[7].CH_SBR.R    /* Channel System Bus */
#define EDMA_0_TCD_CH7_PRI   EDMA_0_TCD.TCD[7].CH_PRI.R    /* Channel Priority */
#define EDMA_0_TCD_TCD7_SADDR EDMA_0_TCD.TCD[7].SADDR.R    /* TCD Source Address */
#define EDMA_0_TCD_TCD7_SOFF EDMA_0_TCD.TCD[7].SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD7_ATTR EDMA_0_TCD.TCD[7].ATTR.R      /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD7_NBYTES_MLOFFNO EDMA_0_TCD.TCD[7].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD7_NBYTES_MLOFFYES EDMA_0_TCD.TCD[7].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD7_SLAST_SDA EDMA_0_TCD.TCD[7].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD7_DADDR EDMA_0_TCD.TCD[7].DADDR.R    /* TCD Destination Address */
#define EDMA_0_TCD_TCD7_DOFF EDMA_0_TCD.TCD[7].DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD7_CITER_ELINKNO EDMA_0_TCD.TCD[7].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD7_CITER_ELINKYES EDMA_0_TCD.TCD[7].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD7_DLAST_SGA EDMA_0_TCD.TCD[7].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD7_CSR  EDMA_0_TCD.TCD[7].CSR.R       /* TCD Control and Status */
#define EDMA_0_TCD_TCD7_BITER_ELINKNO EDMA_0_TCD.TCD[7].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD7_BITER_ELINKYES EDMA_0_TCD.TCD[7].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_CH8_CSR   EDMA_0_TCD.TCD[8].CH_CSR.R    /* Channel Control and Status */
#define EDMA_0_TCD_CH8_ES    EDMA_0_TCD.TCD[8].CH_ES.R     /* Channel Error Status */
#define EDMA_0_TCD_CH8_INT   EDMA_0_TCD.TCD[8].CH_INT.R    /* Channel Interrupt Status */
#define EDMA_0_TCD_CH8_SBR   EDMA_0_TCD.TCD[8].CH_SBR.R    /* Channel System Bus */
#define EDMA_0_TCD_CH8_PRI   EDMA_0_TCD.TCD[8].CH_PRI.R    /* Channel Priority */
#define EDMA_0_TCD_TCD8_SADDR EDMA_0_TCD.TCD[8].SADDR.R    /* TCD Source Address */
#define EDMA_0_TCD_TCD8_SOFF EDMA_0_TCD.TCD[8].SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD8_ATTR EDMA_0_TCD.TCD[8].ATTR.R      /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD8_NBYTES_MLOFFNO EDMA_0_TCD.TCD[8].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD8_NBYTES_MLOFFYES EDMA_0_TCD.TCD[8].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD8_SLAST_SDA EDMA_0_TCD.TCD[8].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD8_DADDR EDMA_0_TCD.TCD[8].DADDR.R    /* TCD Destination Address */
#define EDMA_0_TCD_TCD8_DOFF EDMA_0_TCD.TCD[8].DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD8_CITER_ELINKNO EDMA_0_TCD.TCD[8].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD8_CITER_ELINKYES EDMA_0_TCD.TCD[8].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD8_DLAST_SGA EDMA_0_TCD.TCD[8].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD8_CSR  EDMA_0_TCD.TCD[8].CSR.R       /* TCD Control and Status */
#define EDMA_0_TCD_TCD8_BITER_ELINKNO EDMA_0_TCD.TCD[8].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD8_BITER_ELINKYES EDMA_0_TCD.TCD[8].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_CH9_CSR   EDMA_0_TCD.TCD[9].CH_CSR.R    /* Channel Control and Status */
#define EDMA_0_TCD_CH9_ES    EDMA_0_TCD.TCD[9].CH_ES.R     /* Channel Error Status */
#define EDMA_0_TCD_CH9_INT   EDMA_0_TCD.TCD[9].CH_INT.R    /* Channel Interrupt Status */
#define EDMA_0_TCD_CH9_SBR   EDMA_0_TCD.TCD[9].CH_SBR.R    /* Channel System Bus */
#define EDMA_0_TCD_CH9_PRI   EDMA_0_TCD.TCD[9].CH_PRI.R    /* Channel Priority */
#define EDMA_0_TCD_TCD9_SADDR EDMA_0_TCD.TCD[9].SADDR.R    /* TCD Source Address */
#define EDMA_0_TCD_TCD9_SOFF EDMA_0_TCD.TCD[9].SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD9_ATTR EDMA_0_TCD.TCD[9].ATTR.R      /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD9_NBYTES_MLOFFNO EDMA_0_TCD.TCD[9].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD9_NBYTES_MLOFFYES EDMA_0_TCD.TCD[9].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD9_SLAST_SDA EDMA_0_TCD.TCD[9].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD9_DADDR EDMA_0_TCD.TCD[9].DADDR.R    /* TCD Destination Address */
#define EDMA_0_TCD_TCD9_DOFF EDMA_0_TCD.TCD[9].DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD9_CITER_ELINKNO EDMA_0_TCD.TCD[9].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD9_CITER_ELINKYES EDMA_0_TCD.TCD[9].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD9_DLAST_SGA EDMA_0_TCD.TCD[9].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD9_CSR  EDMA_0_TCD.TCD[9].CSR.R       /* TCD Control and Status */
#define EDMA_0_TCD_TCD9_BITER_ELINKNO EDMA_0_TCD.TCD[9].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD9_BITER_ELINKYES EDMA_0_TCD.TCD[9].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_CH10_CSR  EDMA_0_TCD.TCD[10].CH_CSR.R   /* Channel Control and Status */
#define EDMA_0_TCD_CH10_ES   EDMA_0_TCD.TCD[10].CH_ES.R    /* Channel Error Status */
#define EDMA_0_TCD_CH10_INT  EDMA_0_TCD.TCD[10].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_0_TCD_CH10_SBR  EDMA_0_TCD.TCD[10].CH_SBR.R   /* Channel System Bus */
#define EDMA_0_TCD_CH10_PRI  EDMA_0_TCD.TCD[10].CH_PRI.R   /* Channel Priority */
#define EDMA_0_TCD_TCD10_SADDR EDMA_0_TCD.TCD[10].SADDR.R  /* TCD Source Address */
#define EDMA_0_TCD_TCD10_SOFF EDMA_0_TCD.TCD[10].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD10_ATTR EDMA_0_TCD.TCD[10].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD10_NBYTES_MLOFFNO EDMA_0_TCD.TCD[10].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD10_NBYTES_MLOFFYES EDMA_0_TCD.TCD[10].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD10_SLAST_SDA EDMA_0_TCD.TCD[10].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD10_DADDR EDMA_0_TCD.TCD[10].DADDR.R  /* TCD Destination Address */
#define EDMA_0_TCD_TCD10_DOFF EDMA_0_TCD.TCD[10].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD10_CITER_ELINKNO EDMA_0_TCD.TCD[10].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD10_CITER_ELINKYES EDMA_0_TCD.TCD[10].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD10_DLAST_SGA EDMA_0_TCD.TCD[10].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD10_CSR EDMA_0_TCD.TCD[10].CSR.R      /* TCD Control and Status */
#define EDMA_0_TCD_TCD10_BITER_ELINKNO EDMA_0_TCD.TCD[10].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD10_BITER_ELINKYES EDMA_0_TCD.TCD[10].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_CH11_CSR  EDMA_0_TCD.TCD[11].CH_CSR.R   /* Channel Control and Status */
#define EDMA_0_TCD_CH11_ES   EDMA_0_TCD.TCD[11].CH_ES.R    /* Channel Error Status */
#define EDMA_0_TCD_CH11_INT  EDMA_0_TCD.TCD[11].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_0_TCD_CH11_SBR  EDMA_0_TCD.TCD[11].CH_SBR.R   /* Channel System Bus */
#define EDMA_0_TCD_CH11_PRI  EDMA_0_TCD.TCD[11].CH_PRI.R   /* Channel Priority */
#define EDMA_0_TCD_TCD11_SADDR EDMA_0_TCD.TCD[11].SADDR.R  /* TCD Source Address */
#define EDMA_0_TCD_TCD11_SOFF EDMA_0_TCD.TCD[11].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD11_ATTR EDMA_0_TCD.TCD[11].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD11_NBYTES_MLOFFNO EDMA_0_TCD.TCD[11].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD11_NBYTES_MLOFFYES EDMA_0_TCD.TCD[11].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD11_SLAST_SDA EDMA_0_TCD.TCD[11].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD11_DADDR EDMA_0_TCD.TCD[11].DADDR.R  /* TCD Destination Address */
#define EDMA_0_TCD_TCD11_DOFF EDMA_0_TCD.TCD[11].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD11_CITER_ELINKNO EDMA_0_TCD.TCD[11].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD11_CITER_ELINKYES EDMA_0_TCD.TCD[11].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD11_DLAST_SGA EDMA_0_TCD.TCD[11].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD11_CSR EDMA_0_TCD.TCD[11].CSR.R      /* TCD Control and Status */
#define EDMA_0_TCD_TCD11_BITER_ELINKNO EDMA_0_TCD.TCD[11].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD11_BITER_ELINKYES EDMA_0_TCD.TCD[11].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_CH12_CSR  EDMA_0_TCD.TCD[12].CH_CSR.R   /* Channel Control and Status */
#define EDMA_0_TCD_CH12_ES   EDMA_0_TCD.TCD[12].CH_ES.R    /* Channel Error Status */
#define EDMA_0_TCD_CH12_INT  EDMA_0_TCD.TCD[12].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_0_TCD_CH12_SBR  EDMA_0_TCD.TCD[12].CH_SBR.R   /* Channel System Bus */
#define EDMA_0_TCD_CH12_PRI  EDMA_0_TCD.TCD[12].CH_PRI.R   /* Channel Priority */
#define EDMA_0_TCD_TCD12_SADDR EDMA_0_TCD.TCD[12].SADDR.R  /* TCD Source Address */
#define EDMA_0_TCD_TCD12_SOFF EDMA_0_TCD.TCD[12].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD12_ATTR EDMA_0_TCD.TCD[12].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD12_NBYTES_MLOFFNO EDMA_0_TCD.TCD[12].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD12_NBYTES_MLOFFYES EDMA_0_TCD.TCD[12].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD12_SLAST_SDA EDMA_0_TCD.TCD[12].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD12_DADDR EDMA_0_TCD.TCD[12].DADDR.R  /* TCD Destination Address */
#define EDMA_0_TCD_TCD12_DOFF EDMA_0_TCD.TCD[12].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD12_CITER_ELINKNO EDMA_0_TCD.TCD[12].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD12_CITER_ELINKYES EDMA_0_TCD.TCD[12].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD12_DLAST_SGA EDMA_0_TCD.TCD[12].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD12_CSR EDMA_0_TCD.TCD[12].CSR.R      /* TCD Control and Status */
#define EDMA_0_TCD_TCD12_BITER_ELINKNO EDMA_0_TCD.TCD[12].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD12_BITER_ELINKYES EDMA_0_TCD.TCD[12].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_CH13_CSR  EDMA_0_TCD.TCD[13].CH_CSR.R   /* Channel Control and Status */
#define EDMA_0_TCD_CH13_ES   EDMA_0_TCD.TCD[13].CH_ES.R    /* Channel Error Status */
#define EDMA_0_TCD_CH13_INT  EDMA_0_TCD.TCD[13].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_0_TCD_CH13_SBR  EDMA_0_TCD.TCD[13].CH_SBR.R   /* Channel System Bus */
#define EDMA_0_TCD_CH13_PRI  EDMA_0_TCD.TCD[13].CH_PRI.R   /* Channel Priority */
#define EDMA_0_TCD_TCD13_SADDR EDMA_0_TCD.TCD[13].SADDR.R  /* TCD Source Address */
#define EDMA_0_TCD_TCD13_SOFF EDMA_0_TCD.TCD[13].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD13_ATTR EDMA_0_TCD.TCD[13].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD13_NBYTES_MLOFFNO EDMA_0_TCD.TCD[13].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD13_NBYTES_MLOFFYES EDMA_0_TCD.TCD[13].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD13_SLAST_SDA EDMA_0_TCD.TCD[13].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD13_DADDR EDMA_0_TCD.TCD[13].DADDR.R  /* TCD Destination Address */
#define EDMA_0_TCD_TCD13_DOFF EDMA_0_TCD.TCD[13].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD13_CITER_ELINKNO EDMA_0_TCD.TCD[13].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD13_CITER_ELINKYES EDMA_0_TCD.TCD[13].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD13_DLAST_SGA EDMA_0_TCD.TCD[13].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD13_CSR EDMA_0_TCD.TCD[13].CSR.R      /* TCD Control and Status */
#define EDMA_0_TCD_TCD13_BITER_ELINKNO EDMA_0_TCD.TCD[13].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD13_BITER_ELINKYES EDMA_0_TCD.TCD[13].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_CH14_CSR  EDMA_0_TCD.TCD[14].CH_CSR.R   /* Channel Control and Status */
#define EDMA_0_TCD_CH14_ES   EDMA_0_TCD.TCD[14].CH_ES.R    /* Channel Error Status */
#define EDMA_0_TCD_CH14_INT  EDMA_0_TCD.TCD[14].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_0_TCD_CH14_SBR  EDMA_0_TCD.TCD[14].CH_SBR.R   /* Channel System Bus */
#define EDMA_0_TCD_CH14_PRI  EDMA_0_TCD.TCD[14].CH_PRI.R   /* Channel Priority */
#define EDMA_0_TCD_TCD14_SADDR EDMA_0_TCD.TCD[14].SADDR.R  /* TCD Source Address */
#define EDMA_0_TCD_TCD14_SOFF EDMA_0_TCD.TCD[14].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD14_ATTR EDMA_0_TCD.TCD[14].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD14_NBYTES_MLOFFNO EDMA_0_TCD.TCD[14].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD14_NBYTES_MLOFFYES EDMA_0_TCD.TCD[14].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD14_SLAST_SDA EDMA_0_TCD.TCD[14].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD14_DADDR EDMA_0_TCD.TCD[14].DADDR.R  /* TCD Destination Address */
#define EDMA_0_TCD_TCD14_DOFF EDMA_0_TCD.TCD[14].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD14_CITER_ELINKNO EDMA_0_TCD.TCD[14].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD14_CITER_ELINKYES EDMA_0_TCD.TCD[14].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD14_DLAST_SGA EDMA_0_TCD.TCD[14].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD14_CSR EDMA_0_TCD.TCD[14].CSR.R      /* TCD Control and Status */
#define EDMA_0_TCD_TCD14_BITER_ELINKNO EDMA_0_TCD.TCD[14].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD14_BITER_ELINKYES EDMA_0_TCD.TCD[14].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_CH15_CSR  EDMA_0_TCD.TCD[15].CH_CSR.R   /* Channel Control and Status */
#define EDMA_0_TCD_CH15_ES   EDMA_0_TCD.TCD[15].CH_ES.R    /* Channel Error Status */
#define EDMA_0_TCD_CH15_INT  EDMA_0_TCD.TCD[15].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_0_TCD_CH15_SBR  EDMA_0_TCD.TCD[15].CH_SBR.R   /* Channel System Bus */
#define EDMA_0_TCD_CH15_PRI  EDMA_0_TCD.TCD[15].CH_PRI.R   /* Channel Priority */
#define EDMA_0_TCD_TCD15_SADDR EDMA_0_TCD.TCD[15].SADDR.R  /* TCD Source Address */
#define EDMA_0_TCD_TCD15_SOFF EDMA_0_TCD.TCD[15].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD15_ATTR EDMA_0_TCD.TCD[15].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD15_NBYTES_MLOFFNO EDMA_0_TCD.TCD[15].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD15_NBYTES_MLOFFYES EDMA_0_TCD.TCD[15].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD15_SLAST_SDA EDMA_0_TCD.TCD[15].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD15_DADDR EDMA_0_TCD.TCD[15].DADDR.R  /* TCD Destination Address */
#define EDMA_0_TCD_TCD15_DOFF EDMA_0_TCD.TCD[15].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD15_CITER_ELINKNO EDMA_0_TCD.TCD[15].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD15_CITER_ELINKYES EDMA_0_TCD.TCD[15].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD15_DLAST_SGA EDMA_0_TCD.TCD[15].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD15_CSR EDMA_0_TCD.TCD[15].CSR.R      /* TCD Control and Status */
#define EDMA_0_TCD_TCD15_BITER_ELINKNO EDMA_0_TCD.TCD[15].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD15_BITER_ELINKYES EDMA_0_TCD.TCD[15].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_CH16_CSR  EDMA_0_TCD.TCD[16].CH_CSR.R   /* Channel Control and Status */
#define EDMA_0_TCD_CH16_ES   EDMA_0_TCD.TCD[16].CH_ES.R    /* Channel Error Status */
#define EDMA_0_TCD_CH16_INT  EDMA_0_TCD.TCD[16].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_0_TCD_CH16_SBR  EDMA_0_TCD.TCD[16].CH_SBR.R   /* Channel System Bus */
#define EDMA_0_TCD_CH16_PRI  EDMA_0_TCD.TCD[16].CH_PRI.R   /* Channel Priority */
#define EDMA_0_TCD_TCD16_SADDR EDMA_0_TCD.TCD[16].SADDR.R  /* TCD Source Address */
#define EDMA_0_TCD_TCD16_SOFF EDMA_0_TCD.TCD[16].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD16_ATTR EDMA_0_TCD.TCD[16].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD16_NBYTES_MLOFFNO EDMA_0_TCD.TCD[16].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD16_NBYTES_MLOFFYES EDMA_0_TCD.TCD[16].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD16_SLAST_SDA EDMA_0_TCD.TCD[16].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD16_DADDR EDMA_0_TCD.TCD[16].DADDR.R  /* TCD Destination Address */
#define EDMA_0_TCD_TCD16_DOFF EDMA_0_TCD.TCD[16].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD16_CITER_ELINKNO EDMA_0_TCD.TCD[16].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD16_CITER_ELINKYES EDMA_0_TCD.TCD[16].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD16_DLAST_SGA EDMA_0_TCD.TCD[16].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD16_CSR EDMA_0_TCD.TCD[16].CSR.R      /* TCD Control and Status */
#define EDMA_0_TCD_TCD16_BITER_ELINKNO EDMA_0_TCD.TCD[16].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD16_BITER_ELINKYES EDMA_0_TCD.TCD[16].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_CH17_CSR  EDMA_0_TCD.TCD[17].CH_CSR.R   /* Channel Control and Status */
#define EDMA_0_TCD_CH17_ES   EDMA_0_TCD.TCD[17].CH_ES.R    /* Channel Error Status */
#define EDMA_0_TCD_CH17_INT  EDMA_0_TCD.TCD[17].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_0_TCD_CH17_SBR  EDMA_0_TCD.TCD[17].CH_SBR.R   /* Channel System Bus */
#define EDMA_0_TCD_CH17_PRI  EDMA_0_TCD.TCD[17].CH_PRI.R   /* Channel Priority */
#define EDMA_0_TCD_TCD17_SADDR EDMA_0_TCD.TCD[17].SADDR.R  /* TCD Source Address */
#define EDMA_0_TCD_TCD17_SOFF EDMA_0_TCD.TCD[17].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD17_ATTR EDMA_0_TCD.TCD[17].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD17_NBYTES_MLOFFNO EDMA_0_TCD.TCD[17].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD17_NBYTES_MLOFFYES EDMA_0_TCD.TCD[17].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD17_SLAST_SDA EDMA_0_TCD.TCD[17].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD17_DADDR EDMA_0_TCD.TCD[17].DADDR.R  /* TCD Destination Address */
#define EDMA_0_TCD_TCD17_DOFF EDMA_0_TCD.TCD[17].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD17_CITER_ELINKNO EDMA_0_TCD.TCD[17].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD17_CITER_ELINKYES EDMA_0_TCD.TCD[17].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD17_DLAST_SGA EDMA_0_TCD.TCD[17].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD17_CSR EDMA_0_TCD.TCD[17].CSR.R      /* TCD Control and Status */
#define EDMA_0_TCD_TCD17_BITER_ELINKNO EDMA_0_TCD.TCD[17].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD17_BITER_ELINKYES EDMA_0_TCD.TCD[17].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_CH18_CSR  EDMA_0_TCD.TCD[18].CH_CSR.R   /* Channel Control and Status */
#define EDMA_0_TCD_CH18_ES   EDMA_0_TCD.TCD[18].CH_ES.R    /* Channel Error Status */
#define EDMA_0_TCD_CH18_INT  EDMA_0_TCD.TCD[18].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_0_TCD_CH18_SBR  EDMA_0_TCD.TCD[18].CH_SBR.R   /* Channel System Bus */
#define EDMA_0_TCD_CH18_PRI  EDMA_0_TCD.TCD[18].CH_PRI.R   /* Channel Priority */
#define EDMA_0_TCD_TCD18_SADDR EDMA_0_TCD.TCD[18].SADDR.R  /* TCD Source Address */
#define EDMA_0_TCD_TCD18_SOFF EDMA_0_TCD.TCD[18].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD18_ATTR EDMA_0_TCD.TCD[18].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD18_NBYTES_MLOFFNO EDMA_0_TCD.TCD[18].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD18_NBYTES_MLOFFYES EDMA_0_TCD.TCD[18].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD18_SLAST_SDA EDMA_0_TCD.TCD[18].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD18_DADDR EDMA_0_TCD.TCD[18].DADDR.R  /* TCD Destination Address */
#define EDMA_0_TCD_TCD18_DOFF EDMA_0_TCD.TCD[18].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD18_CITER_ELINKNO EDMA_0_TCD.TCD[18].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD18_CITER_ELINKYES EDMA_0_TCD.TCD[18].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD18_DLAST_SGA EDMA_0_TCD.TCD[18].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD18_CSR EDMA_0_TCD.TCD[18].CSR.R      /* TCD Control and Status */
#define EDMA_0_TCD_TCD18_BITER_ELINKNO EDMA_0_TCD.TCD[18].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD18_BITER_ELINKYES EDMA_0_TCD.TCD[18].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_CH19_CSR  EDMA_0_TCD.TCD[19].CH_CSR.R   /* Channel Control and Status */
#define EDMA_0_TCD_CH19_ES   EDMA_0_TCD.TCD[19].CH_ES.R    /* Channel Error Status */
#define EDMA_0_TCD_CH19_INT  EDMA_0_TCD.TCD[19].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_0_TCD_CH19_SBR  EDMA_0_TCD.TCD[19].CH_SBR.R   /* Channel System Bus */
#define EDMA_0_TCD_CH19_PRI  EDMA_0_TCD.TCD[19].CH_PRI.R   /* Channel Priority */
#define EDMA_0_TCD_TCD19_SADDR EDMA_0_TCD.TCD[19].SADDR.R  /* TCD Source Address */
#define EDMA_0_TCD_TCD19_SOFF EDMA_0_TCD.TCD[19].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD19_ATTR EDMA_0_TCD.TCD[19].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD19_NBYTES_MLOFFNO EDMA_0_TCD.TCD[19].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD19_NBYTES_MLOFFYES EDMA_0_TCD.TCD[19].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD19_SLAST_SDA EDMA_0_TCD.TCD[19].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD19_DADDR EDMA_0_TCD.TCD[19].DADDR.R  /* TCD Destination Address */
#define EDMA_0_TCD_TCD19_DOFF EDMA_0_TCD.TCD[19].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD19_CITER_ELINKNO EDMA_0_TCD.TCD[19].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD19_CITER_ELINKYES EDMA_0_TCD.TCD[19].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD19_DLAST_SGA EDMA_0_TCD.TCD[19].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD19_CSR EDMA_0_TCD.TCD[19].CSR.R      /* TCD Control and Status */
#define EDMA_0_TCD_TCD19_BITER_ELINKNO EDMA_0_TCD.TCD[19].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD19_BITER_ELINKYES EDMA_0_TCD.TCD[19].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_CH20_CSR  EDMA_0_TCD.TCD[20].CH_CSR.R   /* Channel Control and Status */
#define EDMA_0_TCD_CH20_ES   EDMA_0_TCD.TCD[20].CH_ES.R    /* Channel Error Status */
#define EDMA_0_TCD_CH20_INT  EDMA_0_TCD.TCD[20].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_0_TCD_CH20_SBR  EDMA_0_TCD.TCD[20].CH_SBR.R   /* Channel System Bus */
#define EDMA_0_TCD_CH20_PRI  EDMA_0_TCD.TCD[20].CH_PRI.R   /* Channel Priority */
#define EDMA_0_TCD_TCD20_SADDR EDMA_0_TCD.TCD[20].SADDR.R  /* TCD Source Address */
#define EDMA_0_TCD_TCD20_SOFF EDMA_0_TCD.TCD[20].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD20_ATTR EDMA_0_TCD.TCD[20].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD20_NBYTES_MLOFFNO EDMA_0_TCD.TCD[20].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD20_NBYTES_MLOFFYES EDMA_0_TCD.TCD[20].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD20_SLAST_SDA EDMA_0_TCD.TCD[20].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD20_DADDR EDMA_0_TCD.TCD[20].DADDR.R  /* TCD Destination Address */
#define EDMA_0_TCD_TCD20_DOFF EDMA_0_TCD.TCD[20].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD20_CITER_ELINKNO EDMA_0_TCD.TCD[20].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD20_CITER_ELINKYES EDMA_0_TCD.TCD[20].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD20_DLAST_SGA EDMA_0_TCD.TCD[20].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD20_CSR EDMA_0_TCD.TCD[20].CSR.R      /* TCD Control and Status */
#define EDMA_0_TCD_TCD20_BITER_ELINKNO EDMA_0_TCD.TCD[20].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD20_BITER_ELINKYES EDMA_0_TCD.TCD[20].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_CH21_CSR  EDMA_0_TCD.TCD[21].CH_CSR.R   /* Channel Control and Status */
#define EDMA_0_TCD_CH21_ES   EDMA_0_TCD.TCD[21].CH_ES.R    /* Channel Error Status */
#define EDMA_0_TCD_CH21_INT  EDMA_0_TCD.TCD[21].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_0_TCD_CH21_SBR  EDMA_0_TCD.TCD[21].CH_SBR.R   /* Channel System Bus */
#define EDMA_0_TCD_CH21_PRI  EDMA_0_TCD.TCD[21].CH_PRI.R   /* Channel Priority */
#define EDMA_0_TCD_TCD21_SADDR EDMA_0_TCD.TCD[21].SADDR.R  /* TCD Source Address */
#define EDMA_0_TCD_TCD21_SOFF EDMA_0_TCD.TCD[21].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD21_ATTR EDMA_0_TCD.TCD[21].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD21_NBYTES_MLOFFNO EDMA_0_TCD.TCD[21].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD21_NBYTES_MLOFFYES EDMA_0_TCD.TCD[21].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD21_SLAST_SDA EDMA_0_TCD.TCD[21].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD21_DADDR EDMA_0_TCD.TCD[21].DADDR.R  /* TCD Destination Address */
#define EDMA_0_TCD_TCD21_DOFF EDMA_0_TCD.TCD[21].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD21_CITER_ELINKNO EDMA_0_TCD.TCD[21].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD21_CITER_ELINKYES EDMA_0_TCD.TCD[21].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD21_DLAST_SGA EDMA_0_TCD.TCD[21].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD21_CSR EDMA_0_TCD.TCD[21].CSR.R      /* TCD Control and Status */
#define EDMA_0_TCD_TCD21_BITER_ELINKNO EDMA_0_TCD.TCD[21].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD21_BITER_ELINKYES EDMA_0_TCD.TCD[21].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_CH22_CSR  EDMA_0_TCD.TCD[22].CH_CSR.R   /* Channel Control and Status */
#define EDMA_0_TCD_CH22_ES   EDMA_0_TCD.TCD[22].CH_ES.R    /* Channel Error Status */
#define EDMA_0_TCD_CH22_INT  EDMA_0_TCD.TCD[22].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_0_TCD_CH22_SBR  EDMA_0_TCD.TCD[22].CH_SBR.R   /* Channel System Bus */
#define EDMA_0_TCD_CH22_PRI  EDMA_0_TCD.TCD[22].CH_PRI.R   /* Channel Priority */
#define EDMA_0_TCD_TCD22_SADDR EDMA_0_TCD.TCD[22].SADDR.R  /* TCD Source Address */
#define EDMA_0_TCD_TCD22_SOFF EDMA_0_TCD.TCD[22].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD22_ATTR EDMA_0_TCD.TCD[22].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD22_NBYTES_MLOFFNO EDMA_0_TCD.TCD[22].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD22_NBYTES_MLOFFYES EDMA_0_TCD.TCD[22].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD22_SLAST_SDA EDMA_0_TCD.TCD[22].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD22_DADDR EDMA_0_TCD.TCD[22].DADDR.R  /* TCD Destination Address */
#define EDMA_0_TCD_TCD22_DOFF EDMA_0_TCD.TCD[22].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD22_CITER_ELINKNO EDMA_0_TCD.TCD[22].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD22_CITER_ELINKYES EDMA_0_TCD.TCD[22].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD22_DLAST_SGA EDMA_0_TCD.TCD[22].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD22_CSR EDMA_0_TCD.TCD[22].CSR.R      /* TCD Control and Status */
#define EDMA_0_TCD_TCD22_BITER_ELINKNO EDMA_0_TCD.TCD[22].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD22_BITER_ELINKYES EDMA_0_TCD.TCD[22].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_CH23_CSR  EDMA_0_TCD.TCD[23].CH_CSR.R   /* Channel Control and Status */
#define EDMA_0_TCD_CH23_ES   EDMA_0_TCD.TCD[23].CH_ES.R    /* Channel Error Status */
#define EDMA_0_TCD_CH23_INT  EDMA_0_TCD.TCD[23].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_0_TCD_CH23_SBR  EDMA_0_TCD.TCD[23].CH_SBR.R   /* Channel System Bus */
#define EDMA_0_TCD_CH23_PRI  EDMA_0_TCD.TCD[23].CH_PRI.R   /* Channel Priority */
#define EDMA_0_TCD_TCD23_SADDR EDMA_0_TCD.TCD[23].SADDR.R  /* TCD Source Address */
#define EDMA_0_TCD_TCD23_SOFF EDMA_0_TCD.TCD[23].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD23_ATTR EDMA_0_TCD.TCD[23].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD23_NBYTES_MLOFFNO EDMA_0_TCD.TCD[23].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD23_NBYTES_MLOFFYES EDMA_0_TCD.TCD[23].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD23_SLAST_SDA EDMA_0_TCD.TCD[23].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD23_DADDR EDMA_0_TCD.TCD[23].DADDR.R  /* TCD Destination Address */
#define EDMA_0_TCD_TCD23_DOFF EDMA_0_TCD.TCD[23].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD23_CITER_ELINKNO EDMA_0_TCD.TCD[23].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD23_CITER_ELINKYES EDMA_0_TCD.TCD[23].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD23_DLAST_SGA EDMA_0_TCD.TCD[23].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD23_CSR EDMA_0_TCD.TCD[23].CSR.R      /* TCD Control and Status */
#define EDMA_0_TCD_TCD23_BITER_ELINKNO EDMA_0_TCD.TCD[23].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD23_BITER_ELINKYES EDMA_0_TCD.TCD[23].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_CH24_CSR  EDMA_0_TCD.TCD[24].CH_CSR.R   /* Channel Control and Status */
#define EDMA_0_TCD_CH24_ES   EDMA_0_TCD.TCD[24].CH_ES.R    /* Channel Error Status */
#define EDMA_0_TCD_CH24_INT  EDMA_0_TCD.TCD[24].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_0_TCD_CH24_SBR  EDMA_0_TCD.TCD[24].CH_SBR.R   /* Channel System Bus */
#define EDMA_0_TCD_CH24_PRI  EDMA_0_TCD.TCD[24].CH_PRI.R   /* Channel Priority */
#define EDMA_0_TCD_TCD24_SADDR EDMA_0_TCD.TCD[24].SADDR.R  /* TCD Source Address */
#define EDMA_0_TCD_TCD24_SOFF EDMA_0_TCD.TCD[24].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD24_ATTR EDMA_0_TCD.TCD[24].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD24_NBYTES_MLOFFNO EDMA_0_TCD.TCD[24].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD24_NBYTES_MLOFFYES EDMA_0_TCD.TCD[24].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD24_SLAST_SDA EDMA_0_TCD.TCD[24].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD24_DADDR EDMA_0_TCD.TCD[24].DADDR.R  /* TCD Destination Address */
#define EDMA_0_TCD_TCD24_DOFF EDMA_0_TCD.TCD[24].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD24_CITER_ELINKNO EDMA_0_TCD.TCD[24].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD24_CITER_ELINKYES EDMA_0_TCD.TCD[24].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD24_DLAST_SGA EDMA_0_TCD.TCD[24].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD24_CSR EDMA_0_TCD.TCD[24].CSR.R      /* TCD Control and Status */
#define EDMA_0_TCD_TCD24_BITER_ELINKNO EDMA_0_TCD.TCD[24].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD24_BITER_ELINKYES EDMA_0_TCD.TCD[24].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_CH25_CSR  EDMA_0_TCD.TCD[25].CH_CSR.R   /* Channel Control and Status */
#define EDMA_0_TCD_CH25_ES   EDMA_0_TCD.TCD[25].CH_ES.R    /* Channel Error Status */
#define EDMA_0_TCD_CH25_INT  EDMA_0_TCD.TCD[25].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_0_TCD_CH25_SBR  EDMA_0_TCD.TCD[25].CH_SBR.R   /* Channel System Bus */
#define EDMA_0_TCD_CH25_PRI  EDMA_0_TCD.TCD[25].CH_PRI.R   /* Channel Priority */
#define EDMA_0_TCD_TCD25_SADDR EDMA_0_TCD.TCD[25].SADDR.R  /* TCD Source Address */
#define EDMA_0_TCD_TCD25_SOFF EDMA_0_TCD.TCD[25].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD25_ATTR EDMA_0_TCD.TCD[25].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD25_NBYTES_MLOFFNO EDMA_0_TCD.TCD[25].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD25_NBYTES_MLOFFYES EDMA_0_TCD.TCD[25].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD25_SLAST_SDA EDMA_0_TCD.TCD[25].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD25_DADDR EDMA_0_TCD.TCD[25].DADDR.R  /* TCD Destination Address */
#define EDMA_0_TCD_TCD25_DOFF EDMA_0_TCD.TCD[25].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD25_CITER_ELINKNO EDMA_0_TCD.TCD[25].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD25_CITER_ELINKYES EDMA_0_TCD.TCD[25].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD25_DLAST_SGA EDMA_0_TCD.TCD[25].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD25_CSR EDMA_0_TCD.TCD[25].CSR.R      /* TCD Control and Status */
#define EDMA_0_TCD_TCD25_BITER_ELINKNO EDMA_0_TCD.TCD[25].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD25_BITER_ELINKYES EDMA_0_TCD.TCD[25].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_CH26_CSR  EDMA_0_TCD.TCD[26].CH_CSR.R   /* Channel Control and Status */
#define EDMA_0_TCD_CH26_ES   EDMA_0_TCD.TCD[26].CH_ES.R    /* Channel Error Status */
#define EDMA_0_TCD_CH26_INT  EDMA_0_TCD.TCD[26].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_0_TCD_CH26_SBR  EDMA_0_TCD.TCD[26].CH_SBR.R   /* Channel System Bus */
#define EDMA_0_TCD_CH26_PRI  EDMA_0_TCD.TCD[26].CH_PRI.R   /* Channel Priority */
#define EDMA_0_TCD_TCD26_SADDR EDMA_0_TCD.TCD[26].SADDR.R  /* TCD Source Address */
#define EDMA_0_TCD_TCD26_SOFF EDMA_0_TCD.TCD[26].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD26_ATTR EDMA_0_TCD.TCD[26].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD26_NBYTES_MLOFFNO EDMA_0_TCD.TCD[26].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD26_NBYTES_MLOFFYES EDMA_0_TCD.TCD[26].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD26_SLAST_SDA EDMA_0_TCD.TCD[26].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD26_DADDR EDMA_0_TCD.TCD[26].DADDR.R  /* TCD Destination Address */
#define EDMA_0_TCD_TCD26_DOFF EDMA_0_TCD.TCD[26].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD26_CITER_ELINKNO EDMA_0_TCD.TCD[26].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD26_CITER_ELINKYES EDMA_0_TCD.TCD[26].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD26_DLAST_SGA EDMA_0_TCD.TCD[26].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD26_CSR EDMA_0_TCD.TCD[26].CSR.R      /* TCD Control and Status */
#define EDMA_0_TCD_TCD26_BITER_ELINKNO EDMA_0_TCD.TCD[26].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD26_BITER_ELINKYES EDMA_0_TCD.TCD[26].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_CH27_CSR  EDMA_0_TCD.TCD[27].CH_CSR.R   /* Channel Control and Status */
#define EDMA_0_TCD_CH27_ES   EDMA_0_TCD.TCD[27].CH_ES.R    /* Channel Error Status */
#define EDMA_0_TCD_CH27_INT  EDMA_0_TCD.TCD[27].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_0_TCD_CH27_SBR  EDMA_0_TCD.TCD[27].CH_SBR.R   /* Channel System Bus */
#define EDMA_0_TCD_CH27_PRI  EDMA_0_TCD.TCD[27].CH_PRI.R   /* Channel Priority */
#define EDMA_0_TCD_TCD27_SADDR EDMA_0_TCD.TCD[27].SADDR.R  /* TCD Source Address */
#define EDMA_0_TCD_TCD27_SOFF EDMA_0_TCD.TCD[27].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD27_ATTR EDMA_0_TCD.TCD[27].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD27_NBYTES_MLOFFNO EDMA_0_TCD.TCD[27].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD27_NBYTES_MLOFFYES EDMA_0_TCD.TCD[27].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD27_SLAST_SDA EDMA_0_TCD.TCD[27].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD27_DADDR EDMA_0_TCD.TCD[27].DADDR.R  /* TCD Destination Address */
#define EDMA_0_TCD_TCD27_DOFF EDMA_0_TCD.TCD[27].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD27_CITER_ELINKNO EDMA_0_TCD.TCD[27].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD27_CITER_ELINKYES EDMA_0_TCD.TCD[27].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD27_DLAST_SGA EDMA_0_TCD.TCD[27].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD27_CSR EDMA_0_TCD.TCD[27].CSR.R      /* TCD Control and Status */
#define EDMA_0_TCD_TCD27_BITER_ELINKNO EDMA_0_TCD.TCD[27].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD27_BITER_ELINKYES EDMA_0_TCD.TCD[27].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_CH28_CSR  EDMA_0_TCD.TCD[28].CH_CSR.R   /* Channel Control and Status */
#define EDMA_0_TCD_CH28_ES   EDMA_0_TCD.TCD[28].CH_ES.R    /* Channel Error Status */
#define EDMA_0_TCD_CH28_INT  EDMA_0_TCD.TCD[28].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_0_TCD_CH28_SBR  EDMA_0_TCD.TCD[28].CH_SBR.R   /* Channel System Bus */
#define EDMA_0_TCD_CH28_PRI  EDMA_0_TCD.TCD[28].CH_PRI.R   /* Channel Priority */
#define EDMA_0_TCD_TCD28_SADDR EDMA_0_TCD.TCD[28].SADDR.R  /* TCD Source Address */
#define EDMA_0_TCD_TCD28_SOFF EDMA_0_TCD.TCD[28].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD28_ATTR EDMA_0_TCD.TCD[28].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD28_NBYTES_MLOFFNO EDMA_0_TCD.TCD[28].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD28_NBYTES_MLOFFYES EDMA_0_TCD.TCD[28].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD28_SLAST_SDA EDMA_0_TCD.TCD[28].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD28_DADDR EDMA_0_TCD.TCD[28].DADDR.R  /* TCD Destination Address */
#define EDMA_0_TCD_TCD28_DOFF EDMA_0_TCD.TCD[28].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD28_CITER_ELINKNO EDMA_0_TCD.TCD[28].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD28_CITER_ELINKYES EDMA_0_TCD.TCD[28].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD28_DLAST_SGA EDMA_0_TCD.TCD[28].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD28_CSR EDMA_0_TCD.TCD[28].CSR.R      /* TCD Control and Status */
#define EDMA_0_TCD_TCD28_BITER_ELINKNO EDMA_0_TCD.TCD[28].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD28_BITER_ELINKYES EDMA_0_TCD.TCD[28].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_CH29_CSR  EDMA_0_TCD.TCD[29].CH_CSR.R   /* Channel Control and Status */
#define EDMA_0_TCD_CH29_ES   EDMA_0_TCD.TCD[29].CH_ES.R    /* Channel Error Status */
#define EDMA_0_TCD_CH29_INT  EDMA_0_TCD.TCD[29].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_0_TCD_CH29_SBR  EDMA_0_TCD.TCD[29].CH_SBR.R   /* Channel System Bus */
#define EDMA_0_TCD_CH29_PRI  EDMA_0_TCD.TCD[29].CH_PRI.R   /* Channel Priority */
#define EDMA_0_TCD_TCD29_SADDR EDMA_0_TCD.TCD[29].SADDR.R  /* TCD Source Address */
#define EDMA_0_TCD_TCD29_SOFF EDMA_0_TCD.TCD[29].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD29_ATTR EDMA_0_TCD.TCD[29].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD29_NBYTES_MLOFFNO EDMA_0_TCD.TCD[29].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD29_NBYTES_MLOFFYES EDMA_0_TCD.TCD[29].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD29_SLAST_SDA EDMA_0_TCD.TCD[29].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD29_DADDR EDMA_0_TCD.TCD[29].DADDR.R  /* TCD Destination Address */
#define EDMA_0_TCD_TCD29_DOFF EDMA_0_TCD.TCD[29].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD29_CITER_ELINKNO EDMA_0_TCD.TCD[29].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD29_CITER_ELINKYES EDMA_0_TCD.TCD[29].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD29_DLAST_SGA EDMA_0_TCD.TCD[29].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD29_CSR EDMA_0_TCD.TCD[29].CSR.R      /* TCD Control and Status */
#define EDMA_0_TCD_TCD29_BITER_ELINKNO EDMA_0_TCD.TCD[29].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD29_BITER_ELINKYES EDMA_0_TCD.TCD[29].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_CH30_CSR  EDMA_0_TCD.TCD[30].CH_CSR.R   /* Channel Control and Status */
#define EDMA_0_TCD_CH30_ES   EDMA_0_TCD.TCD[30].CH_ES.R    /* Channel Error Status */
#define EDMA_0_TCD_CH30_INT  EDMA_0_TCD.TCD[30].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_0_TCD_CH30_SBR  EDMA_0_TCD.TCD[30].CH_SBR.R   /* Channel System Bus */
#define EDMA_0_TCD_CH30_PRI  EDMA_0_TCD.TCD[30].CH_PRI.R   /* Channel Priority */
#define EDMA_0_TCD_TCD30_SADDR EDMA_0_TCD.TCD[30].SADDR.R  /* TCD Source Address */
#define EDMA_0_TCD_TCD30_SOFF EDMA_0_TCD.TCD[30].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD30_ATTR EDMA_0_TCD.TCD[30].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD30_NBYTES_MLOFFNO EDMA_0_TCD.TCD[30].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD30_NBYTES_MLOFFYES EDMA_0_TCD.TCD[30].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD30_SLAST_SDA EDMA_0_TCD.TCD[30].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD30_DADDR EDMA_0_TCD.TCD[30].DADDR.R  /* TCD Destination Address */
#define EDMA_0_TCD_TCD30_DOFF EDMA_0_TCD.TCD[30].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD30_CITER_ELINKNO EDMA_0_TCD.TCD[30].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD30_CITER_ELINKYES EDMA_0_TCD.TCD[30].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD30_DLAST_SGA EDMA_0_TCD.TCD[30].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD30_CSR EDMA_0_TCD.TCD[30].CSR.R      /* TCD Control and Status */
#define EDMA_0_TCD_TCD30_BITER_ELINKNO EDMA_0_TCD.TCD[30].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD30_BITER_ELINKYES EDMA_0_TCD.TCD[30].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_CH31_CSR  EDMA_0_TCD.TCD[31].CH_CSR.R   /* Channel Control and Status */
#define EDMA_0_TCD_CH31_ES   EDMA_0_TCD.TCD[31].CH_ES.R    /* Channel Error Status */
#define EDMA_0_TCD_CH31_INT  EDMA_0_TCD.TCD[31].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_0_TCD_CH31_SBR  EDMA_0_TCD.TCD[31].CH_SBR.R   /* Channel System Bus */
#define EDMA_0_TCD_CH31_PRI  EDMA_0_TCD.TCD[31].CH_PRI.R   /* Channel Priority */
#define EDMA_0_TCD_TCD31_SADDR EDMA_0_TCD.TCD[31].SADDR.R  /* TCD Source Address */
#define EDMA_0_TCD_TCD31_SOFF EDMA_0_TCD.TCD[31].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD31_ATTR EDMA_0_TCD.TCD[31].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD31_NBYTES_MLOFFNO EDMA_0_TCD.TCD[31].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD31_NBYTES_MLOFFYES EDMA_0_TCD.TCD[31].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD31_SLAST_SDA EDMA_0_TCD.TCD[31].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD31_DADDR EDMA_0_TCD.TCD[31].DADDR.R  /* TCD Destination Address */
#define EDMA_0_TCD_TCD31_DOFF EDMA_0_TCD.TCD[31].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD31_CITER_ELINKNO EDMA_0_TCD.TCD[31].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD31_CITER_ELINKYES EDMA_0_TCD.TCD[31].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD31_DLAST_SGA EDMA_0_TCD.TCD[31].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD31_CSR EDMA_0_TCD.TCD[31].CSR.R      /* TCD Control and Status */
#define EDMA_0_TCD_TCD31_BITER_ELINKNO EDMA_0_TCD.TCD[31].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD31_BITER_ELINKYES EDMA_0_TCD.TCD[31].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */

/* eDMA_1_MP */
#define EDMA_1_MP_CSR        EDMA_1_MP.CSR.R               /* Management Page Control */
#define EDMA_1_MP_ES         EDMA_1_MP.ES.R                /* Management Page Error Status */
#define EDMA_1_MP_INT        EDMA_1_MP.INT.R               /* Management Page Interrupt Request Status */
#define EDMA_1_MP_HRS        EDMA_1_MP.HRS.R               /* Management Page Hardware Request Status */
#define EDMA_1_MP_CH0_GRPRI  EDMA_1_MP.CH_GRPRI[0].R       /* Channel Arbitration Group */
#define EDMA_1_MP_CH1_GRPRI  EDMA_1_MP.CH_GRPRI[1].R       /* Channel Arbitration Group */
#define EDMA_1_MP_CH2_GRPRI  EDMA_1_MP.CH_GRPRI[2].R       /* Channel Arbitration Group */
#define EDMA_1_MP_CH3_GRPRI  EDMA_1_MP.CH_GRPRI[3].R       /* Channel Arbitration Group */
#define EDMA_1_MP_CH4_GRPRI  EDMA_1_MP.CH_GRPRI[4].R       /* Channel Arbitration Group */
#define EDMA_1_MP_CH5_GRPRI  EDMA_1_MP.CH_GRPRI[5].R       /* Channel Arbitration Group */
#define EDMA_1_MP_CH6_GRPRI  EDMA_1_MP.CH_GRPRI[6].R       /* Channel Arbitration Group */
#define EDMA_1_MP_CH7_GRPRI  EDMA_1_MP.CH_GRPRI[7].R       /* Channel Arbitration Group */
#define EDMA_1_MP_CH8_GRPRI  EDMA_1_MP.CH_GRPRI[8].R       /* Channel Arbitration Group */
#define EDMA_1_MP_CH9_GRPRI  EDMA_1_MP.CH_GRPRI[9].R       /* Channel Arbitration Group */
#define EDMA_1_MP_CH10_GRPRI EDMA_1_MP.CH_GRPRI[10].R      /* Channel Arbitration Group */
#define EDMA_1_MP_CH11_GRPRI EDMA_1_MP.CH_GRPRI[11].R      /* Channel Arbitration Group */
#define EDMA_1_MP_CH12_GRPRI EDMA_1_MP.CH_GRPRI[12].R      /* Channel Arbitration Group */
#define EDMA_1_MP_CH13_GRPRI EDMA_1_MP.CH_GRPRI[13].R      /* Channel Arbitration Group */
#define EDMA_1_MP_CH14_GRPRI EDMA_1_MP.CH_GRPRI[14].R      /* Channel Arbitration Group */
#define EDMA_1_MP_CH15_GRPRI EDMA_1_MP.CH_GRPRI[15].R      /* Channel Arbitration Group */
#define EDMA_1_MP_CH16_GRPRI EDMA_1_MP.CH_GRPRI[16].R      /* Channel Arbitration Group */
#define EDMA_1_MP_CH17_GRPRI EDMA_1_MP.CH_GRPRI[17].R      /* Channel Arbitration Group */
#define EDMA_1_MP_CH18_GRPRI EDMA_1_MP.CH_GRPRI[18].R      /* Channel Arbitration Group */
#define EDMA_1_MP_CH19_GRPRI EDMA_1_MP.CH_GRPRI[19].R      /* Channel Arbitration Group */
#define EDMA_1_MP_CH20_GRPRI EDMA_1_MP.CH_GRPRI[20].R      /* Channel Arbitration Group */
#define EDMA_1_MP_CH21_GRPRI EDMA_1_MP.CH_GRPRI[21].R      /* Channel Arbitration Group */
#define EDMA_1_MP_CH22_GRPRI EDMA_1_MP.CH_GRPRI[22].R      /* Channel Arbitration Group */
#define EDMA_1_MP_CH23_GRPRI EDMA_1_MP.CH_GRPRI[23].R      /* Channel Arbitration Group */
#define EDMA_1_MP_CH24_GRPRI EDMA_1_MP.CH_GRPRI[24].R      /* Channel Arbitration Group */
#define EDMA_1_MP_CH25_GRPRI EDMA_1_MP.CH_GRPRI[25].R      /* Channel Arbitration Group */
#define EDMA_1_MP_CH26_GRPRI EDMA_1_MP.CH_GRPRI[26].R      /* Channel Arbitration Group */
#define EDMA_1_MP_CH27_GRPRI EDMA_1_MP.CH_GRPRI[27].R      /* Channel Arbitration Group */
#define EDMA_1_MP_CH28_GRPRI EDMA_1_MP.CH_GRPRI[28].R      /* Channel Arbitration Group */
#define EDMA_1_MP_CH29_GRPRI EDMA_1_MP.CH_GRPRI[29].R      /* Channel Arbitration Group */
#define EDMA_1_MP_CH30_GRPRI EDMA_1_MP.CH_GRPRI[30].R      /* Channel Arbitration Group */
#define EDMA_1_MP_CH31_GRPRI EDMA_1_MP.CH_GRPRI[31].R      /* Channel Arbitration Group */

/* eDMA_1_TCD */
#define EDMA_1_TCD_CH0_CSR   EDMA_1_TCD.TCD[0].CH_CSR.R    /* Channel Control and Status */
#define EDMA_1_TCD_CH0_ES    EDMA_1_TCD.TCD[0].CH_ES.R     /* Channel Error Status */
#define EDMA_1_TCD_CH0_INT   EDMA_1_TCD.TCD[0].CH_INT.R    /* Channel Interrupt Status */
#define EDMA_1_TCD_CH0_SBR   EDMA_1_TCD.TCD[0].CH_SBR.R    /* Channel System Bus */
#define EDMA_1_TCD_CH0_PRI   EDMA_1_TCD.TCD[0].CH_PRI.R    /* Channel Priority */
#define EDMA_1_TCD_TCD0_SADDR EDMA_1_TCD.TCD[0].SADDR.R    /* TCD Source Address */
#define EDMA_1_TCD_TCD0_SOFF EDMA_1_TCD.TCD[0].SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_1_TCD_TCD0_ATTR EDMA_1_TCD.TCD[0].ATTR.R      /* TCD Transfer Attributes */
#define EDMA_1_TCD_TCD0_NBYTES_MLOFFNO EDMA_1_TCD.TCD[0].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_1_TCD_TCD0_NBYTES_MLOFFYES EDMA_1_TCD.TCD[0].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_1_TCD_TCD0_SLAST_SDA EDMA_1_TCD.TCD[0].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_1_TCD_TCD0_DADDR EDMA_1_TCD.TCD[0].DADDR.R    /* TCD Destination Address */
#define EDMA_1_TCD_TCD0_DOFF EDMA_1_TCD.TCD[0].DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_1_TCD_TCD0_CITER_ELINKNO EDMA_1_TCD.TCD[0].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD0_CITER_ELINKYES EDMA_1_TCD.TCD[0].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_TCD0_DLAST_SGA EDMA_1_TCD.TCD[0].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_1_TCD_TCD0_CSR  EDMA_1_TCD.TCD[0].CSR.R       /* TCD Control and Status */
#define EDMA_1_TCD_TCD0_BITER_ELINKNO EDMA_1_TCD.TCD[0].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD0_BITER_ELINKYES EDMA_1_TCD.TCD[0].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_CH1_CSR   EDMA_1_TCD.TCD[1].CH_CSR.R    /* Channel Control and Status */
#define EDMA_1_TCD_CH1_ES    EDMA_1_TCD.TCD[1].CH_ES.R     /* Channel Error Status */
#define EDMA_1_TCD_CH1_INT   EDMA_1_TCD.TCD[1].CH_INT.R    /* Channel Interrupt Status */
#define EDMA_1_TCD_CH1_SBR   EDMA_1_TCD.TCD[1].CH_SBR.R    /* Channel System Bus */
#define EDMA_1_TCD_CH1_PRI   EDMA_1_TCD.TCD[1].CH_PRI.R    /* Channel Priority */
#define EDMA_1_TCD_TCD1_SADDR EDMA_1_TCD.TCD[1].SADDR.R    /* TCD Source Address */
#define EDMA_1_TCD_TCD1_SOFF EDMA_1_TCD.TCD[1].SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_1_TCD_TCD1_ATTR EDMA_1_TCD.TCD[1].ATTR.R      /* TCD Transfer Attributes */
#define EDMA_1_TCD_TCD1_NBYTES_MLOFFNO EDMA_1_TCD.TCD[1].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_1_TCD_TCD1_NBYTES_MLOFFYES EDMA_1_TCD.TCD[1].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_1_TCD_TCD1_SLAST_SDA EDMA_1_TCD.TCD[1].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_1_TCD_TCD1_DADDR EDMA_1_TCD.TCD[1].DADDR.R    /* TCD Destination Address */
#define EDMA_1_TCD_TCD1_DOFF EDMA_1_TCD.TCD[1].DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_1_TCD_TCD1_CITER_ELINKNO EDMA_1_TCD.TCD[1].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD1_CITER_ELINKYES EDMA_1_TCD.TCD[1].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_TCD1_DLAST_SGA EDMA_1_TCD.TCD[1].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_1_TCD_TCD1_CSR  EDMA_1_TCD.TCD[1].CSR.R       /* TCD Control and Status */
#define EDMA_1_TCD_TCD1_BITER_ELINKNO EDMA_1_TCD.TCD[1].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD1_BITER_ELINKYES EDMA_1_TCD.TCD[1].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_CH2_CSR   EDMA_1_TCD.TCD[2].CH_CSR.R    /* Channel Control and Status */
#define EDMA_1_TCD_CH2_ES    EDMA_1_TCD.TCD[2].CH_ES.R     /* Channel Error Status */
#define EDMA_1_TCD_CH2_INT   EDMA_1_TCD.TCD[2].CH_INT.R    /* Channel Interrupt Status */
#define EDMA_1_TCD_CH2_SBR   EDMA_1_TCD.TCD[2].CH_SBR.R    /* Channel System Bus */
#define EDMA_1_TCD_CH2_PRI   EDMA_1_TCD.TCD[2].CH_PRI.R    /* Channel Priority */
#define EDMA_1_TCD_TCD2_SADDR EDMA_1_TCD.TCD[2].SADDR.R    /* TCD Source Address */
#define EDMA_1_TCD_TCD2_SOFF EDMA_1_TCD.TCD[2].SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_1_TCD_TCD2_ATTR EDMA_1_TCD.TCD[2].ATTR.R      /* TCD Transfer Attributes */
#define EDMA_1_TCD_TCD2_NBYTES_MLOFFNO EDMA_1_TCD.TCD[2].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_1_TCD_TCD2_NBYTES_MLOFFYES EDMA_1_TCD.TCD[2].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_1_TCD_TCD2_SLAST_SDA EDMA_1_TCD.TCD[2].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_1_TCD_TCD2_DADDR EDMA_1_TCD.TCD[2].DADDR.R    /* TCD Destination Address */
#define EDMA_1_TCD_TCD2_DOFF EDMA_1_TCD.TCD[2].DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_1_TCD_TCD2_CITER_ELINKNO EDMA_1_TCD.TCD[2].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD2_CITER_ELINKYES EDMA_1_TCD.TCD[2].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_TCD2_DLAST_SGA EDMA_1_TCD.TCD[2].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_1_TCD_TCD2_CSR  EDMA_1_TCD.TCD[2].CSR.R       /* TCD Control and Status */
#define EDMA_1_TCD_TCD2_BITER_ELINKNO EDMA_1_TCD.TCD[2].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD2_BITER_ELINKYES EDMA_1_TCD.TCD[2].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_CH3_CSR   EDMA_1_TCD.TCD[3].CH_CSR.R    /* Channel Control and Status */
#define EDMA_1_TCD_CH3_ES    EDMA_1_TCD.TCD[3].CH_ES.R     /* Channel Error Status */
#define EDMA_1_TCD_CH3_INT   EDMA_1_TCD.TCD[3].CH_INT.R    /* Channel Interrupt Status */
#define EDMA_1_TCD_CH3_SBR   EDMA_1_TCD.TCD[3].CH_SBR.R    /* Channel System Bus */
#define EDMA_1_TCD_CH3_PRI   EDMA_1_TCD.TCD[3].CH_PRI.R    /* Channel Priority */
#define EDMA_1_TCD_TCD3_SADDR EDMA_1_TCD.TCD[3].SADDR.R    /* TCD Source Address */
#define EDMA_1_TCD_TCD3_SOFF EDMA_1_TCD.TCD[3].SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_1_TCD_TCD3_ATTR EDMA_1_TCD.TCD[3].ATTR.R      /* TCD Transfer Attributes */
#define EDMA_1_TCD_TCD3_NBYTES_MLOFFNO EDMA_1_TCD.TCD[3].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_1_TCD_TCD3_NBYTES_MLOFFYES EDMA_1_TCD.TCD[3].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_1_TCD_TCD3_SLAST_SDA EDMA_1_TCD.TCD[3].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_1_TCD_TCD3_DADDR EDMA_1_TCD.TCD[3].DADDR.R    /* TCD Destination Address */
#define EDMA_1_TCD_TCD3_DOFF EDMA_1_TCD.TCD[3].DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_1_TCD_TCD3_CITER_ELINKNO EDMA_1_TCD.TCD[3].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD3_CITER_ELINKYES EDMA_1_TCD.TCD[3].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_TCD3_DLAST_SGA EDMA_1_TCD.TCD[3].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_1_TCD_TCD3_CSR  EDMA_1_TCD.TCD[3].CSR.R       /* TCD Control and Status */
#define EDMA_1_TCD_TCD3_BITER_ELINKNO EDMA_1_TCD.TCD[3].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD3_BITER_ELINKYES EDMA_1_TCD.TCD[3].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_CH4_CSR   EDMA_1_TCD.TCD[4].CH_CSR.R    /* Channel Control and Status */
#define EDMA_1_TCD_CH4_ES    EDMA_1_TCD.TCD[4].CH_ES.R     /* Channel Error Status */
#define EDMA_1_TCD_CH4_INT   EDMA_1_TCD.TCD[4].CH_INT.R    /* Channel Interrupt Status */
#define EDMA_1_TCD_CH4_SBR   EDMA_1_TCD.TCD[4].CH_SBR.R    /* Channel System Bus */
#define EDMA_1_TCD_CH4_PRI   EDMA_1_TCD.TCD[4].CH_PRI.R    /* Channel Priority */
#define EDMA_1_TCD_TCD4_SADDR EDMA_1_TCD.TCD[4].SADDR.R    /* TCD Source Address */
#define EDMA_1_TCD_TCD4_SOFF EDMA_1_TCD.TCD[4].SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_1_TCD_TCD4_ATTR EDMA_1_TCD.TCD[4].ATTR.R      /* TCD Transfer Attributes */
#define EDMA_1_TCD_TCD4_NBYTES_MLOFFNO EDMA_1_TCD.TCD[4].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_1_TCD_TCD4_NBYTES_MLOFFYES EDMA_1_TCD.TCD[4].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_1_TCD_TCD4_SLAST_SDA EDMA_1_TCD.TCD[4].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_1_TCD_TCD4_DADDR EDMA_1_TCD.TCD[4].DADDR.R    /* TCD Destination Address */
#define EDMA_1_TCD_TCD4_DOFF EDMA_1_TCD.TCD[4].DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_1_TCD_TCD4_CITER_ELINKNO EDMA_1_TCD.TCD[4].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD4_CITER_ELINKYES EDMA_1_TCD.TCD[4].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_TCD4_DLAST_SGA EDMA_1_TCD.TCD[4].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_1_TCD_TCD4_CSR  EDMA_1_TCD.TCD[4].CSR.R       /* TCD Control and Status */
#define EDMA_1_TCD_TCD4_BITER_ELINKNO EDMA_1_TCD.TCD[4].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD4_BITER_ELINKYES EDMA_1_TCD.TCD[4].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_CH5_CSR   EDMA_1_TCD.TCD[5].CH_CSR.R    /* Channel Control and Status */
#define EDMA_1_TCD_CH5_ES    EDMA_1_TCD.TCD[5].CH_ES.R     /* Channel Error Status */
#define EDMA_1_TCD_CH5_INT   EDMA_1_TCD.TCD[5].CH_INT.R    /* Channel Interrupt Status */
#define EDMA_1_TCD_CH5_SBR   EDMA_1_TCD.TCD[5].CH_SBR.R    /* Channel System Bus */
#define EDMA_1_TCD_CH5_PRI   EDMA_1_TCD.TCD[5].CH_PRI.R    /* Channel Priority */
#define EDMA_1_TCD_TCD5_SADDR EDMA_1_TCD.TCD[5].SADDR.R    /* TCD Source Address */
#define EDMA_1_TCD_TCD5_SOFF EDMA_1_TCD.TCD[5].SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_1_TCD_TCD5_ATTR EDMA_1_TCD.TCD[5].ATTR.R      /* TCD Transfer Attributes */
#define EDMA_1_TCD_TCD5_NBYTES_MLOFFNO EDMA_1_TCD.TCD[5].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_1_TCD_TCD5_NBYTES_MLOFFYES EDMA_1_TCD.TCD[5].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_1_TCD_TCD5_SLAST_SDA EDMA_1_TCD.TCD[5].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_1_TCD_TCD5_DADDR EDMA_1_TCD.TCD[5].DADDR.R    /* TCD Destination Address */
#define EDMA_1_TCD_TCD5_DOFF EDMA_1_TCD.TCD[5].DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_1_TCD_TCD5_CITER_ELINKNO EDMA_1_TCD.TCD[5].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD5_CITER_ELINKYES EDMA_1_TCD.TCD[5].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_TCD5_DLAST_SGA EDMA_1_TCD.TCD[5].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_1_TCD_TCD5_CSR  EDMA_1_TCD.TCD[5].CSR.R       /* TCD Control and Status */
#define EDMA_1_TCD_TCD5_BITER_ELINKNO EDMA_1_TCD.TCD[5].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD5_BITER_ELINKYES EDMA_1_TCD.TCD[5].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_CH6_CSR   EDMA_1_TCD.TCD[6].CH_CSR.R    /* Channel Control and Status */
#define EDMA_1_TCD_CH6_ES    EDMA_1_TCD.TCD[6].CH_ES.R     /* Channel Error Status */
#define EDMA_1_TCD_CH6_INT   EDMA_1_TCD.TCD[6].CH_INT.R    /* Channel Interrupt Status */
#define EDMA_1_TCD_CH6_SBR   EDMA_1_TCD.TCD[6].CH_SBR.R    /* Channel System Bus */
#define EDMA_1_TCD_CH6_PRI   EDMA_1_TCD.TCD[6].CH_PRI.R    /* Channel Priority */
#define EDMA_1_TCD_TCD6_SADDR EDMA_1_TCD.TCD[6].SADDR.R    /* TCD Source Address */
#define EDMA_1_TCD_TCD6_SOFF EDMA_1_TCD.TCD[6].SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_1_TCD_TCD6_ATTR EDMA_1_TCD.TCD[6].ATTR.R      /* TCD Transfer Attributes */
#define EDMA_1_TCD_TCD6_NBYTES_MLOFFNO EDMA_1_TCD.TCD[6].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_1_TCD_TCD6_NBYTES_MLOFFYES EDMA_1_TCD.TCD[6].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_1_TCD_TCD6_SLAST_SDA EDMA_1_TCD.TCD[6].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_1_TCD_TCD6_DADDR EDMA_1_TCD.TCD[6].DADDR.R    /* TCD Destination Address */
#define EDMA_1_TCD_TCD6_DOFF EDMA_1_TCD.TCD[6].DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_1_TCD_TCD6_CITER_ELINKNO EDMA_1_TCD.TCD[6].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD6_CITER_ELINKYES EDMA_1_TCD.TCD[6].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_TCD6_DLAST_SGA EDMA_1_TCD.TCD[6].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_1_TCD_TCD6_CSR  EDMA_1_TCD.TCD[6].CSR.R       /* TCD Control and Status */
#define EDMA_1_TCD_TCD6_BITER_ELINKNO EDMA_1_TCD.TCD[6].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD6_BITER_ELINKYES EDMA_1_TCD.TCD[6].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_CH7_CSR   EDMA_1_TCD.TCD[7].CH_CSR.R    /* Channel Control and Status */
#define EDMA_1_TCD_CH7_ES    EDMA_1_TCD.TCD[7].CH_ES.R     /* Channel Error Status */
#define EDMA_1_TCD_CH7_INT   EDMA_1_TCD.TCD[7].CH_INT.R    /* Channel Interrupt Status */
#define EDMA_1_TCD_CH7_SBR   EDMA_1_TCD.TCD[7].CH_SBR.R    /* Channel System Bus */
#define EDMA_1_TCD_CH7_PRI   EDMA_1_TCD.TCD[7].CH_PRI.R    /* Channel Priority */
#define EDMA_1_TCD_TCD7_SADDR EDMA_1_TCD.TCD[7].SADDR.R    /* TCD Source Address */
#define EDMA_1_TCD_TCD7_SOFF EDMA_1_TCD.TCD[7].SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_1_TCD_TCD7_ATTR EDMA_1_TCD.TCD[7].ATTR.R      /* TCD Transfer Attributes */
#define EDMA_1_TCD_TCD7_NBYTES_MLOFFNO EDMA_1_TCD.TCD[7].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_1_TCD_TCD7_NBYTES_MLOFFYES EDMA_1_TCD.TCD[7].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_1_TCD_TCD7_SLAST_SDA EDMA_1_TCD.TCD[7].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_1_TCD_TCD7_DADDR EDMA_1_TCD.TCD[7].DADDR.R    /* TCD Destination Address */
#define EDMA_1_TCD_TCD7_DOFF EDMA_1_TCD.TCD[7].DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_1_TCD_TCD7_CITER_ELINKNO EDMA_1_TCD.TCD[7].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD7_CITER_ELINKYES EDMA_1_TCD.TCD[7].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_TCD7_DLAST_SGA EDMA_1_TCD.TCD[7].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_1_TCD_TCD7_CSR  EDMA_1_TCD.TCD[7].CSR.R       /* TCD Control and Status */
#define EDMA_1_TCD_TCD7_BITER_ELINKNO EDMA_1_TCD.TCD[7].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD7_BITER_ELINKYES EDMA_1_TCD.TCD[7].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_CH8_CSR   EDMA_1_TCD.TCD[8].CH_CSR.R    /* Channel Control and Status */
#define EDMA_1_TCD_CH8_ES    EDMA_1_TCD.TCD[8].CH_ES.R     /* Channel Error Status */
#define EDMA_1_TCD_CH8_INT   EDMA_1_TCD.TCD[8].CH_INT.R    /* Channel Interrupt Status */
#define EDMA_1_TCD_CH8_SBR   EDMA_1_TCD.TCD[8].CH_SBR.R    /* Channel System Bus */
#define EDMA_1_TCD_CH8_PRI   EDMA_1_TCD.TCD[8].CH_PRI.R    /* Channel Priority */
#define EDMA_1_TCD_TCD8_SADDR EDMA_1_TCD.TCD[8].SADDR.R    /* TCD Source Address */
#define EDMA_1_TCD_TCD8_SOFF EDMA_1_TCD.TCD[8].SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_1_TCD_TCD8_ATTR EDMA_1_TCD.TCD[8].ATTR.R      /* TCD Transfer Attributes */
#define EDMA_1_TCD_TCD8_NBYTES_MLOFFNO EDMA_1_TCD.TCD[8].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_1_TCD_TCD8_NBYTES_MLOFFYES EDMA_1_TCD.TCD[8].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_1_TCD_TCD8_SLAST_SDA EDMA_1_TCD.TCD[8].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_1_TCD_TCD8_DADDR EDMA_1_TCD.TCD[8].DADDR.R    /* TCD Destination Address */
#define EDMA_1_TCD_TCD8_DOFF EDMA_1_TCD.TCD[8].DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_1_TCD_TCD8_CITER_ELINKNO EDMA_1_TCD.TCD[8].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD8_CITER_ELINKYES EDMA_1_TCD.TCD[8].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_TCD8_DLAST_SGA EDMA_1_TCD.TCD[8].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_1_TCD_TCD8_CSR  EDMA_1_TCD.TCD[8].CSR.R       /* TCD Control and Status */
#define EDMA_1_TCD_TCD8_BITER_ELINKNO EDMA_1_TCD.TCD[8].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD8_BITER_ELINKYES EDMA_1_TCD.TCD[8].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_CH9_CSR   EDMA_1_TCD.TCD[9].CH_CSR.R    /* Channel Control and Status */
#define EDMA_1_TCD_CH9_ES    EDMA_1_TCD.TCD[9].CH_ES.R     /* Channel Error Status */
#define EDMA_1_TCD_CH9_INT   EDMA_1_TCD.TCD[9].CH_INT.R    /* Channel Interrupt Status */
#define EDMA_1_TCD_CH9_SBR   EDMA_1_TCD.TCD[9].CH_SBR.R    /* Channel System Bus */
#define EDMA_1_TCD_CH9_PRI   EDMA_1_TCD.TCD[9].CH_PRI.R    /* Channel Priority */
#define EDMA_1_TCD_TCD9_SADDR EDMA_1_TCD.TCD[9].SADDR.R    /* TCD Source Address */
#define EDMA_1_TCD_TCD9_SOFF EDMA_1_TCD.TCD[9].SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_1_TCD_TCD9_ATTR EDMA_1_TCD.TCD[9].ATTR.R      /* TCD Transfer Attributes */
#define EDMA_1_TCD_TCD9_NBYTES_MLOFFNO EDMA_1_TCD.TCD[9].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_1_TCD_TCD9_NBYTES_MLOFFYES EDMA_1_TCD.TCD[9].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_1_TCD_TCD9_SLAST_SDA EDMA_1_TCD.TCD[9].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_1_TCD_TCD9_DADDR EDMA_1_TCD.TCD[9].DADDR.R    /* TCD Destination Address */
#define EDMA_1_TCD_TCD9_DOFF EDMA_1_TCD.TCD[9].DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_1_TCD_TCD9_CITER_ELINKNO EDMA_1_TCD.TCD[9].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD9_CITER_ELINKYES EDMA_1_TCD.TCD[9].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_TCD9_DLAST_SGA EDMA_1_TCD.TCD[9].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_1_TCD_TCD9_CSR  EDMA_1_TCD.TCD[9].CSR.R       /* TCD Control and Status */
#define EDMA_1_TCD_TCD9_BITER_ELINKNO EDMA_1_TCD.TCD[9].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD9_BITER_ELINKYES EDMA_1_TCD.TCD[9].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_CH10_CSR  EDMA_1_TCD.TCD[10].CH_CSR.R   /* Channel Control and Status */
#define EDMA_1_TCD_CH10_ES   EDMA_1_TCD.TCD[10].CH_ES.R    /* Channel Error Status */
#define EDMA_1_TCD_CH10_INT  EDMA_1_TCD.TCD[10].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_1_TCD_CH10_SBR  EDMA_1_TCD.TCD[10].CH_SBR.R   /* Channel System Bus */
#define EDMA_1_TCD_CH10_PRI  EDMA_1_TCD.TCD[10].CH_PRI.R   /* Channel Priority */
#define EDMA_1_TCD_TCD10_SADDR EDMA_1_TCD.TCD[10].SADDR.R  /* TCD Source Address */
#define EDMA_1_TCD_TCD10_SOFF EDMA_1_TCD.TCD[10].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_1_TCD_TCD10_ATTR EDMA_1_TCD.TCD[10].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_1_TCD_TCD10_NBYTES_MLOFFNO EDMA_1_TCD.TCD[10].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_1_TCD_TCD10_NBYTES_MLOFFYES EDMA_1_TCD.TCD[10].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_1_TCD_TCD10_SLAST_SDA EDMA_1_TCD.TCD[10].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_1_TCD_TCD10_DADDR EDMA_1_TCD.TCD[10].DADDR.R  /* TCD Destination Address */
#define EDMA_1_TCD_TCD10_DOFF EDMA_1_TCD.TCD[10].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_1_TCD_TCD10_CITER_ELINKNO EDMA_1_TCD.TCD[10].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD10_CITER_ELINKYES EDMA_1_TCD.TCD[10].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_TCD10_DLAST_SGA EDMA_1_TCD.TCD[10].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_1_TCD_TCD10_CSR EDMA_1_TCD.TCD[10].CSR.R      /* TCD Control and Status */
#define EDMA_1_TCD_TCD10_BITER_ELINKNO EDMA_1_TCD.TCD[10].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD10_BITER_ELINKYES EDMA_1_TCD.TCD[10].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_CH11_CSR  EDMA_1_TCD.TCD[11].CH_CSR.R   /* Channel Control and Status */
#define EDMA_1_TCD_CH11_ES   EDMA_1_TCD.TCD[11].CH_ES.R    /* Channel Error Status */
#define EDMA_1_TCD_CH11_INT  EDMA_1_TCD.TCD[11].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_1_TCD_CH11_SBR  EDMA_1_TCD.TCD[11].CH_SBR.R   /* Channel System Bus */
#define EDMA_1_TCD_CH11_PRI  EDMA_1_TCD.TCD[11].CH_PRI.R   /* Channel Priority */
#define EDMA_1_TCD_TCD11_SADDR EDMA_1_TCD.TCD[11].SADDR.R  /* TCD Source Address */
#define EDMA_1_TCD_TCD11_SOFF EDMA_1_TCD.TCD[11].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_1_TCD_TCD11_ATTR EDMA_1_TCD.TCD[11].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_1_TCD_TCD11_NBYTES_MLOFFNO EDMA_1_TCD.TCD[11].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_1_TCD_TCD11_NBYTES_MLOFFYES EDMA_1_TCD.TCD[11].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_1_TCD_TCD11_SLAST_SDA EDMA_1_TCD.TCD[11].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_1_TCD_TCD11_DADDR EDMA_1_TCD.TCD[11].DADDR.R  /* TCD Destination Address */
#define EDMA_1_TCD_TCD11_DOFF EDMA_1_TCD.TCD[11].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_1_TCD_TCD11_CITER_ELINKNO EDMA_1_TCD.TCD[11].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD11_CITER_ELINKYES EDMA_1_TCD.TCD[11].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_TCD11_DLAST_SGA EDMA_1_TCD.TCD[11].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_1_TCD_TCD11_CSR EDMA_1_TCD.TCD[11].CSR.R      /* TCD Control and Status */
#define EDMA_1_TCD_TCD11_BITER_ELINKNO EDMA_1_TCD.TCD[11].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD11_BITER_ELINKYES EDMA_1_TCD.TCD[11].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_CH12_CSR  EDMA_1_TCD.TCD[12].CH_CSR.R   /* Channel Control and Status */
#define EDMA_1_TCD_CH12_ES   EDMA_1_TCD.TCD[12].CH_ES.R    /* Channel Error Status */
#define EDMA_1_TCD_CH12_INT  EDMA_1_TCD.TCD[12].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_1_TCD_CH12_SBR  EDMA_1_TCD.TCD[12].CH_SBR.R   /* Channel System Bus */
#define EDMA_1_TCD_CH12_PRI  EDMA_1_TCD.TCD[12].CH_PRI.R   /* Channel Priority */
#define EDMA_1_TCD_TCD12_SADDR EDMA_1_TCD.TCD[12].SADDR.R  /* TCD Source Address */
#define EDMA_1_TCD_TCD12_SOFF EDMA_1_TCD.TCD[12].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_1_TCD_TCD12_ATTR EDMA_1_TCD.TCD[12].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_1_TCD_TCD12_NBYTES_MLOFFNO EDMA_1_TCD.TCD[12].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_1_TCD_TCD12_NBYTES_MLOFFYES EDMA_1_TCD.TCD[12].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_1_TCD_TCD12_SLAST_SDA EDMA_1_TCD.TCD[12].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_1_TCD_TCD12_DADDR EDMA_1_TCD.TCD[12].DADDR.R  /* TCD Destination Address */
#define EDMA_1_TCD_TCD12_DOFF EDMA_1_TCD.TCD[12].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_1_TCD_TCD12_CITER_ELINKNO EDMA_1_TCD.TCD[12].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD12_CITER_ELINKYES EDMA_1_TCD.TCD[12].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_TCD12_DLAST_SGA EDMA_1_TCD.TCD[12].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_1_TCD_TCD12_CSR EDMA_1_TCD.TCD[12].CSR.R      /* TCD Control and Status */
#define EDMA_1_TCD_TCD12_BITER_ELINKNO EDMA_1_TCD.TCD[12].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD12_BITER_ELINKYES EDMA_1_TCD.TCD[12].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_CH13_CSR  EDMA_1_TCD.TCD[13].CH_CSR.R   /* Channel Control and Status */
#define EDMA_1_TCD_CH13_ES   EDMA_1_TCD.TCD[13].CH_ES.R    /* Channel Error Status */
#define EDMA_1_TCD_CH13_INT  EDMA_1_TCD.TCD[13].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_1_TCD_CH13_SBR  EDMA_1_TCD.TCD[13].CH_SBR.R   /* Channel System Bus */
#define EDMA_1_TCD_CH13_PRI  EDMA_1_TCD.TCD[13].CH_PRI.R   /* Channel Priority */
#define EDMA_1_TCD_TCD13_SADDR EDMA_1_TCD.TCD[13].SADDR.R  /* TCD Source Address */
#define EDMA_1_TCD_TCD13_SOFF EDMA_1_TCD.TCD[13].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_1_TCD_TCD13_ATTR EDMA_1_TCD.TCD[13].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_1_TCD_TCD13_NBYTES_MLOFFNO EDMA_1_TCD.TCD[13].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_1_TCD_TCD13_NBYTES_MLOFFYES EDMA_1_TCD.TCD[13].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_1_TCD_TCD13_SLAST_SDA EDMA_1_TCD.TCD[13].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_1_TCD_TCD13_DADDR EDMA_1_TCD.TCD[13].DADDR.R  /* TCD Destination Address */
#define EDMA_1_TCD_TCD13_DOFF EDMA_1_TCD.TCD[13].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_1_TCD_TCD13_CITER_ELINKNO EDMA_1_TCD.TCD[13].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD13_CITER_ELINKYES EDMA_1_TCD.TCD[13].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_TCD13_DLAST_SGA EDMA_1_TCD.TCD[13].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_1_TCD_TCD13_CSR EDMA_1_TCD.TCD[13].CSR.R      /* TCD Control and Status */
#define EDMA_1_TCD_TCD13_BITER_ELINKNO EDMA_1_TCD.TCD[13].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD13_BITER_ELINKYES EDMA_1_TCD.TCD[13].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_CH14_CSR  EDMA_1_TCD.TCD[14].CH_CSR.R   /* Channel Control and Status */
#define EDMA_1_TCD_CH14_ES   EDMA_1_TCD.TCD[14].CH_ES.R    /* Channel Error Status */
#define EDMA_1_TCD_CH14_INT  EDMA_1_TCD.TCD[14].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_1_TCD_CH14_SBR  EDMA_1_TCD.TCD[14].CH_SBR.R   /* Channel System Bus */
#define EDMA_1_TCD_CH14_PRI  EDMA_1_TCD.TCD[14].CH_PRI.R   /* Channel Priority */
#define EDMA_1_TCD_TCD14_SADDR EDMA_1_TCD.TCD[14].SADDR.R  /* TCD Source Address */
#define EDMA_1_TCD_TCD14_SOFF EDMA_1_TCD.TCD[14].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_1_TCD_TCD14_ATTR EDMA_1_TCD.TCD[14].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_1_TCD_TCD14_NBYTES_MLOFFNO EDMA_1_TCD.TCD[14].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_1_TCD_TCD14_NBYTES_MLOFFYES EDMA_1_TCD.TCD[14].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_1_TCD_TCD14_SLAST_SDA EDMA_1_TCD.TCD[14].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_1_TCD_TCD14_DADDR EDMA_1_TCD.TCD[14].DADDR.R  /* TCD Destination Address */
#define EDMA_1_TCD_TCD14_DOFF EDMA_1_TCD.TCD[14].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_1_TCD_TCD14_CITER_ELINKNO EDMA_1_TCD.TCD[14].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD14_CITER_ELINKYES EDMA_1_TCD.TCD[14].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_TCD14_DLAST_SGA EDMA_1_TCD.TCD[14].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_1_TCD_TCD14_CSR EDMA_1_TCD.TCD[14].CSR.R      /* TCD Control and Status */
#define EDMA_1_TCD_TCD14_BITER_ELINKNO EDMA_1_TCD.TCD[14].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD14_BITER_ELINKYES EDMA_1_TCD.TCD[14].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_CH15_CSR  EDMA_1_TCD.TCD[15].CH_CSR.R   /* Channel Control and Status */
#define EDMA_1_TCD_CH15_ES   EDMA_1_TCD.TCD[15].CH_ES.R    /* Channel Error Status */
#define EDMA_1_TCD_CH15_INT  EDMA_1_TCD.TCD[15].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_1_TCD_CH15_SBR  EDMA_1_TCD.TCD[15].CH_SBR.R   /* Channel System Bus */
#define EDMA_1_TCD_CH15_PRI  EDMA_1_TCD.TCD[15].CH_PRI.R   /* Channel Priority */
#define EDMA_1_TCD_TCD15_SADDR EDMA_1_TCD.TCD[15].SADDR.R  /* TCD Source Address */
#define EDMA_1_TCD_TCD15_SOFF EDMA_1_TCD.TCD[15].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_1_TCD_TCD15_ATTR EDMA_1_TCD.TCD[15].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_1_TCD_TCD15_NBYTES_MLOFFNO EDMA_1_TCD.TCD[15].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_1_TCD_TCD15_NBYTES_MLOFFYES EDMA_1_TCD.TCD[15].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_1_TCD_TCD15_SLAST_SDA EDMA_1_TCD.TCD[15].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_1_TCD_TCD15_DADDR EDMA_1_TCD.TCD[15].DADDR.R  /* TCD Destination Address */
#define EDMA_1_TCD_TCD15_DOFF EDMA_1_TCD.TCD[15].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_1_TCD_TCD15_CITER_ELINKNO EDMA_1_TCD.TCD[15].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD15_CITER_ELINKYES EDMA_1_TCD.TCD[15].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_TCD15_DLAST_SGA EDMA_1_TCD.TCD[15].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_1_TCD_TCD15_CSR EDMA_1_TCD.TCD[15].CSR.R      /* TCD Control and Status */
#define EDMA_1_TCD_TCD15_BITER_ELINKNO EDMA_1_TCD.TCD[15].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD15_BITER_ELINKYES EDMA_1_TCD.TCD[15].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_CH16_CSR  EDMA_1_TCD.TCD[16].CH_CSR.R   /* Channel Control and Status */
#define EDMA_1_TCD_CH16_ES   EDMA_1_TCD.TCD[16].CH_ES.R    /* Channel Error Status */
#define EDMA_1_TCD_CH16_INT  EDMA_1_TCD.TCD[16].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_1_TCD_CH16_SBR  EDMA_1_TCD.TCD[16].CH_SBR.R   /* Channel System Bus */
#define EDMA_1_TCD_CH16_PRI  EDMA_1_TCD.TCD[16].CH_PRI.R   /* Channel Priority */
#define EDMA_1_TCD_TCD16_SADDR EDMA_1_TCD.TCD[16].SADDR.R  /* TCD Source Address */
#define EDMA_1_TCD_TCD16_SOFF EDMA_1_TCD.TCD[16].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_1_TCD_TCD16_ATTR EDMA_1_TCD.TCD[16].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_1_TCD_TCD16_NBYTES_MLOFFNO EDMA_1_TCD.TCD[16].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_1_TCD_TCD16_NBYTES_MLOFFYES EDMA_1_TCD.TCD[16].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_1_TCD_TCD16_SLAST_SDA EDMA_1_TCD.TCD[16].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_1_TCD_TCD16_DADDR EDMA_1_TCD.TCD[16].DADDR.R  /* TCD Destination Address */
#define EDMA_1_TCD_TCD16_DOFF EDMA_1_TCD.TCD[16].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_1_TCD_TCD16_CITER_ELINKNO EDMA_1_TCD.TCD[16].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD16_CITER_ELINKYES EDMA_1_TCD.TCD[16].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_TCD16_DLAST_SGA EDMA_1_TCD.TCD[16].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_1_TCD_TCD16_CSR EDMA_1_TCD.TCD[16].CSR.R      /* TCD Control and Status */
#define EDMA_1_TCD_TCD16_BITER_ELINKNO EDMA_1_TCD.TCD[16].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD16_BITER_ELINKYES EDMA_1_TCD.TCD[16].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_CH17_CSR  EDMA_1_TCD.TCD[17].CH_CSR.R   /* Channel Control and Status */
#define EDMA_1_TCD_CH17_ES   EDMA_1_TCD.TCD[17].CH_ES.R    /* Channel Error Status */
#define EDMA_1_TCD_CH17_INT  EDMA_1_TCD.TCD[17].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_1_TCD_CH17_SBR  EDMA_1_TCD.TCD[17].CH_SBR.R   /* Channel System Bus */
#define EDMA_1_TCD_CH17_PRI  EDMA_1_TCD.TCD[17].CH_PRI.R   /* Channel Priority */
#define EDMA_1_TCD_TCD17_SADDR EDMA_1_TCD.TCD[17].SADDR.R  /* TCD Source Address */
#define EDMA_1_TCD_TCD17_SOFF EDMA_1_TCD.TCD[17].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_1_TCD_TCD17_ATTR EDMA_1_TCD.TCD[17].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_1_TCD_TCD17_NBYTES_MLOFFNO EDMA_1_TCD.TCD[17].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_1_TCD_TCD17_NBYTES_MLOFFYES EDMA_1_TCD.TCD[17].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_1_TCD_TCD17_SLAST_SDA EDMA_1_TCD.TCD[17].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_1_TCD_TCD17_DADDR EDMA_1_TCD.TCD[17].DADDR.R  /* TCD Destination Address */
#define EDMA_1_TCD_TCD17_DOFF EDMA_1_TCD.TCD[17].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_1_TCD_TCD17_CITER_ELINKNO EDMA_1_TCD.TCD[17].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD17_CITER_ELINKYES EDMA_1_TCD.TCD[17].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_TCD17_DLAST_SGA EDMA_1_TCD.TCD[17].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_1_TCD_TCD17_CSR EDMA_1_TCD.TCD[17].CSR.R      /* TCD Control and Status */
#define EDMA_1_TCD_TCD17_BITER_ELINKNO EDMA_1_TCD.TCD[17].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD17_BITER_ELINKYES EDMA_1_TCD.TCD[17].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_CH18_CSR  EDMA_1_TCD.TCD[18].CH_CSR.R   /* Channel Control and Status */
#define EDMA_1_TCD_CH18_ES   EDMA_1_TCD.TCD[18].CH_ES.R    /* Channel Error Status */
#define EDMA_1_TCD_CH18_INT  EDMA_1_TCD.TCD[18].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_1_TCD_CH18_SBR  EDMA_1_TCD.TCD[18].CH_SBR.R   /* Channel System Bus */
#define EDMA_1_TCD_CH18_PRI  EDMA_1_TCD.TCD[18].CH_PRI.R   /* Channel Priority */
#define EDMA_1_TCD_TCD18_SADDR EDMA_1_TCD.TCD[18].SADDR.R  /* TCD Source Address */
#define EDMA_1_TCD_TCD18_SOFF EDMA_1_TCD.TCD[18].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_1_TCD_TCD18_ATTR EDMA_1_TCD.TCD[18].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_1_TCD_TCD18_NBYTES_MLOFFNO EDMA_1_TCD.TCD[18].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_1_TCD_TCD18_NBYTES_MLOFFYES EDMA_1_TCD.TCD[18].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_1_TCD_TCD18_SLAST_SDA EDMA_1_TCD.TCD[18].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_1_TCD_TCD18_DADDR EDMA_1_TCD.TCD[18].DADDR.R  /* TCD Destination Address */
#define EDMA_1_TCD_TCD18_DOFF EDMA_1_TCD.TCD[18].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_1_TCD_TCD18_CITER_ELINKNO EDMA_1_TCD.TCD[18].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD18_CITER_ELINKYES EDMA_1_TCD.TCD[18].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_TCD18_DLAST_SGA EDMA_1_TCD.TCD[18].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_1_TCD_TCD18_CSR EDMA_1_TCD.TCD[18].CSR.R      /* TCD Control and Status */
#define EDMA_1_TCD_TCD18_BITER_ELINKNO EDMA_1_TCD.TCD[18].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD18_BITER_ELINKYES EDMA_1_TCD.TCD[18].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_CH19_CSR  EDMA_1_TCD.TCD[19].CH_CSR.R   /* Channel Control and Status */
#define EDMA_1_TCD_CH19_ES   EDMA_1_TCD.TCD[19].CH_ES.R    /* Channel Error Status */
#define EDMA_1_TCD_CH19_INT  EDMA_1_TCD.TCD[19].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_1_TCD_CH19_SBR  EDMA_1_TCD.TCD[19].CH_SBR.R   /* Channel System Bus */
#define EDMA_1_TCD_CH19_PRI  EDMA_1_TCD.TCD[19].CH_PRI.R   /* Channel Priority */
#define EDMA_1_TCD_TCD19_SADDR EDMA_1_TCD.TCD[19].SADDR.R  /* TCD Source Address */
#define EDMA_1_TCD_TCD19_SOFF EDMA_1_TCD.TCD[19].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_1_TCD_TCD19_ATTR EDMA_1_TCD.TCD[19].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_1_TCD_TCD19_NBYTES_MLOFFNO EDMA_1_TCD.TCD[19].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_1_TCD_TCD19_NBYTES_MLOFFYES EDMA_1_TCD.TCD[19].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_1_TCD_TCD19_SLAST_SDA EDMA_1_TCD.TCD[19].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_1_TCD_TCD19_DADDR EDMA_1_TCD.TCD[19].DADDR.R  /* TCD Destination Address */
#define EDMA_1_TCD_TCD19_DOFF EDMA_1_TCD.TCD[19].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_1_TCD_TCD19_CITER_ELINKNO EDMA_1_TCD.TCD[19].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD19_CITER_ELINKYES EDMA_1_TCD.TCD[19].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_TCD19_DLAST_SGA EDMA_1_TCD.TCD[19].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_1_TCD_TCD19_CSR EDMA_1_TCD.TCD[19].CSR.R      /* TCD Control and Status */
#define EDMA_1_TCD_TCD19_BITER_ELINKNO EDMA_1_TCD.TCD[19].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD19_BITER_ELINKYES EDMA_1_TCD.TCD[19].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_CH20_CSR  EDMA_1_TCD.TCD[20].CH_CSR.R   /* Channel Control and Status */
#define EDMA_1_TCD_CH20_ES   EDMA_1_TCD.TCD[20].CH_ES.R    /* Channel Error Status */
#define EDMA_1_TCD_CH20_INT  EDMA_1_TCD.TCD[20].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_1_TCD_CH20_SBR  EDMA_1_TCD.TCD[20].CH_SBR.R   /* Channel System Bus */
#define EDMA_1_TCD_CH20_PRI  EDMA_1_TCD.TCD[20].CH_PRI.R   /* Channel Priority */
#define EDMA_1_TCD_TCD20_SADDR EDMA_1_TCD.TCD[20].SADDR.R  /* TCD Source Address */
#define EDMA_1_TCD_TCD20_SOFF EDMA_1_TCD.TCD[20].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_1_TCD_TCD20_ATTR EDMA_1_TCD.TCD[20].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_1_TCD_TCD20_NBYTES_MLOFFNO EDMA_1_TCD.TCD[20].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_1_TCD_TCD20_NBYTES_MLOFFYES EDMA_1_TCD.TCD[20].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_1_TCD_TCD20_SLAST_SDA EDMA_1_TCD.TCD[20].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_1_TCD_TCD20_DADDR EDMA_1_TCD.TCD[20].DADDR.R  /* TCD Destination Address */
#define EDMA_1_TCD_TCD20_DOFF EDMA_1_TCD.TCD[20].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_1_TCD_TCD20_CITER_ELINKNO EDMA_1_TCD.TCD[20].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD20_CITER_ELINKYES EDMA_1_TCD.TCD[20].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_TCD20_DLAST_SGA EDMA_1_TCD.TCD[20].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_1_TCD_TCD20_CSR EDMA_1_TCD.TCD[20].CSR.R      /* TCD Control and Status */
#define EDMA_1_TCD_TCD20_BITER_ELINKNO EDMA_1_TCD.TCD[20].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD20_BITER_ELINKYES EDMA_1_TCD.TCD[20].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_CH21_CSR  EDMA_1_TCD.TCD[21].CH_CSR.R   /* Channel Control and Status */
#define EDMA_1_TCD_CH21_ES   EDMA_1_TCD.TCD[21].CH_ES.R    /* Channel Error Status */
#define EDMA_1_TCD_CH21_INT  EDMA_1_TCD.TCD[21].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_1_TCD_CH21_SBR  EDMA_1_TCD.TCD[21].CH_SBR.R   /* Channel System Bus */
#define EDMA_1_TCD_CH21_PRI  EDMA_1_TCD.TCD[21].CH_PRI.R   /* Channel Priority */
#define EDMA_1_TCD_TCD21_SADDR EDMA_1_TCD.TCD[21].SADDR.R  /* TCD Source Address */
#define EDMA_1_TCD_TCD21_SOFF EDMA_1_TCD.TCD[21].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_1_TCD_TCD21_ATTR EDMA_1_TCD.TCD[21].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_1_TCD_TCD21_NBYTES_MLOFFNO EDMA_1_TCD.TCD[21].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_1_TCD_TCD21_NBYTES_MLOFFYES EDMA_1_TCD.TCD[21].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_1_TCD_TCD21_SLAST_SDA EDMA_1_TCD.TCD[21].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_1_TCD_TCD21_DADDR EDMA_1_TCD.TCD[21].DADDR.R  /* TCD Destination Address */
#define EDMA_1_TCD_TCD21_DOFF EDMA_1_TCD.TCD[21].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_1_TCD_TCD21_CITER_ELINKNO EDMA_1_TCD.TCD[21].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD21_CITER_ELINKYES EDMA_1_TCD.TCD[21].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_TCD21_DLAST_SGA EDMA_1_TCD.TCD[21].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_1_TCD_TCD21_CSR EDMA_1_TCD.TCD[21].CSR.R      /* TCD Control and Status */
#define EDMA_1_TCD_TCD21_BITER_ELINKNO EDMA_1_TCD.TCD[21].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD21_BITER_ELINKYES EDMA_1_TCD.TCD[21].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_CH22_CSR  EDMA_1_TCD.TCD[22].CH_CSR.R   /* Channel Control and Status */
#define EDMA_1_TCD_CH22_ES   EDMA_1_TCD.TCD[22].CH_ES.R    /* Channel Error Status */
#define EDMA_1_TCD_CH22_INT  EDMA_1_TCD.TCD[22].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_1_TCD_CH22_SBR  EDMA_1_TCD.TCD[22].CH_SBR.R   /* Channel System Bus */
#define EDMA_1_TCD_CH22_PRI  EDMA_1_TCD.TCD[22].CH_PRI.R   /* Channel Priority */
#define EDMA_1_TCD_TCD22_SADDR EDMA_1_TCD.TCD[22].SADDR.R  /* TCD Source Address */
#define EDMA_1_TCD_TCD22_SOFF EDMA_1_TCD.TCD[22].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_1_TCD_TCD22_ATTR EDMA_1_TCD.TCD[22].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_1_TCD_TCD22_NBYTES_MLOFFNO EDMA_1_TCD.TCD[22].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_1_TCD_TCD22_NBYTES_MLOFFYES EDMA_1_TCD.TCD[22].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_1_TCD_TCD22_SLAST_SDA EDMA_1_TCD.TCD[22].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_1_TCD_TCD22_DADDR EDMA_1_TCD.TCD[22].DADDR.R  /* TCD Destination Address */
#define EDMA_1_TCD_TCD22_DOFF EDMA_1_TCD.TCD[22].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_1_TCD_TCD22_CITER_ELINKNO EDMA_1_TCD.TCD[22].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD22_CITER_ELINKYES EDMA_1_TCD.TCD[22].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_TCD22_DLAST_SGA EDMA_1_TCD.TCD[22].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_1_TCD_TCD22_CSR EDMA_1_TCD.TCD[22].CSR.R      /* TCD Control and Status */
#define EDMA_1_TCD_TCD22_BITER_ELINKNO EDMA_1_TCD.TCD[22].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD22_BITER_ELINKYES EDMA_1_TCD.TCD[22].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_CH23_CSR  EDMA_1_TCD.TCD[23].CH_CSR.R   /* Channel Control and Status */
#define EDMA_1_TCD_CH23_ES   EDMA_1_TCD.TCD[23].CH_ES.R    /* Channel Error Status */
#define EDMA_1_TCD_CH23_INT  EDMA_1_TCD.TCD[23].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_1_TCD_CH23_SBR  EDMA_1_TCD.TCD[23].CH_SBR.R   /* Channel System Bus */
#define EDMA_1_TCD_CH23_PRI  EDMA_1_TCD.TCD[23].CH_PRI.R   /* Channel Priority */
#define EDMA_1_TCD_TCD23_SADDR EDMA_1_TCD.TCD[23].SADDR.R  /* TCD Source Address */
#define EDMA_1_TCD_TCD23_SOFF EDMA_1_TCD.TCD[23].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_1_TCD_TCD23_ATTR EDMA_1_TCD.TCD[23].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_1_TCD_TCD23_NBYTES_MLOFFNO EDMA_1_TCD.TCD[23].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_1_TCD_TCD23_NBYTES_MLOFFYES EDMA_1_TCD.TCD[23].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_1_TCD_TCD23_SLAST_SDA EDMA_1_TCD.TCD[23].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_1_TCD_TCD23_DADDR EDMA_1_TCD.TCD[23].DADDR.R  /* TCD Destination Address */
#define EDMA_1_TCD_TCD23_DOFF EDMA_1_TCD.TCD[23].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_1_TCD_TCD23_CITER_ELINKNO EDMA_1_TCD.TCD[23].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD23_CITER_ELINKYES EDMA_1_TCD.TCD[23].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_TCD23_DLAST_SGA EDMA_1_TCD.TCD[23].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_1_TCD_TCD23_CSR EDMA_1_TCD.TCD[23].CSR.R      /* TCD Control and Status */
#define EDMA_1_TCD_TCD23_BITER_ELINKNO EDMA_1_TCD.TCD[23].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD23_BITER_ELINKYES EDMA_1_TCD.TCD[23].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_CH24_CSR  EDMA_1_TCD.TCD[24].CH_CSR.R   /* Channel Control and Status */
#define EDMA_1_TCD_CH24_ES   EDMA_1_TCD.TCD[24].CH_ES.R    /* Channel Error Status */
#define EDMA_1_TCD_CH24_INT  EDMA_1_TCD.TCD[24].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_1_TCD_CH24_SBR  EDMA_1_TCD.TCD[24].CH_SBR.R   /* Channel System Bus */
#define EDMA_1_TCD_CH24_PRI  EDMA_1_TCD.TCD[24].CH_PRI.R   /* Channel Priority */
#define EDMA_1_TCD_TCD24_SADDR EDMA_1_TCD.TCD[24].SADDR.R  /* TCD Source Address */
#define EDMA_1_TCD_TCD24_SOFF EDMA_1_TCD.TCD[24].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_1_TCD_TCD24_ATTR EDMA_1_TCD.TCD[24].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_1_TCD_TCD24_NBYTES_MLOFFNO EDMA_1_TCD.TCD[24].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_1_TCD_TCD24_NBYTES_MLOFFYES EDMA_1_TCD.TCD[24].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_1_TCD_TCD24_SLAST_SDA EDMA_1_TCD.TCD[24].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_1_TCD_TCD24_DADDR EDMA_1_TCD.TCD[24].DADDR.R  /* TCD Destination Address */
#define EDMA_1_TCD_TCD24_DOFF EDMA_1_TCD.TCD[24].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_1_TCD_TCD24_CITER_ELINKNO EDMA_1_TCD.TCD[24].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD24_CITER_ELINKYES EDMA_1_TCD.TCD[24].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_TCD24_DLAST_SGA EDMA_1_TCD.TCD[24].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_1_TCD_TCD24_CSR EDMA_1_TCD.TCD[24].CSR.R      /* TCD Control and Status */
#define EDMA_1_TCD_TCD24_BITER_ELINKNO EDMA_1_TCD.TCD[24].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD24_BITER_ELINKYES EDMA_1_TCD.TCD[24].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_CH25_CSR  EDMA_1_TCD.TCD[25].CH_CSR.R   /* Channel Control and Status */
#define EDMA_1_TCD_CH25_ES   EDMA_1_TCD.TCD[25].CH_ES.R    /* Channel Error Status */
#define EDMA_1_TCD_CH25_INT  EDMA_1_TCD.TCD[25].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_1_TCD_CH25_SBR  EDMA_1_TCD.TCD[25].CH_SBR.R   /* Channel System Bus */
#define EDMA_1_TCD_CH25_PRI  EDMA_1_TCD.TCD[25].CH_PRI.R   /* Channel Priority */
#define EDMA_1_TCD_TCD25_SADDR EDMA_1_TCD.TCD[25].SADDR.R  /* TCD Source Address */
#define EDMA_1_TCD_TCD25_SOFF EDMA_1_TCD.TCD[25].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_1_TCD_TCD25_ATTR EDMA_1_TCD.TCD[25].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_1_TCD_TCD25_NBYTES_MLOFFNO EDMA_1_TCD.TCD[25].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_1_TCD_TCD25_NBYTES_MLOFFYES EDMA_1_TCD.TCD[25].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_1_TCD_TCD25_SLAST_SDA EDMA_1_TCD.TCD[25].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_1_TCD_TCD25_DADDR EDMA_1_TCD.TCD[25].DADDR.R  /* TCD Destination Address */
#define EDMA_1_TCD_TCD25_DOFF EDMA_1_TCD.TCD[25].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_1_TCD_TCD25_CITER_ELINKNO EDMA_1_TCD.TCD[25].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD25_CITER_ELINKYES EDMA_1_TCD.TCD[25].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_TCD25_DLAST_SGA EDMA_1_TCD.TCD[25].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_1_TCD_TCD25_CSR EDMA_1_TCD.TCD[25].CSR.R      /* TCD Control and Status */
#define EDMA_1_TCD_TCD25_BITER_ELINKNO EDMA_1_TCD.TCD[25].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD25_BITER_ELINKYES EDMA_1_TCD.TCD[25].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_CH26_CSR  EDMA_1_TCD.TCD[26].CH_CSR.R   /* Channel Control and Status */
#define EDMA_1_TCD_CH26_ES   EDMA_1_TCD.TCD[26].CH_ES.R    /* Channel Error Status */
#define EDMA_1_TCD_CH26_INT  EDMA_1_TCD.TCD[26].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_1_TCD_CH26_SBR  EDMA_1_TCD.TCD[26].CH_SBR.R   /* Channel System Bus */
#define EDMA_1_TCD_CH26_PRI  EDMA_1_TCD.TCD[26].CH_PRI.R   /* Channel Priority */
#define EDMA_1_TCD_TCD26_SADDR EDMA_1_TCD.TCD[26].SADDR.R  /* TCD Source Address */
#define EDMA_1_TCD_TCD26_SOFF EDMA_1_TCD.TCD[26].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_1_TCD_TCD26_ATTR EDMA_1_TCD.TCD[26].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_1_TCD_TCD26_NBYTES_MLOFFNO EDMA_1_TCD.TCD[26].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_1_TCD_TCD26_NBYTES_MLOFFYES EDMA_1_TCD.TCD[26].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_1_TCD_TCD26_SLAST_SDA EDMA_1_TCD.TCD[26].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_1_TCD_TCD26_DADDR EDMA_1_TCD.TCD[26].DADDR.R  /* TCD Destination Address */
#define EDMA_1_TCD_TCD26_DOFF EDMA_1_TCD.TCD[26].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_1_TCD_TCD26_CITER_ELINKNO EDMA_1_TCD.TCD[26].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD26_CITER_ELINKYES EDMA_1_TCD.TCD[26].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_TCD26_DLAST_SGA EDMA_1_TCD.TCD[26].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_1_TCD_TCD26_CSR EDMA_1_TCD.TCD[26].CSR.R      /* TCD Control and Status */
#define EDMA_1_TCD_TCD26_BITER_ELINKNO EDMA_1_TCD.TCD[26].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD26_BITER_ELINKYES EDMA_1_TCD.TCD[26].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_CH27_CSR  EDMA_1_TCD.TCD[27].CH_CSR.R   /* Channel Control and Status */
#define EDMA_1_TCD_CH27_ES   EDMA_1_TCD.TCD[27].CH_ES.R    /* Channel Error Status */
#define EDMA_1_TCD_CH27_INT  EDMA_1_TCD.TCD[27].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_1_TCD_CH27_SBR  EDMA_1_TCD.TCD[27].CH_SBR.R   /* Channel System Bus */
#define EDMA_1_TCD_CH27_PRI  EDMA_1_TCD.TCD[27].CH_PRI.R   /* Channel Priority */
#define EDMA_1_TCD_TCD27_SADDR EDMA_1_TCD.TCD[27].SADDR.R  /* TCD Source Address */
#define EDMA_1_TCD_TCD27_SOFF EDMA_1_TCD.TCD[27].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_1_TCD_TCD27_ATTR EDMA_1_TCD.TCD[27].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_1_TCD_TCD27_NBYTES_MLOFFNO EDMA_1_TCD.TCD[27].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_1_TCD_TCD27_NBYTES_MLOFFYES EDMA_1_TCD.TCD[27].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_1_TCD_TCD27_SLAST_SDA EDMA_1_TCD.TCD[27].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_1_TCD_TCD27_DADDR EDMA_1_TCD.TCD[27].DADDR.R  /* TCD Destination Address */
#define EDMA_1_TCD_TCD27_DOFF EDMA_1_TCD.TCD[27].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_1_TCD_TCD27_CITER_ELINKNO EDMA_1_TCD.TCD[27].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD27_CITER_ELINKYES EDMA_1_TCD.TCD[27].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_TCD27_DLAST_SGA EDMA_1_TCD.TCD[27].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_1_TCD_TCD27_CSR EDMA_1_TCD.TCD[27].CSR.R      /* TCD Control and Status */
#define EDMA_1_TCD_TCD27_BITER_ELINKNO EDMA_1_TCD.TCD[27].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD27_BITER_ELINKYES EDMA_1_TCD.TCD[27].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_CH28_CSR  EDMA_1_TCD.TCD[28].CH_CSR.R   /* Channel Control and Status */
#define EDMA_1_TCD_CH28_ES   EDMA_1_TCD.TCD[28].CH_ES.R    /* Channel Error Status */
#define EDMA_1_TCD_CH28_INT  EDMA_1_TCD.TCD[28].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_1_TCD_CH28_SBR  EDMA_1_TCD.TCD[28].CH_SBR.R   /* Channel System Bus */
#define EDMA_1_TCD_CH28_PRI  EDMA_1_TCD.TCD[28].CH_PRI.R   /* Channel Priority */
#define EDMA_1_TCD_TCD28_SADDR EDMA_1_TCD.TCD[28].SADDR.R  /* TCD Source Address */
#define EDMA_1_TCD_TCD28_SOFF EDMA_1_TCD.TCD[28].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_1_TCD_TCD28_ATTR EDMA_1_TCD.TCD[28].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_1_TCD_TCD28_NBYTES_MLOFFNO EDMA_1_TCD.TCD[28].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_1_TCD_TCD28_NBYTES_MLOFFYES EDMA_1_TCD.TCD[28].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_1_TCD_TCD28_SLAST_SDA EDMA_1_TCD.TCD[28].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_1_TCD_TCD28_DADDR EDMA_1_TCD.TCD[28].DADDR.R  /* TCD Destination Address */
#define EDMA_1_TCD_TCD28_DOFF EDMA_1_TCD.TCD[28].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_1_TCD_TCD28_CITER_ELINKNO EDMA_1_TCD.TCD[28].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD28_CITER_ELINKYES EDMA_1_TCD.TCD[28].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_TCD28_DLAST_SGA EDMA_1_TCD.TCD[28].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_1_TCD_TCD28_CSR EDMA_1_TCD.TCD[28].CSR.R      /* TCD Control and Status */
#define EDMA_1_TCD_TCD28_BITER_ELINKNO EDMA_1_TCD.TCD[28].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD28_BITER_ELINKYES EDMA_1_TCD.TCD[28].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_CH29_CSR  EDMA_1_TCD.TCD[29].CH_CSR.R   /* Channel Control and Status */
#define EDMA_1_TCD_CH29_ES   EDMA_1_TCD.TCD[29].CH_ES.R    /* Channel Error Status */
#define EDMA_1_TCD_CH29_INT  EDMA_1_TCD.TCD[29].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_1_TCD_CH29_SBR  EDMA_1_TCD.TCD[29].CH_SBR.R   /* Channel System Bus */
#define EDMA_1_TCD_CH29_PRI  EDMA_1_TCD.TCD[29].CH_PRI.R   /* Channel Priority */
#define EDMA_1_TCD_TCD29_SADDR EDMA_1_TCD.TCD[29].SADDR.R  /* TCD Source Address */
#define EDMA_1_TCD_TCD29_SOFF EDMA_1_TCD.TCD[29].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_1_TCD_TCD29_ATTR EDMA_1_TCD.TCD[29].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_1_TCD_TCD29_NBYTES_MLOFFNO EDMA_1_TCD.TCD[29].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_1_TCD_TCD29_NBYTES_MLOFFYES EDMA_1_TCD.TCD[29].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_1_TCD_TCD29_SLAST_SDA EDMA_1_TCD.TCD[29].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_1_TCD_TCD29_DADDR EDMA_1_TCD.TCD[29].DADDR.R  /* TCD Destination Address */
#define EDMA_1_TCD_TCD29_DOFF EDMA_1_TCD.TCD[29].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_1_TCD_TCD29_CITER_ELINKNO EDMA_1_TCD.TCD[29].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD29_CITER_ELINKYES EDMA_1_TCD.TCD[29].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_TCD29_DLAST_SGA EDMA_1_TCD.TCD[29].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_1_TCD_TCD29_CSR EDMA_1_TCD.TCD[29].CSR.R      /* TCD Control and Status */
#define EDMA_1_TCD_TCD29_BITER_ELINKNO EDMA_1_TCD.TCD[29].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD29_BITER_ELINKYES EDMA_1_TCD.TCD[29].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_CH30_CSR  EDMA_1_TCD.TCD[30].CH_CSR.R   /* Channel Control and Status */
#define EDMA_1_TCD_CH30_ES   EDMA_1_TCD.TCD[30].CH_ES.R    /* Channel Error Status */
#define EDMA_1_TCD_CH30_INT  EDMA_1_TCD.TCD[30].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_1_TCD_CH30_SBR  EDMA_1_TCD.TCD[30].CH_SBR.R   /* Channel System Bus */
#define EDMA_1_TCD_CH30_PRI  EDMA_1_TCD.TCD[30].CH_PRI.R   /* Channel Priority */
#define EDMA_1_TCD_TCD30_SADDR EDMA_1_TCD.TCD[30].SADDR.R  /* TCD Source Address */
#define EDMA_1_TCD_TCD30_SOFF EDMA_1_TCD.TCD[30].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_1_TCD_TCD30_ATTR EDMA_1_TCD.TCD[30].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_1_TCD_TCD30_NBYTES_MLOFFNO EDMA_1_TCD.TCD[30].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_1_TCD_TCD30_NBYTES_MLOFFYES EDMA_1_TCD.TCD[30].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_1_TCD_TCD30_SLAST_SDA EDMA_1_TCD.TCD[30].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_1_TCD_TCD30_DADDR EDMA_1_TCD.TCD[30].DADDR.R  /* TCD Destination Address */
#define EDMA_1_TCD_TCD30_DOFF EDMA_1_TCD.TCD[30].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_1_TCD_TCD30_CITER_ELINKNO EDMA_1_TCD.TCD[30].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD30_CITER_ELINKYES EDMA_1_TCD.TCD[30].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_TCD30_DLAST_SGA EDMA_1_TCD.TCD[30].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_1_TCD_TCD30_CSR EDMA_1_TCD.TCD[30].CSR.R      /* TCD Control and Status */
#define EDMA_1_TCD_TCD30_BITER_ELINKNO EDMA_1_TCD.TCD[30].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD30_BITER_ELINKYES EDMA_1_TCD.TCD[30].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_CH31_CSR  EDMA_1_TCD.TCD[31].CH_CSR.R   /* Channel Control and Status */
#define EDMA_1_TCD_CH31_ES   EDMA_1_TCD.TCD[31].CH_ES.R    /* Channel Error Status */
#define EDMA_1_TCD_CH31_INT  EDMA_1_TCD.TCD[31].CH_INT.R   /* Channel Interrupt Status */
#define EDMA_1_TCD_CH31_SBR  EDMA_1_TCD.TCD[31].CH_SBR.R   /* Channel System Bus */
#define EDMA_1_TCD_CH31_PRI  EDMA_1_TCD.TCD[31].CH_PRI.R   /* Channel Priority */
#define EDMA_1_TCD_TCD31_SADDR EDMA_1_TCD.TCD[31].SADDR.R  /* TCD Source Address */
#define EDMA_1_TCD_TCD31_SOFF EDMA_1_TCD.TCD[31].SOFF.R    /* TCD Signed Source Address Offset */
#define EDMA_1_TCD_TCD31_ATTR EDMA_1_TCD.TCD[31].ATTR.R    /* TCD Transfer Attributes */
#define EDMA_1_TCD_TCD31_NBYTES_MLOFFNO EDMA_1_TCD.TCD[31].NBYTES.NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_1_TCD_TCD31_NBYTES_MLOFFYES EDMA_1_TCD.TCD[31].NBYTES.NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_1_TCD_TCD31_SLAST_SDA EDMA_1_TCD.TCD[31].SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_1_TCD_TCD31_DADDR EDMA_1_TCD.TCD[31].DADDR.R  /* TCD Destination Address */
#define EDMA_1_TCD_TCD31_DOFF EDMA_1_TCD.TCD[31].DOFF.R    /* TCD Signed Destination Address Offset */
#define EDMA_1_TCD_TCD31_CITER_ELINKNO EDMA_1_TCD.TCD[31].CITER.CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD31_CITER_ELINKYES EDMA_1_TCD.TCD[31].CITER.CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_1_TCD_TCD31_DLAST_SGA EDMA_1_TCD.TCD[31].DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_1_TCD_TCD31_CSR EDMA_1_TCD.TCD[31].CSR.R      /* TCD Control and Status */
#define EDMA_1_TCD_TCD31_BITER_ELINKNO EDMA_1_TCD.TCD[31].BITER.BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_1_TCD_TCD31_BITER_ELINKYES EDMA_1_TCD.TCD[31].BITER.BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */

/* ocotp_gpr */
#define OCOTP_GPR_OCOTP_GPR_0 OCOTP_GPR.OCOTP_GPR_0.R      /* Boot Configuration Register 1 */
#define OCOTP_GPR_OCOTP_GPR_1 OCOTP_GPR.OCOTP_GPR_1.R      /* Boot Configuration Register 1 */

#ifdef __MWERKS__
#pragma pop
#endif
#ifdef __ghs__
#pragma ghs endnowarning
#endif
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif
#ifdef  __cplusplus
}
#endif
#endif /* ifdef _S32G274A_H */
